
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027d8c  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002f0  20000000  00039d8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005968  200002f0  0003a080  000302f0  2**4
                  ALLOC
  3 .stack        00002000  20005c58  0003f9e8  000302f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030318  2**0
                  CONTENTS, READONLY
  6 .debug_info   00122a12  00000000  00000000  00030371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010f6a  00000000  00000000  00152d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00012353  00000000  00000000  00163ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000032c0  00000000  00000000  00176040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002ec8  00000000  00000000  00179300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00041688  00000000  00000000  0017c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b472  00000000  00000000  001bd850  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000be6c7  00000000  00000000  00218cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000be1c  00000000  00000000  002d738c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	58 7c 00 20 29 a1 02 00 21 a2 02 00 21 a2 02 00     X|. )...!...!...
	...
   1202c:	2d 91 01 00 00 00 00 00 00 00 00 00 51 92 01 00     -...........Q...
   1203c:	99 92 01 00 21 a2 02 00 21 a2 02 00 21 a2 02 00     ....!...!...!...
   1204c:	4d 61 02 00 79 56 02 00 21 a2 02 00 09 2e 01 00     Ma..yV..!.......
   1205c:	21 a2 02 00 4d 2f 01 00 f1 67 02 00 09 68 02 00     !...M/...g...h..
   1206c:	21 68 02 00 39 68 02 00 51 68 02 00 69 68 02 00     !h..9h..Qh..ih..
   1207c:	71 a0 02 00 85 a0 02 00 99 a0 02 00 19 6e 01 00     q............n..
   1208c:	2d 6e 01 00 41 6e 01 00 00 00 00 00 00 00 00 00     -n..An..........
   1209c:	91 2c 01 00 21 a2 02 00 cd 2d 01 00 21 a2 02 00     .,..!....-..!...
   120ac:	21 a2 02 00 00 00 00 00                             !.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002f0 	.word	0x200002f0
   120d4:	00000000 	.word	0x00000000
   120d8:	00039d8c 	.word	0x00039d8c

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002f4 	.word	0x200002f4
   12108:	00039d8c 	.word	0x00039d8c
   1210c:	00039d8c 	.word	0x00039d8c
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223c      	movs	r2, #60	; 0x3c
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	20004734 	.word	0x20004734
   12224:	000144f1 	.word	0x000144f1

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223c      	movs	r2, #60	; 0x3c
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	20004734 	.word	0x20004734
   1227c:	000144f1 	.word	0x000144f1

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000030c 	.word	0x2000030c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000030c 	.word	0x2000030c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000030c 	.word	0x2000030c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00012a8d 	.word	0x00012a8d
   124d8:	000129ed 	.word	0x000129ed

000124dc <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b082      	sub	sp, #8
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12502:	1d3b      	adds	r3, r7, #4
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d018      	beq.n	1253c <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   1250a:	e00f      	b.n	1252c <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d3b      	adds	r3, r7, #4
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2d9      	uxtb	r1, r3
   12518:	2318      	movs	r3, #24
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	781c      	ldrb	r4, [r3, #0]
   1251e:	1d7b      	adds	r3, r7, #5
   12520:	781a      	ldrb	r2, [r3, #0]
   12522:	1dfb      	adds	r3, r7, #7
   12524:	7818      	ldrb	r0, [r3, #0]
   12526:	0023      	movs	r3, r4
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <gfx_mono_generic_draw_filled_rect+0x68>)
   1252a:	47a0      	blx	r4
	while (height-- > 0) {
   1252c:	1d3b      	adds	r3, r7, #4
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	1d3a      	adds	r2, r7, #4
   12532:	1e59      	subs	r1, r3, #1
   12534:	7011      	strb	r1, [r2, #0]
   12536:	2b00      	cmp	r3, #0
   12538:	d1e8      	bne.n	1250c <gfx_mono_generic_draw_filled_rect+0x30>
   1253a:	e000      	b.n	1253e <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   1253c:	46c0      	nop			; (mov r8, r8)
	}
}
   1253e:	46bd      	mov	sp, r7
   12540:	b002      	add	sp, #8
   12542:	bdb0      	pop	{r4, r5, r7, pc}
   12544:	00012315 	.word	0x00012315

00012548 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12548:	b590      	push	{r4, r7, lr}
   1254a:	b087      	sub	sp, #28
   1254c:	af00      	add	r7, sp, #0
   1254e:	0004      	movs	r4, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	603b      	str	r3, [r7, #0]
   12556:	1dfb      	adds	r3, r7, #7
   12558:	1c22      	adds	r2, r4, #0
   1255a:	701a      	strb	r2, [r3, #0]
   1255c:	1dbb      	adds	r3, r7, #6
   1255e:	1c02      	adds	r2, r0, #0
   12560:	701a      	strb	r2, [r3, #0]
   12562:	1d7b      	adds	r3, r7, #5
   12564:	1c0a      	adds	r2, r1, #0
   12566:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12568:	2310      	movs	r3, #16
   1256a:	18fb      	adds	r3, r7, r3
   1256c:	1dba      	adds	r2, r7, #6
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12572:	230f      	movs	r3, #15
   12574:	18fb      	adds	r3, r7, r3
   12576:	1d7a      	adds	r2, r7, #5
   12578:	7812      	ldrb	r2, [r2, #0]
   1257a:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a1a      	ldrb	r2, [r3, #8]
   12580:	2313      	movs	r3, #19
   12582:	18fb      	adds	r3, r7, r3
   12584:	08d2      	lsrs	r2, r2, #3
   12586:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12588:	683b      	ldr	r3, [r7, #0]
   1258a:	7a1b      	ldrb	r3, [r3, #8]
   1258c:	2207      	movs	r2, #7
   1258e:	4013      	ands	r3, r2
   12590:	b2db      	uxtb	r3, r3
   12592:	2b00      	cmp	r3, #0
   12594:	d006      	beq.n	125a4 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12596:	2313      	movs	r3, #19
   12598:	18fb      	adds	r3, r7, r3
   1259a:	781a      	ldrb	r2, [r3, #0]
   1259c:	2313      	movs	r3, #19
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	3201      	adds	r2, #1
   125a2:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   125a4:	2313      	movs	r3, #19
   125a6:	18fb      	adds	r3, r7, r3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	b29b      	uxth	r3, r3
   125ac:	683a      	ldr	r2, [r7, #0]
   125ae:	7a52      	ldrb	r2, [r2, #9]
   125b0:	b292      	uxth	r2, r2
   125b2:	4353      	muls	r3, r2
   125b4:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   125b6:	1dfb      	adds	r3, r7, #7
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	6839      	ldr	r1, [r7, #0]
   125bc:	7a89      	ldrb	r1, [r1, #10]
   125be:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   125c0:	b299      	uxth	r1, r3
   125c2:	230c      	movs	r3, #12
   125c4:	18fb      	adds	r3, r7, r3
   125c6:	434a      	muls	r2, r1
   125c8:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	230c      	movs	r3, #12
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	881b      	ldrh	r3, [r3, #0]
   125d4:	18d3      	adds	r3, r2, r3
   125d6:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   125d8:	2312      	movs	r3, #18
   125da:	18fb      	adds	r3, r7, r3
   125dc:	683a      	ldr	r2, [r7, #0]
   125de:	7a52      	ldrb	r2, [r2, #9]
   125e0:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	2200      	movs	r2, #0
   125e8:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   125ea:	230b      	movs	r3, #11
   125ec:	18fb      	adds	r3, r7, r3
   125ee:	683a      	ldr	r2, [r7, #0]
   125f0:	7a12      	ldrb	r2, [r2, #8]
   125f2:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   125f4:	2311      	movs	r3, #17
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	2200      	movs	r2, #0
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	e034      	b.n	12668 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   125fe:	2311      	movs	r3, #17
   12600:	18fb      	adds	r3, r7, r3
   12602:	781b      	ldrb	r3, [r3, #0]
   12604:	2207      	movs	r2, #7
   12606:	4013      	ands	r3, r2
   12608:	b2db      	uxtb	r3, r3
   1260a:	2b00      	cmp	r3, #0
   1260c:	d107      	bne.n	1261e <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   1260e:	230e      	movs	r3, #14
   12610:	18fb      	adds	r3, r7, r3
   12612:	697a      	ldr	r2, [r7, #20]
   12614:	7812      	ldrb	r2, [r2, #0]
   12616:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12618:	697b      	ldr	r3, [r7, #20]
   1261a:	3301      	adds	r3, #1
   1261c:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   1261e:	230e      	movs	r3, #14
   12620:	18fb      	adds	r3, r7, r3
   12622:	781b      	ldrb	r3, [r3, #0]
   12624:	b25b      	sxtb	r3, r3
   12626:	2b00      	cmp	r3, #0
   12628:	da09      	bge.n	1263e <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   1262a:	230f      	movs	r3, #15
   1262c:	18fb      	adds	r3, r7, r3
   1262e:	7819      	ldrb	r1, [r3, #0]
   12630:	2310      	movs	r3, #16
   12632:	18fb      	adds	r3, r7, r3
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2201      	movs	r2, #1
   12638:	0018      	movs	r0, r3
   1263a:	4b1d      	ldr	r3, [pc, #116]	; (126b0 <gfx_mono_draw_char_progmem+0x168>)
   1263c:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   1263e:	2310      	movs	r3, #16
   12640:	18fb      	adds	r3, r7, r3
   12642:	2210      	movs	r2, #16
   12644:	18ba      	adds	r2, r7, r2
   12646:	7812      	ldrb	r2, [r2, #0]
   12648:	3201      	adds	r2, #1
   1264a:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   1264c:	230e      	movs	r3, #14
   1264e:	18fa      	adds	r2, r7, r3
   12650:	230e      	movs	r3, #14
   12652:	18fb      	adds	r3, r7, r3
   12654:	781b      	ldrb	r3, [r3, #0]
   12656:	18db      	adds	r3, r3, r3
   12658:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   1265a:	2311      	movs	r3, #17
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2311      	movs	r3, #17
   12662:	18fb      	adds	r3, r7, r3
   12664:	3201      	adds	r2, #1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	2311      	movs	r3, #17
   1266a:	18fa      	adds	r2, r7, r3
   1266c:	230b      	movs	r3, #11
   1266e:	18fb      	adds	r3, r7, r3
   12670:	7812      	ldrb	r2, [r2, #0]
   12672:	781b      	ldrb	r3, [r3, #0]
   12674:	429a      	cmp	r2, r3
   12676:	d3c2      	bcc.n	125fe <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12678:	230f      	movs	r3, #15
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	220f      	movs	r2, #15
   1267e:	18ba      	adds	r2, r7, r2
   12680:	7812      	ldrb	r2, [r2, #0]
   12682:	3201      	adds	r2, #1
   12684:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12686:	2310      	movs	r3, #16
   12688:	18fb      	adds	r3, r7, r3
   1268a:	1dba      	adds	r2, r7, #6
   1268c:	7812      	ldrb	r2, [r2, #0]
   1268e:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12690:	2312      	movs	r3, #18
   12692:	18fb      	adds	r3, r7, r3
   12694:	781a      	ldrb	r2, [r3, #0]
   12696:	2312      	movs	r3, #18
   12698:	18fb      	adds	r3, r7, r3
   1269a:	3a01      	subs	r2, #1
   1269c:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   1269e:	2312      	movs	r3, #18
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	781b      	ldrb	r3, [r3, #0]
   126a4:	2b00      	cmp	r3, #0
   126a6:	d19c      	bne.n	125e2 <gfx_mono_draw_char_progmem+0x9a>
}
   126a8:	46c0      	nop			; (mov r8, r8)
   126aa:	46bd      	mov	sp, r7
   126ac:	b007      	add	sp, #28
   126ae:	bd90      	pop	{r4, r7, pc}
   126b0:	000128f9 	.word	0x000128f9

000126b4 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   126b4:	b590      	push	{r4, r7, lr}
   126b6:	b085      	sub	sp, #20
   126b8:	af02      	add	r7, sp, #8
   126ba:	0004      	movs	r4, r0
   126bc:	0008      	movs	r0, r1
   126be:	0011      	movs	r1, r2
   126c0:	603b      	str	r3, [r7, #0]
   126c2:	1dfb      	adds	r3, r7, #7
   126c4:	1c22      	adds	r2, r4, #0
   126c6:	701a      	strb	r2, [r3, #0]
   126c8:	1dbb      	adds	r3, r7, #6
   126ca:	1c02      	adds	r2, r0, #0
   126cc:	701a      	strb	r2, [r3, #0]
   126ce:	1d7b      	adds	r3, r7, #5
   126d0:	1c0a      	adds	r2, r1, #0
   126d2:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   126d4:	683b      	ldr	r3, [r7, #0]
   126d6:	7a1a      	ldrb	r2, [r3, #8]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	7a5c      	ldrb	r4, [r3, #9]
   126dc:	1d7b      	adds	r3, r7, #5
   126de:	7819      	ldrb	r1, [r3, #0]
   126e0:	1dbb      	adds	r3, r7, #6
   126e2:	7818      	ldrb	r0, [r3, #0]
   126e4:	2300      	movs	r3, #0
   126e6:	9300      	str	r3, [sp, #0]
   126e8:	0023      	movs	r3, r4
   126ea:	4c0b      	ldr	r4, [pc, #44]	; (12718 <gfx_mono_draw_char+0x64>)
   126ec:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   126ee:	683b      	ldr	r3, [r7, #0]
   126f0:	781b      	ldrb	r3, [r3, #0]
   126f2:	2b00      	cmp	r3, #0
   126f4:	d000      	beq.n	126f8 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   126f6:	e00a      	b.n	1270e <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   126f8:	683c      	ldr	r4, [r7, #0]
   126fa:	1d7b      	adds	r3, r7, #5
   126fc:	781a      	ldrb	r2, [r3, #0]
   126fe:	1dbb      	adds	r3, r7, #6
   12700:	7819      	ldrb	r1, [r3, #0]
   12702:	1dfb      	adds	r3, r7, #7
   12704:	7818      	ldrb	r0, [r3, #0]
   12706:	0023      	movs	r3, r4
   12708:	4c04      	ldr	r4, [pc, #16]	; (1271c <gfx_mono_draw_char+0x68>)
   1270a:	47a0      	blx	r4
		break;
   1270c:	46c0      	nop			; (mov r8, r8)
	}
}
   1270e:	46c0      	nop			; (mov r8, r8)
   12710:	46bd      	mov	sp, r7
   12712:	b003      	add	sp, #12
   12714:	bd90      	pop	{r4, r7, pc}
   12716:	46c0      	nop			; (mov r8, r8)
   12718:	000124dd 	.word	0x000124dd
   1271c:	00012549 	.word	0x00012549

00012720 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b087      	sub	sp, #28
   12724:	af00      	add	r7, sp, #0
   12726:	60f8      	str	r0, [r7, #12]
   12728:	0008      	movs	r0, r1
   1272a:	0011      	movs	r1, r2
   1272c:	607b      	str	r3, [r7, #4]
   1272e:	230b      	movs	r3, #11
   12730:	18fb      	adds	r3, r7, r3
   12732:	1c02      	adds	r2, r0, #0
   12734:	701a      	strb	r2, [r3, #0]
   12736:	230a      	movs	r3, #10
   12738:	18fb      	adds	r3, r7, r3
   1273a:	1c0a      	adds	r2, r1, #0
   1273c:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   1273e:	2317      	movs	r3, #23
   12740:	18fb      	adds	r3, r7, r3
   12742:	220b      	movs	r2, #11
   12744:	18ba      	adds	r2, r7, r2
   12746:	7812      	ldrb	r2, [r2, #0]
   12748:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   1274a:	68fb      	ldr	r3, [r7, #12]
   1274c:	781b      	ldrb	r3, [r3, #0]
   1274e:	2b0a      	cmp	r3, #10
   12750:	d111      	bne.n	12776 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12752:	230b      	movs	r3, #11
   12754:	18fb      	adds	r3, r7, r3
   12756:	2217      	movs	r2, #23
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   1275e:	687b      	ldr	r3, [r7, #4]
   12760:	7a5a      	ldrb	r2, [r3, #9]
   12762:	230a      	movs	r3, #10
   12764:	18fb      	adds	r3, r7, r3
   12766:	781b      	ldrb	r3, [r3, #0]
   12768:	18d3      	adds	r3, r2, r3
   1276a:	b2da      	uxtb	r2, r3
   1276c:	230a      	movs	r3, #10
   1276e:	18fb      	adds	r3, r7, r3
   12770:	3201      	adds	r2, #1
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e018      	b.n	127a8 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12776:	68fb      	ldr	r3, [r7, #12]
   12778:	781b      	ldrb	r3, [r3, #0]
   1277a:	2b0d      	cmp	r3, #13
   1277c:	d014      	beq.n	127a8 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   1277e:	68fb      	ldr	r3, [r7, #12]
   12780:	7818      	ldrb	r0, [r3, #0]
   12782:	687c      	ldr	r4, [r7, #4]
   12784:	230a      	movs	r3, #10
   12786:	18fb      	adds	r3, r7, r3
   12788:	781a      	ldrb	r2, [r3, #0]
   1278a:	230b      	movs	r3, #11
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	7819      	ldrb	r1, [r3, #0]
   12790:	0023      	movs	r3, r4
   12792:	4c0b      	ldr	r4, [pc, #44]	; (127c0 <gfx_mono_draw_string+0xa0>)
   12794:	47a0      	blx	r4
			x += font->width;
   12796:	687b      	ldr	r3, [r7, #4]
   12798:	7a19      	ldrb	r1, [r3, #8]
   1279a:	230b      	movs	r3, #11
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	220b      	movs	r2, #11
   127a0:	18ba      	adds	r2, r7, r2
   127a2:	7812      	ldrb	r2, [r2, #0]
   127a4:	188a      	adds	r2, r1, r2
   127a6:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   127a8:	68fb      	ldr	r3, [r7, #12]
   127aa:	3301      	adds	r3, #1
   127ac:	60fb      	str	r3, [r7, #12]
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d1c9      	bne.n	1274a <gfx_mono_draw_string+0x2a>
}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	46bd      	mov	sp, r7
   127ba:	b007      	add	sp, #28
   127bc:	bd90      	pop	{r4, r7, pc}
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000126b5 	.word	0x000126b5

000127c4 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   127c4:	b580      	push	{r7, lr}
   127c6:	b082      	sub	sp, #8
   127c8:	af00      	add	r7, sp, #0
   127ca:	0002      	movs	r2, r0
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   127d0:	1dfb      	adds	r3, r7, #7
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	210f      	movs	r1, #15
   127d8:	400a      	ands	r2, r1
   127da:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   127dc:	1dfb      	adds	r3, r7, #7
   127de:	781b      	ldrb	r3, [r3, #0]
   127e0:	2250      	movs	r2, #80	; 0x50
   127e2:	4252      	negs	r2, r2
   127e4:	4313      	orrs	r3, r2
   127e6:	b2db      	uxtb	r3, r3
   127e8:	0018      	movs	r0, r3
   127ea:	4b03      	ldr	r3, [pc, #12]	; (127f8 <ssd1306_set_page_address+0x34>)
   127ec:	4798      	blx	r3
}
   127ee:	46c0      	nop			; (mov r8, r8)
   127f0:	46bd      	mov	sp, r7
   127f2:	b002      	add	sp, #8
   127f4:	bd80      	pop	{r7, pc}
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	000121d1 	.word	0x000121d1

000127fc <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b082      	sub	sp, #8
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	1dfa      	adds	r2, r7, #7
   1280c:	7812      	ldrb	r2, [r2, #0]
   1280e:	217f      	movs	r1, #127	; 0x7f
   12810:	400a      	ands	r2, r1
   12812:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12814:	1dfb      	adds	r3, r7, #7
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	091b      	lsrs	r3, r3, #4
   1281a:	b2db      	uxtb	r3, r3
   1281c:	2210      	movs	r2, #16
   1281e:	4313      	orrs	r3, r2
   12820:	b2db      	uxtb	r3, r3
   12822:	3302      	adds	r3, #2
   12824:	b2db      	uxtb	r3, r3
   12826:	0018      	movs	r0, r3
   12828:	4b06      	ldr	r3, [pc, #24]	; (12844 <ssd1306_set_column_address+0x48>)
   1282a:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   1282c:	1dfb      	adds	r3, r7, #7
   1282e:	781b      	ldrb	r3, [r3, #0]
   12830:	220f      	movs	r2, #15
   12832:	4013      	ands	r3, r2
   12834:	b2db      	uxtb	r3, r3
   12836:	0018      	movs	r0, r3
   12838:	4b02      	ldr	r3, [pc, #8]	; (12844 <ssd1306_set_column_address+0x48>)
   1283a:	4798      	blx	r3
}
   1283c:	46c0      	nop			; (mov r8, r8)
   1283e:	46bd      	mov	sp, r7
   12840:	b002      	add	sp, #8
   12842:	bd80      	pop	{r7, pc}
   12844:	000121d1 	.word	0x000121d1

00012848 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12848:	b580      	push	{r7, lr}
   1284a:	b082      	sub	sp, #8
   1284c:	af00      	add	r7, sp, #0
   1284e:	0002      	movs	r2, r0
   12850:	1dfb      	adds	r3, r7, #7
   12852:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12854:	1dfb      	adds	r3, r7, #7
   12856:	1dfa      	adds	r2, r7, #7
   12858:	7812      	ldrb	r2, [r2, #0]
   1285a:	213f      	movs	r1, #63	; 0x3f
   1285c:	400a      	ands	r2, r1
   1285e:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12860:	1dfb      	adds	r3, r7, #7
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	2240      	movs	r2, #64	; 0x40
   12866:	4313      	orrs	r3, r2
   12868:	b2db      	uxtb	r3, r3
   1286a:	0018      	movs	r0, r3
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <ssd1306_set_display_start_line_address+0x30>)
   1286e:	4798      	blx	r3
}
   12870:	46c0      	nop			; (mov r8, r8)
   12872:	46bd      	mov	sp, r7
   12874:	b002      	add	sp, #8
   12876:	bd80      	pop	{r7, pc}
   12878:	000121d1 	.word	0x000121d1

0001287c <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   1287c:	b590      	push	{r4, r7, lr}
   1287e:	b083      	sub	sp, #12
   12880:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12882:	4b18      	ldr	r3, [pc, #96]	; (128e4 <gfx_mono_ssd1306_init+0x68>)
   12884:	0018      	movs	r0, r3
   12886:	4b18      	ldr	r3, [pc, #96]	; (128e8 <gfx_mono_ssd1306_init+0x6c>)
   12888:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   1288a:	4b18      	ldr	r3, [pc, #96]	; (128ec <gfx_mono_ssd1306_init+0x70>)
   1288c:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1288e:	2000      	movs	r0, #0
   12890:	4b17      	ldr	r3, [pc, #92]	; (128f0 <gfx_mono_ssd1306_init+0x74>)
   12892:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12894:	1dfb      	adds	r3, r7, #7
   12896:	2200      	movs	r2, #0
   12898:	701a      	strb	r2, [r3, #0]
   1289a:	e01a      	b.n	128d2 <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   1289c:	1dbb      	adds	r3, r7, #6
   1289e:	2200      	movs	r2, #0
   128a0:	701a      	strb	r2, [r3, #0]
   128a2:	e00c      	b.n	128be <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   128a4:	1dbb      	adds	r3, r7, #6
   128a6:	7819      	ldrb	r1, [r3, #0]
   128a8:	1dfb      	adds	r3, r7, #7
   128aa:	7818      	ldrb	r0, [r3, #0]
   128ac:	2301      	movs	r3, #1
   128ae:	2200      	movs	r2, #0
   128b0:	4c10      	ldr	r4, [pc, #64]	; (128f4 <gfx_mono_ssd1306_init+0x78>)
   128b2:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   128b4:	1dbb      	adds	r3, r7, #6
   128b6:	781a      	ldrb	r2, [r3, #0]
   128b8:	1dbb      	adds	r3, r7, #6
   128ba:	3201      	adds	r2, #1
   128bc:	701a      	strb	r2, [r3, #0]
   128be:	1dbb      	adds	r3, r7, #6
   128c0:	781b      	ldrb	r3, [r3, #0]
   128c2:	b25b      	sxtb	r3, r3
   128c4:	2b00      	cmp	r3, #0
   128c6:	daed      	bge.n	128a4 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   128c8:	1dfb      	adds	r3, r7, #7
   128ca:	781a      	ldrb	r2, [r3, #0]
   128cc:	1dfb      	adds	r3, r7, #7
   128ce:	3201      	adds	r2, #1
   128d0:	701a      	strb	r2, [r3, #0]
   128d2:	1dfb      	adds	r3, r7, #7
   128d4:	781b      	ldrb	r3, [r3, #0]
   128d6:	2b05      	cmp	r3, #5
   128d8:	d9e0      	bls.n	1289c <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   128da:	46c0      	nop			; (mov r8, r8)
   128dc:	46bd      	mov	sp, r7
   128de:	b003      	add	sp, #12
   128e0:	bd90      	pop	{r4, r7, pc}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	20000310 	.word	0x20000310
   128e8:	00012281 	.word	0x00012281
   128ec:	00012129 	.word	0x00012129
   128f0:	00012849 	.word	0x00012849
   128f4:	000129ed 	.word	0x000129ed

000128f8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   128f8:	b590      	push	{r4, r7, lr}
   128fa:	b085      	sub	sp, #20
   128fc:	af00      	add	r7, sp, #0
   128fe:	0004      	movs	r4, r0
   12900:	0008      	movs	r0, r1
   12902:	0011      	movs	r1, r2
   12904:	1dfb      	adds	r3, r7, #7
   12906:	1c22      	adds	r2, r4, #0
   12908:	701a      	strb	r2, [r3, #0]
   1290a:	1dbb      	adds	r3, r7, #6
   1290c:	1c02      	adds	r2, r0, #0
   1290e:	701a      	strb	r2, [r3, #0]
   12910:	1d7b      	adds	r3, r7, #5
   12912:	1c0a      	adds	r2, r1, #0
   12914:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	2b3f      	cmp	r3, #63	; 0x3f
   1291c:	d85d      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
   1291e:	1dbb      	adds	r3, r7, #6
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b2f      	cmp	r3, #47	; 0x2f
   12924:	d859      	bhi.n	129da <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12926:	230e      	movs	r3, #14
   12928:	18fb      	adds	r3, r7, r3
   1292a:	1dba      	adds	r2, r7, #6
   1292c:	7812      	ldrb	r2, [r2, #0]
   1292e:	08d2      	lsrs	r2, r2, #3
   12930:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12932:	1dbb      	adds	r3, r7, #6
   12934:	781a      	ldrb	r2, [r3, #0]
   12936:	230e      	movs	r3, #14
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	00db      	lsls	r3, r3, #3
   1293e:	1ad3      	subs	r3, r2, r3
   12940:	2201      	movs	r2, #1
   12942:	409a      	lsls	r2, r3
   12944:	230d      	movs	r3, #13
   12946:	18fb      	adds	r3, r7, r3
   12948:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   1294a:	230f      	movs	r3, #15
   1294c:	18fc      	adds	r4, r7, r3
   1294e:	1dfb      	adds	r3, r7, #7
   12950:	781a      	ldrb	r2, [r3, #0]
   12952:	230e      	movs	r3, #14
   12954:	18fb      	adds	r3, r7, r3
   12956:	781b      	ldrb	r3, [r3, #0]
   12958:	0011      	movs	r1, r2
   1295a:	0018      	movs	r0, r3
   1295c:	4b21      	ldr	r3, [pc, #132]	; (129e4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1295e:	4798      	blx	r3
   12960:	0003      	movs	r3, r0
   12962:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12964:	1d7b      	adds	r3, r7, #5
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	2b01      	cmp	r3, #1
   1296a:	d004      	beq.n	12976 <gfx_mono_ssd1306_draw_pixel+0x7e>
   1296c:	2b02      	cmp	r3, #2
   1296e:	d01d      	beq.n	129ac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12974:	e025      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12976:	230f      	movs	r3, #15
   12978:	18fb      	adds	r3, r7, r3
   1297a:	220f      	movs	r2, #15
   1297c:	18b9      	adds	r1, r7, r2
   1297e:	220d      	movs	r2, #13
   12980:	18ba      	adds	r2, r7, r2
   12982:	7809      	ldrb	r1, [r1, #0]
   12984:	7812      	ldrb	r2, [r2, #0]
   12986:	430a      	orrs	r2, r1
   12988:	701a      	strb	r2, [r3, #0]
		break;
   1298a:	e01a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   1298c:	230d      	movs	r3, #13
   1298e:	18fb      	adds	r3, r7, r3
   12990:	781b      	ldrb	r3, [r3, #0]
   12992:	b25b      	sxtb	r3, r3
   12994:	43db      	mvns	r3, r3
   12996:	b25b      	sxtb	r3, r3
   12998:	220f      	movs	r2, #15
   1299a:	18ba      	adds	r2, r7, r2
   1299c:	7812      	ldrb	r2, [r2, #0]
   1299e:	b252      	sxtb	r2, r2
   129a0:	4013      	ands	r3, r2
   129a2:	b25a      	sxtb	r2, r3
   129a4:	230f      	movs	r3, #15
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	701a      	strb	r2, [r3, #0]
		break;
   129aa:	e00a      	b.n	129c2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	220f      	movs	r2, #15
   129b2:	18b9      	adds	r1, r7, r2
   129b4:	220d      	movs	r2, #13
   129b6:	18ba      	adds	r2, r7, r2
   129b8:	7809      	ldrb	r1, [r1, #0]
   129ba:	7812      	ldrb	r2, [r2, #0]
   129bc:	404a      	eors	r2, r1
   129be:	701a      	strb	r2, [r3, #0]
		break;
   129c0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   129c2:	230f      	movs	r3, #15
   129c4:	18fb      	adds	r3, r7, r3
   129c6:	781a      	ldrb	r2, [r3, #0]
   129c8:	1dfb      	adds	r3, r7, #7
   129ca:	7819      	ldrb	r1, [r3, #0]
   129cc:	230e      	movs	r3, #14
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	7818      	ldrb	r0, [r3, #0]
   129d2:	2300      	movs	r3, #0
   129d4:	4c04      	ldr	r4, [pc, #16]	; (129e8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   129d6:	47a0      	blx	r4
   129d8:	e000      	b.n	129dc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   129da:	46c0      	nop			; (mov r8, r8)
}
   129dc:	46bd      	mov	sp, r7
   129de:	b005      	add	sp, #20
   129e0:	bd90      	pop	{r4, r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)
   129e4:	00012a8d 	.word	0x00012a8d
   129e8:	000129ed 	.word	0x000129ed

000129ec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   129ec:	b5b0      	push	{r4, r5, r7, lr}
   129ee:	b082      	sub	sp, #8
   129f0:	af00      	add	r7, sp, #0
   129f2:	0005      	movs	r5, r0
   129f4:	000c      	movs	r4, r1
   129f6:	0010      	movs	r0, r2
   129f8:	0019      	movs	r1, r3
   129fa:	1dfb      	adds	r3, r7, #7
   129fc:	1c2a      	adds	r2, r5, #0
   129fe:	701a      	strb	r2, [r3, #0]
   12a00:	1dbb      	adds	r3, r7, #6
   12a02:	1c22      	adds	r2, r4, #0
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	1d7b      	adds	r3, r7, #5
   12a08:	1c02      	adds	r2, r0, #0
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	1d3b      	adds	r3, r7, #4
   12a0e:	1c0a      	adds	r2, r1, #0
   12a10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12a12:	1d3b      	adds	r3, r7, #4
   12a14:	781b      	ldrb	r3, [r3, #0]
   12a16:	2201      	movs	r2, #1
   12a18:	4053      	eors	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	2b00      	cmp	r3, #0
   12a1e:	d00d      	beq.n	12a3c <gfx_mono_ssd1306_put_byte+0x50>
   12a20:	1dbb      	adds	r3, r7, #6
   12a22:	781a      	ldrb	r2, [r3, #0]
   12a24:	1dfb      	adds	r3, r7, #7
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	0011      	movs	r1, r2
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b12      	ldr	r3, [pc, #72]	; (12a78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12a2e:	4798      	blx	r3
   12a30:	0003      	movs	r3, r0
   12a32:	001a      	movs	r2, r3
   12a34:	1d7b      	adds	r3, r7, #5
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d018      	beq.n	12a6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12a3c:	1d7b      	adds	r3, r7, #5
   12a3e:	781a      	ldrb	r2, [r3, #0]
   12a40:	1dbb      	adds	r3, r7, #6
   12a42:	7819      	ldrb	r1, [r3, #0]
   12a44:	1dfb      	adds	r3, r7, #7
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	0018      	movs	r0, r3
   12a4a:	4b0c      	ldr	r3, [pc, #48]	; (12a7c <gfx_mono_ssd1306_put_byte+0x90>)
   12a4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12a4e:	1dfb      	adds	r3, r7, #7
   12a50:	781b      	ldrb	r3, [r3, #0]
   12a52:	0018      	movs	r0, r3
   12a54:	4b0a      	ldr	r3, [pc, #40]	; (12a80 <gfx_mono_ssd1306_put_byte+0x94>)
   12a56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12a58:	1dbb      	adds	r3, r7, #6
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b09      	ldr	r3, [pc, #36]	; (12a84 <gfx_mono_ssd1306_put_byte+0x98>)
   12a60:	4798      	blx	r3

	ssd1306_write_data(data);
   12a62:	1d7b      	adds	r3, r7, #5
   12a64:	781b      	ldrb	r3, [r3, #0]
   12a66:	0018      	movs	r0, r3
   12a68:	4b07      	ldr	r3, [pc, #28]	; (12a88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12a6a:	4798      	blx	r3
   12a6c:	e000      	b.n	12a70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12a6e:	46c0      	nop			; (mov r8, r8)
}
   12a70:	46bd      	mov	sp, r7
   12a72:	b002      	add	sp, #8
   12a74:	bdb0      	pop	{r4, r5, r7, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	000122e1 	.word	0x000122e1
   12a7c:	0001229d 	.word	0x0001229d
   12a80:	000127c5 	.word	0x000127c5
   12a84:	000127fd 	.word	0x000127fd
   12a88:	00012229 	.word	0x00012229

00012a8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b082      	sub	sp, #8
   12a90:	af00      	add	r7, sp, #0
   12a92:	0002      	movs	r2, r0
   12a94:	1dfb      	adds	r3, r7, #7
   12a96:	701a      	strb	r2, [r3, #0]
   12a98:	1dbb      	adds	r3, r7, #6
   12a9a:	1c0a      	adds	r2, r1, #0
   12a9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12a9e:	1dbb      	adds	r3, r7, #6
   12aa0:	781a      	ldrb	r2, [r3, #0]
   12aa2:	1dfb      	adds	r3, r7, #7
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	0011      	movs	r1, r2
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12aac:	4798      	blx	r3
   12aae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12ab0:	0018      	movs	r0, r3
   12ab2:	46bd      	mov	sp, r7
   12ab4:	b002      	add	sp, #8
   12ab6:	bd80      	pop	{r7, pc}
   12ab8:	000122e1 	.word	0x000122e1

00012abc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12abc:	b580      	push	{r7, lr}
   12abe:	b084      	sub	sp, #16
   12ac0:	af00      	add	r7, sp, #0
   12ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12ac4:	687b      	ldr	r3, [r7, #4]
   12ac6:	681b      	ldr	r3, [r3, #0]
   12ac8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12aca:	68fb      	ldr	r3, [r7, #12]
   12acc:	7e5b      	ldrb	r3, [r3, #25]
   12ace:	b2db      	uxtb	r3, r3
   12ad0:	b25b      	sxtb	r3, r3
   12ad2:	2b00      	cmp	r3, #0
   12ad4:	da01      	bge.n	12ada <adc_is_syncing+0x1e>
		return true;
   12ad6:	2301      	movs	r3, #1
   12ad8:	e000      	b.n	12adc <adc_is_syncing+0x20>
	}

	return false;
   12ada:	2300      	movs	r3, #0
}
   12adc:	0018      	movs	r0, r3
   12ade:	46bd      	mov	sp, r7
   12ae0:	b004      	add	sp, #16
   12ae2:	bd80      	pop	{r7, pc}

00012ae4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12ae4:	b580      	push	{r7, lr}
   12ae6:	b084      	sub	sp, #16
   12ae8:	af00      	add	r7, sp, #0
   12aea:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12af2:	46c0      	nop			; (mov r8, r8)
   12af4:	687b      	ldr	r3, [r7, #4]
   12af6:	0018      	movs	r0, r3
   12af8:	4b0b      	ldr	r3, [pc, #44]	; (12b28 <adc_start_conversion+0x44>)
   12afa:	4798      	blx	r3
   12afc:	1e03      	subs	r3, r0, #0
   12afe:	d1f9      	bne.n	12af4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7b1b      	ldrb	r3, [r3, #12]
   12b04:	b2db      	uxtb	r3, r3
   12b06:	2202      	movs	r2, #2
   12b08:	4313      	orrs	r3, r2
   12b0a:	b2da      	uxtb	r2, r3
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12b10:	46c0      	nop			; (mov r8, r8)
   12b12:	687b      	ldr	r3, [r7, #4]
   12b14:	0018      	movs	r0, r3
   12b16:	4b04      	ldr	r3, [pc, #16]	; (12b28 <adc_start_conversion+0x44>)
   12b18:	4798      	blx	r3
   12b1a:	1e03      	subs	r3, r0, #0
   12b1c:	d1f9      	bne.n	12b12 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	46bd      	mov	sp, r7
   12b22:	b004      	add	sp, #16
   12b24:	bd80      	pop	{r7, pc}
   12b26:	46c0      	nop			; (mov r8, r8)
   12b28:	00012abd 	.word	0x00012abd

00012b2c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12b2c:	b580      	push	{r7, lr}
   12b2e:	b084      	sub	sp, #16
   12b30:	af00      	add	r7, sp, #0
   12b32:	6078      	str	r0, [r7, #4]
   12b34:	000a      	movs	r2, r1
   12b36:	1cfb      	adds	r3, r7, #3
   12b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12b3a:	687b      	ldr	r3, [r7, #4]
   12b3c:	681b      	ldr	r3, [r3, #0]
   12b3e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12b40:	68fb      	ldr	r3, [r7, #12]
   12b42:	1cfa      	adds	r2, r7, #3
   12b44:	7812      	ldrb	r2, [r2, #0]
   12b46:	759a      	strb	r2, [r3, #22]
}
   12b48:	46c0      	nop			; (mov r8, r8)
   12b4a:	46bd      	mov	sp, r7
   12b4c:	b004      	add	sp, #16
   12b4e:	bd80      	pop	{r7, pc}

00012b50 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12b50:	b580      	push	{r7, lr}
   12b52:	b084      	sub	sp, #16
   12b54:	af00      	add	r7, sp, #0
   12b56:	0002      	movs	r2, r0
   12b58:	1dfb      	adds	r3, r7, #7
   12b5a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12b5c:	1dfb      	adds	r3, r7, #7
   12b5e:	781a      	ldrb	r2, [r3, #0]
   12b60:	4b47      	ldr	r3, [pc, #284]	; (12c80 <_adc_interrupt_handler+0x130>)
   12b62:	0092      	lsls	r2, r2, #2
   12b64:	58d3      	ldr	r3, [r2, r3]
   12b66:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12b68:	68fb      	ldr	r3, [r7, #12]
   12b6a:	681b      	ldr	r3, [r3, #0]
   12b6c:	7e1b      	ldrb	r3, [r3, #24]
   12b6e:	b2da      	uxtb	r2, r3
   12b70:	68fb      	ldr	r3, [r7, #12]
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	7ddb      	ldrb	r3, [r3, #23]
   12b76:	b2db      	uxtb	r3, r3
   12b78:	4013      	ands	r3, r2
   12b7a:	b2db      	uxtb	r3, r3
   12b7c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12b7e:	68bb      	ldr	r3, [r7, #8]
   12b80:	2201      	movs	r2, #1
   12b82:	4013      	ands	r3, r2
   12b84:	d045      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12b86:	68fb      	ldr	r3, [r7, #12]
   12b88:	681b      	ldr	r3, [r3, #0]
   12b8a:	2201      	movs	r2, #1
   12b8c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12b8e:	46c0      	nop			; (mov r8, r8)
   12b90:	68fb      	ldr	r3, [r7, #12]
   12b92:	0018      	movs	r0, r3
   12b94:	4b3b      	ldr	r3, [pc, #236]	; (12c84 <_adc_interrupt_handler+0x134>)
   12b96:	4798      	blx	r3
   12b98:	1e03      	subs	r3, r0, #0
   12b9a:	d1f9      	bne.n	12b90 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12b9c:	68fb      	ldr	r3, [r7, #12]
   12b9e:	695b      	ldr	r3, [r3, #20]
   12ba0:	1c99      	adds	r1, r3, #2
   12ba2:	68fa      	ldr	r2, [r7, #12]
   12ba4:	6151      	str	r1, [r2, #20]
   12ba6:	68fa      	ldr	r2, [r7, #12]
   12ba8:	6812      	ldr	r2, [r2, #0]
   12baa:	8b52      	ldrh	r2, [r2, #26]
   12bac:	b292      	uxth	r2, r2
   12bae:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12bb0:	68fb      	ldr	r3, [r7, #12]
   12bb2:	8b1b      	ldrh	r3, [r3, #24]
   12bb4:	b29b      	uxth	r3, r3
   12bb6:	3b01      	subs	r3, #1
   12bb8:	b29b      	uxth	r3, r3
   12bba:	68fa      	ldr	r2, [r7, #12]
   12bbc:	1c19      	adds	r1, r3, #0
   12bbe:	8311      	strh	r1, [r2, #24]
   12bc0:	2b00      	cmp	r3, #0
   12bc2:	d008      	beq.n	12bd6 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12bc4:	68fb      	ldr	r3, [r7, #12]
   12bc6:	7f5b      	ldrb	r3, [r3, #29]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d022      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12bcc:	68fb      	ldr	r3, [r7, #12]
   12bce:	0018      	movs	r0, r3
   12bd0:	4b2d      	ldr	r3, [pc, #180]	; (12c88 <_adc_interrupt_handler+0x138>)
   12bd2:	4798      	blx	r3
   12bd4:	e01d      	b.n	12c12 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12bd6:	68fb      	ldr	r3, [r7, #12]
   12bd8:	2101      	movs	r1, #1
   12bda:	0018      	movs	r0, r3
   12bdc:	4b2b      	ldr	r3, [pc, #172]	; (12c8c <_adc_interrupt_handler+0x13c>)
   12bde:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	7f1b      	ldrb	r3, [r3, #28]
   12be4:	b2db      	uxtb	r3, r3
   12be6:	2b05      	cmp	r3, #5
   12be8:	d113      	bne.n	12c12 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12bea:	68fb      	ldr	r3, [r7, #12]
   12bec:	2200      	movs	r2, #0
   12bee:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12bf0:	68fb      	ldr	r3, [r7, #12]
   12bf2:	7edb      	ldrb	r3, [r3, #27]
   12bf4:	001a      	movs	r2, r3
   12bf6:	2301      	movs	r3, #1
   12bf8:	4013      	ands	r3, r2
   12bfa:	d00a      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12bfc:	68fb      	ldr	r3, [r7, #12]
   12bfe:	7e9b      	ldrb	r3, [r3, #26]
   12c00:	001a      	movs	r2, r3
   12c02:	2301      	movs	r3, #1
   12c04:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12c06:	d004      	beq.n	12c12 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	689b      	ldr	r3, [r3, #8]
   12c0c:	68fa      	ldr	r2, [r7, #12]
   12c0e:	0010      	movs	r0, r2
   12c10:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12c12:	68bb      	ldr	r3, [r7, #8]
   12c14:	2204      	movs	r2, #4
   12c16:	4013      	ands	r3, r2
   12c18:	d014      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12c1a:	68fb      	ldr	r3, [r7, #12]
   12c1c:	681b      	ldr	r3, [r3, #0]
   12c1e:	2204      	movs	r2, #4
   12c20:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c22:	68fb      	ldr	r3, [r7, #12]
   12c24:	7edb      	ldrb	r3, [r3, #27]
   12c26:	001a      	movs	r2, r3
   12c28:	2302      	movs	r3, #2
   12c2a:	4013      	ands	r3, r2
   12c2c:	d00a      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12c2e:	68fb      	ldr	r3, [r7, #12]
   12c30:	7e9b      	ldrb	r3, [r3, #26]
   12c32:	001a      	movs	r2, r3
   12c34:	2302      	movs	r3, #2
   12c36:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12c38:	d004      	beq.n	12c44 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	68db      	ldr	r3, [r3, #12]
   12c3e:	68fa      	ldr	r2, [r7, #12]
   12c40:	0010      	movs	r0, r2
   12c42:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12c44:	68bb      	ldr	r3, [r7, #8]
   12c46:	2202      	movs	r2, #2
   12c48:	4013      	ands	r3, r2
   12c4a:	d014      	beq.n	12c76 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	681b      	ldr	r3, [r3, #0]
   12c50:	2202      	movs	r2, #2
   12c52:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	7edb      	ldrb	r3, [r3, #27]
   12c58:	001a      	movs	r2, r3
   12c5a:	2304      	movs	r3, #4
   12c5c:	4013      	ands	r3, r2
   12c5e:	d00a      	beq.n	12c76 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12c60:	68fb      	ldr	r3, [r7, #12]
   12c62:	7e9b      	ldrb	r3, [r3, #26]
   12c64:	001a      	movs	r2, r3
   12c66:	2304      	movs	r3, #4
   12c68:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12c6a:	d004      	beq.n	12c76 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12c6c:	68fb      	ldr	r3, [r7, #12]
   12c6e:	691b      	ldr	r3, [r3, #16]
   12c70:	68fa      	ldr	r2, [r7, #12]
   12c72:	0010      	movs	r0, r2
   12c74:	4798      	blx	r3
		}
	}
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	b004      	add	sp, #16
   12c7c:	bd80      	pop	{r7, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	20004748 	.word	0x20004748
   12c84:	00012abd 	.word	0x00012abd
   12c88:	00012ae5 	.word	0x00012ae5
   12c8c:	00012b2d 	.word	0x00012b2d

00012c90 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12c94:	2000      	movs	r0, #0
   12c96:	4b02      	ldr	r3, [pc, #8]	; (12ca0 <ADC_Handler+0x10>)
   12c98:	4798      	blx	r3
}
   12c9a:	46c0      	nop			; (mov r8, r8)
   12c9c:	46bd      	mov	sp, r7
   12c9e:	bd80      	pop	{r7, pc}
   12ca0:	00012b51 	.word	0x00012b51

00012ca4 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12ca4:	b580      	push	{r7, lr}
   12ca6:	b082      	sub	sp, #8
   12ca8:	af00      	add	r7, sp, #0
   12caa:	0002      	movs	r2, r0
   12cac:	1dfb      	adds	r3, r7, #7
   12cae:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12cb0:	4a07      	ldr	r2, [pc, #28]	; (12cd0 <system_interrupt_disable+0x2c>)
   12cb2:	1dfb      	adds	r3, r7, #7
   12cb4:	781b      	ldrb	r3, [r3, #0]
   12cb6:	0019      	movs	r1, r3
   12cb8:	231f      	movs	r3, #31
   12cba:	400b      	ands	r3, r1
   12cbc:	2101      	movs	r1, #1
   12cbe:	4099      	lsls	r1, r3
   12cc0:	000b      	movs	r3, r1
   12cc2:	0019      	movs	r1, r3
   12cc4:	2380      	movs	r3, #128	; 0x80
   12cc6:	50d1      	str	r1, [r2, r3]
}
   12cc8:	46c0      	nop			; (mov r8, r8)
   12cca:	46bd      	mov	sp, r7
   12ccc:	b002      	add	sp, #8
   12cce:	bd80      	pop	{r7, pc}
   12cd0:	e000e100 	.word	0xe000e100

00012cd4 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12cd4:	b580      	push	{r7, lr}
   12cd6:	b084      	sub	sp, #16
   12cd8:	af00      	add	r7, sp, #0
   12cda:	0002      	movs	r2, r0
   12cdc:	1dfb      	adds	r3, r7, #7
   12cde:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12ce0:	1dfb      	adds	r3, r7, #7
   12ce2:	781a      	ldrb	r2, [r3, #0]
   12ce4:	4b37      	ldr	r3, [pc, #220]	; (12dc4 <_dac_interrupt_handler+0xf0>)
   12ce6:	0092      	lsls	r2, r2, #2
   12ce8:	58d3      	ldr	r3, [r2, r3]
   12cea:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12cec:	68fb      	ldr	r3, [r7, #12]
   12cee:	681b      	ldr	r3, [r3, #0]
   12cf0:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12cf2:	68bb      	ldr	r3, [r7, #8]
   12cf4:	799b      	ldrb	r3, [r3, #6]
   12cf6:	b2db      	uxtb	r3, r3
   12cf8:	001a      	movs	r2, r3
   12cfa:	2301      	movs	r3, #1
   12cfc:	4013      	ands	r3, r2
   12cfe:	d00e      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12d00:	68bb      	ldr	r3, [r7, #8]
   12d02:	2201      	movs	r2, #1
   12d04:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12d06:	68fb      	ldr	r3, [r7, #12]
   12d08:	3314      	adds	r3, #20
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d007      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12d0e:	68fb      	ldr	r3, [r7, #12]
   12d10:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12d12:	2b00      	cmp	r3, #0
   12d14:	d003      	beq.n	12d1e <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12d16:	68fb      	ldr	r3, [r7, #12]
   12d18:	699b      	ldr	r3, [r3, #24]
   12d1a:	2000      	movs	r0, #0
   12d1c:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12d1e:	68bb      	ldr	r3, [r7, #8]
   12d20:	799b      	ldrb	r3, [r3, #6]
   12d22:	b2db      	uxtb	r3, r3
   12d24:	001a      	movs	r2, r3
   12d26:	2302      	movs	r3, #2
   12d28:	4013      	ands	r3, r2
   12d2a:	d047      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d2c:	68bb      	ldr	r3, [r7, #8]
   12d2e:	2202      	movs	r2, #2
   12d30:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12d32:	68fb      	ldr	r3, [r7, #12]
   12d34:	899b      	ldrh	r3, [r3, #12]
   12d36:	b29b      	uxth	r3, r3
   12d38:	2b00      	cmp	r3, #0
   12d3a:	d033      	beq.n	12da4 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12d3c:	68fb      	ldr	r3, [r7, #12]
   12d3e:	689a      	ldr	r2, [r3, #8]
   12d40:	68fb      	ldr	r3, [r7, #12]
   12d42:	89db      	ldrh	r3, [r3, #14]
   12d44:	b29b      	uxth	r3, r3
   12d46:	1c59      	adds	r1, r3, #1
   12d48:	b288      	uxth	r0, r1
   12d4a:	68f9      	ldr	r1, [r7, #12]
   12d4c:	81c8      	strh	r0, [r1, #14]
   12d4e:	005b      	lsls	r3, r3, #1
   12d50:	18d3      	adds	r3, r2, r3
   12d52:	881b      	ldrh	r3, [r3, #0]
   12d54:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12d56:	68bb      	ldr	r3, [r7, #8]
   12d58:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12d5a:	68fb      	ldr	r3, [r7, #12]
   12d5c:	899b      	ldrh	r3, [r3, #12]
   12d5e:	b29b      	uxth	r3, r3
   12d60:	3b01      	subs	r3, #1
   12d62:	b29a      	uxth	r2, r3
   12d64:	68fb      	ldr	r3, [r7, #12]
   12d66:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	899b      	ldrh	r3, [r3, #12]
   12d6c:	b29b      	uxth	r3, r3
   12d6e:	2b00      	cmp	r3, #0
   12d70:	d118      	bne.n	12da4 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2220      	movs	r2, #32
   12d76:	2100      	movs	r1, #0
   12d78:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12d7a:	68bb      	ldr	r3, [r7, #8]
   12d7c:	2202      	movs	r2, #2
   12d7e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12d80:	68bb      	ldr	r3, [r7, #8]
   12d82:	2202      	movs	r2, #2
   12d84:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12d86:	2019      	movs	r0, #25
   12d88:	4b0f      	ldr	r3, [pc, #60]	; (12dc8 <_dac_interrupt_handler+0xf4>)
   12d8a:	4798      	blx	r3

				if ((module->callback) &&
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	3314      	adds	r3, #20
   12d90:	2b00      	cmp	r3, #0
   12d92:	d007      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12d98:	2b00      	cmp	r3, #0
   12d9a:	d003      	beq.n	12da4 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12d9c:	68fb      	ldr	r3, [r7, #12]
   12d9e:	69db      	ldr	r3, [r3, #28]
   12da0:	2000      	movs	r0, #0
   12da2:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12da4:	68fb      	ldr	r3, [r7, #12]
   12da6:	3314      	adds	r3, #20
   12da8:	2b00      	cmp	r3, #0
   12daa:	d007      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12dac:	68fb      	ldr	r3, [r7, #12]
   12dae:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12db0:	2b00      	cmp	r3, #0
   12db2:	d003      	beq.n	12dbc <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12db4:	68fb      	ldr	r3, [r7, #12]
   12db6:	695b      	ldr	r3, [r3, #20]
   12db8:	2000      	movs	r0, #0
   12dba:	4798      	blx	r3
		}
	}
}
   12dbc:	46c0      	nop			; (mov r8, r8)
   12dbe:	46bd      	mov	sp, r7
   12dc0:	b004      	add	sp, #16
   12dc2:	bd80      	pop	{r7, pc}
   12dc4:	2000474c 	.word	0x2000474c
   12dc8:	00012ca5 	.word	0x00012ca5

00012dcc <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12dcc:	b580      	push	{r7, lr}
   12dce:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12dd0:	2000      	movs	r0, #0
   12dd2:	4b02      	ldr	r3, [pc, #8]	; (12ddc <DAC_Handler+0x10>)
   12dd4:	4798      	blx	r3
}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	46bd      	mov	sp, r7
   12dda:	bd80      	pop	{r7, pc}
   12ddc:	00012cd5 	.word	0x00012cd5

00012de0 <system_interrupt_enter_critical_section>:
{
   12de0:	b580      	push	{r7, lr}
   12de2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <system_interrupt_enter_critical_section+0x10>)
   12de6:	4798      	blx	r3
}
   12de8:	46c0      	nop			; (mov r8, r8)
   12dea:	46bd      	mov	sp, r7
   12dec:	bd80      	pop	{r7, pc}
   12dee:	46c0      	nop			; (mov r8, r8)
   12df0:	000252d9 	.word	0x000252d9

00012df4 <system_interrupt_leave_critical_section>:
{
   12df4:	b580      	push	{r7, lr}
   12df6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12df8:	4b02      	ldr	r3, [pc, #8]	; (12e04 <system_interrupt_leave_critical_section+0x10>)
   12dfa:	4798      	blx	r3
}
   12dfc:	46c0      	nop			; (mov r8, r8)
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	46c0      	nop			; (mov r8, r8)
   12e04:	0002532d 	.word	0x0002532d

00012e08 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12e08:	b580      	push	{r7, lr}
   12e0a:	b086      	sub	sp, #24
   12e0c:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12e0e:	4b49      	ldr	r3, [pc, #292]	; (12f34 <DMAC_Handler+0x12c>)
   12e10:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12e12:	4b49      	ldr	r3, [pc, #292]	; (12f38 <DMAC_Handler+0x130>)
   12e14:	8c1b      	ldrh	r3, [r3, #32]
   12e16:	b29b      	uxth	r3, r3
   12e18:	b2da      	uxtb	r2, r3
   12e1a:	2317      	movs	r3, #23
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	210f      	movs	r1, #15
   12e20:	400a      	ands	r2, r1
   12e22:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12e24:	2317      	movs	r3, #23
   12e26:	18fb      	adds	r3, r7, r3
   12e28:	781a      	ldrb	r2, [r3, #0]
   12e2a:	4b44      	ldr	r3, [pc, #272]	; (12f3c <DMAC_Handler+0x134>)
   12e2c:	0092      	lsls	r2, r2, #2
   12e2e:	58d3      	ldr	r3, [r2, r3]
   12e30:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12e32:	4a41      	ldr	r2, [pc, #260]	; (12f38 <DMAC_Handler+0x130>)
   12e34:	693b      	ldr	r3, [r7, #16]
   12e36:	781b      	ldrb	r3, [r3, #0]
   12e38:	210f      	movs	r1, #15
   12e3a:	400b      	ands	r3, r1
   12e3c:	b2d9      	uxtb	r1, r3
   12e3e:	233f      	movs	r3, #63	; 0x3f
   12e40:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12e42:	493d      	ldr	r1, [pc, #244]	; (12f38 <DMAC_Handler+0x130>)
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	224e      	movs	r2, #78	; 0x4e
   12e4a:	5c8a      	ldrb	r2, [r1, r2]
   12e4c:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12e4e:	693b      	ldr	r3, [r7, #16]
   12e50:	781b      	ldrb	r3, [r3, #0]
   12e52:	4a3b      	ldr	r2, [pc, #236]	; (12f40 <DMAC_Handler+0x138>)
   12e54:	011b      	lsls	r3, r3, #4
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	3302      	adds	r3, #2
   12e5a:	881b      	ldrh	r3, [r3, #0]
   12e5c:	b29b      	uxth	r3, r3
   12e5e:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12e60:	693b      	ldr	r3, [r7, #16]
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	4a37      	ldr	r2, [pc, #220]	; (12f44 <DMAC_Handler+0x13c>)
   12e66:	011b      	lsls	r3, r3, #4
   12e68:	18d3      	adds	r3, r2, r3
   12e6a:	3302      	adds	r3, #2
   12e6c:	881b      	ldrh	r3, [r3, #0]
   12e6e:	b29b      	uxth	r3, r3
   12e70:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12e72:	68ba      	ldr	r2, [r7, #8]
   12e74:	687b      	ldr	r3, [r7, #4]
   12e76:	1ad2      	subs	r2, r2, r3
   12e78:	693b      	ldr	r3, [r7, #16]
   12e7a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12e7c:	230f      	movs	r3, #15
   12e7e:	18fb      	adds	r3, r7, r3
   12e80:	781b      	ldrb	r3, [r3, #0]
   12e82:	2201      	movs	r2, #1
   12e84:	4013      	ands	r3, r2
   12e86:	d016      	beq.n	12eb6 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12e88:	4a2b      	ldr	r2, [pc, #172]	; (12f38 <DMAC_Handler+0x130>)
   12e8a:	234e      	movs	r3, #78	; 0x4e
   12e8c:	2101      	movs	r1, #1
   12e8e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12e90:	693b      	ldr	r3, [r7, #16]
   12e92:	2210      	movs	r2, #16
   12e94:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12e96:	693b      	ldr	r3, [r7, #16]
   12e98:	7c1b      	ldrb	r3, [r3, #16]
   12e9a:	001a      	movs	r2, r3
   12e9c:	2301      	movs	r3, #1
   12e9e:	4013      	ands	r3, r2
   12ea0:	d042      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12ea2:	693b      	ldr	r3, [r7, #16]
   12ea4:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d03e      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12eaa:	693b      	ldr	r3, [r7, #16]
   12eac:	685b      	ldr	r3, [r3, #4]
   12eae:	693a      	ldr	r2, [r7, #16]
   12eb0:	0010      	movs	r0, r2
   12eb2:	4798      	blx	r3
   12eb4:	e038      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12eb6:	230f      	movs	r3, #15
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	781b      	ldrb	r3, [r3, #0]
   12ebc:	2202      	movs	r2, #2
   12ebe:	4013      	ands	r3, r2
   12ec0:	d016      	beq.n	12ef0 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12ec2:	4a1d      	ldr	r2, [pc, #116]	; (12f38 <DMAC_Handler+0x130>)
   12ec4:	234e      	movs	r3, #78	; 0x4e
   12ec6:	2102      	movs	r1, #2
   12ec8:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12eca:	693b      	ldr	r3, [r7, #16]
   12ecc:	2200      	movs	r2, #0
   12ece:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ed0:	693b      	ldr	r3, [r7, #16]
   12ed2:	7c1b      	ldrb	r3, [r3, #16]
   12ed4:	001a      	movs	r2, r3
   12ed6:	2302      	movs	r3, #2
   12ed8:	4013      	ands	r3, r2
   12eda:	d025      	beq.n	12f28 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d021      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12ee4:	693b      	ldr	r3, [r7, #16]
   12ee6:	689b      	ldr	r3, [r3, #8]
   12ee8:	693a      	ldr	r2, [r7, #16]
   12eea:	0010      	movs	r0, r2
   12eec:	4798      	blx	r3
   12eee:	e01b      	b.n	12f28 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12ef0:	230f      	movs	r3, #15
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2204      	movs	r2, #4
   12ef8:	4013      	ands	r3, r2
   12efa:	d015      	beq.n	12f28 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12efc:	4a0e      	ldr	r2, [pc, #56]	; (12f38 <DMAC_Handler+0x130>)
   12efe:	234e      	movs	r3, #78	; 0x4e
   12f00:	2104      	movs	r1, #4
   12f02:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12f04:	693b      	ldr	r3, [r7, #16]
   12f06:	2206      	movs	r2, #6
   12f08:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f0a:	693b      	ldr	r3, [r7, #16]
   12f0c:	7c1b      	ldrb	r3, [r3, #16]
   12f0e:	001a      	movs	r2, r3
   12f10:	2304      	movs	r3, #4
   12f12:	4013      	ands	r3, r2
   12f14:	d008      	beq.n	12f28 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12f16:	693b      	ldr	r3, [r7, #16]
   12f18:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d004      	beq.n	12f28 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	68db      	ldr	r3, [r3, #12]
   12f22:	693a      	ldr	r2, [r7, #16]
   12f24:	0010      	movs	r0, r2
   12f26:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12f28:	4b07      	ldr	r3, [pc, #28]	; (12f48 <DMAC_Handler+0x140>)
   12f2a:	4798      	blx	r3
}
   12f2c:	46c0      	nop			; (mov r8, r8)
   12f2e:	46bd      	mov	sp, r7
   12f30:	b006      	add	sp, #24
   12f32:	bd80      	pop	{r7, pc}
   12f34:	00012de1 	.word	0x00012de1
   12f38:	41004800 	.word	0x41004800
   12f3c:	200004e0 	.word	0x200004e0
   12f40:	20004750 	.word	0x20004750
   12f44:	20000490 	.word	0x20000490
   12f48:	00012df5 	.word	0x00012df5

00012f4c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	b082      	sub	sp, #8
   12f50:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12f52:	4b15      	ldr	r3, [pc, #84]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f54:	691b      	ldr	r3, [r3, #16]
   12f56:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12f58:	4b14      	ldr	r3, [pc, #80]	; (12fac <EVSYS_Handler+0x60>)
   12f5a:	699b      	ldr	r3, [r3, #24]
   12f5c:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12f5e:	4b12      	ldr	r3, [pc, #72]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f60:	689a      	ldr	r2, [r3, #8]
   12f62:	683b      	ldr	r3, [r7, #0]
   12f64:	431a      	orrs	r2, r3
   12f66:	4b10      	ldr	r3, [pc, #64]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f68:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12f6a:	4b10      	ldr	r3, [pc, #64]	; (12fac <EVSYS_Handler+0x60>)
   12f6c:	4a10      	ldr	r2, [pc, #64]	; (12fb0 <EVSYS_Handler+0x64>)
   12f6e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12f70:	e008      	b.n	12f84 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12f72:	687b      	ldr	r3, [r7, #4]
   12f74:	685a      	ldr	r2, [r3, #4]
   12f76:	687b      	ldr	r3, [r7, #4]
   12f78:	681b      	ldr	r3, [r3, #0]
   12f7a:	0018      	movs	r0, r3
   12f7c:	4790      	blx	r2
		current_hook = current_hook->next;
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	689b      	ldr	r3, [r3, #8]
   12f82:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12f84:	687b      	ldr	r3, [r7, #4]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d1f3      	bne.n	12f72 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12f8a:	4b07      	ldr	r3, [pc, #28]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f8c:	68db      	ldr	r3, [r3, #12]
   12f8e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12f90:	4b05      	ldr	r3, [pc, #20]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f92:	689b      	ldr	r3, [r3, #8]
   12f94:	683a      	ldr	r2, [r7, #0]
   12f96:	43d2      	mvns	r2, r2
   12f98:	401a      	ands	r2, r3
   12f9a:	4b03      	ldr	r3, [pc, #12]	; (12fa8 <EVSYS_Handler+0x5c>)
   12f9c:	609a      	str	r2, [r3, #8]
}
   12f9e:	46c0      	nop			; (mov r8, r8)
   12fa0:	46bd      	mov	sp, r7
   12fa2:	b002      	add	sp, #8
   12fa4:	bd80      	pop	{r7, pc}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	2000000c 	.word	0x2000000c
   12fac:	42000400 	.word	0x42000400
   12fb0:	0f0fffff 	.word	0x0f0fffff

00012fb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	0002      	movs	r2, r0
   12fbc:	6039      	str	r1, [r7, #0]
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12fc2:	1dfb      	adds	r3, r7, #7
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	2b01      	cmp	r3, #1
   12fc8:	d00a      	beq.n	12fe0 <system_apb_clock_set_mask+0x2c>
   12fca:	2b02      	cmp	r3, #2
   12fcc:	d00f      	beq.n	12fee <system_apb_clock_set_mask+0x3a>
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d114      	bne.n	12ffc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12fd2:	4b0e      	ldr	r3, [pc, #56]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd4:	4a0d      	ldr	r2, [pc, #52]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fd6:	6991      	ldr	r1, [r2, #24]
   12fd8:	683a      	ldr	r2, [r7, #0]
   12fda:	430a      	orrs	r2, r1
   12fdc:	619a      	str	r2, [r3, #24]
			break;
   12fde:	e00f      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12fe0:	4b0a      	ldr	r3, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe2:	4a0a      	ldr	r2, [pc, #40]	; (1300c <system_apb_clock_set_mask+0x58>)
   12fe4:	69d1      	ldr	r1, [r2, #28]
   12fe6:	683a      	ldr	r2, [r7, #0]
   12fe8:	430a      	orrs	r2, r1
   12fea:	61da      	str	r2, [r3, #28]
			break;
   12fec:	e008      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12fee:	4b07      	ldr	r3, [pc, #28]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff0:	4a06      	ldr	r2, [pc, #24]	; (1300c <system_apb_clock_set_mask+0x58>)
   12ff2:	6a11      	ldr	r1, [r2, #32]
   12ff4:	683a      	ldr	r2, [r7, #0]
   12ff6:	430a      	orrs	r2, r1
   12ff8:	621a      	str	r2, [r3, #32]
			break;
   12ffa:	e001      	b.n	13000 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12ffc:	2317      	movs	r3, #23
   12ffe:	e000      	b.n	13002 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13000:	2300      	movs	r3, #0
}
   13002:	0018      	movs	r0, r3
   13004:	46bd      	mov	sp, r7
   13006:	b002      	add	sp, #8
   13008:	bd80      	pop	{r7, pc}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	40000400 	.word	0x40000400

00013010 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13010:	b580      	push	{r7, lr}
   13012:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   13014:	2102      	movs	r1, #2
   13016:	2002      	movs	r0, #2
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <_system_events_init+0x28>)
   1301a:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <_system_events_init+0x2c>)
   1301e:	2201      	movs	r2, #1
   13020:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   13022:	46c0      	nop			; (mov r8, r8)
   13024:	4b05      	ldr	r3, [pc, #20]	; (1303c <_system_events_init+0x2c>)
   13026:	781b      	ldrb	r3, [r3, #0]
   13028:	b2db      	uxtb	r3, r3
   1302a:	001a      	movs	r2, r3
   1302c:	2301      	movs	r3, #1
   1302e:	4013      	ands	r3, r2
   13030:	d1f8      	bne.n	13024 <_system_events_init+0x14>
	}
}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}
   13038:	00012fb5 	.word	0x00012fb5
   1303c:	42000400 	.word	0x42000400

00013040 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13040:	b580      	push	{r7, lr}
   13042:	b084      	sub	sp, #16
   13044:	af00      	add	r7, sp, #0
   13046:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	681b      	ldr	r3, [r3, #0]
   1304c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1304e:	68fb      	ldr	r3, [r7, #12]
   13050:	69db      	ldr	r3, [r3, #28]
   13052:	2207      	movs	r2, #7
   13054:	4013      	ands	r3, r2
   13056:	1e5a      	subs	r2, r3, #1
   13058:	4193      	sbcs	r3, r2
   1305a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   1305c:	0018      	movs	r0, r3
   1305e:	46bd      	mov	sp, r7
   13060:	b004      	add	sp, #16
   13062:	bd80      	pop	{r7, pc}

00013064 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13064:	b580      	push	{r7, lr}
   13066:	b082      	sub	sp, #8
   13068:	af00      	add	r7, sp, #0
   1306a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   1306c:	46c0      	nop			; (mov r8, r8)
   1306e:	687b      	ldr	r3, [r7, #4]
   13070:	0018      	movs	r0, r3
   13072:	4b04      	ldr	r3, [pc, #16]	; (13084 <_i2c_master_wait_for_sync+0x20>)
   13074:	4798      	blx	r3
   13076:	1e03      	subs	r3, r0, #0
   13078:	d1f9      	bne.n	1306e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	46bd      	mov	sp, r7
   1307e:	b002      	add	sp, #8
   13080:	bd80      	pop	{r7, pc}
   13082:	46c0      	nop			; (mov r8, r8)
   13084:	00013041 	.word	0x00013041

00013088 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13090:	687b      	ldr	r3, [r7, #4]
   13092:	681b      	ldr	r3, [r3, #0]
   13094:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	011b      	lsls	r3, r3, #4
   1309c:	0fdb      	lsrs	r3, r3, #31
   1309e:	b2db      	uxtb	r3, r3
   130a0:	001a      	movs	r2, r3
   130a2:	230b      	movs	r3, #11
   130a4:	18fb      	adds	r3, r7, r3
   130a6:	1e51      	subs	r1, r2, #1
   130a8:	418a      	sbcs	r2, r1
   130aa:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   130ac:	2308      	movs	r3, #8
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	8b52      	ldrh	r2, [r2, #26]
   130b4:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   130b6:	687b      	ldr	r3, [r7, #4]
   130b8:	8b9b      	ldrh	r3, [r3, #28]
   130ba:	b29a      	uxth	r2, r3
   130bc:	2308      	movs	r3, #8
   130be:	18fb      	adds	r3, r7, r3
   130c0:	2108      	movs	r1, #8
   130c2:	1879      	adds	r1, r7, r1
   130c4:	8809      	ldrh	r1, [r1, #0]
   130c6:	1a8a      	subs	r2, r1, r2
   130c8:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   130ca:	687b      	ldr	r3, [r7, #4]
   130cc:	8b9b      	ldrh	r3, [r3, #28]
   130ce:	b29b      	uxth	r3, r3
   130d0:	3b01      	subs	r3, #1
   130d2:	b29a      	uxth	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   130d8:	230b      	movs	r3, #11
   130da:	18fb      	adds	r3, r7, r3
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d010      	beq.n	13104 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   130e2:	687b      	ldr	r3, [r7, #4]
   130e4:	7adb      	ldrb	r3, [r3, #11]
   130e6:	2b00      	cmp	r3, #0
   130e8:	d01c      	beq.n	13124 <_i2c_master_read+0x9c>
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	8b9b      	ldrh	r3, [r3, #28]
   130ee:	b29b      	uxth	r3, r3
   130f0:	2b01      	cmp	r3, #1
   130f2:	d117      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   130f4:	68fb      	ldr	r3, [r7, #12]
   130f6:	685b      	ldr	r3, [r3, #4]
   130f8:	2280      	movs	r2, #128	; 0x80
   130fa:	02d2      	lsls	r2, r2, #11
   130fc:	431a      	orrs	r2, r3
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	605a      	str	r2, [r3, #4]
   13102:	e00f      	b.n	13124 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	7adb      	ldrb	r3, [r3, #11]
   13108:	2b00      	cmp	r3, #0
   1310a:	d00b      	beq.n	13124 <_i2c_master_read+0x9c>
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	8b9b      	ldrh	r3, [r3, #28]
   13110:	b29b      	uxth	r3, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d106      	bne.n	13124 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13116:	68fb      	ldr	r3, [r7, #12]
   13118:	685b      	ldr	r3, [r3, #4]
   1311a:	2280      	movs	r2, #128	; 0x80
   1311c:	02d2      	lsls	r2, r2, #11
   1311e:	431a      	orrs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	8b9b      	ldrh	r3, [r3, #28]
   13128:	b29b      	uxth	r3, r3
   1312a:	2b00      	cmp	r3, #0
   1312c:	d10e      	bne.n	1314c <_i2c_master_read+0xc4>
		if (module->send_stop) {
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	7a9b      	ldrb	r3, [r3, #10]
   13132:	2b00      	cmp	r3, #0
   13134:	d00a      	beq.n	1314c <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	0018      	movs	r0, r3
   1313a:	4b0e      	ldr	r3, [pc, #56]	; (13174 <_i2c_master_read+0xec>)
   1313c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1313e:	68fb      	ldr	r3, [r7, #12]
   13140:	685b      	ldr	r3, [r3, #4]
   13142:	22c0      	movs	r2, #192	; 0xc0
   13144:	0292      	lsls	r2, r2, #10
   13146:	431a      	orrs	r2, r3
   13148:	68fb      	ldr	r3, [r7, #12]
   1314a:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	0018      	movs	r0, r3
   13150:	4b08      	ldr	r3, [pc, #32]	; (13174 <_i2c_master_read+0xec>)
   13152:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	6a1a      	ldr	r2, [r3, #32]
   13158:	2308      	movs	r3, #8
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	18d3      	adds	r3, r2, r3
   13160:	68fa      	ldr	r2, [r7, #12]
   13162:	2128      	movs	r1, #40	; 0x28
   13164:	5c52      	ldrb	r2, [r2, r1]
   13166:	b2d2      	uxtb	r2, r2
   13168:	701a      	strb	r2, [r3, #0]
}
   1316a:	46c0      	nop			; (mov r8, r8)
   1316c:	46bd      	mov	sp, r7
   1316e:	b004      	add	sp, #16
   13170:	bd80      	pop	{r7, pc}
   13172:	46c0      	nop			; (mov r8, r8)
   13174:	00013065 	.word	0x00013065

00013178 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13178:	b580      	push	{r7, lr}
   1317a:	b084      	sub	sp, #16
   1317c:	af00      	add	r7, sp, #0
   1317e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	681b      	ldr	r3, [r3, #0]
   13184:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	8b5b      	ldrh	r3, [r3, #26]
   1318a:	b29b      	uxth	r3, r3
   1318c:	001a      	movs	r2, r3
   1318e:	2304      	movs	r3, #4
   13190:	4013      	ands	r3, r2
   13192:	d004      	beq.n	1319e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13194:	687b      	ldr	r3, [r7, #4]
   13196:	2225      	movs	r2, #37	; 0x25
   13198:	211e      	movs	r1, #30
   1319a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1319c:	e024      	b.n	131e8 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1319e:	230a      	movs	r3, #10
   131a0:	18fb      	adds	r3, r7, r3
   131a2:	687a      	ldr	r2, [r7, #4]
   131a4:	8b52      	ldrh	r2, [r2, #26]
   131a6:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   131a8:	687b      	ldr	r3, [r7, #4]
   131aa:	8b9b      	ldrh	r3, [r3, #28]
   131ac:	b29a      	uxth	r2, r3
   131ae:	230a      	movs	r3, #10
   131b0:	18fb      	adds	r3, r7, r3
   131b2:	210a      	movs	r1, #10
   131b4:	1879      	adds	r1, r7, r1
   131b6:	8809      	ldrh	r1, [r1, #0]
   131b8:	1a8a      	subs	r2, r1, r2
   131ba:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   131bc:	687b      	ldr	r3, [r7, #4]
   131be:	8b9b      	ldrh	r3, [r3, #28]
   131c0:	b29b      	uxth	r3, r3
   131c2:	3b01      	subs	r3, #1
   131c4:	b29a      	uxth	r2, r3
   131c6:	687b      	ldr	r3, [r7, #4]
   131c8:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   131ca:	687b      	ldr	r3, [r7, #4]
   131cc:	0018      	movs	r0, r3
   131ce:	4b08      	ldr	r3, [pc, #32]	; (131f0 <_i2c_master_write+0x78>)
   131d0:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   131d2:	687b      	ldr	r3, [r7, #4]
   131d4:	6a1a      	ldr	r2, [r3, #32]
   131d6:	230a      	movs	r3, #10
   131d8:	18fb      	adds	r3, r7, r3
   131da:	881b      	ldrh	r3, [r3, #0]
   131dc:	18d3      	adds	r3, r2, r3
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fb      	ldr	r3, [r7, #12]
   131e4:	2228      	movs	r2, #40	; 0x28
   131e6:	5499      	strb	r1, [r3, r2]
}
   131e8:	46bd      	mov	sp, r7
   131ea:	b004      	add	sp, #16
   131ec:	bd80      	pop	{r7, pc}
   131ee:	46c0      	nop			; (mov r8, r8)
   131f0:	00013065 	.word	0x00013065

000131f4 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131fc:	687b      	ldr	r3, [r7, #4]
   131fe:	681b      	ldr	r3, [r3, #0]
   13200:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13202:	68fb      	ldr	r3, [r7, #12]
   13204:	7e1b      	ldrb	r3, [r3, #24]
   13206:	b2db      	uxtb	r3, r3
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4013      	ands	r3, r2
   1320e:	d02b      	beq.n	13268 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	2201      	movs	r2, #1
   13214:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13216:	68fb      	ldr	r3, [r7, #12]
   13218:	8b5b      	ldrh	r3, [r3, #26]
   1321a:	b29b      	uxth	r3, r3
   1321c:	001a      	movs	r2, r3
   1321e:	2302      	movs	r3, #2
   13220:	4013      	ands	r3, r2
   13222:	d004      	beq.n	1322e <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13224:	687b      	ldr	r3, [r7, #4]
   13226:	2225      	movs	r2, #37	; 0x25
   13228:	2141      	movs	r1, #65	; 0x41
   1322a:	5499      	strb	r1, [r3, r2]
   1322c:	e01c      	b.n	13268 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	8b5b      	ldrh	r3, [r3, #26]
   13232:	b29b      	uxth	r3, r3
   13234:	001a      	movs	r2, r3
   13236:	2304      	movs	r3, #4
   13238:	4013      	ands	r3, r2
   1323a:	d015      	beq.n	13268 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   1323c:	687b      	ldr	r3, [r7, #4]
   1323e:	2225      	movs	r2, #37	; 0x25
   13240:	2118      	movs	r1, #24
   13242:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	2200      	movs	r2, #0
   13248:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1324a:	687b      	ldr	r3, [r7, #4]
   1324c:	7a9b      	ldrb	r3, [r3, #10]
   1324e:	2b00      	cmp	r3, #0
   13250:	d00a      	beq.n	13268 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13252:	687b      	ldr	r3, [r7, #4]
   13254:	0018      	movs	r0, r3
   13256:	4b13      	ldr	r3, [pc, #76]	; (132a4 <_i2c_master_async_address_response+0xb0>)
   13258:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	685b      	ldr	r3, [r3, #4]
   1325e:	22c0      	movs	r2, #192	; 0xc0
   13260:	0292      	lsls	r2, r2, #10
   13262:	431a      	orrs	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13268:	687b      	ldr	r3, [r7, #4]
   1326a:	8b9b      	ldrh	r3, [r3, #28]
   1326c:	b29a      	uxth	r2, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13272:	687b      	ldr	r3, [r7, #4]
   13274:	2225      	movs	r2, #37	; 0x25
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d10e      	bne.n	1329c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2224      	movs	r2, #36	; 0x24
   13282:	5c9b      	ldrb	r3, [r3, r2]
   13284:	b2db      	uxtb	r3, r3
   13286:	2b00      	cmp	r3, #0
   13288:	d104      	bne.n	13294 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1328a:	687b      	ldr	r3, [r7, #4]
   1328c:	0018      	movs	r0, r3
   1328e:	4b06      	ldr	r3, [pc, #24]	; (132a8 <_i2c_master_async_address_response+0xb4>)
   13290:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13292:	e003      	b.n	1329c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13294:	687b      	ldr	r3, [r7, #4]
   13296:	0018      	movs	r0, r3
   13298:	4b04      	ldr	r3, [pc, #16]	; (132ac <_i2c_master_async_address_response+0xb8>)
   1329a:	4798      	blx	r3
}
   1329c:	46c0      	nop			; (mov r8, r8)
   1329e:	46bd      	mov	sp, r7
   132a0:	b004      	add	sp, #16
   132a2:	bd80      	pop	{r7, pc}
   132a4:	00013065 	.word	0x00013065
   132a8:	00013179 	.word	0x00013179
   132ac:	00013089 	.word	0x00013089

000132b0 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   132b0:	b580      	push	{r7, lr}
   132b2:	b084      	sub	sp, #16
   132b4:	af00      	add	r7, sp, #0
   132b6:	60f8      	str	r0, [r7, #12]
   132b8:	60b9      	str	r1, [r7, #8]
   132ba:	1dfb      	adds	r3, r7, #7
   132bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   132be:	1dfb      	adds	r3, r7, #7
   132c0:	781b      	ldrb	r3, [r3, #0]
   132c2:	68fa      	ldr	r2, [r7, #12]
   132c4:	3302      	adds	r3, #2
   132c6:	009b      	lsls	r3, r3, #2
   132c8:	18d3      	adds	r3, r2, r3
   132ca:	3304      	adds	r3, #4
   132cc:	68ba      	ldr	r2, [r7, #8]
   132ce:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	7e1b      	ldrb	r3, [r3, #24]
   132d4:	b2db      	uxtb	r3, r3
   132d6:	b25a      	sxtb	r2, r3
   132d8:	1dfb      	adds	r3, r7, #7
   132da:	781b      	ldrb	r3, [r3, #0]
   132dc:	2101      	movs	r1, #1
   132de:	4099      	lsls	r1, r3
   132e0:	000b      	movs	r3, r1
   132e2:	b25b      	sxtb	r3, r3
   132e4:	4313      	orrs	r3, r2
   132e6:	b25b      	sxtb	r3, r3
   132e8:	b2da      	uxtb	r2, r3
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	761a      	strb	r2, [r3, #24]
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}
	...

000132f8 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f8:	b590      	push	{r4, r7, lr}
   132fa:	b087      	sub	sp, #28
   132fc:	af00      	add	r7, sp, #0
   132fe:	6078      	str	r0, [r7, #4]
   13300:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13302:	687b      	ldr	r3, [r7, #4]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13308:	683b      	ldr	r3, [r7, #0]
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	687b      	ldr	r3, [r7, #4]
   1330e:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13310:	683b      	ldr	r3, [r7, #0]
   13312:	885a      	ldrh	r2, [r3, #2]
   13314:	687b      	ldr	r3, [r7, #4]
   13316:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13318:	687b      	ldr	r3, [r7, #4]
   1331a:	2224      	movs	r2, #36	; 0x24
   1331c:	2101      	movs	r1, #1
   1331e:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	2225      	movs	r2, #37	; 0x25
   13324:	2105      	movs	r1, #5
   13326:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13328:	693b      	ldr	r3, [r7, #16]
   1332a:	681b      	ldr	r3, [r3, #0]
   1332c:	011b      	lsls	r3, r3, #4
   1332e:	0fdb      	lsrs	r3, r3, #31
   13330:	b2db      	uxtb	r3, r3
   13332:	001a      	movs	r2, r3
   13334:	230f      	movs	r3, #15
   13336:	18fb      	adds	r3, r7, r3
   13338:	1e51      	subs	r1, r2, #1
   1333a:	418a      	sbcs	r2, r1
   1333c:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1333e:	683b      	ldr	r3, [r7, #0]
   13340:	7a5b      	ldrb	r3, [r3, #9]
   13342:	2b00      	cmp	r3, #0
   13344:	d006      	beq.n	13354 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13346:	683b      	ldr	r3, [r7, #0]
   13348:	7a9a      	ldrb	r2, [r3, #10]
   1334a:	687b      	ldr	r3, [r7, #4]
   1334c:	0011      	movs	r1, r2
   1334e:	0018      	movs	r0, r3
   13350:	4b3b      	ldr	r3, [pc, #236]	; (13440 <_i2c_master_read_packet+0x148>)
   13352:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13354:	230f      	movs	r3, #15
   13356:	18fb      	adds	r3, r7, r3
   13358:	781b      	ldrb	r3, [r3, #0]
   1335a:	2b00      	cmp	r3, #0
   1335c:	d00b      	beq.n	13376 <_i2c_master_read_packet+0x7e>
   1335e:	683b      	ldr	r3, [r7, #0]
   13360:	885b      	ldrh	r3, [r3, #2]
   13362:	2b01      	cmp	r3, #1
   13364:	d107      	bne.n	13376 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13366:	693b      	ldr	r3, [r7, #16]
   13368:	685b      	ldr	r3, [r3, #4]
   1336a:	2280      	movs	r2, #128	; 0x80
   1336c:	02d2      	lsls	r2, r2, #11
   1336e:	431a      	orrs	r2, r3
   13370:	693b      	ldr	r3, [r7, #16]
   13372:	605a      	str	r2, [r3, #4]
   13374:	e005      	b.n	13382 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13376:	693b      	ldr	r3, [r7, #16]
   13378:	685b      	ldr	r3, [r3, #4]
   1337a:	4a32      	ldr	r2, [pc, #200]	; (13444 <_i2c_master_read_packet+0x14c>)
   1337c:	401a      	ands	r2, r3
   1337e:	693b      	ldr	r3, [r7, #16]
   13380:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13382:	683b      	ldr	r3, [r7, #0]
   13384:	7a1b      	ldrb	r3, [r3, #8]
   13386:	2b00      	cmp	r3, #0
   13388:	d045      	beq.n	13416 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1338a:	683b      	ldr	r3, [r7, #0]
   1338c:	881b      	ldrh	r3, [r3, #0]
   1338e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	7a5b      	ldrb	r3, [r3, #9]
   13394:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13396:	4313      	orrs	r3, r2
   13398:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1339a:	2380      	movs	r3, #128	; 0x80
   1339c:	021b      	lsls	r3, r3, #8
   1339e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   133a0:	693b      	ldr	r3, [r7, #16]
   133a2:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   133a4:	2317      	movs	r3, #23
   133a6:	18fc      	adds	r4, r7, r3
   133a8:	687b      	ldr	r3, [r7, #4]
   133aa:	0018      	movs	r0, r3
   133ac:	4b26      	ldr	r3, [pc, #152]	; (13448 <_i2c_master_read_packet+0x150>)
   133ae:	4798      	blx	r3
   133b0:	0003      	movs	r3, r0
   133b2:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   133b4:	693b      	ldr	r3, [r7, #16]
   133b6:	685b      	ldr	r3, [r3, #4]
   133b8:	4a22      	ldr	r2, [pc, #136]	; (13444 <_i2c_master_read_packet+0x14c>)
   133ba:	401a      	ands	r2, r3
   133bc:	693b      	ldr	r3, [r7, #16]
   133be:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	781b      	ldrb	r3, [r3, #0]
   133c6:	2b00      	cmp	r3, #0
   133c8:	d107      	bne.n	133da <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   133ca:	2317      	movs	r3, #23
   133cc:	18fc      	adds	r4, r7, r3
   133ce:	687b      	ldr	r3, [r7, #4]
   133d0:	0018      	movs	r0, r3
   133d2:	4b1e      	ldr	r3, [pc, #120]	; (1344c <_i2c_master_read_packet+0x154>)
   133d4:	4798      	blx	r3
   133d6:	0003      	movs	r3, r0
   133d8:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   133da:	2317      	movs	r3, #23
   133dc:	18fb      	adds	r3, r7, r3
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d114      	bne.n	1340e <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   133e4:	693b      	ldr	r3, [r7, #16]
   133e6:	2203      	movs	r2, #3
   133e8:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   133ea:	683b      	ldr	r3, [r7, #0]
   133ec:	881b      	ldrh	r3, [r3, #0]
   133ee:	0a1b      	lsrs	r3, r3, #8
   133f0:	b29b      	uxth	r3, r3
   133f2:	2278      	movs	r2, #120	; 0x78
   133f4:	4313      	orrs	r3, r2
   133f6:	b29b      	uxth	r3, r3
   133f8:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	7a5b      	ldrb	r3, [r3, #9]
   133fe:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13400:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13402:	2201      	movs	r2, #1
   13404:	4313      	orrs	r3, r2
   13406:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13408:	693b      	ldr	r3, [r7, #16]
   1340a:	625a      	str	r2, [r3, #36]	; 0x24
   1340c:	e012      	b.n	13434 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   1340e:	2317      	movs	r3, #23
   13410:	18fb      	adds	r3, r7, r3
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	e00f      	b.n	13436 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13416:	693b      	ldr	r3, [r7, #16]
   13418:	2203      	movs	r2, #3
   1341a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1341c:	683b      	ldr	r3, [r7, #0]
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	005b      	lsls	r3, r3, #1
   13422:	2201      	movs	r2, #1
   13424:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13426:	683b      	ldr	r3, [r7, #0]
   13428:	7a5b      	ldrb	r3, [r3, #9]
   1342a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   1342c:	4313      	orrs	r3, r2
   1342e:	001a      	movs	r2, r3
   13430:	693b      	ldr	r3, [r7, #16]
   13432:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13434:	2300      	movs	r3, #0
}
   13436:	0018      	movs	r0, r3
   13438:	46bd      	mov	sp, r7
   1343a:	b007      	add	sp, #28
   1343c:	bd90      	pop	{r4, r7, pc}
   1343e:	46c0      	nop			; (mov r8, r8)
   13440:	00016dc5 	.word	0x00016dc5
   13444:	fffbffff 	.word	0xfffbffff
   13448:	00016d67 	.word	0x00016d67
   1344c:	00016d09 	.word	0x00016d09

00013450 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13450:	b580      	push	{r7, lr}
   13452:	b082      	sub	sp, #8
   13454:	af00      	add	r7, sp, #0
   13456:	6078      	str	r0, [r7, #4]
   13458:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1345a:	687b      	ldr	r3, [r7, #4]
   1345c:	8b9b      	ldrh	r3, [r3, #28]
   1345e:	b29b      	uxth	r3, r3
   13460:	2b00      	cmp	r3, #0
   13462:	d001      	beq.n	13468 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13464:	2305      	movs	r3, #5
   13466:	e00c      	b.n	13482 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	2201      	movs	r2, #1
   1346c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1346e:	687b      	ldr	r3, [r7, #4]
   13470:	2201      	movs	r2, #1
   13472:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13474:	683a      	ldr	r2, [r7, #0]
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	0011      	movs	r1, r2
   1347a:	0018      	movs	r0, r3
   1347c:	4b03      	ldr	r3, [pc, #12]	; (1348c <i2c_master_read_packet_job+0x3c>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
}
   13482:	0018      	movs	r0, r3
   13484:	46bd      	mov	sp, r7
   13486:	b002      	add	sp, #8
   13488:	bd80      	pop	{r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	000132f9 	.word	0x000132f9

00013490 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
   13498:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1349a:	687b      	ldr	r3, [r7, #4]
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   134a0:	683b      	ldr	r3, [r7, #0]
   134a2:	7a5b      	ldrb	r3, [r3, #9]
   134a4:	2b00      	cmp	r3, #0
   134a6:	d006      	beq.n	134b6 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   134a8:	683b      	ldr	r3, [r7, #0]
   134aa:	7a9a      	ldrb	r2, [r3, #10]
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	0011      	movs	r1, r2
   134b0:	0018      	movs	r0, r3
   134b2:	4b1e      	ldr	r3, [pc, #120]	; (1352c <_i2c_master_write_packet+0x9c>)
   134b4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	685b      	ldr	r3, [r3, #4]
   134ba:	4a1d      	ldr	r2, [pc, #116]	; (13530 <_i2c_master_write_packet+0xa0>)
   134bc:	401a      	ands	r2, r3
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   134c2:	683b      	ldr	r3, [r7, #0]
   134c4:	685a      	ldr	r2, [r3, #4]
   134c6:	687b      	ldr	r3, [r7, #4]
   134c8:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   134ca:	683b      	ldr	r3, [r7, #0]
   134cc:	885a      	ldrh	r2, [r3, #2]
   134ce:	687b      	ldr	r3, [r7, #4]
   134d0:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   134d2:	687b      	ldr	r3, [r7, #4]
   134d4:	2224      	movs	r2, #36	; 0x24
   134d6:	2100      	movs	r1, #0
   134d8:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	2225      	movs	r2, #37	; 0x25
   134de:	2105      	movs	r1, #5
   134e0:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   134e2:	68fb      	ldr	r3, [r7, #12]
   134e4:	2203      	movs	r2, #3
   134e6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   134e8:	683b      	ldr	r3, [r7, #0]
   134ea:	7a1b      	ldrb	r3, [r3, #8]
   134ec:	2b00      	cmp	r3, #0
   134ee:	d00d      	beq.n	1350c <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134f0:	683b      	ldr	r3, [r7, #0]
   134f2:	881b      	ldrh	r3, [r3, #0]
   134f4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   134f6:	683b      	ldr	r3, [r7, #0]
   134f8:	7a5b      	ldrb	r3, [r3, #9]
   134fa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   134fc:	4313      	orrs	r3, r2
   134fe:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13500:	2380      	movs	r3, #128	; 0x80
   13502:	021b      	lsls	r3, r3, #8
   13504:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13506:	68fb      	ldr	r3, [r7, #12]
   13508:	625a      	str	r2, [r3, #36]	; 0x24
   1350a:	e009      	b.n	13520 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1350c:	683b      	ldr	r3, [r7, #0]
   1350e:	881b      	ldrh	r3, [r3, #0]
   13510:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13512:	683b      	ldr	r3, [r7, #0]
   13514:	7a5b      	ldrb	r3, [r3, #9]
   13516:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13518:	4313      	orrs	r3, r2
   1351a:	001a      	movs	r2, r3
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13520:	2300      	movs	r3, #0
}
   13522:	0018      	movs	r0, r3
   13524:	46bd      	mov	sp, r7
   13526:	b004      	add	sp, #16
   13528:	bd80      	pop	{r7, pc}
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	00016dc5 	.word	0x00016dc5
   13530:	fffbffff 	.word	0xfffbffff

00013534 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13534:	b580      	push	{r7, lr}
   13536:	b082      	sub	sp, #8
   13538:	af00      	add	r7, sp, #0
   1353a:	6078      	str	r0, [r7, #4]
   1353c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   1353e:	687b      	ldr	r3, [r7, #4]
   13540:	8b9b      	ldrh	r3, [r3, #28]
   13542:	b29b      	uxth	r3, r3
   13544:	2b00      	cmp	r3, #0
   13546:	d001      	beq.n	1354c <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13548:	2305      	movs	r3, #5
   1354a:	e00c      	b.n	13566 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   1354c:	687b      	ldr	r3, [r7, #4]
   1354e:	2201      	movs	r2, #1
   13550:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13552:	687b      	ldr	r3, [r7, #4]
   13554:	2201      	movs	r2, #1
   13556:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13558:	683a      	ldr	r2, [r7, #0]
   1355a:	687b      	ldr	r3, [r7, #4]
   1355c:	0011      	movs	r1, r2
   1355e:	0018      	movs	r0, r3
   13560:	4b03      	ldr	r3, [pc, #12]	; (13570 <i2c_master_write_packet_job+0x3c>)
   13562:	4798      	blx	r3
   13564:	0003      	movs	r3, r0
}
   13566:	0018      	movs	r0, r3
   13568:	46bd      	mov	sp, r7
   1356a:	b002      	add	sp, #8
   1356c:	bd80      	pop	{r7, pc}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	00013491 	.word	0x00013491

00013574 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13574:	b580      	push	{r7, lr}
   13576:	b086      	sub	sp, #24
   13578:	af00      	add	r7, sp, #0
   1357a:	0002      	movs	r2, r0
   1357c:	1dfb      	adds	r3, r7, #7
   1357e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13580:	1dfb      	adds	r3, r7, #7
   13582:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13584:	4b93      	ldr	r3, [pc, #588]	; (137d4 <_i2c_master_interrupt_handler+0x260>)
   13586:	0092      	lsls	r2, r2, #2
   13588:	58d3      	ldr	r3, [r2, r3]
   1358a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1358c:	697b      	ldr	r3, [r7, #20]
   1358e:	681b      	ldr	r3, [r3, #0]
   13590:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	681b      	ldr	r3, [r3, #0]
   13596:	011b      	lsls	r3, r3, #4
   13598:	0fdb      	lsrs	r3, r3, #31
   1359a:	b2db      	uxtb	r3, r3
   1359c:	001a      	movs	r2, r3
   1359e:	230f      	movs	r3, #15
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	1e51      	subs	r1, r2, #1
   135a4:	418a      	sbcs	r2, r1
   135a6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   135a8:	230e      	movs	r3, #14
   135aa:	18fb      	adds	r3, r7, r3
   135ac:	697a      	ldr	r2, [r7, #20]
   135ae:	7e52      	ldrb	r2, [r2, #25]
   135b0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	7e1b      	ldrb	r3, [r3, #24]
   135b6:	b2da      	uxtb	r2, r3
   135b8:	230e      	movs	r3, #14
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	210e      	movs	r1, #14
   135be:	1879      	adds	r1, r7, r1
   135c0:	7809      	ldrb	r1, [r1, #0]
   135c2:	400a      	ands	r2, r1
   135c4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	8b5b      	ldrh	r3, [r3, #26]
   135ca:	b29b      	uxth	r3, r3
   135cc:	2b00      	cmp	r3, #0
   135ce:	d109      	bne.n	135e4 <_i2c_master_interrupt_handler+0x70>
   135d0:	697b      	ldr	r3, [r7, #20]
   135d2:	8b9b      	ldrh	r3, [r3, #28]
   135d4:	b29b      	uxth	r3, r3
   135d6:	2b00      	cmp	r3, #0
   135d8:	d004      	beq.n	135e4 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   135da:	697b      	ldr	r3, [r7, #20]
   135dc:	0018      	movs	r0, r3
   135de:	4b7e      	ldr	r3, [pc, #504]	; (137d8 <_i2c_master_interrupt_handler+0x264>)
   135e0:	4798      	blx	r3
   135e2:	e070      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   135e4:	697b      	ldr	r3, [r7, #20]
   135e6:	8b5b      	ldrh	r3, [r3, #26]
   135e8:	b29b      	uxth	r3, r3
   135ea:	2b00      	cmp	r3, #0
   135ec:	d039      	beq.n	13662 <_i2c_master_interrupt_handler+0xee>
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	8b9b      	ldrh	r3, [r3, #28]
   135f2:	b29b      	uxth	r3, r3
   135f4:	2b00      	cmp	r3, #0
   135f6:	d134      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   135f8:	697b      	ldr	r3, [r7, #20]
   135fa:	2225      	movs	r2, #37	; 0x25
   135fc:	5c9b      	ldrb	r3, [r3, r2]
   135fe:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13600:	2b05      	cmp	r3, #5
   13602:	d12e      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13604:	697b      	ldr	r3, [r7, #20]
   13606:	2224      	movs	r2, #36	; 0x24
   13608:	5c9b      	ldrb	r3, [r3, r2]
   1360a:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1360c:	2b00      	cmp	r3, #0
   1360e:	d128      	bne.n	13662 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13610:	693b      	ldr	r3, [r7, #16]
   13612:	2203      	movs	r2, #3
   13614:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13616:	697b      	ldr	r3, [r7, #20]
   13618:	2200      	movs	r2, #0
   1361a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   1361c:	697b      	ldr	r3, [r7, #20]
   1361e:	2225      	movs	r2, #37	; 0x25
   13620:	2100      	movs	r1, #0
   13622:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	7a9b      	ldrb	r3, [r3, #10]
   13628:	2b00      	cmp	r3, #0
   1362a:	d00b      	beq.n	13644 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1362c:	697b      	ldr	r3, [r7, #20]
   1362e:	0018      	movs	r0, r3
   13630:	4b6a      	ldr	r3, [pc, #424]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   13632:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	22c0      	movs	r2, #192	; 0xc0
   1363a:	0292      	lsls	r2, r2, #10
   1363c:	431a      	orrs	r2, r3
   1363e:	693b      	ldr	r3, [r7, #16]
   13640:	605a      	str	r2, [r3, #4]
   13642:	e002      	b.n	1364a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13644:	693b      	ldr	r3, [r7, #16]
   13646:	2201      	movs	r2, #1
   13648:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1364a:	230e      	movs	r3, #14
   1364c:	18fb      	adds	r3, r7, r3
   1364e:	781b      	ldrb	r3, [r3, #0]
   13650:	2201      	movs	r2, #1
   13652:	4013      	ands	r3, r2
   13654:	d037      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13656:	697b      	ldr	r3, [r7, #20]
   13658:	68db      	ldr	r3, [r3, #12]
   1365a:	697a      	ldr	r2, [r7, #20]
   1365c:	0010      	movs	r0, r2
   1365e:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13660:	e031      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8b5b      	ldrh	r3, [r3, #26]
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d02c      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	8b9b      	ldrh	r3, [r3, #28]
   13670:	b29b      	uxth	r3, r3
   13672:	2b00      	cmp	r3, #0
   13674:	d027      	beq.n	136c6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	8b5b      	ldrh	r3, [r3, #26]
   1367a:	b29b      	uxth	r3, r3
   1367c:	001a      	movs	r2, r3
   1367e:	2320      	movs	r3, #32
   13680:	4013      	ands	r3, r2
   13682:	d111      	bne.n	136a8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13684:	230f      	movs	r3, #15
   13686:	18fb      	adds	r3, r7, r3
   13688:	781b      	ldrb	r3, [r3, #0]
   1368a:	2201      	movs	r2, #1
   1368c:	4053      	eors	r3, r2
   1368e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13690:	2b00      	cmp	r3, #0
   13692:	d104      	bne.n	1369e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13694:	697b      	ldr	r3, [r7, #20]
   13696:	8b9b      	ldrh	r3, [r3, #28]
   13698:	b29b      	uxth	r3, r3
   1369a:	2b01      	cmp	r3, #1
   1369c:	d004      	beq.n	136a8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	2225      	movs	r2, #37	; 0x25
   136a2:	2141      	movs	r1, #65	; 0x41
   136a4:	5499      	strb	r1, [r3, r2]
   136a6:	e00e      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   136a8:	697b      	ldr	r3, [r7, #20]
   136aa:	2224      	movs	r2, #36	; 0x24
   136ac:	5c9b      	ldrb	r3, [r3, r2]
   136ae:	b2db      	uxtb	r3, r3
   136b0:	2b00      	cmp	r3, #0
   136b2:	d104      	bne.n	136be <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   136b4:	697b      	ldr	r3, [r7, #20]
   136b6:	0018      	movs	r0, r3
   136b8:	4b49      	ldr	r3, [pc, #292]	; (137e0 <_i2c_master_interrupt_handler+0x26c>)
   136ba:	4798      	blx	r3
   136bc:	e003      	b.n	136c6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   136be:	697b      	ldr	r3, [r7, #20]
   136c0:	0018      	movs	r0, r3
   136c2:	4b48      	ldr	r3, [pc, #288]	; (137e4 <_i2c_master_interrupt_handler+0x270>)
   136c4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136c6:	697b      	ldr	r3, [r7, #20]
   136c8:	8b5b      	ldrh	r3, [r3, #26]
   136ca:	b29b      	uxth	r3, r3
   136cc:	2b00      	cmp	r3, #0
   136ce:	d047      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
   136d0:	697b      	ldr	r3, [r7, #20]
   136d2:	8b9b      	ldrh	r3, [r3, #28]
   136d4:	b29b      	uxth	r3, r3
   136d6:	2b00      	cmp	r3, #0
   136d8:	d142      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   136da:	697b      	ldr	r3, [r7, #20]
   136dc:	2225      	movs	r2, #37	; 0x25
   136de:	5c9b      	ldrb	r3, [r3, r2]
   136e0:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   136e2:	2b05      	cmp	r3, #5
   136e4:	d13c      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   136e6:	697b      	ldr	r3, [r7, #20]
   136e8:	2224      	movs	r2, #36	; 0x24
   136ea:	5c9b      	ldrb	r3, [r3, r2]
   136ec:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   136ee:	2b01      	cmp	r3, #1
   136f0:	d136      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   136f2:	693b      	ldr	r3, [r7, #16]
   136f4:	7e1b      	ldrb	r3, [r3, #24]
   136f6:	b2db      	uxtb	r3, r3
   136f8:	001a      	movs	r2, r3
   136fa:	2302      	movs	r3, #2
   136fc:	4013      	ands	r3, r2
   136fe:	d002      	beq.n	13706 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2202      	movs	r2, #2
   13704:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13706:	693b      	ldr	r3, [r7, #16]
   13708:	2203      	movs	r2, #3
   1370a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	2200      	movs	r2, #0
   13710:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	2225      	movs	r2, #37	; 0x25
   13716:	2100      	movs	r1, #0
   13718:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1371a:	230e      	movs	r3, #14
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	2202      	movs	r2, #2
   13722:	4013      	ands	r3, r2
   13724:	d00b      	beq.n	1373e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	2224      	movs	r2, #36	; 0x24
   1372a:	5c9b      	ldrb	r3, [r3, r2]
   1372c:	b2db      	uxtb	r3, r3
   1372e:	2b01      	cmp	r3, #1
   13730:	d105      	bne.n	1373e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13732:	697b      	ldr	r3, [r7, #20]
   13734:	691b      	ldr	r3, [r3, #16]
   13736:	697a      	ldr	r2, [r7, #20]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e010      	b.n	13760 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   1373e:	230e      	movs	r3, #14
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2201      	movs	r2, #1
   13746:	4013      	ands	r3, r2
   13748:	d00a      	beq.n	13760 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1374a:	697b      	ldr	r3, [r7, #20]
   1374c:	2224      	movs	r2, #36	; 0x24
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	b2db      	uxtb	r3, r3
   13752:	2b00      	cmp	r3, #0
   13754:	d104      	bne.n	13760 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13756:	697b      	ldr	r3, [r7, #20]
   13758:	68db      	ldr	r3, [r3, #12]
   1375a:	697a      	ldr	r2, [r7, #20]
   1375c:	0010      	movs	r0, r2
   1375e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13760:	697b      	ldr	r3, [r7, #20]
   13762:	2225      	movs	r2, #37	; 0x25
   13764:	5c9b      	ldrb	r3, [r3, r2]
   13766:	b2db      	uxtb	r3, r3
   13768:	2b05      	cmp	r3, #5
   1376a:	d02e      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
   1376c:	697b      	ldr	r3, [r7, #20]
   1376e:	2225      	movs	r2, #37	; 0x25
   13770:	5c9b      	ldrb	r3, [r3, r2]
   13772:	b2db      	uxtb	r3, r3
   13774:	2b00      	cmp	r3, #0
   13776:	d028      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13778:	693b      	ldr	r3, [r7, #16]
   1377a:	2203      	movs	r2, #3
   1377c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	2200      	movs	r2, #0
   13782:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	2200      	movs	r2, #0
   13788:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2225      	movs	r2, #37	; 0x25
   1378e:	5c9b      	ldrb	r3, [r3, r2]
   13790:	b2db      	uxtb	r3, r3
   13792:	2b41      	cmp	r3, #65	; 0x41
   13794:	d00e      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1379a:	2b00      	cmp	r3, #0
   1379c:	d00a      	beq.n	137b4 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1379e:	697b      	ldr	r3, [r7, #20]
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <_i2c_master_interrupt_handler+0x268>)
   137a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	685b      	ldr	r3, [r3, #4]
   137aa:	22e0      	movs	r2, #224	; 0xe0
   137ac:	02d2      	lsls	r2, r2, #11
   137ae:	431a      	orrs	r2, r3
   137b0:	693b      	ldr	r3, [r7, #16]
   137b2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   137b4:	230e      	movs	r3, #14
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	781b      	ldrb	r3, [r3, #0]
   137ba:	2204      	movs	r2, #4
   137bc:	4013      	ands	r3, r2
   137be:	d004      	beq.n	137ca <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   137c0:	697b      	ldr	r3, [r7, #20]
   137c2:	695b      	ldr	r3, [r3, #20]
   137c4:	697a      	ldr	r2, [r7, #20]
   137c6:	0010      	movs	r0, r2
   137c8:	4798      	blx	r3
		}
	}
}
   137ca:	46c0      	nop			; (mov r8, r8)
   137cc:	46bd      	mov	sp, r7
   137ce:	b006      	add	sp, #24
   137d0:	bd80      	pop	{r7, pc}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	20005bcc 	.word	0x20005bcc
   137d8:	000131f5 	.word	0x000131f5
   137dc:	00013065 	.word	0x00013065
   137e0:	00013179 	.word	0x00013179
   137e4:	00013089 	.word	0x00013089

000137e8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   137e8:	b580      	push	{r7, lr}
   137ea:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   137ec:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   137f0:	4b02      	ldr	r3, [pc, #8]	; (137fc <NVIC_SystemReset+0x14>)
   137f2:	4a03      	ldr	r2, [pc, #12]	; (13800 <NVIC_SystemReset+0x18>)
   137f4:	60da      	str	r2, [r3, #12]
   137f6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   137fa:	e7fe      	b.n	137fa <NVIC_SystemReset+0x12>
   137fc:	e000ed00 	.word	0xe000ed00
   13800:	05fa0004 	.word	0x05fa0004

00013804 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13804:	b580      	push	{r7, lr}
   13806:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13808:	4b02      	ldr	r3, [pc, #8]	; (13814 <system_reset+0x10>)
   1380a:	4798      	blx	r3
}
   1380c:	46c0      	nop			; (mov r8, r8)
   1380e:	46bd      	mov	sp, r7
   13810:	bd80      	pop	{r7, pc}
   13812:	46c0      	nop			; (mov r8, r8)
   13814:	000137e9 	.word	0x000137e9

00013818 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13818:	b580      	push	{r7, lr}
   1381a:	b086      	sub	sp, #24
   1381c:	af00      	add	r7, sp, #0
   1381e:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13820:	4b9c      	ldr	r3, [pc, #624]	; (13a94 <vCommandConsoleTask+0x27c>)
   13822:	0018      	movs	r0, r3
   13824:	4b9c      	ldr	r3, [pc, #624]	; (13a98 <vCommandConsoleTask+0x280>)
   13826:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13828:	4b9c      	ldr	r3, [pc, #624]	; (13a9c <vCommandConsoleTask+0x284>)
   1382a:	0018      	movs	r0, r3
   1382c:	4b9a      	ldr	r3, [pc, #616]	; (13a98 <vCommandConsoleTask+0x280>)
   1382e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13830:	4b9b      	ldr	r3, [pc, #620]	; (13aa0 <vCommandConsoleTask+0x288>)
   13832:	0018      	movs	r0, r3
   13834:	4b98      	ldr	r3, [pc, #608]	; (13a98 <vCommandConsoleTask+0x280>)
   13836:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendTestData);
   13838:	4b9a      	ldr	r3, [pc, #616]	; (13aa4 <vCommandConsoleTask+0x28c>)
   1383a:	0018      	movs	r0, r3
   1383c:	4b96      	ldr	r3, [pc, #600]	; (13a98 <vCommandConsoleTask+0x280>)
   1383e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13840:	4b99      	ldr	r3, [pc, #612]	; (13aa8 <vCommandConsoleTask+0x290>)
   13842:	0018      	movs	r0, r3
   13844:	4b94      	ldr	r3, [pc, #592]	; (13a98 <vCommandConsoleTask+0x280>)
   13846:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSendWeightData);
   13848:	4b98      	ldr	r3, [pc, #608]	; (13aac <vCommandConsoleTask+0x294>)
   1384a:	0018      	movs	r0, r3
   1384c:	4b92      	ldr	r3, [pc, #584]	; (13a98 <vCommandConsoleTask+0x280>)
   1384e:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoOpen);
   13850:	4b97      	ldr	r3, [pc, #604]	; (13ab0 <vCommandConsoleTask+0x298>)
   13852:	0018      	movs	r0, r3
   13854:	4b90      	ldr	r3, [pc, #576]	; (13a98 <vCommandConsoleTask+0x280>)
   13856:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xServoClose);
   13858:	4b96      	ldr	r3, [pc, #600]	; (13ab4 <vCommandConsoleTask+0x29c>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b8e      	ldr	r3, [pc, #568]	; (13a98 <vCommandConsoleTask+0x280>)
   1385e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13860:	2317      	movs	r3, #23
   13862:	18fb      	adds	r3, r7, r3
   13864:	2200      	movs	r2, #0
   13866:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13868:	4b93      	ldr	r3, [pc, #588]	; (13ab8 <vCommandConsoleTask+0x2a0>)
   1386a:	0018      	movs	r0, r3
   1386c:	4b93      	ldr	r3, [pc, #588]	; (13abc <vCommandConsoleTask+0x2a4>)
   1386e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13870:	2203      	movs	r2, #3
   13872:	2100      	movs	r1, #0
   13874:	2001      	movs	r0, #1
   13876:	4b92      	ldr	r3, [pc, #584]	; (13ac0 <vCommandConsoleTask+0x2a8>)
   13878:	4798      	blx	r3
   1387a:	0002      	movs	r2, r0
   1387c:	4b91      	ldr	r3, [pc, #580]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   1387e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13880:	4b90      	ldr	r3, [pc, #576]	; (13ac4 <vCommandConsoleTask+0x2ac>)
   13882:	681b      	ldr	r3, [r3, #0]
   13884:	2b00      	cmp	r3, #0
   13886:	d107      	bne.n	13898 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13888:	4b8f      	ldr	r3, [pc, #572]	; (13ac8 <vCommandConsoleTask+0x2b0>)
   1388a:	0019      	movs	r1, r3
   1388c:	2003      	movs	r0, #3
   1388e:	4b8f      	ldr	r3, [pc, #572]	; (13acc <vCommandConsoleTask+0x2b4>)
   13890:	4798      	blx	r3
        vTaskSuspend(NULL);
   13892:	2000      	movs	r0, #0
   13894:	4b8e      	ldr	r3, [pc, #568]	; (13ad0 <vCommandConsoleTask+0x2b8>)
   13896:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13898:	230c      	movs	r3, #12
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	0018      	movs	r0, r3
   1389e:	4b8d      	ldr	r3, [pc, #564]	; (13ad4 <vCommandConsoleTask+0x2bc>)
   138a0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   138a2:	230c      	movs	r3, #12
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2b0a      	cmp	r3, #10
   138aa:	d004      	beq.n	138b6 <vCommandConsoleTask+0x9e>
   138ac:	230c      	movs	r3, #12
   138ae:	18fb      	adds	r3, r7, r3
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	2b0d      	cmp	r3, #13
   138b4:	d137      	bne.n	13926 <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   138b6:	4b88      	ldr	r3, [pc, #544]	; (13ad8 <vCommandConsoleTask+0x2c0>)
   138b8:	0018      	movs	r0, r3
   138ba:	4b80      	ldr	r3, [pc, #512]	; (13abc <vCommandConsoleTask+0x2a4>)
   138bc:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   138be:	4b87      	ldr	r3, [pc, #540]	; (13adc <vCommandConsoleTask+0x2c4>)
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   138c4:	4b86      	ldr	r3, [pc, #536]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   138c6:	2200      	movs	r2, #0
   138c8:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   138ca:	4986      	ldr	r1, [pc, #536]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138cc:	4b86      	ldr	r3, [pc, #536]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138ce:	2231      	movs	r2, #49	; 0x31
   138d0:	0018      	movs	r0, r3
   138d2:	4b86      	ldr	r3, [pc, #536]	; (13aec <vCommandConsoleTask+0x2d4>)
   138d4:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   138d6:	4b84      	ldr	r3, [pc, #528]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   138d8:	2231      	movs	r2, #49	; 0x31
   138da:	2100      	movs	r1, #0
   138dc:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   138de:	4984      	ldr	r1, [pc, #528]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138e0:	4b80      	ldr	r3, [pc, #512]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   138e2:	2264      	movs	r2, #100	; 0x64
   138e4:	0018      	movs	r0, r3
   138e6:	4b83      	ldr	r3, [pc, #524]	; (13af4 <vCommandConsoleTask+0x2dc>)
   138e8:	4798      	blx	r3
   138ea:	0003      	movs	r3, r0
   138ec:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   138ee:	4b80      	ldr	r3, [pc, #512]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f0:	2263      	movs	r2, #99	; 0x63
   138f2:	2100      	movs	r1, #0
   138f4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   138f6:	4b7e      	ldr	r3, [pc, #504]	; (13af0 <vCommandConsoleTask+0x2d8>)
   138f8:	0018      	movs	r0, r3
   138fa:	4b70      	ldr	r3, [pc, #448]	; (13abc <vCommandConsoleTask+0x2a4>)
   138fc:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   138fe:	693b      	ldr	r3, [r7, #16]
   13900:	2b00      	cmp	r3, #0
   13902:	d1ec      	bne.n	138de <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13904:	2317      	movs	r3, #23
   13906:	18fb      	adds	r3, r7, r3
   13908:	2200      	movs	r2, #0
   1390a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1390c:	4b75      	ldr	r3, [pc, #468]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   1390e:	2232      	movs	r2, #50	; 0x32
   13910:	2100      	movs	r1, #0
   13912:	0018      	movs	r0, r3
   13914:	4b78      	ldr	r3, [pc, #480]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13916:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13918:	4b75      	ldr	r3, [pc, #468]	; (13af0 <vCommandConsoleTask+0x2d8>)
   1391a:	2264      	movs	r2, #100	; 0x64
   1391c:	2100      	movs	r1, #0
   1391e:	0018      	movs	r0, r3
   13920:	4b75      	ldr	r3, [pc, #468]	; (13af8 <vCommandConsoleTask+0x2e0>)
   13922:	4798      	blx	r3
   13924:	e0b5      	b.n	13a92 <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13926:	4b6d      	ldr	r3, [pc, #436]	; (13adc <vCommandConsoleTask+0x2c4>)
   13928:	781b      	ldrb	r3, [r3, #0]
   1392a:	2b00      	cmp	r3, #0
   1392c:	d059      	beq.n	139e2 <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1392e:	4b6c      	ldr	r3, [pc, #432]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13930:	781b      	ldrb	r3, [r3, #0]
   13932:	2b03      	cmp	r3, #3
   13934:	d80c      	bhi.n	13950 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13936:	4b6a      	ldr	r3, [pc, #424]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13938:	781b      	ldrb	r3, [r3, #0]
   1393a:	1c5a      	adds	r2, r3, #1
   1393c:	b2d1      	uxtb	r1, r2
   1393e:	4a68      	ldr	r2, [pc, #416]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13940:	7011      	strb	r1, [r2, #0]
   13942:	001a      	movs	r2, r3
   13944:	230c      	movs	r3, #12
   13946:	18fb      	adds	r3, r7, r3
   13948:	7819      	ldrb	r1, [r3, #0]
   1394a:	4b6c      	ldr	r3, [pc, #432]	; (13afc <vCommandConsoleTask+0x2e4>)
   1394c:	5499      	strb	r1, [r3, r2]
   1394e:	e005      	b.n	1395c <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   13950:	4b62      	ldr	r3, [pc, #392]	; (13adc <vCommandConsoleTask+0x2c4>)
   13952:	2200      	movs	r2, #0
   13954:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13956:	4b62      	ldr	r3, [pc, #392]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13958:	2200      	movs	r2, #0
   1395a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1395c:	4b60      	ldr	r3, [pc, #384]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	2b01      	cmp	r3, #1
   13962:	d999      	bls.n	13898 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13964:	4a66      	ldr	r2, [pc, #408]	; (13b00 <vCommandConsoleTask+0x2e8>)
   13966:	4b65      	ldr	r3, [pc, #404]	; (13afc <vCommandConsoleTask+0x2e4>)
   13968:	0011      	movs	r1, r2
   1396a:	0018      	movs	r0, r3
   1396c:	4b65      	ldr	r3, [pc, #404]	; (13b04 <vCommandConsoleTask+0x2ec>)
   1396e:	4798      	blx	r3
   13970:	1e03      	subs	r3, r0, #0
   13972:	d02f      	beq.n	139d4 <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13974:	4964      	ldr	r1, [pc, #400]	; (13b08 <vCommandConsoleTask+0x2f0>)
   13976:	4b5b      	ldr	r3, [pc, #364]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13978:	221b      	movs	r2, #27
   1397a:	0018      	movs	r0, r3
   1397c:	4b63      	ldr	r3, [pc, #396]	; (13b0c <vCommandConsoleTask+0x2f4>)
   1397e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13980:	4b58      	ldr	r3, [pc, #352]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13982:	0018      	movs	r0, r3
   13984:	4b4d      	ldr	r3, [pc, #308]	; (13abc <vCommandConsoleTask+0x2a4>)
   13986:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13988:	2317      	movs	r3, #23
   1398a:	18fb      	adds	r3, r7, r3
   1398c:	2200      	movs	r2, #0
   1398e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13990:	4b54      	ldr	r3, [pc, #336]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13992:	2232      	movs	r2, #50	; 0x32
   13994:	2100      	movs	r1, #0
   13996:	0018      	movs	r0, r3
   13998:	4b57      	ldr	r3, [pc, #348]	; (13af8 <vCommandConsoleTask+0x2e0>)
   1399a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1399c:	4952      	ldr	r1, [pc, #328]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   1399e:	4b51      	ldr	r3, [pc, #324]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139a0:	2231      	movs	r2, #49	; 0x31
   139a2:	0018      	movs	r0, r3
   139a4:	4b51      	ldr	r3, [pc, #324]	; (13aec <vCommandConsoleTask+0x2d4>)
   139a6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   139a8:	4b4e      	ldr	r3, [pc, #312]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139aa:	0018      	movs	r0, r3
   139ac:	4b58      	ldr	r3, [pc, #352]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139ae:	4798      	blx	r3
   139b0:	0003      	movs	r3, r0
   139b2:	2b30      	cmp	r3, #48	; 0x30
   139b4:	d806      	bhi.n	139c4 <vCommandConsoleTask+0x1ac>
   139b6:	4b4c      	ldr	r3, [pc, #304]	; (13ae8 <vCommandConsoleTask+0x2d0>)
   139b8:	0018      	movs	r0, r3
   139ba:	4b55      	ldr	r3, [pc, #340]	; (13b10 <vCommandConsoleTask+0x2f8>)
   139bc:	4798      	blx	r3
   139be:	0003      	movs	r3, r0
   139c0:	b2da      	uxtb	r2, r3
   139c2:	e000      	b.n	139c6 <vCommandConsoleTask+0x1ae>
   139c4:	2231      	movs	r2, #49	; 0x31
   139c6:	2317      	movs	r3, #23
   139c8:	18fb      	adds	r3, r7, r3
   139ca:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   139cc:	4b45      	ldr	r3, [pc, #276]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   139ce:	0018      	movs	r0, r3
   139d0:	4b3a      	ldr	r3, [pc, #232]	; (13abc <vCommandConsoleTask+0x2a4>)
   139d2:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   139d4:	4b41      	ldr	r3, [pc, #260]	; (13adc <vCommandConsoleTask+0x2c4>)
   139d6:	2200      	movs	r2, #0
   139d8:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   139da:	4b41      	ldr	r3, [pc, #260]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   139dc:	2200      	movs	r2, #0
   139de:	701a      	strb	r2, [r3, #0]
   139e0:	e75a      	b.n	13898 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   139e2:	230c      	movs	r3, #12
   139e4:	18fb      	adds	r3, r7, r3
   139e6:	781b      	ldrb	r3, [r3, #0]
   139e8:	2b0d      	cmp	r3, #13
   139ea:	d100      	bne.n	139ee <vCommandConsoleTask+0x1d6>
   139ec:	e754      	b.n	13898 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139ee:	230c      	movs	r3, #12
   139f0:	18fb      	adds	r3, r7, r3
   139f2:	781b      	ldrb	r3, [r3, #0]
   139f4:	2b08      	cmp	r3, #8
   139f6:	d004      	beq.n	13a02 <vCommandConsoleTask+0x1ea>
   139f8:	230c      	movs	r3, #12
   139fa:	18fb      	adds	r3, r7, r3
   139fc:	781b      	ldrb	r3, [r3, #0]
   139fe:	2b7f      	cmp	r3, #127	; 0x7f
   13a00:	d11c      	bne.n	13a3c <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13a02:	2308      	movs	r3, #8
   13a04:	18fb      	adds	r3, r7, r3
   13a06:	4a43      	ldr	r2, [pc, #268]	; (13b14 <vCommandConsoleTask+0x2fc>)
   13a08:	6812      	ldr	r2, [r2, #0]
   13a0a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13a0c:	2308      	movs	r3, #8
   13a0e:	18fb      	adds	r3, r7, r3
   13a10:	0018      	movs	r0, r3
   13a12:	4b2a      	ldr	r3, [pc, #168]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a14:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13a16:	2317      	movs	r3, #23
   13a18:	18fb      	adds	r3, r7, r3
   13a1a:	781b      	ldrb	r3, [r3, #0]
   13a1c:	2b00      	cmp	r3, #0
   13a1e:	d037      	beq.n	13a90 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   13a20:	2317      	movs	r3, #23
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	781a      	ldrb	r2, [r3, #0]
   13a26:	2317      	movs	r3, #23
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	3a01      	subs	r2, #1
   13a2c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13a2e:	2317      	movs	r3, #23
   13a30:	18fb      	adds	r3, r7, r3
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	4a2b      	ldr	r2, [pc, #172]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a36:	2100      	movs	r1, #0
   13a38:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a3a:	e029      	b.n	13a90 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13a3c:	230c      	movs	r3, #12
   13a3e:	18fb      	adds	r3, r7, r3
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	2b1b      	cmp	r3, #27
   13a44:	d106      	bne.n	13a54 <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   13a46:	4b25      	ldr	r3, [pc, #148]	; (13adc <vCommandConsoleTask+0x2c4>)
   13a48:	2201      	movs	r2, #1
   13a4a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   13a4c:	4b24      	ldr	r3, [pc, #144]	; (13ae0 <vCommandConsoleTask+0x2c8>)
   13a4e:	2200      	movs	r2, #0
   13a50:	701a      	strb	r2, [r3, #0]
   13a52:	e721      	b.n	13898 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13a54:	2317      	movs	r3, #23
   13a56:	18fb      	adds	r3, r7, r3
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b31      	cmp	r3, #49	; 0x31
   13a5c:	d80e      	bhi.n	13a7c <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   13a5e:	2317      	movs	r3, #23
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	781b      	ldrb	r3, [r3, #0]
   13a64:	220c      	movs	r2, #12
   13a66:	18ba      	adds	r2, r7, r2
   13a68:	7811      	ldrb	r1, [r2, #0]
   13a6a:	4a1e      	ldr	r2, [pc, #120]	; (13ae4 <vCommandConsoleTask+0x2cc>)
   13a6c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13a6e:	2317      	movs	r3, #23
   13a70:	18fb      	adds	r3, r7, r3
   13a72:	781a      	ldrb	r2, [r3, #0]
   13a74:	2317      	movs	r3, #23
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	3201      	adds	r2, #1
   13a7a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   13a7c:	230c      	movs	r3, #12
   13a7e:	18fb      	adds	r3, r7, r3
   13a80:	2200      	movs	r2, #0
   13a82:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13a84:	230c      	movs	r3, #12
   13a86:	18fb      	adds	r3, r7, r3
   13a88:	0018      	movs	r0, r3
   13a8a:	4b0c      	ldr	r3, [pc, #48]	; (13abc <vCommandConsoleTask+0x2a4>)
   13a8c:	4798      	blx	r3
   13a8e:	e703      	b.n	13898 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a90:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a92:	e701      	b.n	13898 <vCommandConsoleTask+0x80>
   13a94:	00035e88 	.word	0x00035e88
   13a98:	00016f0d 	.word	0x00016f0d
   13a9c:	00035ef8 	.word	0x00035ef8
   13aa0:	00035e98 	.word	0x00035e98
   13aa4:	00035eb8 	.word	0x00035eb8
   13aa8:	00035ea8 	.word	0x00035ea8
   13aac:	00035ec8 	.word	0x00035ec8
   13ab0:	00035ed8 	.word	0x00035ed8
   13ab4:	00035ee8 	.word	0x00035ee8
   13ab8:	00035c64 	.word	0x00035c64
   13abc:	0001ce35 	.word	0x0001ce35
   13ac0:	000194d5 	.word	0x000194d5
   13ac4:	200047a0 	.word	0x200047a0
   13ac8:	00035db4 	.word	0x00035db4
   13acc:	0001cf21 	.word	0x0001cf21
   13ad0:	0001b2c1 	.word	0x0001b2c1
   13ad4:	00013b19 	.word	0x00013b19
   13ad8:	00035dd4 	.word	0x00035dd4
   13adc:	20000504 	.word	0x20000504
   13ae0:	20000505 	.word	0x20000505
   13ae4:	2000053c 	.word	0x2000053c
   13ae8:	20000508 	.word	0x20000508
   13aec:	000349db 	.word	0x000349db
   13af0:	20000570 	.word	0x20000570
   13af4:	00016f7d 	.word	0x00016f7d
   13af8:	0003460f 	.word	0x0003460f
   13afc:	200005d4 	.word	0x200005d4
   13b00:	00035dd8 	.word	0x00035dd8
   13b04:	00034911 	.word	0x00034911
   13b08:	00035ddc 	.word	0x00035ddc
   13b0c:	000348cd 	.word	0x000348cd
   13b10:	000349ab 	.word	0x000349ab
   13b14:	00035de4 	.word	0x00035de4

00013b18 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13b18:	b580      	push	{r7, lr}
   13b1a:	b084      	sub	sp, #16
   13b1c:	af00      	add	r7, sp, #0
   13b1e:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	0018      	movs	r0, r3
   13b24:	4b0c      	ldr	r3, [pc, #48]	; (13b58 <FreeRTOS_read+0x40>)
   13b26:	4798      	blx	r3
   13b28:	0003      	movs	r3, r0
   13b2a:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13b2c:	e00d      	b.n	13b4a <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13b2e:	4b0b      	ldr	r3, [pc, #44]	; (13b5c <FreeRTOS_read+0x44>)
   13b30:	681a      	ldr	r2, [r3, #0]
   13b32:	2301      	movs	r3, #1
   13b34:	425b      	negs	r3, r3
   13b36:	0019      	movs	r1, r3
   13b38:	0010      	movs	r0, r2
   13b3a:	4b09      	ldr	r3, [pc, #36]	; (13b60 <FreeRTOS_read+0x48>)
   13b3c:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13b3e:	687b      	ldr	r3, [r7, #4]
   13b40:	0018      	movs	r0, r3
   13b42:	4b05      	ldr	r3, [pc, #20]	; (13b58 <FreeRTOS_read+0x40>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
   13b48:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13b4a:	68fb      	ldr	r3, [r7, #12]
   13b4c:	3301      	adds	r3, #1
   13b4e:	d0ee      	beq.n	13b2e <FreeRTOS_read+0x16>
    }
}
   13b50:	46c0      	nop			; (mov r8, r8)
   13b52:	46bd      	mov	sp, r7
   13b54:	b004      	add	sp, #16
   13b56:	bd80      	pop	{r7, pc}
   13b58:	0001ced1 	.word	0x0001ced1
   13b5c:	200047a0 	.word	0x200047a0
   13b60:	0001a48d 	.word	0x0001a48d

00013b64 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13b64:	b580      	push	{r7, lr}
   13b66:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13b68:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b6a:	2200      	movs	r2, #0
   13b6c:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13b6e:	4b0a      	ldr	r3, [pc, #40]	; (13b98 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13b70:	681b      	ldr	r3, [r3, #0]
   13b72:	4a08      	ldr	r2, [pc, #32]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b74:	0011      	movs	r1, r2
   13b76:	0018      	movs	r0, r3
   13b78:	4b08      	ldr	r3, [pc, #32]	; (13b9c <CliCharReadySemaphoreGiveFromISR+0x38>)
   13b7a:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b7c:	4b05      	ldr	r3, [pc, #20]	; (13b94 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13b7e:	681b      	ldr	r3, [r3, #0]
   13b80:	2b00      	cmp	r3, #0
   13b82:	d003      	beq.n	13b8c <CliCharReadySemaphoreGiveFromISR+0x28>
   13b84:	4b06      	ldr	r3, [pc, #24]	; (13ba0 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13b86:	2280      	movs	r2, #128	; 0x80
   13b88:	0552      	lsls	r2, r2, #21
   13b8a:	601a      	str	r2, [r3, #0]
}
   13b8c:	46c0      	nop			; (mov r8, r8)
   13b8e:	46bd      	mov	sp, r7
   13b90:	bd80      	pop	{r7, pc}
   13b92:	46c0      	nop			; (mov r8, r8)
   13b94:	200005d8 	.word	0x200005d8
   13b98:	200047a0 	.word	0x200047a0
   13b9c:	00019e05 	.word	0x00019e05
   13ba0:	e000ed04 	.word	0xe000ed04

00013ba4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13ba4:	b590      	push	{r4, r7, lr}
   13ba6:	b087      	sub	sp, #28
   13ba8:	af00      	add	r7, sp, #0
   13baa:	60f8      	str	r0, [r7, #12]
   13bac:	60b9      	str	r1, [r7, #8]
   13bae:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13bb0:	2317      	movs	r3, #23
   13bb2:	18fb      	adds	r3, r7, r3
   13bb4:	221b      	movs	r2, #27
   13bb6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13bb8:	2317      	movs	r3, #23
   13bba:	18fb      	adds	r3, r7, r3
   13bbc:	781b      	ldrb	r3, [r3, #0]
   13bbe:	4a08      	ldr	r2, [pc, #32]	; (13be0 <xCliClearTerminalScreen+0x3c>)
   13bc0:	4808      	ldr	r0, [pc, #32]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bc2:	210f      	movs	r1, #15
   13bc4:	4c08      	ldr	r4, [pc, #32]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bc6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13bc8:	4a06      	ldr	r2, [pc, #24]	; (13be4 <xCliClearTerminalScreen+0x40>)
   13bca:	68b9      	ldr	r1, [r7, #8]
   13bcc:	68fb      	ldr	r3, [r7, #12]
   13bce:	0018      	movs	r0, r3
   13bd0:	4b05      	ldr	r3, [pc, #20]	; (13be8 <xCliClearTerminalScreen+0x44>)
   13bd2:	4798      	blx	r3
    return pdFALSE;
   13bd4:	2300      	movs	r3, #0
}
   13bd6:	0018      	movs	r0, r3
   13bd8:	46bd      	mov	sp, r7
   13bda:	b007      	add	sp, #28
   13bdc:	bd90      	pop	{r4, r7, pc}
   13bde:	46c0      	nop			; (mov r8, r8)
   13be0:	00035de8 	.word	0x00035de8
   13be4:	200004f4 	.word	0x200004f4
   13be8:	00034869 	.word	0x00034869

00013bec <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bec:	b580      	push	{r7, lr}
   13bee:	b084      	sub	sp, #16
   13bf0:	af00      	add	r7, sp, #0
   13bf2:	60f8      	str	r0, [r7, #12]
   13bf4:	60b9      	str	r1, [r7, #8]
   13bf6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13bf8:	2002      	movs	r0, #2
   13bfa:	4b03      	ldr	r3, [pc, #12]	; (13c08 <CLI_OTAU+0x1c>)
   13bfc:	4798      	blx	r3

    return pdFALSE;
   13bfe:	2300      	movs	r3, #0
}
   13c00:	0018      	movs	r0, r3
   13c02:	46bd      	mov	sp, r7
   13c04:	b004      	add	sp, #16
   13c06:	bd80      	pop	{r7, pc}
   13c08:	0001651d 	.word	0x0001651d

00013c0c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c0c:	b580      	push	{r7, lr}
   13c0e:	b084      	sub	sp, #16
   13c10:	af00      	add	r7, sp, #0
   13c12:	60f8      	str	r0, [r7, #12]
   13c14:	60b9      	str	r1, [r7, #8]
   13c16:	607a      	str	r2, [r7, #4]
    system_reset();
   13c18:	4b03      	ldr	r3, [pc, #12]	; (13c28 <CLI_ResetDevice+0x1c>)
   13c1a:	4798      	blx	r3
    return pdFALSE;
   13c1c:	2300      	movs	r3, #0
}
   13c1e:	0018      	movs	r0, r3
   13c20:	46bd      	mov	sp, r7
   13c22:	b004      	add	sp, #16
   13c24:	bd80      	pop	{r7, pc}
   13c26:	46c0      	nop			; (mov r8, r8)
   13c28:	00013805 	.word	0x00013805

00013c2c <CLI_SendTestData>:



BaseType_t CLI_SendTestData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c2c:	b580      	push	{r7, lr}
   13c2e:	b086      	sub	sp, #24
   13c30:	af00      	add	r7, sp, #0
   13c32:	60f8      	str	r0, [r7, #12]
   13c34:	60b9      	str	r1, [r7, #8]
   13c36:	607a      	str	r2, [r7, #4]
	struct TestPacket testvar;

	testvar.test = 6;
   13c38:	2310      	movs	r3, #16
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	2206      	movs	r2, #6
   13c3e:	701a      	strb	r2, [r3, #0]

	int error = WifiAddTestDataToQueue(&testvar);
   13c40:	2310      	movs	r3, #16
   13c42:	18fb      	adds	r3, r7, r3
   13c44:	0018      	movs	r0, r3
   13c46:	4b09      	ldr	r3, [pc, #36]	; (13c6c <CLI_SendTestData+0x40>)
   13c48:	4798      	blx	r3
   13c4a:	0003      	movs	r3, r0
   13c4c:	617b      	str	r3, [r7, #20]
	if (error == pdTRUE) {
   13c4e:	697b      	ldr	r3, [r7, #20]
   13c50:	2b01      	cmp	r3, #1
   13c52:	d105      	bne.n	13c60 <CLI_SendTestData+0x34>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Test Data MQTT Post\r\n");
   13c54:	4a06      	ldr	r2, [pc, #24]	; (13c70 <CLI_SendTestData+0x44>)
   13c56:	68b9      	ldr	r1, [r7, #8]
   13c58:	68fb      	ldr	r3, [r7, #12]
   13c5a:	0018      	movs	r0, r3
   13c5c:	4b05      	ldr	r3, [pc, #20]	; (13c74 <CLI_SendTestData+0x48>)
   13c5e:	4798      	blx	r3
	}
	return pdFALSE;
   13c60:	2300      	movs	r3, #0
}
   13c62:	0018      	movs	r0, r3
   13c64:	46bd      	mov	sp, r7
   13c66:	b006      	add	sp, #24
   13c68:	bd80      	pop	{r7, pc}
   13c6a:	46c0      	nop			; (mov r8, r8)
   13c6c:	00016551 	.word	0x00016551
   13c70:	00035df0 	.word	0x00035df0
   13c74:	00034869 	.word	0x00034869

00013c78 <CLI_ServoOpen>:

BaseType_t CLI_ServoOpen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c78:	b580      	push	{r7, lr}
   13c7a:	b084      	sub	sp, #16
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	60f8      	str	r0, [r7, #12]
   13c80:	60b9      	str	r1, [r7, #8]
   13c82:	607a      	str	r2, [r7, #4]
	servo_setDuty(2);	
   13c84:	2002      	movs	r0, #2
   13c86:	4b03      	ldr	r3, [pc, #12]	; (13c94 <CLI_ServoOpen+0x1c>)
   13c88:	4798      	blx	r3
	return pdFALSE;
   13c8a:	2300      	movs	r3, #0
}
   13c8c:	0018      	movs	r0, r3
   13c8e:	46bd      	mov	sp, r7
   13c90:	b004      	add	sp, #16
   13c92:	bd80      	pop	{r7, pc}
   13c94:	00014d59 	.word	0x00014d59

00013c98 <CLI_ServoClose>:

BaseType_t CLI_ServoClose(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13c98:	b580      	push	{r7, lr}
   13c9a:	b084      	sub	sp, #16
   13c9c:	af00      	add	r7, sp, #0
   13c9e:	60f8      	str	r0, [r7, #12]
   13ca0:	60b9      	str	r1, [r7, #8]
   13ca2:	607a      	str	r2, [r7, #4]
	servo_setDuty(3);
   13ca4:	2003      	movs	r0, #3
   13ca6:	4b03      	ldr	r3, [pc, #12]	; (13cb4 <CLI_ServoClose+0x1c>)
   13ca8:	4798      	blx	r3
	return pdFALSE;
   13caa:	2300      	movs	r3, #0
}
   13cac:	0018      	movs	r0, r3
   13cae:	46bd      	mov	sp, r7
   13cb0:	b004      	add	sp, #16
   13cb2:	bd80      	pop	{r7, pc}
   13cb4:	00014d59 	.word	0x00014d59

00013cb8 <CLI_SendWeightData>:

BaseType_t CLI_SendWeightData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13cb8:	b590      	push	{r4, r7, lr}
   13cba:	b0ab      	sub	sp, #172	; 0xac
   13cbc:	af00      	add	r7, sp, #0
   13cbe:	60f8      	str	r0, [r7, #12]
   13cc0:	60b9      	str	r1, [r7, #8]
   13cc2:	607a      	str	r2, [r7, #4]
	struct NauPacket nauvar;
	ADCchip_Init();
   13cc4:	4b33      	ldr	r3, [pc, #204]	; (13d94 <CLI_SendWeightData+0xdc>)
   13cc6:	4798      	blx	r3
	ADC_StartConversion();
   13cc8:	4b33      	ldr	r3, [pc, #204]	; (13d98 <CLI_SendWeightData+0xe0>)
   13cca:	4798      	blx	r3
	
	
	while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   13ccc:	46c0      	nop			; (mov r8, r8)
   13cce:	2000      	movs	r0, #0
   13cd0:	4b32      	ldr	r3, [pc, #200]	; (13d9c <CLI_SendWeightData+0xe4>)
   13cd2:	4798      	blx	r3
   13cd4:	0003      	movs	r3, r0
   13cd6:	001a      	movs	r2, r3
   13cd8:	2320      	movs	r3, #32
   13cda:	4013      	ands	r3, r2
   13cdc:	2b20      	cmp	r3, #32
   13cde:	d1f6      	bne.n	13cce <CLI_SendWeightData+0x16>
	uint32_t ADC_value=ADC_Read_Conversion_Data();
   13ce0:	4b2f      	ldr	r3, [pc, #188]	; (13da0 <CLI_SendWeightData+0xe8>)
   13ce2:	4798      	blx	r3
   13ce4:	0003      	movs	r3, r0
   13ce6:	22a4      	movs	r2, #164	; 0xa4
   13ce8:	18ba      	adds	r2, r7, r2
   13cea:	6013      	str	r3, [r2, #0]
	int ADC_Array[2];
	
	//int i32ConversionData = (int)(ADC_value << 8);
	///* Shift the number back right to recover its intended magnitude */
	//i32ConversionData = (i32ConversionData >> 8);
	Value_conversion(ADC_value,ADC_Array);
   13cec:	23a4      	movs	r3, #164	; 0xa4
   13cee:	18fb      	adds	r3, r7, r3
   13cf0:	681b      	ldr	r3, [r3, #0]
   13cf2:	2290      	movs	r2, #144	; 0x90
   13cf4:	18ba      	adds	r2, r7, r2
   13cf6:	0011      	movs	r1, r2
   13cf8:	0018      	movs	r0, r3
   13cfa:	4b2a      	ldr	r3, [pc, #168]	; (13da4 <CLI_SendWeightData+0xec>)
   13cfc:	4798      	blx	r3
	
	char help[64];
	//snprintf(help, 64, "input vol = VIN1P - VIN1N = %.2f\r\n",((float)i32ConversionData / 16777216) * (float)(3.14));
	snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
   13cfe:	2390      	movs	r3, #144	; 0x90
   13d00:	18fb      	adds	r3, r7, r3
   13d02:	681b      	ldr	r3, [r3, #0]
   13d04:	4a28      	ldr	r2, [pc, #160]	; (13da8 <CLI_SendWeightData+0xf0>)
   13d06:	2150      	movs	r1, #80	; 0x50
   13d08:	1878      	adds	r0, r7, r1
   13d0a:	2140      	movs	r1, #64	; 0x40
   13d0c:	4c27      	ldr	r4, [pc, #156]	; (13dac <CLI_SendWeightData+0xf4>)
   13d0e:	47a0      	blx	r4
	
	SerialConsoleWriteString(help);
   13d10:	2350      	movs	r3, #80	; 0x50
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	0018      	movs	r0, r3
   13d16:	4b26      	ldr	r3, [pc, #152]	; (13db0 <CLI_SendWeightData+0xf8>)
   13d18:	4798      	blx	r3
	nauvar.nau_i = ADC_Array[0];
   13d1a:	2390      	movs	r3, #144	; 0x90
   13d1c:	18fb      	adds	r3, r7, r3
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	b29a      	uxth	r2, r3
   13d22:	2398      	movs	r3, #152	; 0x98
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	801a      	strh	r2, [r3, #0]
	nauvar.nau_f = ADC_Array[1];
   13d28:	2390      	movs	r3, #144	; 0x90
   13d2a:	18fb      	adds	r3, r7, r3
   13d2c:	685b      	ldr	r3, [r3, #4]
   13d2e:	b29a      	uxth	r2, r3
   13d30:	2398      	movs	r3, #152	; 0x98
   13d32:	18fb      	adds	r3, r7, r3
   13d34:	805a      	strh	r2, [r3, #2]
	
	int error = WifiAddNauDataToQueue(&nauvar);
   13d36:	2398      	movs	r3, #152	; 0x98
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	0018      	movs	r0, r3
   13d3c:	4b1d      	ldr	r3, [pc, #116]	; (13db4 <CLI_SendWeightData+0xfc>)
   13d3e:	4798      	blx	r3
   13d40:	0003      	movs	r3, r0
   13d42:	22a0      	movs	r2, #160	; 0xa0
   13d44:	18ba      	adds	r2, r7, r2
   13d46:	6013      	str	r3, [r2, #0]
	if (error == pdTRUE) {
   13d48:	23a0      	movs	r3, #160	; 0xa0
   13d4a:	18fb      	adds	r3, r7, r3
   13d4c:	681b      	ldr	r3, [r3, #0]
   13d4e:	2b01      	cmp	r3, #1
   13d50:	d105      	bne.n	13d5e <CLI_SendWeightData+0xa6>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Nau Data MQTT Post\r\n");
   13d52:	4a19      	ldr	r2, [pc, #100]	; (13db8 <CLI_SendWeightData+0x100>)
   13d54:	68b9      	ldr	r1, [r7, #8]
   13d56:	68fb      	ldr	r3, [r7, #12]
   13d58:	0018      	movs	r0, r3
   13d5a:	4b14      	ldr	r3, [pc, #80]	; (13dac <CLI_SendWeightData+0xf4>)
   13d5c:	4798      	blx	r3
	}
	gfx_mono_init();
   13d5e:	4b17      	ldr	r3, [pc, #92]	; (13dbc <CLI_SendWeightData+0x104>)
   13d60:	4798      	blx	r3
	uint8_t charge = 100;
   13d62:	239f      	movs	r3, #159	; 0x9f
   13d64:	18fb      	adds	r3, r7, r3
   13d66:	2264      	movs	r2, #100	; 0x64
   13d68:	701a      	strb	r2, [r3, #0]
	char charge_char[64];
	sprintf(charge_char, "%d", charge);
   13d6a:	239f      	movs	r3, #159	; 0x9f
   13d6c:	18fb      	adds	r3, r7, r3
   13d6e:	781a      	ldrb	r2, [r3, #0]
   13d70:	4913      	ldr	r1, [pc, #76]	; (13dc0 <CLI_SendWeightData+0x108>)
   13d72:	2310      	movs	r3, #16
   13d74:	18fb      	adds	r3, r7, r3
   13d76:	0018      	movs	r0, r3
   13d78:	4b12      	ldr	r3, [pc, #72]	; (13dc4 <CLI_SendWeightData+0x10c>)
   13d7a:	4798      	blx	r3
	gfx_mono_draw_string(charge_char, 0, 8, &sysfont);
   13d7c:	4b12      	ldr	r3, [pc, #72]	; (13dc8 <CLI_SendWeightData+0x110>)
   13d7e:	2210      	movs	r2, #16
   13d80:	18b8      	adds	r0, r7, r2
   13d82:	2208      	movs	r2, #8
   13d84:	2100      	movs	r1, #0
   13d86:	4c11      	ldr	r4, [pc, #68]	; (13dcc <CLI_SendWeightData+0x114>)
   13d88:	47a0      	blx	r4
	return pdFALSE;
   13d8a:	2300      	movs	r3, #0
}
   13d8c:	0018      	movs	r0, r3
   13d8e:	46bd      	mov	sp, r7
   13d90:	b02b      	add	sp, #172	; 0xac
   13d92:	bd90      	pop	{r4, r7, pc}
   13d94:	00014905 	.word	0x00014905
   13d98:	000149a1 	.word	0x000149a1
   13d9c:	000147ed 	.word	0x000147ed
   13da0:	00014a5d 	.word	0x00014a5d
   13da4:	00014a81 	.word	0x00014a81
   13da8:	00035e08 	.word	0x00035e08
   13dac:	00034869 	.word	0x00034869
   13db0:	0001ce35 	.word	0x0001ce35
   13db4:	0001657d 	.word	0x0001657d
   13db8:	00035e2c 	.word	0x00035e2c
   13dbc:	0001287d 	.word	0x0001287d
   13dc0:	00035e44 	.word	0x00035e44
   13dc4:	000348cd 	.word	0x000348cd
   13dc8:	20000000 	.word	0x20000000
   13dcc:	00012721 	.word	0x00012721

00013dd0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13dd0:	b590      	push	{r4, r7, lr}
   13dd2:	b08f      	sub	sp, #60	; 0x3c
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	60f8      	str	r0, [r7, #12]
   13dd8:	60b9      	str	r1, [r7, #8]
   13dda:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13ddc:	2318      	movs	r3, #24
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	2200      	movs	r2, #0
   13de2:	701a      	strb	r2, [r3, #0]
   13de4:	2318      	movs	r3, #24
   13de6:	18fb      	adds	r3, r7, r3
   13de8:	2200      	movs	r2, #0
   13dea:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13dec:	2318      	movs	r3, #24
   13dee:	18fb      	adds	r3, r7, r3
   13df0:	2200      	movs	r2, #0
   13df2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13df4:	2318      	movs	r3, #24
   13df6:	18fb      	adds	r3, r7, r3
   13df8:	2200      	movs	r2, #0
   13dfa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13dfc:	231c      	movs	r3, #28
   13dfe:	18fb      	adds	r3, r7, r3
   13e00:	2200      	movs	r2, #0
   13e02:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13e04:	231c      	movs	r3, #28
   13e06:	18fb      	adds	r3, r7, r3
   13e08:	2214      	movs	r2, #20
   13e0a:	18ba      	adds	r2, r7, r2
   13e0c:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13e0e:	231c      	movs	r3, #28
   13e10:	18fb      	adds	r3, r7, r3
   13e12:	2201      	movs	r2, #1
   13e14:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13e16:	231c      	movs	r3, #28
   13e18:	18fb      	adds	r3, r7, r3
   13e1a:	2218      	movs	r2, #24
   13e1c:	18ba      	adds	r2, r7, r2
   13e1e:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13e20:	231c      	movs	r3, #28
   13e22:	18fb      	adds	r3, r7, r3
   13e24:	2201      	movs	r2, #1
   13e26:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13e28:	4b2c      	ldr	r3, [pc, #176]	; (13edc <CLI_i2cScan+0x10c>)
   13e2a:	0018      	movs	r0, r3
   13e2c:	4b2c      	ldr	r3, [pc, #176]	; (13ee0 <CLI_i2cScan+0x110>)
   13e2e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13e30:	2300      	movs	r3, #0
   13e32:	637b      	str	r3, [r7, #52]	; 0x34
   13e34:	e046      	b.n	13ec4 <CLI_i2cScan+0xf4>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e38:	4a2a      	ldr	r2, [pc, #168]	; (13ee4 <CLI_i2cScan+0x114>)
   13e3a:	482b      	ldr	r0, [pc, #172]	; (13ee8 <CLI_i2cScan+0x118>)
   13e3c:	210f      	movs	r1, #15
   13e3e:	4c2b      	ldr	r4, [pc, #172]	; (13eec <CLI_i2cScan+0x11c>)
   13e40:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13e42:	4b29      	ldr	r3, [pc, #164]	; (13ee8 <CLI_i2cScan+0x118>)
   13e44:	0018      	movs	r0, r3
   13e46:	4b26      	ldr	r3, [pc, #152]	; (13ee0 <CLI_i2cScan+0x110>)
   13e48:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13e4a:	2300      	movs	r3, #0
   13e4c:	633b      	str	r3, [r7, #48]	; 0x30
   13e4e:	e02f      	b.n	13eb0 <CLI_i2cScan+0xe0>
                {

                    i2cOled.address = (i + j) << 1;
   13e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e52:	b2da      	uxtb	r2, r3
   13e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13e56:	b2db      	uxtb	r3, r3
   13e58:	18d3      	adds	r3, r2, r3
   13e5a:	b2db      	uxtb	r3, r3
   13e5c:	18db      	adds	r3, r3, r3
   13e5e:	b2da      	uxtb	r2, r3
   13e60:	231c      	movs	r3, #28
   13e62:	18fb      	adds	r3, r7, r3
   13e64:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cWriteDataWait(&i2cOled, 100);
   13e66:	231c      	movs	r3, #28
   13e68:	18fb      	adds	r3, r7, r3
   13e6a:	2164      	movs	r1, #100	; 0x64
   13e6c:	0018      	movs	r0, r3
   13e6e:	4b20      	ldr	r3, [pc, #128]	; (13ef0 <CLI_i2cScan+0x120>)
   13e70:	4798      	blx	r3
   13e72:	0003      	movs	r3, r0
   13e74:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d10c      	bne.n	13e96 <CLI_i2cScan+0xc6>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i2cOled.address);
   13e7c:	231c      	movs	r3, #28
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	781b      	ldrb	r3, [r3, #0]
   13e82:	4a18      	ldr	r2, [pc, #96]	; (13ee4 <CLI_i2cScan+0x114>)
   13e84:	4818      	ldr	r0, [pc, #96]	; (13ee8 <CLI_i2cScan+0x118>)
   13e86:	210f      	movs	r1, #15
   13e88:	4c18      	ldr	r4, [pc, #96]	; (13eec <CLI_i2cScan+0x11c>)
   13e8a:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13e8c:	4b16      	ldr	r3, [pc, #88]	; (13ee8 <CLI_i2cScan+0x118>)
   13e8e:	0018      	movs	r0, r3
   13e90:	4b13      	ldr	r3, [pc, #76]	; (13ee0 <CLI_i2cScan+0x110>)
   13e92:	4798      	blx	r3
   13e94:	e009      	b.n	13eaa <CLI_i2cScan+0xda>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X ");
   13e96:	4b14      	ldr	r3, [pc, #80]	; (13ee8 <CLI_i2cScan+0x118>)
   13e98:	4a16      	ldr	r2, [pc, #88]	; (13ef4 <CLI_i2cScan+0x124>)
   13e9a:	8811      	ldrh	r1, [r2, #0]
   13e9c:	8019      	strh	r1, [r3, #0]
   13e9e:	7892      	ldrb	r2, [r2, #2]
   13ea0:	709a      	strb	r2, [r3, #2]
						SerialConsoleWriteString(bufCli);
   13ea2:	4b11      	ldr	r3, [pc, #68]	; (13ee8 <CLI_i2cScan+0x118>)
   13ea4:	0018      	movs	r0, r3
   13ea6:	4b0e      	ldr	r3, [pc, #56]	; (13ee0 <CLI_i2cScan+0x110>)
   13ea8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eac:	3301      	adds	r3, #1
   13eae:	633b      	str	r3, [r7, #48]	; 0x30
   13eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13eb2:	2b0f      	cmp	r3, #15
   13eb4:	ddcc      	ble.n	13e50 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13eb6:	4b10      	ldr	r3, [pc, #64]	; (13ef8 <CLI_i2cScan+0x128>)
   13eb8:	0018      	movs	r0, r3
   13eba:	4b09      	ldr	r3, [pc, #36]	; (13ee0 <CLI_i2cScan+0x110>)
   13ebc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec0:	3310      	adds	r3, #16
   13ec2:	637b      	str	r3, [r7, #52]	; 0x34
   13ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13ec6:	2b7f      	cmp	r3, #127	; 0x7f
   13ec8:	ddb5      	ble.n	13e36 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13eca:	4b0b      	ldr	r3, [pc, #44]	; (13ef8 <CLI_i2cScan+0x128>)
   13ecc:	0018      	movs	r0, r3
   13ece:	4b04      	ldr	r3, [pc, #16]	; (13ee0 <CLI_i2cScan+0x110>)
   13ed0:	4798      	blx	r3
			return pdFALSE;
   13ed2:	2300      	movs	r3, #0

}
   13ed4:	0018      	movs	r0, r3
   13ed6:	46bd      	mov	sp, r7
   13ed8:	b00f      	add	sp, #60	; 0x3c
   13eda:	bd90      	pop	{r4, r7, pc}
   13edc:	00035e48 	.word	0x00035e48
   13ee0:	0001ce35 	.word	0x0001ce35
   13ee4:	00035e7c 	.word	0x00035e7c
   13ee8:	200004f4 	.word	0x200004f4
   13eec:	00034869 	.word	0x00034869
   13ef0:	000144f1 	.word	0x000144f1
   13ef4:	00035e84 	.word	0x00035e84
   13ef8:	00035dd4 	.word	0x00035dd4

00013efc <system_interrupt_enable>:
{
   13efc:	b580      	push	{r7, lr}
   13efe:	b082      	sub	sp, #8
   13f00:	af00      	add	r7, sp, #0
   13f02:	0002      	movs	r2, r0
   13f04:	1dfb      	adds	r3, r7, #7
   13f06:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13f08:	4b06      	ldr	r3, [pc, #24]	; (13f24 <system_interrupt_enable+0x28>)
   13f0a:	1dfa      	adds	r2, r7, #7
   13f0c:	7812      	ldrb	r2, [r2, #0]
   13f0e:	0011      	movs	r1, r2
   13f10:	221f      	movs	r2, #31
   13f12:	400a      	ands	r2, r1
   13f14:	2101      	movs	r1, #1
   13f16:	4091      	lsls	r1, r2
   13f18:	000a      	movs	r2, r1
   13f1a:	601a      	str	r2, [r3, #0]
}
   13f1c:	46c0      	nop			; (mov r8, r8)
   13f1e:	46bd      	mov	sp, r7
   13f20:	b002      	add	sp, #8
   13f22:	bd80      	pop	{r7, pc}
   13f24:	e000e100 	.word	0xe000e100

00013f28 <i2c_master_is_syncing>:
{
   13f28:	b580      	push	{r7, lr}
   13f2a:	b084      	sub	sp, #16
   13f2c:	af00      	add	r7, sp, #0
   13f2e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13f30:	687b      	ldr	r3, [r7, #4]
   13f32:	681b      	ldr	r3, [r3, #0]
   13f34:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13f36:	68fb      	ldr	r3, [r7, #12]
   13f38:	69db      	ldr	r3, [r3, #28]
   13f3a:	2207      	movs	r2, #7
   13f3c:	4013      	ands	r3, r2
   13f3e:	1e5a      	subs	r2, r3, #1
   13f40:	4193      	sbcs	r3, r2
   13f42:	b2db      	uxtb	r3, r3
}
   13f44:	0018      	movs	r0, r3
   13f46:	46bd      	mov	sp, r7
   13f48:	b004      	add	sp, #16
   13f4a:	bd80      	pop	{r7, pc}

00013f4c <_i2c_master_wait_for_sync>:
{
   13f4c:	b580      	push	{r7, lr}
   13f4e:	b082      	sub	sp, #8
   13f50:	af00      	add	r7, sp, #0
   13f52:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13f54:	46c0      	nop			; (mov r8, r8)
   13f56:	687b      	ldr	r3, [r7, #4]
   13f58:	0018      	movs	r0, r3
   13f5a:	4b04      	ldr	r3, [pc, #16]	; (13f6c <_i2c_master_wait_for_sync+0x20>)
   13f5c:	4798      	blx	r3
   13f5e:	1e03      	subs	r3, r0, #0
   13f60:	d1f9      	bne.n	13f56 <_i2c_master_wait_for_sync+0xa>
}
   13f62:	46c0      	nop			; (mov r8, r8)
   13f64:	46bd      	mov	sp, r7
   13f66:	b002      	add	sp, #8
   13f68:	bd80      	pop	{r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	00013f29 	.word	0x00013f29

00013f70 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b082      	sub	sp, #8
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	2264      	movs	r2, #100	; 0x64
   13f7c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13f7e:	687b      	ldr	r3, [r7, #4]
   13f80:	4a1b      	ldr	r2, [pc, #108]	; (13ff0 <i2c_master_get_config_defaults+0x80>)
   13f82:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13f84:	687b      	ldr	r3, [r7, #4]
   13f86:	2200      	movs	r2, #0
   13f88:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13f8a:	687b      	ldr	r3, [r7, #4]
   13f8c:	2200      	movs	r2, #0
   13f8e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   13f90:	687b      	ldr	r3, [r7, #4]
   13f92:	2200      	movs	r2, #0
   13f94:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13f96:	687b      	ldr	r3, [r7, #4]
   13f98:	2280      	movs	r2, #128	; 0x80
   13f9a:	0392      	lsls	r2, r2, #14
   13f9c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   13f9e:	687b      	ldr	r3, [r7, #4]
   13fa0:	2201      	movs	r2, #1
   13fa2:	4252      	negs	r2, r2
   13fa4:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	2201      	movs	r2, #1
   13faa:	4252      	negs	r2, r2
   13fac:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	2200      	movs	r2, #0
   13fb2:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13fb4:	687b      	ldr	r3, [r7, #4]
   13fb6:	2200      	movs	r2, #0
   13fb8:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13fba:	687b      	ldr	r3, [r7, #4]
   13fbc:	2224      	movs	r2, #36	; 0x24
   13fbe:	2100      	movs	r1, #0
   13fc0:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13fc2:	687b      	ldr	r3, [r7, #4]
   13fc4:	2200      	movs	r2, #0
   13fc6:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	222c      	movs	r2, #44	; 0x2c
   13fcc:	2100      	movs	r1, #0
   13fce:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13fd0:	687b      	ldr	r3, [r7, #4]
   13fd2:	222d      	movs	r2, #45	; 0x2d
   13fd4:	2100      	movs	r1, #0
   13fd6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13fd8:	687b      	ldr	r3, [r7, #4]
   13fda:	222e      	movs	r2, #46	; 0x2e
   13fdc:	2100      	movs	r1, #0
   13fde:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13fe0:	687b      	ldr	r3, [r7, #4]
   13fe2:	22d7      	movs	r2, #215	; 0xd7
   13fe4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	46bd      	mov	sp, r7
   13fea:	b002      	add	sp, #8
   13fec:	bd80      	pop	{r7, pc}
   13fee:	46c0      	nop			; (mov r8, r8)
   13ff0:	00000d48 	.word	0x00000d48

00013ff4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13ff4:	b580      	push	{r7, lr}
   13ff6:	b084      	sub	sp, #16
   13ff8:	af00      	add	r7, sp, #0
   13ffa:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ffc:	687b      	ldr	r3, [r7, #4]
   13ffe:	681b      	ldr	r3, [r3, #0]
   14000:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14002:	2300      	movs	r3, #0
   14004:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	0018      	movs	r0, r3
   1400a:	4b14      	ldr	r3, [pc, #80]	; (1405c <i2c_master_enable+0x68>)
   1400c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   1400e:	68bb      	ldr	r3, [r7, #8]
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	2202      	movs	r2, #2
   14014:	431a      	orrs	r2, r3
   14016:	68bb      	ldr	r3, [r7, #8]
   14018:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1401a:	687b      	ldr	r3, [r7, #4]
   1401c:	681b      	ldr	r3, [r3, #0]
   1401e:	0018      	movs	r0, r3
   14020:	4b0f      	ldr	r3, [pc, #60]	; (14060 <i2c_master_enable+0x6c>)
   14022:	4798      	blx	r3
   14024:	0003      	movs	r3, r0
   14026:	0018      	movs	r0, r3
   14028:	4b0e      	ldr	r3, [pc, #56]	; (14064 <i2c_master_enable+0x70>)
   1402a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1402c:	e00c      	b.n	14048 <i2c_master_enable+0x54>
		timeout_counter++;
   1402e:	68fb      	ldr	r3, [r7, #12]
   14030:	3301      	adds	r3, #1
   14032:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14034:	687b      	ldr	r3, [r7, #4]
   14036:	88db      	ldrh	r3, [r3, #6]
   14038:	001a      	movs	r2, r3
   1403a:	68fb      	ldr	r3, [r7, #12]
   1403c:	429a      	cmp	r2, r3
   1403e:	d803      	bhi.n	14048 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	2210      	movs	r2, #16
   14044:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14046:	e006      	b.n	14056 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14048:	68bb      	ldr	r3, [r7, #8]
   1404a:	8b5b      	ldrh	r3, [r3, #26]
   1404c:	b29b      	uxth	r3, r3
   1404e:	001a      	movs	r2, r3
   14050:	2310      	movs	r3, #16
   14052:	4013      	ands	r3, r2
   14054:	d0eb      	beq.n	1402e <i2c_master_enable+0x3a>
		}
	}
}
   14056:	46bd      	mov	sp, r7
   14058:	b004      	add	sp, #16
   1405a:	bd80      	pop	{r7, pc}
   1405c:	00013f4d 	.word	0x00013f4d
   14060:	000267ad 	.word	0x000267ad
   14064:	00013efd 	.word	0x00013efd

00014068 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14068:	b580      	push	{r7, lr}
   1406a:	b082      	sub	sp, #8
   1406c:	af00      	add	r7, sp, #0
   1406e:	6078      	str	r0, [r7, #4]
   14070:	000a      	movs	r2, r1
   14072:	1cfb      	adds	r3, r7, #3
   14074:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14076:	687b      	ldr	r3, [r7, #4]
   14078:	7e5b      	ldrb	r3, [r3, #25]
   1407a:	b2db      	uxtb	r3, r3
   1407c:	b25a      	sxtb	r2, r3
   1407e:	1cfb      	adds	r3, r7, #3
   14080:	781b      	ldrb	r3, [r3, #0]
   14082:	2101      	movs	r1, #1
   14084:	4099      	lsls	r1, r3
   14086:	000b      	movs	r3, r1
   14088:	b25b      	sxtb	r3, r3
   1408a:	4313      	orrs	r3, r2
   1408c:	b25b      	sxtb	r3, r3
   1408e:	b2da      	uxtb	r2, r3
   14090:	687b      	ldr	r3, [r7, #4]
   14092:	765a      	strb	r2, [r3, #25]
}
   14094:	46c0      	nop			; (mov r8, r8)
   14096:	46bd      	mov	sp, r7
   14098:	b002      	add	sp, #8
   1409a:	bd80      	pop	{r7, pc}

0001409c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   1409c:	b590      	push	{r4, r7, lr}
   1409e:	b091      	sub	sp, #68	; 0x44
   140a0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   140a2:	2300      	movs	r3, #0
   140a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   140a6:	233a      	movs	r3, #58	; 0x3a
   140a8:	18fb      	adds	r3, r7, r3
   140aa:	2200      	movs	r2, #0
   140ac:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   140ae:	1d3b      	adds	r3, r7, #4
   140b0:	0018      	movs	r0, r3
   140b2:	4b21      	ldr	r3, [pc, #132]	; (14138 <I2cDriverConfigureSensorBus+0x9c>)
   140b4:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   140b6:	1d3b      	adds	r3, r7, #4
   140b8:	4a20      	ldr	r2, [pc, #128]	; (1413c <I2cDriverConfigureSensorBus+0xa0>)
   140ba:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   140bc:	1d3b      	adds	r3, r7, #4
   140be:	4a20      	ldr	r2, [pc, #128]	; (14140 <I2cDriverConfigureSensorBus+0xa4>)
   140c0:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   140c2:	1d3b      	adds	r3, r7, #4
   140c4:	22fa      	movs	r2, #250	; 0xfa
   140c6:	0092      	lsls	r2, r2, #2
   140c8:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   140ca:	233b      	movs	r3, #59	; 0x3b
   140cc:	18fb      	adds	r3, r7, r3
   140ce:	2203      	movs	r2, #3
   140d0:	701a      	strb	r2, [r3, #0]
   140d2:	e01e      	b.n	14112 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   140d4:	233a      	movs	r3, #58	; 0x3a
   140d6:	18fc      	adds	r4, r7, r3
   140d8:	1d3a      	adds	r2, r7, #4
   140da:	491a      	ldr	r1, [pc, #104]	; (14144 <I2cDriverConfigureSensorBus+0xa8>)
   140dc:	4b1a      	ldr	r3, [pc, #104]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140de:	0018      	movs	r0, r3
   140e0:	4b1a      	ldr	r3, [pc, #104]	; (1414c <I2cDriverConfigureSensorBus+0xb0>)
   140e2:	4798      	blx	r3
   140e4:	0003      	movs	r3, r0
   140e6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   140e8:	233a      	movs	r3, #58	; 0x3a
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	781b      	ldrb	r3, [r3, #0]
   140ee:	2b00      	cmp	r3, #0
   140f0:	d104      	bne.n	140fc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   140f2:	233a      	movs	r3, #58	; 0x3a
   140f4:	18fb      	adds	r3, r7, r3
   140f6:	781b      	ldrb	r3, [r3, #0]
   140f8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   140fa:	e00f      	b.n	1411c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   140fc:	4b12      	ldr	r3, [pc, #72]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   140fe:	0018      	movs	r0, r3
   14100:	4b13      	ldr	r3, [pc, #76]	; (14150 <I2cDriverConfigureSensorBus+0xb4>)
   14102:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14104:	233b      	movs	r3, #59	; 0x3b
   14106:	18fb      	adds	r3, r7, r3
   14108:	781a      	ldrb	r2, [r3, #0]
   1410a:	233b      	movs	r3, #59	; 0x3b
   1410c:	18fb      	adds	r3, r7, r3
   1410e:	3a01      	subs	r2, #1
   14110:	701a      	strb	r2, [r3, #0]
   14112:	233b      	movs	r3, #59	; 0x3b
   14114:	18fb      	adds	r3, r7, r3
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	2b00      	cmp	r3, #0
   1411a:	d1db      	bne.n	140d4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   1411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1411e:	2b00      	cmp	r3, #0
   14120:	d104      	bne.n	1412c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14122:	4b09      	ldr	r3, [pc, #36]	; (14148 <I2cDriverConfigureSensorBus+0xac>)
   14124:	0018      	movs	r0, r3
   14126:	4b0b      	ldr	r3, [pc, #44]	; (14154 <I2cDriverConfigureSensorBus+0xb8>)
   14128:	4798      	blx	r3
   1412a:	e000      	b.n	1412e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1412c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14130:	0018      	movs	r0, r3
   14132:	46bd      	mov	sp, r7
   14134:	b011      	add	sp, #68	; 0x44
   14136:	bd90      	pop	{r4, r7, pc}
   14138:	00013f71 	.word	0x00013f71
   1413c:	00080002 	.word	0x00080002
   14140:	00090002 	.word	0x00090002
   14144:	42000800 	.word	0x42000800
   14148:	200047a8 	.word	0x200047a8
   1414c:	00016b6d 	.word	0x00016b6d
   14150:	00016ca1 	.word	0x00016ca1
   14154:	00013ff5 	.word	0x00013ff5

00014158 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14158:	b580      	push	{r7, lr}
   1415a:	b084      	sub	sp, #16
   1415c:	af00      	add	r7, sp, #0
   1415e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14160:	4b0e      	ldr	r3, [pc, #56]	; (1419c <I2cSensorsTxComplete+0x44>)
   14162:	2200      	movs	r2, #0
   14164:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14166:	4b0d      	ldr	r3, [pc, #52]	; (1419c <I2cSensorsTxComplete+0x44>)
   14168:	2201      	movs	r2, #1
   1416a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1416c:	2300      	movs	r3, #0
   1416e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14170:	4b0b      	ldr	r3, [pc, #44]	; (141a0 <I2cSensorsTxComplete+0x48>)
   14172:	681b      	ldr	r3, [r3, #0]
   14174:	220c      	movs	r2, #12
   14176:	18ba      	adds	r2, r7, r2
   14178:	0011      	movs	r1, r2
   1417a:	0018      	movs	r0, r3
   1417c:	4b09      	ldr	r3, [pc, #36]	; (141a4 <I2cSensorsTxComplete+0x4c>)
   1417e:	4798      	blx	r3
    sensorTransmitError = false;
   14180:	4b09      	ldr	r3, [pc, #36]	; (141a8 <I2cSensorsTxComplete+0x50>)
   14182:	2200      	movs	r2, #0
   14184:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	2b00      	cmp	r3, #0
   1418a:	d003      	beq.n	14194 <I2cSensorsTxComplete+0x3c>
   1418c:	4b07      	ldr	r3, [pc, #28]	; (141ac <I2cSensorsTxComplete+0x54>)
   1418e:	2280      	movs	r2, #128	; 0x80
   14190:	0552      	lsls	r2, r2, #21
   14192:	601a      	str	r2, [r3, #0]
}
   14194:	46c0      	nop			; (mov r8, r8)
   14196:	46bd      	mov	sp, r7
   14198:	b004      	add	sp, #16
   1419a:	bd80      	pop	{r7, pc}
   1419c:	200005e0 	.word	0x200005e0
   141a0:	200047d0 	.word	0x200047d0
   141a4:	00019e05 	.word	0x00019e05
   141a8:	200005dc 	.word	0x200005dc
   141ac:	e000ed04 	.word	0xe000ed04

000141b0 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   141b0:	b580      	push	{r7, lr}
   141b2:	b084      	sub	sp, #16
   141b4:	af00      	add	r7, sp, #0
   141b6:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   141b8:	4b0e      	ldr	r3, [pc, #56]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141ba:	2200      	movs	r2, #0
   141bc:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   141be:	4b0d      	ldr	r3, [pc, #52]	; (141f4 <I2cSensorsRxComplete+0x44>)
   141c0:	2201      	movs	r2, #1
   141c2:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   141c4:	2300      	movs	r3, #0
   141c6:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   141c8:	4b0b      	ldr	r3, [pc, #44]	; (141f8 <I2cSensorsRxComplete+0x48>)
   141ca:	681b      	ldr	r3, [r3, #0]
   141cc:	220c      	movs	r2, #12
   141ce:	18ba      	adds	r2, r7, r2
   141d0:	0011      	movs	r1, r2
   141d2:	0018      	movs	r0, r3
   141d4:	4b09      	ldr	r3, [pc, #36]	; (141fc <I2cSensorsRxComplete+0x4c>)
   141d6:	4798      	blx	r3
    sensorTransmitError = false;
   141d8:	4b09      	ldr	r3, [pc, #36]	; (14200 <I2cSensorsRxComplete+0x50>)
   141da:	2200      	movs	r2, #0
   141dc:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   141de:	68fb      	ldr	r3, [r7, #12]
   141e0:	2b00      	cmp	r3, #0
   141e2:	d003      	beq.n	141ec <I2cSensorsRxComplete+0x3c>
   141e4:	4b07      	ldr	r3, [pc, #28]	; (14204 <I2cSensorsRxComplete+0x54>)
   141e6:	2280      	movs	r2, #128	; 0x80
   141e8:	0552      	lsls	r2, r2, #21
   141ea:	601a      	str	r2, [r3, #0]
}
   141ec:	46c0      	nop			; (mov r8, r8)
   141ee:	46bd      	mov	sp, r7
   141f0:	b004      	add	sp, #16
   141f2:	bd80      	pop	{r7, pc}
   141f4:	200005e0 	.word	0x200005e0
   141f8:	200047d0 	.word	0x200047d0
   141fc:	00019e05 	.word	0x00019e05
   14200:	200005dc 	.word	0x200005dc
   14204:	e000ed04 	.word	0xe000ed04

00014208 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14208:	b580      	push	{r7, lr}
   1420a:	b084      	sub	sp, #16
   1420c:	af00      	add	r7, sp, #0
   1420e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14210:	4b0e      	ldr	r3, [pc, #56]	; (1424c <I2cSensorsError+0x44>)
   14212:	2200      	movs	r2, #0
   14214:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14216:	4b0d      	ldr	r3, [pc, #52]	; (1424c <I2cSensorsError+0x44>)
   14218:	2201      	movs	r2, #1
   1421a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1421c:	2300      	movs	r3, #0
   1421e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14220:	4b0b      	ldr	r3, [pc, #44]	; (14250 <I2cSensorsError+0x48>)
   14222:	681b      	ldr	r3, [r3, #0]
   14224:	220c      	movs	r2, #12
   14226:	18ba      	adds	r2, r7, r2
   14228:	0011      	movs	r1, r2
   1422a:	0018      	movs	r0, r3
   1422c:	4b09      	ldr	r3, [pc, #36]	; (14254 <I2cSensorsError+0x4c>)
   1422e:	4798      	blx	r3
    sensorTransmitError = true;
   14230:	4b09      	ldr	r3, [pc, #36]	; (14258 <I2cSensorsError+0x50>)
   14232:	2201      	movs	r2, #1
   14234:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14236:	68fb      	ldr	r3, [r7, #12]
   14238:	2b00      	cmp	r3, #0
   1423a:	d003      	beq.n	14244 <I2cSensorsError+0x3c>
   1423c:	4b07      	ldr	r3, [pc, #28]	; (1425c <I2cSensorsError+0x54>)
   1423e:	2280      	movs	r2, #128	; 0x80
   14240:	0552      	lsls	r2, r2, #21
   14242:	601a      	str	r2, [r3, #0]
}
   14244:	46c0      	nop			; (mov r8, r8)
   14246:	46bd      	mov	sp, r7
   14248:	b004      	add	sp, #16
   1424a:	bd80      	pop	{r7, pc}
   1424c:	200005e0 	.word	0x200005e0
   14250:	200047d0 	.word	0x200047d0
   14254:	00019e05 	.word	0x00019e05
   14258:	200005dc 	.word	0x200005dc
   1425c:	e000ed04 	.word	0xe000ed04

00014260 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14260:	b580      	push	{r7, lr}
   14262:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14264:	4911      	ldr	r1, [pc, #68]	; (142ac <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14266:	4b12      	ldr	r3, [pc, #72]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14268:	2200      	movs	r2, #0
   1426a:	0018      	movs	r0, r3
   1426c:	4b11      	ldr	r3, [pc, #68]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1426e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14270:	4b0f      	ldr	r3, [pc, #60]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14272:	2100      	movs	r1, #0
   14274:	0018      	movs	r0, r3
   14276:	4b10      	ldr	r3, [pc, #64]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14278:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1427a:	4910      	ldr	r1, [pc, #64]	; (142bc <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1427c:	4b0c      	ldr	r3, [pc, #48]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1427e:	2201      	movs	r2, #1
   14280:	0018      	movs	r0, r3
   14282:	4b0c      	ldr	r3, [pc, #48]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14284:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14286:	4b0a      	ldr	r3, [pc, #40]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14288:	2101      	movs	r1, #1
   1428a:	0018      	movs	r0, r3
   1428c:	4b0a      	ldr	r3, [pc, #40]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1428e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14290:	490b      	ldr	r1, [pc, #44]	; (142c0 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14292:	4b07      	ldr	r3, [pc, #28]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14294:	2202      	movs	r2, #2
   14296:	0018      	movs	r0, r3
   14298:	4b06      	ldr	r3, [pc, #24]	; (142b4 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1429a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1429c:	4b04      	ldr	r3, [pc, #16]	; (142b0 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1429e:	2102      	movs	r1, #2
   142a0:	0018      	movs	r0, r3
   142a2:	4b05      	ldr	r3, [pc, #20]	; (142b8 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   142a4:	4798      	blx	r3
}
   142a6:	46c0      	nop			; (mov r8, r8)
   142a8:	46bd      	mov	sp, r7
   142aa:	bd80      	pop	{r7, pc}
   142ac:	00014159 	.word	0x00014159
   142b0:	200047a8 	.word	0x200047a8
   142b4:	000132b1 	.word	0x000132b1
   142b8:	00014069 	.word	0x00014069
   142bc:	000141b1 	.word	0x000141b1
   142c0:	00014209 	.word	0x00014209

000142c4 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   142c4:	b580      	push	{r7, lr}
   142c6:	b082      	sub	sp, #8
   142c8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   142ca:	2300      	movs	r3, #0
   142cc:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   142ce:	4b14      	ldr	r3, [pc, #80]	; (14320 <I2cInitializeDriver+0x5c>)
   142d0:	4798      	blx	r3
   142d2:	0003      	movs	r3, r0
   142d4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   142d6:	687b      	ldr	r3, [r7, #4]
   142d8:	2b00      	cmp	r3, #0
   142da:	d11a      	bne.n	14312 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   142dc:	4b11      	ldr	r3, [pc, #68]	; (14324 <I2cInitializeDriver+0x60>)
   142de:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   142e0:	2001      	movs	r0, #1
   142e2:	4b11      	ldr	r3, [pc, #68]	; (14328 <I2cInitializeDriver+0x64>)
   142e4:	4798      	blx	r3
   142e6:	0002      	movs	r2, r0
   142e8:	4b10      	ldr	r3, [pc, #64]	; (1432c <I2cInitializeDriver+0x68>)
   142ea:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   142ec:	2203      	movs	r2, #3
   142ee:	2100      	movs	r1, #0
   142f0:	2001      	movs	r0, #1
   142f2:	4b0f      	ldr	r3, [pc, #60]	; (14330 <I2cInitializeDriver+0x6c>)
   142f4:	4798      	blx	r3
   142f6:	0002      	movs	r2, r0
   142f8:	4b0e      	ldr	r3, [pc, #56]	; (14334 <I2cInitializeDriver+0x70>)
   142fa:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   142fc:	4b0b      	ldr	r3, [pc, #44]	; (1432c <I2cInitializeDriver+0x68>)
   142fe:	681b      	ldr	r3, [r3, #0]
   14300:	2b00      	cmp	r3, #0
   14302:	d003      	beq.n	1430c <I2cInitializeDriver+0x48>
   14304:	4b0b      	ldr	r3, [pc, #44]	; (14334 <I2cInitializeDriver+0x70>)
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	2b00      	cmp	r3, #0
   1430a:	d103      	bne.n	14314 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   1430c:	2306      	movs	r3, #6
   1430e:	607b      	str	r3, [r7, #4]
        goto exit;
   14310:	e000      	b.n	14314 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14312:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14314:	687b      	ldr	r3, [r7, #4]
}
   14316:	0018      	movs	r0, r3
   14318:	46bd      	mov	sp, r7
   1431a:	b002      	add	sp, #8
   1431c:	bd80      	pop	{r7, pc}
   1431e:	46c0      	nop			; (mov r8, r8)
   14320:	0001409d 	.word	0x0001409d
   14324:	00014261 	.word	0x00014261
   14328:	0001973d 	.word	0x0001973d
   1432c:	200047a4 	.word	0x200047a4
   14330:	000194d5 	.word	0x000194d5
   14334:	200047d0 	.word	0x200047d0

00014338 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14338:	b590      	push	{r4, r7, lr}
   1433a:	b085      	sub	sp, #20
   1433c:	af00      	add	r7, sp, #0
   1433e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14340:	2300      	movs	r3, #0
   14342:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14344:	687b      	ldr	r3, [r7, #4]
   14346:	2b00      	cmp	r3, #0
   14348:	d003      	beq.n	14352 <I2cWriteData+0x1a>
   1434a:	687b      	ldr	r3, [r7, #4]
   1434c:	685b      	ldr	r3, [r3, #4]
   1434e:	2b00      	cmp	r3, #0
   14350:	d103      	bne.n	1435a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14352:	2308      	movs	r3, #8
   14354:	425b      	negs	r3, r3
   14356:	60fb      	str	r3, [r7, #12]
        goto exit;
   14358:	e01f      	b.n	1439a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1435a:	687b      	ldr	r3, [r7, #4]
   1435c:	781b      	ldrb	r3, [r3, #0]
   1435e:	b29a      	uxth	r2, r3
   14360:	4b10      	ldr	r3, [pc, #64]	; (143a4 <I2cWriteData+0x6c>)
   14362:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	685a      	ldr	r2, [r3, #4]
   14368:	4b0e      	ldr	r3, [pc, #56]	; (143a4 <I2cWriteData+0x6c>)
   1436a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1436c:	687b      	ldr	r3, [r7, #4]
   1436e:	89da      	ldrh	r2, [r3, #14]
   14370:	4b0c      	ldr	r3, [pc, #48]	; (143a4 <I2cWriteData+0x6c>)
   14372:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14374:	230b      	movs	r3, #11
   14376:	18fc      	adds	r4, r7, r3
   14378:	4a0a      	ldr	r2, [pc, #40]	; (143a4 <I2cWriteData+0x6c>)
   1437a:	4b0b      	ldr	r3, [pc, #44]	; (143a8 <I2cWriteData+0x70>)
   1437c:	0011      	movs	r1, r2
   1437e:	0018      	movs	r0, r3
   14380:	4b0a      	ldr	r3, [pc, #40]	; (143ac <I2cWriteData+0x74>)
   14382:	4798      	blx	r3
   14384:	0003      	movs	r3, r0
   14386:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14388:	230b      	movs	r3, #11
   1438a:	18fb      	adds	r3, r7, r3
   1438c:	781b      	ldrb	r3, [r3, #0]
   1438e:	2b00      	cmp	r3, #0
   14390:	d003      	beq.n	1439a <I2cWriteData+0x62>
        error = ERROR_IO;
   14392:	2306      	movs	r3, #6
   14394:	425b      	negs	r3, r3
   14396:	60fb      	str	r3, [r7, #12]
        goto exit;
   14398:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1439a:	68fb      	ldr	r3, [r7, #12]
}
   1439c:	0018      	movs	r0, r3
   1439e:	46bd      	mov	sp, r7
   143a0:	b005      	add	sp, #20
   143a2:	bd90      	pop	{r4, r7, pc}
   143a4:	200047d4 	.word	0x200047d4
   143a8:	200047a8 	.word	0x200047a8
   143ac:	00013535 	.word	0x00013535

000143b0 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   143b0:	b590      	push	{r4, r7, lr}
   143b2:	b085      	sub	sp, #20
   143b4:	af00      	add	r7, sp, #0
   143b6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   143b8:	2300      	movs	r3, #0
   143ba:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   143bc:	687b      	ldr	r3, [r7, #4]
   143be:	2b00      	cmp	r3, #0
   143c0:	d003      	beq.n	143ca <I2cReadData+0x1a>
   143c2:	687b      	ldr	r3, [r7, #4]
   143c4:	685b      	ldr	r3, [r3, #4]
   143c6:	2b00      	cmp	r3, #0
   143c8:	d103      	bne.n	143d2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   143ca:	2308      	movs	r3, #8
   143cc:	425b      	negs	r3, r3
   143ce:	60fb      	str	r3, [r7, #12]
        goto exit;
   143d0:	e01f      	b.n	14412 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   143d2:	687b      	ldr	r3, [r7, #4]
   143d4:	781b      	ldrb	r3, [r3, #0]
   143d6:	b29a      	uxth	r2, r3
   143d8:	4b10      	ldr	r3, [pc, #64]	; (1441c <I2cReadData+0x6c>)
   143da:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   143dc:	687b      	ldr	r3, [r7, #4]
   143de:	689a      	ldr	r2, [r3, #8]
   143e0:	4b0e      	ldr	r3, [pc, #56]	; (1441c <I2cReadData+0x6c>)
   143e2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   143e4:	687b      	ldr	r3, [r7, #4]
   143e6:	899a      	ldrh	r2, [r3, #12]
   143e8:	4b0c      	ldr	r3, [pc, #48]	; (1441c <I2cReadData+0x6c>)
   143ea:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   143ec:	230b      	movs	r3, #11
   143ee:	18fc      	adds	r4, r7, r3
   143f0:	4a0a      	ldr	r2, [pc, #40]	; (1441c <I2cReadData+0x6c>)
   143f2:	4b0b      	ldr	r3, [pc, #44]	; (14420 <I2cReadData+0x70>)
   143f4:	0011      	movs	r1, r2
   143f6:	0018      	movs	r0, r3
   143f8:	4b0a      	ldr	r3, [pc, #40]	; (14424 <I2cReadData+0x74>)
   143fa:	4798      	blx	r3
   143fc:	0003      	movs	r3, r0
   143fe:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14400:	230b      	movs	r3, #11
   14402:	18fb      	adds	r3, r7, r3
   14404:	781b      	ldrb	r3, [r3, #0]
   14406:	2b00      	cmp	r3, #0
   14408:	d003      	beq.n	14412 <I2cReadData+0x62>
        error = ERROR_IO;
   1440a:	2306      	movs	r3, #6
   1440c:	425b      	negs	r3, r3
   1440e:	60fb      	str	r3, [r7, #12]
        goto exit;
   14410:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14412:	68fb      	ldr	r3, [r7, #12]
}
   14414:	0018      	movs	r0, r3
   14416:	46bd      	mov	sp, r7
   14418:	b005      	add	sp, #20
   1441a:	bd90      	pop	{r4, r7, pc}
   1441c:	200047d4 	.word	0x200047d4
   14420:	200047a8 	.word	0x200047a8
   14424:	00013451 	.word	0x00013451

00014428 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   14428:	b590      	push	{r4, r7, lr}
   1442a:	b083      	sub	sp, #12
   1442c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1442e:	2300      	movs	r3, #0
   14430:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   14432:	4b09      	ldr	r3, [pc, #36]	; (14458 <I2cFreeMutex+0x30>)
   14434:	6818      	ldr	r0, [r3, #0]
   14436:	2300      	movs	r3, #0
   14438:	2200      	movs	r2, #0
   1443a:	2100      	movs	r1, #0
   1443c:	4c07      	ldr	r4, [pc, #28]	; (1445c <I2cFreeMutex+0x34>)
   1443e:	47a0      	blx	r4
   14440:	0003      	movs	r3, r0
   14442:	2b01      	cmp	r3, #1
   14444:	d002      	beq.n	1444c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14446:	2314      	movs	r3, #20
   14448:	425b      	negs	r3, r3
   1444a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1444c:	687b      	ldr	r3, [r7, #4]
}
   1444e:	0018      	movs	r0, r3
   14450:	46bd      	mov	sp, r7
   14452:	b003      	add	sp, #12
   14454:	bd90      	pop	{r4, r7, pc}
   14456:	46c0      	nop			; (mov r8, r8)
   14458:	200047a4 	.word	0x200047a4
   1445c:	0001977d 	.word	0x0001977d

00014460 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   14460:	b580      	push	{r7, lr}
   14462:	b084      	sub	sp, #16
   14464:	af00      	add	r7, sp, #0
   14466:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14468:	2300      	movs	r3, #0
   1446a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1446c:	4b08      	ldr	r3, [pc, #32]	; (14490 <I2cGetMutex+0x30>)
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	687a      	ldr	r2, [r7, #4]
   14472:	0011      	movs	r1, r2
   14474:	0018      	movs	r0, r3
   14476:	4b07      	ldr	r3, [pc, #28]	; (14494 <I2cGetMutex+0x34>)
   14478:	4798      	blx	r3
   1447a:	0003      	movs	r3, r0
   1447c:	2b01      	cmp	r3, #1
   1447e:	d002      	beq.n	14486 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14480:	231d      	movs	r3, #29
   14482:	425b      	negs	r3, r3
   14484:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14486:	68fb      	ldr	r3, [r7, #12]
}
   14488:	0018      	movs	r0, r3
   1448a:	46bd      	mov	sp, r7
   1448c:	b004      	add	sp, #16
   1448e:	bd80      	pop	{r7, pc}
   14490:	200047a4 	.word	0x200047a4
   14494:	0001a48d 	.word	0x0001a48d

00014498 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   14498:	b580      	push	{r7, lr}
   1449a:	b084      	sub	sp, #16
   1449c:	af00      	add	r7, sp, #0
   1449e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   144a0:	2300      	movs	r3, #0
   144a2:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   144a4:	4b04      	ldr	r3, [pc, #16]	; (144b8 <I2cGetSemaphoreHandle+0x20>)
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	687b      	ldr	r3, [r7, #4]
   144aa:	601a      	str	r2, [r3, #0]
    return error;
   144ac:	68fb      	ldr	r3, [r7, #12]
}
   144ae:	0018      	movs	r0, r3
   144b0:	46bd      	mov	sp, r7
   144b2:	b004      	add	sp, #16
   144b4:	bd80      	pop	{r7, pc}
   144b6:	46c0      	nop			; (mov r8, r8)
   144b8:	200047d0 	.word	0x200047d0

000144bc <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   144bc:	b580      	push	{r7, lr}
   144be:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   144c0:	4b02      	ldr	r3, [pc, #8]	; (144cc <I2cGetTaskErrorStatus+0x10>)
   144c2:	781b      	ldrb	r3, [r3, #0]
}
   144c4:	0018      	movs	r0, r3
   144c6:	46bd      	mov	sp, r7
   144c8:	bd80      	pop	{r7, pc}
   144ca:	46c0      	nop			; (mov r8, r8)
   144cc:	200005dc 	.word	0x200005dc

000144d0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   144d0:	b580      	push	{r7, lr}
   144d2:	b082      	sub	sp, #8
   144d4:	af00      	add	r7, sp, #0
   144d6:	0002      	movs	r2, r0
   144d8:	1dfb      	adds	r3, r7, #7
   144da:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   144dc:	4b03      	ldr	r3, [pc, #12]	; (144ec <I2cSetTaskErrorStatus+0x1c>)
   144de:	1dfa      	adds	r2, r7, #7
   144e0:	7812      	ldrb	r2, [r2, #0]
   144e2:	701a      	strb	r2, [r3, #0]
}
   144e4:	46c0      	nop			; (mov r8, r8)
   144e6:	46bd      	mov	sp, r7
   144e8:	b002      	add	sp, #8
   144ea:	bd80      	pop	{r7, pc}
   144ec:	200005dc 	.word	0x200005dc

000144f0 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b084      	sub	sp, #16
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
   144f8:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   144fa:	2300      	movs	r3, #0
   144fc:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   144fe:	2300      	movs	r3, #0
   14500:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14502:	2396      	movs	r3, #150	; 0x96
   14504:	005b      	lsls	r3, r3, #1
   14506:	0018      	movs	r0, r3
   14508:	4b28      	ldr	r3, [pc, #160]	; (145ac <I2cWriteDataWait+0xbc>)
   1450a:	4798      	blx	r3
   1450c:	0003      	movs	r3, r0
   1450e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14510:	68fb      	ldr	r3, [r7, #12]
   14512:	2b00      	cmp	r3, #0
   14514:	d138      	bne.n	14588 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14516:	2308      	movs	r3, #8
   14518:	18fb      	adds	r3, r7, r3
   1451a:	0018      	movs	r0, r3
   1451c:	4b24      	ldr	r3, [pc, #144]	; (145b0 <I2cWriteDataWait+0xc0>)
   1451e:	4798      	blx	r3
   14520:	0003      	movs	r3, r0
   14522:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14524:	68fb      	ldr	r3, [r7, #12]
   14526:	2b00      	cmp	r3, #0
   14528:	d130      	bne.n	1458c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	0018      	movs	r0, r3
   1452e:	4b21      	ldr	r3, [pc, #132]	; (145b4 <I2cWriteDataWait+0xc4>)
   14530:	4798      	blx	r3
   14532:	0003      	movs	r3, r0
   14534:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   14536:	68fb      	ldr	r3, [r7, #12]
   14538:	2b00      	cmp	r3, #0
   1453a:	d12a      	bne.n	14592 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1453c:	68bb      	ldr	r3, [r7, #8]
   1453e:	683a      	ldr	r2, [r7, #0]
   14540:	0011      	movs	r1, r2
   14542:	0018      	movs	r0, r3
   14544:	4b1c      	ldr	r3, [pc, #112]	; (145b8 <I2cWriteDataWait+0xc8>)
   14546:	4798      	blx	r3
   14548:	0003      	movs	r3, r0
   1454a:	2b01      	cmp	r3, #1
   1454c:	d111      	bne.n	14572 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1454e:	4b1b      	ldr	r3, [pc, #108]	; (145bc <I2cWriteDataWait+0xcc>)
   14550:	4798      	blx	r3
   14552:	1e03      	subs	r3, r0, #0
   14554:	d011      	beq.n	1457a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   14556:	2000      	movs	r0, #0
   14558:	4b19      	ldr	r3, [pc, #100]	; (145c0 <I2cWriteDataWait+0xd0>)
   1455a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   1455c:	68fb      	ldr	r3, [r7, #12]
   1455e:	2b00      	cmp	r3, #0
   14560:	d003      	beq.n	1456a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   14562:	2321      	movs	r3, #33	; 0x21
   14564:	425b      	negs	r3, r3
   14566:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   14568:	e014      	b.n	14594 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1456a:	2303      	movs	r3, #3
   1456c:	425b      	negs	r3, r3
   1456e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   14570:	e010      	b.n	14594 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14572:	2303      	movs	r3, #3
   14574:	425b      	negs	r3, r3
   14576:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   14578:	e00c      	b.n	14594 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1457a:	4b12      	ldr	r3, [pc, #72]	; (145c4 <I2cWriteDataWait+0xd4>)
   1457c:	4798      	blx	r3
   1457e:	0002      	movs	r2, r0
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	4313      	orrs	r3, r2
   14584:	60fb      	str	r3, [r7, #12]
   14586:	e002      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14588:	46c0      	nop			; (mov r8, r8)
   1458a:	e000      	b.n	1458e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1458c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	e007      	b.n	145a2 <I2cWriteDataWait+0xb2>
        goto exitError0;
   14592:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14594:	4b0b      	ldr	r3, [pc, #44]	; (145c4 <I2cWriteDataWait+0xd4>)
   14596:	4798      	blx	r3
   14598:	0002      	movs	r2, r0
   1459a:	68fb      	ldr	r3, [r7, #12]
   1459c:	4313      	orrs	r3, r2
   1459e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   145a0:	68fb      	ldr	r3, [r7, #12]
}
   145a2:	0018      	movs	r0, r3
   145a4:	46bd      	mov	sp, r7
   145a6:	b004      	add	sp, #16
   145a8:	bd80      	pop	{r7, pc}
   145aa:	46c0      	nop			; (mov r8, r8)
   145ac:	00014461 	.word	0x00014461
   145b0:	00014499 	.word	0x00014499
   145b4:	00014339 	.word	0x00014339
   145b8:	0001a48d 	.word	0x0001a48d
   145bc:	000144bd 	.word	0x000144bd
   145c0:	000144d1 	.word	0x000144d1
   145c4:	00014429 	.word	0x00014429

000145c8 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   145c8:	b580      	push	{r7, lr}
   145ca:	b086      	sub	sp, #24
   145cc:	af00      	add	r7, sp, #0
   145ce:	60f8      	str	r0, [r7, #12]
   145d0:	60b9      	str	r1, [r7, #8]
   145d2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   145d4:	2300      	movs	r3, #0
   145d6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   145d8:	2300      	movs	r3, #0
   145da:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   145dc:	2396      	movs	r3, #150	; 0x96
   145de:	005b      	lsls	r3, r3, #1
   145e0:	0018      	movs	r0, r3
   145e2:	4b35      	ldr	r3, [pc, #212]	; (146b8 <I2cReadDataWait+0xf0>)
   145e4:	4798      	blx	r3
   145e6:	0003      	movs	r3, r0
   145e8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145ea:	697b      	ldr	r3, [r7, #20]
   145ec:	2b00      	cmp	r3, #0
   145ee:	d155      	bne.n	1469c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   145f0:	2310      	movs	r3, #16
   145f2:	18fb      	adds	r3, r7, r3
   145f4:	0018      	movs	r0, r3
   145f6:	4b31      	ldr	r3, [pc, #196]	; (146bc <I2cReadDataWait+0xf4>)
   145f8:	4798      	blx	r3
   145fa:	0003      	movs	r3, r0
   145fc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   145fe:	697b      	ldr	r3, [r7, #20]
   14600:	2b00      	cmp	r3, #0
   14602:	d14d      	bne.n	146a0 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	0018      	movs	r0, r3
   14608:	4b2d      	ldr	r3, [pc, #180]	; (146c0 <I2cReadDataWait+0xf8>)
   1460a:	4798      	blx	r3
   1460c:	0003      	movs	r3, r0
   1460e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14610:	697b      	ldr	r3, [r7, #20]
   14612:	2b00      	cmp	r3, #0
   14614:	d147      	bne.n	146a6 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14616:	693b      	ldr	r3, [r7, #16]
   14618:	687a      	ldr	r2, [r7, #4]
   1461a:	0011      	movs	r1, r2
   1461c:	0018      	movs	r0, r3
   1461e:	4b29      	ldr	r3, [pc, #164]	; (146c4 <I2cReadDataWait+0xfc>)
   14620:	4798      	blx	r3
   14622:	0003      	movs	r3, r0
   14624:	2b01      	cmp	r3, #1
   14626:	d118      	bne.n	1465a <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14628:	4b27      	ldr	r3, [pc, #156]	; (146c8 <I2cReadDataWait+0x100>)
   1462a:	4798      	blx	r3
   1462c:	1e03      	subs	r3, r0, #0
   1462e:	d006      	beq.n	1463e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   14630:	2000      	movs	r0, #0
   14632:	4b26      	ldr	r3, [pc, #152]	; (146cc <I2cReadDataWait+0x104>)
   14634:	4798      	blx	r3
            error = ERROR_ABORTED;
   14636:	2303      	movs	r3, #3
   14638:	425b      	negs	r3, r3
   1463a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1463c:	e034      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1463e:	68bb      	ldr	r3, [r7, #8]
   14640:	0018      	movs	r0, r3
   14642:	4b23      	ldr	r3, [pc, #140]	; (146d0 <I2cReadDataWait+0x108>)
   14644:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   14646:	68fb      	ldr	r3, [r7, #12]
   14648:	0018      	movs	r0, r3
   1464a:	4b22      	ldr	r3, [pc, #136]	; (146d4 <I2cReadDataWait+0x10c>)
   1464c:	4798      	blx	r3
   1464e:	0003      	movs	r3, r0
   14650:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14652:	697b      	ldr	r3, [r7, #20]
   14654:	2b00      	cmp	r3, #0
   14656:	d004      	beq.n	14662 <I2cReadDataWait+0x9a>
        goto exitError0;
   14658:	e026      	b.n	146a8 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1465a:	2303      	movs	r3, #3
   1465c:	425b      	negs	r3, r3
   1465e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14660:	e022      	b.n	146a8 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14662:	693b      	ldr	r3, [r7, #16]
   14664:	687a      	ldr	r2, [r7, #4]
   14666:	0011      	movs	r1, r2
   14668:	0018      	movs	r0, r3
   1466a:	4b16      	ldr	r3, [pc, #88]	; (146c4 <I2cReadDataWait+0xfc>)
   1466c:	4798      	blx	r3
   1466e:	0003      	movs	r3, r0
   14670:	2b01      	cmp	r3, #1
   14672:	d10a      	bne.n	1468a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14674:	4b14      	ldr	r3, [pc, #80]	; (146c8 <I2cReadDataWait+0x100>)
   14676:	4798      	blx	r3
   14678:	1e03      	subs	r3, r0, #0
   1467a:	d00a      	beq.n	14692 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   1467c:	2000      	movs	r0, #0
   1467e:	4b13      	ldr	r3, [pc, #76]	; (146cc <I2cReadDataWait+0x104>)
   14680:	4798      	blx	r3
            error = ERROR_ABORTED;
   14682:	2303      	movs	r3, #3
   14684:	425b      	negs	r3, r3
   14686:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14688:	e00e      	b.n	146a8 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1468a:	2303      	movs	r3, #3
   1468c:	425b      	negs	r3, r3
   1468e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14690:	e00a      	b.n	146a8 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14692:	4b11      	ldr	r3, [pc, #68]	; (146d8 <I2cReadDataWait+0x110>)
   14694:	4798      	blx	r3
   14696:	0003      	movs	r3, r0
   14698:	617b      	str	r3, [r7, #20]
   1469a:	e002      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   1469c:	46c0      	nop			; (mov r8, r8)
   1469e:	e000      	b.n	146a2 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   146a0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   146a2:	697b      	ldr	r3, [r7, #20]
   146a4:	e003      	b.n	146ae <I2cReadDataWait+0xe6>
        goto exitError0;
   146a6:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   146a8:	4b0b      	ldr	r3, [pc, #44]	; (146d8 <I2cReadDataWait+0x110>)
   146aa:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   146ac:	697b      	ldr	r3, [r7, #20]
}
   146ae:	0018      	movs	r0, r3
   146b0:	46bd      	mov	sp, r7
   146b2:	b006      	add	sp, #24
   146b4:	bd80      	pop	{r7, pc}
   146b6:	46c0      	nop			; (mov r8, r8)
   146b8:	00014461 	.word	0x00014461
   146bc:	00014499 	.word	0x00014499
   146c0:	00014339 	.word	0x00014339
   146c4:	0001a48d 	.word	0x0001a48d
   146c8:	000144bd 	.word	0x000144bd
   146cc:	000144d1 	.word	0x000144d1
   146d0:	0001b1e1 	.word	0x0001b1e1
   146d4:	000143b1 	.word	0x000143b1
   146d8:	00014429 	.word	0x00014429

000146dc <reg_write>:
#include "I2cDriver/I2cDriver.h"
#include "SerialConsole.h"
uint8_t msgOut[64];
I2C_Data adcData; 
static int32_t reg_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   146dc:	b580      	push	{r7, lr}
   146de:	b096      	sub	sp, #88	; 0x58
   146e0:	af00      	add	r7, sp, #0
   146e2:	60f8      	str	r0, [r7, #12]
   146e4:	0008      	movs	r0, r1
   146e6:	607a      	str	r2, [r7, #4]
   146e8:	0019      	movs	r1, r3
   146ea:	230b      	movs	r3, #11
   146ec:	18fb      	adds	r3, r7, r3
   146ee:	1c02      	adds	r2, r0, #0
   146f0:	701a      	strb	r2, [r3, #0]
   146f2:	2308      	movs	r3, #8
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	1c0a      	adds	r2, r1, #0
   146f8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   146fa:	2300      	movs	r3, #0
   146fc:	653b      	str	r3, [r7, #80]	; 0x50
	msgOut[0]=reg;
   146fe:	4b19      	ldr	r3, [pc, #100]	; (14764 <reg_write+0x88>)
   14700:	220b      	movs	r2, #11
   14702:	18ba      	adds	r2, r7, r2
   14704:	7812      	ldrb	r2, [r2, #0]
   14706:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<len;i++)
   14708:	2300      	movs	r3, #0
   1470a:	657b      	str	r3, [r7, #84]	; 0x54
   1470c:	e00a      	b.n	14724 <reg_write+0x48>
	{
		msgOut[1+i]=bufp[i];
   1470e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14710:	3301      	adds	r3, #1
   14712:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14714:	6879      	ldr	r1, [r7, #4]
   14716:	188a      	adds	r2, r1, r2
   14718:	7811      	ldrb	r1, [r2, #0]
   1471a:	4a12      	ldr	r2, [pc, #72]	; (14764 <reg_write+0x88>)
   1471c:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<len;i++)
   1471e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14720:	3301      	adds	r3, #1
   14722:	657b      	str	r3, [r7, #84]	; 0x54
   14724:	2308      	movs	r3, #8
   14726:	18fb      	adds	r3, r7, r3
   14728:	881a      	ldrh	r2, [r3, #0]
   1472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1472c:	429a      	cmp	r2, r3
   1472e:	dcee      	bgt.n	1470e <reg_write+0x32>
	}
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14730:	4b0d      	ldr	r3, [pc, #52]	; (14768 <reg_write+0x8c>)
   14732:	222a      	movs	r2, #42	; 0x2a
   14734:	701a      	strb	r2, [r3, #0]
	adcData.msgOut=&msgOut;		///<Pointer to array buffer that we will write from
   14736:	4b0c      	ldr	r3, [pc, #48]	; (14768 <reg_write+0x8c>)
   14738:	4a0a      	ldr	r2, [pc, #40]	; (14764 <reg_write+0x88>)
   1473a:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1+len;
   1473c:	2308      	movs	r3, #8
   1473e:	18fb      	adds	r3, r7, r3
   14740:	881b      	ldrh	r3, [r3, #0]
   14742:	3301      	adds	r3, #1
   14744:	b29a      	uxth	r2, r3
   14746:	4b08      	ldr	r3, [pc, #32]	; (14768 <reg_write+0x8c>)
   14748:	81da      	strh	r2, [r3, #14]
	error= I2cWriteDataWait(&adcData, 100);
   1474a:	4b07      	ldr	r3, [pc, #28]	; (14768 <reg_write+0x8c>)
   1474c:	2164      	movs	r1, #100	; 0x64
   1474e:	0018      	movs	r0, r3
   14750:	4b06      	ldr	r3, [pc, #24]	; (1476c <reg_write+0x90>)
   14752:	4798      	blx	r3
   14754:	0003      	movs	r3, r0
   14756:	653b      	str	r3, [r7, #80]	; 0x50
		char help[64];
		//snprintf(help, 64, "error_write = %d\r\n",error);
		//SerialConsoleWriteString(help);
	return error;
   14758:	6d3b      	ldr	r3, [r7, #80]	; 0x50

}
   1475a:	0018      	movs	r0, r3
   1475c:	46bd      	mov	sp, r7
   1475e:	b016      	add	sp, #88	; 0x58
   14760:	bd80      	pop	{r7, pc}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	200047e4 	.word	0x200047e4
   14768:	20004824 	.word	0x20004824
   1476c:	000144f1 	.word	0x000144f1

00014770 <reg_read>:

static  int32_t reg_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14770:	b580      	push	{r7, lr}
   14772:	b096      	sub	sp, #88	; 0x58
   14774:	af00      	add	r7, sp, #0
   14776:	60f8      	str	r0, [r7, #12]
   14778:	0008      	movs	r0, r1
   1477a:	607a      	str	r2, [r7, #4]
   1477c:	0019      	movs	r1, r3
   1477e:	230b      	movs	r3, #11
   14780:	18fb      	adds	r3, r7, r3
   14782:	1c02      	adds	r2, r0, #0
   14784:	701a      	strb	r2, [r3, #0]
   14786:	2308      	movs	r3, #8
   14788:	18fb      	adds	r3, r7, r3
   1478a:	1c0a      	adds	r2, r1, #0
   1478c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   1478e:	2300      	movs	r3, #0
   14790:	657b      	str	r3, [r7, #84]	; 0x54
	
	adcData.address=ADC_SLAVE_ADDR;	///<Address of the I2C device
   14792:	4b13      	ldr	r3, [pc, #76]	; (147e0 <reg_read+0x70>)
   14794:	222a      	movs	r2, #42	; 0x2a
   14796:	701a      	strb	r2, [r3, #0]

	adcData.lenIn=len;			///<Length of message to read/write;	
   14798:	4b11      	ldr	r3, [pc, #68]	; (147e0 <reg_read+0x70>)
   1479a:	2208      	movs	r2, #8
   1479c:	18ba      	adds	r2, r7, r2
   1479e:	8812      	ldrh	r2, [r2, #0]
   147a0:	819a      	strh	r2, [r3, #12]
	adcData.msgIn=bufp;
   147a2:	4b0f      	ldr	r3, [pc, #60]	; (147e0 <reg_read+0x70>)
   147a4:	687a      	ldr	r2, [r7, #4]
   147a6:	609a      	str	r2, [r3, #8]
	msgOut[0]=reg;
   147a8:	4b0e      	ldr	r3, [pc, #56]	; (147e4 <reg_read+0x74>)
   147aa:	220b      	movs	r2, #11
   147ac:	18ba      	adds	r2, r7, r2
   147ae:	7812      	ldrb	r2, [r2, #0]
   147b0:	701a      	strb	r2, [r3, #0]
	msgOut[1]=0;
   147b2:	4b0c      	ldr	r3, [pc, #48]	; (147e4 <reg_read+0x74>)
   147b4:	2200      	movs	r2, #0
   147b6:	705a      	strb	r2, [r3, #1]
	adcData.msgOut=&msgOut;	
   147b8:	4b09      	ldr	r3, [pc, #36]	; (147e0 <reg_read+0x70>)
   147ba:	4a0a      	ldr	r2, [pc, #40]	; (147e4 <reg_read+0x74>)
   147bc:	605a      	str	r2, [r3, #4]
	adcData.lenOut=1;	///<Pointer to array buffer that we will write from
   147be:	4b08      	ldr	r3, [pc, #32]	; (147e0 <reg_read+0x70>)
   147c0:	2201      	movs	r2, #1
   147c2:	81da      	strh	r2, [r3, #14]
	error= I2cReadDataWait(&adcData, 5, 100);
   147c4:	4b06      	ldr	r3, [pc, #24]	; (147e0 <reg_read+0x70>)
   147c6:	2264      	movs	r2, #100	; 0x64
   147c8:	2105      	movs	r1, #5
   147ca:	0018      	movs	r0, r3
   147cc:	4b06      	ldr	r3, [pc, #24]	; (147e8 <reg_read+0x78>)
   147ce:	4798      	blx	r3
   147d0:	0003      	movs	r3, r0
   147d2:	657b      	str	r3, [r7, #84]	; 0x54
	char help[64];
	//snprintf(help, 64, "error_read = %d\r\n",error);
	//SerialConsoleWriteString(help);
	
	
	return error;
   147d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
   147d6:	0018      	movs	r0, r3
   147d8:	46bd      	mov	sp, r7
   147da:	b016      	add	sp, #88	; 0x58
   147dc:	bd80      	pop	{r7, pc}
   147de:	46c0      	nop			; (mov r8, r8)
   147e0:	20004824 	.word	0x20004824
   147e4:	200047e4 	.word	0x200047e4
   147e8:	000145c9 	.word	0x000145c9

000147ec <ADC_ReadReg>:
void *handle;
uint8_t ADC_ReadReg(uint8_t u8RegAddr)
{
   147ec:	b590      	push	{r4, r7, lr}
   147ee:	b085      	sub	sp, #20
   147f0:	af00      	add	r7, sp, #0
   147f2:	0002      	movs	r2, r0
   147f4:	1dfb      	adds	r3, r7, #7
   147f6:	701a      	strb	r2, [r3, #0]
	//rdata = I2C_ReadByteOneReg(I2C1, ADC_SLAVE_ADDR, u8RegAddr);
	int32_t err= I2cReadData(&adcData);
	return ADC_bytes[0];*/
	static uint8_t read_bytes;
	
	int32_t err= reg_read(handle, u8RegAddr, &read_bytes,1);
   147f8:	4b07      	ldr	r3, [pc, #28]	; (14818 <ADC_ReadReg+0x2c>)
   147fa:	6818      	ldr	r0, [r3, #0]
   147fc:	4a07      	ldr	r2, [pc, #28]	; (1481c <ADC_ReadReg+0x30>)
   147fe:	1dfb      	adds	r3, r7, #7
   14800:	7819      	ldrb	r1, [r3, #0]
   14802:	2301      	movs	r3, #1
   14804:	4c06      	ldr	r4, [pc, #24]	; (14820 <ADC_ReadReg+0x34>)
   14806:	47a0      	blx	r4
   14808:	0003      	movs	r3, r0
   1480a:	60fb      	str	r3, [r7, #12]
	return read_bytes;
   1480c:	4b03      	ldr	r3, [pc, #12]	; (1481c <ADC_ReadReg+0x30>)
   1480e:	781b      	ldrb	r3, [r3, #0]
	
}
   14810:	0018      	movs	r0, r3
   14812:	46bd      	mov	sp, r7
   14814:	b005      	add	sp, #20
   14816:	bd90      	pop	{r4, r7, pc}
   14818:	200047e0 	.word	0x200047e0
   1481c:	200005f4 	.word	0x200005f4
   14820:	00014771 	.word	0x00014771

00014824 <ADC_WriteReg>:


uint8_t ADC_WriteReg(uint8_t u8RegAddr, uint8_t data)
{
   14824:	b590      	push	{r4, r7, lr}
   14826:	b085      	sub	sp, #20
   14828:	af00      	add	r7, sp, #0
   1482a:	0002      	movs	r2, r0
   1482c:	1dfb      	adds	r3, r7, #7
   1482e:	701a      	strb	r2, [r3, #0]
   14830:	1dbb      	adds	r3, r7, #6
   14832:	1c0a      	adds	r2, r1, #0
   14834:	701a      	strb	r2, [r3, #0]
	adcData.address = u8RegAddr;
	adcData.msgOut=&data;
	adcData.lenOut=sizeof(data);
	int32_t err=I2cWriteData(&adcData);
	return err;*/
	int32_t err=reg_write(handle, u8RegAddr,&data,1);
   14836:	4b08      	ldr	r3, [pc, #32]	; (14858 <ADC_WriteReg+0x34>)
   14838:	6818      	ldr	r0, [r3, #0]
   1483a:	1dba      	adds	r2, r7, #6
   1483c:	1dfb      	adds	r3, r7, #7
   1483e:	7819      	ldrb	r1, [r3, #0]
   14840:	2301      	movs	r3, #1
   14842:	4c06      	ldr	r4, [pc, #24]	; (1485c <ADC_WriteReg+0x38>)
   14844:	47a0      	blx	r4
   14846:	0003      	movs	r3, r0
   14848:	60fb      	str	r3, [r7, #12]
	return err;
   1484a:	68fb      	ldr	r3, [r7, #12]
   1484c:	b2db      	uxtb	r3, r3
}
   1484e:	0018      	movs	r0, r3
   14850:	46bd      	mov	sp, r7
   14852:	b005      	add	sp, #20
   14854:	bd90      	pop	{r4, r7, pc}
   14856:	46c0      	nop			; (mov r8, r8)
   14858:	200047e0 	.word	0x200047e0
   1485c:	000146dd 	.word	0x000146dd

00014860 <ADC_Calibration>:

	ADC_WriteReg(CTRL1_ADDR, reg);
}

void ADC_Calibration(void)
{
   14860:	b590      	push	{r4, r7, lr}
   14862:	b083      	sub	sp, #12
   14864:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   14866:	1dfb      	adds	r3, r7, #7
   14868:	2200      	movs	r2, #0
   1486a:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		reg = ADC_ReadReg(CTRL2_ADDR);
   1486c:	1dfc      	adds	r4, r7, #7
   1486e:	2002      	movs	r0, #2
   14870:	4b21      	ldr	r3, [pc, #132]	; (148f8 <ADC_Calibration+0x98>)
   14872:	4798      	blx	r3
   14874:	0003      	movs	r3, r0
   14876:	7023      	strb	r3, [r4, #0]
		reg &= ~(CALMOD_Msk | CALS_Msk);
   14878:	1dfb      	adds	r3, r7, #7
   1487a:	1dfa      	adds	r2, r7, #7
   1487c:	7812      	ldrb	r2, [r2, #0]
   1487e:	2107      	movs	r1, #7
   14880:	438a      	bics	r2, r1
   14882:	701a      	strb	r2, [r3, #0]

		/* Set Calibration mode */
		reg |= CALMOD_OFFSET_INTERNAL;   /* Calibration mode = Internal Offset Calibration */
   14884:	1dfb      	adds	r3, r7, #7
   14886:	1dfa      	adds	r2, r7, #7
   14888:	7812      	ldrb	r2, [r2, #0]
   1488a:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   1488c:	1dfb      	adds	r3, r7, #7
   1488e:	781b      	ldrb	r3, [r3, #0]
   14890:	0019      	movs	r1, r3
   14892:	2002      	movs	r0, #2
   14894:	4b19      	ldr	r3, [pc, #100]	; (148fc <ADC_Calibration+0x9c>)
   14896:	4798      	blx	r3
		/* Start calibration */
		reg |= CALS_ACTION;              /* Start calibration */
   14898:	1dfb      	adds	r3, r7, #7
   1489a:	1dfa      	adds	r2, r7, #7
   1489c:	7812      	ldrb	r2, [r2, #0]
   1489e:	2104      	movs	r1, #4
   148a0:	430a      	orrs	r2, r1
   148a2:	701a      	strb	r2, [r3, #0]
		ADC_WriteReg(CTRL2_ADDR, reg);
   148a4:	1dfb      	adds	r3, r7, #7
   148a6:	781b      	ldrb	r3, [r3, #0]
   148a8:	0019      	movs	r1, r3
   148aa:	2002      	movs	r0, #2
   148ac:	4b13      	ldr	r3, [pc, #76]	; (148fc <ADC_Calibration+0x9c>)
   148ae:	4798      	blx	r3

		while (1)
		{
			/* Wait for calibration finish */
			delay_ms(50); /* Wait 50ms */
   148b0:	2032      	movs	r0, #50	; 0x32
   148b2:	4b13      	ldr	r3, [pc, #76]	; (14900 <ADC_Calibration+0xa0>)
   148b4:	4798      	blx	r3
			/* Read calibration result */
			reg = ADC_ReadReg(CTRL2_ADDR);
   148b6:	1dfc      	adds	r4, r7, #7
   148b8:	2002      	movs	r0, #2
   148ba:	4b0f      	ldr	r3, [pc, #60]	; (148f8 <ADC_Calibration+0x98>)
   148bc:	4798      	blx	r3
   148be:	0003      	movs	r3, r0
   148c0:	7023      	strb	r3, [r4, #0]

			if ((reg & CALS_Msk) == CALS_FINISHED)
   148c2:	1dfb      	adds	r3, r7, #7
   148c4:	781b      	ldrb	r3, [r3, #0]
   148c6:	2204      	movs	r2, #4
   148c8:	4013      	ands	r3, r2
   148ca:	d000      	beq.n	148ce <ADC_Calibration+0x6e>
			delay_ms(50); /* Wait 50ms */
   148cc:	e7f0      	b.n	148b0 <ADC_Calibration+0x50>
			break;
   148ce:	46c0      	nop			; (mov r8, r8)
		}
		reg &= CAL_ERR_Msk;
   148d0:	1dfb      	adds	r3, r7, #7
   148d2:	1dfa      	adds	r2, r7, #7
   148d4:	7812      	ldrb	r2, [r2, #0]
   148d6:	2108      	movs	r1, #8
   148d8:	400a      	ands	r2, r1
   148da:	701a      	strb	r2, [r3, #0]
		if ((reg & CAL_ERR_Msk) == 0) /* There is no error */
   148dc:	1dfb      	adds	r3, r7, #7
   148de:	781b      	ldrb	r3, [r3, #0]
   148e0:	2208      	movs	r2, #8
   148e2:	4013      	ands	r3, r2
   148e4:	d000      	beq.n	148e8 <ADC_Calibration+0x88>
		reg = ADC_ReadReg(CTRL2_ADDR);
   148e6:	e7c1      	b.n	1486c <ADC_Calibration+0xc>
		break;
   148e8:	46c0      	nop			; (mov r8, r8)
	}
	delay_ms(1);    /* Wait 1 ms */
   148ea:	2001      	movs	r0, #1
   148ec:	4b04      	ldr	r3, [pc, #16]	; (14900 <ADC_Calibration+0xa0>)
   148ee:	4798      	blx	r3

}
   148f0:	46c0      	nop			; (mov r8, r8)
   148f2:	46bd      	mov	sp, r7
   148f4:	b003      	add	sp, #12
   148f6:	bd90      	pop	{r4, r7, pc}
   148f8:	000147ed 	.word	0x000147ed
   148fc:	00014825 	.word	0x00014825
   14900:	0001f1ed 	.word	0x0001f1ed

00014904 <ADCchip_Init>:

void  ADCchip_Init(void)
{
   14904:	b580      	push	{r7, lr}
   14906:	b082      	sub	sp, #8
   14908:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   1490a:	1dfb      	adds	r3, r7, #7
   1490c:	2200      	movs	r2, #0
   1490e:	701a      	strb	r2, [r3, #0]

	/* Reset */
	reg =  0x01;                   /* Enter reset mode */
   14910:	1dfb      	adds	r3, r7, #7
   14912:	2201      	movs	r2, #1
   14914:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   14916:	1dfb      	adds	r3, r7, #7
   14918:	781b      	ldrb	r3, [r3, #0]
   1491a:	0019      	movs	r1, r3
   1491c:	2000      	movs	r0, #0
   1491e:	4b1d      	ldr	r3, [pc, #116]	; (14994 <ADCchip_Init+0x90>)
   14920:	4798      	blx	r3
	delay_ms(1);         /* Wait 1 ms */
   14922:	2001      	movs	r0, #1
   14924:	4b1c      	ldr	r3, [pc, #112]	; (14998 <ADCchip_Init+0x94>)
   14926:	4798      	blx	r3
	
	reg =  0x02 ;                  /* Enter Noraml mode */
   14928:	1dfb      	adds	r3, r7, #7
   1492a:	2202      	movs	r2, #2
   1492c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1492e:	1dfb      	adds	r3, r7, #7
   14930:	781b      	ldrb	r3, [r3, #0]
   14932:	0019      	movs	r1, r3
   14934:	2000      	movs	r0, #0
   14936:	4b17      	ldr	r3, [pc, #92]	; (14994 <ADCchip_Init+0x90>)
   14938:	4798      	blx	r3
	delay_ms(50);         /* Wait 1 ms */
   1493a:	2032      	movs	r0, #50	; 0x32
   1493c:	4b16      	ldr	r3, [pc, #88]	; (14998 <ADCchip_Init+0x94>)
   1493e:	4798      	blx	r3
	reg = (CRP_ACTIVE_LOW |             // DRDY = LOW Active 
	DRDY_SEL_OUTPUT_CONVERSION | // DRDY output = conversion ready 
	VLDO_3V3 |                   // LDO = 3.3V  (no use) 
	GAINS_1);                    // PGA = x1 
*/	
	reg=0x27;
   14940:	1dfb      	adds	r3, r7, #7
   14942:	2227      	movs	r2, #39	; 0x27
   14944:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(CTRL1_ADDR, reg);
   14946:	1dfb      	adds	r3, r7, #7
   14948:	781b      	ldrb	r3, [r3, #0]
   1494a:	0019      	movs	r1, r3
   1494c:	2001      	movs	r0, #1
   1494e:	4b11      	ldr	r3, [pc, #68]	; (14994 <ADCchip_Init+0x90>)
   14950:	4798      	blx	r3
	delay_ms(1);
   14952:	2001      	movs	r0, #1
   14954:	4b10      	ldr	r3, [pc, #64]	; (14998 <ADCchip_Init+0x94>)
   14956:	4798      	blx	r3
	
	reg=0x86;
   14958:	1dfb      	adds	r3, r7, #7
   1495a:	2286      	movs	r2, #134	; 0x86
   1495c:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   1495e:	1dfb      	adds	r3, r7, #7
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	0019      	movs	r1, r3
   14964:	2000      	movs	r0, #0
   14966:	4b0b      	ldr	r3, [pc, #44]	; (14994 <ADCchip_Init+0x90>)
   14968:	4798      	blx	r3
	delay_ms(1);
   1496a:	2001      	movs	r0, #1
   1496c:	4b0a      	ldr	r3, [pc, #40]	; (14998 <ADCchip_Init+0x94>)
   1496e:	4798      	blx	r3
	
	reg=0x30;
   14970:	1dfb      	adds	r3, r7, #7
   14972:	2230      	movs	r2, #48	; 0x30
   14974:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(OTP_B1_ADDR , reg);
   14976:	1dfb      	adds	r3, r7, #7
   14978:	781b      	ldrb	r3, [r3, #0]
   1497a:	0019      	movs	r1, r3
   1497c:	2015      	movs	r0, #21
   1497e:	4b05      	ldr	r3, [pc, #20]	; (14994 <ADCchip_Init+0x90>)
   14980:	4798      	blx	r3
	delay_ms(1);
   14982:	2001      	movs	r0, #1
   14984:	4b04      	ldr	r3, [pc, #16]	; (14998 <ADCchip_Init+0x94>)
   14986:	4798      	blx	r3
   

	/* Calibration */
	ADC_Calibration();
   14988:	4b04      	ldr	r3, [pc, #16]	; (1499c <ADCchip_Init+0x98>)
   1498a:	4798      	blx	r3
}
   1498c:	46c0      	nop			; (mov r8, r8)
   1498e:	46bd      	mov	sp, r7
   14990:	b002      	add	sp, #8
   14992:	bd80      	pop	{r7, pc}
   14994:	00014825 	.word	0x00014825
   14998:	0001f1ed 	.word	0x0001f1ed
   1499c:	00014861 	.word	0x00014861

000149a0 <ADC_StartConversion>:

void ADC_StartConversion(void)
{
   149a0:	b590      	push	{r4, r7, lr}
   149a2:	b083      	sub	sp, #12
   149a4:	af00      	add	r7, sp, #0
	uint8_t reg = 0;
   149a6:	1dfb      	adds	r3, r7, #7
   149a8:	2200      	movs	r2, #0
   149aa:	701a      	strb	r2, [r3, #0]
	/* Start conversion */
	reg = ADC_ReadReg(PU_CTRL_ADDR);
   149ac:	1dfc      	adds	r4, r7, #7
   149ae:	2000      	movs	r0, #0
   149b0:	4b09      	ldr	r3, [pc, #36]	; (149d8 <ADC_StartConversion+0x38>)
   149b2:	4798      	blx	r3
   149b4:	0003      	movs	r3, r0
   149b6:	7023      	strb	r3, [r4, #0]
	reg |= CS_START_CONVERSION; /* CS=1 */
   149b8:	1dfb      	adds	r3, r7, #7
   149ba:	1dfa      	adds	r2, r7, #7
   149bc:	7812      	ldrb	r2, [r2, #0]
   149be:	2110      	movs	r1, #16
   149c0:	430a      	orrs	r2, r1
   149c2:	701a      	strb	r2, [r3, #0]
	ADC_WriteReg(PU_CTRL_ADDR, reg);
   149c4:	1dfb      	adds	r3, r7, #7
   149c6:	781b      	ldrb	r3, [r3, #0]
   149c8:	0019      	movs	r1, r3
   149ca:	2000      	movs	r0, #0
   149cc:	4b03      	ldr	r3, [pc, #12]	; (149dc <ADC_StartConversion+0x3c>)
   149ce:	4798      	blx	r3
}
   149d0:	46c0      	nop			; (mov r8, r8)
   149d2:	46bd      	mov	sp, r7
   149d4:	b003      	add	sp, #12
   149d6:	bd90      	pop	{r4, r7, pc}
   149d8:	000147ed 	.word	0x000147ed
   149dc:	00014825 	.word	0x00014825

000149e0 <I2C_ReadMultiBytesOneReg>:

int32_t I2C_ReadMultiBytesOneReg(uint8_t u8RegAddr1, uint8_t u8RegAddr2,uint8_t *data,uint32_t len)
{
   149e0:	b580      	push	{r7, lr}
   149e2:	b088      	sub	sp, #32
   149e4:	af00      	add	r7, sp, #0
   149e6:	60ba      	str	r2, [r7, #8]
   149e8:	607b      	str	r3, [r7, #4]
   149ea:	230f      	movs	r3, #15
   149ec:	18fb      	adds	r3, r7, r3
   149ee:	1c02      	adds	r2, r0, #0
   149f0:	701a      	strb	r2, [r3, #0]
   149f2:	230e      	movs	r3, #14
   149f4:	18fb      	adds	r3, r7, r3
   149f6:	1c0a      	adds	r2, r1, #0
   149f8:	701a      	strb	r2, [r3, #0]
	int32_t temp1, temp2, temp3, x;
	temp1 = ADC_ReadReg( 0x02);
   149fa:	2002      	movs	r0, #2
   149fc:	4b14      	ldr	r3, [pc, #80]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   149fe:	4798      	blx	r3
   14a00:	0003      	movs	r3, r0
   14a02:	61fb      	str	r3, [r7, #28]
	temp1 |= 0 << 7;
	ADC_WriteReg(0x02, temp1);
   14a04:	69fb      	ldr	r3, [r7, #28]
   14a06:	b2db      	uxtb	r3, r3
   14a08:	0019      	movs	r1, r3
   14a0a:	2002      	movs	r0, #2
   14a0c:	4b11      	ldr	r3, [pc, #68]	; (14a54 <I2C_ReadMultiBytesOneReg+0x74>)
   14a0e:	4798      	blx	r3
	delay_ms(1);
   14a10:	2001      	movs	r0, #1
   14a12:	4b11      	ldr	r3, [pc, #68]	; (14a58 <I2C_ReadMultiBytesOneReg+0x78>)
   14a14:	4798      	blx	r3

	temp1 = ADC_ReadReg(0x12);
   14a16:	2012      	movs	r0, #18
   14a18:	4b0d      	ldr	r3, [pc, #52]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a1a:	4798      	blx	r3
   14a1c:	0003      	movs	r3, r0
   14a1e:	61fb      	str	r3, [r7, #28]
	temp2 = ADC_ReadReg(0x13);
   14a20:	2013      	movs	r0, #19
   14a22:	4b0b      	ldr	r3, [pc, #44]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a24:	4798      	blx	r3
   14a26:	0003      	movs	r3, r0
   14a28:	61bb      	str	r3, [r7, #24]
	temp3 = ADC_ReadReg( 0x14);
   14a2a:	2014      	movs	r0, #20
   14a2c:	4b08      	ldr	r3, [pc, #32]	; (14a50 <I2C_ReadMultiBytesOneReg+0x70>)
   14a2e:	4798      	blx	r3
   14a30:	0003      	movs	r3, r0
   14a32:	617b      	str	r3, [r7, #20]

	x = temp1 << 16 | temp2 << 8 | temp3 << 0;
   14a34:	69fb      	ldr	r3, [r7, #28]
   14a36:	041a      	lsls	r2, r3, #16
   14a38:	69bb      	ldr	r3, [r7, #24]
   14a3a:	021b      	lsls	r3, r3, #8
   14a3c:	431a      	orrs	r2, r3
   14a3e:	697b      	ldr	r3, [r7, #20]
   14a40:	4313      	orrs	r3, r2
   14a42:	613b      	str	r3, [r7, #16]
	return x;
   14a44:	693b      	ldr	r3, [r7, #16]
	adcData.lenOut = sizeof(data);

	int32_t err= I2cReadData(&adcData);*/
	
	//int32_t err= reg_read(handle, u8RegAddr2, data,len);
}
   14a46:	0018      	movs	r0, r3
   14a48:	46bd      	mov	sp, r7
   14a4a:	b008      	add	sp, #32
   14a4c:	bd80      	pop	{r7, pc}
   14a4e:	46c0      	nop			; (mov r8, r8)
   14a50:	000147ed 	.word	0x000147ed
   14a54:	00014825 	.word	0x00014825
   14a58:	0001f1ed 	.word	0x0001f1ed

00014a5c <ADC_Read_Conversion_Data>:

uint32_t ADC_Read_Conversion_Data(void)
{
   14a5c:	b590      	push	{r4, r7, lr}
   14a5e:	b083      	sub	sp, #12
   14a60:	af00      	add	r7, sp, #0
	uint8_t rdata[3];
	uint32_t result;
	result = I2C_ReadMultiBytesOneReg( ADC_SLAVE_ADDR, ADCO_B2_ADDR, &rdata[0], 3);
   14a62:	003a      	movs	r2, r7
   14a64:	2303      	movs	r3, #3
   14a66:	2112      	movs	r1, #18
   14a68:	202a      	movs	r0, #42	; 0x2a
   14a6a:	4c04      	ldr	r4, [pc, #16]	; (14a7c <ADC_Read_Conversion_Data+0x20>)
   14a6c:	47a0      	blx	r4
   14a6e:	0003      	movs	r3, r0
   14a70:	607b      	str	r3, [r7, #4]
	//((rdata[0] << 16) | (rdata[1] << 8) | rdata[2]);
	return result;
   14a72:	687b      	ldr	r3, [r7, #4]
}
   14a74:	0018      	movs	r0, r3
   14a76:	46bd      	mov	sp, r7
   14a78:	b003      	add	sp, #12
   14a7a:	bd90      	pop	{r4, r7, pc}
   14a7c:	000149e1 	.word	0x000149e1

00014a80 <Value_conversion>:

void Value_conversion(int value,uint16_t final[2]){
   14a80:	b5b0      	push	{r4, r5, r7, lr}
   14a82:	b092      	sub	sp, #72	; 0x48
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
   14a88:	6039      	str	r1, [r7, #0]
	float gain;
	float offset;
	uint8_t gain_reg[4];
	uint8_t offset_reg[3];
	//int final[2];
	gain_reg[0]=ADC_ReadReg(GCAL1_B3_ADDR);
   14a8a:	2006      	movs	r0, #6
   14a8c:	4b7d      	ldr	r3, [pc, #500]	; (14c84 <Value_conversion+0x204>)
   14a8e:	4798      	blx	r3
   14a90:	0003      	movs	r3, r0
   14a92:	001a      	movs	r2, r3
   14a94:	232c      	movs	r3, #44	; 0x2c
   14a96:	18fb      	adds	r3, r7, r3
   14a98:	701a      	strb	r2, [r3, #0]
	gain_reg[1]=ADC_ReadReg(GCAL1_B2_ADDR);
   14a9a:	2007      	movs	r0, #7
   14a9c:	4b79      	ldr	r3, [pc, #484]	; (14c84 <Value_conversion+0x204>)
   14a9e:	4798      	blx	r3
   14aa0:	0003      	movs	r3, r0
   14aa2:	001a      	movs	r2, r3
   14aa4:	232c      	movs	r3, #44	; 0x2c
   14aa6:	18fb      	adds	r3, r7, r3
   14aa8:	705a      	strb	r2, [r3, #1]
	gain_reg[2]=ADC_ReadReg(GCAL1_B1_ADDR);
   14aaa:	2008      	movs	r0, #8
   14aac:	4b75      	ldr	r3, [pc, #468]	; (14c84 <Value_conversion+0x204>)
   14aae:	4798      	blx	r3
   14ab0:	0003      	movs	r3, r0
   14ab2:	001a      	movs	r2, r3
   14ab4:	232c      	movs	r3, #44	; 0x2c
   14ab6:	18fb      	adds	r3, r7, r3
   14ab8:	709a      	strb	r2, [r3, #2]
	gain_reg[3]=ADC_ReadReg(GCAL1_B0_ADDR);
   14aba:	2009      	movs	r0, #9
   14abc:	4b71      	ldr	r3, [pc, #452]	; (14c84 <Value_conversion+0x204>)
   14abe:	4798      	blx	r3
   14ac0:	0003      	movs	r3, r0
   14ac2:	001a      	movs	r2, r3
   14ac4:	232c      	movs	r3, #44	; 0x2c
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	70da      	strb	r2, [r3, #3]
	offset_reg[0]=ADC_ReadReg(OCAL1_B2_ADDR);
   14aca:	2003      	movs	r0, #3
   14acc:	4b6d      	ldr	r3, [pc, #436]	; (14c84 <Value_conversion+0x204>)
   14ace:	4798      	blx	r3
   14ad0:	0003      	movs	r3, r0
   14ad2:	001a      	movs	r2, r3
   14ad4:	2328      	movs	r3, #40	; 0x28
   14ad6:	18fb      	adds	r3, r7, r3
   14ad8:	701a      	strb	r2, [r3, #0]
	offset_reg[1]=ADC_ReadReg(OCAL1_B1_ADDR);
   14ada:	2004      	movs	r0, #4
   14adc:	4b69      	ldr	r3, [pc, #420]	; (14c84 <Value_conversion+0x204>)
   14ade:	4798      	blx	r3
   14ae0:	0003      	movs	r3, r0
   14ae2:	001a      	movs	r2, r3
   14ae4:	2328      	movs	r3, #40	; 0x28
   14ae6:	18fb      	adds	r3, r7, r3
   14ae8:	705a      	strb	r2, [r3, #1]
	offset_reg[2]=ADC_ReadReg(OCAL1_B0_ADDR);
   14aea:	2005      	movs	r0, #5
   14aec:	4b65      	ldr	r3, [pc, #404]	; (14c84 <Value_conversion+0x204>)
   14aee:	4798      	blx	r3
   14af0:	0003      	movs	r3, r0
   14af2:	001a      	movs	r2, r3
   14af4:	2328      	movs	r3, #40	; 0x28
   14af6:	18fb      	adds	r3, r7, r3
   14af8:	709a      	strb	r2, [r3, #2]
	

	for(int j=0;j<4;j++)
   14afa:	2300      	movs	r3, #0
   14afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   14afe:	e002      	b.n	14b06 <Value_conversion+0x86>
   14b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b02:	3301      	adds	r3, #1
   14b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   14b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b08:	2b03      	cmp	r3, #3
   14b0a:	ddf9      	ble.n	14b00 <Value_conversion+0x80>
		//SerialConsoleWriteString(help);
		//snprintf(help, 32, "offset_reg [%d]= %d\r\n",j%4,offset_reg[j%4]);
		//SerialConsoleWriteString(help);
	}

	for(int i=31;i>=0;i--){
   14b0c:	231f      	movs	r3, #31
   14b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   14b10:	e02c      	b.n	14b6c <Value_conversion+0xec>
		gain+=(float)(((gain_reg[3-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b14:	2b00      	cmp	r3, #0
   14b16:	da00      	bge.n	14b1a <Value_conversion+0x9a>
   14b18:	3307      	adds	r3, #7
   14b1a:	10db      	asrs	r3, r3, #3
   14b1c:	425b      	negs	r3, r3
   14b1e:	3303      	adds	r3, #3
   14b20:	222c      	movs	r2, #44	; 0x2c
   14b22:	18ba      	adds	r2, r7, r2
   14b24:	5cd3      	ldrb	r3, [r2, r3]
   14b26:	0019      	movs	r1, r3
   14b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b2a:	4a57      	ldr	r2, [pc, #348]	; (14c88 <Value_conversion+0x208>)
   14b2c:	4013      	ands	r3, r2
   14b2e:	d504      	bpl.n	14b3a <Value_conversion+0xba>
   14b30:	3b01      	subs	r3, #1
   14b32:	2208      	movs	r2, #8
   14b34:	4252      	negs	r2, r2
   14b36:	4313      	orrs	r3, r2
   14b38:	3301      	adds	r3, #1
   14b3a:	4119      	asrs	r1, r3
   14b3c:	000b      	movs	r3, r1
   14b3e:	2201      	movs	r2, #1
   14b40:	4013      	ands	r3, r2
   14b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14b44:	3a17      	subs	r2, #23
   14b46:	4951      	ldr	r1, [pc, #324]	; (14c8c <Value_conversion+0x20c>)
   14b48:	434a      	muls	r2, r1
   14b4a:	2102      	movs	r1, #2
   14b4c:	4091      	lsls	r1, r2
   14b4e:	000a      	movs	r2, r1
   14b50:	435a      	muls	r2, r3
   14b52:	4b4f      	ldr	r3, [pc, #316]	; (14c90 <Value_conversion+0x210>)
   14b54:	0010      	movs	r0, r2
   14b56:	4798      	blx	r3
   14b58:	1c02      	adds	r2, r0, #0
   14b5a:	4b4e      	ldr	r3, [pc, #312]	; (14c94 <Value_conversion+0x214>)
   14b5c:	1c11      	adds	r1, r2, #0
   14b5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14b60:	4798      	blx	r3
   14b62:	1c03      	adds	r3, r0, #0
   14b64:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i=31;i>=0;i--){
   14b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b68:	3b01      	subs	r3, #1
   14b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   14b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14b6e:	2b00      	cmp	r3, #0
   14b70:	dacf      	bge.n	14b12 <Value_conversion+0x92>
	}
	for(int i=22;i>=0;i--){
   14b72:	2316      	movs	r3, #22
   14b74:	637b      	str	r3, [r7, #52]	; 0x34
   14b76:	e02c      	b.n	14bd2 <Value_conversion+0x152>
		offset+=(float)(((offset_reg[2-i/8]>>(i%8))&0x01)*(2<<(i-23)*10000));
   14b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b7a:	2b00      	cmp	r3, #0
   14b7c:	da00      	bge.n	14b80 <Value_conversion+0x100>
   14b7e:	3307      	adds	r3, #7
   14b80:	10db      	asrs	r3, r3, #3
   14b82:	425b      	negs	r3, r3
   14b84:	3302      	adds	r3, #2
   14b86:	2228      	movs	r2, #40	; 0x28
   14b88:	18ba      	adds	r2, r7, r2
   14b8a:	5cd3      	ldrb	r3, [r2, r3]
   14b8c:	0019      	movs	r1, r3
   14b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14b90:	4a3d      	ldr	r2, [pc, #244]	; (14c88 <Value_conversion+0x208>)
   14b92:	4013      	ands	r3, r2
   14b94:	d504      	bpl.n	14ba0 <Value_conversion+0x120>
   14b96:	3b01      	subs	r3, #1
   14b98:	2208      	movs	r2, #8
   14b9a:	4252      	negs	r2, r2
   14b9c:	4313      	orrs	r3, r2
   14b9e:	3301      	adds	r3, #1
   14ba0:	4119      	asrs	r1, r3
   14ba2:	000b      	movs	r3, r1
   14ba4:	2201      	movs	r2, #1
   14ba6:	4013      	ands	r3, r2
   14ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   14baa:	3a17      	subs	r2, #23
   14bac:	4937      	ldr	r1, [pc, #220]	; (14c8c <Value_conversion+0x20c>)
   14bae:	434a      	muls	r2, r1
   14bb0:	2102      	movs	r1, #2
   14bb2:	4091      	lsls	r1, r2
   14bb4:	000a      	movs	r2, r1
   14bb6:	435a      	muls	r2, r3
   14bb8:	4b35      	ldr	r3, [pc, #212]	; (14c90 <Value_conversion+0x210>)
   14bba:	0010      	movs	r0, r2
   14bbc:	4798      	blx	r3
   14bbe:	1c02      	adds	r2, r0, #0
   14bc0:	4b34      	ldr	r3, [pc, #208]	; (14c94 <Value_conversion+0x214>)
   14bc2:	1c11      	adds	r1, r2, #0
   14bc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bc6:	4798      	blx	r3
   14bc8:	1c03      	adds	r3, r0, #0
   14bca:	643b      	str	r3, [r7, #64]	; 0x40
	for(int i=22;i>=0;i--){
   14bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bce:	3b01      	subs	r3, #1
   14bd0:	637b      	str	r3, [r7, #52]	; 0x34
   14bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14bd4:	2b00      	cmp	r3, #0
   14bd6:	dacf      	bge.n	14b78 <Value_conversion+0xf8>
	}
	offset*=(float)(1-(offset_reg[0]>>7)&0x01);
   14bd8:	2328      	movs	r3, #40	; 0x28
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	781b      	ldrb	r3, [r3, #0]
   14bde:	09db      	lsrs	r3, r3, #7
   14be0:	b2db      	uxtb	r3, r3
   14be2:	001a      	movs	r2, r3
   14be4:	2301      	movs	r3, #1
   14be6:	1a9b      	subs	r3, r3, r2
   14be8:	2201      	movs	r2, #1
   14bea:	401a      	ands	r2, r3
   14bec:	4b28      	ldr	r3, [pc, #160]	; (14c90 <Value_conversion+0x210>)
   14bee:	0010      	movs	r0, r2
   14bf0:	4798      	blx	r3
   14bf2:	1c02      	adds	r2, r0, #0
   14bf4:	4b28      	ldr	r3, [pc, #160]	; (14c98 <Value_conversion+0x218>)
   14bf6:	1c11      	adds	r1, r2, #0
   14bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14bfa:	4798      	blx	r3
   14bfc:	1c03      	adds	r3, r0, #0
   14bfe:	643b      	str	r3, [r7, #64]	; 0x40
	//snprintf(help, 32, " gain= %d\r\n",gain);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final offset= %d\r\n",offset);
	//SerialConsoleWriteString(help);
	
	calibrate_adc=(float)gain/10000*((float)value-(float)offset/10000);
   14c00:	4b26      	ldr	r3, [pc, #152]	; (14c9c <Value_conversion+0x21c>)
   14c02:	4927      	ldr	r1, [pc, #156]	; (14ca0 <Value_conversion+0x220>)
   14c04:	6c78      	ldr	r0, [r7, #68]	; 0x44
   14c06:	4798      	blx	r3
   14c08:	1c03      	adds	r3, r0, #0
   14c0a:	1c1c      	adds	r4, r3, #0
   14c0c:	4b20      	ldr	r3, [pc, #128]	; (14c90 <Value_conversion+0x210>)
   14c0e:	6878      	ldr	r0, [r7, #4]
   14c10:	4798      	blx	r3
   14c12:	1c05      	adds	r5, r0, #0
   14c14:	4b21      	ldr	r3, [pc, #132]	; (14c9c <Value_conversion+0x21c>)
   14c16:	4922      	ldr	r1, [pc, #136]	; (14ca0 <Value_conversion+0x220>)
   14c18:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14c1a:	4798      	blx	r3
   14c1c:	1c03      	adds	r3, r0, #0
   14c1e:	1c1a      	adds	r2, r3, #0
   14c20:	4b20      	ldr	r3, [pc, #128]	; (14ca4 <Value_conversion+0x224>)
   14c22:	1c11      	adds	r1, r2, #0
   14c24:	1c28      	adds	r0, r5, #0
   14c26:	4798      	blx	r3
   14c28:	1c03      	adds	r3, r0, #0
   14c2a:	1c1a      	adds	r2, r3, #0
   14c2c:	4b1a      	ldr	r3, [pc, #104]	; (14c98 <Value_conversion+0x218>)
   14c2e:	1c11      	adds	r1, r2, #0
   14c30:	1c20      	adds	r0, r4, #0
   14c32:	4798      	blx	r3
   14c34:	1c03      	adds	r3, r0, #0
   14c36:	633b      	str	r3, [r7, #48]	; 0x30
	
	final[0]=(int)calibrate_adc;
   14c38:	4b1b      	ldr	r3, [pc, #108]	; (14ca8 <Value_conversion+0x228>)
   14c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c3c:	4798      	blx	r3
   14c3e:	0003      	movs	r3, r0
   14c40:	b29a      	uxth	r2, r3
   14c42:	683b      	ldr	r3, [r7, #0]
   14c44:	801a      	strh	r2, [r3, #0]
	final[1]=10000*(calibrate_adc-final[0]);
   14c46:	683b      	ldr	r3, [r7, #0]
   14c48:	1c9c      	adds	r4, r3, #2
   14c4a:	683b      	ldr	r3, [r7, #0]
   14c4c:	881b      	ldrh	r3, [r3, #0]
   14c4e:	001a      	movs	r2, r3
   14c50:	4b0f      	ldr	r3, [pc, #60]	; (14c90 <Value_conversion+0x210>)
   14c52:	0010      	movs	r0, r2
   14c54:	4798      	blx	r3
   14c56:	1c02      	adds	r2, r0, #0
   14c58:	4b12      	ldr	r3, [pc, #72]	; (14ca4 <Value_conversion+0x224>)
   14c5a:	1c11      	adds	r1, r2, #0
   14c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14c5e:	4798      	blx	r3
   14c60:	1c03      	adds	r3, r0, #0
   14c62:	1c1a      	adds	r2, r3, #0
   14c64:	4b0c      	ldr	r3, [pc, #48]	; (14c98 <Value_conversion+0x218>)
   14c66:	490e      	ldr	r1, [pc, #56]	; (14ca0 <Value_conversion+0x220>)
   14c68:	1c10      	adds	r0, r2, #0
   14c6a:	4798      	blx	r3
   14c6c:	1c03      	adds	r3, r0, #0
   14c6e:	1c1a      	adds	r2, r3, #0
   14c70:	4b0e      	ldr	r3, [pc, #56]	; (14cac <Value_conversion+0x22c>)
   14c72:	1c10      	adds	r0, r2, #0
   14c74:	4798      	blx	r3
   14c76:	0003      	movs	r3, r0
   14c78:	b29b      	uxth	r3, r3
   14c7a:	8023      	strh	r3, [r4, #0]
	//snprintf(help, 32, "final_int= %d\r\n",final[0]);
	//SerialConsoleWriteString(help);
	//snprintf(help, 32, "final_decimal= %d\r\n",final[1]);
	//SerialConsoleWriteString(help);
	return final;
   14c7c:	46c0      	nop			; (mov r8, r8)
	//final=(float)((float)value / 16777216) * (float)(3.14);
   14c7e:	46bd      	mov	sp, r7
   14c80:	b012      	add	sp, #72	; 0x48
   14c82:	bdb0      	pop	{r4, r5, r7, pc}
   14c84:	000147ed 	.word	0x000147ed
   14c88:	80000007 	.word	0x80000007
   14c8c:	00002710 	.word	0x00002710
   14c90:	00032a31 	.word	0x00032a31
   14c94:	00031ec5 	.word	0x00031ec5
   14c98:	00032479 	.word	0x00032479
   14c9c:	000321e9 	.word	0x000321e9
   14ca0:	461c4000 	.word	0x461c4000
   14ca4:	000326b9 	.word	0x000326b9
   14ca8:	000329f1 	.word	0x000329f1
   14cac:	00031e95 	.word	0x00031e95

00014cb0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   14cb0:	b580      	push	{r7, lr}
   14cb2:	b084      	sub	sp, #16
   14cb4:	af00      	add	r7, sp, #0
   14cb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   14cb8:	687b      	ldr	r3, [r7, #4]
   14cba:	681b      	ldr	r3, [r3, #0]
   14cbc:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   14cbe:	46c0      	nop			; (mov r8, r8)
   14cc0:	68fb      	ldr	r3, [r7, #12]
   14cc2:	689b      	ldr	r3, [r3, #8]
   14cc4:	2202      	movs	r2, #2
   14cc6:	4013      	ands	r3, r2
   14cc8:	d1fa      	bne.n	14cc0 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   14cca:	68fb      	ldr	r3, [r7, #12]
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	2202      	movs	r2, #2
   14cd0:	431a      	orrs	r2, r3
   14cd2:	68fb      	ldr	r3, [r7, #12]
   14cd4:	601a      	str	r2, [r3, #0]
}
   14cd6:	46c0      	nop			; (mov r8, r8)
   14cd8:	46bd      	mov	sp, r7
   14cda:	b004      	add	sp, #16
   14cdc:	bd80      	pop	{r7, pc}
	...

00014ce0 <configure_tcc>:
 *  Author: 60267
 */ 
#include "servo.h"
struct tcc_module tcc_instance;
void configure_tcc(void)
{
   14ce0:	b580      	push	{r7, lr}
   14ce2:	b0aa      	sub	sp, #168	; 0xa8
   14ce4:	af00      	add	r7, sp, #0
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
   14ce6:	4a15      	ldr	r2, [pc, #84]	; (14d3c <configure_tcc+0x5c>)
   14ce8:	1d3b      	adds	r3, r7, #4
   14cea:	0011      	movs	r1, r2
   14cec:	0018      	movs	r0, r3
   14cee:	4b14      	ldr	r3, [pc, #80]	; (14d40 <configure_tcc+0x60>)
   14cf0:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
   14cf2:	1d3b      	adds	r3, r7, #4
   14cf4:	2202      	movs	r2, #2
   14cf6:	72da      	strb	r2, [r3, #11]
	config_tcc.counter.period = 0xBA2E;
   14cf8:	1d3b      	adds	r3, r7, #4
   14cfa:	4a12      	ldr	r2, [pc, #72]	; (14d44 <configure_tcc+0x64>)
   14cfc:	605a      	str	r2, [r3, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
   14cfe:	1d3b      	adds	r3, r7, #4
   14d00:	2202      	movs	r2, #2
   14d02:	761a      	strb	r2, [r3, #24]
	config_tcc.compare.match[CONF_PWM_CHANNEL] = (0xBA2E / 2);
   14d04:	1d3b      	adds	r3, r7, #4
   14d06:	4a10      	ldr	r2, [pc, #64]	; (14d48 <configure_tcc+0x68>)
   14d08:	625a      	str	r2, [r3, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[CONF_PWM_OUTPUT] = true;
   14d0a:	1d3b      	adds	r3, r7, #4
   14d0c:	229a      	movs	r2, #154	; 0x9a
   14d0e:	2101      	movs	r1, #1
   14d10:	5499      	strb	r1, [r3, r2]
	config_tcc.pins.wave_out_pin[CONF_PWM_OUTPUT]        = CONF_PWM_OUT_PIN;
   14d12:	1d3b      	adds	r3, r7, #4
   14d14:	220a      	movs	r2, #10
   14d16:	661a      	str	r2, [r3, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[CONF_PWM_OUTPUT]    = CONF_PWM_OUT_MUX;
   14d18:	1d3b      	adds	r3, r7, #4
   14d1a:	2280      	movs	r2, #128	; 0x80
   14d1c:	2105      	movs	r1, #5
   14d1e:	5099      	str	r1, [r3, r2]
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
   14d20:	1d3a      	adds	r2, r7, #4
   14d22:	4906      	ldr	r1, [pc, #24]	; (14d3c <configure_tcc+0x5c>)
   14d24:	4b09      	ldr	r3, [pc, #36]	; (14d4c <configure_tcc+0x6c>)
   14d26:	0018      	movs	r0, r3
   14d28:	4b09      	ldr	r3, [pc, #36]	; (14d50 <configure_tcc+0x70>)
   14d2a:	4798      	blx	r3
	tcc_enable(&tcc_instance);
   14d2c:	4b07      	ldr	r3, [pc, #28]	; (14d4c <configure_tcc+0x6c>)
   14d2e:	0018      	movs	r0, r3
   14d30:	4b08      	ldr	r3, [pc, #32]	; (14d54 <configure_tcc+0x74>)
   14d32:	4798      	blx	r3
}
   14d34:	46c0      	nop			; (mov r8, r8)
   14d36:	46bd      	mov	sp, r7
   14d38:	b02a      	add	sp, #168	; 0xa8
   14d3a:	bd80      	pop	{r7, pc}
   14d3c:	42002000 	.word	0x42002000
   14d40:	0002942d 	.word	0x0002942d
   14d44:	0000ba2e 	.word	0x0000ba2e
   14d48:	00005d17 	.word	0x00005d17
   14d4c:	20004834 	.word	0x20004834
   14d50:	00029a89 	.word	0x00029a89
   14d54:	00014cb1 	.word	0x00014cb1

00014d58 <servo_setDuty>:


void servo_setDuty(int dutyCycle)
{
   14d58:	b580      	push	{r7, lr}
   14d5a:	b084      	sub	sp, #16
   14d5c:	af00      	add	r7, sp, #0
   14d5e:	6078      	str	r0, [r7, #4]
	uint32_t compareValue = 0xBA2E / dutyCycle;
   14d60:	4b07      	ldr	r3, [pc, #28]	; (14d80 <servo_setDuty+0x28>)
   14d62:	6879      	ldr	r1, [r7, #4]
   14d64:	4807      	ldr	r0, [pc, #28]	; (14d84 <servo_setDuty+0x2c>)
   14d66:	4798      	blx	r3
   14d68:	0003      	movs	r3, r0
   14d6a:	60fb      	str	r3, [r7, #12]
	tcc_set_compare_value(&tcc_instance, CONF_PWM_CHANNEL, compareValue);
   14d6c:	68fa      	ldr	r2, [r7, #12]
   14d6e:	4b06      	ldr	r3, [pc, #24]	; (14d88 <servo_setDuty+0x30>)
   14d70:	2102      	movs	r1, #2
   14d72:	0018      	movs	r0, r3
   14d74:	4b05      	ldr	r3, [pc, #20]	; (14d8c <servo_setDuty+0x34>)
   14d76:	4798      	blx	r3
   14d78:	46c0      	nop			; (mov r8, r8)
   14d7a:	46bd      	mov	sp, r7
   14d7c:	b004      	add	sp, #16
   14d7e:	bd80      	pop	{r7, pc}
   14d80:	00031c69 	.word	0x00031c69
   14d84:	0000ba2e 	.word	0x0000ba2e
   14d88:	20004834 	.word	0x20004834
   14d8c:	00029f49 	.word	0x00029f49

00014d90 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   14d90:	b590      	push	{r4, r7, lr}
   14d92:	b0a1      	sub	sp, #132	; 0x84
   14d94:	af00      	add	r7, sp, #0
   14d96:	6078      	str	r0, [r7, #4]
    // Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
   14d98:	4b51      	ldr	r3, [pc, #324]	; (14ee0 <vUiHandlerTask+0x150>)
   14d9a:	0018      	movs	r0, r3
   14d9c:	4b51      	ldr	r3, [pc, #324]	; (14ee4 <vUiHandlerTask+0x154>)
   14d9e:	4798      	blx	r3
	configure_tcc();
   14da0:	4b51      	ldr	r3, [pc, #324]	; (14ee8 <vUiHandlerTask+0x158>)
   14da2:	4798      	blx	r3
	servo_setDuty(2);
   14da4:	2002      	movs	r0, #2
   14da6:	4b51      	ldr	r3, [pc, #324]	; (14eec <vUiHandlerTask+0x15c>)
   14da8:	4798      	blx	r3

	
    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   14daa:	4b51      	ldr	r3, [pc, #324]	; (14ef0 <vUiHandlerTask+0x160>)
   14dac:	4798      	blx	r3
    gfx_mono_draw_string("ESE516", 0, 8, &sysfont);
   14dae:	4b51      	ldr	r3, [pc, #324]	; (14ef4 <vUiHandlerTask+0x164>)
   14db0:	4851      	ldr	r0, [pc, #324]	; (14ef8 <vUiHandlerTask+0x168>)
   14db2:	2208      	movs	r2, #8
   14db4:	2100      	movs	r1, #0
   14db6:	4c51      	ldr	r4, [pc, #324]	; (14efc <vUiHandlerTask+0x16c>)
   14db8:	47a0      	blx	r4
    gfx_mono_draw_string("HIGHWAY", 0, 18, &sysfont);
   14dba:	4b4e      	ldr	r3, [pc, #312]	; (14ef4 <vUiHandlerTask+0x164>)
   14dbc:	4850      	ldr	r0, [pc, #320]	; (14f00 <vUiHandlerTask+0x170>)
   14dbe:	2212      	movs	r2, #18
   14dc0:	2100      	movs	r1, #0
   14dc2:	4c4e      	ldr	r4, [pc, #312]	; (14efc <vUiHandlerTask+0x16c>)
   14dc4:	47a0      	blx	r4
	uint8_t count = 0;
   14dc6:	237f      	movs	r3, #127	; 0x7f
   14dc8:	18fb      	adds	r3, r7, r3
   14dca:	2200      	movs	r2, #0
   14dcc:	701a      	strb	r2, [r3, #0]
	uint8_t count_nau = 0;
   14dce:	237b      	movs	r3, #123	; 0x7b
   14dd0:	18fb      	adds	r3, r7, r3
   14dd2:	2200      	movs	r2, #0
   14dd4:	701a      	strb	r2, [r3, #0]
	uint16_t nau_i_total = 0;
   14dd6:	2378      	movs	r3, #120	; 0x78
   14dd8:	18fb      	adds	r3, r7, r3
   14dda:	2200      	movs	r2, #0
   14ddc:	801a      	strh	r2, [r3, #0]
	uint16_t nau_f_total = 0;
   14dde:	2376      	movs	r3, #118	; 0x76
   14de0:	18fb      	adds	r3, r7, r3
   14de2:	2200      	movs	r2, #0
   14de4:	801a      	strh	r2, [r3, #0]
	char oled_display[24];
	bool servo_flag = false;
   14de6:	2375      	movs	r3, #117	; 0x75
   14de8:	18fb      	adds	r3, r7, r3
   14dea:	2200      	movs	r2, #0
   14dec:	701a      	strb	r2, [r3, #0]
	uint16_t first_result = 0;
   14dee:	237c      	movs	r3, #124	; 0x7c
   14df0:	18fb      	adds	r3, r7, r3
   14df2:	2200      	movs	r2, #0
   14df4:	801a      	strh	r2, [r3, #0]
	ADCchip_Init();
   14df6:	4b43      	ldr	r3, [pc, #268]	; (14f04 <vUiHandlerTask+0x174>)
   14df8:	4798      	blx	r3
	
	

    // Here we start the loop for the UI State Machine
    while (1) {
		ADC_StartConversion();
   14dfa:	4b43      	ldr	r3, [pc, #268]	; (14f08 <vUiHandlerTask+0x178>)
   14dfc:	4798      	blx	r3
		struct NauPacket nauvar;
		
		while ((ADC_ReadReg(PU_CTRL_ADDR)&CR_Msk) != CR_DATA_RDY);
   14dfe:	46c0      	nop			; (mov r8, r8)
   14e00:	2000      	movs	r0, #0
   14e02:	4b42      	ldr	r3, [pc, #264]	; (14f0c <vUiHandlerTask+0x17c>)
   14e04:	4798      	blx	r3
   14e06:	0003      	movs	r3, r0
   14e08:	001a      	movs	r2, r3
   14e0a:	2320      	movs	r3, #32
   14e0c:	4013      	ands	r3, r2
   14e0e:	2b20      	cmp	r3, #32
   14e10:	d1f6      	bne.n	14e00 <vUiHandlerTask+0x70>
		uint32_t ADC_value=ADC_Read_Conversion_Data();
   14e12:	4b3f      	ldr	r3, [pc, #252]	; (14f10 <vUiHandlerTask+0x180>)
   14e14:	4798      	blx	r3
   14e16:	0003      	movs	r3, r0
   14e18:	673b      	str	r3, [r7, #112]	; 0x70
		uint16_t ADC_Array[2];
		//int ADC_Array[2];
		Value_conversion(ADC_value,ADC_Array);
   14e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14e1c:	2248      	movs	r2, #72	; 0x48
   14e1e:	18ba      	adds	r2, r7, r2
   14e20:	0011      	movs	r1, r2
   14e22:	0018      	movs	r0, r3
   14e24:	4b3b      	ldr	r3, [pc, #236]	; (14f14 <vUiHandlerTask+0x184>)
   14e26:	4798      	blx	r3
		char help[64];
		//snprintf(help, 64, "input vol = VIN1P - VIN1N = %d\r\n",ADC_Array[0]);
		nauvar.nau_i = ADC_Array[0];
   14e28:	2348      	movs	r3, #72	; 0x48
   14e2a:	18fb      	adds	r3, r7, r3
   14e2c:	881a      	ldrh	r2, [r3, #0]
   14e2e:	234c      	movs	r3, #76	; 0x4c
   14e30:	18fb      	adds	r3, r7, r3
   14e32:	801a      	strh	r2, [r3, #0]
		nauvar.nau_f = ADC_Array[1];
   14e34:	2348      	movs	r3, #72	; 0x48
   14e36:	18fb      	adds	r3, r7, r3
   14e38:	885a      	ldrh	r2, [r3, #2]
   14e3a:	234c      	movs	r3, #76	; 0x4c
   14e3c:	18fb      	adds	r3, r7, r3
   14e3e:	805a      	strh	r2, [r3, #2]
		//nau_i_total = ADC_Array[0] + nau_i_total;
		//nau_f_total = ADC_Array[1] + nau_f_total;
		
		int error = WifiAddNauDataToQueue(&nauvar);
   14e40:	234c      	movs	r3, #76	; 0x4c
   14e42:	18fb      	adds	r3, r7, r3
   14e44:	0018      	movs	r0, r3
   14e46:	4b34      	ldr	r3, [pc, #208]	; (14f18 <vUiHandlerTask+0x188>)
   14e48:	4798      	blx	r3
   14e4a:	0003      	movs	r3, r0
   14e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
		
			
			//gfx_mono_init();
			int result = ADC_Array[0] + ADC_Array[1] / 10000;
   14e4e:	2348      	movs	r3, #72	; 0x48
   14e50:	18fb      	adds	r3, r7, r3
   14e52:	881b      	ldrh	r3, [r3, #0]
   14e54:	001c      	movs	r4, r3
   14e56:	2348      	movs	r3, #72	; 0x48
   14e58:	18fb      	adds	r3, r7, r3
   14e5a:	885a      	ldrh	r2, [r3, #2]
   14e5c:	4b2f      	ldr	r3, [pc, #188]	; (14f1c <vUiHandlerTask+0x18c>)
   14e5e:	4930      	ldr	r1, [pc, #192]	; (14f20 <vUiHandlerTask+0x190>)
   14e60:	0010      	movs	r0, r2
   14e62:	4798      	blx	r3
   14e64:	0003      	movs	r3, r0
   14e66:	b29b      	uxth	r3, r3
   14e68:	18e3      	adds	r3, r4, r3
   14e6a:	66bb      	str	r3, [r7, #104]	; 0x68
			
			if(count == 0)
   14e6c:	237f      	movs	r3, #127	; 0x7f
   14e6e:	18fb      	adds	r3, r7, r3
   14e70:	781b      	ldrb	r3, [r3, #0]
   14e72:	2b00      	cmp	r3, #0
   14e74:	d10a      	bne.n	14e8c <vUiHandlerTask+0xfc>
			{
				count = count + 1;
   14e76:	237f      	movs	r3, #127	; 0x7f
   14e78:	18fb      	adds	r3, r7, r3
   14e7a:	227f      	movs	r2, #127	; 0x7f
   14e7c:	18ba      	adds	r2, r7, r2
   14e7e:	7812      	ldrb	r2, [r2, #0]
   14e80:	3201      	adds	r2, #1
   14e82:	701a      	strb	r2, [r3, #0]
				first_result = result;
   14e84:	237c      	movs	r3, #124	; 0x7c
   14e86:	18fb      	adds	r3, r7, r3
   14e88:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14e8a:	801a      	strh	r2, [r3, #0]
			}
			result = result - first_result;
   14e8c:	237c      	movs	r3, #124	; 0x7c
   14e8e:	18fb      	adds	r3, r7, r3
   14e90:	881b      	ldrh	r3, [r3, #0]
   14e92:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14e94:	1ad3      	subs	r3, r2, r3
   14e96:	66bb      	str	r3, [r7, #104]	; 0x68
			
			result = getValue(result);
   14e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14e9a:	0018      	movs	r0, r3
   14e9c:	4b21      	ldr	r3, [pc, #132]	; (14f24 <vUiHandlerTask+0x194>)
   14e9e:	4798      	blx	r3
   14ea0:	0003      	movs	r3, r0
   14ea2:	66bb      	str	r3, [r7, #104]	; 0x68
			if(result == -1){
   14ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14ea6:	3301      	adds	r3, #1
   14ea8:	d106      	bne.n	14eb8 <vUiHandlerTask+0x128>
				gfx_mono_draw_string("Undefined!", 0, 28, &sysfont);
   14eaa:	4b12      	ldr	r3, [pc, #72]	; (14ef4 <vUiHandlerTask+0x164>)
   14eac:	481e      	ldr	r0, [pc, #120]	; (14f28 <vUiHandlerTask+0x198>)
   14eae:	221c      	movs	r2, #28
   14eb0:	2100      	movs	r1, #0
   14eb2:	4c12      	ldr	r4, [pc, #72]	; (14efc <vUiHandlerTask+0x16c>)
   14eb4:	47a0      	blx	r4
   14eb6:	e00d      	b.n	14ed4 <vUiHandlerTask+0x144>
			}
			else{
				sprintf(oled_display, "$ %d       ", result);
   14eb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14eba:	491c      	ldr	r1, [pc, #112]	; (14f2c <vUiHandlerTask+0x19c>)
   14ebc:	2350      	movs	r3, #80	; 0x50
   14ebe:	18fb      	adds	r3, r7, r3
   14ec0:	0018      	movs	r0, r3
   14ec2:	4b1b      	ldr	r3, [pc, #108]	; (14f30 <vUiHandlerTask+0x1a0>)
   14ec4:	4798      	blx	r3
				gfx_mono_draw_string(oled_display, 0, 28, &sysfont);
   14ec6:	4b0b      	ldr	r3, [pc, #44]	; (14ef4 <vUiHandlerTask+0x164>)
   14ec8:	2250      	movs	r2, #80	; 0x50
   14eca:	18b8      	adds	r0, r7, r2
   14ecc:	221c      	movs	r2, #28
   14ece:	2100      	movs	r1, #0
   14ed0:	4c0a      	ldr	r4, [pc, #40]	; (14efc <vUiHandlerTask+0x16c>)
   14ed2:	47a0      	blx	r4
		//}
		
		
		
        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(4000);
   14ed4:	23fa      	movs	r3, #250	; 0xfa
   14ed6:	011b      	lsls	r3, r3, #4
   14ed8:	0018      	movs	r0, r3
   14eda:	4b16      	ldr	r3, [pc, #88]	; (14f34 <vUiHandlerTask+0x1a4>)
   14edc:	4798      	blx	r3
    while (1) {
   14ede:	e78c      	b.n	14dfa <vUiHandlerTask+0x6a>
   14ee0:	00035f08 	.word	0x00035f08
   14ee4:	0001ce35 	.word	0x0001ce35
   14ee8:	00014ce1 	.word	0x00014ce1
   14eec:	00014d59 	.word	0x00014d59
   14ef0:	0001287d 	.word	0x0001287d
   14ef4:	20000000 	.word	0x20000000
   14ef8:	00035f1c 	.word	0x00035f1c
   14efc:	00012721 	.word	0x00012721
   14f00:	00035f24 	.word	0x00035f24
   14f04:	00014905 	.word	0x00014905
   14f08:	000149a1 	.word	0x000149a1
   14f0c:	000147ed 	.word	0x000147ed
   14f10:	00014a5d 	.word	0x00014a5d
   14f14:	00014a81 	.word	0x00014a81
   14f18:	0001657d 	.word	0x0001657d
   14f1c:	00031b55 	.word	0x00031b55
   14f20:	00002710 	.word	0x00002710
   14f24:	00014f39 	.word	0x00014f39
   14f28:	00035f2c 	.word	0x00035f2c
   14f2c:	00035f38 	.word	0x00035f38
   14f30:	000348cd 	.word	0x000348cd
   14f34:	0001b1e1 	.word	0x0001b1e1

00014f38 <getValue>:
		//SerialConsoleWriteString("UI Task ++++++++++++++++!");
    }
}
int getValue(int ret){
   14f38:	b580      	push	{r7, lr}
   14f3a:	b082      	sub	sp, #8
   14f3c:	af00      	add	r7, sp, #0
   14f3e:	6078      	str	r0, [r7, #4]
	if (ret >= 6 && ret < 20) {
   14f40:	687b      	ldr	r3, [r7, #4]
   14f42:	2b05      	cmp	r3, #5
   14f44:	dd04      	ble.n	14f50 <getValue+0x18>
   14f46:	687b      	ldr	r3, [r7, #4]
   14f48:	2b13      	cmp	r3, #19
   14f4a:	dc01      	bgt.n	14f50 <getValue+0x18>
		return 3;
   14f4c:	2303      	movs	r3, #3
   14f4e:	e00e      	b.n	14f6e <getValue+0x36>
		} else if (ret >= 20 && ret < 55) {
   14f50:	687b      	ldr	r3, [r7, #4]
   14f52:	2b13      	cmp	r3, #19
   14f54:	dd04      	ble.n	14f60 <getValue+0x28>
   14f56:	687b      	ldr	r3, [r7, #4]
   14f58:	2b36      	cmp	r3, #54	; 0x36
   14f5a:	dc01      	bgt.n	14f60 <getValue+0x28>
			return 7;
   14f5c:	2307      	movs	r3, #7
   14f5e:	e006      	b.n	14f6e <getValue+0x36>
		} else if (ret <= 6) {
   14f60:	687b      	ldr	r3, [r7, #4]
   14f62:	2b06      	cmp	r3, #6
   14f64:	dc01      	bgt.n	14f6a <getValue+0x32>
			return 0;
   14f66:	2300      	movs	r3, #0
   14f68:	e001      	b.n	14f6e <getValue+0x36>
		} else {
			return -1;
   14f6a:	2301      	movs	r3, #1
   14f6c:	425b      	negs	r3, r3
	}
   14f6e:	0018      	movs	r0, r3
   14f70:	46bd      	mov	sp, r7
   14f72:	b002      	add	sp, #8
   14f74:	bd80      	pop	{r7, pc}
	...

00014f78 <NVIC_SystemReset>:
{
   14f78:	b580      	push	{r7, lr}
   14f7a:	af00      	add	r7, sp, #0
   14f7c:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14f80:	4b02      	ldr	r3, [pc, #8]	; (14f8c <NVIC_SystemReset+0x14>)
   14f82:	4a03      	ldr	r2, [pc, #12]	; (14f90 <NVIC_SystemReset+0x18>)
   14f84:	60da      	str	r2, [r3, #12]
   14f86:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   14f8a:	e7fe      	b.n	14f8a <NVIC_SystemReset+0x12>
   14f8c:	e000ed00 	.word	0xe000ed00
   14f90:	05fa0004 	.word	0x05fa0004

00014f94 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14f94:	b580      	push	{r7, lr}
   14f96:	b084      	sub	sp, #16
   14f98:	af00      	add	r7, sp, #0
   14f9a:	0002      	movs	r2, r0
   14f9c:	1dfb      	adds	r3, r7, #7
   14f9e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14fa0:	230f      	movs	r3, #15
   14fa2:	18fb      	adds	r3, r7, r3
   14fa4:	1dfa      	adds	r2, r7, #7
   14fa6:	7812      	ldrb	r2, [r2, #0]
   14fa8:	09d2      	lsrs	r2, r2, #7
   14faa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14fac:	230e      	movs	r3, #14
   14fae:	18fb      	adds	r3, r7, r3
   14fb0:	1dfa      	adds	r2, r7, #7
   14fb2:	7812      	ldrb	r2, [r2, #0]
   14fb4:	0952      	lsrs	r2, r2, #5
   14fb6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14fb8:	4b0d      	ldr	r3, [pc, #52]	; (14ff0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14fba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14fbc:	230f      	movs	r3, #15
   14fbe:	18fb      	adds	r3, r7, r3
   14fc0:	781b      	ldrb	r3, [r3, #0]
   14fc2:	2b00      	cmp	r3, #0
   14fc4:	d10f      	bne.n	14fe6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   14fc6:	230f      	movs	r3, #15
   14fc8:	18fb      	adds	r3, r7, r3
   14fca:	781b      	ldrb	r3, [r3, #0]
   14fcc:	009b      	lsls	r3, r3, #2
   14fce:	2210      	movs	r2, #16
   14fd0:	4694      	mov	ip, r2
   14fd2:	44bc      	add	ip, r7
   14fd4:	4463      	add	r3, ip
   14fd6:	3b08      	subs	r3, #8
   14fd8:	681a      	ldr	r2, [r3, #0]
   14fda:	230e      	movs	r3, #14
   14fdc:	18fb      	adds	r3, r7, r3
   14fde:	781b      	ldrb	r3, [r3, #0]
   14fe0:	01db      	lsls	r3, r3, #7
   14fe2:	18d3      	adds	r3, r2, r3
   14fe4:	e000      	b.n	14fe8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   14fe6:	2300      	movs	r3, #0
	}
}
   14fe8:	0018      	movs	r0, r3
   14fea:	46bd      	mov	sp, r7
   14fec:	b004      	add	sp, #16
   14fee:	bd80      	pop	{r7, pc}
   14ff0:	41004400 	.word	0x41004400

00014ff4 <system_reset>:
{
   14ff4:	b580      	push	{r7, lr}
   14ff6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14ff8:	4b02      	ldr	r3, [pc, #8]	; (15004 <system_reset+0x10>)
   14ffa:	4798      	blx	r3
}
   14ffc:	46c0      	nop			; (mov r8, r8)
   14ffe:	46bd      	mov	sp, r7
   15000:	bd80      	pop	{r7, pc}
   15002:	46c0      	nop			; (mov r8, r8)
   15004:	00014f79 	.word	0x00014f79

00015008 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15008:	b580      	push	{r7, lr}
   1500a:	b082      	sub	sp, #8
   1500c:	af00      	add	r7, sp, #0
   1500e:	0002      	movs	r2, r0
   15010:	1dfb      	adds	r3, r7, #7
   15012:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15014:	1dfb      	adds	r3, r7, #7
   15016:	781b      	ldrb	r3, [r3, #0]
   15018:	0018      	movs	r0, r3
   1501a:	4b03      	ldr	r3, [pc, #12]	; (15028 <port_get_group_from_gpio_pin+0x20>)
   1501c:	4798      	blx	r3
   1501e:	0003      	movs	r3, r0
}
   15020:	0018      	movs	r0, r3
   15022:	46bd      	mov	sp, r7
   15024:	b002      	add	sp, #8
   15026:	bd80      	pop	{r7, pc}
   15028:	00014f95 	.word	0x00014f95

0001502c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1502c:	b580      	push	{r7, lr}
   1502e:	b084      	sub	sp, #16
   15030:	af00      	add	r7, sp, #0
   15032:	0002      	movs	r2, r0
   15034:	1dfb      	adds	r3, r7, #7
   15036:	701a      	strb	r2, [r3, #0]
   15038:	1dbb      	adds	r3, r7, #6
   1503a:	1c0a      	adds	r2, r1, #0
   1503c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1503e:	1dfb      	adds	r3, r7, #7
   15040:	781b      	ldrb	r3, [r3, #0]
   15042:	0018      	movs	r0, r3
   15044:	4b0d      	ldr	r3, [pc, #52]	; (1507c <port_pin_set_output_level+0x50>)
   15046:	4798      	blx	r3
   15048:	0003      	movs	r3, r0
   1504a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1504c:	1dfb      	adds	r3, r7, #7
   1504e:	781b      	ldrb	r3, [r3, #0]
   15050:	221f      	movs	r2, #31
   15052:	4013      	ands	r3, r2
   15054:	2201      	movs	r2, #1
   15056:	409a      	lsls	r2, r3
   15058:	0013      	movs	r3, r2
   1505a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1505c:	1dbb      	adds	r3, r7, #6
   1505e:	781b      	ldrb	r3, [r3, #0]
   15060:	2b00      	cmp	r3, #0
   15062:	d003      	beq.n	1506c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15064:	68fb      	ldr	r3, [r7, #12]
   15066:	68ba      	ldr	r2, [r7, #8]
   15068:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1506a:	e002      	b.n	15072 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1506c:	68fb      	ldr	r3, [r7, #12]
   1506e:	68ba      	ldr	r2, [r7, #8]
   15070:	615a      	str	r2, [r3, #20]
}
   15072:	46c0      	nop			; (mov r8, r8)
   15074:	46bd      	mov	sp, r7
   15076:	b004      	add	sp, #16
   15078:	bd80      	pop	{r7, pc}
   1507a:	46c0      	nop			; (mov r8, r8)
   1507c:	00015009 	.word	0x00015009

00015080 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15080:	b580      	push	{r7, lr}
   15082:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15084:	4b02      	ldr	r3, [pc, #8]	; (15090 <init_state+0x10>)
   15086:	2200      	movs	r2, #0
   15088:	701a      	strb	r2, [r3, #0]
}
   1508a:	46c0      	nop			; (mov r8, r8)
   1508c:	46bd      	mov	sp, r7
   1508e:	bd80      	pop	{r7, pc}
   15090:	20000605 	.word	0x20000605

00015094 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15094:	b580      	push	{r7, lr}
   15096:	b082      	sub	sp, #8
   15098:	af00      	add	r7, sp, #0
   1509a:	0002      	movs	r2, r0
   1509c:	1dfb      	adds	r3, r7, #7
   1509e:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   150a0:	1dfb      	adds	r3, r7, #7
   150a2:	781b      	ldrb	r3, [r3, #0]
   150a4:	b25b      	sxtb	r3, r3
   150a6:	43db      	mvns	r3, r3
   150a8:	b25b      	sxtb	r3, r3
   150aa:	4a06      	ldr	r2, [pc, #24]	; (150c4 <clear_state+0x30>)
   150ac:	7812      	ldrb	r2, [r2, #0]
   150ae:	b252      	sxtb	r2, r2
   150b0:	4013      	ands	r3, r2
   150b2:	b25b      	sxtb	r3, r3
   150b4:	b2da      	uxtb	r2, r3
   150b6:	4b03      	ldr	r3, [pc, #12]	; (150c4 <clear_state+0x30>)
   150b8:	701a      	strb	r2, [r3, #0]
}
   150ba:	46c0      	nop			; (mov r8, r8)
   150bc:	46bd      	mov	sp, r7
   150be:	b002      	add	sp, #8
   150c0:	bd80      	pop	{r7, pc}
   150c2:	46c0      	nop			; (mov r8, r8)
   150c4:	20000605 	.word	0x20000605

000150c8 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   150c8:	b580      	push	{r7, lr}
   150ca:	b082      	sub	sp, #8
   150cc:	af00      	add	r7, sp, #0
   150ce:	0002      	movs	r2, r0
   150d0:	1dfb      	adds	r3, r7, #7
   150d2:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   150d4:	4b05      	ldr	r3, [pc, #20]	; (150ec <add_state+0x24>)
   150d6:	781a      	ldrb	r2, [r3, #0]
   150d8:	1dfb      	adds	r3, r7, #7
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	4313      	orrs	r3, r2
   150de:	b2da      	uxtb	r2, r3
   150e0:	4b02      	ldr	r3, [pc, #8]	; (150ec <add_state+0x24>)
   150e2:	701a      	strb	r2, [r3, #0]
}
   150e4:	46c0      	nop			; (mov r8, r8)
   150e6:	46bd      	mov	sp, r7
   150e8:	b002      	add	sp, #8
   150ea:	bd80      	pop	{r7, pc}
   150ec:	20000605 	.word	0x20000605

000150f0 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   150f0:	b580      	push	{r7, lr}
   150f2:	b082      	sub	sp, #8
   150f4:	af00      	add	r7, sp, #0
   150f6:	0002      	movs	r2, r0
   150f8:	1dfb      	adds	r3, r7, #7
   150fa:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   150fc:	4b06      	ldr	r3, [pc, #24]	; (15118 <is_state_set+0x28>)
   150fe:	781b      	ldrb	r3, [r3, #0]
   15100:	1dfa      	adds	r2, r7, #7
   15102:	7812      	ldrb	r2, [r2, #0]
   15104:	4013      	ands	r3, r2
   15106:	b2db      	uxtb	r3, r3
   15108:	1e5a      	subs	r2, r3, #1
   1510a:	4193      	sbcs	r3, r2
   1510c:	b2db      	uxtb	r3, r3
}
   1510e:	0018      	movs	r0, r3
   15110:	46bd      	mov	sp, r7
   15112:	b002      	add	sp, #8
   15114:	bd80      	pop	{r7, pc}
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	20000605 	.word	0x20000605

0001511c <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   1511c:	b590      	push	{r4, r7, lr}
   1511e:	b085      	sub	sp, #20
   15120:	af00      	add	r7, sp, #0
   15122:	6078      	str	r0, [r7, #4]
   15124:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15126:	687b      	ldr	r3, [r7, #4]
   15128:	2b00      	cmp	r3, #0
   1512a:	d002      	beq.n	15132 <is_exist_file+0x16>
   1512c:	683b      	ldr	r3, [r7, #0]
   1512e:	2b00      	cmp	r3, #0
   15130:	d101      	bne.n	15136 <is_exist_file+0x1a>
        return false;
   15132:	2300      	movs	r3, #0
   15134:	e013      	b.n	1515e <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   15136:	230f      	movs	r3, #15
   15138:	18fc      	adds	r4, r7, r3
   1513a:	6839      	ldr	r1, [r7, #0]
   1513c:	4b0a      	ldr	r3, [pc, #40]	; (15168 <is_exist_file+0x4c>)
   1513e:	2200      	movs	r2, #0
   15140:	0018      	movs	r0, r3
   15142:	4b0a      	ldr	r3, [pc, #40]	; (1516c <is_exist_file+0x50>)
   15144:	4798      	blx	r3
   15146:	0003      	movs	r3, r0
   15148:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   1514a:	4b07      	ldr	r3, [pc, #28]	; (15168 <is_exist_file+0x4c>)
   1514c:	0018      	movs	r0, r3
   1514e:	4b08      	ldr	r3, [pc, #32]	; (15170 <is_exist_file+0x54>)
   15150:	4798      	blx	r3
    return (ret == FR_OK);
   15152:	230f      	movs	r3, #15
   15154:	18fb      	adds	r3, r7, r3
   15156:	781b      	ldrb	r3, [r3, #0]
   15158:	425a      	negs	r2, r3
   1515a:	4153      	adcs	r3, r2
   1515c:	b2db      	uxtb	r3, r3
}
   1515e:	0018      	movs	r0, r3
   15160:	46bd      	mov	sp, r7
   15162:	b005      	add	sp, #20
   15164:	bd90      	pop	{r4, r7, pc}
   15166:	46c0      	nop			; (mov r8, r8)
   15168:	20000838 	.word	0x20000838
   1516c:	0002cb5d 	.word	0x0002cb5d
   15170:	0002d55d 	.word	0x0002d55d

00015174 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   15174:	b580      	push	{r7, lr}
   15176:	b09e      	sub	sp, #120	; 0x78
   15178:	af00      	add	r7, sp, #0
   1517a:	60f8      	str	r0, [r7, #12]
   1517c:	60b9      	str	r1, [r7, #8]
   1517e:	1dfb      	adds	r3, r7, #7
   15180:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   15182:	2376      	movs	r3, #118	; 0x76
   15184:	18fb      	adds	r3, r7, r3
   15186:	2201      	movs	r2, #1
   15188:	801a      	strh	r2, [r3, #0]
   1518a:	2374      	movs	r3, #116	; 0x74
   1518c:	18fb      	adds	r3, r7, r3
   1518e:	2200      	movs	r2, #0
   15190:	801a      	strh	r2, [r3, #0]
   15192:	236e      	movs	r3, #110	; 0x6e
   15194:	18fb      	adds	r3, r7, r3
   15196:	2200      	movs	r2, #0
   15198:	801a      	strh	r2, [r3, #0]
   1519a:	2372      	movs	r3, #114	; 0x72
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	2200      	movs	r2, #0
   151a0:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   151a2:	2324      	movs	r3, #36	; 0x24
   151a4:	18fb      	adds	r3, r7, r3
   151a6:	0018      	movs	r0, r3
   151a8:	2341      	movs	r3, #65	; 0x41
   151aa:	001a      	movs	r2, r3
   151ac:	2100      	movs	r1, #0
   151ae:	4b92      	ldr	r3, [pc, #584]	; (153f8 <rename_to_unique+0x284>)
   151b0:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   151b2:	2318      	movs	r3, #24
   151b4:	18fb      	adds	r3, r7, r3
   151b6:	0018      	movs	r0, r3
   151b8:	2309      	movs	r3, #9
   151ba:	001a      	movs	r2, r3
   151bc:	2100      	movs	r1, #0
   151be:	4b8e      	ldr	r3, [pc, #568]	; (153f8 <rename_to_unique+0x284>)
   151c0:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   151c2:	2314      	movs	r3, #20
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	2200      	movs	r2, #0
   151c8:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   151ca:	2300      	movs	r3, #0
   151cc:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   151ce:	2371      	movs	r3, #113	; 0x71
   151d0:	18fb      	adds	r3, r7, r3
   151d2:	2200      	movs	r2, #0
   151d4:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   151d6:	68bb      	ldr	r3, [r7, #8]
   151d8:	2b00      	cmp	r3, #0
   151da:	d101      	bne.n	151e0 <rename_to_unique+0x6c>
        return false;
   151dc:	2300      	movs	r3, #0
   151de:	e106      	b.n	153ee <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   151e0:	68ba      	ldr	r2, [r7, #8]
   151e2:	68fb      	ldr	r3, [r7, #12]
   151e4:	0011      	movs	r1, r2
   151e6:	0018      	movs	r0, r3
   151e8:	4b84      	ldr	r3, [pc, #528]	; (153fc <rename_to_unique+0x288>)
   151ea:	4798      	blx	r3
   151ec:	0003      	movs	r3, r0
   151ee:	001a      	movs	r2, r3
   151f0:	2301      	movs	r3, #1
   151f2:	4053      	eors	r3, r2
   151f4:	b2db      	uxtb	r3, r3
   151f6:	2b00      	cmp	r3, #0
   151f8:	d001      	beq.n	151fe <rename_to_unique+0x8a>
        return true;
   151fa:	2301      	movs	r3, #1
   151fc:	e0f7      	b.n	153ee <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   151fe:	68bb      	ldr	r3, [r7, #8]
   15200:	0018      	movs	r0, r3
   15202:	4b7f      	ldr	r3, [pc, #508]	; (15400 <rename_to_unique+0x28c>)
   15204:	4798      	blx	r3
   15206:	0003      	movs	r3, r0
   15208:	2b40      	cmp	r3, #64	; 0x40
   1520a:	d901      	bls.n	15210 <rename_to_unique+0x9c>
        return false;
   1520c:	2300      	movs	r3, #0
   1520e:	e0ee      	b.n	153ee <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15210:	68bb      	ldr	r3, [r7, #8]
   15212:	212e      	movs	r1, #46	; 0x2e
   15214:	0018      	movs	r0, r3
   15216:	4b7b      	ldr	r3, [pc, #492]	; (15404 <rename_to_unique+0x290>)
   15218:	4798      	blx	r3
   1521a:	0003      	movs	r3, r0
   1521c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   1521e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15220:	2b00      	cmp	r3, #0
   15222:	d052      	beq.n	152ca <rename_to_unique+0x156>
        ext_len = strlen(p);
   15224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   15226:	0018      	movs	r0, r3
   15228:	4b75      	ldr	r3, [pc, #468]	; (15400 <rename_to_unique+0x28c>)
   1522a:	4798      	blx	r3
   1522c:	0002      	movs	r2, r0
   1522e:	236e      	movs	r3, #110	; 0x6e
   15230:	18fb      	adds	r3, r7, r3
   15232:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   15234:	236e      	movs	r3, #110	; 0x6e
   15236:	18fb      	adds	r3, r7, r3
   15238:	881b      	ldrh	r3, [r3, #0]
   1523a:	2b07      	cmp	r3, #7
   1523c:	d837      	bhi.n	152ae <rename_to_unique+0x13a>
            valid_ext = true;
   1523e:	2371      	movs	r3, #113	; 0x71
   15240:	18fb      	adds	r3, r7, r3
   15242:	2201      	movs	r2, #1
   15244:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   15246:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15248:	2318      	movs	r3, #24
   1524a:	18fb      	adds	r3, r7, r3
   1524c:	0011      	movs	r1, r2
   1524e:	0018      	movs	r0, r3
   15250:	4b6d      	ldr	r3, [pc, #436]	; (15408 <rename_to_unique+0x294>)
   15252:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15254:	68bb      	ldr	r3, [r7, #8]
   15256:	0018      	movs	r0, r3
   15258:	4b69      	ldr	r3, [pc, #420]	; (15400 <rename_to_unique+0x28c>)
   1525a:	4798      	blx	r3
   1525c:	0002      	movs	r2, r0
   1525e:	236e      	movs	r3, #110	; 0x6e
   15260:	18fb      	adds	r3, r7, r3
   15262:	881b      	ldrh	r3, [r3, #0]
   15264:	1ad3      	subs	r3, r2, r3
   15266:	2b3c      	cmp	r3, #60	; 0x3c
   15268:	d911      	bls.n	1528e <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   1526a:	2374      	movs	r3, #116	; 0x74
   1526c:	18fb      	adds	r3, r7, r3
   1526e:	226e      	movs	r2, #110	; 0x6e
   15270:	18ba      	adds	r2, r7, r2
   15272:	8812      	ldrh	r2, [r2, #0]
   15274:	213c      	movs	r1, #60	; 0x3c
   15276:	1a8a      	subs	r2, r1, r2
   15278:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1527a:	2374      	movs	r3, #116	; 0x74
   1527c:	18fb      	adds	r3, r7, r3
   1527e:	881a      	ldrh	r2, [r3, #0]
   15280:	68b9      	ldr	r1, [r7, #8]
   15282:	2324      	movs	r3, #36	; 0x24
   15284:	18fb      	adds	r3, r7, r3
   15286:	0018      	movs	r0, r3
   15288:	4b60      	ldr	r3, [pc, #384]	; (1540c <rename_to_unique+0x298>)
   1528a:	4798      	blx	r3
   1528c:	e02a      	b.n	152e4 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1528e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15290:	68bb      	ldr	r3, [r7, #8]
   15292:	1ad2      	subs	r2, r2, r3
   15294:	2374      	movs	r3, #116	; 0x74
   15296:	18fb      	adds	r3, r7, r3
   15298:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1529a:	2374      	movs	r3, #116	; 0x74
   1529c:	18fb      	adds	r3, r7, r3
   1529e:	881a      	ldrh	r2, [r3, #0]
   152a0:	68b9      	ldr	r1, [r7, #8]
   152a2:	2324      	movs	r3, #36	; 0x24
   152a4:	18fb      	adds	r3, r7, r3
   152a6:	0018      	movs	r0, r3
   152a8:	4b58      	ldr	r3, [pc, #352]	; (1540c <rename_to_unique+0x298>)
   152aa:	4798      	blx	r3
   152ac:	e01a      	b.n	152e4 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   152ae:	2374      	movs	r3, #116	; 0x74
   152b0:	18fb      	adds	r3, r7, r3
   152b2:	223c      	movs	r2, #60	; 0x3c
   152b4:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   152b6:	2374      	movs	r3, #116	; 0x74
   152b8:	18fb      	adds	r3, r7, r3
   152ba:	881a      	ldrh	r2, [r3, #0]
   152bc:	68b9      	ldr	r1, [r7, #8]
   152be:	2324      	movs	r3, #36	; 0x24
   152c0:	18fb      	adds	r3, r7, r3
   152c2:	0018      	movs	r0, r3
   152c4:	4b51      	ldr	r3, [pc, #324]	; (1540c <rename_to_unique+0x298>)
   152c6:	4798      	blx	r3
   152c8:	e00c      	b.n	152e4 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   152ca:	2374      	movs	r3, #116	; 0x74
   152cc:	18fb      	adds	r3, r7, r3
   152ce:	223c      	movs	r2, #60	; 0x3c
   152d0:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   152d2:	2374      	movs	r3, #116	; 0x74
   152d4:	18fb      	adds	r3, r7, r3
   152d6:	881a      	ldrh	r2, [r3, #0]
   152d8:	68b9      	ldr	r1, [r7, #8]
   152da:	2324      	movs	r3, #36	; 0x24
   152dc:	18fb      	adds	r3, r7, r3
   152de:	0018      	movs	r0, r3
   152e0:	4b4a      	ldr	r3, [pc, #296]	; (1540c <rename_to_unique+0x298>)
   152e2:	4798      	blx	r3
    }

    name[name_len++] = '-';
   152e4:	2374      	movs	r3, #116	; 0x74
   152e6:	18fb      	adds	r3, r7, r3
   152e8:	881b      	ldrh	r3, [r3, #0]
   152ea:	2274      	movs	r2, #116	; 0x74
   152ec:	18ba      	adds	r2, r7, r2
   152ee:	1c59      	adds	r1, r3, #1
   152f0:	8011      	strh	r1, [r2, #0]
   152f2:	001a      	movs	r2, r3
   152f4:	2324      	movs	r3, #36	; 0x24
   152f6:	18fb      	adds	r3, r7, r3
   152f8:	212d      	movs	r1, #45	; 0x2d
   152fa:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   152fc:	2376      	movs	r3, #118	; 0x76
   152fe:	18fb      	adds	r3, r7, r3
   15300:	2200      	movs	r2, #0
   15302:	801a      	strh	r2, [r3, #0]
   15304:	2372      	movs	r3, #114	; 0x72
   15306:	18fb      	adds	r3, r7, r3
   15308:	2201      	movs	r2, #1
   1530a:	801a      	strh	r2, [r3, #0]
   1530c:	e010      	b.n	15330 <rename_to_unique+0x1bc>
        count *= 10;
   1530e:	2372      	movs	r3, #114	; 0x72
   15310:	18fa      	adds	r2, r7, r3
   15312:	2372      	movs	r3, #114	; 0x72
   15314:	18fb      	adds	r3, r7, r3
   15316:	881b      	ldrh	r3, [r3, #0]
   15318:	1c19      	adds	r1, r3, #0
   1531a:	0089      	lsls	r1, r1, #2
   1531c:	18cb      	adds	r3, r1, r3
   1531e:	18db      	adds	r3, r3, r3
   15320:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15322:	2376      	movs	r3, #118	; 0x76
   15324:	18fb      	adds	r3, r7, r3
   15326:	881a      	ldrh	r2, [r3, #0]
   15328:	2376      	movs	r3, #118	; 0x76
   1532a:	18fb      	adds	r3, r7, r3
   1532c:	3201      	adds	r2, #1
   1532e:	801a      	strh	r2, [r3, #0]
   15330:	2376      	movs	r3, #118	; 0x76
   15332:	18fb      	adds	r3, r7, r3
   15334:	881b      	ldrh	r3, [r3, #0]
   15336:	2b02      	cmp	r3, #2
   15338:	d9e9      	bls.n	1530e <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   1533a:	2376      	movs	r3, #118	; 0x76
   1533c:	18fb      	adds	r3, r7, r3
   1533e:	2201      	movs	r2, #1
   15340:	801a      	strh	r2, [r3, #0]
   15342:	e04b      	b.n	153dc <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15344:	2376      	movs	r3, #118	; 0x76
   15346:	18fb      	adds	r3, r7, r3
   15348:	881a      	ldrh	r2, [r3, #0]
   1534a:	4931      	ldr	r1, [pc, #196]	; (15410 <rename_to_unique+0x29c>)
   1534c:	2314      	movs	r3, #20
   1534e:	18fb      	adds	r3, r7, r3
   15350:	0018      	movs	r0, r3
   15352:	4b30      	ldr	r3, [pc, #192]	; (15414 <rename_to_unique+0x2a0>)
   15354:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15356:	2374      	movs	r3, #116	; 0x74
   15358:	18fb      	adds	r3, r7, r3
   1535a:	881b      	ldrh	r3, [r3, #0]
   1535c:	2224      	movs	r2, #36	; 0x24
   1535e:	18ba      	adds	r2, r7, r2
   15360:	18d3      	adds	r3, r2, r3
   15362:	2214      	movs	r2, #20
   15364:	18b9      	adds	r1, r7, r2
   15366:	2203      	movs	r2, #3
   15368:	0018      	movs	r0, r3
   1536a:	4b28      	ldr	r3, [pc, #160]	; (1540c <rename_to_unique+0x298>)
   1536c:	4798      	blx	r3
        if (valid_ext) {
   1536e:	2371      	movs	r3, #113	; 0x71
   15370:	18fb      	adds	r3, r7, r3
   15372:	781b      	ldrb	r3, [r3, #0]
   15374:	2b00      	cmp	r3, #0
   15376:	d00c      	beq.n	15392 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   15378:	2374      	movs	r3, #116	; 0x74
   1537a:	18fb      	adds	r3, r7, r3
   1537c:	881b      	ldrh	r3, [r3, #0]
   1537e:	3303      	adds	r3, #3
   15380:	2224      	movs	r2, #36	; 0x24
   15382:	18ba      	adds	r2, r7, r2
   15384:	18d3      	adds	r3, r2, r3
   15386:	2218      	movs	r2, #24
   15388:	18ba      	adds	r2, r7, r2
   1538a:	0011      	movs	r1, r2
   1538c:	0018      	movs	r0, r3
   1538e:	4b1e      	ldr	r3, [pc, #120]	; (15408 <rename_to_unique+0x294>)
   15390:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   15392:	2324      	movs	r3, #36	; 0x24
   15394:	18fa      	adds	r2, r7, r3
   15396:	68fb      	ldr	r3, [r7, #12]
   15398:	0011      	movs	r1, r2
   1539a:	0018      	movs	r0, r3
   1539c:	4b17      	ldr	r3, [pc, #92]	; (153fc <rename_to_unique+0x288>)
   1539e:	4798      	blx	r3
   153a0:	0003      	movs	r3, r0
   153a2:	001a      	movs	r2, r3
   153a4:	2301      	movs	r3, #1
   153a6:	4053      	eors	r3, r2
   153a8:	b2db      	uxtb	r3, r3
   153aa:	2b00      	cmp	r3, #0
   153ac:	d00f      	beq.n	153ce <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   153ae:	1dfb      	adds	r3, r7, #7
   153b0:	781a      	ldrb	r2, [r3, #0]
   153b2:	68bb      	ldr	r3, [r7, #8]
   153b4:	2100      	movs	r1, #0
   153b6:	0018      	movs	r0, r3
   153b8:	4b0f      	ldr	r3, [pc, #60]	; (153f8 <rename_to_unique+0x284>)
   153ba:	4798      	blx	r3
            strcpy(file_path_name, name);
   153bc:	2324      	movs	r3, #36	; 0x24
   153be:	18fa      	adds	r2, r7, r3
   153c0:	68bb      	ldr	r3, [r7, #8]
   153c2:	0011      	movs	r1, r2
   153c4:	0018      	movs	r0, r3
   153c6:	4b10      	ldr	r3, [pc, #64]	; (15408 <rename_to_unique+0x294>)
   153c8:	4798      	blx	r3
            return true;
   153ca:	2301      	movs	r3, #1
   153cc:	e00f      	b.n	153ee <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   153ce:	2376      	movs	r3, #118	; 0x76
   153d0:	18fb      	adds	r3, r7, r3
   153d2:	881a      	ldrh	r2, [r3, #0]
   153d4:	2376      	movs	r3, #118	; 0x76
   153d6:	18fb      	adds	r3, r7, r3
   153d8:	3201      	adds	r2, #1
   153da:	801a      	strh	r2, [r3, #0]
   153dc:	2376      	movs	r3, #118	; 0x76
   153de:	18fa      	adds	r2, r7, r3
   153e0:	2372      	movs	r3, #114	; 0x72
   153e2:	18fb      	adds	r3, r7, r3
   153e4:	8812      	ldrh	r2, [r2, #0]
   153e6:	881b      	ldrh	r3, [r3, #0]
   153e8:	429a      	cmp	r2, r3
   153ea:	d3ab      	bcc.n	15344 <rename_to_unique+0x1d0>
        }
    }
    return false;
   153ec:	2300      	movs	r3, #0
}
   153ee:	0018      	movs	r0, r3
   153f0:	46bd      	mov	sp, r7
   153f2:	b01e      	add	sp, #120	; 0x78
   153f4:	bd80      	pop	{r7, pc}
   153f6:	46c0      	nop			; (mov r8, r8)
   153f8:	0003460f 	.word	0x0003460f
   153fc:	0001511d 	.word	0x0001511d
   15400:	000349ab 	.word	0x000349ab
   15404:	00034a05 	.word	0x00034a05
   15408:	00034961 	.word	0x00034961
   1540c:	000349db 	.word	0x000349db
   15410:	00035f58 	.word	0x00035f58
   15414:	000348cd 	.word	0x000348cd

00015418 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   15418:	b590      	push	{r4, r7, lr}
   1541a:	b083      	sub	sp, #12
   1541c:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   1541e:	2001      	movs	r0, #1
   15420:	4b22      	ldr	r3, [pc, #136]	; (154ac <start_download+0x94>)
   15422:	4798      	blx	r3
   15424:	0003      	movs	r3, r0
   15426:	001a      	movs	r2, r3
   15428:	2301      	movs	r3, #1
   1542a:	4053      	eors	r3, r2
   1542c:	b2db      	uxtb	r3, r3
   1542e:	2b00      	cmp	r3, #0
   15430:	d005      	beq.n	1543e <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   15432:	4b1f      	ldr	r3, [pc, #124]	; (154b0 <start_download+0x98>)
   15434:	0019      	movs	r1, r3
   15436:	2001      	movs	r0, #1
   15438:	4b1e      	ldr	r3, [pc, #120]	; (154b4 <start_download+0x9c>)
   1543a:	4798      	blx	r3
        return;
   1543c:	e032      	b.n	154a4 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1543e:	2002      	movs	r0, #2
   15440:	4b1a      	ldr	r3, [pc, #104]	; (154ac <start_download+0x94>)
   15442:	4798      	blx	r3
   15444:	0003      	movs	r3, r0
   15446:	001a      	movs	r2, r3
   15448:	2301      	movs	r3, #1
   1544a:	4053      	eors	r3, r2
   1544c:	b2db      	uxtb	r3, r3
   1544e:	2b00      	cmp	r3, #0
   15450:	d005      	beq.n	1545e <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   15452:	4b19      	ldr	r3, [pc, #100]	; (154b8 <start_download+0xa0>)
   15454:	0019      	movs	r1, r3
   15456:	2001      	movs	r0, #1
   15458:	4b16      	ldr	r3, [pc, #88]	; (154b4 <start_download+0x9c>)
   1545a:	4798      	blx	r3
        return;
   1545c:	e022      	b.n	154a4 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1545e:	2004      	movs	r0, #4
   15460:	4b12      	ldr	r3, [pc, #72]	; (154ac <start_download+0x94>)
   15462:	4798      	blx	r3
   15464:	1e03      	subs	r3, r0, #0
   15466:	d005      	beq.n	15474 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   15468:	4b14      	ldr	r3, [pc, #80]	; (154bc <start_download+0xa4>)
   1546a:	0019      	movs	r1, r3
   1546c:	2001      	movs	r0, #1
   1546e:	4b11      	ldr	r3, [pc, #68]	; (154b4 <start_download+0x9c>)
   15470:	4798      	blx	r3
        return;
   15472:	e017      	b.n	154a4 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   15474:	2008      	movs	r0, #8
   15476:	4b0d      	ldr	r3, [pc, #52]	; (154ac <start_download+0x94>)
   15478:	4798      	blx	r3
   1547a:	1e03      	subs	r3, r0, #0
   1547c:	d005      	beq.n	1548a <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1547e:	4b10      	ldr	r3, [pc, #64]	; (154c0 <start_download+0xa8>)
   15480:	0019      	movs	r1, r3
   15482:	2001      	movs	r0, #1
   15484:	4b0b      	ldr	r3, [pc, #44]	; (154b4 <start_download+0x9c>)
   15486:	4798      	blx	r3
        return;
   15488:	e00c      	b.n	154a4 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   1548a:	4b0e      	ldr	r3, [pc, #56]	; (154c4 <start_download+0xac>)
   1548c:	0019      	movs	r1, r3
   1548e:	2001      	movs	r0, #1
   15490:	4b08      	ldr	r3, [pc, #32]	; (154b4 <start_download+0x9c>)
   15492:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15494:	490c      	ldr	r1, [pc, #48]	; (154c8 <start_download+0xb0>)
   15496:	480d      	ldr	r0, [pc, #52]	; (154cc <start_download+0xb4>)
   15498:	2300      	movs	r3, #0
   1549a:	9300      	str	r3, [sp, #0]
   1549c:	2300      	movs	r3, #0
   1549e:	2201      	movs	r2, #1
   154a0:	4c0b      	ldr	r4, [pc, #44]	; (154d0 <start_download+0xb8>)
   154a2:	47a0      	blx	r4
}
   154a4:	46bd      	mov	sp, r7
   154a6:	b001      	add	sp, #4
   154a8:	bd90      	pop	{r4, r7, pc}
   154aa:	46c0      	nop			; (mov r8, r8)
   154ac:	000150f1 	.word	0x000150f1
   154b0:	00035f60 	.word	0x00035f60
   154b4:	0001cf21 	.word	0x0001cf21
   154b8:	00035f8c 	.word	0x00035f8c
   154bc:	00035fb8 	.word	0x00035fb8
   154c0:	00035fe4 	.word	0x00035fe4
   154c4:	00036010 	.word	0x00036010
   154c8:	0003603c 	.word	0x0003603c
   154cc:	200048cc 	.word	0x200048cc
   154d0:	000301b1 	.word	0x000301b1

000154d4 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   154d4:	b5b0      	push	{r4, r5, r7, lr}
   154d6:	b086      	sub	sp, #24
   154d8:	af00      	add	r7, sp, #0
   154da:	6078      	str	r0, [r7, #4]
   154dc:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   154de:	687b      	ldr	r3, [r7, #4]
   154e0:	2b00      	cmp	r3, #0
   154e2:	d002      	beq.n	154ea <store_file_packet+0x16>
   154e4:	683b      	ldr	r3, [r7, #0]
   154e6:	2b00      	cmp	r3, #0
   154e8:	d105      	bne.n	154f6 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   154ea:	4b58      	ldr	r3, [pc, #352]	; (1564c <store_file_packet+0x178>)
   154ec:	0019      	movs	r1, r3
   154ee:	2001      	movs	r0, #1
   154f0:	4b57      	ldr	r3, [pc, #348]	; (15650 <store_file_packet+0x17c>)
   154f2:	4798      	blx	r3
        return;
   154f4:	e0a6      	b.n	15644 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   154f6:	2008      	movs	r0, #8
   154f8:	4b56      	ldr	r3, [pc, #344]	; (15654 <store_file_packet+0x180>)
   154fa:	4798      	blx	r3
   154fc:	0003      	movs	r3, r0
   154fe:	001a      	movs	r2, r3
   15500:	2301      	movs	r3, #1
   15502:	4053      	eors	r3, r2
   15504:	b2db      	uxtb	r3, r3
   15506:	2b00      	cmp	r3, #0
   15508:	d055      	beq.n	155b6 <store_file_packet+0xe2>
        char *cp = NULL;
   1550a:	2300      	movs	r3, #0
   1550c:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1550e:	4b52      	ldr	r3, [pc, #328]	; (15658 <store_file_packet+0x184>)
   15510:	2230      	movs	r2, #48	; 0x30
   15512:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   15514:	4b50      	ldr	r3, [pc, #320]	; (15658 <store_file_packet+0x184>)
   15516:	223a      	movs	r2, #58	; 0x3a
   15518:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   1551a:	4b50      	ldr	r3, [pc, #320]	; (1565c <store_file_packet+0x188>)
   1551c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1551e:	e002      	b.n	15526 <store_file_packet+0x52>
            cp--;
   15520:	697b      	ldr	r3, [r7, #20]
   15522:	3b01      	subs	r3, #1
   15524:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   15526:	697b      	ldr	r3, [r7, #20]
   15528:	781b      	ldrb	r3, [r3, #0]
   1552a:	2b2f      	cmp	r3, #47	; 0x2f
   1552c:	d1f8      	bne.n	15520 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   1552e:	697b      	ldr	r3, [r7, #20]
   15530:	0018      	movs	r0, r3
   15532:	4b4b      	ldr	r3, [pc, #300]	; (15660 <store_file_packet+0x18c>)
   15534:	4798      	blx	r3
   15536:	0003      	movs	r3, r0
   15538:	2b01      	cmp	r3, #1
   1553a:	d924      	bls.n	15586 <store_file_packet+0xb2>
            cp++;
   1553c:	697b      	ldr	r3, [r7, #20]
   1553e:	3301      	adds	r3, #1
   15540:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   15542:	697a      	ldr	r2, [r7, #20]
   15544:	4b47      	ldr	r3, [pc, #284]	; (15664 <store_file_packet+0x190>)
   15546:	0011      	movs	r1, r2
   15548:	0018      	movs	r0, r3
   1554a:	4b47      	ldr	r3, [pc, #284]	; (15668 <store_file_packet+0x194>)
   1554c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1554e:	4942      	ldr	r1, [pc, #264]	; (15658 <store_file_packet+0x184>)
   15550:	4b46      	ldr	r3, [pc, #280]	; (1566c <store_file_packet+0x198>)
   15552:	2240      	movs	r2, #64	; 0x40
   15554:	0018      	movs	r0, r3
   15556:	4b46      	ldr	r3, [pc, #280]	; (15670 <store_file_packet+0x19c>)
   15558:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   1555a:	4a3f      	ldr	r2, [pc, #252]	; (15658 <store_file_packet+0x184>)
   1555c:	4b45      	ldr	r3, [pc, #276]	; (15674 <store_file_packet+0x1a0>)
   1555e:	0019      	movs	r1, r3
   15560:	2001      	movs	r0, #1
   15562:	4b3b      	ldr	r3, [pc, #236]	; (15650 <store_file_packet+0x17c>)
   15564:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15566:	2313      	movs	r3, #19
   15568:	18fc      	adds	r4, r7, r3
   1556a:	493b      	ldr	r1, [pc, #236]	; (15658 <store_file_packet+0x184>)
   1556c:	4b3f      	ldr	r3, [pc, #252]	; (1566c <store_file_packet+0x198>)
   1556e:	220a      	movs	r2, #10
   15570:	0018      	movs	r0, r3
   15572:	4b41      	ldr	r3, [pc, #260]	; (15678 <store_file_packet+0x1a4>)
   15574:	4798      	blx	r3
   15576:	0003      	movs	r3, r0
   15578:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1557a:	2313      	movs	r3, #19
   1557c:	18fb      	adds	r3, r7, r3
   1557e:	781b      	ldrb	r3, [r3, #0]
   15580:	2b00      	cmp	r3, #0
   15582:	d012      	beq.n	155aa <store_file_packet+0xd6>
   15584:	e008      	b.n	15598 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   15586:	4b3d      	ldr	r3, [pc, #244]	; (1567c <store_file_packet+0x1a8>)
   15588:	0019      	movs	r1, r3
   1558a:	2001      	movs	r0, #1
   1558c:	4b30      	ldr	r3, [pc, #192]	; (15650 <store_file_packet+0x17c>)
   1558e:	4798      	blx	r3
            add_state(CANCELED);
   15590:	2020      	movs	r0, #32
   15592:	4b3b      	ldr	r3, [pc, #236]	; (15680 <store_file_packet+0x1ac>)
   15594:	4798      	blx	r3
            return;
   15596:	e055      	b.n	15644 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   15598:	2313      	movs	r3, #19
   1559a:	18fb      	adds	r3, r7, r3
   1559c:	781a      	ldrb	r2, [r3, #0]
   1559e:	4b39      	ldr	r3, [pc, #228]	; (15684 <store_file_packet+0x1b0>)
   155a0:	0019      	movs	r1, r3
   155a2:	2001      	movs	r0, #1
   155a4:	4b2a      	ldr	r3, [pc, #168]	; (15650 <store_file_packet+0x17c>)
   155a6:	4798      	blx	r3
            return;
   155a8:	e04c      	b.n	15644 <store_file_packet+0x170>
        }

        received_file_size = 0;
   155aa:	4b37      	ldr	r3, [pc, #220]	; (15688 <store_file_packet+0x1b4>)
   155ac:	2200      	movs	r2, #0
   155ae:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   155b0:	2008      	movs	r0, #8
   155b2:	4b33      	ldr	r3, [pc, #204]	; (15680 <store_file_packet+0x1ac>)
   155b4:	4798      	blx	r3
    }

    if (data != NULL) {
   155b6:	687b      	ldr	r3, [r7, #4]
   155b8:	2b00      	cmp	r3, #0
   155ba:	d043      	beq.n	15644 <store_file_packet+0x170>
        UINT wsize = 0;
   155bc:	2300      	movs	r3, #0
   155be:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   155c0:	2313      	movs	r3, #19
   155c2:	18fc      	adds	r4, r7, r3
   155c4:	230c      	movs	r3, #12
   155c6:	18fb      	adds	r3, r7, r3
   155c8:	683a      	ldr	r2, [r7, #0]
   155ca:	6879      	ldr	r1, [r7, #4]
   155cc:	4827      	ldr	r0, [pc, #156]	; (1566c <store_file_packet+0x198>)
   155ce:	4d2f      	ldr	r5, [pc, #188]	; (1568c <store_file_packet+0x1b8>)
   155d0:	47a8      	blx	r5
   155d2:	0003      	movs	r3, r0
   155d4:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   155d6:	2313      	movs	r3, #19
   155d8:	18fb      	adds	r3, r7, r3
   155da:	781b      	ldrb	r3, [r3, #0]
   155dc:	2b00      	cmp	r3, #0
   155de:	d00c      	beq.n	155fa <store_file_packet+0x126>
            f_close(&file_object);
   155e0:	4b22      	ldr	r3, [pc, #136]	; (1566c <store_file_packet+0x198>)
   155e2:	0018      	movs	r0, r3
   155e4:	4b2a      	ldr	r3, [pc, #168]	; (15690 <store_file_packet+0x1bc>)
   155e6:	4798      	blx	r3
            add_state(CANCELED);
   155e8:	2020      	movs	r0, #32
   155ea:	4b25      	ldr	r3, [pc, #148]	; (15680 <store_file_packet+0x1ac>)
   155ec:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   155ee:	4b29      	ldr	r3, [pc, #164]	; (15694 <store_file_packet+0x1c0>)
   155f0:	0019      	movs	r1, r3
   155f2:	2001      	movs	r0, #1
   155f4:	4b16      	ldr	r3, [pc, #88]	; (15650 <store_file_packet+0x17c>)
   155f6:	4798      	blx	r3
            return;
   155f8:	e024      	b.n	15644 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   155fa:	4b23      	ldr	r3, [pc, #140]	; (15688 <store_file_packet+0x1b4>)
   155fc:	681a      	ldr	r2, [r3, #0]
   155fe:	68fb      	ldr	r3, [r7, #12]
   15600:	18d2      	adds	r2, r2, r3
   15602:	4b21      	ldr	r3, [pc, #132]	; (15688 <store_file_packet+0x1b4>)
   15604:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15606:	4b20      	ldr	r3, [pc, #128]	; (15688 <store_file_packet+0x1b4>)
   15608:	681a      	ldr	r2, [r3, #0]
   1560a:	4b23      	ldr	r3, [pc, #140]	; (15698 <store_file_packet+0x1c4>)
   1560c:	681b      	ldr	r3, [r3, #0]
   1560e:	4923      	ldr	r1, [pc, #140]	; (1569c <store_file_packet+0x1c8>)
   15610:	2001      	movs	r0, #1
   15612:	4c0f      	ldr	r4, [pc, #60]	; (15650 <store_file_packet+0x17c>)
   15614:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   15616:	4b1c      	ldr	r3, [pc, #112]	; (15688 <store_file_packet+0x1b4>)
   15618:	681a      	ldr	r2, [r3, #0]
   1561a:	4b1f      	ldr	r3, [pc, #124]	; (15698 <store_file_packet+0x1c4>)
   1561c:	681b      	ldr	r3, [r3, #0]
   1561e:	429a      	cmp	r2, r3
   15620:	d310      	bcc.n	15644 <store_file_packet+0x170>
            f_close(&file_object);
   15622:	4b12      	ldr	r3, [pc, #72]	; (1566c <store_file_packet+0x198>)
   15624:	0018      	movs	r0, r3
   15626:	4b1a      	ldr	r3, [pc, #104]	; (15690 <store_file_packet+0x1bc>)
   15628:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   1562a:	4b1d      	ldr	r3, [pc, #116]	; (156a0 <store_file_packet+0x1cc>)
   1562c:	0019      	movs	r1, r3
   1562e:	2001      	movs	r0, #1
   15630:	4b07      	ldr	r3, [pc, #28]	; (15650 <store_file_packet+0x17c>)
   15632:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   15634:	2100      	movs	r1, #0
   15636:	2017      	movs	r0, #23
   15638:	4b1a      	ldr	r3, [pc, #104]	; (156a4 <store_file_packet+0x1d0>)
   1563a:	4798      	blx	r3
            add_state(COMPLETED);
   1563c:	2010      	movs	r0, #16
   1563e:	4b10      	ldr	r3, [pc, #64]	; (15680 <store_file_packet+0x1ac>)
   15640:	4798      	blx	r3
            return;
   15642:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   15644:	46bd      	mov	sp, r7
   15646:	b006      	add	sp, #24
   15648:	bdb0      	pop	{r4, r5, r7, pc}
   1564a:	46c0      	nop			; (mov r8, r8)
   1564c:	0003605c 	.word	0x0003605c
   15650:	0001cf21 	.word	0x0001cf21
   15654:	000150f1 	.word	0x000150f1
   15658:	200000a4 	.word	0x200000a4
   1565c:	0003605b 	.word	0x0003605b
   15660:	000349ab 	.word	0x000349ab
   15664:	200000a6 	.word	0x200000a6
   15668:	00034961 	.word	0x00034961
   1566c:	20000838 	.word	0x20000838
   15670:	00015175 	.word	0x00015175
   15674:	000360c0 	.word	0x000360c0
   15678:	0002cb5d 	.word	0x0002cb5d
   1567c:	00036080 	.word	0x00036080
   15680:	000150c9 	.word	0x000150c9
   15684:	000360e8 	.word	0x000360e8
   15688:	20000860 	.word	0x20000860
   1568c:	0002d08d 	.word	0x0002d08d
   15690:	0002d55d 	.word	0x0002d55d
   15694:	0003611c 	.word	0x0003611c
   15698:	2000085c 	.word	0x2000085c
   1569c:	00036158 	.word	0x00036158
   156a0:	0003618c 	.word	0x0003618c
   156a4:	0001502d 	.word	0x0001502d

000156a8 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   156a8:	b590      	push	{r4, r7, lr}
   156aa:	b085      	sub	sp, #20
   156ac:	af00      	add	r7, sp, #0
   156ae:	60f8      	str	r0, [r7, #12]
   156b0:	60b9      	str	r1, [r7, #8]
   156b2:	607a      	str	r2, [r7, #4]
    switch (type) {
   156b4:	68bb      	ldr	r3, [r7, #8]
   156b6:	2b04      	cmp	r3, #4
   156b8:	d900      	bls.n	156bc <http_client_callback+0x14>
   156ba:	e077      	b.n	157ac <http_client_callback+0x104>
   156bc:	68bb      	ldr	r3, [r7, #8]
   156be:	009a      	lsls	r2, r3, #2
   156c0:	4b3c      	ldr	r3, [pc, #240]	; (157b4 <http_client_callback+0x10c>)
   156c2:	18d3      	adds	r3, r2, r3
   156c4:	681b      	ldr	r3, [r3, #0]
   156c6:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   156c8:	4b3b      	ldr	r3, [pc, #236]	; (157b8 <http_client_callback+0x110>)
   156ca:	0019      	movs	r1, r3
   156cc:	2001      	movs	r0, #1
   156ce:	4b3b      	ldr	r3, [pc, #236]	; (157bc <http_client_callback+0x114>)
   156d0:	4798      	blx	r3
            break;
   156d2:	e06b      	b.n	157ac <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   156d4:	4b3a      	ldr	r3, [pc, #232]	; (157c0 <http_client_callback+0x118>)
   156d6:	0019      	movs	r1, r3
   156d8:	2001      	movs	r0, #1
   156da:	4b38      	ldr	r3, [pc, #224]	; (157bc <http_client_callback+0x114>)
   156dc:	4798      	blx	r3
            add_state(GET_REQUESTED);
   156de:	2004      	movs	r0, #4
   156e0:	4b38      	ldr	r3, [pc, #224]	; (157c4 <http_client_callback+0x11c>)
   156e2:	4798      	blx	r3
            break;
   156e4:	e062      	b.n	157ac <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   156e6:	687b      	ldr	r3, [r7, #4]
   156e8:	881b      	ldrh	r3, [r3, #0]
   156ea:	001a      	movs	r2, r3
   156ec:	687b      	ldr	r3, [r7, #4]
   156ee:	685b      	ldr	r3, [r3, #4]
   156f0:	4935      	ldr	r1, [pc, #212]	; (157c8 <http_client_callback+0x120>)
   156f2:	2001      	movs	r0, #1
   156f4:	4c31      	ldr	r4, [pc, #196]	; (157bc <http_client_callback+0x114>)
   156f6:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   156f8:	687b      	ldr	r3, [r7, #4]
   156fa:	881b      	ldrh	r3, [r3, #0]
   156fc:	2bc8      	cmp	r3, #200	; 0xc8
   156fe:	d10d      	bne.n	1571c <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   15700:	687b      	ldr	r3, [r7, #4]
   15702:	685a      	ldr	r2, [r3, #4]
   15704:	4b31      	ldr	r3, [pc, #196]	; (157cc <http_client_callback+0x124>)
   15706:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   15708:	4b31      	ldr	r3, [pc, #196]	; (157d0 <http_client_callback+0x128>)
   1570a:	2200      	movs	r2, #0
   1570c:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   1570e:	687b      	ldr	r3, [r7, #4]
   15710:	685a      	ldr	r2, [r3, #4]
   15712:	2380      	movs	r3, #128	; 0x80
   15714:	009b      	lsls	r3, r3, #2
   15716:	429a      	cmp	r2, r3
   15718:	d843      	bhi.n	157a2 <http_client_callback+0xfa>
   1571a:	e003      	b.n	15724 <http_client_callback+0x7c>
                add_state(CANCELED);
   1571c:	2020      	movs	r0, #32
   1571e:	4b29      	ldr	r3, [pc, #164]	; (157c4 <http_client_callback+0x11c>)
   15720:	4798      	blx	r3
                return;
   15722:	e043      	b.n	157ac <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   15724:	687b      	ldr	r3, [r7, #4]
   15726:	689a      	ldr	r2, [r3, #8]
   15728:	687b      	ldr	r3, [r7, #4]
   1572a:	685b      	ldr	r3, [r3, #4]
   1572c:	0019      	movs	r1, r3
   1572e:	0010      	movs	r0, r2
   15730:	4b28      	ldr	r3, [pc, #160]	; (157d4 <http_client_callback+0x12c>)
   15732:	4798      	blx	r3
                add_state(COMPLETED);
   15734:	2010      	movs	r0, #16
   15736:	4b23      	ldr	r3, [pc, #140]	; (157c4 <http_client_callback+0x11c>)
   15738:	4798      	blx	r3
            }
            break;
   1573a:	e032      	b.n	157a2 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   1573c:	687b      	ldr	r3, [r7, #4]
   1573e:	685a      	ldr	r2, [r3, #4]
   15740:	687b      	ldr	r3, [r7, #4]
   15742:	681b      	ldr	r3, [r3, #0]
   15744:	0019      	movs	r1, r3
   15746:	0010      	movs	r0, r2
   15748:	4b22      	ldr	r3, [pc, #136]	; (157d4 <http_client_callback+0x12c>)
   1574a:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   1574c:	687b      	ldr	r3, [r7, #4]
   1574e:	7a1b      	ldrb	r3, [r3, #8]
   15750:	2b00      	cmp	r3, #0
   15752:	d028      	beq.n	157a6 <http_client_callback+0xfe>
                add_state(COMPLETED);
   15754:	2010      	movs	r0, #16
   15756:	4b1b      	ldr	r3, [pc, #108]	; (157c4 <http_client_callback+0x11c>)
   15758:	4798      	blx	r3
            }

            break;
   1575a:	e024      	b.n	157a6 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   1575c:	687b      	ldr	r3, [r7, #4]
   1575e:	681a      	ldr	r2, [r3, #0]
   15760:	4b1d      	ldr	r3, [pc, #116]	; (157d8 <http_client_callback+0x130>)
   15762:	0019      	movs	r1, r3
   15764:	2001      	movs	r0, #1
   15766:	4b15      	ldr	r3, [pc, #84]	; (157bc <http_client_callback+0x114>)
   15768:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   1576a:	687b      	ldr	r3, [r7, #4]
   1576c:	681b      	ldr	r3, [r3, #0]
   1576e:	330b      	adds	r3, #11
   15770:	d11b      	bne.n	157aa <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   15772:	2008      	movs	r0, #8
   15774:	4b19      	ldr	r3, [pc, #100]	; (157dc <http_client_callback+0x134>)
   15776:	4798      	blx	r3
   15778:	1e03      	subs	r3, r0, #0
   1577a:	d006      	beq.n	1578a <http_client_callback+0xe2>
                    f_close(&file_object);
   1577c:	4b18      	ldr	r3, [pc, #96]	; (157e0 <http_client_callback+0x138>)
   1577e:	0018      	movs	r0, r3
   15780:	4b18      	ldr	r3, [pc, #96]	; (157e4 <http_client_callback+0x13c>)
   15782:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   15784:	2008      	movs	r0, #8
   15786:	4b18      	ldr	r3, [pc, #96]	; (157e8 <http_client_callback+0x140>)
   15788:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   1578a:	2004      	movs	r0, #4
   1578c:	4b13      	ldr	r3, [pc, #76]	; (157dc <http_client_callback+0x134>)
   1578e:	4798      	blx	r3
   15790:	1e03      	subs	r3, r0, #0
   15792:	d002      	beq.n	1579a <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   15794:	2004      	movs	r0, #4
   15796:	4b14      	ldr	r3, [pc, #80]	; (157e8 <http_client_callback+0x140>)
   15798:	4798      	blx	r3
                }

                start_download();
   1579a:	4b14      	ldr	r3, [pc, #80]	; (157ec <http_client_callback+0x144>)
   1579c:	4798      	blx	r3
            }

            break;
   1579e:	46c0      	nop			; (mov r8, r8)
   157a0:	e003      	b.n	157aa <http_client_callback+0x102>
            break;
   157a2:	46c0      	nop			; (mov r8, r8)
   157a4:	e002      	b.n	157ac <http_client_callback+0x104>
            break;
   157a6:	46c0      	nop			; (mov r8, r8)
   157a8:	e000      	b.n	157ac <http_client_callback+0x104>
            break;
   157aa:	46c0      	nop			; (mov r8, r8)
    }
}
   157ac:	46bd      	mov	sp, r7
   157ae:	b005      	add	sp, #20
   157b0:	bd90      	pop	{r4, r7, pc}
   157b2:	46c0      	nop			; (mov r8, r8)
   157b4:	000367fc 	.word	0x000367fc
   157b8:	000361c0 	.word	0x000361c0
   157bc:	0001cf21 	.word	0x0001cf21
   157c0:	000361f8 	.word	0x000361f8
   157c4:	000150c9 	.word	0x000150c9
   157c8:	00036224 	.word	0x00036224
   157cc:	2000085c 	.word	0x2000085c
   157d0:	20000860 	.word	0x20000860
   157d4:	000154d5 	.word	0x000154d5
   157d8:	00036260 	.word	0x00036260
   157dc:	000150f1 	.word	0x000150f1
   157e0:	20000838 	.word	0x20000838
   157e4:	0002d55d 	.word	0x0002d55d
   157e8:	00015095 	.word	0x00015095
   157ec:	00015419 	.word	0x00015419

000157f0 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   157f0:	b580      	push	{r7, lr}
   157f2:	b082      	sub	sp, #8
   157f4:	af00      	add	r7, sp, #0
   157f6:	603a      	str	r2, [r7, #0]
   157f8:	1dfb      	adds	r3, r7, #7
   157fa:	1c02      	adds	r2, r0, #0
   157fc:	701a      	strb	r2, [r3, #0]
   157fe:	1dbb      	adds	r3, r7, #6
   15800:	1c0a      	adds	r2, r1, #0
   15802:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   15804:	683a      	ldr	r2, [r7, #0]
   15806:	1dbb      	adds	r3, r7, #6
   15808:	7819      	ldrb	r1, [r3, #0]
   1580a:	1dfb      	adds	r3, r7, #7
   1580c:	781b      	ldrb	r3, [r3, #0]
   1580e:	b25b      	sxtb	r3, r3
   15810:	0018      	movs	r0, r3
   15812:	4b03      	ldr	r3, [pc, #12]	; (15820 <socket_cb+0x30>)
   15814:	4798      	blx	r3
}
   15816:	46c0      	nop			; (mov r8, r8)
   15818:	46bd      	mov	sp, r7
   1581a:	b002      	add	sp, #8
   1581c:	bd80      	pop	{r7, pc}
   1581e:	46c0      	nop			; (mov r8, r8)
   15820:	0002fec1 	.word	0x0002fec1

00015824 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   15824:	b5b0      	push	{r4, r5, r7, lr}
   15826:	b086      	sub	sp, #24
   15828:	af04      	add	r7, sp, #16
   1582a:	6078      	str	r0, [r7, #4]
   1582c:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   1582e:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   15830:	22ff      	movs	r2, #255	; 0xff
   15832:	4013      	ands	r3, r2
   15834:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   15836:	683b      	ldr	r3, [r7, #0]
   15838:	0a1b      	lsrs	r3, r3, #8
   1583a:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   1583c:	23ff      	movs	r3, #255	; 0xff
   1583e:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   15840:	683a      	ldr	r2, [r7, #0]
   15842:	0c12      	lsrs	r2, r2, #16
   15844:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   15846:	22ff      	movs	r2, #255	; 0xff
   15848:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   1584a:	6839      	ldr	r1, [r7, #0]
   1584c:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1584e:	000d      	movs	r5, r1
   15850:	6878      	ldr	r0, [r7, #4]
   15852:	4909      	ldr	r1, [pc, #36]	; (15878 <resolve_cb+0x54>)
   15854:	9502      	str	r5, [sp, #8]
   15856:	9201      	str	r2, [sp, #4]
   15858:	9300      	str	r3, [sp, #0]
   1585a:	0023      	movs	r3, r4
   1585c:	0002      	movs	r2, r0
   1585e:	2001      	movs	r0, #1
   15860:	4c06      	ldr	r4, [pc, #24]	; (1587c <resolve_cb+0x58>)
   15862:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   15864:	683a      	ldr	r2, [r7, #0]
   15866:	687b      	ldr	r3, [r7, #4]
   15868:	0011      	movs	r1, r2
   1586a:	0018      	movs	r0, r3
   1586c:	4b04      	ldr	r3, [pc, #16]	; (15880 <resolve_cb+0x5c>)
   1586e:	4798      	blx	r3
}
   15870:	46c0      	nop			; (mov r8, r8)
   15872:	46bd      	mov	sp, r7
   15874:	b002      	add	sp, #8
   15876:	bdb0      	pop	{r4, r5, r7, pc}
   15878:	00036290 	.word	0x00036290
   1587c:	0001cf21 	.word	0x0001cf21
   15880:	00030025 	.word	0x00030025

00015884 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   15884:	b590      	push	{r4, r7, lr}
   15886:	b087      	sub	sp, #28
   15888:	af02      	add	r7, sp, #8
   1588a:	0002      	movs	r2, r0
   1588c:	6039      	str	r1, [r7, #0]
   1588e:	1dfb      	adds	r3, r7, #7
   15890:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   15892:	1dfb      	adds	r3, r7, #7
   15894:	781b      	ldrb	r3, [r3, #0]
   15896:	2b2c      	cmp	r3, #44	; 0x2c
   15898:	d002      	beq.n	158a0 <wifi_cb+0x1c>
   1589a:	2b32      	cmp	r3, #50	; 0x32
   1589c:	d03d      	beq.n	1591a <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1589e:	e06f      	b.n	15980 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   158a0:	683b      	ldr	r3, [r7, #0]
   158a2:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   158a4:	68fb      	ldr	r3, [r7, #12]
   158a6:	781b      	ldrb	r3, [r3, #0]
   158a8:	2b01      	cmp	r3, #1
   158aa:	d107      	bne.n	158bc <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   158ac:	4b36      	ldr	r3, [pc, #216]	; (15988 <wifi_cb+0x104>)
   158ae:	0019      	movs	r1, r3
   158b0:	2001      	movs	r0, #1
   158b2:	4b36      	ldr	r3, [pc, #216]	; (1598c <wifi_cb+0x108>)
   158b4:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   158b6:	4b36      	ldr	r3, [pc, #216]	; (15990 <wifi_cb+0x10c>)
   158b8:	4798      	blx	r3
            break;
   158ba:	e05e      	b.n	1597a <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   158bc:	68fb      	ldr	r3, [r7, #12]
   158be:	781b      	ldrb	r3, [r3, #0]
   158c0:	2b00      	cmp	r3, #0
   158c2:	d15a      	bne.n	1597a <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   158c4:	4b33      	ldr	r3, [pc, #204]	; (15994 <wifi_cb+0x110>)
   158c6:	0019      	movs	r1, r3
   158c8:	2001      	movs	r0, #1
   158ca:	4b30      	ldr	r3, [pc, #192]	; (1598c <wifi_cb+0x108>)
   158cc:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   158ce:	2002      	movs	r0, #2
   158d0:	4b31      	ldr	r3, [pc, #196]	; (15998 <wifi_cb+0x114>)
   158d2:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   158d4:	2008      	movs	r0, #8
   158d6:	4b31      	ldr	r3, [pc, #196]	; (1599c <wifi_cb+0x118>)
   158d8:	4798      	blx	r3
   158da:	1e03      	subs	r3, r0, #0
   158dc:	d006      	beq.n	158ec <wifi_cb+0x68>
                    f_close(&file_object);
   158de:	4b30      	ldr	r3, [pc, #192]	; (159a0 <wifi_cb+0x11c>)
   158e0:	0018      	movs	r0, r3
   158e2:	4b30      	ldr	r3, [pc, #192]	; (159a4 <wifi_cb+0x120>)
   158e4:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   158e6:	2008      	movs	r0, #8
   158e8:	4b2b      	ldr	r3, [pc, #172]	; (15998 <wifi_cb+0x114>)
   158ea:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   158ec:	2004      	movs	r0, #4
   158ee:	4b2b      	ldr	r3, [pc, #172]	; (1599c <wifi_cb+0x118>)
   158f0:	4798      	blx	r3
   158f2:	1e03      	subs	r3, r0, #0
   158f4:	d002      	beq.n	158fc <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   158f6:	2004      	movs	r0, #4
   158f8:	4b27      	ldr	r3, [pc, #156]	; (15998 <wifi_cb+0x114>)
   158fa:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   158fc:	4b2a      	ldr	r3, [pc, #168]	; (159a8 <wifi_cb+0x124>)
   158fe:	2101      	movs	r1, #1
   15900:	0018      	movs	r0, r3
   15902:	4b2a      	ldr	r3, [pc, #168]	; (159ac <wifi_cb+0x128>)
   15904:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15906:	4a2a      	ldr	r2, [pc, #168]	; (159b0 <wifi_cb+0x12c>)
   15908:	482a      	ldr	r0, [pc, #168]	; (159b4 <wifi_cb+0x130>)
   1590a:	23ff      	movs	r3, #255	; 0xff
   1590c:	9300      	str	r3, [sp, #0]
   1590e:	0013      	movs	r3, r2
   15910:	2202      	movs	r2, #2
   15912:	2102      	movs	r1, #2
   15914:	4c28      	ldr	r4, [pc, #160]	; (159b8 <wifi_cb+0x134>)
   15916:	47a0      	blx	r4
            break;
   15918:	e02f      	b.n	1597a <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   1591a:	683b      	ldr	r3, [r7, #0]
   1591c:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1591e:	68bb      	ldr	r3, [r7, #8]
   15920:	781b      	ldrb	r3, [r3, #0]
   15922:	0018      	movs	r0, r3
   15924:	68bb      	ldr	r3, [r7, #8]
   15926:	3301      	adds	r3, #1
   15928:	781b      	ldrb	r3, [r3, #0]
   1592a:	001c      	movs	r4, r3
   1592c:	68bb      	ldr	r3, [r7, #8]
   1592e:	3302      	adds	r3, #2
   15930:	781b      	ldrb	r3, [r3, #0]
   15932:	001a      	movs	r2, r3
   15934:	68bb      	ldr	r3, [r7, #8]
   15936:	3303      	adds	r3, #3
   15938:	781b      	ldrb	r3, [r3, #0]
   1593a:	4920      	ldr	r1, [pc, #128]	; (159bc <wifi_cb+0x138>)
   1593c:	9301      	str	r3, [sp, #4]
   1593e:	9200      	str	r2, [sp, #0]
   15940:	0023      	movs	r3, r4
   15942:	0002      	movs	r2, r0
   15944:	2001      	movs	r0, #1
   15946:	4c11      	ldr	r4, [pc, #68]	; (1598c <wifi_cb+0x108>)
   15948:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   1594a:	2002      	movs	r0, #2
   1594c:	4b1c      	ldr	r3, [pc, #112]	; (159c0 <wifi_cb+0x13c>)
   1594e:	4798      	blx	r3
            if (do_download_flag == 1) {
   15950:	4b1c      	ldr	r3, [pc, #112]	; (159c4 <wifi_cb+0x140>)
   15952:	781b      	ldrb	r3, [r3, #0]
   15954:	2b01      	cmp	r3, #1
   15956:	d102      	bne.n	1595e <wifi_cb+0xda>
                start_download();
   15958:	4b1b      	ldr	r3, [pc, #108]	; (159c8 <wifi_cb+0x144>)
   1595a:	4798      	blx	r3
        } break;
   1595c:	e00f      	b.n	1597e <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1595e:	4a1b      	ldr	r2, [pc, #108]	; (159cc <wifi_cb+0x148>)
   15960:	4b11      	ldr	r3, [pc, #68]	; (159a8 <wifi_cb+0x124>)
   15962:	0011      	movs	r1, r2
   15964:	0018      	movs	r0, r3
   15966:	4b1a      	ldr	r3, [pc, #104]	; (159d0 <wifi_cb+0x14c>)
   15968:	4798      	blx	r3
   1596a:	1e03      	subs	r3, r0, #0
   1596c:	d007      	beq.n	1597e <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1596e:	4b19      	ldr	r3, [pc, #100]	; (159d4 <wifi_cb+0x150>)
   15970:	0019      	movs	r1, r3
   15972:	2001      	movs	r0, #1
   15974:	4b05      	ldr	r3, [pc, #20]	; (1598c <wifi_cb+0x108>)
   15976:	4798      	blx	r3
        } break;
   15978:	e001      	b.n	1597e <wifi_cb+0xfa>
            break;
   1597a:	46c0      	nop			; (mov r8, r8)
   1597c:	e000      	b.n	15980 <wifi_cb+0xfc>
        } break;
   1597e:	46c0      	nop			; (mov r8, r8)
    }
}
   15980:	46c0      	nop			; (mov r8, r8)
   15982:	46bd      	mov	sp, r7
   15984:	b005      	add	sp, #20
   15986:	bd90      	pop	{r4, r7, pc}
   15988:	000362c0 	.word	0x000362c0
   1598c:	0001cf21 	.word	0x0001cf21
   15990:	00021565 	.word	0x00021565
   15994:	000362e0 	.word	0x000362e0
   15998:	00015095 	.word	0x00015095
   1599c:	000150f1 	.word	0x000150f1
   159a0:	20000838 	.word	0x20000838
   159a4:	0002d55d 	.word	0x0002d55d
   159a8:	20000864 	.word	0x20000864
   159ac:	0002eb6d 	.word	0x0002eb6d
   159b0:	00036304 	.word	0x00036304
   159b4:	00036310 	.word	0x00036310
   159b8:	00021091 	.word	0x00021091
   159bc:	00036314 	.word	0x00036314
   159c0:	000150c9 	.word	0x000150c9
   159c4:	20000604 	.word	0x20000604
   159c8:	00015419 	.word	0x00015419
   159cc:	00035f44 	.word	0x00035f44
   159d0:	0002ea39 	.word	0x0002ea39
   159d4:	0003633c 	.word	0x0003633c

000159d8 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   159d8:	b590      	push	{r4, r7, lr}
   159da:	b083      	sub	sp, #12
   159dc:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   159de:	4b29      	ldr	r3, [pc, #164]	; (15a84 <init_storage+0xac>)
   159e0:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   159e2:	4b29      	ldr	r3, [pc, #164]	; (15a88 <init_storage+0xb0>)
   159e4:	0019      	movs	r1, r3
   159e6:	2001      	movs	r0, #1
   159e8:	4b28      	ldr	r3, [pc, #160]	; (15a8c <init_storage+0xb4>)
   159ea:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   159ec:	1dfc      	adds	r4, r7, #7
   159ee:	2000      	movs	r0, #0
   159f0:	4b27      	ldr	r3, [pc, #156]	; (15a90 <init_storage+0xb8>)
   159f2:	4798      	blx	r3
   159f4:	0003      	movs	r3, r0
   159f6:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   159f8:	1dfb      	adds	r3, r7, #7
   159fa:	781b      	ldrb	r3, [r3, #0]
   159fc:	2b01      	cmp	r3, #1
   159fe:	d110      	bne.n	15a22 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   15a00:	4b24      	ldr	r3, [pc, #144]	; (15a94 <init_storage+0xbc>)
   15a02:	0019      	movs	r1, r3
   15a04:	2001      	movs	r0, #1
   15a06:	4b21      	ldr	r3, [pc, #132]	; (15a8c <init_storage+0xb4>)
   15a08:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   15a0a:	4b23      	ldr	r3, [pc, #140]	; (15a98 <init_storage+0xc0>)
   15a0c:	0019      	movs	r1, r3
   15a0e:	2001      	movs	r0, #1
   15a10:	4b1e      	ldr	r3, [pc, #120]	; (15a8c <init_storage+0xb4>)
   15a12:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   15a14:	46c0      	nop			; (mov r8, r8)
   15a16:	2000      	movs	r0, #0
   15a18:	4b20      	ldr	r3, [pc, #128]	; (15a9c <init_storage+0xc4>)
   15a1a:	4798      	blx	r3
   15a1c:	0003      	movs	r3, r0
   15a1e:	2b02      	cmp	r3, #2
   15a20:	d1f9      	bne.n	15a16 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   15a22:	1dfb      	adds	r3, r7, #7
   15a24:	781b      	ldrb	r3, [r3, #0]
   15a26:	2b00      	cmp	r3, #0
   15a28:	d1e0      	bne.n	159ec <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   15a2a:	4b1d      	ldr	r3, [pc, #116]	; (15aa0 <init_storage+0xc8>)
   15a2c:	0019      	movs	r1, r3
   15a2e:	2001      	movs	r0, #1
   15a30:	4b16      	ldr	r3, [pc, #88]	; (15a8c <init_storage+0xb4>)
   15a32:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   15a34:	238c      	movs	r3, #140	; 0x8c
   15a36:	009a      	lsls	r2, r3, #2
   15a38:	4b1a      	ldr	r3, [pc, #104]	; (15aa4 <init_storage+0xcc>)
   15a3a:	2100      	movs	r1, #0
   15a3c:	0018      	movs	r0, r3
   15a3e:	4b1a      	ldr	r3, [pc, #104]	; (15aa8 <init_storage+0xd0>)
   15a40:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   15a42:	1dbc      	adds	r4, r7, #6
   15a44:	4b17      	ldr	r3, [pc, #92]	; (15aa4 <init_storage+0xcc>)
   15a46:	0019      	movs	r1, r3
   15a48:	2000      	movs	r0, #0
   15a4a:	4b18      	ldr	r3, [pc, #96]	; (15aac <init_storage+0xd4>)
   15a4c:	4798      	blx	r3
   15a4e:	0003      	movs	r3, r0
   15a50:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   15a52:	1dbb      	adds	r3, r7, #6
   15a54:	781b      	ldrb	r3, [r3, #0]
   15a56:	2b0b      	cmp	r3, #11
   15a58:	d107      	bne.n	15a6a <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   15a5a:	1dbb      	adds	r3, r7, #6
   15a5c:	781a      	ldrb	r2, [r3, #0]
   15a5e:	4b14      	ldr	r3, [pc, #80]	; (15ab0 <init_storage+0xd8>)
   15a60:	0019      	movs	r1, r3
   15a62:	2001      	movs	r0, #1
   15a64:	4b09      	ldr	r3, [pc, #36]	; (15a8c <init_storage+0xb4>)
   15a66:	4798      	blx	r3
            return;
   15a68:	e008      	b.n	15a7c <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   15a6a:	4b12      	ldr	r3, [pc, #72]	; (15ab4 <init_storage+0xdc>)
   15a6c:	0019      	movs	r1, r3
   15a6e:	2001      	movs	r0, #1
   15a70:	4b06      	ldr	r3, [pc, #24]	; (15a8c <init_storage+0xb4>)
   15a72:	4798      	blx	r3
        add_state(STORAGE_READY);
   15a74:	2001      	movs	r0, #1
   15a76:	4b10      	ldr	r3, [pc, #64]	; (15ab8 <init_storage+0xe0>)
   15a78:	4798      	blx	r3
        return;
   15a7a:	46c0      	nop			; (mov r8, r8)
    }
}
   15a7c:	46bd      	mov	sp, r7
   15a7e:	b003      	add	sp, #12
   15a80:	bd90      	pop	{r4, r7, pc}
   15a82:	46c0      	nop			; (mov r8, r8)
   15a84:	0001dd39 	.word	0x0001dd39
   15a88:	00036360 	.word	0x00036360
   15a8c:	0001cf21 	.word	0x0001cf21
   15a90:	0001e215 	.word	0x0001e215
   15a94:	00036398 	.word	0x00036398
   15a98:	000363c0 	.word	0x000363c0
   15a9c:	0001dd89 	.word	0x0001dd89
   15aa0:	000363f4 	.word	0x000363f4
   15aa4:	20000608 	.word	0x20000608
   15aa8:	0003460f 	.word	0x0003460f
   15aac:	0002cb05 	.word	0x0002cb05
   15ab0:	00036418 	.word	0x00036418
   15ab4:	00036448 	.word	0x00036448
   15ab8:	000150c9 	.word	0x000150c9

00015abc <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   15abc:	b580      	push	{r7, lr}
   15abe:	b082      	sub	sp, #8
   15ac0:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15ac2:	1d3b      	adds	r3, r7, #4
   15ac4:	0018      	movs	r0, r3
   15ac6:	4b08      	ldr	r3, [pc, #32]	; (15ae8 <configure_timer+0x2c>)
   15ac8:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   15aca:	1d3a      	adds	r2, r7, #4
   15acc:	4b07      	ldr	r3, [pc, #28]	; (15aec <configure_timer+0x30>)
   15ace:	0011      	movs	r1, r2
   15ad0:	0018      	movs	r0, r3
   15ad2:	4b07      	ldr	r3, [pc, #28]	; (15af0 <configure_timer+0x34>)
   15ad4:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15ad6:	4b05      	ldr	r3, [pc, #20]	; (15aec <configure_timer+0x30>)
   15ad8:	0018      	movs	r0, r3
   15ada:	4b06      	ldr	r3, [pc, #24]	; (15af4 <configure_timer+0x38>)
   15adc:	4798      	blx	r3
}
   15ade:	46c0      	nop			; (mov r8, r8)
   15ae0:	46bd      	mov	sp, r7
   15ae2:	b002      	add	sp, #8
   15ae4:	bd80      	pop	{r7, pc}
   15ae6:	46c0      	nop			; (mov r8, r8)
   15ae8:	00031655 	.word	0x00031655
   15aec:	20004874 	.word	0x20004874
   15af0:	00031679 	.word	0x00031679
   15af4:	00031765 	.word	0x00031765

00015af8 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15af8:	b580      	push	{r7, lr}
   15afa:	b088      	sub	sp, #32
   15afc:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   15afe:	003b      	movs	r3, r7
   15b00:	0018      	movs	r0, r3
   15b02:	4b12      	ldr	r3, [pc, #72]	; (15b4c <configure_http_client+0x54>)
   15b04:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15b06:	003b      	movs	r3, r7
   15b08:	2280      	movs	r2, #128	; 0x80
   15b0a:	0092      	lsls	r2, r2, #2
   15b0c:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15b0e:	003b      	movs	r3, r7
   15b10:	4a0f      	ldr	r2, [pc, #60]	; (15b50 <configure_http_client+0x58>)
   15b12:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15b14:	003a      	movs	r2, r7
   15b16:	4b0f      	ldr	r3, [pc, #60]	; (15b54 <configure_http_client+0x5c>)
   15b18:	0011      	movs	r1, r2
   15b1a:	0018      	movs	r0, r3
   15b1c:	4b0e      	ldr	r3, [pc, #56]	; (15b58 <configure_http_client+0x60>)
   15b1e:	4798      	blx	r3
   15b20:	0003      	movs	r3, r0
   15b22:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   15b24:	69fb      	ldr	r3, [r7, #28]
   15b26:	2b00      	cmp	r3, #0
   15b28:	da06      	bge.n	15b38 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15b2a:	69fa      	ldr	r2, [r7, #28]
   15b2c:	4b0b      	ldr	r3, [pc, #44]	; (15b5c <configure_http_client+0x64>)
   15b2e:	0019      	movs	r1, r3
   15b30:	2001      	movs	r0, #1
   15b32:	4b0b      	ldr	r3, [pc, #44]	; (15b60 <configure_http_client+0x68>)
   15b34:	4798      	blx	r3
        while (1) {
   15b36:	e7fe      	b.n	15b36 <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   15b38:	4a0a      	ldr	r2, [pc, #40]	; (15b64 <configure_http_client+0x6c>)
   15b3a:	4b06      	ldr	r3, [pc, #24]	; (15b54 <configure_http_client+0x5c>)
   15b3c:	0011      	movs	r1, r2
   15b3e:	0018      	movs	r0, r3
   15b40:	4b09      	ldr	r3, [pc, #36]	; (15b68 <configure_http_client+0x70>)
   15b42:	4798      	blx	r3
}
   15b44:	46c0      	nop			; (mov r8, r8)
   15b46:	46bd      	mov	sp, r7
   15b48:	b008      	add	sp, #32
   15b4a:	bd80      	pop	{r7, pc}
   15b4c:	0002fce9 	.word	0x0002fce9
   15b50:	20004874 	.word	0x20004874
   15b54:	200048cc 	.word	0x200048cc
   15b58:	0002fd35 	.word	0x0002fd35
   15b5c:	0003646c 	.word	0x0003646c
   15b60:	0001cf21 	.word	0x0001cf21
   15b64:	000156a9 	.word	0x000156a9
   15b68:	0002fe21 	.word	0x0002fe21

00015b6c <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15b6c:	b580      	push	{r7, lr}
   15b6e:	b082      	sub	sp, #8
   15b70:	af00      	add	r7, sp, #0
   15b72:	603a      	str	r2, [r7, #0]
   15b74:	1dfb      	adds	r3, r7, #7
   15b76:	1c02      	adds	r2, r0, #0
   15b78:	701a      	strb	r2, [r3, #0]
   15b7a:	1dbb      	adds	r3, r7, #6
   15b7c:	1c0a      	adds	r2, r1, #0
   15b7e:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   15b80:	683a      	ldr	r2, [r7, #0]
   15b82:	1dbb      	adds	r3, r7, #6
   15b84:	7819      	ldrb	r1, [r3, #0]
   15b86:	1dfb      	adds	r3, r7, #7
   15b88:	781b      	ldrb	r3, [r3, #0]
   15b8a:	b25b      	sxtb	r3, r3
   15b8c:	0018      	movs	r0, r3
   15b8e:	4b03      	ldr	r3, [pc, #12]	; (15b9c <socket_event_handler+0x30>)
   15b90:	4798      	blx	r3
}
   15b92:	46c0      	nop			; (mov r8, r8)
   15b94:	46bd      	mov	sp, r7
   15b96:	b002      	add	sp, #8
   15b98:	bd80      	pop	{r7, pc}
   15b9a:	46c0      	nop			; (mov r8, r8)
   15b9c:	0002e9e1 	.word	0x0002e9e1

00015ba0 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15ba0:	b580      	push	{r7, lr}
   15ba2:	b082      	sub	sp, #8
   15ba4:	af00      	add	r7, sp, #0
   15ba6:	6078      	str	r0, [r7, #4]
   15ba8:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   15baa:	683a      	ldr	r2, [r7, #0]
   15bac:	687b      	ldr	r3, [r7, #4]
   15bae:	0011      	movs	r1, r2
   15bb0:	0018      	movs	r0, r3
   15bb2:	4b03      	ldr	r3, [pc, #12]	; (15bc0 <socket_resolve_handler+0x20>)
   15bb4:	4798      	blx	r3
}
   15bb6:	46c0      	nop			; (mov r8, r8)
   15bb8:	46bd      	mov	sp, r7
   15bba:	b002      	add	sp, #8
   15bbc:	bd80      	pop	{r7, pc}
   15bbe:	46c0      	nop			; (mov r8, r8)
   15bc0:	0002ea15 	.word	0x0002ea15

00015bc4 <SubscribeHandlerServo>:
        }
    }
}

void SubscribeHandlerServo(MessageData *msgData)
{
   15bc4:	b590      	push	{r4, r7, lr}
   15bc6:	b083      	sub	sp, #12
   15bc8:	af00      	add	r7, sp, #0
   15bca:	6078      	str	r0, [r7, #4]
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   15bcc:	687b      	ldr	r3, [r7, #4]
   15bce:	685b      	ldr	r3, [r3, #4]
   15bd0:	685a      	ldr	r2, [r3, #4]
   15bd2:	687b      	ldr	r3, [r7, #4]
   15bd4:	685b      	ldr	r3, [r3, #4]
   15bd6:	689b      	ldr	r3, [r3, #8]
   15bd8:	4920      	ldr	r1, [pc, #128]	; (15c5c <SubscribeHandlerServo+0x98>)
   15bda:	2001      	movs	r0, #1
   15bdc:	4c20      	ldr	r4, [pc, #128]	; (15c60 <SubscribeHandlerServo+0x9c>)
   15bde:	47a0      	blx	r4
	LogMessage(LOG_DEBUG_LVL, " >> ");
   15be0:	4b20      	ldr	r3, [pc, #128]	; (15c64 <SubscribeHandlerServo+0xa0>)
   15be2:	0019      	movs	r1, r3
   15be4:	2001      	movs	r0, #1
   15be6:	4b1e      	ldr	r3, [pc, #120]	; (15c60 <SubscribeHandlerServo+0x9c>)
   15be8:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   15bea:	687b      	ldr	r3, [r7, #4]
   15bec:	681b      	ldr	r3, [r3, #0]
   15bee:	68da      	ldr	r2, [r3, #12]
   15bf0:	687b      	ldr	r3, [r7, #4]
   15bf2:	681b      	ldr	r3, [r3, #0]
   15bf4:	689b      	ldr	r3, [r3, #8]
   15bf6:	491c      	ldr	r1, [pc, #112]	; (15c68 <SubscribeHandlerServo+0xa4>)
   15bf8:	2001      	movs	r0, #1
   15bfa:	4c19      	ldr	r4, [pc, #100]	; (15c60 <SubscribeHandlerServo+0x9c>)
   15bfc:	47a0      	blx	r4

	// Handle LedData message
	if (strncmp((char *)msgData->topicName->lenstring.data, SERVO_TOPIC, msgData->message->payloadlen) == 0) {
   15bfe:	687b      	ldr	r3, [r7, #4]
   15c00:	685b      	ldr	r3, [r3, #4]
   15c02:	6898      	ldr	r0, [r3, #8]
   15c04:	687b      	ldr	r3, [r7, #4]
   15c06:	681b      	ldr	r3, [r3, #0]
   15c08:	68da      	ldr	r2, [r3, #12]
   15c0a:	4b18      	ldr	r3, [pc, #96]	; (15c6c <SubscribeHandlerServo+0xa8>)
   15c0c:	0019      	movs	r1, r3
   15c0e:	4b18      	ldr	r3, [pc, #96]	; (15c70 <SubscribeHandlerServo+0xac>)
   15c10:	4798      	blx	r3
   15c12:	1e03      	subs	r3, r0, #0
   15c14:	d11e      	bne.n	15c54 <SubscribeHandlerServo+0x90>
		if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   15c16:	687b      	ldr	r3, [r7, #4]
   15c18:	681b      	ldr	r3, [r3, #0]
   15c1a:	6898      	ldr	r0, [r3, #8]
   15c1c:	687b      	ldr	r3, [r7, #4]
   15c1e:	681b      	ldr	r3, [r3, #0]
   15c20:	68da      	ldr	r2, [r3, #12]
   15c22:	4b14      	ldr	r3, [pc, #80]	; (15c74 <SubscribeHandlerServo+0xb0>)
   15c24:	0019      	movs	r1, r3
   15c26:	4b12      	ldr	r3, [pc, #72]	; (15c70 <SubscribeHandlerServo+0xac>)
   15c28:	4798      	blx	r3
   15c2a:	1e03      	subs	r3, r0, #0
   15c2c:	d103      	bne.n	15c36 <SubscribeHandlerServo+0x72>
			servo_setDuty(2);
   15c2e:	2002      	movs	r0, #2
   15c30:	4b11      	ldr	r3, [pc, #68]	; (15c78 <SubscribeHandlerServo+0xb4>)
   15c32:	4798      	blx	r3
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
			servo_setDuty(3);
			//servo_sub_flag = 1;
		}
	}
}
   15c34:	e00e      	b.n	15c54 <SubscribeHandlerServo+0x90>
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   15c36:	687b      	ldr	r3, [r7, #4]
   15c38:	681b      	ldr	r3, [r3, #0]
   15c3a:	6898      	ldr	r0, [r3, #8]
   15c3c:	687b      	ldr	r3, [r7, #4]
   15c3e:	681b      	ldr	r3, [r3, #0]
   15c40:	68da      	ldr	r2, [r3, #12]
   15c42:	4b0e      	ldr	r3, [pc, #56]	; (15c7c <SubscribeHandlerServo+0xb8>)
   15c44:	0019      	movs	r1, r3
   15c46:	4b0a      	ldr	r3, [pc, #40]	; (15c70 <SubscribeHandlerServo+0xac>)
   15c48:	4798      	blx	r3
   15c4a:	1e03      	subs	r3, r0, #0
   15c4c:	d102      	bne.n	15c54 <SubscribeHandlerServo+0x90>
			servo_setDuty(3);
   15c4e:	2003      	movs	r0, #3
   15c50:	4b09      	ldr	r3, [pc, #36]	; (15c78 <SubscribeHandlerServo+0xb4>)
   15c52:	4798      	blx	r3
}
   15c54:	46c0      	nop			; (mov r8, r8)
   15c56:	46bd      	mov	sp, r7
   15c58:	b003      	add	sp, #12
   15c5a:	bd90      	pop	{r4, r7, pc}
   15c5c:	000364b4 	.word	0x000364b4
   15c60:	0001cf21 	.word	0x0001cf21
   15c64:	000364bc 	.word	0x000364bc
   15c68:	000364c4 	.word	0x000364c4
   15c6c:	000364f0 	.word	0x000364f0
   15c70:	000349b9 	.word	0x000349b9
   15c74:	000364e0 	.word	0x000364e0
   15c78:	00014d59 	.word	0x00014d59
   15c7c:	000364e8 	.word	0x000364e8

00015c80 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15c80:	b590      	push	{r4, r7, lr}
   15c82:	b08b      	sub	sp, #44	; 0x2c
   15c84:	af06      	add	r7, sp, #24
   15c86:	60f8      	str	r0, [r7, #12]
   15c88:	60b9      	str	r1, [r7, #8]
   15c8a:	607a      	str	r2, [r7, #4]
    switch (type) {
   15c8c:	68bb      	ldr	r3, [r7, #8]
   15c8e:	2b01      	cmp	r3, #1
   15c90:	d03b      	beq.n	15d0a <mqtt_callback+0x8a>
   15c92:	2b05      	cmp	r3, #5
   15c94:	d052      	beq.n	15d3c <mqtt_callback+0xbc>
   15c96:	2b00      	cmp	r3, #0
   15c98:	d000      	beq.n	15c9c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   15c9a:	e055      	b.n	15d48 <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   15c9c:	687b      	ldr	r3, [r7, #4]
   15c9e:	681b      	ldr	r3, [r3, #0]
   15ca0:	2b00      	cmp	r3, #0
   15ca2:	db25      	blt.n	15cf0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   15ca4:	4b2a      	ldr	r3, [pc, #168]	; (15d50 <mqtt_callback+0xd0>)
   15ca6:	0019      	movs	r1, r3
   15ca8:	2001      	movs	r0, #1
   15caa:	4b2a      	ldr	r3, [pc, #168]	; (15d54 <mqtt_callback+0xd4>)
   15cac:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   15cae:	492a      	ldr	r1, [pc, #168]	; (15d58 <mqtt_callback+0xd8>)
   15cb0:	4a2a      	ldr	r2, [pc, #168]	; (15d5c <mqtt_callback+0xdc>)
   15cb2:	68f8      	ldr	r0, [r7, #12]
   15cb4:	2300      	movs	r3, #0
   15cb6:	9305      	str	r3, [sp, #20]
   15cb8:	2300      	movs	r3, #0
   15cba:	9304      	str	r3, [sp, #16]
   15cbc:	2300      	movs	r3, #0
   15cbe:	9303      	str	r3, [sp, #12]
   15cc0:	2300      	movs	r3, #0
   15cc2:	9302      	str	r3, [sp, #8]
   15cc4:	2300      	movs	r3, #0
   15cc6:	9301      	str	r3, [sp, #4]
   15cc8:	4b24      	ldr	r3, [pc, #144]	; (15d5c <mqtt_callback+0xdc>)
   15cca:	9300      	str	r3, [sp, #0]
   15ccc:	000b      	movs	r3, r1
   15cce:	2101      	movs	r1, #1
   15cd0:	4c23      	ldr	r4, [pc, #140]	; (15d60 <mqtt_callback+0xe0>)
   15cd2:	47a0      	blx	r4
   15cd4:	1e03      	subs	r3, r0, #0
   15cd6:	d005      	beq.n	15ce4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   15cd8:	4b22      	ldr	r3, [pc, #136]	; (15d64 <mqtt_callback+0xe4>)
   15cda:	0019      	movs	r1, r3
   15cdc:	2001      	movs	r0, #1
   15cde:	4b1d      	ldr	r3, [pc, #116]	; (15d54 <mqtt_callback+0xd4>)
   15ce0:	4798      	blx	r3
        } break;
   15ce2:	e031      	b.n	15d48 <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   15ce4:	4b20      	ldr	r3, [pc, #128]	; (15d68 <mqtt_callback+0xe8>)
   15ce6:	0019      	movs	r1, r3
   15ce8:	2001      	movs	r0, #1
   15cea:	4b1a      	ldr	r3, [pc, #104]	; (15d54 <mqtt_callback+0xd4>)
   15cec:	4798      	blx	r3
        } break;
   15cee:	e02b      	b.n	15d48 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15cf0:	4a1e      	ldr	r2, [pc, #120]	; (15d6c <mqtt_callback+0xec>)
   15cf2:	4b1f      	ldr	r3, [pc, #124]	; (15d70 <mqtt_callback+0xf0>)
   15cf4:	0019      	movs	r1, r3
   15cf6:	2001      	movs	r0, #1
   15cf8:	4b16      	ldr	r3, [pc, #88]	; (15d54 <mqtt_callback+0xd4>)
   15cfa:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15cfc:	4a1b      	ldr	r2, [pc, #108]	; (15d6c <mqtt_callback+0xec>)
   15cfe:	68fb      	ldr	r3, [r7, #12]
   15d00:	0011      	movs	r1, r2
   15d02:	0018      	movs	r0, r3
   15d04:	4b1b      	ldr	r3, [pc, #108]	; (15d74 <mqtt_callback+0xf4>)
   15d06:	4798      	blx	r3
        } break;
   15d08:	e01e      	b.n	15d48 <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15d0a:	687b      	ldr	r3, [r7, #4]
   15d0c:	781b      	ldrb	r3, [r3, #0]
   15d0e:	2b00      	cmp	r3, #0
   15d10:	d10b      	bne.n	15d2a <mqtt_callback+0xaa>
				mqtt_subscribe(module_inst, SERVO_TOPIC, 2, SubscribeHandlerServo);
   15d12:	4b19      	ldr	r3, [pc, #100]	; (15d78 <mqtt_callback+0xf8>)
   15d14:	4919      	ldr	r1, [pc, #100]	; (15d7c <mqtt_callback+0xfc>)
   15d16:	68f8      	ldr	r0, [r7, #12]
   15d18:	2202      	movs	r2, #2
   15d1a:	4c19      	ldr	r4, [pc, #100]	; (15d80 <mqtt_callback+0x100>)
   15d1c:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   15d1e:	4b19      	ldr	r3, [pc, #100]	; (15d84 <mqtt_callback+0x104>)
   15d20:	0019      	movs	r1, r3
   15d22:	2001      	movs	r0, #1
   15d24:	4b0b      	ldr	r3, [pc, #44]	; (15d54 <mqtt_callback+0xd4>)
   15d26:	4798      	blx	r3
            break;
   15d28:	e00e      	b.n	15d48 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15d2a:	687b      	ldr	r3, [r7, #4]
   15d2c:	781b      	ldrb	r3, [r3, #0]
   15d2e:	001a      	movs	r2, r3
   15d30:	4b15      	ldr	r3, [pc, #84]	; (15d88 <mqtt_callback+0x108>)
   15d32:	0019      	movs	r1, r3
   15d34:	2001      	movs	r0, #1
   15d36:	4b07      	ldr	r3, [pc, #28]	; (15d54 <mqtt_callback+0xd4>)
   15d38:	4798      	blx	r3
            break;
   15d3a:	e005      	b.n	15d48 <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   15d3c:	4b13      	ldr	r3, [pc, #76]	; (15d8c <mqtt_callback+0x10c>)
   15d3e:	0019      	movs	r1, r3
   15d40:	2001      	movs	r0, #1
   15d42:	4b04      	ldr	r3, [pc, #16]	; (15d54 <mqtt_callback+0xd4>)
   15d44:	4798      	blx	r3
            break;
   15d46:	46c0      	nop			; (mov r8, r8)
}
   15d48:	46c0      	nop			; (mov r8, r8)
   15d4a:	46bd      	mov	sp, r7
   15d4c:	b005      	add	sp, #20
   15d4e:	bd90      	pop	{r4, r7, pc}
   15d50:	00036504 	.word	0x00036504
   15d54:	0001cf21 	.word	0x0001cf21
   15d58:	00036520 	.word	0x00036520
   15d5c:	0003652c 	.word	0x0003652c
   15d60:	0002ea81 	.word	0x0002ea81
   15d64:	00036534 	.word	0x00036534
   15d68:	0003655c 	.word	0x0003655c
   15d6c:	00035f44 	.word	0x00035f44
   15d70:	00036578 	.word	0x00036578
   15d74:	0002ea39 	.word	0x0002ea39
   15d78:	00015bc5 	.word	0x00015bc5
   15d7c:	000364f0 	.word	0x000364f0
   15d80:	0002ec21 	.word	0x0002ec21
   15d84:	000365b0 	.word	0x000365b0
   15d88:	000365c4 	.word	0x000365c4
   15d8c:	000365f8 	.word	0x000365f8

00015d90 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15d90:	b580      	push	{r7, lr}
   15d92:	b088      	sub	sp, #32
   15d94:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   15d96:	1d3b      	adds	r3, r7, #4
   15d98:	0018      	movs	r0, r3
   15d9a:	4b1f      	ldr	r3, [pc, #124]	; (15e18 <configure_mqtt+0x88>)
   15d9c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   15d9e:	1d3b      	adds	r3, r7, #4
   15da0:	4a1e      	ldr	r2, [pc, #120]	; (15e1c <configure_mqtt+0x8c>)
   15da2:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15da4:	1d3b      	adds	r3, r7, #4
   15da6:	2280      	movs	r2, #128	; 0x80
   15da8:	0092      	lsls	r2, r2, #2
   15daa:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   15dac:	1d3b      	adds	r3, r7, #4
   15dae:	4a1c      	ldr	r2, [pc, #112]	; (15e20 <configure_mqtt+0x90>)
   15db0:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15db2:	1d3b      	adds	r3, r7, #4
   15db4:	2280      	movs	r2, #128	; 0x80
   15db6:	0092      	lsls	r2, r2, #2
   15db8:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   15dba:	1d3b      	adds	r3, r7, #4
   15dbc:	4a19      	ldr	r2, [pc, #100]	; (15e24 <configure_mqtt+0x94>)
   15dbe:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   15dc0:	1d3b      	adds	r3, r7, #4
   15dc2:	4a19      	ldr	r2, [pc, #100]	; (15e28 <configure_mqtt+0x98>)
   15dc4:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   15dc6:	1d3a      	adds	r2, r7, #4
   15dc8:	4b18      	ldr	r3, [pc, #96]	; (15e2c <configure_mqtt+0x9c>)
   15dca:	0011      	movs	r1, r2
   15dcc:	0018      	movs	r0, r3
   15dce:	4b18      	ldr	r3, [pc, #96]	; (15e30 <configure_mqtt+0xa0>)
   15dd0:	4798      	blx	r3
   15dd2:	0003      	movs	r3, r0
   15dd4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15dd6:	69fb      	ldr	r3, [r7, #28]
   15dd8:	2b00      	cmp	r3, #0
   15dda:	da06      	bge.n	15dea <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   15ddc:	69fa      	ldr	r2, [r7, #28]
   15dde:	4b15      	ldr	r3, [pc, #84]	; (15e34 <configure_mqtt+0xa4>)
   15de0:	0019      	movs	r1, r3
   15de2:	2001      	movs	r0, #1
   15de4:	4b14      	ldr	r3, [pc, #80]	; (15e38 <configure_mqtt+0xa8>)
   15de6:	4798      	blx	r3
        while (1) {
   15de8:	e7fe      	b.n	15de8 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   15dea:	4a14      	ldr	r2, [pc, #80]	; (15e3c <configure_mqtt+0xac>)
   15dec:	4b0f      	ldr	r3, [pc, #60]	; (15e2c <configure_mqtt+0x9c>)
   15dee:	0011      	movs	r1, r2
   15df0:	0018      	movs	r0, r3
   15df2:	4b13      	ldr	r3, [pc, #76]	; (15e40 <configure_mqtt+0xb0>)
   15df4:	4798      	blx	r3
   15df6:	0003      	movs	r3, r0
   15df8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15dfa:	69fb      	ldr	r3, [r7, #28]
   15dfc:	2b00      	cmp	r3, #0
   15dfe:	da06      	bge.n	15e0e <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   15e00:	69fa      	ldr	r2, [r7, #28]
   15e02:	4b10      	ldr	r3, [pc, #64]	; (15e44 <configure_mqtt+0xb4>)
   15e04:	0019      	movs	r1, r3
   15e06:	2001      	movs	r0, #1
   15e08:	4b0b      	ldr	r3, [pc, #44]	; (15e38 <configure_mqtt+0xa8>)
   15e0a:	4798      	blx	r3
        while (1) {
   15e0c:	e7fe      	b.n	15e0c <configure_mqtt+0x7c>
        }
    }
}
   15e0e:	46c0      	nop			; (mov r8, r8)
   15e10:	46bd      	mov	sp, r7
   15e12:	b008      	add	sp, #32
   15e14:	bd80      	pop	{r7, pc}
   15e16:	46c0      	nop			; (mov r8, r8)
   15e18:	0002e979 	.word	0x0002e979
   15e1c:	2000089c 	.word	0x2000089c
   15e20:	20000a9c 	.word	0x20000a9c
   15e24:	0000075b 	.word	0x0000075b
   15e28:	00001770 	.word	0x00001770
   15e2c:	20000864 	.word	0x20000864
   15e30:	0002e8c9 	.word	0x0002e8c9
   15e34:	0003660c 	.word	0x0003660c
   15e38:	0001cf21 	.word	0x0001cf21
   15e3c:	00015c81 	.word	0x00015c81
   15e40:	0002e9b9 	.word	0x0002e9b9
   15e44:	00036640 	.word	0x00036640

00015e48 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   15e48:	b580      	push	{r7, lr}
   15e4a:	b084      	sub	sp, #16
   15e4c:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   15e4e:	1d3b      	adds	r3, r7, #4
   15e50:	0018      	movs	r0, r3
   15e52:	4b0b      	ldr	r3, [pc, #44]	; (15e80 <configure_extint_channel+0x38>)
   15e54:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   15e56:	1d3b      	adds	r3, r7, #4
   15e58:	2237      	movs	r2, #55	; 0x37
   15e5a:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   15e5c:	1d3b      	adds	r3, r7, #4
   15e5e:	2200      	movs	r2, #0
   15e60:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   15e62:	1d3b      	adds	r3, r7, #4
   15e64:	2201      	movs	r2, #1
   15e66:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15e68:	1d3b      	adds	r3, r7, #4
   15e6a:	2202      	movs	r2, #2
   15e6c:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15e6e:	1d3b      	adds	r3, r7, #4
   15e70:	0019      	movs	r1, r3
   15e72:	2007      	movs	r0, #7
   15e74:	4b03      	ldr	r3, [pc, #12]	; (15e84 <configure_extint_channel+0x3c>)
   15e76:	4798      	blx	r3
}
   15e78:	46c0      	nop			; (mov r8, r8)
   15e7a:	46bd      	mov	sp, r7
   15e7c:	b004      	add	sp, #16
   15e7e:	bd80      	pop	{r7, pc}
   15e80:	00025985 	.word	0x00025985
   15e84:	000259b9 	.word	0x000259b9

00015e88 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15e88:	b580      	push	{r7, lr}
   15e8a:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15e8c:	4b06      	ldr	r3, [pc, #24]	; (15ea8 <configure_extint_callbacks+0x20>)
   15e8e:	2200      	movs	r2, #0
   15e90:	2107      	movs	r1, #7
   15e92:	0018      	movs	r0, r3
   15e94:	4b05      	ldr	r3, [pc, #20]	; (15eac <configure_extint_callbacks+0x24>)
   15e96:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15e98:	2100      	movs	r1, #0
   15e9a:	2007      	movs	r0, #7
   15e9c:	4b04      	ldr	r3, [pc, #16]	; (15eb0 <configure_extint_callbacks+0x28>)
   15e9e:	4798      	blx	r3
}
   15ea0:	46c0      	nop			; (mov r8, r8)
   15ea2:	46bd      	mov	sp, r7
   15ea4:	bd80      	pop	{r7, pc}
   15ea6:	46c0      	nop			; (mov r8, r8)
   15ea8:	00015eb5 	.word	0x00015eb5
   15eac:	00025585 	.word	0x00025585
   15eb0:	000255e9 	.word	0x000255e9

00015eb4 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15eb4:	b5b0      	push	{r4, r5, r7, lr}
   15eb6:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   15eb8:	4b0c      	ldr	r3, [pc, #48]	; (15eec <extint_detection_callback+0x38>)
   15eba:	681b      	ldr	r3, [r3, #0]
   15ebc:	1c5a      	adds	r2, r3, #1
   15ebe:	4b0b      	ldr	r3, [pc, #44]	; (15eec <extint_detection_callback+0x38>)
   15ec0:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   15ec2:	4b0a      	ldr	r3, [pc, #40]	; (15eec <extint_detection_callback+0x38>)
   15ec4:	681b      	ldr	r3, [r3, #0]
   15ec6:	2b28      	cmp	r3, #40	; 0x28
   15ec8:	d902      	bls.n	15ed0 <extint_detection_callback+0x1c>
   15eca:	4b08      	ldr	r3, [pc, #32]	; (15eec <extint_detection_callback+0x38>)
   15ecc:	2201      	movs	r2, #1
   15ece:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   15ed0:	4b06      	ldr	r3, [pc, #24]	; (15eec <extint_detection_callback+0x38>)
   15ed2:	681b      	ldr	r3, [r3, #0]
   15ed4:	4a06      	ldr	r2, [pc, #24]	; (15ef0 <extint_detection_callback+0x3c>)
   15ed6:	4807      	ldr	r0, [pc, #28]	; (15ef4 <extint_detection_callback+0x40>)
   15ed8:	213f      	movs	r1, #63	; 0x3f
   15eda:	4c07      	ldr	r4, [pc, #28]	; (15ef8 <extint_detection_callback+0x44>)
   15edc:	47a0      	blx	r4
    isPressed = true;
   15ede:	4b07      	ldr	r3, [pc, #28]	; (15efc <extint_detection_callback+0x48>)
   15ee0:	2201      	movs	r2, #1
   15ee2:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   15ee4:	46c0      	nop			; (mov r8, r8)
   15ee6:	46bd      	mov	sp, r7
   15ee8:	bdb0      	pop	{r4, r5, r7, pc}
   15eea:	46c0      	nop			; (mov r8, r8)
   15eec:	200000a0 	.word	0x200000a0
   15ef0:	00036674 	.word	0x00036674
   15ef4:	20000060 	.word	0x20000060
   15ef8:	00034869 	.word	0x00034869
   15efc:	20000c9c 	.word	0x20000c9c

00015f00 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   15f00:	b580      	push	{r7, lr}
   15f02:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   15f04:	4a15      	ldr	r2, [pc, #84]	; (15f5c <HTTP_DownloadFileInit+0x5c>)
   15f06:	4b16      	ldr	r3, [pc, #88]	; (15f60 <HTTP_DownloadFileInit+0x60>)
   15f08:	0011      	movs	r1, r2
   15f0a:	0018      	movs	r0, r3
   15f0c:	4b15      	ldr	r3, [pc, #84]	; (15f64 <HTTP_DownloadFileInit+0x64>)
   15f0e:	4798      	blx	r3
   15f10:	1e03      	subs	r3, r0, #0
   15f12:	d008      	beq.n	15f26 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15f14:	4b14      	ldr	r3, [pc, #80]	; (15f68 <HTTP_DownloadFileInit+0x68>)
   15f16:	0019      	movs	r1, r3
   15f18:	2001      	movs	r0, #1
   15f1a:	4b14      	ldr	r3, [pc, #80]	; (15f6c <HTTP_DownloadFileInit+0x6c>)
   15f1c:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   15f1e:	e002      	b.n	15f26 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   15f20:	2000      	movs	r0, #0
   15f22:	4b13      	ldr	r3, [pc, #76]	; (15f70 <HTTP_DownloadFileInit+0x70>)
   15f24:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   15f26:	4b0e      	ldr	r3, [pc, #56]	; (15f60 <HTTP_DownloadFileInit+0x60>)
   15f28:	2234      	movs	r2, #52	; 0x34
   15f2a:	5c9b      	ldrb	r3, [r3, r2]
   15f2c:	2b00      	cmp	r3, #0
   15f2e:	d1f7      	bne.n	15f20 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   15f30:	4b10      	ldr	r3, [pc, #64]	; (15f74 <HTTP_DownloadFileInit+0x74>)
   15f32:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   15f34:	4b10      	ldr	r3, [pc, #64]	; (15f78 <HTTP_DownloadFileInit+0x78>)
   15f36:	2201      	movs	r2, #1
   15f38:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   15f3a:	4a10      	ldr	r2, [pc, #64]	; (15f7c <HTTP_DownloadFileInit+0x7c>)
   15f3c:	4b10      	ldr	r3, [pc, #64]	; (15f80 <HTTP_DownloadFileInit+0x80>)
   15f3e:	0011      	movs	r1, r2
   15f40:	0018      	movs	r0, r3
   15f42:	4b10      	ldr	r3, [pc, #64]	; (15f84 <HTTP_DownloadFileInit+0x84>)
   15f44:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   15f46:	4b10      	ldr	r3, [pc, #64]	; (15f88 <HTTP_DownloadFileInit+0x88>)
   15f48:	4798      	blx	r3

    start_download();
   15f4a:	4b10      	ldr	r3, [pc, #64]	; (15f8c <HTTP_DownloadFileInit+0x8c>)
   15f4c:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   15f4e:	4b10      	ldr	r3, [pc, #64]	; (15f90 <HTTP_DownloadFileInit+0x90>)
   15f50:	2203      	movs	r2, #3
   15f52:	701a      	strb	r2, [r3, #0]
}
   15f54:	46c0      	nop			; (mov r8, r8)
   15f56:	46bd      	mov	sp, r7
   15f58:	bd80      	pop	{r7, pc}
   15f5a:	46c0      	nop			; (mov r8, r8)
   15f5c:	00035f44 	.word	0x00035f44
   15f60:	20000864 	.word	0x20000864
   15f64:	0002eb6d 	.word	0x0002eb6d
   15f68:	0003633c 	.word	0x0003633c
   15f6c:	0001cf21 	.word	0x0001cf21
   15f70:	00021075 	.word	0x00021075
   15f74:	00024631 	.word	0x00024631
   15f78:	20000604 	.word	0x20000604
   15f7c:	00015825 	.word	0x00015825
   15f80:	000157f1 	.word	0x000157f1
   15f84:	00024679 	.word	0x00024679
   15f88:	000245e1 	.word	0x000245e1
   15f8c:	00015419 	.word	0x00015419
   15f90:	200005f5 	.word	0x200005f5

00015f94 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   15f94:	b590      	push	{r4, r7, lr}
   15f96:	b085      	sub	sp, #20
   15f98:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15f9a:	e009      	b.n	15fb0 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   15f9c:	2000      	movs	r0, #0
   15f9e:	4b30      	ldr	r3, [pc, #192]	; (16060 <HTTP_DownloadFileTransaction+0xcc>)
   15fa0:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15fa2:	4b30      	ldr	r3, [pc, #192]	; (16064 <HTTP_DownloadFileTransaction+0xd0>)
   15fa4:	0018      	movs	r0, r3
   15fa6:	4b30      	ldr	r3, [pc, #192]	; (16068 <HTTP_DownloadFileTransaction+0xd4>)
   15fa8:	4798      	blx	r3
        vTaskDelay(5);
   15faa:	2005      	movs	r0, #5
   15fac:	4b2f      	ldr	r3, [pc, #188]	; (1606c <HTTP_DownloadFileTransaction+0xd8>)
   15fae:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15fb0:	2010      	movs	r0, #16
   15fb2:	4b2f      	ldr	r3, [pc, #188]	; (16070 <HTTP_DownloadFileTransaction+0xdc>)
   15fb4:	4798      	blx	r3
   15fb6:	0003      	movs	r3, r0
   15fb8:	001a      	movs	r2, r3
   15fba:	2301      	movs	r3, #1
   15fbc:	4053      	eors	r3, r2
   15fbe:	b2db      	uxtb	r3, r3
   15fc0:	2b00      	cmp	r3, #0
   15fc2:	d009      	beq.n	15fd8 <HTTP_DownloadFileTransaction+0x44>
   15fc4:	2020      	movs	r0, #32
   15fc6:	4b2a      	ldr	r3, [pc, #168]	; (16070 <HTTP_DownloadFileTransaction+0xdc>)
   15fc8:	4798      	blx	r3
   15fca:	0003      	movs	r3, r0
   15fcc:	001a      	movs	r2, r3
   15fce:	2301      	movs	r3, #1
   15fd0:	4053      	eors	r3, r2
   15fd2:	b2db      	uxtb	r3, r3
   15fd4:	2b00      	cmp	r3, #0
   15fd6:	d1e1      	bne.n	15f9c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   15fd8:	4b26      	ldr	r3, [pc, #152]	; (16074 <HTTP_DownloadFileTransaction+0xe0>)
   15fda:	4798      	blx	r3
    vTaskDelay(1000);
   15fdc:	23fa      	movs	r3, #250	; 0xfa
   15fde:	009b      	lsls	r3, r3, #2
   15fe0:	0018      	movs	r0, r3
   15fe2:	4b22      	ldr	r3, [pc, #136]	; (1606c <HTTP_DownloadFileTransaction+0xd8>)
   15fe4:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   15fe6:	4b24      	ldr	r3, [pc, #144]	; (16078 <HTTP_DownloadFileTransaction+0xe4>)
   15fe8:	2200      	movs	r2, #0
   15fea:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   15fec:	003b      	movs	r3, r7
   15fee:	4a23      	ldr	r2, [pc, #140]	; (1607c <HTTP_DownloadFileTransaction+0xe8>)
   15ff0:	ca13      	ldmia	r2!, {r0, r1, r4}
   15ff2:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15ff4:	003b      	movs	r3, r7
   15ff6:	2230      	movs	r2, #48	; 0x30
   15ff8:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15ffa:	230f      	movs	r3, #15
   15ffc:	18fc      	adds	r4, r7, r3
   15ffe:	0039      	movs	r1, r7
   16000:	4b1f      	ldr	r3, [pc, #124]	; (16080 <HTTP_DownloadFileTransaction+0xec>)
   16002:	220a      	movs	r2, #10
   16004:	0018      	movs	r0, r3
   16006:	4b1f      	ldr	r3, [pc, #124]	; (16084 <HTTP_DownloadFileTransaction+0xf0>)
   16008:	4798      	blx	r3
   1600a:	0003      	movs	r3, r0
   1600c:	7023      	strb	r3, [r4, #0]
    res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1600e:	230f      	movs	r3, #15
   16010:	18fc      	adds	r4, r7, r3
   16012:	0039      	movs	r1, r7
   16014:	4b1a      	ldr	r3, [pc, #104]	; (16080 <HTTP_DownloadFileTransaction+0xec>)
   16016:	220a      	movs	r2, #10
   16018:	0018      	movs	r0, r3
   1601a:	4b1a      	ldr	r3, [pc, #104]	; (16084 <HTTP_DownloadFileTransaction+0xf0>)
   1601c:	4798      	blx	r3
   1601e:	0003      	movs	r3, r0
   16020:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   16022:	230f      	movs	r3, #15
   16024:	18fb      	adds	r3, r7, r3
   16026:	781b      	ldrb	r3, [r3, #0]
   16028:	2b00      	cmp	r3, #0
   1602a:	d008      	beq.n	1603e <HTTP_DownloadFileTransaction+0xaa>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   1602c:	230f      	movs	r3, #15
   1602e:	18fb      	adds	r3, r7, r3
   16030:	781a      	ldrb	r2, [r3, #0]
   16032:	4b15      	ldr	r3, [pc, #84]	; (16088 <HTTP_DownloadFileTransaction+0xf4>)
   16034:	0019      	movs	r1, r3
   16036:	2000      	movs	r0, #0
   16038:	4b14      	ldr	r3, [pc, #80]	; (1608c <HTTP_DownloadFileTransaction+0xf8>)
   1603a:	4798      	blx	r3
   1603c:	e003      	b.n	16046 <HTTP_DownloadFileTransaction+0xb2>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   1603e:	4b14      	ldr	r3, [pc, #80]	; (16090 <HTTP_DownloadFileTransaction+0xfc>)
   16040:	0018      	movs	r0, r3
   16042:	4b14      	ldr	r3, [pc, #80]	; (16094 <HTTP_DownloadFileTransaction+0x100>)
   16044:	4798      	blx	r3
    }
    vTaskDelay(100);
   16046:	2064      	movs	r0, #100	; 0x64
   16048:	4b08      	ldr	r3, [pc, #32]	; (1606c <HTTP_DownloadFileTransaction+0xd8>)
   1604a:	4798      	blx	r3
    system_reset();
   1604c:	4b12      	ldr	r3, [pc, #72]	; (16098 <HTTP_DownloadFileTransaction+0x104>)
   1604e:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   16050:	4b12      	ldr	r3, [pc, #72]	; (1609c <HTTP_DownloadFileTransaction+0x108>)
   16052:	2200      	movs	r2, #0
   16054:	701a      	strb	r2, [r3, #0]
}
   16056:	46c0      	nop			; (mov r8, r8)
   16058:	46bd      	mov	sp, r7
   1605a:	b005      	add	sp, #20
   1605c:	bd90      	pop	{r4, r7, pc}
   1605e:	46c0      	nop			; (mov r8, r8)
   16060:	00021075 	.word	0x00021075
   16064:	20004874 	.word	0x20004874
   16068:	00031895 	.word	0x00031895
   1606c:	0001b1e1 	.word	0x0001b1e1
   16070:	000150f1 	.word	0x000150f1
   16074:	00024631 	.word	0x00024631
   16078:	20000604 	.word	0x20000604
   1607c:	000366ac 	.word	0x000366ac
   16080:	20000838 	.word	0x20000838
   16084:	0002cb5d 	.word	0x0002cb5d
   16088:	00036688 	.word	0x00036688
   1608c:	0001cf21 	.word	0x0001cf21
   16090:	00036698 	.word	0x00036698
   16094:	0001ce35 	.word	0x0001ce35
   16098:	00014ff5 	.word	0x00014ff5
   1609c:	200005f5 	.word	0x200005f5

000160a0 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   160a0:	b580      	push	{r7, lr}
   160a2:	af00      	add	r7, sp, #0
    socketDeinit();
   160a4:	4b18      	ldr	r3, [pc, #96]	; (16108 <MQTT_InitRoutine+0x68>)
   160a6:	4798      	blx	r3
    configure_mqtt();
   160a8:	4b18      	ldr	r3, [pc, #96]	; (1610c <MQTT_InitRoutine+0x6c>)
   160aa:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   160ac:	4a18      	ldr	r2, [pc, #96]	; (16110 <MQTT_InitRoutine+0x70>)
   160ae:	4b19      	ldr	r3, [pc, #100]	; (16114 <MQTT_InitRoutine+0x74>)
   160b0:	0011      	movs	r1, r2
   160b2:	0018      	movs	r0, r3
   160b4:	4b18      	ldr	r3, [pc, #96]	; (16118 <MQTT_InitRoutine+0x78>)
   160b6:	4798      	blx	r3
    socketInit();
   160b8:	4b18      	ldr	r3, [pc, #96]	; (1611c <MQTT_InitRoutine+0x7c>)
   160ba:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   160bc:	4b18      	ldr	r3, [pc, #96]	; (16120 <MQTT_InitRoutine+0x80>)
   160be:	2234      	movs	r2, #52	; 0x34
   160c0:	5c9b      	ldrb	r3, [r3, r2]
   160c2:	2201      	movs	r2, #1
   160c4:	4053      	eors	r3, r2
   160c6:	b2db      	uxtb	r3, r3
   160c8:	2b00      	cmp	r3, #0
   160ca:	d00c      	beq.n	160e6 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   160cc:	4a15      	ldr	r2, [pc, #84]	; (16124 <MQTT_InitRoutine+0x84>)
   160ce:	4b14      	ldr	r3, [pc, #80]	; (16120 <MQTT_InitRoutine+0x80>)
   160d0:	0011      	movs	r1, r2
   160d2:	0018      	movs	r0, r3
   160d4:	4b14      	ldr	r3, [pc, #80]	; (16128 <MQTT_InitRoutine+0x88>)
   160d6:	4798      	blx	r3
   160d8:	1e03      	subs	r3, r0, #0
   160da:	d004      	beq.n	160e6 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   160dc:	4b13      	ldr	r3, [pc, #76]	; (1612c <MQTT_InitRoutine+0x8c>)
   160de:	0019      	movs	r1, r3
   160e0:	2001      	movs	r0, #1
   160e2:	4b13      	ldr	r3, [pc, #76]	; (16130 <MQTT_InitRoutine+0x90>)
   160e4:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   160e6:	4b0e      	ldr	r3, [pc, #56]	; (16120 <MQTT_InitRoutine+0x80>)
   160e8:	2234      	movs	r2, #52	; 0x34
   160ea:	5c9b      	ldrb	r3, [r3, r2]
   160ec:	2b00      	cmp	r3, #0
   160ee:	d004      	beq.n	160fa <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   160f0:	4b10      	ldr	r3, [pc, #64]	; (16134 <MQTT_InitRoutine+0x94>)
   160f2:	0019      	movs	r1, r3
   160f4:	2001      	movs	r0, #1
   160f6:	4b0e      	ldr	r3, [pc, #56]	; (16130 <MQTT_InitRoutine+0x90>)
   160f8:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   160fa:	4b0f      	ldr	r3, [pc, #60]	; (16138 <MQTT_InitRoutine+0x98>)
   160fc:	2201      	movs	r2, #1
   160fe:	701a      	strb	r2, [r3, #0]
}
   16100:	46c0      	nop			; (mov r8, r8)
   16102:	46bd      	mov	sp, r7
   16104:	bd80      	pop	{r7, pc}
   16106:	46c0      	nop			; (mov r8, r8)
   16108:	00024631 	.word	0x00024631
   1610c:	00015d91 	.word	0x00015d91
   16110:	00015ba1 	.word	0x00015ba1
   16114:	00015b6d 	.word	0x00015b6d
   16118:	00024679 	.word	0x00024679
   1611c:	000245e1 	.word	0x000245e1
   16120:	20000864 	.word	0x20000864
   16124:	00035f44 	.word	0x00035f44
   16128:	0002ea39 	.word	0x0002ea39
   1612c:	0003633c 	.word	0x0003633c
   16130:	0001cf21 	.word	0x0001cf21
   16134:	000366b8 	.word	0x000366b8
   16138:	200005f5 	.word	0x200005f5

0001613c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   1613c:	b580      	push	{r7, lr}
   1613e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16140:	2000      	movs	r0, #0
   16142:	4b0b      	ldr	r3, [pc, #44]	; (16170 <MQTT_HandleTransactions+0x34>)
   16144:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16146:	4b0b      	ldr	r3, [pc, #44]	; (16174 <MQTT_HandleTransactions+0x38>)
   16148:	0018      	movs	r0, r3
   1614a:	4b0b      	ldr	r3, [pc, #44]	; (16178 <MQTT_HandleTransactions+0x3c>)
   1614c:	4798      	blx	r3

    // Check if data has to be sent!
	MQTT_HandleTestMessages();
   1614e:	4b0b      	ldr	r3, [pc, #44]	; (1617c <MQTT_HandleTransactions+0x40>)
   16150:	4798      	blx	r3
	MQTT_HandleNauMessages();
   16152:	4b0b      	ldr	r3, [pc, #44]	; (16180 <MQTT_HandleTransactions+0x44>)
   16154:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16156:	4b0b      	ldr	r3, [pc, #44]	; (16184 <MQTT_HandleTransactions+0x48>)
   16158:	2234      	movs	r2, #52	; 0x34
   1615a:	5c9b      	ldrb	r3, [r3, r2]
   1615c:	2b00      	cmp	r3, #0
   1615e:	d004      	beq.n	1616a <MQTT_HandleTransactions+0x2e>
   16160:	4b08      	ldr	r3, [pc, #32]	; (16184 <MQTT_HandleTransactions+0x48>)
   16162:	2164      	movs	r1, #100	; 0x64
   16164:	0018      	movs	r0, r3
   16166:	4b08      	ldr	r3, [pc, #32]	; (16188 <MQTT_HandleTransactions+0x4c>)
   16168:	4798      	blx	r3
}
   1616a:	46c0      	nop			; (mov r8, r8)
   1616c:	46bd      	mov	sp, r7
   1616e:	bd80      	pop	{r7, pc}
   16170:	00021075 	.word	0x00021075
   16174:	20004874 	.word	0x20004874
   16178:	00031895 	.word	0x00031895
   1617c:	0001618d 	.word	0x0001618d
   16180:	00016201 	.word	0x00016201
   16184:	20000864 	.word	0x20000864
   16188:	0002ec69 	.word	0x0002ec69

0001618c <MQTT_HandleTestMessages>:


static void MQTT_HandleTestMessages(void)
{
   1618c:	b590      	push	{r4, r7, lr}
   1618e:	b085      	sub	sp, #20
   16190:	af02      	add	r7, sp, #8
	struct TestPacket TestDataVar;
	if (pdPASS == xQueueReceive(xQueueTestBuffer, &TestDataVar, 0)) {
   16192:	4b12      	ldr	r3, [pc, #72]	; (161dc <MQTT_HandleTestMessages+0x50>)
   16194:	681b      	ldr	r3, [r3, #0]
   16196:	1d39      	adds	r1, r7, #4
   16198:	2200      	movs	r2, #0
   1619a:	0018      	movs	r0, r3
   1619c:	4b10      	ldr	r3, [pc, #64]	; (161e0 <MQTT_HandleTestMessages+0x54>)
   1619e:	4798      	blx	r3
   161a0:	0003      	movs	r3, r0
   161a2:	2b01      	cmp	r3, #1
   161a4:	d115      	bne.n	161d2 <MQTT_HandleTestMessages+0x46>
		snprintf(mqtt_msg, 63, "{\"test\":%d }", TestDataVar.test);
   161a6:	1d3b      	adds	r3, r7, #4
   161a8:	781b      	ldrb	r3, [r3, #0]
   161aa:	4a0e      	ldr	r2, [pc, #56]	; (161e4 <MQTT_HandleTestMessages+0x58>)
   161ac:	480e      	ldr	r0, [pc, #56]	; (161e8 <MQTT_HandleTestMessages+0x5c>)
   161ae:	213f      	movs	r1, #63	; 0x3f
   161b0:	4c0e      	ldr	r4, [pc, #56]	; (161ec <MQTT_HandleTestMessages+0x60>)
   161b2:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, TEST_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   161b4:	4b0c      	ldr	r3, [pc, #48]	; (161e8 <MQTT_HandleTestMessages+0x5c>)
   161b6:	0018      	movs	r0, r3
   161b8:	4b0d      	ldr	r3, [pc, #52]	; (161f0 <MQTT_HandleTestMessages+0x64>)
   161ba:	4798      	blx	r3
   161bc:	0004      	movs	r4, r0
   161be:	4a0a      	ldr	r2, [pc, #40]	; (161e8 <MQTT_HandleTestMessages+0x5c>)
   161c0:	490c      	ldr	r1, [pc, #48]	; (161f4 <MQTT_HandleTestMessages+0x68>)
   161c2:	480d      	ldr	r0, [pc, #52]	; (161f8 <MQTT_HandleTestMessages+0x6c>)
   161c4:	2300      	movs	r3, #0
   161c6:	9301      	str	r3, [sp, #4]
   161c8:	2301      	movs	r3, #1
   161ca:	9300      	str	r3, [sp, #0]
   161cc:	0023      	movs	r3, r4
   161ce:	4c0b      	ldr	r4, [pc, #44]	; (161fc <MQTT_HandleTestMessages+0x70>)
   161d0:	47a0      	blx	r4
	}
}
   161d2:	46c0      	nop			; (mov r8, r8)
   161d4:	46bd      	mov	sp, r7
   161d6:	b003      	add	sp, #12
   161d8:	bd90      	pop	{r4, r7, pc}
   161da:	46c0      	nop			; (mov r8, r8)
   161dc:	200005fc 	.word	0x200005fc
   161e0:	0001a035 	.word	0x0001a035
   161e4:	000366d4 	.word	0x000366d4
   161e8:	20000020 	.word	0x20000020
   161ec:	00034869 	.word	0x00034869
   161f0:	000349ab 	.word	0x000349ab
   161f4:	000366e4 	.word	0x000366e4
   161f8:	20000864 	.word	0x20000864
   161fc:	0002ebb5 	.word	0x0002ebb5

00016200 <MQTT_HandleNauMessages>:

static void MQTT_HandleNauMessages(void)
{
   16200:	b590      	push	{r4, r7, lr}
   16202:	b085      	sub	sp, #20
   16204:	af02      	add	r7, sp, #8
	struct NauPacket NauDataVar;
	if (pdPASS == xQueueReceive(xQueueNauBuffer, &NauDataVar, 0)) {
   16206:	4b16      	ldr	r3, [pc, #88]	; (16260 <MQTT_HandleNauMessages+0x60>)
   16208:	681b      	ldr	r3, [r3, #0]
   1620a:	1d39      	adds	r1, r7, #4
   1620c:	2200      	movs	r2, #0
   1620e:	0018      	movs	r0, r3
   16210:	4b14      	ldr	r3, [pc, #80]	; (16264 <MQTT_HandleNauMessages+0x64>)
   16212:	4798      	blx	r3
   16214:	0003      	movs	r3, r0
   16216:	2b01      	cmp	r3, #1
   16218:	d11e      	bne.n	16258 <MQTT_HandleNauMessages+0x58>
		snprintf(mqtt_msg, 63, "{\"nau_i\":%d,  \"nau_f\": %d}", NauDataVar.nau_i, NauDataVar.nau_f);
   1621a:	1d3b      	adds	r3, r7, #4
   1621c:	881b      	ldrh	r3, [r3, #0]
   1621e:	0019      	movs	r1, r3
   16220:	1d3b      	adds	r3, r7, #4
   16222:	885b      	ldrh	r3, [r3, #2]
   16224:	4a10      	ldr	r2, [pc, #64]	; (16268 <MQTT_HandleNauMessages+0x68>)
   16226:	4811      	ldr	r0, [pc, #68]	; (1626c <MQTT_HandleNauMessages+0x6c>)
   16228:	9300      	str	r3, [sp, #0]
   1622a:	000b      	movs	r3, r1
   1622c:	213f      	movs	r1, #63	; 0x3f
   1622e:	4c10      	ldr	r4, [pc, #64]	; (16270 <MQTT_HandleNauMessages+0x70>)
   16230:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, NAU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16232:	4b0e      	ldr	r3, [pc, #56]	; (1626c <MQTT_HandleNauMessages+0x6c>)
   16234:	0018      	movs	r0, r3
   16236:	4b0f      	ldr	r3, [pc, #60]	; (16274 <MQTT_HandleNauMessages+0x74>)
   16238:	4798      	blx	r3
   1623a:	0004      	movs	r4, r0
   1623c:	4a0b      	ldr	r2, [pc, #44]	; (1626c <MQTT_HandleNauMessages+0x6c>)
   1623e:	490e      	ldr	r1, [pc, #56]	; (16278 <MQTT_HandleNauMessages+0x78>)
   16240:	480e      	ldr	r0, [pc, #56]	; (1627c <MQTT_HandleNauMessages+0x7c>)
   16242:	2300      	movs	r3, #0
   16244:	9301      	str	r3, [sp, #4]
   16246:	2301      	movs	r3, #1
   16248:	9300      	str	r3, [sp, #0]
   1624a:	0023      	movs	r3, r4
   1624c:	4c0c      	ldr	r4, [pc, #48]	; (16280 <MQTT_HandleNauMessages+0x80>)
   1624e:	47a0      	blx	r4
		SerialConsoleWriteString("NAU DATA POSTED\r\n");
   16250:	4b0c      	ldr	r3, [pc, #48]	; (16284 <MQTT_HandleNauMessages+0x84>)
   16252:	0018      	movs	r0, r3
   16254:	4b0c      	ldr	r3, [pc, #48]	; (16288 <MQTT_HandleNauMessages+0x88>)
   16256:	4798      	blx	r3
	}
}
   16258:	46c0      	nop			; (mov r8, r8)
   1625a:	46bd      	mov	sp, r7
   1625c:	b003      	add	sp, #12
   1625e:	bd90      	pop	{r4, r7, pc}
   16260:	20000600 	.word	0x20000600
   16264:	0001a035 	.word	0x0001a035
   16268:	000366f8 	.word	0x000366f8
   1626c:	20000020 	.word	0x20000020
   16270:	00034869 	.word	0x00034869
   16274:	000349ab 	.word	0x000349ab
   16278:	00036714 	.word	0x00036714
   1627c:	20000864 	.word	0x20000864
   16280:	0002ebb5 	.word	0x0002ebb5
   16284:	00036728 	.word	0x00036728
   16288:	0001ce35 	.word	0x0001ce35

0001628c <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   1628c:	b590      	push	{r4, r7, lr}
   1628e:	b08d      	sub	sp, #52	; 0x34
   16290:	af02      	add	r7, sp, #8
   16292:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   16294:	2064      	movs	r0, #100	; 0x64
   16296:	4b73      	ldr	r3, [pc, #460]	; (16464 <vWifiTask+0x1d8>)
   16298:	4798      	blx	r3
    init_state();
   1629a:	4b73      	ldr	r3, [pc, #460]	; (16468 <vWifiTask+0x1dc>)
   1629c:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1629e:	2200      	movs	r2, #0
   162a0:	2104      	movs	r1, #4
   162a2:	2005      	movs	r0, #5
   162a4:	4b71      	ldr	r3, [pc, #452]	; (1646c <vWifiTask+0x1e0>)
   162a6:	4798      	blx	r3
   162a8:	0002      	movs	r2, r0
   162aa:	4b71      	ldr	r3, [pc, #452]	; (16470 <vWifiTask+0x1e4>)
   162ac:	601a      	str	r2, [r3, #0]
	xQueueTestBuffer = xQueueCreate(5, sizeof(struct TestPacket));
   162ae:	2200      	movs	r2, #0
   162b0:	2101      	movs	r1, #1
   162b2:	2005      	movs	r0, #5
   162b4:	4b6d      	ldr	r3, [pc, #436]	; (1646c <vWifiTask+0x1e0>)
   162b6:	4798      	blx	r3
   162b8:	0002      	movs	r2, r0
   162ba:	4b6e      	ldr	r3, [pc, #440]	; (16474 <vWifiTask+0x1e8>)
   162bc:	601a      	str	r2, [r3, #0]
	xQueueNauBuffer = xQueueCreate(5, sizeof(struct NauPacket));
   162be:	2200      	movs	r2, #0
   162c0:	2104      	movs	r1, #4
   162c2:	2005      	movs	r0, #5
   162c4:	4b69      	ldr	r3, [pc, #420]	; (1646c <vWifiTask+0x1e0>)
   162c6:	4798      	blx	r3
   162c8:	0002      	movs	r2, r0
   162ca:	4b6b      	ldr	r3, [pc, #428]	; (16478 <vWifiTask+0x1ec>)
   162cc:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueTestBuffer == NULL || xQueueNauBuffer == NULL) {
   162ce:	4b68      	ldr	r3, [pc, #416]	; (16470 <vWifiTask+0x1e4>)
   162d0:	681b      	ldr	r3, [r3, #0]
   162d2:	2b00      	cmp	r3, #0
   162d4:	d007      	beq.n	162e6 <vWifiTask+0x5a>
   162d6:	4b67      	ldr	r3, [pc, #412]	; (16474 <vWifiTask+0x1e8>)
   162d8:	681b      	ldr	r3, [r3, #0]
   162da:	2b00      	cmp	r3, #0
   162dc:	d003      	beq.n	162e6 <vWifiTask+0x5a>
   162de:	4b66      	ldr	r3, [pc, #408]	; (16478 <vWifiTask+0x1ec>)
   162e0:	681b      	ldr	r3, [r3, #0]
   162e2:	2b00      	cmp	r3, #0
   162e4:	d103      	bne.n	162ee <vWifiTask+0x62>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   162e6:	4b65      	ldr	r3, [pc, #404]	; (1647c <vWifiTask+0x1f0>)
   162e8:	0018      	movs	r0, r3
   162ea:	4b65      	ldr	r3, [pc, #404]	; (16480 <vWifiTask+0x1f4>)
   162ec:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   162ee:	4b65      	ldr	r3, [pc, #404]	; (16484 <vWifiTask+0x1f8>)
   162f0:	0018      	movs	r0, r3
   162f2:	4b63      	ldr	r3, [pc, #396]	; (16480 <vWifiTask+0x1f4>)
   162f4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   162f6:	4b64      	ldr	r3, [pc, #400]	; (16488 <vWifiTask+0x1fc>)
   162f8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   162fa:	4b64      	ldr	r3, [pc, #400]	; (1648c <vWifiTask+0x200>)
   162fc:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   162fe:	4b64      	ldr	r3, [pc, #400]	; (16490 <vWifiTask+0x204>)
   16300:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   16302:	4b64      	ldr	r3, [pc, #400]	; (16494 <vWifiTask+0x208>)
   16304:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16306:	4b64      	ldr	r3, [pc, #400]	; (16498 <vWifiTask+0x20c>)
   16308:	4798      	blx	r3
    configure_extint_callbacks();
   1630a:	4b64      	ldr	r3, [pc, #400]	; (1649c <vWifiTask+0x210>)
   1630c:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1630e:	230c      	movs	r3, #12
   16310:	18fb      	adds	r3, r7, r3
   16312:	2218      	movs	r2, #24
   16314:	2100      	movs	r1, #0
   16316:	0018      	movs	r0, r3
   16318:	4b61      	ldr	r3, [pc, #388]	; (164a0 <vWifiTask+0x214>)
   1631a:	4798      	blx	r3

    nm_bsp_init();
   1631c:	4b61      	ldr	r3, [pc, #388]	; (164a4 <vWifiTask+0x218>)
   1631e:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   16320:	230c      	movs	r3, #12
   16322:	18fb      	adds	r3, r7, r3
   16324:	4a60      	ldr	r2, [pc, #384]	; (164a8 <vWifiTask+0x21c>)
   16326:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16328:	2327      	movs	r3, #39	; 0x27
   1632a:	18fc      	adds	r4, r7, r3
   1632c:	230c      	movs	r3, #12
   1632e:	18fb      	adds	r3, r7, r3
   16330:	0018      	movs	r0, r3
   16332:	4b5e      	ldr	r3, [pc, #376]	; (164ac <vWifiTask+0x220>)
   16334:	4798      	blx	r3
   16336:	0003      	movs	r3, r0
   16338:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1633a:	2327      	movs	r3, #39	; 0x27
   1633c:	18fb      	adds	r3, r7, r3
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	b25b      	sxtb	r3, r3
   16342:	2b00      	cmp	r3, #0
   16344:	d009      	beq.n	1635a <vWifiTask+0xce>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16346:	2327      	movs	r3, #39	; 0x27
   16348:	18fb      	adds	r3, r7, r3
   1634a:	2200      	movs	r2, #0
   1634c:	569a      	ldrsb	r2, [r3, r2]
   1634e:	4b58      	ldr	r3, [pc, #352]	; (164b0 <vWifiTask+0x224>)
   16350:	0019      	movs	r1, r3
   16352:	2001      	movs	r0, #1
   16354:	4b57      	ldr	r3, [pc, #348]	; (164b4 <vWifiTask+0x228>)
   16356:	4798      	blx	r3
        while (1) {
   16358:	e7fe      	b.n	16358 <vWifiTask+0xcc>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1635a:	4a57      	ldr	r2, [pc, #348]	; (164b8 <vWifiTask+0x22c>)
   1635c:	4b57      	ldr	r3, [pc, #348]	; (164bc <vWifiTask+0x230>)
   1635e:	0019      	movs	r1, r3
   16360:	2001      	movs	r0, #1
   16362:	4b54      	ldr	r3, [pc, #336]	; (164b4 <vWifiTask+0x228>)
   16364:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16366:	4b56      	ldr	r3, [pc, #344]	; (164c0 <vWifiTask+0x234>)
   16368:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1636a:	4a56      	ldr	r2, [pc, #344]	; (164c4 <vWifiTask+0x238>)
   1636c:	4b56      	ldr	r3, [pc, #344]	; (164c8 <vWifiTask+0x23c>)
   1636e:	0011      	movs	r1, r2
   16370:	0018      	movs	r0, r3
   16372:	4b56      	ldr	r3, [pc, #344]	; (164cc <vWifiTask+0x240>)
   16374:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16376:	4a56      	ldr	r2, [pc, #344]	; (164d0 <vWifiTask+0x244>)
   16378:	484f      	ldr	r0, [pc, #316]	; (164b8 <vWifiTask+0x22c>)
   1637a:	23ff      	movs	r3, #255	; 0xff
   1637c:	9300      	str	r3, [sp, #0]
   1637e:	0013      	movs	r3, r2
   16380:	2202      	movs	r2, #2
   16382:	2102      	movs	r1, #2
   16384:	4c53      	ldr	r4, [pc, #332]	; (164d4 <vWifiTask+0x248>)
   16386:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16388:	e006      	b.n	16398 <vWifiTask+0x10c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1638a:	2000      	movs	r0, #0
   1638c:	4b52      	ldr	r3, [pc, #328]	; (164d8 <vWifiTask+0x24c>)
   1638e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16390:	4b52      	ldr	r3, [pc, #328]	; (164dc <vWifiTask+0x250>)
   16392:	0018      	movs	r0, r3
   16394:	4b52      	ldr	r3, [pc, #328]	; (164e0 <vWifiTask+0x254>)
   16396:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16398:	2002      	movs	r0, #2
   1639a:	4b52      	ldr	r3, [pc, #328]	; (164e4 <vWifiTask+0x258>)
   1639c:	4798      	blx	r3
   1639e:	0003      	movs	r3, r0
   163a0:	001a      	movs	r2, r3
   163a2:	2301      	movs	r3, #1
   163a4:	4053      	eors	r3, r2
   163a6:	b2db      	uxtb	r3, r3
   163a8:	2b00      	cmp	r3, #0
   163aa:	d1ee      	bne.n	1638a <vWifiTask+0xfe>
    }

    vTaskDelay(1000);
   163ac:	23fa      	movs	r3, #250	; 0xfa
   163ae:	009b      	lsls	r3, r3, #2
   163b0:	0018      	movs	r0, r3
   163b2:	4b2c      	ldr	r3, [pc, #176]	; (16464 <vWifiTask+0x1d8>)
   163b4:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   163b6:	4b4c      	ldr	r3, [pc, #304]	; (164e8 <vWifiTask+0x25c>)
   163b8:	2201      	movs	r2, #1
   163ba:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   163bc:	4b4a      	ldr	r3, [pc, #296]	; (164e8 <vWifiTask+0x25c>)
   163be:	781b      	ldrb	r3, [r3, #0]
   163c0:	b25b      	sxtb	r3, r3
   163c2:	2b01      	cmp	r3, #1
   163c4:	d00b      	beq.n	163de <vWifiTask+0x152>
   163c6:	dc02      	bgt.n	163ce <vWifiTask+0x142>
   163c8:	2b00      	cmp	r3, #0
   163ca:	d005      	beq.n	163d8 <vWifiTask+0x14c>
   163cc:	e010      	b.n	163f0 <vWifiTask+0x164>
   163ce:	2b02      	cmp	r3, #2
   163d0:	d008      	beq.n	163e4 <vWifiTask+0x158>
   163d2:	2b03      	cmp	r3, #3
   163d4:	d009      	beq.n	163ea <vWifiTask+0x15e>
   163d6:	e00b      	b.n	163f0 <vWifiTask+0x164>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   163d8:	4b44      	ldr	r3, [pc, #272]	; (164ec <vWifiTask+0x260>)
   163da:	4798      	blx	r3

                break;
   163dc:	e00c      	b.n	163f8 <vWifiTask+0x16c>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   163de:	4b44      	ldr	r3, [pc, #272]	; (164f0 <vWifiTask+0x264>)
   163e0:	4798      	blx	r3
                break;
   163e2:	e009      	b.n	163f8 <vWifiTask+0x16c>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   163e4:	4b43      	ldr	r3, [pc, #268]	; (164f4 <vWifiTask+0x268>)
   163e6:	4798      	blx	r3
                break;
   163e8:	e006      	b.n	163f8 <vWifiTask+0x16c>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   163ea:	4b43      	ldr	r3, [pc, #268]	; (164f8 <vWifiTask+0x26c>)
   163ec:	4798      	blx	r3
                break;
   163ee:	e003      	b.n	163f8 <vWifiTask+0x16c>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   163f0:	4b3d      	ldr	r3, [pc, #244]	; (164e8 <vWifiTask+0x25c>)
   163f2:	2200      	movs	r2, #0
   163f4:	701a      	strb	r2, [r3, #0]
                break;
   163f6:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   163f8:	230b      	movs	r3, #11
   163fa:	18fb      	adds	r3, r7, r3
   163fc:	2200      	movs	r2, #0
   163fe:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   16400:	4b1b      	ldr	r3, [pc, #108]	; (16470 <vWifiTask+0x1e4>)
   16402:	681b      	ldr	r3, [r3, #0]
   16404:	220b      	movs	r2, #11
   16406:	18b9      	adds	r1, r7, r2
   16408:	2200      	movs	r2, #0
   1640a:	0018      	movs	r0, r3
   1640c:	4b3b      	ldr	r3, [pc, #236]	; (164fc <vWifiTask+0x270>)
   1640e:	4798      	blx	r3
   16410:	0003      	movs	r3, r0
   16412:	2b01      	cmp	r3, #1
   16414:	d105      	bne.n	16422 <vWifiTask+0x196>
            wifiStateMachine = DataToReceive;  // Update new state
   16416:	230b      	movs	r3, #11
   16418:	18fb      	adds	r3, r7, r3
   1641a:	781b      	ldrb	r3, [r3, #0]
   1641c:	b25a      	sxtb	r2, r3
   1641e:	4b32      	ldr	r3, [pc, #200]	; (164e8 <vWifiTask+0x25c>)
   16420:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   16422:	4b37      	ldr	r3, [pc, #220]	; (16500 <vWifiTask+0x274>)
   16424:	781b      	ldrb	r3, [r3, #0]
   16426:	b2db      	uxtb	r3, r3
   16428:	2b00      	cmp	r3, #0
   1642a:	d017      	beq.n	1645c <vWifiTask+0x1d0>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1642c:	4b35      	ldr	r3, [pc, #212]	; (16504 <vWifiTask+0x278>)
   1642e:	0018      	movs	r0, r3
   16430:	4b35      	ldr	r3, [pc, #212]	; (16508 <vWifiTask+0x27c>)
   16432:	4798      	blx	r3
   16434:	0004      	movs	r4, r0
   16436:	4a33      	ldr	r2, [pc, #204]	; (16504 <vWifiTask+0x278>)
   16438:	4934      	ldr	r1, [pc, #208]	; (1650c <vWifiTask+0x280>)
   1643a:	4835      	ldr	r0, [pc, #212]	; (16510 <vWifiTask+0x284>)
   1643c:	2300      	movs	r3, #0
   1643e:	9301      	str	r3, [sp, #4]
   16440:	2301      	movs	r3, #1
   16442:	9300      	str	r3, [sp, #0]
   16444:	0023      	movs	r3, r4
   16446:	4c33      	ldr	r4, [pc, #204]	; (16514 <vWifiTask+0x288>)
   16448:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1644a:	4a2e      	ldr	r2, [pc, #184]	; (16504 <vWifiTask+0x278>)
   1644c:	4b32      	ldr	r3, [pc, #200]	; (16518 <vWifiTask+0x28c>)
   1644e:	0019      	movs	r1, r3
   16450:	2001      	movs	r0, #1
   16452:	4b18      	ldr	r3, [pc, #96]	; (164b4 <vWifiTask+0x228>)
   16454:	4798      	blx	r3
            isPressed = false;
   16456:	4b2a      	ldr	r3, [pc, #168]	; (16500 <vWifiTask+0x274>)
   16458:	2200      	movs	r2, #0
   1645a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1645c:	2064      	movs	r0, #100	; 0x64
   1645e:	4b01      	ldr	r3, [pc, #4]	; (16464 <vWifiTask+0x1d8>)
   16460:	4798      	blx	r3
    while (1) {
   16462:	e7ab      	b.n	163bc <vWifiTask+0x130>
   16464:	0001b1e1 	.word	0x0001b1e1
   16468:	00015081 	.word	0x00015081
   1646c:	000194d5 	.word	0x000194d5
   16470:	200005f8 	.word	0x200005f8
   16474:	200005fc 	.word	0x200005fc
   16478:	20000600 	.word	0x20000600
   1647c:	0003673c 	.word	0x0003673c
   16480:	0001ce35 	.word	0x0001ce35
   16484:	00036764 	.word	0x00036764
   16488:	00015abd 	.word	0x00015abd
   1648c:	00015af9 	.word	0x00015af9
   16490:	00015d91 	.word	0x00015d91
   16494:	000159d9 	.word	0x000159d9
   16498:	00015e49 	.word	0x00015e49
   1649c:	00015e89 	.word	0x00015e89
   164a0:	0003460f 	.word	0x0003460f
   164a4:	0001f3a9 	.word	0x0001f3a9
   164a8:	00015885 	.word	0x00015885
   164ac:	00020e81 	.word	0x00020e81
   164b0:	00036780 	.word	0x00036780
   164b4:	0001cf21 	.word	0x0001cf21
   164b8:	00036310 	.word	0x00036310
   164bc:	000367ac 	.word	0x000367ac
   164c0:	000245e1 	.word	0x000245e1
   164c4:	00015ba1 	.word	0x00015ba1
   164c8:	00015b6d 	.word	0x00015b6d
   164cc:	00024679 	.word	0x00024679
   164d0:	00036304 	.word	0x00036304
   164d4:	00021091 	.word	0x00021091
   164d8:	00021075 	.word	0x00021075
   164dc:	20004874 	.word	0x20004874
   164e0:	00031895 	.word	0x00031895
   164e4:	000150f1 	.word	0x000150f1
   164e8:	200005f5 	.word	0x200005f5
   164ec:	000160a1 	.word	0x000160a1
   164f0:	0001613d 	.word	0x0001613d
   164f4:	00015f01 	.word	0x00015f01
   164f8:	00015f95 	.word	0x00015f95
   164fc:	0001a035 	.word	0x0001a035
   16500:	20000c9c 	.word	0x20000c9c
   16504:	20000060 	.word	0x20000060
   16508:	000349ab 	.word	0x000349ab
   1650c:	000367d0 	.word	0x000367d0
   16510:	20000864 	.word	0x20000864
   16514:	0002ebb5 	.word	0x0002ebb5
   16518:	000367ec 	.word	0x000367ec

0001651c <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   1651c:	b590      	push	{r4, r7, lr}
   1651e:	b083      	sub	sp, #12
   16520:	af00      	add	r7, sp, #0
   16522:	0002      	movs	r2, r0
   16524:	1dfb      	adds	r3, r7, #7
   16526:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   16528:	1dfb      	adds	r3, r7, #7
   1652a:	781b      	ldrb	r3, [r3, #0]
   1652c:	2b03      	cmp	r3, #3
   1652e:	d806      	bhi.n	1653e <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   16530:	4b05      	ldr	r3, [pc, #20]	; (16548 <WifiHandlerSetState+0x2c>)
   16532:	6818      	ldr	r0, [r3, #0]
   16534:	1df9      	adds	r1, r7, #7
   16536:	2300      	movs	r3, #0
   16538:	220a      	movs	r2, #10
   1653a:	4c04      	ldr	r4, [pc, #16]	; (1654c <WifiHandlerSetState+0x30>)
   1653c:	47a0      	blx	r4
    }
}
   1653e:	46c0      	nop			; (mov r8, r8)
   16540:	46bd      	mov	sp, r7
   16542:	b003      	add	sp, #12
   16544:	bd90      	pop	{r4, r7, pc}
   16546:	46c0      	nop			; (mov r8, r8)
   16548:	200005f8 	.word	0x200005f8
   1654c:	0001977d 	.word	0x0001977d

00016550 <WifiAddTestDataToQueue>:


int WifiAddTestDataToQueue(struct TestPacket *test)
{
   16550:	b590      	push	{r4, r7, lr}
   16552:	b085      	sub	sp, #20
   16554:	af00      	add	r7, sp, #0
   16556:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueTestBuffer, test, (TickType_t)10);
   16558:	4b06      	ldr	r3, [pc, #24]	; (16574 <WifiAddTestDataToQueue+0x24>)
   1655a:	6818      	ldr	r0, [r3, #0]
   1655c:	6879      	ldr	r1, [r7, #4]
   1655e:	2300      	movs	r3, #0
   16560:	220a      	movs	r2, #10
   16562:	4c05      	ldr	r4, [pc, #20]	; (16578 <WifiAddTestDataToQueue+0x28>)
   16564:	47a0      	blx	r4
   16566:	0003      	movs	r3, r0
   16568:	60fb      	str	r3, [r7, #12]
	return error;
   1656a:	68fb      	ldr	r3, [r7, #12]
}
   1656c:	0018      	movs	r0, r3
   1656e:	46bd      	mov	sp, r7
   16570:	b005      	add	sp, #20
   16572:	bd90      	pop	{r4, r7, pc}
   16574:	200005fc 	.word	0x200005fc
   16578:	0001977d 	.word	0x0001977d

0001657c <WifiAddNauDataToQueue>:

int WifiAddNauDataToQueue(struct NauPacket *nau)
{
   1657c:	b590      	push	{r4, r7, lr}
   1657e:	b085      	sub	sp, #20
   16580:	af00      	add	r7, sp, #0
   16582:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueNauBuffer, nau, (TickType_t)10);
   16584:	4b06      	ldr	r3, [pc, #24]	; (165a0 <WifiAddNauDataToQueue+0x24>)
   16586:	6818      	ldr	r0, [r3, #0]
   16588:	6879      	ldr	r1, [r7, #4]
   1658a:	2300      	movs	r3, #0
   1658c:	220a      	movs	r2, #10
   1658e:	4c05      	ldr	r4, [pc, #20]	; (165a4 <WifiAddNauDataToQueue+0x28>)
   16590:	47a0      	blx	r4
   16592:	0003      	movs	r3, r0
   16594:	60fb      	str	r3, [r7, #12]
	return error;
   16596:	68fb      	ldr	r3, [r7, #12]
   16598:	0018      	movs	r0, r3
   1659a:	46bd      	mov	sp, r7
   1659c:	b005      	add	sp, #20
   1659e:	bd90      	pop	{r4, r7, pc}
   165a0:	20000600 	.word	0x20000600
   165a4:	0001977d 	.word	0x0001977d

000165a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   165a8:	b580      	push	{r7, lr}
   165aa:	b082      	sub	sp, #8
   165ac:	af00      	add	r7, sp, #0
   165ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   165b0:	687b      	ldr	r3, [r7, #4]
   165b2:	2200      	movs	r2, #0
   165b4:	701a      	strb	r2, [r3, #0]
}
   165b6:	46c0      	nop			; (mov r8, r8)
   165b8:	46bd      	mov	sp, r7
   165ba:	b002      	add	sp, #8
   165bc:	bd80      	pop	{r7, pc}
	...

000165c0 <system_apb_clock_set_mask>:
{
   165c0:	b580      	push	{r7, lr}
   165c2:	b082      	sub	sp, #8
   165c4:	af00      	add	r7, sp, #0
   165c6:	0002      	movs	r2, r0
   165c8:	6039      	str	r1, [r7, #0]
   165ca:	1dfb      	adds	r3, r7, #7
   165cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   165ce:	1dfb      	adds	r3, r7, #7
   165d0:	781b      	ldrb	r3, [r3, #0]
   165d2:	2b01      	cmp	r3, #1
   165d4:	d00a      	beq.n	165ec <system_apb_clock_set_mask+0x2c>
   165d6:	2b02      	cmp	r3, #2
   165d8:	d00f      	beq.n	165fa <system_apb_clock_set_mask+0x3a>
   165da:	2b00      	cmp	r3, #0
   165dc:	d114      	bne.n	16608 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   165de:	4b0e      	ldr	r3, [pc, #56]	; (16618 <system_apb_clock_set_mask+0x58>)
   165e0:	4a0d      	ldr	r2, [pc, #52]	; (16618 <system_apb_clock_set_mask+0x58>)
   165e2:	6991      	ldr	r1, [r2, #24]
   165e4:	683a      	ldr	r2, [r7, #0]
   165e6:	430a      	orrs	r2, r1
   165e8:	619a      	str	r2, [r3, #24]
			break;
   165ea:	e00f      	b.n	1660c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   165ec:	4b0a      	ldr	r3, [pc, #40]	; (16618 <system_apb_clock_set_mask+0x58>)
   165ee:	4a0a      	ldr	r2, [pc, #40]	; (16618 <system_apb_clock_set_mask+0x58>)
   165f0:	69d1      	ldr	r1, [r2, #28]
   165f2:	683a      	ldr	r2, [r7, #0]
   165f4:	430a      	orrs	r2, r1
   165f6:	61da      	str	r2, [r3, #28]
			break;
   165f8:	e008      	b.n	1660c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   165fa:	4b07      	ldr	r3, [pc, #28]	; (16618 <system_apb_clock_set_mask+0x58>)
   165fc:	4a06      	ldr	r2, [pc, #24]	; (16618 <system_apb_clock_set_mask+0x58>)
   165fe:	6a11      	ldr	r1, [r2, #32]
   16600:	683a      	ldr	r2, [r7, #0]
   16602:	430a      	orrs	r2, r1
   16604:	621a      	str	r2, [r3, #32]
			break;
   16606:	e001      	b.n	1660c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16608:	2317      	movs	r3, #23
   1660a:	e000      	b.n	1660e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1660c:	2300      	movs	r3, #0
}
   1660e:	0018      	movs	r0, r3
   16610:	46bd      	mov	sp, r7
   16612:	b002      	add	sp, #8
   16614:	bd80      	pop	{r7, pc}
   16616:	46c0      	nop			; (mov r8, r8)
   16618:	40000400 	.word	0x40000400

0001661c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   1661c:	b580      	push	{r7, lr}
   1661e:	b082      	sub	sp, #8
   16620:	af00      	add	r7, sp, #0
   16622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16624:	687b      	ldr	r3, [r7, #4]
   16626:	2280      	movs	r2, #128	; 0x80
   16628:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1662a:	687b      	ldr	r3, [r7, #4]
   1662c:	2200      	movs	r2, #0
   1662e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16630:	687b      	ldr	r3, [r7, #4]
   16632:	2201      	movs	r2, #1
   16634:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16636:	687b      	ldr	r3, [r7, #4]
   16638:	2200      	movs	r2, #0
   1663a:	70da      	strb	r2, [r3, #3]
}
   1663c:	46c0      	nop			; (mov r8, r8)
   1663e:	46bd      	mov	sp, r7
   16640:	b002      	add	sp, #8
   16642:	bd80      	pop	{r7, pc}

00016644 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   16644:	b580      	push	{r7, lr}
   16646:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16648:	4b05      	ldr	r3, [pc, #20]	; (16660 <system_is_debugger_present+0x1c>)
   1664a:	789b      	ldrb	r3, [r3, #2]
   1664c:	b2db      	uxtb	r3, r3
   1664e:	001a      	movs	r2, r3
   16650:	2302      	movs	r3, #2
   16652:	4013      	ands	r3, r2
   16654:	1e5a      	subs	r2, r3, #1
   16656:	4193      	sbcs	r3, r2
   16658:	b2db      	uxtb	r3, r3
}
   1665a:	0018      	movs	r0, r3
   1665c:	46bd      	mov	sp, r7
   1665e:	bd80      	pop	{r7, pc}
   16660:	41002000 	.word	0x41002000

00016664 <system_interrupt_enter_critical_section>:
{
   16664:	b580      	push	{r7, lr}
   16666:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16668:	4b02      	ldr	r3, [pc, #8]	; (16674 <system_interrupt_enter_critical_section+0x10>)
   1666a:	4798      	blx	r3
}
   1666c:	46c0      	nop			; (mov r8, r8)
   1666e:	46bd      	mov	sp, r7
   16670:	bd80      	pop	{r7, pc}
   16672:	46c0      	nop			; (mov r8, r8)
   16674:	000252d9 	.word	0x000252d9

00016678 <system_interrupt_leave_critical_section>:
{
   16678:	b580      	push	{r7, lr}
   1667a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1667c:	4b02      	ldr	r3, [pc, #8]	; (16688 <system_interrupt_leave_critical_section+0x10>)
   1667e:	4798      	blx	r3
}
   16680:	46c0      	nop			; (mov r8, r8)
   16682:	46bd      	mov	sp, r7
   16684:	bd80      	pop	{r7, pc}
   16686:	46c0      	nop			; (mov r8, r8)
   16688:	0002532d 	.word	0x0002532d

0001668c <system_interrupt_disable>:
{
   1668c:	b580      	push	{r7, lr}
   1668e:	b082      	sub	sp, #8
   16690:	af00      	add	r7, sp, #0
   16692:	0002      	movs	r2, r0
   16694:	1dfb      	adds	r3, r7, #7
   16696:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16698:	4a07      	ldr	r2, [pc, #28]	; (166b8 <system_interrupt_disable+0x2c>)
   1669a:	1dfb      	adds	r3, r7, #7
   1669c:	781b      	ldrb	r3, [r3, #0]
   1669e:	0019      	movs	r1, r3
   166a0:	231f      	movs	r3, #31
   166a2:	400b      	ands	r3, r1
   166a4:	2101      	movs	r1, #1
   166a6:	4099      	lsls	r1, r3
   166a8:	000b      	movs	r3, r1
   166aa:	0019      	movs	r1, r3
   166ac:	2380      	movs	r3, #128	; 0x80
   166ae:	50d1      	str	r1, [r2, r3]
}
   166b0:	46c0      	nop			; (mov r8, r8)
   166b2:	46bd      	mov	sp, r7
   166b4:	b002      	add	sp, #8
   166b6:	bd80      	pop	{r7, pc}
   166b8:	e000e100 	.word	0xe000e100

000166bc <i2c_master_is_syncing>:
{
   166bc:	b580      	push	{r7, lr}
   166be:	b084      	sub	sp, #16
   166c0:	af00      	add	r7, sp, #0
   166c2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   166c4:	687b      	ldr	r3, [r7, #4]
   166c6:	681b      	ldr	r3, [r3, #0]
   166c8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   166ca:	68fb      	ldr	r3, [r7, #12]
   166cc:	69db      	ldr	r3, [r3, #28]
   166ce:	2207      	movs	r2, #7
   166d0:	4013      	ands	r3, r2
   166d2:	1e5a      	subs	r2, r3, #1
   166d4:	4193      	sbcs	r3, r2
   166d6:	b2db      	uxtb	r3, r3
}
   166d8:	0018      	movs	r0, r3
   166da:	46bd      	mov	sp, r7
   166dc:	b004      	add	sp, #16
   166de:	bd80      	pop	{r7, pc}

000166e0 <_i2c_master_wait_for_sync>:
{
   166e0:	b580      	push	{r7, lr}
   166e2:	b082      	sub	sp, #8
   166e4:	af00      	add	r7, sp, #0
   166e6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   166e8:	46c0      	nop			; (mov r8, r8)
   166ea:	687b      	ldr	r3, [r7, #4]
   166ec:	0018      	movs	r0, r3
   166ee:	4b04      	ldr	r3, [pc, #16]	; (16700 <_i2c_master_wait_for_sync+0x20>)
   166f0:	4798      	blx	r3
   166f2:	1e03      	subs	r3, r0, #0
   166f4:	d1f9      	bne.n	166ea <_i2c_master_wait_for_sync+0xa>
}
   166f6:	46c0      	nop			; (mov r8, r8)
   166f8:	46bd      	mov	sp, r7
   166fa:	b002      	add	sp, #8
   166fc:	bd80      	pop	{r7, pc}
   166fe:	46c0      	nop			; (mov r8, r8)
   16700:	000166bd 	.word	0x000166bd

00016704 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   16704:	b580      	push	{r7, lr}
   16706:	b084      	sub	sp, #16
   16708:	af00      	add	r7, sp, #0
   1670a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1670c:	687b      	ldr	r3, [r7, #4]
   1670e:	681b      	ldr	r3, [r3, #0]
   16710:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16712:	687b      	ldr	r3, [r7, #4]
   16714:	681b      	ldr	r3, [r3, #0]
   16716:	0018      	movs	r0, r3
   16718:	4b0d      	ldr	r3, [pc, #52]	; (16750 <i2c_master_disable+0x4c>)
   1671a:	4798      	blx	r3
   1671c:	0003      	movs	r3, r0
   1671e:	0018      	movs	r0, r3
   16720:	4b0c      	ldr	r3, [pc, #48]	; (16754 <i2c_master_disable+0x50>)
   16722:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   16724:	687b      	ldr	r3, [r7, #4]
   16726:	0018      	movs	r0, r3
   16728:	4b0b      	ldr	r3, [pc, #44]	; (16758 <i2c_master_disable+0x54>)
   1672a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1672c:	68fb      	ldr	r3, [r7, #12]
   1672e:	2283      	movs	r2, #131	; 0x83
   16730:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   16732:	68fb      	ldr	r3, [r7, #12]
   16734:	2283      	movs	r2, #131	; 0x83
   16736:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   16738:	68fb      	ldr	r3, [r7, #12]
   1673a:	681b      	ldr	r3, [r3, #0]
   1673c:	2202      	movs	r2, #2
   1673e:	4393      	bics	r3, r2
   16740:	001a      	movs	r2, r3
   16742:	68fb      	ldr	r3, [r7, #12]
   16744:	601a      	str	r2, [r3, #0]

}
   16746:	46c0      	nop			; (mov r8, r8)
   16748:	46bd      	mov	sp, r7
   1674a:	b004      	add	sp, #16
   1674c:	bd80      	pop	{r7, pc}
   1674e:	46c0      	nop			; (mov r8, r8)
   16750:	000267ad 	.word	0x000267ad
   16754:	0001668d 	.word	0x0001668d
   16758:	000166e1 	.word	0x000166e1

0001675c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   1675c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1675e:	b097      	sub	sp, #92	; 0x5c
   16760:	af00      	add	r7, sp, #0
   16762:	6178      	str	r0, [r7, #20]
   16764:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   16766:	2300      	movs	r3, #0
   16768:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1676a:	2300      	movs	r3, #0
   1676c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1676e:	2300      	movs	r3, #0
   16770:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   16772:	233b      	movs	r3, #59	; 0x3b
   16774:	2210      	movs	r2, #16
   16776:	4694      	mov	ip, r2
   16778:	44bc      	add	ip, r7
   1677a:	4463      	add	r3, ip
   1677c:	2200      	movs	r2, #0
   1677e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16780:	697b      	ldr	r3, [r7, #20]
   16782:	681b      	ldr	r3, [r3, #0]
   16784:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   16786:	697b      	ldr	r3, [r7, #20]
   16788:	681b      	ldr	r3, [r3, #0]
   1678a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   1678c:	2323      	movs	r3, #35	; 0x23
   1678e:	2210      	movs	r2, #16
   16790:	18ba      	adds	r2, r7, r2
   16792:	18d4      	adds	r4, r2, r3
   16794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16796:	0018      	movs	r0, r3
   16798:	4bc0      	ldr	r3, [pc, #768]	; (16a9c <_i2c_master_set_config+0x340>)
   1679a:	4798      	blx	r3
   1679c:	0003      	movs	r3, r0
   1679e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   167a0:	230c      	movs	r3, #12
   167a2:	2210      	movs	r2, #16
   167a4:	4694      	mov	ip, r2
   167a6:	44bc      	add	ip, r7
   167a8:	4463      	add	r3, ip
   167aa:	0018      	movs	r0, r3
   167ac:	4bbc      	ldr	r3, [pc, #752]	; (16aa0 <_i2c_master_set_config+0x344>)
   167ae:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   167b0:	693b      	ldr	r3, [r7, #16]
   167b2:	69db      	ldr	r3, [r3, #28]
   167b4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   167b6:	693b      	ldr	r3, [r7, #16]
   167b8:	6a1b      	ldr	r3, [r3, #32]
   167ba:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   167bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167be:	2b00      	cmp	r3, #0
   167c0:	d106      	bne.n	167d0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   167c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167c4:	2100      	movs	r1, #0
   167c6:	0018      	movs	r0, r3
   167c8:	4bb6      	ldr	r3, [pc, #728]	; (16aa4 <_i2c_master_set_config+0x348>)
   167ca:	4798      	blx	r3
   167cc:	0003      	movs	r3, r0
   167ce:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   167d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167d2:	b2da      	uxtb	r2, r3
   167d4:	230c      	movs	r3, #12
   167d6:	2110      	movs	r1, #16
   167d8:	468c      	mov	ip, r1
   167da:	44bc      	add	ip, r7
   167dc:	4463      	add	r3, ip
   167de:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   167e0:	230c      	movs	r3, #12
   167e2:	2210      	movs	r2, #16
   167e4:	4694      	mov	ip, r2
   167e6:	44bc      	add	ip, r7
   167e8:	4463      	add	r3, ip
   167ea:	2202      	movs	r2, #2
   167ec:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   167ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167f0:	0c1b      	lsrs	r3, r3, #16
   167f2:	b2db      	uxtb	r3, r3
   167f4:	220c      	movs	r2, #12
   167f6:	2110      	movs	r1, #16
   167f8:	468c      	mov	ip, r1
   167fa:	44bc      	add	ip, r7
   167fc:	4462      	add	r2, ip
   167fe:	0011      	movs	r1, r2
   16800:	0018      	movs	r0, r3
   16802:	4ba9      	ldr	r3, [pc, #676]	; (16aa8 <_i2c_master_set_config+0x34c>)
   16804:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   16806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16808:	2b00      	cmp	r3, #0
   1680a:	d106      	bne.n	1681a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1680e:	2101      	movs	r1, #1
   16810:	0018      	movs	r0, r3
   16812:	4ba4      	ldr	r3, [pc, #656]	; (16aa4 <_i2c_master_set_config+0x348>)
   16814:	4798      	blx	r3
   16816:	0003      	movs	r3, r0
   16818:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1681a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1681c:	b2da      	uxtb	r2, r3
   1681e:	230c      	movs	r3, #12
   16820:	2110      	movs	r1, #16
   16822:	468c      	mov	ip, r1
   16824:	44bc      	add	ip, r7
   16826:	4463      	add	r3, ip
   16828:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1682a:	230c      	movs	r3, #12
   1682c:	2210      	movs	r2, #16
   1682e:	4694      	mov	ip, r2
   16830:	44bc      	add	ip, r7
   16832:	4463      	add	r3, ip
   16834:	2202      	movs	r2, #2
   16836:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   16838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1683a:	0c1b      	lsrs	r3, r3, #16
   1683c:	b2db      	uxtb	r3, r3
   1683e:	220c      	movs	r2, #12
   16840:	2110      	movs	r1, #16
   16842:	468c      	mov	ip, r1
   16844:	44bc      	add	ip, r7
   16846:	4462      	add	r2, ip
   16848:	0011      	movs	r1, r2
   1684a:	0018      	movs	r0, r3
   1684c:	4b96      	ldr	r3, [pc, #600]	; (16aa8 <_i2c_master_set_config+0x34c>)
   1684e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   16850:	693b      	ldr	r3, [r7, #16]
   16852:	8a9a      	ldrh	r2, [r3, #20]
   16854:	697b      	ldr	r3, [r7, #20]
   16856:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   16858:	693b      	ldr	r3, [r7, #16]
   1685a:	8ada      	ldrh	r2, [r3, #22]
   1685c:	697b      	ldr	r3, [r7, #20]
   1685e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   16860:	693b      	ldr	r3, [r7, #16]
   16862:	7e1b      	ldrb	r3, [r3, #24]
   16864:	2b00      	cmp	r3, #0
   16866:	d103      	bne.n	16870 <_i2c_master_set_config+0x114>
   16868:	4b90      	ldr	r3, [pc, #576]	; (16aac <_i2c_master_set_config+0x350>)
   1686a:	4798      	blx	r3
   1686c:	1e03      	subs	r3, r0, #0
   1686e:	d002      	beq.n	16876 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   16870:	2380      	movs	r3, #128	; 0x80
   16872:	657b      	str	r3, [r7, #84]	; 0x54
   16874:	e001      	b.n	1687a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   16876:	2300      	movs	r3, #0
   16878:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1687a:	693b      	ldr	r3, [r7, #16]
   1687c:	691b      	ldr	r3, [r3, #16]
   1687e:	2b00      	cmp	r3, #0
   16880:	d004      	beq.n	1688c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   16882:	693b      	ldr	r3, [r7, #16]
   16884:	691b      	ldr	r3, [r3, #16]
   16886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16888:	4313      	orrs	r3, r2
   1688a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   1688c:	693b      	ldr	r3, [r7, #16]
   1688e:	689b      	ldr	r3, [r3, #8]
   16890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16892:	4313      	orrs	r3, r2
   16894:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   16896:	693b      	ldr	r3, [r7, #16]
   16898:	2224      	movs	r2, #36	; 0x24
   1689a:	5c9b      	ldrb	r3, [r3, r2]
   1689c:	2b00      	cmp	r3, #0
   1689e:	d004      	beq.n	168aa <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   168a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168a2:	2280      	movs	r2, #128	; 0x80
   168a4:	05d2      	lsls	r2, r2, #23
   168a6:	4313      	orrs	r3, r2
   168a8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   168aa:	693b      	ldr	r3, [r7, #16]
   168ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   168ae:	2b00      	cmp	r3, #0
   168b0:	d004      	beq.n	168bc <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   168b2:	693b      	ldr	r3, [r7, #16]
   168b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   168b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   168b8:	4313      	orrs	r3, r2
   168ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   168bc:	693b      	ldr	r3, [r7, #16]
   168be:	222c      	movs	r2, #44	; 0x2c
   168c0:	5c9b      	ldrb	r3, [r3, r2]
   168c2:	2b00      	cmp	r3, #0
   168c4:	d105      	bne.n	168d2 <_i2c_master_set_config+0x176>
   168c6:	693b      	ldr	r3, [r7, #16]
   168c8:	689a      	ldr	r2, [r3, #8]
   168ca:	2380      	movs	r3, #128	; 0x80
   168cc:	049b      	lsls	r3, r3, #18
   168ce:	429a      	cmp	r2, r3
   168d0:	d104      	bne.n	168dc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   168d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168d4:	2280      	movs	r2, #128	; 0x80
   168d6:	0512      	lsls	r2, r2, #20
   168d8:	4313      	orrs	r3, r2
   168da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   168dc:	693b      	ldr	r3, [r7, #16]
   168de:	222d      	movs	r2, #45	; 0x2d
   168e0:	5c9b      	ldrb	r3, [r3, r2]
   168e2:	2b00      	cmp	r3, #0
   168e4:	d004      	beq.n	168f0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   168e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168e8:	2280      	movs	r2, #128	; 0x80
   168ea:	0412      	lsls	r2, r2, #16
   168ec:	4313      	orrs	r3, r2
   168ee:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   168f0:	693b      	ldr	r3, [r7, #16]
   168f2:	222e      	movs	r2, #46	; 0x2e
   168f4:	5c9b      	ldrb	r3, [r3, r2]
   168f6:	2b00      	cmp	r3, #0
   168f8:	d004      	beq.n	16904 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   168fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   168fc:	2280      	movs	r2, #128	; 0x80
   168fe:	03d2      	lsls	r2, r2, #15
   16900:	4313      	orrs	r3, r2
   16902:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   16904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16906:	681a      	ldr	r2, [r3, #0]
   16908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1690a:	431a      	orrs	r2, r3
   1690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1690e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   16910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16912:	2280      	movs	r2, #128	; 0x80
   16914:	0052      	lsls	r2, r2, #1
   16916:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   16918:	2323      	movs	r3, #35	; 0x23
   1691a:	2210      	movs	r2, #16
   1691c:	4694      	mov	ip, r2
   1691e:	44bc      	add	ip, r7
   16920:	4463      	add	r3, ip
   16922:	781b      	ldrb	r3, [r3, #0]
   16924:	3314      	adds	r3, #20
   16926:	b2db      	uxtb	r3, r3
   16928:	0018      	movs	r0, r3
   1692a:	4b61      	ldr	r3, [pc, #388]	; (16ab0 <_i2c_master_set_config+0x354>)
   1692c:	4798      	blx	r3
   1692e:	0003      	movs	r3, r0
   16930:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   16932:	693b      	ldr	r3, [r7, #16]
   16934:	681b      	ldr	r3, [r3, #0]
   16936:	22fa      	movs	r2, #250	; 0xfa
   16938:	0092      	lsls	r2, r2, #2
   1693a:	4353      	muls	r3, r2
   1693c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1693e:	693b      	ldr	r3, [r7, #16]
   16940:	685b      	ldr	r3, [r3, #4]
   16942:	22fa      	movs	r2, #250	; 0xfa
   16944:	0092      	lsls	r2, r2, #2
   16946:	4353      	muls	r3, r2
   16948:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1694a:	693b      	ldr	r3, [r7, #16]
   1694c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1694e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   16950:	4b58      	ldr	r3, [pc, #352]	; (16ab4 <_i2c_master_set_config+0x358>)
   16952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16954:	4798      	blx	r3
   16956:	0005      	movs	r5, r0
   16958:	000e      	movs	r6, r1
   1695a:	4b56      	ldr	r3, [pc, #344]	; (16ab4 <_i2c_master_set_config+0x358>)
   1695c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1695e:	4798      	blx	r3
   16960:	60b8      	str	r0, [r7, #8]
   16962:	60f9      	str	r1, [r7, #12]
   16964:	4b53      	ldr	r3, [pc, #332]	; (16ab4 <_i2c_master_set_config+0x358>)
   16966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16968:	4798      	blx	r3
   1696a:	4c53      	ldr	r4, [pc, #332]	; (16ab8 <_i2c_master_set_config+0x35c>)
   1696c:	4a53      	ldr	r2, [pc, #332]	; (16abc <_i2c_master_set_config+0x360>)
   1696e:	4b54      	ldr	r3, [pc, #336]	; (16ac0 <_i2c_master_set_config+0x364>)
   16970:	47a0      	blx	r4
   16972:	0003      	movs	r3, r0
   16974:	000c      	movs	r4, r1
   16976:	603b      	str	r3, [r7, #0]
   16978:	607c      	str	r4, [r7, #4]
   1697a:	4b4e      	ldr	r3, [pc, #312]	; (16ab4 <_i2c_master_set_config+0x358>)
   1697c:	6a38      	ldr	r0, [r7, #32]
   1697e:	4798      	blx	r3
   16980:	0002      	movs	r2, r0
   16982:	000b      	movs	r3, r1
   16984:	4c4c      	ldr	r4, [pc, #304]	; (16ab8 <_i2c_master_set_config+0x35c>)
   16986:	6838      	ldr	r0, [r7, #0]
   16988:	6879      	ldr	r1, [r7, #4]
   1698a:	47a0      	blx	r4
   1698c:	0003      	movs	r3, r0
   1698e:	000c      	movs	r4, r1
   16990:	0018      	movs	r0, r3
   16992:	0021      	movs	r1, r4
   16994:	4c4b      	ldr	r4, [pc, #300]	; (16ac4 <_i2c_master_set_config+0x368>)
   16996:	2200      	movs	r2, #0
   16998:	4b4b      	ldr	r3, [pc, #300]	; (16ac8 <_i2c_master_set_config+0x36c>)
   1699a:	47a0      	blx	r4
   1699c:	0003      	movs	r3, r0
   1699e:	000c      	movs	r4, r1
   169a0:	001a      	movs	r2, r3
   169a2:	0023      	movs	r3, r4
   169a4:	4c44      	ldr	r4, [pc, #272]	; (16ab8 <_i2c_master_set_config+0x35c>)
   169a6:	68b8      	ldr	r0, [r7, #8]
   169a8:	68f9      	ldr	r1, [r7, #12]
   169aa:	47a0      	blx	r4
   169ac:	0003      	movs	r3, r0
   169ae:	000c      	movs	r4, r1
   169b0:	001a      	movs	r2, r3
   169b2:	0023      	movs	r3, r4
   169b4:	4c45      	ldr	r4, [pc, #276]	; (16acc <_i2c_master_set_config+0x370>)
   169b6:	0028      	movs	r0, r5
   169b8:	0031      	movs	r1, r6
   169ba:	47a0      	blx	r4
   169bc:	0003      	movs	r3, r0
   169be:	000c      	movs	r4, r1
   169c0:	001d      	movs	r5, r3
   169c2:	0026      	movs	r6, r4
   169c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169c6:	005a      	lsls	r2, r3, #1
   169c8:	4b3a      	ldr	r3, [pc, #232]	; (16ab4 <_i2c_master_set_config+0x358>)
   169ca:	0010      	movs	r0, r2
   169cc:	4798      	blx	r3
   169ce:	0002      	movs	r2, r0
   169d0:	000b      	movs	r3, r1
   169d2:	4c3c      	ldr	r4, [pc, #240]	; (16ac4 <_i2c_master_set_config+0x368>)
   169d4:	0028      	movs	r0, r5
   169d6:	0031      	movs	r1, r6
   169d8:	47a0      	blx	r4
   169da:	0003      	movs	r3, r0
   169dc:	000c      	movs	r4, r1
   169de:	0018      	movs	r0, r3
   169e0:	0021      	movs	r1, r4
   169e2:	4c3a      	ldr	r4, [pc, #232]	; (16acc <_i2c_master_set_config+0x370>)
   169e4:	2200      	movs	r2, #0
   169e6:	4b3a      	ldr	r3, [pc, #232]	; (16ad0 <_i2c_master_set_config+0x374>)
   169e8:	47a0      	blx	r4
   169ea:	0003      	movs	r3, r0
   169ec:	000c      	movs	r4, r1
   169ee:	001d      	movs	r5, r3
   169f0:	0026      	movs	r6, r4
   169f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169f4:	005a      	lsls	r2, r3, #1
   169f6:	4b2f      	ldr	r3, [pc, #188]	; (16ab4 <_i2c_master_set_config+0x358>)
   169f8:	0010      	movs	r0, r2
   169fa:	4798      	blx	r3
   169fc:	0002      	movs	r2, r0
   169fe:	000b      	movs	r3, r1
   16a00:	4c34      	ldr	r4, [pc, #208]	; (16ad4 <_i2c_master_set_config+0x378>)
   16a02:	0028      	movs	r0, r5
   16a04:	0031      	movs	r1, r6
   16a06:	47a0      	blx	r4
   16a08:	0003      	movs	r3, r0
   16a0a:	000c      	movs	r4, r1
   16a0c:	0019      	movs	r1, r3
   16a0e:	0022      	movs	r2, r4
   16a10:	4b31      	ldr	r3, [pc, #196]	; (16ad8 <_i2c_master_set_config+0x37c>)
   16a12:	0008      	movs	r0, r1
   16a14:	0011      	movs	r1, r2
   16a16:	4798      	blx	r3
   16a18:	0003      	movs	r3, r0
   16a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   16a1c:	693b      	ldr	r3, [r7, #16]
   16a1e:	689a      	ldr	r2, [r3, #8]
   16a20:	2380      	movs	r3, #128	; 0x80
   16a22:	049b      	lsls	r3, r3, #18
   16a24:	429a      	cmp	r2, r3
   16a26:	d16a      	bne.n	16afe <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16a28:	4b22      	ldr	r3, [pc, #136]	; (16ab4 <_i2c_master_set_config+0x358>)
   16a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16a2c:	4798      	blx	r3
   16a2e:	4c25      	ldr	r4, [pc, #148]	; (16ac4 <_i2c_master_set_config+0x368>)
   16a30:	0002      	movs	r2, r0
   16a32:	000b      	movs	r3, r1
   16a34:	47a0      	blx	r4
   16a36:	0003      	movs	r3, r0
   16a38:	000c      	movs	r4, r1
   16a3a:	001d      	movs	r5, r3
   16a3c:	0026      	movs	r6, r4
   16a3e:	4b1d      	ldr	r3, [pc, #116]	; (16ab4 <_i2c_master_set_config+0x358>)
   16a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16a42:	4798      	blx	r3
   16a44:	4c1c      	ldr	r4, [pc, #112]	; (16ab8 <_i2c_master_set_config+0x35c>)
   16a46:	2200      	movs	r2, #0
   16a48:	4b24      	ldr	r3, [pc, #144]	; (16adc <_i2c_master_set_config+0x380>)
   16a4a:	47a0      	blx	r4
   16a4c:	0003      	movs	r3, r0
   16a4e:	000c      	movs	r4, r1
   16a50:	001a      	movs	r2, r3
   16a52:	0023      	movs	r3, r4
   16a54:	4c1f      	ldr	r4, [pc, #124]	; (16ad4 <_i2c_master_set_config+0x378>)
   16a56:	0028      	movs	r0, r5
   16a58:	0031      	movs	r1, r6
   16a5a:	47a0      	blx	r4
   16a5c:	0003      	movs	r3, r0
   16a5e:	000c      	movs	r4, r1
   16a60:	0018      	movs	r0, r3
   16a62:	0021      	movs	r1, r4
   16a64:	4c19      	ldr	r4, [pc, #100]	; (16acc <_i2c_master_set_config+0x370>)
   16a66:	2200      	movs	r2, #0
   16a68:	4b19      	ldr	r3, [pc, #100]	; (16ad0 <_i2c_master_set_config+0x374>)
   16a6a:	47a0      	blx	r4
   16a6c:	0003      	movs	r3, r0
   16a6e:	000c      	movs	r4, r1
   16a70:	0019      	movs	r1, r3
   16a72:	0022      	movs	r2, r4
   16a74:	4b18      	ldr	r3, [pc, #96]	; (16ad8 <_i2c_master_set_config+0x37c>)
   16a76:	0008      	movs	r0, r1
   16a78:	0011      	movs	r1, r2
   16a7a:	4798      	blx	r3
   16a7c:	0003      	movs	r3, r0
   16a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   16a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16a82:	2b00      	cmp	r3, #0
   16a84:	d02e      	beq.n	16ae4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   16a86:	4b16      	ldr	r3, [pc, #88]	; (16ae0 <_i2c_master_set_config+0x384>)
   16a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16a8c:	4798      	blx	r3
   16a8e:	0003      	movs	r3, r0
   16a90:	1e9a      	subs	r2, r3, #2
   16a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16a94:	1ad3      	subs	r3, r2, r3
   16a96:	653b      	str	r3, [r7, #80]	; 0x50
   16a98:	e031      	b.n	16afe <_i2c_master_set_config+0x3a2>
   16a9a:	46c0      	nop			; (mov r8, r8)
   16a9c:	000266dd 	.word	0x000266dd
   16aa0:	0001661d 	.word	0x0001661d
   16aa4:	00026521 	.word	0x00026521
   16aa8:	000292cd 	.word	0x000292cd
   16aac:	00016645 	.word	0x00016645
   16ab0:	00029091 	.word	0x00029091
   16ab4:	000342ed 	.word	0x000342ed
   16ab8:	00033759 	.word	0x00033759
   16abc:	e826d695 	.word	0xe826d695
   16ac0:	3e112e0b 	.word	0x3e112e0b
   16ac4:	00032ad1 	.word	0x00032ad1
   16ac8:	40240000 	.word	0x40240000
   16acc:	00033c59 	.word	0x00033c59
   16ad0:	3ff00000 	.word	0x3ff00000
   16ad4:	000330f1 	.word	0x000330f1
   16ad8:	00034285 	.word	0x00034285
   16adc:	40080000 	.word	0x40080000
   16ae0:	00031b55 	.word	0x00031b55
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   16ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16ae6:	005a      	lsls	r2, r3, #1
   16ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16aea:	18d3      	adds	r3, r2, r3
   16aec:	1e5a      	subs	r2, r3, #1
   16aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16af0:	0059      	lsls	r1, r3, #1
   16af2:	4b1d      	ldr	r3, [pc, #116]	; (16b68 <_i2c_master_set_config+0x40c>)
   16af4:	0010      	movs	r0, r2
   16af6:	4798      	blx	r3
   16af8:	0003      	movs	r3, r0
   16afa:	3b01      	subs	r3, #1
   16afc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   16afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b00:	2bff      	cmp	r3, #255	; 0xff
   16b02:	dc08      	bgt.n	16b16 <_i2c_master_set_config+0x3ba>
   16b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b06:	2b00      	cmp	r3, #0
   16b08:	db05      	blt.n	16b16 <_i2c_master_set_config+0x3ba>
   16b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16b0c:	2bff      	cmp	r3, #255	; 0xff
   16b0e:	dc02      	bgt.n	16b16 <_i2c_master_set_config+0x3ba>
   16b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16b12:	2b00      	cmp	r3, #0
   16b14:	da06      	bge.n	16b24 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   16b16:	233b      	movs	r3, #59	; 0x3b
   16b18:	2210      	movs	r2, #16
   16b1a:	4694      	mov	ip, r2
   16b1c:	44bc      	add	ip, r7
   16b1e:	4463      	add	r3, ip
   16b20:	2240      	movs	r2, #64	; 0x40
   16b22:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16b24:	233b      	movs	r3, #59	; 0x3b
   16b26:	2210      	movs	r2, #16
   16b28:	4694      	mov	ip, r2
   16b2a:	44bc      	add	ip, r7
   16b2c:	4463      	add	r3, ip
   16b2e:	781b      	ldrb	r3, [r3, #0]
   16b30:	2b40      	cmp	r3, #64	; 0x40
   16b32:	d00e      	beq.n	16b52 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b36:	22ff      	movs	r2, #255	; 0xff
   16b38:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16b3c:	041b      	lsls	r3, r3, #16
   16b3e:	0019      	movs	r1, r3
   16b40:	23ff      	movs	r3, #255	; 0xff
   16b42:	041b      	lsls	r3, r3, #16
   16b44:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16b46:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16b4a:	0612      	lsls	r2, r2, #24
   16b4c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16b50:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   16b52:	233b      	movs	r3, #59	; 0x3b
   16b54:	2210      	movs	r2, #16
   16b56:	4694      	mov	ip, r2
   16b58:	44bc      	add	ip, r7
   16b5a:	4463      	add	r3, ip
   16b5c:	781b      	ldrb	r3, [r3, #0]
}
   16b5e:	0018      	movs	r0, r3
   16b60:	46bd      	mov	sp, r7
   16b62:	b017      	add	sp, #92	; 0x5c
   16b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b66:	46c0      	nop			; (mov r8, r8)
   16b68:	00031b55 	.word	0x00031b55

00016b6c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   16b6c:	b590      	push	{r4, r7, lr}
   16b6e:	b08b      	sub	sp, #44	; 0x2c
   16b70:	af00      	add	r7, sp, #0
   16b72:	60f8      	str	r0, [r7, #12]
   16b74:	60b9      	str	r1, [r7, #8]
   16b76:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   16b78:	68fb      	ldr	r3, [r7, #12]
   16b7a:	68ba      	ldr	r2, [r7, #8]
   16b7c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16b7e:	68fb      	ldr	r3, [r7, #12]
   16b80:	681b      	ldr	r3, [r3, #0]
   16b82:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16b84:	68fb      	ldr	r3, [r7, #12]
   16b86:	681b      	ldr	r3, [r3, #0]
   16b88:	0018      	movs	r0, r3
   16b8a:	4b3b      	ldr	r3, [pc, #236]	; (16c78 <i2c_master_init+0x10c>)
   16b8c:	4798      	blx	r3
   16b8e:	0003      	movs	r3, r0
   16b90:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   16b92:	6a3b      	ldr	r3, [r7, #32]
   16b94:	3302      	adds	r3, #2
   16b96:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16b98:	6a3b      	ldr	r3, [r7, #32]
   16b9a:	3314      	adds	r3, #20
   16b9c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   16b9e:	2201      	movs	r2, #1
   16ba0:	69fb      	ldr	r3, [r7, #28]
   16ba2:	409a      	lsls	r2, r3
   16ba4:	0013      	movs	r3, r2
   16ba6:	0019      	movs	r1, r3
   16ba8:	2002      	movs	r0, #2
   16baa:	4b34      	ldr	r3, [pc, #208]	; (16c7c <i2c_master_init+0x110>)
   16bac:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16bae:	2314      	movs	r3, #20
   16bb0:	18fb      	adds	r3, r7, r3
   16bb2:	0018      	movs	r0, r3
   16bb4:	4b32      	ldr	r3, [pc, #200]	; (16c80 <i2c_master_init+0x114>)
   16bb6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16bb8:	687b      	ldr	r3, [r7, #4]
   16bba:	7b1a      	ldrb	r2, [r3, #12]
   16bbc:	2314      	movs	r3, #20
   16bbe:	18fb      	adds	r3, r7, r3
   16bc0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   16bc2:	69bb      	ldr	r3, [r7, #24]
   16bc4:	b2db      	uxtb	r3, r3
   16bc6:	2214      	movs	r2, #20
   16bc8:	18ba      	adds	r2, r7, r2
   16bca:	0011      	movs	r1, r2
   16bcc:	0018      	movs	r0, r3
   16bce:	4b2d      	ldr	r3, [pc, #180]	; (16c84 <i2c_master_init+0x118>)
   16bd0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   16bd2:	69bb      	ldr	r3, [r7, #24]
   16bd4:	b2db      	uxtb	r3, r3
   16bd6:	0018      	movs	r0, r3
   16bd8:	4b2b      	ldr	r3, [pc, #172]	; (16c88 <i2c_master_init+0x11c>)
   16bda:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   16bdc:	687b      	ldr	r3, [r7, #4]
   16bde:	7b1b      	ldrb	r3, [r3, #12]
   16be0:	2100      	movs	r1, #0
   16be2:	0018      	movs	r0, r3
   16be4:	4b29      	ldr	r3, [pc, #164]	; (16c8c <i2c_master_init+0x120>)
   16be6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   16be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bea:	681b      	ldr	r3, [r3, #0]
   16bec:	2202      	movs	r2, #2
   16bee:	4013      	ands	r3, r2
   16bf0:	d001      	beq.n	16bf6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   16bf2:	231c      	movs	r3, #28
   16bf4:	e03b      	b.n	16c6e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   16bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bf8:	681b      	ldr	r3, [r3, #0]
   16bfa:	2201      	movs	r2, #1
   16bfc:	4013      	ands	r3, r2
   16bfe:	d001      	beq.n	16c04 <i2c_master_init+0x98>
		return STATUS_BUSY;
   16c00:	2305      	movs	r3, #5
   16c02:	e034      	b.n	16c6e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16c04:	68fb      	ldr	r3, [r7, #12]
   16c06:	681b      	ldr	r3, [r3, #0]
   16c08:	2217      	movs	r2, #23
   16c0a:	18bc      	adds	r4, r7, r2
   16c0c:	0018      	movs	r0, r3
   16c0e:	4b1a      	ldr	r3, [pc, #104]	; (16c78 <i2c_master_init+0x10c>)
   16c10:	4798      	blx	r3
   16c12:	0003      	movs	r3, r0
   16c14:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   16c16:	4a1e      	ldr	r2, [pc, #120]	; (16c90 <i2c_master_init+0x124>)
   16c18:	2317      	movs	r3, #23
   16c1a:	18fb      	adds	r3, r7, r3
   16c1c:	781b      	ldrb	r3, [r3, #0]
   16c1e:	0011      	movs	r1, r2
   16c20:	0018      	movs	r0, r3
   16c22:	4b1c      	ldr	r3, [pc, #112]	; (16c94 <i2c_master_init+0x128>)
   16c24:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16c26:	2317      	movs	r3, #23
   16c28:	18fb      	adds	r3, r7, r3
   16c2a:	781a      	ldrb	r2, [r3, #0]
   16c2c:	4b1a      	ldr	r3, [pc, #104]	; (16c98 <i2c_master_init+0x12c>)
   16c2e:	0092      	lsls	r2, r2, #2
   16c30:	68f9      	ldr	r1, [r7, #12]
   16c32:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16c34:	68fb      	ldr	r3, [r7, #12]
   16c36:	2200      	movs	r2, #0
   16c38:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   16c3a:	68fb      	ldr	r3, [r7, #12]
   16c3c:	2200      	movs	r2, #0
   16c3e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   16c40:	68fb      	ldr	r3, [r7, #12]
   16c42:	2200      	movs	r2, #0
   16c44:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   16c46:	68fb      	ldr	r3, [r7, #12]
   16c48:	2200      	movs	r2, #0
   16c4a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   16c4c:	68fb      	ldr	r3, [r7, #12]
   16c4e:	2225      	movs	r2, #37	; 0x25
   16c50:	2100      	movs	r1, #0
   16c52:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   16c54:	68fb      	ldr	r3, [r7, #12]
   16c56:	2200      	movs	r2, #0
   16c58:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   16c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c5c:	2214      	movs	r2, #20
   16c5e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   16c60:	687a      	ldr	r2, [r7, #4]
   16c62:	68fb      	ldr	r3, [r7, #12]
   16c64:	0011      	movs	r1, r2
   16c66:	0018      	movs	r0, r3
   16c68:	4b0c      	ldr	r3, [pc, #48]	; (16c9c <i2c_master_init+0x130>)
   16c6a:	4798      	blx	r3
   16c6c:	0003      	movs	r3, r0
}
   16c6e:	0018      	movs	r0, r3
   16c70:	46bd      	mov	sp, r7
   16c72:	b00b      	add	sp, #44	; 0x2c
   16c74:	bd90      	pop	{r4, r7, pc}
   16c76:	46c0      	nop			; (mov r8, r8)
   16c78:	000266dd 	.word	0x000266dd
   16c7c:	000165c1 	.word	0x000165c1
   16c80:	000165a9 	.word	0x000165a9
   16c84:	00028f6d 	.word	0x00028f6d
   16c88:	00028fb1 	.word	0x00028fb1
   16c8c:	00026495 	.word	0x00026495
   16c90:	00013575 	.word	0x00013575
   16c94:	00026741 	.word	0x00026741
   16c98:	20005bcc 	.word	0x20005bcc
   16c9c:	0001675d 	.word	0x0001675d

00016ca0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   16ca0:	b580      	push	{r7, lr}
   16ca2:	b084      	sub	sp, #16
   16ca4:	af00      	add	r7, sp, #0
   16ca6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16ca8:	687b      	ldr	r3, [r7, #4]
   16caa:	681b      	ldr	r3, [r3, #0]
   16cac:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16cae:	687b      	ldr	r3, [r7, #4]
   16cb0:	0018      	movs	r0, r3
   16cb2:	4b0f      	ldr	r3, [pc, #60]	; (16cf0 <i2c_master_reset+0x50>)
   16cb4:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   16cb6:	687b      	ldr	r3, [r7, #4]
   16cb8:	0018      	movs	r0, r3
   16cba:	4b0e      	ldr	r3, [pc, #56]	; (16cf4 <i2c_master_reset+0x54>)
   16cbc:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   16cbe:	4b0e      	ldr	r3, [pc, #56]	; (16cf8 <i2c_master_reset+0x58>)
   16cc0:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   16cc2:	687b      	ldr	r3, [r7, #4]
   16cc4:	681b      	ldr	r3, [r3, #0]
   16cc6:	0018      	movs	r0, r3
   16cc8:	4b0c      	ldr	r3, [pc, #48]	; (16cfc <i2c_master_reset+0x5c>)
   16cca:	4798      	blx	r3
   16ccc:	0003      	movs	r3, r0
   16cce:	0018      	movs	r0, r3
   16cd0:	4b0b      	ldr	r3, [pc, #44]	; (16d00 <i2c_master_reset+0x60>)
   16cd2:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   16cd4:	4b0b      	ldr	r3, [pc, #44]	; (16d04 <i2c_master_reset+0x64>)
   16cd6:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16cd8:	687b      	ldr	r3, [r7, #4]
   16cda:	0018      	movs	r0, r3
   16cdc:	4b04      	ldr	r3, [pc, #16]	; (16cf0 <i2c_master_reset+0x50>)
   16cde:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   16ce0:	68fb      	ldr	r3, [r7, #12]
   16ce2:	2201      	movs	r2, #1
   16ce4:	601a      	str	r2, [r3, #0]
}
   16ce6:	46c0      	nop			; (mov r8, r8)
   16ce8:	46bd      	mov	sp, r7
   16cea:	b004      	add	sp, #16
   16cec:	bd80      	pop	{r7, pc}
   16cee:	46c0      	nop			; (mov r8, r8)
   16cf0:	000166e1 	.word	0x000166e1
   16cf4:	00016705 	.word	0x00016705
   16cf8:	00016665 	.word	0x00016665
   16cfc:	000267ad 	.word	0x000267ad
   16d00:	000290e9 	.word	0x000290e9
   16d04:	00016679 	.word	0x00016679

00016d08 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   16d08:	b580      	push	{r7, lr}
   16d0a:	b084      	sub	sp, #16
   16d0c:	af00      	add	r7, sp, #0
   16d0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16d10:	687b      	ldr	r3, [r7, #4]
   16d12:	681b      	ldr	r3, [r3, #0]
   16d14:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   16d16:	68fb      	ldr	r3, [r7, #12]
   16d18:	7e1b      	ldrb	r3, [r3, #24]
   16d1a:	b2db      	uxtb	r3, r3
   16d1c:	001a      	movs	r2, r3
   16d1e:	2302      	movs	r3, #2
   16d20:	4013      	ands	r3, r2
   16d22:	d00b      	beq.n	16d3c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   16d24:	68fb      	ldr	r3, [r7, #12]
   16d26:	2202      	movs	r2, #2
   16d28:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   16d2a:	68fb      	ldr	r3, [r7, #12]
   16d2c:	8b5b      	ldrh	r3, [r3, #26]
   16d2e:	b29b      	uxth	r3, r3
   16d30:	001a      	movs	r2, r3
   16d32:	2302      	movs	r3, #2
   16d34:	4013      	ands	r3, r2
   16d36:	d011      	beq.n	16d5c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   16d38:	2341      	movs	r3, #65	; 0x41
   16d3a:	e010      	b.n	16d5e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   16d3c:	68fb      	ldr	r3, [r7, #12]
   16d3e:	8b5b      	ldrh	r3, [r3, #26]
   16d40:	b29b      	uxth	r3, r3
   16d42:	001a      	movs	r2, r3
   16d44:	2304      	movs	r3, #4
   16d46:	4013      	ands	r3, r2
   16d48:	d008      	beq.n	16d5c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   16d4a:	68fb      	ldr	r3, [r7, #12]
   16d4c:	685b      	ldr	r3, [r3, #4]
   16d4e:	22c0      	movs	r2, #192	; 0xc0
   16d50:	0292      	lsls	r2, r2, #10
   16d52:	431a      	orrs	r2, r3
   16d54:	68fb      	ldr	r3, [r7, #12]
   16d56:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   16d58:	2318      	movs	r3, #24
   16d5a:	e000      	b.n	16d5e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   16d5c:	2300      	movs	r3, #0
}
   16d5e:	0018      	movs	r0, r3
   16d60:	46bd      	mov	sp, r7
   16d62:	b004      	add	sp, #16
   16d64:	bd80      	pop	{r7, pc}

00016d66 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   16d66:	b580      	push	{r7, lr}
   16d68:	b084      	sub	sp, #16
   16d6a:	af00      	add	r7, sp, #0
   16d6c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16d6e:	687b      	ldr	r3, [r7, #4]
   16d70:	681b      	ldr	r3, [r3, #0]
   16d72:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   16d74:	230e      	movs	r3, #14
   16d76:	18fb      	adds	r3, r7, r3
   16d78:	2200      	movs	r2, #0
   16d7a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d7c:	e00f      	b.n	16d9e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   16d7e:	230e      	movs	r3, #14
   16d80:	18fb      	adds	r3, r7, r3
   16d82:	220e      	movs	r2, #14
   16d84:	18ba      	adds	r2, r7, r2
   16d86:	8812      	ldrh	r2, [r2, #0]
   16d88:	3201      	adds	r2, #1
   16d8a:	801a      	strh	r2, [r3, #0]
   16d8c:	687b      	ldr	r3, [r7, #4]
   16d8e:	891b      	ldrh	r3, [r3, #8]
   16d90:	220e      	movs	r2, #14
   16d92:	18ba      	adds	r2, r7, r2
   16d94:	8812      	ldrh	r2, [r2, #0]
   16d96:	429a      	cmp	r2, r3
   16d98:	d301      	bcc.n	16d9e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   16d9a:	2312      	movs	r3, #18
   16d9c:	e00e      	b.n	16dbc <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16d9e:	68bb      	ldr	r3, [r7, #8]
   16da0:	7e1b      	ldrb	r3, [r3, #24]
   16da2:	b2db      	uxtb	r3, r3
   16da4:	001a      	movs	r2, r3
   16da6:	2301      	movs	r3, #1
   16da8:	4013      	ands	r3, r2
   16daa:	d106      	bne.n	16dba <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   16dac:	68bb      	ldr	r3, [r7, #8]
   16dae:	7e1b      	ldrb	r3, [r3, #24]
   16db0:	b2db      	uxtb	r3, r3
   16db2:	001a      	movs	r2, r3
   16db4:	2302      	movs	r3, #2
   16db6:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16db8:	d0e1      	beq.n	16d7e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   16dba:	2300      	movs	r3, #0
}
   16dbc:	0018      	movs	r0, r3
   16dbe:	46bd      	mov	sp, r7
   16dc0:	b004      	add	sp, #16
   16dc2:	bd80      	pop	{r7, pc}

00016dc4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   16dc4:	b590      	push	{r4, r7, lr}
   16dc6:	b085      	sub	sp, #20
   16dc8:	af00      	add	r7, sp, #0
   16dca:	6078      	str	r0, [r7, #4]
   16dcc:	000a      	movs	r2, r1
   16dce:	1cfb      	adds	r3, r7, #3
   16dd0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16dd2:	687b      	ldr	r3, [r7, #4]
   16dd4:	681b      	ldr	r3, [r3, #0]
   16dd6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   16dd8:	68fb      	ldr	r3, [r7, #12]
   16dda:	685b      	ldr	r3, [r3, #4]
   16ddc:	2280      	movs	r2, #128	; 0x80
   16dde:	02d2      	lsls	r2, r2, #11
   16de0:	431a      	orrs	r2, r3
   16de2:	68fb      	ldr	r3, [r7, #12]
   16de4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   16de6:	1cfb      	adds	r3, r7, #3
   16de8:	781a      	ldrb	r2, [r3, #0]
   16dea:	68fb      	ldr	r3, [r7, #12]
   16dec:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   16dee:	230b      	movs	r3, #11
   16df0:	18fc      	adds	r4, r7, r3
   16df2:	687b      	ldr	r3, [r7, #4]
   16df4:	0018      	movs	r0, r3
   16df6:	4b07      	ldr	r3, [pc, #28]	; (16e14 <_i2c_master_send_hs_master_code+0x50>)
   16df8:	4798      	blx	r3
   16dfa:	0003      	movs	r3, r0
   16dfc:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   16dfe:	68fb      	ldr	r3, [r7, #12]
   16e00:	2201      	movs	r2, #1
   16e02:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   16e04:	230b      	movs	r3, #11
   16e06:	18fb      	adds	r3, r7, r3
   16e08:	781b      	ldrb	r3, [r3, #0]
}
   16e0a:	0018      	movs	r0, r3
   16e0c:	46bd      	mov	sp, r7
   16e0e:	b005      	add	sp, #20
   16e10:	bd90      	pop	{r4, r7, pc}
   16e12:	46c0      	nop			; (mov r8, r8)
   16e14:	00016d67 	.word	0x00016d67

00016e18 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   16e18:	b580      	push	{r7, lr}
   16e1a:	af00      	add	r7, sp, #0
   16e1c:	2000      	movs	r0, #0
   16e1e:	4b02      	ldr	r3, [pc, #8]	; (16e28 <TC3_Handler+0x10>)
   16e20:	4798      	blx	r3
   16e22:	46c0      	nop			; (mov r8, r8)
   16e24:	46bd      	mov	sp, r7
   16e26:	bd80      	pop	{r7, pc}
   16e28:	00016e55 	.word	0x00016e55

00016e2c <TC4_Handler>:
   16e2c:	b580      	push	{r7, lr}
   16e2e:	af00      	add	r7, sp, #0
   16e30:	2001      	movs	r0, #1
   16e32:	4b02      	ldr	r3, [pc, #8]	; (16e3c <TC4_Handler+0x10>)
   16e34:	4798      	blx	r3
   16e36:	46c0      	nop			; (mov r8, r8)
   16e38:	46bd      	mov	sp, r7
   16e3a:	bd80      	pop	{r7, pc}
   16e3c:	00016e55 	.word	0x00016e55

00016e40 <TC5_Handler>:
   16e40:	b580      	push	{r7, lr}
   16e42:	af00      	add	r7, sp, #0
   16e44:	2002      	movs	r0, #2
   16e46:	4b02      	ldr	r3, [pc, #8]	; (16e50 <TC5_Handler+0x10>)
   16e48:	4798      	blx	r3
   16e4a:	46c0      	nop			; (mov r8, r8)
   16e4c:	46bd      	mov	sp, r7
   16e4e:	bd80      	pop	{r7, pc}
   16e50:	00016e55 	.word	0x00016e55

00016e54 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   16e54:	b580      	push	{r7, lr}
   16e56:	b084      	sub	sp, #16
   16e58:	af00      	add	r7, sp, #0
   16e5a:	0002      	movs	r2, r0
   16e5c:	1dfb      	adds	r3, r7, #7
   16e5e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   16e60:	1dfb      	adds	r3, r7, #7
   16e62:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   16e64:	4b28      	ldr	r3, [pc, #160]	; (16f08 <_tc_interrupt_handler+0xb4>)
   16e66:	0092      	lsls	r2, r2, #2
   16e68:	58d3      	ldr	r3, [r2, r3]
   16e6a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16e6c:	68fb      	ldr	r3, [r7, #12]
   16e6e:	681b      	ldr	r3, [r3, #0]
   16e70:	7b9b      	ldrb	r3, [r3, #14]
   16e72:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   16e74:	68fa      	ldr	r2, [r7, #12]
   16e76:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16e78:	4013      	ands	r3, r2
   16e7a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   16e7c:	68fb      	ldr	r3, [r7, #12]
   16e7e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   16e80:	230b      	movs	r3, #11
   16e82:	18fb      	adds	r3, r7, r3
   16e84:	400a      	ands	r2, r1
   16e86:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   16e88:	230b      	movs	r3, #11
   16e8a:	18fb      	adds	r3, r7, r3
   16e8c:	781b      	ldrb	r3, [r3, #0]
   16e8e:	2201      	movs	r2, #1
   16e90:	4013      	ands	r3, r2
   16e92:	d008      	beq.n	16ea6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   16e94:	68fb      	ldr	r3, [r7, #12]
   16e96:	689b      	ldr	r3, [r3, #8]
   16e98:	68fa      	ldr	r2, [r7, #12]
   16e9a:	0010      	movs	r0, r2
   16e9c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   16e9e:	68fb      	ldr	r3, [r7, #12]
   16ea0:	681b      	ldr	r3, [r3, #0]
   16ea2:	2201      	movs	r2, #1
   16ea4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   16ea6:	230b      	movs	r3, #11
   16ea8:	18fb      	adds	r3, r7, r3
   16eaa:	781b      	ldrb	r3, [r3, #0]
   16eac:	2202      	movs	r2, #2
   16eae:	4013      	ands	r3, r2
   16eb0:	d008      	beq.n	16ec4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   16eb2:	68fb      	ldr	r3, [r7, #12]
   16eb4:	68db      	ldr	r3, [r3, #12]
   16eb6:	68fa      	ldr	r2, [r7, #12]
   16eb8:	0010      	movs	r0, r2
   16eba:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   16ebc:	68fb      	ldr	r3, [r7, #12]
   16ebe:	681b      	ldr	r3, [r3, #0]
   16ec0:	2202      	movs	r2, #2
   16ec2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   16ec4:	230b      	movs	r3, #11
   16ec6:	18fb      	adds	r3, r7, r3
   16ec8:	781b      	ldrb	r3, [r3, #0]
   16eca:	2210      	movs	r2, #16
   16ecc:	4013      	ands	r3, r2
   16ece:	d008      	beq.n	16ee2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   16ed0:	68fb      	ldr	r3, [r7, #12]
   16ed2:	691b      	ldr	r3, [r3, #16]
   16ed4:	68fa      	ldr	r2, [r7, #12]
   16ed6:	0010      	movs	r0, r2
   16ed8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   16eda:	68fb      	ldr	r3, [r7, #12]
   16edc:	681b      	ldr	r3, [r3, #0]
   16ede:	2210      	movs	r2, #16
   16ee0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   16ee2:	230b      	movs	r3, #11
   16ee4:	18fb      	adds	r3, r7, r3
   16ee6:	781b      	ldrb	r3, [r3, #0]
   16ee8:	2220      	movs	r2, #32
   16eea:	4013      	ands	r3, r2
   16eec:	d008      	beq.n	16f00 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   16eee:	68fb      	ldr	r3, [r7, #12]
   16ef0:	695b      	ldr	r3, [r3, #20]
   16ef2:	68fa      	ldr	r2, [r7, #12]
   16ef4:	0010      	movs	r0, r2
   16ef6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   16ef8:	68fb      	ldr	r3, [r7, #12]
   16efa:	681b      	ldr	r3, [r3, #0]
   16efc:	2220      	movs	r2, #32
   16efe:	739a      	strb	r2, [r3, #14]
	}
}
   16f00:	46c0      	nop			; (mov r8, r8)
   16f02:	46bd      	mov	sp, r7
   16f04:	b004      	add	sp, #16
   16f06:	bd80      	pop	{r7, pc}
   16f08:	200049b4 	.word	0x200049b4

00016f0c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   16f0c:	b580      	push	{r7, lr}
   16f0e:	b084      	sub	sp, #16
   16f10:	af00      	add	r7, sp, #0
   16f12:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   16f14:	2300      	movs	r3, #0
   16f16:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   16f18:	687b      	ldr	r3, [r7, #4]
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	d101      	bne.n	16f22 <FreeRTOS_CLIRegisterCommand+0x16>
   16f1e:	b672      	cpsid	i
   16f20:	e7fe      	b.n	16f20 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   16f22:	2008      	movs	r0, #8
   16f24:	4b11      	ldr	r3, [pc, #68]	; (16f6c <FreeRTOS_CLIRegisterCommand+0x60>)
   16f26:	4798      	blx	r3
   16f28:	0003      	movs	r3, r0
   16f2a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   16f2c:	68bb      	ldr	r3, [r7, #8]
   16f2e:	2b00      	cmp	r3, #0
   16f30:	d101      	bne.n	16f36 <FreeRTOS_CLIRegisterCommand+0x2a>
   16f32:	b672      	cpsid	i
   16f34:	e7fe      	b.n	16f34 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   16f36:	68bb      	ldr	r3, [r7, #8]
   16f38:	2b00      	cmp	r3, #0
   16f3a:	d012      	beq.n	16f62 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   16f3c:	4b0c      	ldr	r3, [pc, #48]	; (16f70 <FreeRTOS_CLIRegisterCommand+0x64>)
   16f3e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   16f40:	68bb      	ldr	r3, [r7, #8]
   16f42:	687a      	ldr	r2, [r7, #4]
   16f44:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   16f46:	68bb      	ldr	r3, [r7, #8]
   16f48:	2200      	movs	r2, #0
   16f4a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   16f4c:	4b09      	ldr	r3, [pc, #36]	; (16f74 <FreeRTOS_CLIRegisterCommand+0x68>)
   16f4e:	681b      	ldr	r3, [r3, #0]
   16f50:	68ba      	ldr	r2, [r7, #8]
   16f52:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   16f54:	4b07      	ldr	r3, [pc, #28]	; (16f74 <FreeRTOS_CLIRegisterCommand+0x68>)
   16f56:	68ba      	ldr	r2, [r7, #8]
   16f58:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   16f5a:	4b07      	ldr	r3, [pc, #28]	; (16f78 <FreeRTOS_CLIRegisterCommand+0x6c>)
   16f5c:	4798      	blx	r3

		xReturn = pdPASS;
   16f5e:	2301      	movs	r3, #1
   16f60:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   16f62:	68fb      	ldr	r3, [r7, #12]
}
   16f64:	0018      	movs	r0, r3
   16f66:	46bd      	mov	sp, r7
   16f68:	b004      	add	sp, #16
   16f6a:	bd80      	pop	{r7, pc}
   16f6c:	00019321 	.word	0x00019321
   16f70:	000191e9 	.word	0x000191e9
   16f74:	200000f0 	.word	0x200000f0
   16f78:	0001920d 	.word	0x0001920d

00016f7c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   16f7c:	b580      	push	{r7, lr}
   16f7e:	b088      	sub	sp, #32
   16f80:	af00      	add	r7, sp, #0
   16f82:	60f8      	str	r0, [r7, #12]
   16f84:	60b9      	str	r1, [r7, #8]
   16f86:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   16f88:	2301      	movs	r3, #1
   16f8a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   16f8c:	4b3d      	ldr	r3, [pc, #244]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   16f8e:	681b      	ldr	r3, [r3, #0]
   16f90:	2b00      	cmp	r3, #0
   16f92:	d144      	bne.n	1701e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16f94:	4b3b      	ldr	r3, [pc, #236]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   16f96:	4a3c      	ldr	r2, [pc, #240]	; (17088 <FreeRTOS_CLIProcessCommand+0x10c>)
   16f98:	601a      	str	r2, [r3, #0]
   16f9a:	e03a      	b.n	17012 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   16f9c:	4b39      	ldr	r3, [pc, #228]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   16f9e:	681b      	ldr	r3, [r3, #0]
   16fa0:	681b      	ldr	r3, [r3, #0]
   16fa2:	681b      	ldr	r3, [r3, #0]
   16fa4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   16fa6:	69bb      	ldr	r3, [r7, #24]
   16fa8:	0018      	movs	r0, r3
   16faa:	4b38      	ldr	r3, [pc, #224]	; (1708c <FreeRTOS_CLIProcessCommand+0x110>)
   16fac:	4798      	blx	r3
   16fae:	0003      	movs	r3, r0
   16fb0:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   16fb2:	68fa      	ldr	r2, [r7, #12]
   16fb4:	697b      	ldr	r3, [r7, #20]
   16fb6:	18d3      	adds	r3, r2, r3
   16fb8:	781b      	ldrb	r3, [r3, #0]
   16fba:	2b20      	cmp	r3, #32
   16fbc:	d005      	beq.n	16fca <FreeRTOS_CLIProcessCommand+0x4e>
   16fbe:	68fa      	ldr	r2, [r7, #12]
   16fc0:	697b      	ldr	r3, [r7, #20]
   16fc2:	18d3      	adds	r3, r2, r3
   16fc4:	781b      	ldrb	r3, [r3, #0]
   16fc6:	2b00      	cmp	r3, #0
   16fc8:	d11e      	bne.n	17008 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   16fca:	697a      	ldr	r2, [r7, #20]
   16fcc:	69b9      	ldr	r1, [r7, #24]
   16fce:	68fb      	ldr	r3, [r7, #12]
   16fd0:	0018      	movs	r0, r3
   16fd2:	4b2f      	ldr	r3, [pc, #188]	; (17090 <FreeRTOS_CLIProcessCommand+0x114>)
   16fd4:	4798      	blx	r3
   16fd6:	1e03      	subs	r3, r0, #0
   16fd8:	d116      	bne.n	17008 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   16fda:	4b2a      	ldr	r3, [pc, #168]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   16fdc:	681b      	ldr	r3, [r3, #0]
   16fde:	681b      	ldr	r3, [r3, #0]
   16fe0:	7b1b      	ldrb	r3, [r3, #12]
   16fe2:	b25b      	sxtb	r3, r3
   16fe4:	2b00      	cmp	r3, #0
   16fe6:	db19      	blt.n	1701c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   16fe8:	68fb      	ldr	r3, [r7, #12]
   16fea:	0018      	movs	r0, r3
   16fec:	4b29      	ldr	r3, [pc, #164]	; (17094 <FreeRTOS_CLIProcessCommand+0x118>)
   16fee:	4798      	blx	r3
   16ff0:	0003      	movs	r3, r0
   16ff2:	001a      	movs	r2, r3
   16ff4:	4b23      	ldr	r3, [pc, #140]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   16ff6:	681b      	ldr	r3, [r3, #0]
   16ff8:	681b      	ldr	r3, [r3, #0]
   16ffa:	7b1b      	ldrb	r3, [r3, #12]
   16ffc:	b25b      	sxtb	r3, r3
   16ffe:	429a      	cmp	r2, r3
   17000:	d00c      	beq.n	1701c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17002:	2300      	movs	r3, #0
   17004:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17006:	e009      	b.n	1701c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17008:	4b1e      	ldr	r3, [pc, #120]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   1700a:	681b      	ldr	r3, [r3, #0]
   1700c:	685a      	ldr	r2, [r3, #4]
   1700e:	4b1d      	ldr	r3, [pc, #116]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   17010:	601a      	str	r2, [r3, #0]
   17012:	4b1c      	ldr	r3, [pc, #112]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   17014:	681b      	ldr	r3, [r3, #0]
   17016:	2b00      	cmp	r3, #0
   17018:	d1c0      	bne.n	16f9c <FreeRTOS_CLIProcessCommand+0x20>
   1701a:	e000      	b.n	1701e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1701c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1701e:	4b19      	ldr	r3, [pc, #100]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   17020:	681b      	ldr	r3, [r3, #0]
   17022:	2b00      	cmp	r3, #0
   17024:	d00c      	beq.n	17040 <FreeRTOS_CLIProcessCommand+0xc4>
   17026:	69fb      	ldr	r3, [r7, #28]
   17028:	2b00      	cmp	r3, #0
   1702a:	d109      	bne.n	17040 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1702c:	687a      	ldr	r2, [r7, #4]
   1702e:	491a      	ldr	r1, [pc, #104]	; (17098 <FreeRTOS_CLIProcessCommand+0x11c>)
   17030:	68bb      	ldr	r3, [r7, #8]
   17032:	0018      	movs	r0, r3
   17034:	4b19      	ldr	r3, [pc, #100]	; (1709c <FreeRTOS_CLIProcessCommand+0x120>)
   17036:	4798      	blx	r3
		pxCommand = NULL;
   17038:	4b12      	ldr	r3, [pc, #72]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   1703a:	2200      	movs	r2, #0
   1703c:	601a      	str	r2, [r3, #0]
   1703e:	e01c      	b.n	1707a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17040:	4b10      	ldr	r3, [pc, #64]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   17042:	681b      	ldr	r3, [r3, #0]
   17044:	2b00      	cmp	r3, #0
   17046:	d010      	beq.n	1706a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17048:	4b0e      	ldr	r3, [pc, #56]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   1704a:	681b      	ldr	r3, [r3, #0]
   1704c:	681b      	ldr	r3, [r3, #0]
   1704e:	689b      	ldr	r3, [r3, #8]
   17050:	68fa      	ldr	r2, [r7, #12]
   17052:	6879      	ldr	r1, [r7, #4]
   17054:	68b8      	ldr	r0, [r7, #8]
   17056:	4798      	blx	r3
   17058:	0003      	movs	r3, r0
   1705a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1705c:	69fb      	ldr	r3, [r7, #28]
   1705e:	2b00      	cmp	r3, #0
   17060:	d10b      	bne.n	1707a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17062:	4b08      	ldr	r3, [pc, #32]	; (17084 <FreeRTOS_CLIProcessCommand+0x108>)
   17064:	2200      	movs	r2, #0
   17066:	601a      	str	r2, [r3, #0]
   17068:	e007      	b.n	1707a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1706a:	687a      	ldr	r2, [r7, #4]
   1706c:	490c      	ldr	r1, [pc, #48]	; (170a0 <FreeRTOS_CLIProcessCommand+0x124>)
   1706e:	68bb      	ldr	r3, [r7, #8]
   17070:	0018      	movs	r0, r3
   17072:	4b0a      	ldr	r3, [pc, #40]	; (1709c <FreeRTOS_CLIProcessCommand+0x120>)
   17074:	4798      	blx	r3
		xReturn = pdFALSE;
   17076:	2300      	movs	r3, #0
   17078:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1707a:	69fb      	ldr	r3, [r7, #28]
}
   1707c:	0018      	movs	r0, r3
   1707e:	46bd      	mov	sp, r7
   17080:	b008      	add	sp, #32
   17082:	bd80      	pop	{r7, pc}
   17084:	20000ca0 	.word	0x20000ca0
   17088:	200000e8 	.word	0x200000e8
   1708c:	000349ab 	.word	0x000349ab
   17090:	000349b9 	.word	0x000349b9
   17094:	00017105 	.word	0x00017105
   17098:	00036848 	.word	0x00036848
   1709c:	000349db 	.word	0x000349db
   170a0:	000368a0 	.word	0x000368a0

000170a4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   170a4:	b580      	push	{r7, lr}
   170a6:	b086      	sub	sp, #24
   170a8:	af00      	add	r7, sp, #0
   170aa:	60f8      	str	r0, [r7, #12]
   170ac:	60b9      	str	r1, [r7, #8]
   170ae:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   170b0:	4b11      	ldr	r3, [pc, #68]	; (170f8 <prvHelpCommand+0x54>)
   170b2:	681b      	ldr	r3, [r3, #0]
   170b4:	2b00      	cmp	r3, #0
   170b6:	d102      	bne.n	170be <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   170b8:	4b0f      	ldr	r3, [pc, #60]	; (170f8 <prvHelpCommand+0x54>)
   170ba:	4a10      	ldr	r2, [pc, #64]	; (170fc <prvHelpCommand+0x58>)
   170bc:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   170be:	4b0e      	ldr	r3, [pc, #56]	; (170f8 <prvHelpCommand+0x54>)
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	681b      	ldr	r3, [r3, #0]
   170c4:	6859      	ldr	r1, [r3, #4]
   170c6:	68ba      	ldr	r2, [r7, #8]
   170c8:	68fb      	ldr	r3, [r7, #12]
   170ca:	0018      	movs	r0, r3
   170cc:	4b0c      	ldr	r3, [pc, #48]	; (17100 <prvHelpCommand+0x5c>)
   170ce:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   170d0:	4b09      	ldr	r3, [pc, #36]	; (170f8 <prvHelpCommand+0x54>)
   170d2:	681b      	ldr	r3, [r3, #0]
   170d4:	685a      	ldr	r2, [r3, #4]
   170d6:	4b08      	ldr	r3, [pc, #32]	; (170f8 <prvHelpCommand+0x54>)
   170d8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   170da:	4b07      	ldr	r3, [pc, #28]	; (170f8 <prvHelpCommand+0x54>)
   170dc:	681b      	ldr	r3, [r3, #0]
   170de:	2b00      	cmp	r3, #0
   170e0:	d102      	bne.n	170e8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   170e2:	2300      	movs	r3, #0
   170e4:	617b      	str	r3, [r7, #20]
   170e6:	e001      	b.n	170ec <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   170e8:	2301      	movs	r3, #1
   170ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   170ec:	697b      	ldr	r3, [r7, #20]
}
   170ee:	0018      	movs	r0, r3
   170f0:	46bd      	mov	sp, r7
   170f2:	b006      	add	sp, #24
   170f4:	bd80      	pop	{r7, pc}
   170f6:	46c0      	nop			; (mov r8, r8)
   170f8:	20000ca4 	.word	0x20000ca4
   170fc:	200000e8 	.word	0x200000e8
   17100:	000349db 	.word	0x000349db

00017104 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17104:	b580      	push	{r7, lr}
   17106:	b084      	sub	sp, #16
   17108:	af00      	add	r7, sp, #0
   1710a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1710c:	230f      	movs	r3, #15
   1710e:	18fb      	adds	r3, r7, r3
   17110:	2200      	movs	r2, #0
   17112:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17114:	2300      	movs	r3, #0
   17116:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17118:	e018      	b.n	1714c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1711a:	687b      	ldr	r3, [r7, #4]
   1711c:	781b      	ldrb	r3, [r3, #0]
   1711e:	2b20      	cmp	r3, #32
   17120:	d10f      	bne.n	17142 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17122:	68bb      	ldr	r3, [r7, #8]
   17124:	2b01      	cmp	r3, #1
   17126:	d00e      	beq.n	17146 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17128:	230f      	movs	r3, #15
   1712a:	18fb      	adds	r3, r7, r3
   1712c:	781b      	ldrb	r3, [r3, #0]
   1712e:	b25b      	sxtb	r3, r3
   17130:	b2db      	uxtb	r3, r3
   17132:	3301      	adds	r3, #1
   17134:	b2da      	uxtb	r2, r3
   17136:	230f      	movs	r3, #15
   17138:	18fb      	adds	r3, r7, r3
   1713a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1713c:	2301      	movs	r3, #1
   1713e:	60bb      	str	r3, [r7, #8]
   17140:	e001      	b.n	17146 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17142:	2300      	movs	r3, #0
   17144:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17146:	687b      	ldr	r3, [r7, #4]
   17148:	3301      	adds	r3, #1
   1714a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1714c:	687b      	ldr	r3, [r7, #4]
   1714e:	781b      	ldrb	r3, [r3, #0]
   17150:	2b00      	cmp	r3, #0
   17152:	d1e2      	bne.n	1711a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17154:	68bb      	ldr	r3, [r7, #8]
   17156:	2b01      	cmp	r3, #1
   17158:	d109      	bne.n	1716e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1715a:	230f      	movs	r3, #15
   1715c:	18fb      	adds	r3, r7, r3
   1715e:	781b      	ldrb	r3, [r3, #0]
   17160:	b25b      	sxtb	r3, r3
   17162:	b2db      	uxtb	r3, r3
   17164:	3b01      	subs	r3, #1
   17166:	b2da      	uxtb	r2, r3
   17168:	230f      	movs	r3, #15
   1716a:	18fb      	adds	r3, r7, r3
   1716c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1716e:	230f      	movs	r3, #15
   17170:	18fb      	adds	r3, r7, r3
   17172:	781b      	ldrb	r3, [r3, #0]
   17174:	b25b      	sxtb	r3, r3
}
   17176:	0018      	movs	r0, r3
   17178:	46bd      	mov	sp, r7
   1717a:	b004      	add	sp, #16
   1717c:	bd80      	pop	{r7, pc}
	...

00017180 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17180:	b580      	push	{r7, lr}
   17182:	b082      	sub	sp, #8
   17184:	af00      	add	r7, sp, #0
   17186:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17188:	687b      	ldr	r3, [r7, #4]
   1718a:	0018      	movs	r0, r3
   1718c:	4b03      	ldr	r3, [pc, #12]	; (1719c <prvTraceGetQueueNumber+0x1c>)
   1718e:	4798      	blx	r3
   17190:	0003      	movs	r3, r0
}
   17192:	0018      	movs	r0, r3
   17194:	46bd      	mov	sp, r7
   17196:	b002      	add	sp, #8
   17198:	bd80      	pop	{r7, pc}
   1719a:	46c0      	nop			; (mov r8, r8)
   1719c:	0001a945 	.word	0x0001a945

000171a0 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   171a0:	b580      	push	{r7, lr}
   171a2:	b082      	sub	sp, #8
   171a4:	af00      	add	r7, sp, #0
   171a6:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   171a8:	687b      	ldr	r3, [r7, #4]
   171aa:	0018      	movs	r0, r3
   171ac:	4b03      	ldr	r3, [pc, #12]	; (171bc <prvTraceGetQueueType+0x1c>)
   171ae:	4798      	blx	r3
   171b0:	0003      	movs	r3, r0
}
   171b2:	0018      	movs	r0, r3
   171b4:	46bd      	mov	sp, r7
   171b6:	b002      	add	sp, #8
   171b8:	bd80      	pop	{r7, pc}
   171ba:	46c0      	nop			; (mov r8, r8)
   171bc:	0001a971 	.word	0x0001a971

000171c0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   171c0:	b580      	push	{r7, lr}
   171c2:	b082      	sub	sp, #8
   171c4:	af00      	add	r7, sp, #0
   171c6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   171c8:	687b      	ldr	r3, [r7, #4]
   171ca:	0018      	movs	r0, r3
   171cc:	4b03      	ldr	r3, [pc, #12]	; (171dc <prvTraceGetTaskNumberLow16+0x1c>)
   171ce:	4798      	blx	r3
   171d0:	0003      	movs	r3, r0
   171d2:	b29b      	uxth	r3, r3
}
   171d4:	0018      	movs	r0, r3
   171d6:	46bd      	mov	sp, r7
   171d8:	b002      	add	sp, #8
   171da:	bd80      	pop	{r7, pc}
   171dc:	0001bca1 	.word	0x0001bca1

000171e0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   171e0:	b580      	push	{r7, lr}
   171e2:	b082      	sub	sp, #8
   171e4:	af00      	add	r7, sp, #0
   171e6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	0018      	movs	r0, r3
   171ec:	4b04      	ldr	r3, [pc, #16]	; (17200 <prvTraceGetTaskNumberHigh16+0x20>)
   171ee:	4798      	blx	r3
   171f0:	0003      	movs	r3, r0
   171f2:	0c1b      	lsrs	r3, r3, #16
   171f4:	b29b      	uxth	r3, r3
}
   171f6:	0018      	movs	r0, r3
   171f8:	46bd      	mov	sp, r7
   171fa:	b002      	add	sp, #8
   171fc:	bd80      	pop	{r7, pc}
   171fe:	46c0      	nop			; (mov r8, r8)
   17200:	0001bca1 	.word	0x0001bca1

00017204 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17204:	b580      	push	{r7, lr}
   17206:	b082      	sub	sp, #8
   17208:	af00      	add	r7, sp, #0
   1720a:	6078      	str	r0, [r7, #4]
   1720c:	000a      	movs	r2, r1
   1720e:	1cbb      	adds	r3, r7, #2
   17210:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17212:	687b      	ldr	r3, [r7, #4]
   17214:	0018      	movs	r0, r3
   17216:	4b08      	ldr	r3, [pc, #32]	; (17238 <prvTraceSetTaskNumberLow16+0x34>)
   17218:	4798      	blx	r3
   1721a:	0003      	movs	r3, r0
   1721c:	0c1b      	lsrs	r3, r3, #16
   1721e:	041a      	lsls	r2, r3, #16
   17220:	1cbb      	adds	r3, r7, #2
   17222:	881b      	ldrh	r3, [r3, #0]
   17224:	431a      	orrs	r2, r3
   17226:	687b      	ldr	r3, [r7, #4]
   17228:	0011      	movs	r1, r2
   1722a:	0018      	movs	r0, r3
   1722c:	4b03      	ldr	r3, [pc, #12]	; (1723c <prvTraceSetTaskNumberLow16+0x38>)
   1722e:	4798      	blx	r3
}
   17230:	46c0      	nop			; (mov r8, r8)
   17232:	46bd      	mov	sp, r7
   17234:	b002      	add	sp, #8
   17236:	bd80      	pop	{r7, pc}
   17238:	0001bca1 	.word	0x0001bca1
   1723c:	0001bcc9 	.word	0x0001bcc9

00017240 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17240:	b580      	push	{r7, lr}
   17242:	b082      	sub	sp, #8
   17244:	af00      	add	r7, sp, #0
   17246:	6078      	str	r0, [r7, #4]
   17248:	000a      	movs	r2, r1
   1724a:	1cbb      	adds	r3, r7, #2
   1724c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1724e:	687b      	ldr	r3, [r7, #4]
   17250:	0018      	movs	r0, r3
   17252:	4b09      	ldr	r3, [pc, #36]	; (17278 <prvTraceSetTaskNumberHigh16+0x38>)
   17254:	4798      	blx	r3
   17256:	0003      	movs	r3, r0
   17258:	041b      	lsls	r3, r3, #16
   1725a:	0c1a      	lsrs	r2, r3, #16
   1725c:	1cbb      	adds	r3, r7, #2
   1725e:	881b      	ldrh	r3, [r3, #0]
   17260:	041b      	lsls	r3, r3, #16
   17262:	431a      	orrs	r2, r3
   17264:	687b      	ldr	r3, [r7, #4]
   17266:	0011      	movs	r1, r2
   17268:	0018      	movs	r0, r3
   1726a:	4b04      	ldr	r3, [pc, #16]	; (1727c <prvTraceSetTaskNumberHigh16+0x3c>)
   1726c:	4798      	blx	r3
}
   1726e:	46c0      	nop			; (mov r8, r8)
   17270:	46bd      	mov	sp, r7
   17272:	b002      	add	sp, #8
   17274:	bd80      	pop	{r7, pc}
   17276:	46c0      	nop			; (mov r8, r8)
   17278:	0001bca1 	.word	0x0001bca1
   1727c:	0001bcc9 	.word	0x0001bcc9

00017280 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17280:	b580      	push	{r7, lr}
   17282:	b082      	sub	sp, #8
   17284:	af00      	add	r7, sp, #0
   17286:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17288:	687b      	ldr	r3, [r7, #4]
   1728a:	0018      	movs	r0, r3
   1728c:	4b03      	ldr	r3, [pc, #12]	; (1729c <prvTraceGetQueueNumberLow16+0x1c>)
   1728e:	4798      	blx	r3
   17290:	0003      	movs	r3, r0
   17292:	b29b      	uxth	r3, r3
}
   17294:	0018      	movs	r0, r3
   17296:	46bd      	mov	sp, r7
   17298:	b002      	add	sp, #8
   1729a:	bd80      	pop	{r7, pc}
   1729c:	00017181 	.word	0x00017181

000172a0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   172a0:	b580      	push	{r7, lr}
   172a2:	b082      	sub	sp, #8
   172a4:	af00      	add	r7, sp, #0
   172a6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   172a8:	687b      	ldr	r3, [r7, #4]
   172aa:	0018      	movs	r0, r3
   172ac:	4b04      	ldr	r3, [pc, #16]	; (172c0 <prvTraceGetQueueNumberHigh16+0x20>)
   172ae:	4798      	blx	r3
   172b0:	0003      	movs	r3, r0
   172b2:	0c1b      	lsrs	r3, r3, #16
   172b4:	b29b      	uxth	r3, r3
}
   172b6:	0018      	movs	r0, r3
   172b8:	46bd      	mov	sp, r7
   172ba:	b002      	add	sp, #8
   172bc:	bd80      	pop	{r7, pc}
   172be:	46c0      	nop			; (mov r8, r8)
   172c0:	00017181 	.word	0x00017181

000172c4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   172c4:	b580      	push	{r7, lr}
   172c6:	b082      	sub	sp, #8
   172c8:	af00      	add	r7, sp, #0
   172ca:	6078      	str	r0, [r7, #4]
   172cc:	000a      	movs	r2, r1
   172ce:	1cbb      	adds	r3, r7, #2
   172d0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   172d2:	687b      	ldr	r3, [r7, #4]
   172d4:	0018      	movs	r0, r3
   172d6:	4b08      	ldr	r3, [pc, #32]	; (172f8 <prvTraceSetQueueNumberLow16+0x34>)
   172d8:	4798      	blx	r3
   172da:	0003      	movs	r3, r0
   172dc:	0c1b      	lsrs	r3, r3, #16
   172de:	041a      	lsls	r2, r3, #16
   172e0:	1cbb      	adds	r3, r7, #2
   172e2:	881b      	ldrh	r3, [r3, #0]
   172e4:	431a      	orrs	r2, r3
   172e6:	687b      	ldr	r3, [r7, #4]
   172e8:	0011      	movs	r1, r2
   172ea:	0018      	movs	r0, r3
   172ec:	4b03      	ldr	r3, [pc, #12]	; (172fc <prvTraceSetQueueNumberLow16+0x38>)
   172ee:	4798      	blx	r3
}
   172f0:	46c0      	nop			; (mov r8, r8)
   172f2:	46bd      	mov	sp, r7
   172f4:	b002      	add	sp, #8
   172f6:	bd80      	pop	{r7, pc}
   172f8:	00017181 	.word	0x00017181
   172fc:	0001a959 	.word	0x0001a959

00017300 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17300:	b580      	push	{r7, lr}
   17302:	b082      	sub	sp, #8
   17304:	af00      	add	r7, sp, #0
   17306:	6078      	str	r0, [r7, #4]
   17308:	000a      	movs	r2, r1
   1730a:	1cbb      	adds	r3, r7, #2
   1730c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1730e:	687b      	ldr	r3, [r7, #4]
   17310:	0018      	movs	r0, r3
   17312:	4b09      	ldr	r3, [pc, #36]	; (17338 <prvTraceSetQueueNumberHigh16+0x38>)
   17314:	4798      	blx	r3
   17316:	0003      	movs	r3, r0
   17318:	041b      	lsls	r3, r3, #16
   1731a:	0c1a      	lsrs	r2, r3, #16
   1731c:	1cbb      	adds	r3, r7, #2
   1731e:	881b      	ldrh	r3, [r3, #0]
   17320:	041b      	lsls	r3, r3, #16
   17322:	431a      	orrs	r2, r3
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	0011      	movs	r1, r2
   17328:	0018      	movs	r0, r3
   1732a:	4b04      	ldr	r3, [pc, #16]	; (1733c <prvTraceSetQueueNumberHigh16+0x3c>)
   1732c:	4798      	blx	r3
}
   1732e:	46c0      	nop			; (mov r8, r8)
   17330:	46bd      	mov	sp, r7
   17332:	b002      	add	sp, #8
   17334:	bd80      	pop	{r7, pc}
   17336:	46c0      	nop			; (mov r8, r8)
   17338:	00017181 	.word	0x00017181
   1733c:	0001a959 	.word	0x0001a959

00017340 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17340:	b580      	push	{r7, lr}
   17342:	b084      	sub	sp, #16
   17344:	af00      	add	r7, sp, #0
   17346:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17348:	2300      	movs	r3, #0
   1734a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1734c:	2300      	movs	r3, #0
   1734e:	60bb      	str	r3, [r7, #8]
   17350:	e018      	b.n	17384 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   17352:	4b14      	ldr	r3, [pc, #80]	; (173a4 <prvAddTaskToStackMonitor+0x64>)
   17354:	68ba      	ldr	r2, [r7, #8]
   17356:	00d2      	lsls	r2, r2, #3
   17358:	58d3      	ldr	r3, [r2, r3]
   1735a:	2b00      	cmp	r3, #0
   1735c:	d10f      	bne.n	1737e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1735e:	4b11      	ldr	r3, [pc, #68]	; (173a4 <prvAddTaskToStackMonitor+0x64>)
   17360:	68ba      	ldr	r2, [r7, #8]
   17362:	00d2      	lsls	r2, r2, #3
   17364:	6879      	ldr	r1, [r7, #4]
   17366:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17368:	4a0e      	ldr	r2, [pc, #56]	; (173a4 <prvAddTaskToStackMonitor+0x64>)
   1736a:	68bb      	ldr	r3, [r7, #8]
   1736c:	00db      	lsls	r3, r3, #3
   1736e:	18d3      	adds	r3, r2, r3
   17370:	3304      	adds	r3, #4
   17372:	2201      	movs	r2, #1
   17374:	4252      	negs	r2, r2
   17376:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17378:	2301      	movs	r3, #1
   1737a:	60fb      	str	r3, [r7, #12]
			break;
   1737c:	e005      	b.n	1738a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1737e:	68bb      	ldr	r3, [r7, #8]
   17380:	3301      	adds	r3, #1
   17382:	60bb      	str	r3, [r7, #8]
   17384:	68bb      	ldr	r3, [r7, #8]
   17386:	2b09      	cmp	r3, #9
   17388:	dde3      	ble.n	17352 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1738a:	68fb      	ldr	r3, [r7, #12]
   1738c:	2b00      	cmp	r3, #0
   1738e:	d104      	bne.n	1739a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   17390:	4b05      	ldr	r3, [pc, #20]	; (173a8 <prvAddTaskToStackMonitor+0x68>)
   17392:	681b      	ldr	r3, [r3, #0]
   17394:	1c5a      	adds	r2, r3, #1
   17396:	4b04      	ldr	r3, [pc, #16]	; (173a8 <prvAddTaskToStackMonitor+0x68>)
   17398:	601a      	str	r2, [r3, #0]
	}
}
   1739a:	46c0      	nop			; (mov r8, r8)
   1739c:	46bd      	mov	sp, r7
   1739e:	b004      	add	sp, #16
   173a0:	bd80      	pop	{r7, pc}
   173a2:	46c0      	nop			; (mov r8, r8)
   173a4:	20000cac 	.word	0x20000cac
   173a8:	20000cfc 	.word	0x20000cfc

000173ac <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   173ac:	b590      	push	{r4, r7, lr}
   173ae:	b085      	sub	sp, #20
   173b0:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   173b2:	2300      	movs	r3, #0
   173b4:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   173b6:	4b2b      	ldr	r3, [pc, #172]	; (17464 <prvReportStackUsage+0xb8>)
   173b8:	681b      	ldr	r3, [r3, #0]
   173ba:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   173bc:	4b29      	ldr	r3, [pc, #164]	; (17464 <prvReportStackUsage+0xb8>)
   173be:	681a      	ldr	r2, [r3, #0]
   173c0:	4b29      	ldr	r3, [pc, #164]	; (17468 <prvReportStackUsage+0xbc>)
   173c2:	00d2      	lsls	r2, r2, #3
   173c4:	58d3      	ldr	r3, [r2, r3]
   173c6:	2b00      	cmp	r3, #0
   173c8:	d035      	beq.n	17436 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   173ca:	4b26      	ldr	r3, [pc, #152]	; (17464 <prvReportStackUsage+0xb8>)
   173cc:	681a      	ldr	r2, [r3, #0]
   173ce:	4b26      	ldr	r3, [pc, #152]	; (17468 <prvReportStackUsage+0xbc>)
   173d0:	00d2      	lsls	r2, r2, #3
   173d2:	58d3      	ldr	r3, [r2, r3]
   173d4:	0018      	movs	r0, r3
   173d6:	4b25      	ldr	r3, [pc, #148]	; (1746c <prvReportStackUsage+0xc0>)
   173d8:	4798      	blx	r3
   173da:	0003      	movs	r3, r0
   173dc:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   173de:	4b21      	ldr	r3, [pc, #132]	; (17464 <prvReportStackUsage+0xb8>)
   173e0:	681b      	ldr	r3, [r3, #0]
   173e2:	4a21      	ldr	r2, [pc, #132]	; (17468 <prvReportStackUsage+0xbc>)
   173e4:	00db      	lsls	r3, r3, #3
   173e6:	18d3      	adds	r3, r2, r3
   173e8:	3304      	adds	r3, #4
   173ea:	681a      	ldr	r2, [r3, #0]
   173ec:	687b      	ldr	r3, [r7, #4]
   173ee:	429a      	cmp	r2, r3
   173f0:	d907      	bls.n	17402 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   173f2:	4b1c      	ldr	r3, [pc, #112]	; (17464 <prvReportStackUsage+0xb8>)
   173f4:	681b      	ldr	r3, [r3, #0]
   173f6:	4a1c      	ldr	r2, [pc, #112]	; (17468 <prvReportStackUsage+0xbc>)
   173f8:	00db      	lsls	r3, r3, #3
   173fa:	18d3      	adds	r3, r2, r3
   173fc:	3304      	adds	r3, #4
   173fe:	687a      	ldr	r2, [r7, #4]
   17400:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   17402:	4b18      	ldr	r3, [pc, #96]	; (17464 <prvReportStackUsage+0xb8>)
   17404:	681a      	ldr	r2, [r3, #0]
   17406:	4b18      	ldr	r3, [pc, #96]	; (17468 <prvReportStackUsage+0xbc>)
   17408:	00d2      	lsls	r2, r2, #3
   1740a:	58d3      	ldr	r3, [r2, r3]
   1740c:	0018      	movs	r0, r3
   1740e:	4b18      	ldr	r3, [pc, #96]	; (17470 <prvReportStackUsage+0xc4>)
   17410:	4798      	blx	r3
   17412:	0003      	movs	r3, r0
   17414:	b2db      	uxtb	r3, r3
   17416:	0019      	movs	r1, r3
   17418:	4b12      	ldr	r3, [pc, #72]	; (17464 <prvReportStackUsage+0xb8>)
   1741a:	681b      	ldr	r3, [r3, #0]
   1741c:	4a12      	ldr	r2, [pc, #72]	; (17468 <prvReportStackUsage+0xbc>)
   1741e:	00db      	lsls	r3, r3, #3
   17420:	18d3      	adds	r3, r2, r3
   17422:	3304      	adds	r3, #4
   17424:	681b      	ldr	r3, [r3, #0]
   17426:	000a      	movs	r2, r1
   17428:	2103      	movs	r1, #3
   1742a:	20ea      	movs	r0, #234	; 0xea
   1742c:	4c11      	ldr	r4, [pc, #68]	; (17474 <prvReportStackUsage+0xc8>)
   1742e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   17430:	68fb      	ldr	r3, [r7, #12]
   17432:	3301      	adds	r3, #1
   17434:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   17436:	4b0b      	ldr	r3, [pc, #44]	; (17464 <prvReportStackUsage+0xb8>)
   17438:	681b      	ldr	r3, [r3, #0]
   1743a:	1c5a      	adds	r2, r3, #1
   1743c:	4b0e      	ldr	r3, [pc, #56]	; (17478 <prvReportStackUsage+0xcc>)
   1743e:	210a      	movs	r1, #10
   17440:	0010      	movs	r0, r2
   17442:	4798      	blx	r3
   17444:	000b      	movs	r3, r1
   17446:	001a      	movs	r2, r3
   17448:	4b06      	ldr	r3, [pc, #24]	; (17464 <prvReportStackUsage+0xb8>)
   1744a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1744c:	68fb      	ldr	r3, [r7, #12]
   1744e:	2b00      	cmp	r3, #0
   17450:	dc04      	bgt.n	1745c <prvReportStackUsage+0xb0>
   17452:	4b04      	ldr	r3, [pc, #16]	; (17464 <prvReportStackUsage+0xb8>)
   17454:	681a      	ldr	r2, [r3, #0]
   17456:	68bb      	ldr	r3, [r7, #8]
   17458:	429a      	cmp	r2, r3
   1745a:	d1af      	bne.n	173bc <prvReportStackUsage+0x10>
}
   1745c:	46c0      	nop			; (mov r8, r8)
   1745e:	46bd      	mov	sp, r7
   17460:	b005      	add	sp, #20
   17462:	bd90      	pop	{r4, r7, pc}
   17464:	20000d00 	.word	0x20000d00
   17468:	20000cac 	.word	0x20000cac
   1746c:	0001be41 	.word	0x0001be41
   17470:	000171c1 	.word	0x000171c1
   17474:	00017d09 	.word	0x00017d09
   17478:	00031e35 	.word	0x00031e35

0001747c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1747c:	b580      	push	{r7, lr}
   1747e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   17480:	4b02      	ldr	r3, [pc, #8]	; (1748c <prvTraceGetCurrentTaskHandle+0x10>)
   17482:	4798      	blx	r3
   17484:	0003      	movs	r3, r0
}
   17486:	0018      	movs	r0, r3
   17488:	46bd      	mov	sp, r7
   1748a:	bd80      	pop	{r7, pc}
   1748c:	0001beed 	.word	0x0001beed

00017490 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   17490:	b590      	push	{r4, r7, lr}
   17492:	b085      	sub	sp, #20
   17494:	af02      	add	r7, sp, #8
   17496:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   17498:	4b14      	ldr	r3, [pc, #80]	; (174ec <vTraceEnable+0x5c>)
   1749a:	4798      	blx	r3

	if (startOption == TRC_START)
   1749c:	687b      	ldr	r3, [r7, #4]
   1749e:	2b01      	cmp	r3, #1
   174a0:	d102      	bne.n	174a8 <vTraceEnable+0x18>
	{
		vTraceStart();
   174a2:	4b13      	ldr	r3, [pc, #76]	; (174f0 <vTraceEnable+0x60>)
   174a4:	4798      	blx	r3
   174a6:	e00e      	b.n	174c6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   174a8:	687b      	ldr	r3, [r7, #4]
   174aa:	2b02      	cmp	r3, #2
   174ac:	d104      	bne.n	174b8 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   174ae:	4b11      	ldr	r3, [pc, #68]	; (174f4 <vTraceEnable+0x64>)
   174b0:	0018      	movs	r0, r3
   174b2:	4b11      	ldr	r3, [pc, #68]	; (174f8 <vTraceEnable+0x68>)
   174b4:	4798      	blx	r3
   174b6:	e006      	b.n	174c6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   174b8:	687b      	ldr	r3, [r7, #4]
   174ba:	2b00      	cmp	r3, #0
   174bc:	d003      	beq.n	174c6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   174be:	4b0f      	ldr	r3, [pc, #60]	; (174fc <vTraceEnable+0x6c>)
   174c0:	0018      	movs	r0, r3
   174c2:	4b0d      	ldr	r3, [pc, #52]	; (174f8 <vTraceEnable+0x68>)
   174c4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   174c6:	4b0e      	ldr	r3, [pc, #56]	; (17500 <vTraceEnable+0x70>)
   174c8:	681b      	ldr	r3, [r3, #0]
   174ca:	2b00      	cmp	r3, #0
   174cc:	d10a      	bne.n	174e4 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   174ce:	2396      	movs	r3, #150	; 0x96
   174d0:	005a      	lsls	r2, r3, #1
   174d2:	490c      	ldr	r1, [pc, #48]	; (17504 <vTraceEnable+0x74>)
   174d4:	480c      	ldr	r0, [pc, #48]	; (17508 <vTraceEnable+0x78>)
   174d6:	4b0a      	ldr	r3, [pc, #40]	; (17500 <vTraceEnable+0x70>)
   174d8:	9301      	str	r3, [sp, #4]
   174da:	2304      	movs	r3, #4
   174dc:	9300      	str	r3, [sp, #0]
   174de:	2300      	movs	r3, #0
   174e0:	4c0a      	ldr	r4, [pc, #40]	; (1750c <vTraceEnable+0x7c>)
   174e2:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   174e4:	46c0      	nop			; (mov r8, r8)
   174e6:	46bd      	mov	sp, r7
   174e8:	b003      	add	sp, #12
   174ea:	bd90      	pop	{r4, r7, pc}
   174ec:	000183d5 	.word	0x000183d5
   174f0:	0001792d 	.word	0x0001792d
   174f4:	00036900 	.word	0x00036900
   174f8:	00018a7d 	.word	0x00018a7d
   174fc:	00036940 	.word	0x00036940
   17500:	20000ca8 	.word	0x20000ca8
   17504:	00036974 	.word	0x00036974
   17508:	00017511 	.word	0x00017511
   1750c:	0001ae45 	.word	0x0001ae45

00017510 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   17510:	b580      	push	{r7, lr}
   17512:	b082      	sub	sp, #8
   17514:	af00      	add	r7, sp, #0
   17516:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   17518:	4b04      	ldr	r3, [pc, #16]	; (1752c <TzCtrl+0x1c>)
   1751a:	4798      	blx	r3
   1751c:	1e03      	subs	r3, r0, #0
   1751e:	d001      	beq.n	17524 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   17520:	4b03      	ldr	r3, [pc, #12]	; (17530 <TzCtrl+0x20>)
   17522:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   17524:	2004      	movs	r0, #4
   17526:	4b03      	ldr	r3, [pc, #12]	; (17534 <TzCtrl+0x24>)
   17528:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1752a:	e7f5      	b.n	17518 <TzCtrl+0x8>
   1752c:	00017971 	.word	0x00017971
   17530:	000173ad 	.word	0x000173ad
   17534:	0001b1e1 	.word	0x0001b1e1

00017538 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   17538:	b580      	push	{r7, lr}
   1753a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1753c:	4b60      	ldr	r3, [pc, #384]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1753e:	681b      	ldr	r3, [r3, #0]
   17540:	2209      	movs	r2, #9
   17542:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   17544:	4b5e      	ldr	r3, [pc, #376]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17546:	681b      	ldr	r3, [r3, #0]
   17548:	2264      	movs	r2, #100	; 0x64
   1754a:	210a      	movs	r1, #10
   1754c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1754e:	4b5c      	ldr	r3, [pc, #368]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	2265      	movs	r2, #101	; 0x65
   17554:	210a      	movs	r1, #10
   17556:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   17558:	4b59      	ldr	r3, [pc, #356]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1755a:	681b      	ldr	r3, [r3, #0]
   1755c:	2266      	movs	r2, #102	; 0x66
   1755e:	210a      	movs	r1, #10
   17560:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   17562:	4b57      	ldr	r3, [pc, #348]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17564:	681b      	ldr	r3, [r3, #0]
   17566:	2267      	movs	r2, #103	; 0x67
   17568:	210f      	movs	r1, #15
   1756a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1756c:	4b54      	ldr	r3, [pc, #336]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1756e:	681b      	ldr	r3, [r3, #0]
   17570:	2268      	movs	r2, #104	; 0x68
   17572:	2105      	movs	r1, #5
   17574:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   17576:	4b52      	ldr	r3, [pc, #328]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17578:	681b      	ldr	r3, [r3, #0]
   1757a:	2269      	movs	r2, #105	; 0x69
   1757c:	2105      	movs	r1, #5
   1757e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   17580:	4b4f      	ldr	r3, [pc, #316]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17582:	681b      	ldr	r3, [r3, #0]
   17584:	226a      	movs	r2, #106	; 0x6a
   17586:	2105      	movs	r1, #5
   17588:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1758a:	4b4d      	ldr	r3, [pc, #308]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1758c:	681b      	ldr	r3, [r3, #0]
   1758e:	226b      	movs	r2, #107	; 0x6b
   17590:	2105      	movs	r1, #5
   17592:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   17594:	4b4a      	ldr	r3, [pc, #296]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17596:	681b      	ldr	r3, [r3, #0]
   17598:	226c      	movs	r2, #108	; 0x6c
   1759a:	2105      	movs	r1, #5
   1759c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1759e:	4b48      	ldr	r3, [pc, #288]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175a0:	681b      	ldr	r3, [r3, #0]
   175a2:	2270      	movs	r2, #112	; 0x70
   175a4:	210f      	movs	r1, #15
   175a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   175a8:	4b45      	ldr	r3, [pc, #276]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175aa:	681b      	ldr	r3, [r3, #0]
   175ac:	2271      	movs	r2, #113	; 0x71
   175ae:	210f      	movs	r1, #15
   175b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   175b2:	4b43      	ldr	r3, [pc, #268]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175b4:	681b      	ldr	r3, [r3, #0]
   175b6:	2272      	movs	r2, #114	; 0x72
   175b8:	210f      	movs	r1, #15
   175ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   175bc:	4b40      	ldr	r3, [pc, #256]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175be:	681b      	ldr	r3, [r3, #0]
   175c0:	2273      	movs	r2, #115	; 0x73
   175c2:	210f      	movs	r1, #15
   175c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   175c6:	4b3e      	ldr	r3, [pc, #248]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175c8:	681b      	ldr	r3, [r3, #0]
   175ca:	2274      	movs	r2, #116	; 0x74
   175cc:	210f      	movs	r1, #15
   175ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   175d0:	4b3b      	ldr	r3, [pc, #236]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175d2:	681b      	ldr	r3, [r3, #0]
   175d4:	2275      	movs	r2, #117	; 0x75
   175d6:	210f      	movs	r1, #15
   175d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   175da:	4b39      	ldr	r3, [pc, #228]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175dc:	681b      	ldr	r3, [r3, #0]
   175de:	2276      	movs	r2, #118	; 0x76
   175e0:	210f      	movs	r1, #15
   175e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   175e4:	4b36      	ldr	r3, [pc, #216]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175e6:	681b      	ldr	r3, [r3, #0]
   175e8:	2277      	movs	r2, #119	; 0x77
   175ea:	210f      	movs	r1, #15
   175ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   175ee:	4b34      	ldr	r3, [pc, #208]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175f0:	681b      	ldr	r3, [r3, #0]
   175f2:	2278      	movs	r2, #120	; 0x78
   175f4:	210f      	movs	r1, #15
   175f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   175f8:	4b31      	ldr	r3, [pc, #196]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   175fa:	681b      	ldr	r3, [r3, #0]
   175fc:	227c      	movs	r2, #124	; 0x7c
   175fe:	2110      	movs	r1, #16
   17600:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   17602:	4b2f      	ldr	r3, [pc, #188]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17604:	681b      	ldr	r3, [r3, #0]
   17606:	227d      	movs	r2, #125	; 0x7d
   17608:	2110      	movs	r1, #16
   1760a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1760c:	4b2c      	ldr	r3, [pc, #176]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1760e:	681b      	ldr	r3, [r3, #0]
   17610:	227e      	movs	r2, #126	; 0x7e
   17612:	2110      	movs	r1, #16
   17614:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   17616:	4b2a      	ldr	r3, [pc, #168]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17618:	681b      	ldr	r3, [r3, #0]
   1761a:	227f      	movs	r2, #127	; 0x7f
   1761c:	2113      	movs	r1, #19
   1761e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   17620:	4b27      	ldr	r3, [pc, #156]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17622:	681b      	ldr	r3, [r3, #0]
   17624:	2280      	movs	r2, #128	; 0x80
   17626:	2111      	movs	r1, #17
   17628:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1762a:	4b25      	ldr	r3, [pc, #148]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1762c:	681b      	ldr	r3, [r3, #0]
   1762e:	2281      	movs	r2, #129	; 0x81
   17630:	2110      	movs	r1, #16
   17632:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   17634:	4b22      	ldr	r3, [pc, #136]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17636:	681b      	ldr	r3, [r3, #0]
   17638:	2282      	movs	r2, #130	; 0x82
   1763a:	2113      	movs	r1, #19
   1763c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1763e:	4b20      	ldr	r3, [pc, #128]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17640:	681b      	ldr	r3, [r3, #0]
   17642:	2283      	movs	r2, #131	; 0x83
   17644:	2113      	movs	r1, #19
   17646:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   17648:	4b1d      	ldr	r3, [pc, #116]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1764a:	681b      	ldr	r3, [r3, #0]
   1764c:	2284      	movs	r2, #132	; 0x84
   1764e:	2113      	movs	r1, #19
   17650:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   17652:	4b1b      	ldr	r3, [pc, #108]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17654:	681b      	ldr	r3, [r3, #0]
   17656:	2288      	movs	r2, #136	; 0x88
   17658:	2100      	movs	r1, #0
   1765a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1765c:	4b18      	ldr	r3, [pc, #96]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1765e:	681b      	ldr	r3, [r3, #0]
   17660:	228a      	movs	r2, #138	; 0x8a
   17662:	21a0      	movs	r1, #160	; 0xa0
   17664:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   17666:	4b16      	ldr	r3, [pc, #88]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17668:	681b      	ldr	r3, [r3, #0]
   1766a:	228c      	movs	r2, #140	; 0x8c
   1766c:	21a0      	movs	r1, #160	; 0xa0
   1766e:	0049      	lsls	r1, r1, #1
   17670:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   17672:	4b13      	ldr	r3, [pc, #76]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17674:	681b      	ldr	r3, [r3, #0]
   17676:	228e      	movs	r2, #142	; 0x8e
   17678:	21f0      	movs	r1, #240	; 0xf0
   1767a:	0049      	lsls	r1, r1, #1
   1767c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1767e:	4b10      	ldr	r3, [pc, #64]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17680:	681b      	ldr	r3, [r3, #0]
   17682:	2290      	movs	r2, #144	; 0x90
   17684:	490f      	ldr	r1, [pc, #60]	; (176c4 <vTraceInitObjectPropertyTable+0x18c>)
   17686:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   17688:	4b0d      	ldr	r3, [pc, #52]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1768a:	681b      	ldr	r3, [r3, #0]
   1768c:	2292      	movs	r2, #146	; 0x92
   1768e:	490e      	ldr	r1, [pc, #56]	; (176c8 <vTraceInitObjectPropertyTable+0x190>)
   17690:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   17692:	4b0b      	ldr	r3, [pc, #44]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   17694:	681b      	ldr	r3, [r3, #0]
   17696:	2294      	movs	r2, #148	; 0x94
   17698:	490c      	ldr	r1, [pc, #48]	; (176cc <vTraceInitObjectPropertyTable+0x194>)
   1769a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1769c:	4b08      	ldr	r3, [pc, #32]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   1769e:	681b      	ldr	r3, [r3, #0]
   176a0:	2296      	movs	r2, #150	; 0x96
   176a2:	490b      	ldr	r1, [pc, #44]	; (176d0 <vTraceInitObjectPropertyTable+0x198>)
   176a4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   176a6:	4b06      	ldr	r3, [pc, #24]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   176a8:	681b      	ldr	r3, [r3, #0]
   176aa:	2298      	movs	r2, #152	; 0x98
   176ac:	218c      	movs	r1, #140	; 0x8c
   176ae:	00c9      	lsls	r1, r1, #3
   176b0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   176b2:	4b03      	ldr	r3, [pc, #12]	; (176c0 <vTraceInitObjectPropertyTable+0x188>)
   176b4:	681b      	ldr	r3, [r3, #0]
   176b6:	4a07      	ldr	r2, [pc, #28]	; (176d4 <vTraceInitObjectPropertyTable+0x19c>)
   176b8:	661a      	str	r2, [r3, #96]	; 0x60
}
   176ba:	46c0      	nop			; (mov r8, r8)
   176bc:	46bd      	mov	sp, r7
   176be:	bd80      	pop	{r7, pc}
   176c0:	20000dc0 	.word	0x20000dc0
   176c4:	000002fd 	.word	0x000002fd
   176c8:	00000352 	.word	0x00000352
   176cc:	000003a2 	.word	0x000003a2
   176d0:	00000401 	.word	0x00000401
   176d4:	000004bf 	.word	0x000004bf

000176d8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   176d8:	b580      	push	{r7, lr}
   176da:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   176dc:	4b2e      	ldr	r3, [pc, #184]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176de:	2200      	movs	r2, #0
   176e0:	825a      	strh	r2, [r3, #18]
   176e2:	4b2d      	ldr	r3, [pc, #180]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176e4:	8a5a      	ldrh	r2, [r3, #18]
   176e6:	4b2c      	ldr	r3, [pc, #176]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176e8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   176ea:	4b2b      	ldr	r3, [pc, #172]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176ec:	220a      	movs	r2, #10
   176ee:	829a      	strh	r2, [r3, #20]
   176f0:	4b29      	ldr	r3, [pc, #164]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176f2:	8a9a      	ldrh	r2, [r3, #20]
   176f4:	4b28      	ldr	r3, [pc, #160]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176f6:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   176f8:	4b27      	ldr	r3, [pc, #156]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   176fa:	2214      	movs	r2, #20
   176fc:	82da      	strh	r2, [r3, #22]
   176fe:	4b26      	ldr	r3, [pc, #152]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17700:	8ada      	ldrh	r2, [r3, #22]
   17702:	4b25      	ldr	r3, [pc, #148]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17704:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   17706:	4b24      	ldr	r3, [pc, #144]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17708:	221e      	movs	r2, #30
   1770a:	831a      	strh	r2, [r3, #24]
   1770c:	4b22      	ldr	r3, [pc, #136]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1770e:	8b1a      	ldrh	r2, [r3, #24]
   17710:	4b21      	ldr	r3, [pc, #132]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17712:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   17714:	4b20      	ldr	r3, [pc, #128]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17716:	222d      	movs	r2, #45	; 0x2d
   17718:	835a      	strh	r2, [r3, #26]
   1771a:	4b1f      	ldr	r3, [pc, #124]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1771c:	8b5a      	ldrh	r2, [r3, #26]
   1771e:	4b1e      	ldr	r3, [pc, #120]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17720:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   17722:	4b1d      	ldr	r3, [pc, #116]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17724:	2232      	movs	r2, #50	; 0x32
   17726:	839a      	strh	r2, [r3, #28]
   17728:	4b1b      	ldr	r3, [pc, #108]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1772a:	8b9a      	ldrh	r2, [r3, #28]
   1772c:	4b1a      	ldr	r3, [pc, #104]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1772e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   17730:	4b19      	ldr	r3, [pc, #100]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17732:	2237      	movs	r2, #55	; 0x37
   17734:	83da      	strh	r2, [r3, #30]
   17736:	4b18      	ldr	r3, [pc, #96]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17738:	8bda      	ldrh	r2, [r3, #30]
   1773a:	4b17      	ldr	r3, [pc, #92]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1773c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1773e:	4b16      	ldr	r3, [pc, #88]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17740:	223c      	movs	r2, #60	; 0x3c
   17742:	841a      	strh	r2, [r3, #32]
   17744:	4b14      	ldr	r3, [pc, #80]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17746:	8c1a      	ldrh	r2, [r3, #32]
   17748:	4b13      	ldr	r3, [pc, #76]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1774a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1774c:	4b12      	ldr	r3, [pc, #72]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1774e:	2241      	movs	r2, #65	; 0x41
   17750:	845a      	strh	r2, [r3, #34]	; 0x22
   17752:	4b11      	ldr	r3, [pc, #68]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17754:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   17756:	4b10      	ldr	r3, [pc, #64]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17758:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1775a:	4b0f      	ldr	r3, [pc, #60]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1775c:	2209      	movs	r2, #9
   1775e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   17760:	4b0d      	ldr	r3, [pc, #52]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17762:	2213      	movs	r2, #19
   17764:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   17766:	4b0c      	ldr	r3, [pc, #48]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17768:	221d      	movs	r2, #29
   1776a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1776c:	4b0a      	ldr	r3, [pc, #40]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1776e:	222c      	movs	r2, #44	; 0x2c
   17770:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   17772:	4b09      	ldr	r3, [pc, #36]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17774:	2231      	movs	r2, #49	; 0x31
   17776:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   17778:	4b07      	ldr	r3, [pc, #28]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1777a:	2236      	movs	r2, #54	; 0x36
   1777c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1777e:	4b06      	ldr	r3, [pc, #24]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17780:	223b      	movs	r2, #59	; 0x3b
   17782:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   17784:	4b04      	ldr	r3, [pc, #16]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   17786:	2240      	movs	r2, #64	; 0x40
   17788:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1778a:	4b03      	ldr	r3, [pc, #12]	; (17798 <vTraceInitObjectHandleStack+0xc0>)
   1778c:	2245      	movs	r2, #69	; 0x45
   1778e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   17790:	46c0      	nop			; (mov r8, r8)
   17792:	46bd      	mov	sp, r7
   17794:	bd80      	pop	{r7, pc}
   17796:	46c0      	nop			; (mov r8, r8)
   17798:	20000d30 	.word	0x20000d30

0001779c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1779c:	b580      	push	{r7, lr}
   1779e:	b082      	sub	sp, #8
   177a0:	af00      	add	r7, sp, #0
   177a2:	0002      	movs	r2, r0
   177a4:	1dfb      	adds	r3, r7, #7
   177a6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   177a8:	1dfb      	adds	r3, r7, #7
   177aa:	781b      	ldrb	r3, [r3, #0]
   177ac:	2b08      	cmp	r3, #8
   177ae:	d816      	bhi.n	177de <pszTraceGetErrorNotEnoughHandles+0x42>
   177b0:	009a      	lsls	r2, r3, #2
   177b2:	4b0d      	ldr	r3, [pc, #52]	; (177e8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   177b4:	18d3      	adds	r3, r2, r3
   177b6:	681b      	ldr	r3, [r3, #0]
   177b8:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   177ba:	4b0c      	ldr	r3, [pc, #48]	; (177ec <pszTraceGetErrorNotEnoughHandles+0x50>)
   177bc:	e010      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   177be:	4b0c      	ldr	r3, [pc, #48]	; (177f0 <pszTraceGetErrorNotEnoughHandles+0x54>)
   177c0:	e00e      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   177c2:	4b0c      	ldr	r3, [pc, #48]	; (177f4 <pszTraceGetErrorNotEnoughHandles+0x58>)
   177c4:	e00c      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   177c6:	4b0c      	ldr	r3, [pc, #48]	; (177f8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   177c8:	e00a      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   177ca:	4b0c      	ldr	r3, [pc, #48]	; (177fc <pszTraceGetErrorNotEnoughHandles+0x60>)
   177cc:	e008      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   177ce:	4b0c      	ldr	r3, [pc, #48]	; (17800 <pszTraceGetErrorNotEnoughHandles+0x64>)
   177d0:	e006      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   177d2:	4b0c      	ldr	r3, [pc, #48]	; (17804 <pszTraceGetErrorNotEnoughHandles+0x68>)
   177d4:	e004      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   177d6:	4b0c      	ldr	r3, [pc, #48]	; (17808 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   177d8:	e002      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   177da:	4b0c      	ldr	r3, [pc, #48]	; (1780c <pszTraceGetErrorNotEnoughHandles+0x70>)
   177dc:	e000      	b.n	177e0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   177de:	4b0c      	ldr	r3, [pc, #48]	; (17810 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   177e0:	0018      	movs	r0, r3
   177e2:	46bd      	mov	sp, r7
   177e4:	b002      	add	sp, #8
   177e6:	bd80      	pop	{r7, pc}
   177e8:	00036c7c 	.word	0x00036c7c
   177ec:	0003697c 	.word	0x0003697c
   177f0:	000369c4 	.word	0x000369c4
   177f4:	00036a0c 	.word	0x00036a0c
   177f8:	00036a60 	.word	0x00036a60
   177fc:	00036aac 	.word	0x00036aac
   17800:	00036af8 	.word	0x00036af8
   17804:	00036b44 	.word	0x00036b44
   17808:	00036b98 	.word	0x00036b98
   1780c:	00036bf0 	.word	0x00036bf0
   17810:	00036c4c 	.word	0x00036c4c

00017814 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   17814:	b590      	push	{r4, r7, lr}
   17816:	b087      	sub	sp, #28
   17818:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1781a:	2317      	movs	r3, #23
   1781c:	18fb      	adds	r3, r7, r3
   1781e:	2200      	movs	r2, #0
   17820:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   17822:	4b36      	ldr	r3, [pc, #216]	; (178fc <uiTraceStart+0xe8>)
   17824:	681b      	ldr	r3, [r3, #0]
   17826:	2b00      	cmp	r3, #0
   17828:	d10b      	bne.n	17842 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1782a:	4b34      	ldr	r3, [pc, #208]	; (178fc <uiTraceStart+0xe8>)
   1782c:	681b      	ldr	r3, [r3, #0]
   1782e:	2b00      	cmp	r3, #0
   17830:	d105      	bne.n	1783e <uiTraceStart+0x2a>
   17832:	4b33      	ldr	r3, [pc, #204]	; (17900 <uiTraceStart+0xec>)
   17834:	0018      	movs	r0, r3
   17836:	4b33      	ldr	r3, [pc, #204]	; (17904 <uiTraceStart+0xf0>)
   17838:	4798      	blx	r3
   1783a:	2300      	movs	r3, #0
   1783c:	e059      	b.n	178f2 <uiTraceStart+0xde>
		return 0;
   1783e:	2300      	movs	r3, #0
   17840:	e057      	b.n	178f2 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   17842:	4b2e      	ldr	r3, [pc, #184]	; (178fc <uiTraceStart+0xe8>)
   17844:	681b      	ldr	r3, [r3, #0]
   17846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17848:	2b01      	cmp	r3, #1
   1784a:	d101      	bne.n	17850 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1784c:	2301      	movs	r3, #1
   1784e:	e050      	b.n	178f2 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   17850:	4b2d      	ldr	r3, [pc, #180]	; (17908 <uiTraceStart+0xf4>)
   17852:	681b      	ldr	r3, [r3, #0]
   17854:	2b00      	cmp	r3, #0
   17856:	d149      	bne.n	178ec <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17858:	f3ef 8310 	mrs	r3, PRIMASK
   1785c:	60bb      	str	r3, [r7, #8]
  return(result);
   1785e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   17860:	613b      	str	r3, [r7, #16]
   17862:	2301      	movs	r3, #1
   17864:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17866:	68fb      	ldr	r3, [r7, #12]
   17868:	f383 8810 	msr	PRIMASK, r3
   1786c:	4b27      	ldr	r3, [pc, #156]	; (1790c <uiTraceStart+0xf8>)
   1786e:	681b      	ldr	r3, [r3, #0]
   17870:	1c5a      	adds	r2, r3, #1
   17872:	4b26      	ldr	r3, [pc, #152]	; (1790c <uiTraceStart+0xf8>)
   17874:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   17876:	4b21      	ldr	r3, [pc, #132]	; (178fc <uiTraceStart+0xe8>)
   17878:	681b      	ldr	r3, [r3, #0]
   1787a:	2201      	movs	r2, #1
   1787c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1787e:	4b24      	ldr	r3, [pc, #144]	; (17910 <uiTraceStart+0xfc>)
   17880:	4798      	blx	r3
   17882:	0003      	movs	r3, r0
   17884:	0018      	movs	r0, r3
   17886:	4b23      	ldr	r3, [pc, #140]	; (17914 <uiTraceStart+0x100>)
   17888:	4798      	blx	r3
   1788a:	0003      	movs	r3, r0
   1788c:	001a      	movs	r2, r3
   1788e:	2317      	movs	r3, #23
   17890:	18fb      	adds	r3, r7, r3
   17892:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   17894:	2317      	movs	r3, #23
   17896:	18fb      	adds	r3, r7, r3
   17898:	781b      	ldrb	r3, [r3, #0]
   1789a:	2b00      	cmp	r3, #0
   1789c:	d116      	bne.n	178cc <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1789e:	2317      	movs	r3, #23
   178a0:	18fc      	adds	r4, r7, r3
   178a2:	2003      	movs	r0, #3
   178a4:	4b1c      	ldr	r3, [pc, #112]	; (17918 <uiTraceStart+0x104>)
   178a6:	4798      	blx	r3
   178a8:	0003      	movs	r3, r0
   178aa:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   178ac:	4a1b      	ldr	r2, [pc, #108]	; (1791c <uiTraceStart+0x108>)
   178ae:	2317      	movs	r3, #23
   178b0:	18fb      	adds	r3, r7, r3
   178b2:	781b      	ldrb	r3, [r3, #0]
   178b4:	0019      	movs	r1, r3
   178b6:	2003      	movs	r0, #3
   178b8:	4b19      	ldr	r3, [pc, #100]	; (17920 <uiTraceStart+0x10c>)
   178ba:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   178bc:	2317      	movs	r3, #23
   178be:	18fb      	adds	r3, r7, r3
   178c0:	781b      	ldrb	r3, [r3, #0]
   178c2:	2200      	movs	r2, #0
   178c4:	0019      	movs	r1, r3
   178c6:	2003      	movs	r0, #3
   178c8:	4b16      	ldr	r3, [pc, #88]	; (17924 <uiTraceStart+0x110>)
   178ca:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   178cc:	2317      	movs	r3, #23
   178ce:	18fb      	adds	r3, r7, r3
   178d0:	781b      	ldrb	r3, [r3, #0]
   178d2:	0018      	movs	r0, r3
   178d4:	4b14      	ldr	r3, [pc, #80]	; (17928 <uiTraceStart+0x114>)
   178d6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   178d8:	4b0c      	ldr	r3, [pc, #48]	; (1790c <uiTraceStart+0xf8>)
   178da:	681b      	ldr	r3, [r3, #0]
   178dc:	1e5a      	subs	r2, r3, #1
   178de:	4b0b      	ldr	r3, [pc, #44]	; (1790c <uiTraceStart+0xf8>)
   178e0:	601a      	str	r2, [r3, #0]
   178e2:	693b      	ldr	r3, [r7, #16]
   178e4:	607b      	str	r3, [r7, #4]
   178e6:	687b      	ldr	r3, [r7, #4]
   178e8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   178ec:	4b03      	ldr	r3, [pc, #12]	; (178fc <uiTraceStart+0xe8>)
   178ee:	681b      	ldr	r3, [r3, #0]
   178f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   178f2:	0018      	movs	r0, r3
   178f4:	46bd      	mov	sp, r7
   178f6:	b007      	add	sp, #28
   178f8:	bd90      	pop	{r4, r7, pc}
   178fa:	46c0      	nop			; (mov r8, r8)
   178fc:	20000dc0 	.word	0x20000dc0
   17900:	00036ca0 	.word	0x00036ca0
   17904:	00018a7d 	.word	0x00018a7d
   17908:	20000d20 	.word	0x20000d20
   1790c:	20000d18 	.word	0x20000d18
   17910:	0001747d 	.word	0x0001747d
   17914:	000171c1 	.word	0x000171c1
   17918:	00018761 	.word	0x00018761
   1791c:	00036ce4 	.word	0x00036ce4
   17920:	00018991 	.word	0x00018991
   17924:	000180f5 	.word	0x000180f5
   17928:	00017fdd 	.word	0x00017fdd

0001792c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1792c:	b580      	push	{r7, lr}
   1792e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   17930:	4b02      	ldr	r3, [pc, #8]	; (1793c <vTraceStart+0x10>)
   17932:	4798      	blx	r3
}
   17934:	46c0      	nop			; (mov r8, r8)
   17936:	46bd      	mov	sp, r7
   17938:	bd80      	pop	{r7, pc}
   1793a:	46c0      	nop			; (mov r8, r8)
   1793c:	00017815 	.word	0x00017815

00017940 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   17940:	b580      	push	{r7, lr}
   17942:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17944:	4b08      	ldr	r3, [pc, #32]	; (17968 <vTraceStop+0x28>)
   17946:	681b      	ldr	r3, [r3, #0]
   17948:	2b00      	cmp	r3, #0
   1794a:	d003      	beq.n	17954 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1794c:	4b06      	ldr	r3, [pc, #24]	; (17968 <vTraceStop+0x28>)
   1794e:	681b      	ldr	r3, [r3, #0]
   17950:	2200      	movs	r2, #0
   17952:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   17954:	4b05      	ldr	r3, [pc, #20]	; (1796c <vTraceStop+0x2c>)
   17956:	681b      	ldr	r3, [r3, #0]
   17958:	2b00      	cmp	r3, #0
   1795a:	d002      	beq.n	17962 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1795c:	4b03      	ldr	r3, [pc, #12]	; (1796c <vTraceStop+0x2c>)
   1795e:	681b      	ldr	r3, [r3, #0]
   17960:	4798      	blx	r3
	}
}
   17962:	46c0      	nop			; (mov r8, r8)
   17964:	46bd      	mov	sp, r7
   17966:	bd80      	pop	{r7, pc}
   17968:	20000dc0 	.word	0x20000dc0
   1796c:	20000d28 	.word	0x20000d28

00017970 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   17970:	b580      	push	{r7, lr}
   17972:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17974:	4b05      	ldr	r3, [pc, #20]	; (1798c <xTraceIsRecordingEnabled+0x1c>)
   17976:	681b      	ldr	r3, [r3, #0]
   17978:	2b00      	cmp	r3, #0
   1797a:	d003      	beq.n	17984 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1797c:	4b03      	ldr	r3, [pc, #12]	; (1798c <xTraceIsRecordingEnabled+0x1c>)
   1797e:	681b      	ldr	r3, [r3, #0]
   17980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17982:	e000      	b.n	17986 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   17984:	2300      	movs	r3, #0
	}
}
   17986:	0018      	movs	r0, r3
   17988:	46bd      	mov	sp, r7
   1798a:	bd80      	pop	{r7, pc}
   1798c:	20000dc0 	.word	0x20000dc0

00017990 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   17990:	b590      	push	{r4, r7, lr}
   17992:	b089      	sub	sp, #36	; 0x24
   17994:	af00      	add	r7, sp, #0
   17996:	0002      	movs	r2, r0
   17998:	1dfb      	adds	r3, r7, #7
   1799a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1799c:	1dfb      	adds	r3, r7, #7
   1799e:	781b      	ldrb	r3, [r3, #0]
   179a0:	2b00      	cmp	r3, #0
   179a2:	d057      	beq.n	17a54 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   179a4:	4b2e      	ldr	r3, [pc, #184]	; (17a60 <prvTraceStoreTaskReady+0xd0>)
   179a6:	681b      	ldr	r3, [r3, #0]
   179a8:	2b00      	cmp	r3, #0
   179aa:	d055      	beq.n	17a58 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   179ac:	1dfb      	adds	r3, r7, #7
   179ae:	781b      	ldrb	r3, [r3, #0]
   179b0:	2b0f      	cmp	r3, #15
   179b2:	d904      	bls.n	179be <prvTraceStoreTaskReady+0x2e>
   179b4:	4b2b      	ldr	r3, [pc, #172]	; (17a64 <prvTraceStoreTaskReady+0xd4>)
   179b6:	0018      	movs	r0, r3
   179b8:	4b2b      	ldr	r3, [pc, #172]	; (17a68 <prvTraceStoreTaskReady+0xd8>)
   179ba:	4798      	blx	r3
   179bc:	e04d      	b.n	17a5a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   179be:	4b2b      	ldr	r3, [pc, #172]	; (17a6c <prvTraceStoreTaskReady+0xdc>)
   179c0:	681b      	ldr	r3, [r3, #0]
   179c2:	2b00      	cmp	r3, #0
   179c4:	d004      	beq.n	179d0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   179c6:	4b2a      	ldr	r3, [pc, #168]	; (17a70 <prvTraceStoreTaskReady+0xe0>)
   179c8:	0018      	movs	r0, r3
   179ca:	4b27      	ldr	r3, [pc, #156]	; (17a68 <prvTraceStoreTaskReady+0xd8>)
   179cc:	4798      	blx	r3
		return;
   179ce:	e044      	b.n	17a5a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   179d0:	f3ef 8310 	mrs	r3, PRIMASK
   179d4:	60fb      	str	r3, [r7, #12]
  return(result);
   179d6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   179d8:	61fb      	str	r3, [r7, #28]
   179da:	2301      	movs	r3, #1
   179dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   179de:	693b      	ldr	r3, [r7, #16]
   179e0:	f383 8810 	msr	PRIMASK, r3
   179e4:	4b21      	ldr	r3, [pc, #132]	; (17a6c <prvTraceStoreTaskReady+0xdc>)
   179e6:	681b      	ldr	r3, [r3, #0]
   179e8:	1c5a      	adds	r2, r3, #1
   179ea:	4b20      	ldr	r3, [pc, #128]	; (17a6c <prvTraceStoreTaskReady+0xdc>)
   179ec:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   179ee:	4b21      	ldr	r3, [pc, #132]	; (17a74 <prvTraceStoreTaskReady+0xe4>)
   179f0:	681b      	ldr	r3, [r3, #0]
   179f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   179f4:	2b00      	cmp	r3, #0
   179f6:	d022      	beq.n	17a3e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   179f8:	231a      	movs	r3, #26
   179fa:	18fc      	adds	r4, r7, r3
   179fc:	4b1e      	ldr	r3, [pc, #120]	; (17a78 <prvTraceStoreTaskReady+0xe8>)
   179fe:	0018      	movs	r0, r3
   17a00:	4b1e      	ldr	r3, [pc, #120]	; (17a7c <prvTraceStoreTaskReady+0xec>)
   17a02:	4798      	blx	r3
   17a04:	0003      	movs	r3, r0
   17a06:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   17a08:	2319      	movs	r3, #25
   17a0a:	18fb      	adds	r3, r7, r3
   17a0c:	1dfa      	adds	r2, r7, #7
   17a0e:	7812      	ldrb	r2, [r2, #0]
   17a10:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   17a12:	4b1b      	ldr	r3, [pc, #108]	; (17a80 <prvTraceStoreTaskReady+0xf0>)
   17a14:	4798      	blx	r3
   17a16:	0003      	movs	r3, r0
   17a18:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   17a1a:	697b      	ldr	r3, [r7, #20]
   17a1c:	2b00      	cmp	r3, #0
   17a1e:	d00e      	beq.n	17a3e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   17a20:	697b      	ldr	r3, [r7, #20]
   17a22:	2202      	movs	r2, #2
   17a24:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   17a26:	697b      	ldr	r3, [r7, #20]
   17a28:	221a      	movs	r2, #26
   17a2a:	18ba      	adds	r2, r7, r2
   17a2c:	8812      	ldrh	r2, [r2, #0]
   17a2e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   17a30:	697b      	ldr	r3, [r7, #20]
   17a32:	2219      	movs	r2, #25
   17a34:	18ba      	adds	r2, r7, r2
   17a36:	7812      	ldrb	r2, [r2, #0]
   17a38:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17a3a:	4b12      	ldr	r3, [pc, #72]	; (17a84 <prvTraceStoreTaskReady+0xf4>)
   17a3c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17a3e:	4b0b      	ldr	r3, [pc, #44]	; (17a6c <prvTraceStoreTaskReady+0xdc>)
   17a40:	681b      	ldr	r3, [r3, #0]
   17a42:	1e5a      	subs	r2, r3, #1
   17a44:	4b09      	ldr	r3, [pc, #36]	; (17a6c <prvTraceStoreTaskReady+0xdc>)
   17a46:	601a      	str	r2, [r3, #0]
   17a48:	69fb      	ldr	r3, [r7, #28]
   17a4a:	60bb      	str	r3, [r7, #8]
   17a4c:	68bb      	ldr	r3, [r7, #8]
   17a4e:	f383 8810 	msr	PRIMASK, r3
   17a52:	e002      	b.n	17a5a <prvTraceStoreTaskReady+0xca>
		return;
   17a54:	46c0      	nop			; (mov r8, r8)
   17a56:	e000      	b.n	17a5a <prvTraceStoreTaskReady+0xca>
		return;
   17a58:	46c0      	nop			; (mov r8, r8)
}
   17a5a:	46bd      	mov	sp, r7
   17a5c:	b009      	add	sp, #36	; 0x24
   17a5e:	bd90      	pop	{r4, r7, pc}
   17a60:	200000fc 	.word	0x200000fc
   17a64:	0003704c 	.word	0x0003704c
   17a68:	00018a7d 	.word	0x00018a7d
   17a6c:	20000d18 	.word	0x20000d18
   17a70:	0003708c 	.word	0x0003708c
   17a74:	20000dc0 	.word	0x20000dc0
   17a78:	0000ffff 	.word	0x0000ffff
   17a7c:	00018c91 	.word	0x00018c91
   17a80:	00018635 	.word	0x00018635
   17a84:	00018c39 	.word	0x00018c39

00017a88 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   17a88:	b580      	push	{r7, lr}
   17a8a:	b08e      	sub	sp, #56	; 0x38
   17a8c:	af00      	add	r7, sp, #0
   17a8e:	60f8      	str	r0, [r7, #12]
   17a90:	60b9      	str	r1, [r7, #8]
   17a92:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   17a94:	4b48      	ldr	r3, [pc, #288]	; (17bb8 <vTraceStoreMemMangEvent+0x130>)
   17a96:	681b      	ldr	r3, [r3, #0]
   17a98:	2b00      	cmp	r3, #0
   17a9a:	d100      	bne.n	17a9e <vTraceStoreMemMangEvent+0x16>
   17a9c:	e088      	b.n	17bb0 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   17a9e:	687b      	ldr	r3, [r7, #4]
   17aa0:	2b00      	cmp	r3, #0
   17aa2:	da03      	bge.n	17aac <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17aa4:	687b      	ldr	r3, [r7, #4]
   17aa6:	425b      	negs	r3, r3
   17aa8:	637b      	str	r3, [r7, #52]	; 0x34
   17aaa:	e001      	b.n	17ab0 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   17aac:	687b      	ldr	r3, [r7, #4]
   17aae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17ab0:	f3ef 8310 	mrs	r3, PRIMASK
   17ab4:	61bb      	str	r3, [r7, #24]
  return(result);
   17ab6:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17ab8:	633b      	str	r3, [r7, #48]	; 0x30
   17aba:	2301      	movs	r3, #1
   17abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17abe:	69fb      	ldr	r3, [r7, #28]
   17ac0:	f383 8810 	msr	PRIMASK, r3
   17ac4:	4b3d      	ldr	r3, [pc, #244]	; (17bbc <vTraceStoreMemMangEvent+0x134>)
   17ac6:	681b      	ldr	r3, [r3, #0]
   17ac8:	1c5a      	adds	r2, r3, #1
   17aca:	4b3c      	ldr	r3, [pc, #240]	; (17bbc <vTraceStoreMemMangEvent+0x134>)
   17acc:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   17ace:	68bb      	ldr	r3, [r7, #8]
   17ad0:	2b00      	cmp	r3, #0
   17ad2:	d005      	beq.n	17ae0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   17ad4:	4b3a      	ldr	r3, [pc, #232]	; (17bc0 <vTraceStoreMemMangEvent+0x138>)
   17ad6:	681a      	ldr	r2, [r3, #0]
   17ad8:	687b      	ldr	r3, [r7, #4]
   17ada:	18d2      	adds	r2, r2, r3
   17adc:	4b38      	ldr	r3, [pc, #224]	; (17bc0 <vTraceStoreMemMangEvent+0x138>)
   17ade:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   17ae0:	4b35      	ldr	r3, [pc, #212]	; (17bb8 <vTraceStoreMemMangEvent+0x130>)
   17ae2:	681b      	ldr	r3, [r3, #0]
   17ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17ae6:	2b00      	cmp	r3, #0
   17ae8:	d057      	beq.n	17b9a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   17aea:	20ff      	movs	r0, #255	; 0xff
   17aec:	4b35      	ldr	r3, [pc, #212]	; (17bc4 <vTraceStoreMemMangEvent+0x13c>)
   17aee:	4798      	blx	r3
   17af0:	0003      	movs	r3, r0
   17af2:	001a      	movs	r2, r3
   17af4:	232f      	movs	r3, #47	; 0x2f
   17af6:	18fb      	adds	r3, r7, r3
   17af8:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   17afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17afc:	4a32      	ldr	r2, [pc, #200]	; (17bc8 <vTraceStoreMemMangEvent+0x140>)
   17afe:	0019      	movs	r1, r3
   17b00:	0010      	movs	r0, r2
   17b02:	4b32      	ldr	r3, [pc, #200]	; (17bcc <vTraceStoreMemMangEvent+0x144>)
   17b04:	4798      	blx	r3
   17b06:	0002      	movs	r2, r0
   17b08:	232c      	movs	r3, #44	; 0x2c
   17b0a:	18fb      	adds	r3, r7, r3
   17b0c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   17b0e:	4b30      	ldr	r3, [pc, #192]	; (17bd0 <vTraceStoreMemMangEvent+0x148>)
   17b10:	4798      	blx	r3
   17b12:	0003      	movs	r3, r0
   17b14:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   17b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b18:	2b00      	cmp	r3, #0
   17b1a:	d03e      	beq.n	17b9a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   17b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b1e:	222f      	movs	r2, #47	; 0x2f
   17b20:	18ba      	adds	r2, r7, r2
   17b22:	7812      	ldrb	r2, [r2, #0]
   17b24:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b28:	2200      	movs	r2, #0
   17b2a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   17b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b2e:	222c      	movs	r2, #44	; 0x2c
   17b30:	18ba      	adds	r2, r7, r2
   17b32:	8812      	ldrh	r2, [r2, #0]
   17b34:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17b36:	4b27      	ldr	r3, [pc, #156]	; (17bd4 <vTraceStoreMemMangEvent+0x14c>)
   17b38:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   17b3a:	68bb      	ldr	r3, [r7, #8]
   17b3c:	4a22      	ldr	r2, [pc, #136]	; (17bc8 <vTraceStoreMemMangEvent+0x140>)
   17b3e:	0019      	movs	r1, r3
   17b40:	0010      	movs	r0, r2
   17b42:	4b22      	ldr	r3, [pc, #136]	; (17bcc <vTraceStoreMemMangEvent+0x144>)
   17b44:	4798      	blx	r3
   17b46:	0002      	movs	r2, r0
   17b48:	2326      	movs	r3, #38	; 0x26
   17b4a:	18fb      	adds	r3, r7, r3
   17b4c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   17b4e:	2325      	movs	r3, #37	; 0x25
   17b50:	18fb      	adds	r3, r7, r3
   17b52:	2200      	movs	r2, #0
   17b54:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   17b56:	4b1e      	ldr	r3, [pc, #120]	; (17bd0 <vTraceStoreMemMangEvent+0x148>)
   17b58:	4798      	blx	r3
   17b5a:	0003      	movs	r3, r0
   17b5c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   17b5e:	6a3b      	ldr	r3, [r7, #32]
   17b60:	2b00      	cmp	r3, #0
   17b62:	d01a      	beq.n	17b9a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   17b64:	6a3b      	ldr	r3, [r7, #32]
   17b66:	2226      	movs	r2, #38	; 0x26
   17b68:	18ba      	adds	r2, r7, r2
   17b6a:	8812      	ldrh	r2, [r2, #0]
   17b6c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   17b6e:	6a3b      	ldr	r3, [r7, #32]
   17b70:	2225      	movs	r2, #37	; 0x25
   17b72:	18ba      	adds	r2, r7, r2
   17b74:	7812      	ldrb	r2, [r2, #0]
   17b76:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   17b78:	68fb      	ldr	r3, [r7, #12]
   17b7a:	b2db      	uxtb	r3, r3
   17b7c:	3301      	adds	r3, #1
   17b7e:	b2da      	uxtb	r2, r3
   17b80:	6a3b      	ldr	r3, [r7, #32]
   17b82:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   17b84:	68fb      	ldr	r3, [r7, #12]
   17b86:	b2da      	uxtb	r2, r3
   17b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17b8a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   17b8c:	4b11      	ldr	r3, [pc, #68]	; (17bd4 <vTraceStoreMemMangEvent+0x14c>)
   17b8e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   17b90:	4b09      	ldr	r3, [pc, #36]	; (17bb8 <vTraceStoreMemMangEvent+0x130>)
   17b92:	681b      	ldr	r3, [r3, #0]
   17b94:	4a0a      	ldr	r2, [pc, #40]	; (17bc0 <vTraceStoreMemMangEvent+0x138>)
   17b96:	6812      	ldr	r2, [r2, #0]
   17b98:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   17b9a:	4b08      	ldr	r3, [pc, #32]	; (17bbc <vTraceStoreMemMangEvent+0x134>)
   17b9c:	681b      	ldr	r3, [r3, #0]
   17b9e:	1e5a      	subs	r2, r3, #1
   17ba0:	4b06      	ldr	r3, [pc, #24]	; (17bbc <vTraceStoreMemMangEvent+0x134>)
   17ba2:	601a      	str	r2, [r3, #0]
   17ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17ba6:	617b      	str	r3, [r7, #20]
   17ba8:	697b      	ldr	r3, [r7, #20]
   17baa:	f383 8810 	msr	PRIMASK, r3
   17bae:	e000      	b.n	17bb2 <vTraceStoreMemMangEvent+0x12a>
		return;
   17bb0:	46c0      	nop			; (mov r8, r8)
}
   17bb2:	46bd      	mov	sp, r7
   17bb4:	b00e      	add	sp, #56	; 0x38
   17bb6:	bd80      	pop	{r7, pc}
   17bb8:	20000dc0 	.word	0x20000dc0
   17bbc:	20000d18 	.word	0x20000d18
   17bc0:	20000d2c 	.word	0x20000d2c
   17bc4:	00018c91 	.word	0x00018c91
   17bc8:	0000ffff 	.word	0x0000ffff
   17bcc:	00017e55 	.word	0x00017e55
   17bd0:	00018635 	.word	0x00018635
   17bd4:	00018c39 	.word	0x00018c39

00017bd8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   17bd8:	b590      	push	{r4, r7, lr}
   17bda:	b08b      	sub	sp, #44	; 0x2c
   17bdc:	af00      	add	r7, sp, #0
   17bde:	60f8      	str	r0, [r7, #12]
   17be0:	607a      	str	r2, [r7, #4]
   17be2:	230b      	movs	r3, #11
   17be4:	18fb      	adds	r3, r7, r3
   17be6:	1c0a      	adds	r2, r1, #0
   17be8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   17bea:	68fb      	ldr	r3, [r7, #12]
   17bec:	2bfe      	cmp	r3, #254	; 0xfe
   17bee:	d904      	bls.n	17bfa <prvTraceStoreKernelCall+0x22>
   17bf0:	4b39      	ldr	r3, [pc, #228]	; (17cd8 <prvTraceStoreKernelCall+0x100>)
   17bf2:	0018      	movs	r0, r3
   17bf4:	4b39      	ldr	r3, [pc, #228]	; (17cdc <prvTraceStoreKernelCall+0x104>)
   17bf6:	4798      	blx	r3
   17bf8:	e06b      	b.n	17cd2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17bfa:	230b      	movs	r3, #11
   17bfc:	18fb      	adds	r3, r7, r3
   17bfe:	781b      	ldrb	r3, [r3, #0]
   17c00:	2b08      	cmp	r3, #8
   17c02:	d904      	bls.n	17c0e <prvTraceStoreKernelCall+0x36>
   17c04:	4b36      	ldr	r3, [pc, #216]	; (17ce0 <prvTraceStoreKernelCall+0x108>)
   17c06:	0018      	movs	r0, r3
   17c08:	4b34      	ldr	r3, [pc, #208]	; (17cdc <prvTraceStoreKernelCall+0x104>)
   17c0a:	4798      	blx	r3
   17c0c:	e061      	b.n	17cd2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   17c0e:	4b35      	ldr	r3, [pc, #212]	; (17ce4 <prvTraceStoreKernelCall+0x10c>)
   17c10:	681a      	ldr	r2, [r3, #0]
   17c12:	230b      	movs	r3, #11
   17c14:	18fb      	adds	r3, r7, r3
   17c16:	781b      	ldrb	r3, [r3, #0]
   17c18:	2164      	movs	r1, #100	; 0x64
   17c1a:	18d3      	adds	r3, r2, r3
   17c1c:	185b      	adds	r3, r3, r1
   17c1e:	781b      	ldrb	r3, [r3, #0]
   17c20:	001a      	movs	r2, r3
   17c22:	687b      	ldr	r3, [r7, #4]
   17c24:	429a      	cmp	r2, r3
   17c26:	d204      	bcs.n	17c32 <prvTraceStoreKernelCall+0x5a>
   17c28:	4b2f      	ldr	r3, [pc, #188]	; (17ce8 <prvTraceStoreKernelCall+0x110>)
   17c2a:	0018      	movs	r0, r3
   17c2c:	4b2b      	ldr	r3, [pc, #172]	; (17cdc <prvTraceStoreKernelCall+0x104>)
   17c2e:	4798      	blx	r3
   17c30:	e04f      	b.n	17cd2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17c32:	4b2e      	ldr	r3, [pc, #184]	; (17cec <prvTraceStoreKernelCall+0x114>)
   17c34:	681b      	ldr	r3, [r3, #0]
   17c36:	2b00      	cmp	r3, #0
   17c38:	d004      	beq.n	17c44 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   17c3a:	4b2d      	ldr	r3, [pc, #180]	; (17cf0 <prvTraceStoreKernelCall+0x118>)
   17c3c:	0018      	movs	r0, r3
   17c3e:	4b27      	ldr	r3, [pc, #156]	; (17cdc <prvTraceStoreKernelCall+0x104>)
   17c40:	4798      	blx	r3
		return;
   17c42:	e046      	b.n	17cd2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   17c44:	4b2b      	ldr	r3, [pc, #172]	; (17cf4 <prvTraceStoreKernelCall+0x11c>)
   17c46:	781b      	ldrb	r3, [r3, #0]
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d041      	beq.n	17cd0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17c4c:	f3ef 8310 	mrs	r3, PRIMASK
   17c50:	617b      	str	r3, [r7, #20]
  return(result);
   17c52:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   17c54:	627b      	str	r3, [r7, #36]	; 0x24
   17c56:	2301      	movs	r3, #1
   17c58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17c5a:	69bb      	ldr	r3, [r7, #24]
   17c5c:	f383 8810 	msr	PRIMASK, r3
   17c60:	4b22      	ldr	r3, [pc, #136]	; (17cec <prvTraceStoreKernelCall+0x114>)
   17c62:	681b      	ldr	r3, [r3, #0]
   17c64:	1c5a      	adds	r2, r3, #1
   17c66:	4b21      	ldr	r3, [pc, #132]	; (17cec <prvTraceStoreKernelCall+0x114>)
   17c68:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   17c6a:	4b1e      	ldr	r3, [pc, #120]	; (17ce4 <prvTraceStoreKernelCall+0x10c>)
   17c6c:	681b      	ldr	r3, [r3, #0]
   17c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17c70:	2b00      	cmp	r3, #0
   17c72:	d022      	beq.n	17cba <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17c74:	2322      	movs	r3, #34	; 0x22
   17c76:	18fc      	adds	r4, r7, r3
   17c78:	4b1f      	ldr	r3, [pc, #124]	; (17cf8 <prvTraceStoreKernelCall+0x120>)
   17c7a:	0018      	movs	r0, r3
   17c7c:	4b1f      	ldr	r3, [pc, #124]	; (17cfc <prvTraceStoreKernelCall+0x124>)
   17c7e:	4798      	blx	r3
   17c80:	0003      	movs	r3, r0
   17c82:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17c84:	2321      	movs	r3, #33	; 0x21
   17c86:	18fb      	adds	r3, r7, r3
   17c88:	687a      	ldr	r2, [r7, #4]
   17c8a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   17c8c:	4b1c      	ldr	r3, [pc, #112]	; (17d00 <prvTraceStoreKernelCall+0x128>)
   17c8e:	4798      	blx	r3
   17c90:	0003      	movs	r3, r0
   17c92:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17c94:	69fb      	ldr	r3, [r7, #28]
   17c96:	2b00      	cmp	r3, #0
   17c98:	d00f      	beq.n	17cba <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   17c9a:	69fb      	ldr	r3, [r7, #28]
   17c9c:	2222      	movs	r2, #34	; 0x22
   17c9e:	18ba      	adds	r2, r7, r2
   17ca0:	8812      	ldrh	r2, [r2, #0]
   17ca2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   17ca4:	68fb      	ldr	r3, [r7, #12]
   17ca6:	b2da      	uxtb	r2, r3
   17ca8:	69fb      	ldr	r3, [r7, #28]
   17caa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17cac:	69fb      	ldr	r3, [r7, #28]
   17cae:	2221      	movs	r2, #33	; 0x21
   17cb0:	18ba      	adds	r2, r7, r2
   17cb2:	7812      	ldrb	r2, [r2, #0]
   17cb4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17cb6:	4b13      	ldr	r3, [pc, #76]	; (17d04 <prvTraceStoreKernelCall+0x12c>)
   17cb8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17cba:	4b0c      	ldr	r3, [pc, #48]	; (17cec <prvTraceStoreKernelCall+0x114>)
   17cbc:	681b      	ldr	r3, [r3, #0]
   17cbe:	1e5a      	subs	r2, r3, #1
   17cc0:	4b0a      	ldr	r3, [pc, #40]	; (17cec <prvTraceStoreKernelCall+0x114>)
   17cc2:	601a      	str	r2, [r3, #0]
   17cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17cc6:	613b      	str	r3, [r7, #16]
   17cc8:	693b      	ldr	r3, [r7, #16]
   17cca:	f383 8810 	msr	PRIMASK, r3
   17cce:	e000      	b.n	17cd2 <prvTraceStoreKernelCall+0xfa>
		return;
   17cd0:	46c0      	nop			; (mov r8, r8)
}
   17cd2:	46bd      	mov	sp, r7
   17cd4:	b00b      	add	sp, #44	; 0x2c
   17cd6:	bd90      	pop	{r4, r7, pc}
   17cd8:	000370fc 	.word	0x000370fc
   17cdc:	00018a7d 	.word	0x00018a7d
   17ce0:	00037134 	.word	0x00037134
   17ce4:	20000dc0 	.word	0x20000dc0
   17ce8:	0003717c 	.word	0x0003717c
   17cec:	20000d18 	.word	0x20000d18
   17cf0:	000371c4 	.word	0x000371c4
   17cf4:	20000d24 	.word	0x20000d24
   17cf8:	0000ffff 	.word	0x0000ffff
   17cfc:	00018c91 	.word	0x00018c91
   17d00:	00018635 	.word	0x00018635
   17d04:	00018c39 	.word	0x00018c39

00017d08 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   17d08:	b580      	push	{r7, lr}
   17d0a:	b08a      	sub	sp, #40	; 0x28
   17d0c:	af00      	add	r7, sp, #0
   17d0e:	60f8      	str	r0, [r7, #12]
   17d10:	607a      	str	r2, [r7, #4]
   17d12:	603b      	str	r3, [r7, #0]
   17d14:	230b      	movs	r3, #11
   17d16:	18fb      	adds	r3, r7, r3
   17d18:	1c0a      	adds	r2, r1, #0
   17d1a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   17d1c:	68fb      	ldr	r3, [r7, #12]
   17d1e:	2bfe      	cmp	r3, #254	; 0xfe
   17d20:	d904      	bls.n	17d2c <prvTraceStoreKernelCallWithParam+0x24>
   17d22:	4b40      	ldr	r3, [pc, #256]	; (17e24 <prvTraceStoreKernelCallWithParam+0x11c>)
   17d24:	0018      	movs	r0, r3
   17d26:	4b40      	ldr	r3, [pc, #256]	; (17e28 <prvTraceStoreKernelCallWithParam+0x120>)
   17d28:	4798      	blx	r3
   17d2a:	e077      	b.n	17e1c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17d2c:	230b      	movs	r3, #11
   17d2e:	18fb      	adds	r3, r7, r3
   17d30:	781b      	ldrb	r3, [r3, #0]
   17d32:	2b08      	cmp	r3, #8
   17d34:	d904      	bls.n	17d40 <prvTraceStoreKernelCallWithParam+0x38>
   17d36:	4b3d      	ldr	r3, [pc, #244]	; (17e2c <prvTraceStoreKernelCallWithParam+0x124>)
   17d38:	0018      	movs	r0, r3
   17d3a:	4b3b      	ldr	r3, [pc, #236]	; (17e28 <prvTraceStoreKernelCallWithParam+0x120>)
   17d3c:	4798      	blx	r3
   17d3e:	e06d      	b.n	17e1c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   17d40:	4b3b      	ldr	r3, [pc, #236]	; (17e30 <prvTraceStoreKernelCallWithParam+0x128>)
   17d42:	681a      	ldr	r2, [r3, #0]
   17d44:	230b      	movs	r3, #11
   17d46:	18fb      	adds	r3, r7, r3
   17d48:	781b      	ldrb	r3, [r3, #0]
   17d4a:	2164      	movs	r1, #100	; 0x64
   17d4c:	18d3      	adds	r3, r2, r3
   17d4e:	185b      	adds	r3, r3, r1
   17d50:	781b      	ldrb	r3, [r3, #0]
   17d52:	001a      	movs	r2, r3
   17d54:	687b      	ldr	r3, [r7, #4]
   17d56:	429a      	cmp	r2, r3
   17d58:	d204      	bcs.n	17d64 <prvTraceStoreKernelCallWithParam+0x5c>
   17d5a:	4b36      	ldr	r3, [pc, #216]	; (17e34 <prvTraceStoreKernelCallWithParam+0x12c>)
   17d5c:	0018      	movs	r0, r3
   17d5e:	4b32      	ldr	r3, [pc, #200]	; (17e28 <prvTraceStoreKernelCallWithParam+0x120>)
   17d60:	4798      	blx	r3
   17d62:	e05b      	b.n	17e1c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   17d64:	4b34      	ldr	r3, [pc, #208]	; (17e38 <prvTraceStoreKernelCallWithParam+0x130>)
   17d66:	681b      	ldr	r3, [r3, #0]
   17d68:	2b00      	cmp	r3, #0
   17d6a:	d004      	beq.n	17d76 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   17d6c:	4b33      	ldr	r3, [pc, #204]	; (17e3c <prvTraceStoreKernelCallWithParam+0x134>)
   17d6e:	0018      	movs	r0, r3
   17d70:	4b2d      	ldr	r3, [pc, #180]	; (17e28 <prvTraceStoreKernelCallWithParam+0x120>)
   17d72:	4798      	blx	r3
		return;
   17d74:	e052      	b.n	17e1c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17d76:	f3ef 8310 	mrs	r3, PRIMASK
   17d7a:	617b      	str	r3, [r7, #20]
  return(result);
   17d7c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   17d7e:	627b      	str	r3, [r7, #36]	; 0x24
   17d80:	2301      	movs	r3, #1
   17d82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17d84:	69bb      	ldr	r3, [r7, #24]
   17d86:	f383 8810 	msr	PRIMASK, r3
   17d8a:	4b2b      	ldr	r3, [pc, #172]	; (17e38 <prvTraceStoreKernelCallWithParam+0x130>)
   17d8c:	681b      	ldr	r3, [r3, #0]
   17d8e:	1c5a      	adds	r2, r3, #1
   17d90:	4b29      	ldr	r3, [pc, #164]	; (17e38 <prvTraceStoreKernelCallWithParam+0x130>)
   17d92:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17d94:	4b26      	ldr	r3, [pc, #152]	; (17e30 <prvTraceStoreKernelCallWithParam+0x128>)
   17d96:	681b      	ldr	r3, [r3, #0]
   17d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d9a:	2b00      	cmp	r3, #0
   17d9c:	d034      	beq.n	17e08 <prvTraceStoreKernelCallWithParam+0x100>
   17d9e:	4b28      	ldr	r3, [pc, #160]	; (17e40 <prvTraceStoreKernelCallWithParam+0x138>)
   17da0:	781b      	ldrb	r3, [r3, #0]
   17da2:	2b00      	cmp	r3, #0
   17da4:	d030      	beq.n	17e08 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   17da6:	20ff      	movs	r0, #255	; 0xff
   17da8:	4b26      	ldr	r3, [pc, #152]	; (17e44 <prvTraceStoreKernelCallWithParam+0x13c>)
   17daa:	4798      	blx	r3
   17dac:	0003      	movs	r3, r0
   17dae:	001a      	movs	r2, r3
   17db0:	2323      	movs	r3, #35	; 0x23
   17db2:	18fb      	adds	r3, r7, r3
   17db4:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   17db6:	683b      	ldr	r3, [r7, #0]
   17db8:	0019      	movs	r1, r3
   17dba:	20ff      	movs	r0, #255	; 0xff
   17dbc:	4b22      	ldr	r3, [pc, #136]	; (17e48 <prvTraceStoreKernelCallWithParam+0x140>)
   17dbe:	4798      	blx	r3
   17dc0:	0002      	movs	r2, r0
   17dc2:	2322      	movs	r3, #34	; 0x22
   17dc4:	18fb      	adds	r3, r7, r3
   17dc6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17dc8:	2321      	movs	r3, #33	; 0x21
   17dca:	18fb      	adds	r3, r7, r3
   17dcc:	687a      	ldr	r2, [r7, #4]
   17dce:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   17dd0:	4b1e      	ldr	r3, [pc, #120]	; (17e4c <prvTraceStoreKernelCallWithParam+0x144>)
   17dd2:	4798      	blx	r3
   17dd4:	0003      	movs	r3, r0
   17dd6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17dd8:	69fb      	ldr	r3, [r7, #28]
   17dda:	2b00      	cmp	r3, #0
   17ddc:	d014      	beq.n	17e08 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   17dde:	69fb      	ldr	r3, [r7, #28]
   17de0:	2223      	movs	r2, #35	; 0x23
   17de2:	18ba      	adds	r2, r7, r2
   17de4:	7812      	ldrb	r2, [r2, #0]
   17de6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   17de8:	68fb      	ldr	r3, [r7, #12]
   17dea:	b2da      	uxtb	r2, r3
   17dec:	69fb      	ldr	r3, [r7, #28]
   17dee:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17df0:	69fb      	ldr	r3, [r7, #28]
   17df2:	2221      	movs	r2, #33	; 0x21
   17df4:	18ba      	adds	r2, r7, r2
   17df6:	7812      	ldrb	r2, [r2, #0]
   17df8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   17dfa:	69fb      	ldr	r3, [r7, #28]
   17dfc:	2222      	movs	r2, #34	; 0x22
   17dfe:	18ba      	adds	r2, r7, r2
   17e00:	7812      	ldrb	r2, [r2, #0]
   17e02:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   17e04:	4b12      	ldr	r3, [pc, #72]	; (17e50 <prvTraceStoreKernelCallWithParam+0x148>)
   17e06:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17e08:	4b0b      	ldr	r3, [pc, #44]	; (17e38 <prvTraceStoreKernelCallWithParam+0x130>)
   17e0a:	681b      	ldr	r3, [r3, #0]
   17e0c:	1e5a      	subs	r2, r3, #1
   17e0e:	4b0a      	ldr	r3, [pc, #40]	; (17e38 <prvTraceStoreKernelCallWithParam+0x130>)
   17e10:	601a      	str	r2, [r3, #0]
   17e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17e14:	613b      	str	r3, [r7, #16]
   17e16:	693b      	ldr	r3, [r7, #16]
   17e18:	f383 8810 	msr	PRIMASK, r3
}
   17e1c:	46bd      	mov	sp, r7
   17e1e:	b00a      	add	sp, #40	; 0x28
   17e20:	bd80      	pop	{r7, pc}
   17e22:	46c0      	nop			; (mov r8, r8)
   17e24:	000371fc 	.word	0x000371fc
   17e28:	00018a7d 	.word	0x00018a7d
   17e2c:	0003723c 	.word	0x0003723c
   17e30:	20000dc0 	.word	0x20000dc0
   17e34:	0003728c 	.word	0x0003728c
   17e38:	20000d18 	.word	0x20000d18
   17e3c:	000372dc 	.word	0x000372dc
   17e40:	20000d24 	.word	0x20000d24
   17e44:	00018c91 	.word	0x00018c91
   17e48:	00017e55 	.word	0x00017e55
   17e4c:	00018635 	.word	0x00018635
   17e50:	00018c39 	.word	0x00018c39

00017e54 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   17e54:	b580      	push	{r7, lr}
   17e56:	b084      	sub	sp, #16
   17e58:	af00      	add	r7, sp, #0
   17e5a:	6078      	str	r0, [r7, #4]
   17e5c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   17e5e:	687b      	ldr	r3, [r7, #4]
   17e60:	2bff      	cmp	r3, #255	; 0xff
   17e62:	d009      	beq.n	17e78 <prvTraceGetParam+0x24>
   17e64:	687b      	ldr	r3, [r7, #4]
   17e66:	4a19      	ldr	r2, [pc, #100]	; (17ecc <prvTraceGetParam+0x78>)
   17e68:	4293      	cmp	r3, r2
   17e6a:	d005      	beq.n	17e78 <prvTraceGetParam+0x24>
   17e6c:	4b18      	ldr	r3, [pc, #96]	; (17ed0 <prvTraceGetParam+0x7c>)
   17e6e:	0018      	movs	r0, r3
   17e70:	4b18      	ldr	r3, [pc, #96]	; (17ed4 <prvTraceGetParam+0x80>)
   17e72:	4798      	blx	r3
   17e74:	683b      	ldr	r3, [r7, #0]
   17e76:	e024      	b.n	17ec2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   17e78:	683a      	ldr	r2, [r7, #0]
   17e7a:	687b      	ldr	r3, [r7, #4]
   17e7c:	429a      	cmp	r2, r3
   17e7e:	d801      	bhi.n	17e84 <prvTraceGetParam+0x30>
	{
		return param;
   17e80:	683b      	ldr	r3, [r7, #0]
   17e82:	e01e      	b.n	17ec2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   17e84:	4b14      	ldr	r3, [pc, #80]	; (17ed8 <prvTraceGetParam+0x84>)
   17e86:	4798      	blx	r3
   17e88:	0003      	movs	r3, r0
   17e8a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   17e8c:	68fb      	ldr	r3, [r7, #12]
   17e8e:	2b00      	cmp	r3, #0
   17e90:	d014      	beq.n	17ebc <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   17e92:	68fb      	ldr	r3, [r7, #12]
   17e94:	2201      	movs	r2, #1
   17e96:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   17e98:	687b      	ldr	r3, [r7, #4]
   17e9a:	43db      	mvns	r3, r3
   17e9c:	683a      	ldr	r2, [r7, #0]
   17e9e:	4013      	ands	r3, r2
   17ea0:	0a1b      	lsrs	r3, r3, #8
   17ea2:	b2da      	uxtb	r2, r3
   17ea4:	68fb      	ldr	r3, [r7, #12]
   17ea6:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   17ea8:	687b      	ldr	r3, [r7, #4]
   17eaa:	43db      	mvns	r3, r3
   17eac:	683a      	ldr	r2, [r7, #0]
   17eae:	4013      	ands	r3, r2
   17eb0:	0c1b      	lsrs	r3, r3, #16
   17eb2:	b29a      	uxth	r2, r3
   17eb4:	68fb      	ldr	r3, [r7, #12]
   17eb6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17eb8:	4b08      	ldr	r3, [pc, #32]	; (17edc <prvTraceGetParam+0x88>)
   17eba:	4798      	blx	r3
		}

		return param & param_max;
   17ebc:	683b      	ldr	r3, [r7, #0]
   17ebe:	687a      	ldr	r2, [r7, #4]
   17ec0:	4013      	ands	r3, r2
	}
}
   17ec2:	0018      	movs	r0, r3
   17ec4:	46bd      	mov	sp, r7
   17ec6:	b004      	add	sp, #16
   17ec8:	bd80      	pop	{r7, pc}
   17eca:	46c0      	nop			; (mov r8, r8)
   17ecc:	0000ffff 	.word	0x0000ffff
   17ed0:	00037314 	.word	0x00037314
   17ed4:	00018a7d 	.word	0x00018a7d
   17ed8:	00018635 	.word	0x00018635
   17edc:	00018c39 	.word	0x00018c39

00017ee0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   17ee0:	b580      	push	{r7, lr}
   17ee2:	b08a      	sub	sp, #40	; 0x28
   17ee4:	af00      	add	r7, sp, #0
   17ee6:	6078      	str	r0, [r7, #4]
   17ee8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   17eea:	2326      	movs	r3, #38	; 0x26
   17eec:	18fb      	adds	r3, r7, r3
   17eee:	2200      	movs	r2, #0
   17ef0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   17ef2:	687b      	ldr	r3, [r7, #4]
   17ef4:	2bfe      	cmp	r3, #254	; 0xfe
   17ef6:	d904      	bls.n	17f02 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   17ef8:	4b2d      	ldr	r3, [pc, #180]	; (17fb0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   17efa:	0018      	movs	r0, r3
   17efc:	4b2d      	ldr	r3, [pc, #180]	; (17fb4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17efe:	4798      	blx	r3
   17f00:	e053      	b.n	17faa <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   17f02:	4b2d      	ldr	r3, [pc, #180]	; (17fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f04:	681b      	ldr	r3, [r3, #0]
   17f06:	2b00      	cmp	r3, #0
   17f08:	d004      	beq.n	17f14 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   17f0a:	4b2c      	ldr	r3, [pc, #176]	; (17fbc <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   17f0c:	0018      	movs	r0, r3
   17f0e:	4b29      	ldr	r3, [pc, #164]	; (17fb4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17f10:	4798      	blx	r3
		return;
   17f12:	e04a      	b.n	17faa <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17f14:	f3ef 8310 	mrs	r3, PRIMASK
   17f18:	613b      	str	r3, [r7, #16]
  return(result);
   17f1a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   17f1c:	623b      	str	r3, [r7, #32]
   17f1e:	2301      	movs	r3, #1
   17f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17f22:	697b      	ldr	r3, [r7, #20]
   17f24:	f383 8810 	msr	PRIMASK, r3
   17f28:	4b23      	ldr	r3, [pc, #140]	; (17fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f2a:	681b      	ldr	r3, [r3, #0]
   17f2c:	1c5a      	adds	r2, r3, #1
   17f2e:	4b22      	ldr	r3, [pc, #136]	; (17fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f30:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17f32:	4b23      	ldr	r3, [pc, #140]	; (17fc0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   17f34:	681b      	ldr	r3, [r3, #0]
   17f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17f38:	2b00      	cmp	r3, #0
   17f3a:	d02c      	beq.n	17f96 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   17f3c:	4b21      	ldr	r3, [pc, #132]	; (17fc4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   17f3e:	781b      	ldrb	r3, [r3, #0]
   17f40:	2b00      	cmp	r3, #0
   17f42:	d028      	beq.n	17f96 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   17f44:	20ff      	movs	r0, #255	; 0xff
   17f46:	4b20      	ldr	r3, [pc, #128]	; (17fc8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   17f48:	4798      	blx	r3
   17f4a:	0003      	movs	r3, r0
   17f4c:	001a      	movs	r2, r3
   17f4e:	231f      	movs	r3, #31
   17f50:	18fb      	adds	r3, r7, r3
   17f52:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   17f54:	683b      	ldr	r3, [r7, #0]
   17f56:	4a1d      	ldr	r2, [pc, #116]	; (17fcc <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   17f58:	0019      	movs	r1, r3
   17f5a:	0010      	movs	r0, r2
   17f5c:	4b1c      	ldr	r3, [pc, #112]	; (17fd0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   17f5e:	4798      	blx	r3
   17f60:	0002      	movs	r2, r0
   17f62:	2326      	movs	r3, #38	; 0x26
   17f64:	18fb      	adds	r3, r7, r3
   17f66:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   17f68:	4b1a      	ldr	r3, [pc, #104]	; (17fd4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   17f6a:	4798      	blx	r3
   17f6c:	0003      	movs	r3, r0
   17f6e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   17f70:	69bb      	ldr	r3, [r7, #24]
   17f72:	2b00      	cmp	r3, #0
   17f74:	d00f      	beq.n	17f96 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   17f76:	69bb      	ldr	r3, [r7, #24]
   17f78:	221f      	movs	r2, #31
   17f7a:	18ba      	adds	r2, r7, r2
   17f7c:	7812      	ldrb	r2, [r2, #0]
   17f7e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   17f80:	687b      	ldr	r3, [r7, #4]
   17f82:	b2da      	uxtb	r2, r3
   17f84:	69bb      	ldr	r3, [r7, #24]
   17f86:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   17f88:	69bb      	ldr	r3, [r7, #24]
   17f8a:	2226      	movs	r2, #38	; 0x26
   17f8c:	18ba      	adds	r2, r7, r2
   17f8e:	8812      	ldrh	r2, [r2, #0]
   17f90:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17f92:	4b11      	ldr	r3, [pc, #68]	; (17fd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   17f94:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17f96:	4b08      	ldr	r3, [pc, #32]	; (17fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f98:	681b      	ldr	r3, [r3, #0]
   17f9a:	1e5a      	subs	r2, r3, #1
   17f9c:	4b06      	ldr	r3, [pc, #24]	; (17fb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17f9e:	601a      	str	r2, [r3, #0]
   17fa0:	6a3b      	ldr	r3, [r7, #32]
   17fa2:	60fb      	str	r3, [r7, #12]
   17fa4:	68fb      	ldr	r3, [r7, #12]
   17fa6:	f383 8810 	msr	PRIMASK, r3
}
   17faa:	46bd      	mov	sp, r7
   17fac:	b00a      	add	sp, #40	; 0x28
   17fae:	bd80      	pop	{r7, pc}
   17fb0:	00037350 	.word	0x00037350
   17fb4:	00018a7d 	.word	0x00018a7d
   17fb8:	20000d18 	.word	0x20000d18
   17fbc:	000373a8 	.word	0x000373a8
   17fc0:	20000dc0 	.word	0x20000dc0
   17fc4:	20000d24 	.word	0x20000d24
   17fc8:	00018c91 	.word	0x00018c91
   17fcc:	0000ffff 	.word	0x0000ffff
   17fd0:	00017e55 	.word	0x00017e55
   17fd4:	00018635 	.word	0x00018635
   17fd8:	00018c39 	.word	0x00018c39

00017fdc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   17fdc:	b590      	push	{r4, r7, lr}
   17fde:	b089      	sub	sp, #36	; 0x24
   17fe0:	af00      	add	r7, sp, #0
   17fe2:	0002      	movs	r2, r0
   17fe4:	1dfb      	adds	r3, r7, #7
   17fe6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   17fe8:	1dfb      	adds	r3, r7, #7
   17fea:	781b      	ldrb	r3, [r3, #0]
   17fec:	2b0f      	cmp	r3, #15
   17fee:	d904      	bls.n	17ffa <prvTraceStoreTaskswitch+0x1e>
   17ff0:	4b34      	ldr	r3, [pc, #208]	; (180c4 <prvTraceStoreTaskswitch+0xe8>)
   17ff2:	0018      	movs	r0, r3
   17ff4:	4b34      	ldr	r3, [pc, #208]	; (180c8 <prvTraceStoreTaskswitch+0xec>)
   17ff6:	4798      	blx	r3
   17ff8:	e061      	b.n	180be <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17ffa:	f3ef 8310 	mrs	r3, PRIMASK
   17ffe:	60fb      	str	r3, [r7, #12]
  return(result);
   18000:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18002:	61fb      	str	r3, [r7, #28]
   18004:	2301      	movs	r3, #1
   18006:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18008:	693b      	ldr	r3, [r7, #16]
   1800a:	f383 8810 	msr	PRIMASK, r3
   1800e:	4b2f      	ldr	r3, [pc, #188]	; (180cc <prvTraceStoreTaskswitch+0xf0>)
   18010:	681b      	ldr	r3, [r3, #0]
   18012:	1c5a      	adds	r2, r3, #1
   18014:	4b2d      	ldr	r3, [pc, #180]	; (180cc <prvTraceStoreTaskswitch+0xf0>)
   18016:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18018:	4b2d      	ldr	r3, [pc, #180]	; (180d0 <prvTraceStoreTaskswitch+0xf4>)
   1801a:	781b      	ldrb	r3, [r3, #0]
   1801c:	1dfa      	adds	r2, r7, #7
   1801e:	7812      	ldrb	r2, [r2, #0]
   18020:	429a      	cmp	r2, r3
   18022:	d042      	beq.n	180aa <prvTraceStoreTaskswitch+0xce>
   18024:	4b2b      	ldr	r3, [pc, #172]	; (180d4 <prvTraceStoreTaskswitch+0xf8>)
   18026:	681b      	ldr	r3, [r3, #0]
   18028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1802a:	2b00      	cmp	r3, #0
   1802c:	d03d      	beq.n	180aa <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1802e:	4b2a      	ldr	r3, [pc, #168]	; (180d8 <prvTraceStoreTaskswitch+0xfc>)
   18030:	2200      	movs	r2, #0
   18032:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18034:	231a      	movs	r3, #26
   18036:	18fc      	adds	r4, r7, r3
   18038:	4b28      	ldr	r3, [pc, #160]	; (180dc <prvTraceStoreTaskswitch+0x100>)
   1803a:	0018      	movs	r0, r3
   1803c:	4b28      	ldr	r3, [pc, #160]	; (180e0 <prvTraceStoreTaskswitch+0x104>)
   1803e:	4798      	blx	r3
   18040:	0003      	movs	r3, r0
   18042:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18044:	4b22      	ldr	r3, [pc, #136]	; (180d0 <prvTraceStoreTaskswitch+0xf4>)
   18046:	1dfa      	adds	r2, r7, #7
   18048:	7812      	ldrb	r2, [r2, #0]
   1804a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1804c:	2319      	movs	r3, #25
   1804e:	18fb      	adds	r3, r7, r3
   18050:	4a1f      	ldr	r2, [pc, #124]	; (180d0 <prvTraceStoreTaskswitch+0xf4>)
   18052:	7812      	ldrb	r2, [r2, #0]
   18054:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18056:	4b23      	ldr	r3, [pc, #140]	; (180e4 <prvTraceStoreTaskswitch+0x108>)
   18058:	4798      	blx	r3
   1805a:	0003      	movs	r3, r0
   1805c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1805e:	697b      	ldr	r3, [r7, #20]
   18060:	2b00      	cmp	r3, #0
   18062:	d022      	beq.n	180aa <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18064:	4b1a      	ldr	r3, [pc, #104]	; (180d0 <prvTraceStoreTaskswitch+0xf4>)
   18066:	781b      	ldrb	r3, [r3, #0]
   18068:	0019      	movs	r1, r3
   1806a:	2003      	movs	r0, #3
   1806c:	4b1e      	ldr	r3, [pc, #120]	; (180e8 <prvTraceStoreTaskswitch+0x10c>)
   1806e:	4798      	blx	r3
   18070:	0003      	movs	r3, r0
   18072:	2b01      	cmp	r3, #1
   18074:	d103      	bne.n	1807e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18076:	697b      	ldr	r3, [r7, #20]
   18078:	2207      	movs	r2, #7
   1807a:	701a      	strb	r2, [r3, #0]
   1807c:	e002      	b.n	18084 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1807e:	697b      	ldr	r3, [r7, #20]
   18080:	2206      	movs	r2, #6
   18082:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18084:	697b      	ldr	r3, [r7, #20]
   18086:	221a      	movs	r2, #26
   18088:	18ba      	adds	r2, r7, r2
   1808a:	8812      	ldrh	r2, [r2, #0]
   1808c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1808e:	697b      	ldr	r3, [r7, #20]
   18090:	2219      	movs	r2, #25
   18092:	18ba      	adds	r2, r7, r2
   18094:	7812      	ldrb	r2, [r2, #0]
   18096:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18098:	4b0d      	ldr	r3, [pc, #52]	; (180d0 <prvTraceStoreTaskswitch+0xf4>)
   1809a:	781b      	ldrb	r3, [r3, #0]
   1809c:	2201      	movs	r2, #1
   1809e:	0019      	movs	r1, r3
   180a0:	2003      	movs	r0, #3
   180a2:	4b12      	ldr	r3, [pc, #72]	; (180ec <prvTraceStoreTaskswitch+0x110>)
   180a4:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   180a6:	4b12      	ldr	r3, [pc, #72]	; (180f0 <prvTraceStoreTaskswitch+0x114>)
   180a8:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   180aa:	4b08      	ldr	r3, [pc, #32]	; (180cc <prvTraceStoreTaskswitch+0xf0>)
   180ac:	681b      	ldr	r3, [r3, #0]
   180ae:	1e5a      	subs	r2, r3, #1
   180b0:	4b06      	ldr	r3, [pc, #24]	; (180cc <prvTraceStoreTaskswitch+0xf0>)
   180b2:	601a      	str	r2, [r3, #0]
   180b4:	69fb      	ldr	r3, [r7, #28]
   180b6:	60bb      	str	r3, [r7, #8]
   180b8:	68bb      	ldr	r3, [r7, #8]
   180ba:	f383 8810 	msr	PRIMASK, r3
}
   180be:	46bd      	mov	sp, r7
   180c0:	b009      	add	sp, #36	; 0x24
   180c2:	bd90      	pop	{r4, r7, pc}
   180c4:	000373e0 	.word	0x000373e0
   180c8:	00018a7d 	.word	0x00018a7d
   180cc:	20000d18 	.word	0x20000d18
   180d0:	20000d24 	.word	0x20000d24
   180d4:	20000dc0 	.word	0x20000dc0
   180d8:	20000d04 	.word	0x20000d04
   180dc:	0000ffff 	.word	0x0000ffff
   180e0:	00018c91 	.word	0x00018c91
   180e4:	00018635 	.word	0x00018635
   180e8:	000182d9 	.word	0x000182d9
   180ec:	00018235 	.word	0x00018235
   180f0:	00018c39 	.word	0x00018c39

000180f4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   180f4:	b590      	push	{r4, r7, lr}
   180f6:	b083      	sub	sp, #12
   180f8:	af00      	add	r7, sp, #0
   180fa:	0004      	movs	r4, r0
   180fc:	0008      	movs	r0, r1
   180fe:	0011      	movs	r1, r2
   18100:	1dfb      	adds	r3, r7, #7
   18102:	1c22      	adds	r2, r4, #0
   18104:	701a      	strb	r2, [r3, #0]
   18106:	1dbb      	adds	r3, r7, #6
   18108:	1c02      	adds	r2, r0, #0
   1810a:	701a      	strb	r2, [r3, #0]
   1810c:	1d7b      	adds	r3, r7, #5
   1810e:	1c0a      	adds	r2, r1, #0
   18110:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18112:	1dfb      	adds	r3, r7, #7
   18114:	781b      	ldrb	r3, [r3, #0]
   18116:	2b08      	cmp	r3, #8
   18118:	d904      	bls.n	18124 <prvTraceSetPriorityProperty+0x30>
   1811a:	4b1a      	ldr	r3, [pc, #104]	; (18184 <prvTraceSetPriorityProperty+0x90>)
   1811c:	0018      	movs	r0, r3
   1811e:	4b1a      	ldr	r3, [pc, #104]	; (18188 <prvTraceSetPriorityProperty+0x94>)
   18120:	4798      	blx	r3
   18122:	e02c      	b.n	1817e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18124:	4b19      	ldr	r3, [pc, #100]	; (1818c <prvTraceSetPriorityProperty+0x98>)
   18126:	681a      	ldr	r2, [r3, #0]
   18128:	1dfb      	adds	r3, r7, #7
   1812a:	781b      	ldrb	r3, [r3, #0]
   1812c:	2164      	movs	r1, #100	; 0x64
   1812e:	18d3      	adds	r3, r2, r3
   18130:	185b      	adds	r3, r3, r1
   18132:	781b      	ldrb	r3, [r3, #0]
   18134:	1dba      	adds	r2, r7, #6
   18136:	7812      	ldrb	r2, [r2, #0]
   18138:	429a      	cmp	r2, r3
   1813a:	d904      	bls.n	18146 <prvTraceSetPriorityProperty+0x52>
   1813c:	4b14      	ldr	r3, [pc, #80]	; (18190 <prvTraceSetPriorityProperty+0x9c>)
   1813e:	0018      	movs	r0, r3
   18140:	4b11      	ldr	r3, [pc, #68]	; (18188 <prvTraceSetPriorityProperty+0x94>)
   18142:	4798      	blx	r3
   18144:	e01b      	b.n	1817e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18146:	4b11      	ldr	r3, [pc, #68]	; (1818c <prvTraceSetPriorityProperty+0x98>)
   18148:	681c      	ldr	r4, [r3, #0]
   1814a:	1dfb      	adds	r3, r7, #7
   1814c:	781a      	ldrb	r2, [r3, #0]
   1814e:	1dbb      	adds	r3, r7, #6
   18150:	781b      	ldrb	r3, [r3, #0]
   18152:	0011      	movs	r1, r2
   18154:	0018      	movs	r0, r3
   18156:	4b0f      	ldr	r3, [pc, #60]	; (18194 <prvTraceSetPriorityProperty+0xa0>)
   18158:	4798      	blx	r3
   1815a:	0003      	movs	r3, r0
   1815c:	0018      	movs	r0, r3
   1815e:	4b0b      	ldr	r3, [pc, #44]	; (1818c <prvTraceSetPriorityProperty+0x98>)
   18160:	681a      	ldr	r2, [r3, #0]
   18162:	1dfb      	adds	r3, r7, #7
   18164:	781b      	ldrb	r3, [r3, #0]
   18166:	2170      	movs	r1, #112	; 0x70
   18168:	18d3      	adds	r3, r2, r3
   1816a:	185b      	adds	r3, r3, r1
   1816c:	781b      	ldrb	r3, [r3, #0]
   1816e:	18c3      	adds	r3, r0, r3
   18170:	3301      	adds	r3, #1
   18172:	229c      	movs	r2, #156	; 0x9c
   18174:	18e3      	adds	r3, r4, r3
   18176:	189b      	adds	r3, r3, r2
   18178:	1d7a      	adds	r2, r7, #5
   1817a:	7812      	ldrb	r2, [r2, #0]
   1817c:	701a      	strb	r2, [r3, #0]
}
   1817e:	46bd      	mov	sp, r7
   18180:	b003      	add	sp, #12
   18182:	bd90      	pop	{r4, r7, pc}
   18184:	00037574 	.word	0x00037574
   18188:	00018a7d 	.word	0x00018a7d
   1818c:	20000dc0 	.word	0x20000dc0
   18190:	000375c0 	.word	0x000375c0
   18194:	00018689 	.word	0x00018689

00018198 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18198:	b590      	push	{r4, r7, lr}
   1819a:	b083      	sub	sp, #12
   1819c:	af00      	add	r7, sp, #0
   1819e:	0002      	movs	r2, r0
   181a0:	1dfb      	adds	r3, r7, #7
   181a2:	701a      	strb	r2, [r3, #0]
   181a4:	1dbb      	adds	r3, r7, #6
   181a6:	1c0a      	adds	r2, r1, #0
   181a8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   181aa:	1dfb      	adds	r3, r7, #7
   181ac:	781b      	ldrb	r3, [r3, #0]
   181ae:	2b08      	cmp	r3, #8
   181b0:	d905      	bls.n	181be <prvTraceGetPriorityProperty+0x26>
   181b2:	4b1b      	ldr	r3, [pc, #108]	; (18220 <prvTraceGetPriorityProperty+0x88>)
   181b4:	0018      	movs	r0, r3
   181b6:	4b1b      	ldr	r3, [pc, #108]	; (18224 <prvTraceGetPriorityProperty+0x8c>)
   181b8:	4798      	blx	r3
   181ba:	2300      	movs	r3, #0
   181bc:	e02b      	b.n	18216 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   181be:	4b1a      	ldr	r3, [pc, #104]	; (18228 <prvTraceGetPriorityProperty+0x90>)
   181c0:	681a      	ldr	r2, [r3, #0]
   181c2:	1dfb      	adds	r3, r7, #7
   181c4:	781b      	ldrb	r3, [r3, #0]
   181c6:	2164      	movs	r1, #100	; 0x64
   181c8:	18d3      	adds	r3, r2, r3
   181ca:	185b      	adds	r3, r3, r1
   181cc:	781b      	ldrb	r3, [r3, #0]
   181ce:	1dba      	adds	r2, r7, #6
   181d0:	7812      	ldrb	r2, [r2, #0]
   181d2:	429a      	cmp	r2, r3
   181d4:	d905      	bls.n	181e2 <prvTraceGetPriorityProperty+0x4a>
   181d6:	4b15      	ldr	r3, [pc, #84]	; (1822c <prvTraceGetPriorityProperty+0x94>)
   181d8:	0018      	movs	r0, r3
   181da:	4b12      	ldr	r3, [pc, #72]	; (18224 <prvTraceGetPriorityProperty+0x8c>)
   181dc:	4798      	blx	r3
   181de:	2300      	movs	r3, #0
   181e0:	e019      	b.n	18216 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   181e2:	4b11      	ldr	r3, [pc, #68]	; (18228 <prvTraceGetPriorityProperty+0x90>)
   181e4:	681c      	ldr	r4, [r3, #0]
   181e6:	1dfb      	adds	r3, r7, #7
   181e8:	781a      	ldrb	r2, [r3, #0]
   181ea:	1dbb      	adds	r3, r7, #6
   181ec:	781b      	ldrb	r3, [r3, #0]
   181ee:	0011      	movs	r1, r2
   181f0:	0018      	movs	r0, r3
   181f2:	4b0f      	ldr	r3, [pc, #60]	; (18230 <prvTraceGetPriorityProperty+0x98>)
   181f4:	4798      	blx	r3
   181f6:	0003      	movs	r3, r0
   181f8:	0018      	movs	r0, r3
   181fa:	4b0b      	ldr	r3, [pc, #44]	; (18228 <prvTraceGetPriorityProperty+0x90>)
   181fc:	681a      	ldr	r2, [r3, #0]
   181fe:	1dfb      	adds	r3, r7, #7
   18200:	781b      	ldrb	r3, [r3, #0]
   18202:	2170      	movs	r1, #112	; 0x70
   18204:	18d3      	adds	r3, r2, r3
   18206:	185b      	adds	r3, r3, r1
   18208:	781b      	ldrb	r3, [r3, #0]
   1820a:	18c3      	adds	r3, r0, r3
   1820c:	3301      	adds	r3, #1
   1820e:	229c      	movs	r2, #156	; 0x9c
   18210:	18e3      	adds	r3, r4, r3
   18212:	189b      	adds	r3, r3, r2
   18214:	781b      	ldrb	r3, [r3, #0]
}
   18216:	0018      	movs	r0, r3
   18218:	46bd      	mov	sp, r7
   1821a:	b003      	add	sp, #12
   1821c:	bd90      	pop	{r4, r7, pc}
   1821e:	46c0      	nop			; (mov r8, r8)
   18220:	00037600 	.word	0x00037600
   18224:	00018a7d 	.word	0x00018a7d
   18228:	20000dc0 	.word	0x20000dc0
   1822c:	0003764c 	.word	0x0003764c
   18230:	00018689 	.word	0x00018689

00018234 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18234:	b590      	push	{r4, r7, lr}
   18236:	b083      	sub	sp, #12
   18238:	af00      	add	r7, sp, #0
   1823a:	0004      	movs	r4, r0
   1823c:	0008      	movs	r0, r1
   1823e:	0011      	movs	r1, r2
   18240:	1dfb      	adds	r3, r7, #7
   18242:	1c22      	adds	r2, r4, #0
   18244:	701a      	strb	r2, [r3, #0]
   18246:	1dbb      	adds	r3, r7, #6
   18248:	1c02      	adds	r2, r0, #0
   1824a:	701a      	strb	r2, [r3, #0]
   1824c:	1d7b      	adds	r3, r7, #5
   1824e:	1c0a      	adds	r2, r1, #0
   18250:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18252:	1dfb      	adds	r3, r7, #7
   18254:	781b      	ldrb	r3, [r3, #0]
   18256:	2b08      	cmp	r3, #8
   18258:	d904      	bls.n	18264 <prvTraceSetObjectState+0x30>
   1825a:	4b1a      	ldr	r3, [pc, #104]	; (182c4 <prvTraceSetObjectState+0x90>)
   1825c:	0018      	movs	r0, r3
   1825e:	4b1a      	ldr	r3, [pc, #104]	; (182c8 <prvTraceSetObjectState+0x94>)
   18260:	4798      	blx	r3
   18262:	e02b      	b.n	182bc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18264:	4b19      	ldr	r3, [pc, #100]	; (182cc <prvTraceSetObjectState+0x98>)
   18266:	681a      	ldr	r2, [r3, #0]
   18268:	1dfb      	adds	r3, r7, #7
   1826a:	781b      	ldrb	r3, [r3, #0]
   1826c:	2164      	movs	r1, #100	; 0x64
   1826e:	18d3      	adds	r3, r2, r3
   18270:	185b      	adds	r3, r3, r1
   18272:	781b      	ldrb	r3, [r3, #0]
   18274:	1dba      	adds	r2, r7, #6
   18276:	7812      	ldrb	r2, [r2, #0]
   18278:	429a      	cmp	r2, r3
   1827a:	d904      	bls.n	18286 <prvTraceSetObjectState+0x52>
   1827c:	4b14      	ldr	r3, [pc, #80]	; (182d0 <prvTraceSetObjectState+0x9c>)
   1827e:	0018      	movs	r0, r3
   18280:	4b11      	ldr	r3, [pc, #68]	; (182c8 <prvTraceSetObjectState+0x94>)
   18282:	4798      	blx	r3
   18284:	e01a      	b.n	182bc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18286:	4b11      	ldr	r3, [pc, #68]	; (182cc <prvTraceSetObjectState+0x98>)
   18288:	681c      	ldr	r4, [r3, #0]
   1828a:	1dfb      	adds	r3, r7, #7
   1828c:	781a      	ldrb	r2, [r3, #0]
   1828e:	1dbb      	adds	r3, r7, #6
   18290:	781b      	ldrb	r3, [r3, #0]
   18292:	0011      	movs	r1, r2
   18294:	0018      	movs	r0, r3
   18296:	4b0f      	ldr	r3, [pc, #60]	; (182d4 <prvTraceSetObjectState+0xa0>)
   18298:	4798      	blx	r3
   1829a:	0003      	movs	r3, r0
   1829c:	0018      	movs	r0, r3
   1829e:	4b0b      	ldr	r3, [pc, #44]	; (182cc <prvTraceSetObjectState+0x98>)
   182a0:	681a      	ldr	r2, [r3, #0]
   182a2:	1dfb      	adds	r3, r7, #7
   182a4:	781b      	ldrb	r3, [r3, #0]
   182a6:	2170      	movs	r1, #112	; 0x70
   182a8:	18d3      	adds	r3, r2, r3
   182aa:	185b      	adds	r3, r3, r1
   182ac:	781b      	ldrb	r3, [r3, #0]
   182ae:	18c3      	adds	r3, r0, r3
   182b0:	229c      	movs	r2, #156	; 0x9c
   182b2:	18e3      	adds	r3, r4, r3
   182b4:	189b      	adds	r3, r3, r2
   182b6:	1d7a      	adds	r2, r7, #5
   182b8:	7812      	ldrb	r2, [r2, #0]
   182ba:	701a      	strb	r2, [r3, #0]
}
   182bc:	46bd      	mov	sp, r7
   182be:	b003      	add	sp, #12
   182c0:	bd90      	pop	{r4, r7, pc}
   182c2:	46c0      	nop			; (mov r8, r8)
   182c4:	0003768c 	.word	0x0003768c
   182c8:	00018a7d 	.word	0x00018a7d
   182cc:	20000dc0 	.word	0x20000dc0
   182d0:	000376d0 	.word	0x000376d0
   182d4:	00018689 	.word	0x00018689

000182d8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   182d8:	b590      	push	{r4, r7, lr}
   182da:	b083      	sub	sp, #12
   182dc:	af00      	add	r7, sp, #0
   182de:	0002      	movs	r2, r0
   182e0:	1dfb      	adds	r3, r7, #7
   182e2:	701a      	strb	r2, [r3, #0]
   182e4:	1dbb      	adds	r3, r7, #6
   182e6:	1c0a      	adds	r2, r1, #0
   182e8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   182ea:	1dfb      	adds	r3, r7, #7
   182ec:	781b      	ldrb	r3, [r3, #0]
   182ee:	2b08      	cmp	r3, #8
   182f0:	d905      	bls.n	182fe <prvTraceGetObjectState+0x26>
   182f2:	4b1a      	ldr	r3, [pc, #104]	; (1835c <prvTraceGetObjectState+0x84>)
   182f4:	0018      	movs	r0, r3
   182f6:	4b1a      	ldr	r3, [pc, #104]	; (18360 <prvTraceGetObjectState+0x88>)
   182f8:	4798      	blx	r3
   182fa:	2300      	movs	r3, #0
   182fc:	e02a      	b.n	18354 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   182fe:	4b19      	ldr	r3, [pc, #100]	; (18364 <prvTraceGetObjectState+0x8c>)
   18300:	681a      	ldr	r2, [r3, #0]
   18302:	1dfb      	adds	r3, r7, #7
   18304:	781b      	ldrb	r3, [r3, #0]
   18306:	2164      	movs	r1, #100	; 0x64
   18308:	18d3      	adds	r3, r2, r3
   1830a:	185b      	adds	r3, r3, r1
   1830c:	781b      	ldrb	r3, [r3, #0]
   1830e:	1dba      	adds	r2, r7, #6
   18310:	7812      	ldrb	r2, [r2, #0]
   18312:	429a      	cmp	r2, r3
   18314:	d905      	bls.n	18322 <prvTraceGetObjectState+0x4a>
   18316:	4b14      	ldr	r3, [pc, #80]	; (18368 <prvTraceGetObjectState+0x90>)
   18318:	0018      	movs	r0, r3
   1831a:	4b11      	ldr	r3, [pc, #68]	; (18360 <prvTraceGetObjectState+0x88>)
   1831c:	4798      	blx	r3
   1831e:	2300      	movs	r3, #0
   18320:	e018      	b.n	18354 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18322:	4b10      	ldr	r3, [pc, #64]	; (18364 <prvTraceGetObjectState+0x8c>)
   18324:	681c      	ldr	r4, [r3, #0]
   18326:	1dfb      	adds	r3, r7, #7
   18328:	781a      	ldrb	r2, [r3, #0]
   1832a:	1dbb      	adds	r3, r7, #6
   1832c:	781b      	ldrb	r3, [r3, #0]
   1832e:	0011      	movs	r1, r2
   18330:	0018      	movs	r0, r3
   18332:	4b0e      	ldr	r3, [pc, #56]	; (1836c <prvTraceGetObjectState+0x94>)
   18334:	4798      	blx	r3
   18336:	0003      	movs	r3, r0
   18338:	0018      	movs	r0, r3
   1833a:	4b0a      	ldr	r3, [pc, #40]	; (18364 <prvTraceGetObjectState+0x8c>)
   1833c:	681a      	ldr	r2, [r3, #0]
   1833e:	1dfb      	adds	r3, r7, #7
   18340:	781b      	ldrb	r3, [r3, #0]
   18342:	2170      	movs	r1, #112	; 0x70
   18344:	18d3      	adds	r3, r2, r3
   18346:	185b      	adds	r3, r3, r1
   18348:	781b      	ldrb	r3, [r3, #0]
   1834a:	18c3      	adds	r3, r0, r3
   1834c:	229c      	movs	r2, #156	; 0x9c
   1834e:	18e3      	adds	r3, r4, r3
   18350:	189b      	adds	r3, r3, r2
   18352:	781b      	ldrb	r3, [r3, #0]
}
   18354:	0018      	movs	r0, r3
   18356:	46bd      	mov	sp, r7
   18358:	b003      	add	sp, #12
   1835a:	bd90      	pop	{r4, r7, pc}
   1835c:	0003770c 	.word	0x0003770c
   18360:	00018a7d 	.word	0x00018a7d
   18364:	20000dc0 	.word	0x20000dc0
   18368:	00037750 	.word	0x00037750
   1836c:	00018689 	.word	0x00018689

00018370 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18370:	b590      	push	{r4, r7, lr}
   18372:	b083      	sub	sp, #12
   18374:	af00      	add	r7, sp, #0
   18376:	0002      	movs	r2, r0
   18378:	1dfb      	adds	r3, r7, #7
   1837a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1837c:	4b11      	ldr	r3, [pc, #68]	; (183c4 <prvTraceSetTaskInstanceFinished+0x54>)
   1837e:	681b      	ldr	r3, [r3, #0]
   18380:	2267      	movs	r2, #103	; 0x67
   18382:	5c9b      	ldrb	r3, [r3, r2]
   18384:	1dfa      	adds	r2, r7, #7
   18386:	7812      	ldrb	r2, [r2, #0]
   18388:	429a      	cmp	r2, r3
   1838a:	d904      	bls.n	18396 <prvTraceSetTaskInstanceFinished+0x26>
   1838c:	4b0e      	ldr	r3, [pc, #56]	; (183c8 <prvTraceSetTaskInstanceFinished+0x58>)
   1838e:	0018      	movs	r0, r3
   18390:	4b0e      	ldr	r3, [pc, #56]	; (183cc <prvTraceSetTaskInstanceFinished+0x5c>)
   18392:	4798      	blx	r3
   18394:	e013      	b.n	183be <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18396:	4b0b      	ldr	r3, [pc, #44]	; (183c4 <prvTraceSetTaskInstanceFinished+0x54>)
   18398:	681c      	ldr	r4, [r3, #0]
   1839a:	1dfb      	adds	r3, r7, #7
   1839c:	781b      	ldrb	r3, [r3, #0]
   1839e:	2103      	movs	r1, #3
   183a0:	0018      	movs	r0, r3
   183a2:	4b0b      	ldr	r3, [pc, #44]	; (183d0 <prvTraceSetTaskInstanceFinished+0x60>)
   183a4:	4798      	blx	r3
   183a6:	0003      	movs	r3, r0
   183a8:	0019      	movs	r1, r3
   183aa:	4b06      	ldr	r3, [pc, #24]	; (183c4 <prvTraceSetTaskInstanceFinished+0x54>)
   183ac:	681b      	ldr	r3, [r3, #0]
   183ae:	2273      	movs	r2, #115	; 0x73
   183b0:	5c9b      	ldrb	r3, [r3, r2]
   183b2:	18cb      	adds	r3, r1, r3
   183b4:	229c      	movs	r2, #156	; 0x9c
   183b6:	18e3      	adds	r3, r4, r3
   183b8:	189b      	adds	r3, r3, r2
   183ba:	2200      	movs	r2, #0
   183bc:	701a      	strb	r2, [r3, #0]
#endif
}
   183be:	46bd      	mov	sp, r7
   183c0:	b003      	add	sp, #12
   183c2:	bd90      	pop	{r4, r7, pc}
   183c4:	20000dc0 	.word	0x20000dc0
   183c8:	0003778c 	.word	0x0003778c
   183cc:	00018a7d 	.word	0x00018a7d
   183d0:	00018689 	.word	0x00018689

000183d4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   183d4:	b580      	push	{r7, lr}
   183d6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   183d8:	4b75      	ldr	r3, [pc, #468]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   183da:	681b      	ldr	r3, [r3, #0]
   183dc:	2b00      	cmp	r3, #0
   183de:	d103      	bne.n	183e8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   183e0:	4b73      	ldr	r3, [pc, #460]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   183e2:	4a74      	ldr	r2, [pc, #464]	; (185b4 <prvTraceInitTraceData+0x1e0>)
   183e4:	601a      	str	r2, [r3, #0]
   183e6:	e006      	b.n	183f6 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   183e8:	4b71      	ldr	r3, [pc, #452]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   183ea:	681b      	ldr	r3, [r3, #0]
   183ec:	781b      	ldrb	r3, [r3, #0]
   183ee:	b2db      	uxtb	r3, r3
   183f0:	2b01      	cmp	r3, #1
   183f2:	d100      	bne.n	183f6 <prvTraceInitTraceData+0x22>
   183f4:	e0d8      	b.n	185a8 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   183f6:	4b70      	ldr	r3, [pc, #448]	; (185b8 <prvTraceInitTraceData+0x1e4>)
   183f8:	681a      	ldr	r2, [r3, #0]
   183fa:	4b70      	ldr	r3, [pc, #448]	; (185bc <prvTraceInitTraceData+0x1e8>)
   183fc:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   183fe:	4b6c      	ldr	r3, [pc, #432]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18400:	6818      	ldr	r0, [r3, #0]
   18402:	23bd      	movs	r3, #189	; 0xbd
   18404:	011b      	lsls	r3, r3, #4
   18406:	001a      	movs	r2, r3
   18408:	2100      	movs	r1, #0
   1840a:	4b6d      	ldr	r3, [pc, #436]	; (185c0 <prvTraceInitTraceData+0x1ec>)
   1840c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1840e:	4b68      	ldr	r3, [pc, #416]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18410:	681b      	ldr	r3, [r3, #0]
   18412:	4a6c      	ldr	r2, [pc, #432]	; (185c4 <prvTraceInitTraceData+0x1f0>)
   18414:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18416:	4b66      	ldr	r3, [pc, #408]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18418:	681b      	ldr	r3, [r3, #0]
   1841a:	2205      	movs	r2, #5
   1841c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1841e:	4b64      	ldr	r3, [pc, #400]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18420:	681b      	ldr	r3, [r3, #0]
   18422:	2200      	movs	r2, #0
   18424:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18426:	4b62      	ldr	r3, [pc, #392]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18428:	681b      	ldr	r3, [r3, #0]
   1842a:	22bd      	movs	r2, #189	; 0xbd
   1842c:	0112      	lsls	r2, r2, #4
   1842e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   18430:	4b5f      	ldr	r3, [pc, #380]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18432:	681b      	ldr	r3, [r3, #0]
   18434:	2296      	movs	r2, #150	; 0x96
   18436:	0052      	lsls	r2, r2, #1
   18438:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1843a:	4b5d      	ldr	r3, [pc, #372]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1843c:	681b      	ldr	r3, [r3, #0]
   1843e:	4a62      	ldr	r2, [pc, #392]	; (185c8 <prvTraceInitTraceData+0x1f4>)
   18440:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   18442:	4b5b      	ldr	r3, [pc, #364]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18444:	681b      	ldr	r3, [r3, #0]
   18446:	2200      	movs	r2, #0
   18448:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1844a:	4b59      	ldr	r3, [pc, #356]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1844c:	681b      	ldr	r3, [r3, #0]
   1844e:	2200      	movs	r2, #0
   18450:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   18452:	4b5e      	ldr	r3, [pc, #376]	; (185cc <prvTraceInitTraceData+0x1f8>)
   18454:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   18456:	4b56      	ldr	r3, [pc, #344]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18458:	681b      	ldr	r3, [r3, #0]
   1845a:	4a5d      	ldr	r2, [pc, #372]	; (185d0 <prvTraceInitTraceData+0x1fc>)
   1845c:	495d      	ldr	r1, [pc, #372]	; (185d4 <prvTraceInitTraceData+0x200>)
   1845e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   18460:	4b53      	ldr	r3, [pc, #332]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18462:	681a      	ldr	r2, [r3, #0]
   18464:	23ac      	movs	r3, #172	; 0xac
   18466:	00db      	lsls	r3, r3, #3
   18468:	21c8      	movs	r1, #200	; 0xc8
   1846a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1846c:	4b50      	ldr	r3, [pc, #320]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1846e:	681b      	ldr	r3, [r3, #0]
   18470:	4a59      	ldr	r2, [pc, #356]	; (185d8 <prvTraceInitTraceData+0x204>)
   18472:	2101      	movs	r1, #1
   18474:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   18476:	4b4e      	ldr	r3, [pc, #312]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18478:	681a      	ldr	r2, [r3, #0]
   1847a:	23d7      	movs	r3, #215	; 0xd7
   1847c:	00db      	lsls	r3, r3, #3
   1847e:	4957      	ldr	r1, [pc, #348]	; (185dc <prvTraceInitTraceData+0x208>)
   18480:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   18482:	4b4b      	ldr	r3, [pc, #300]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18484:	681b      	ldr	r3, [r3, #0]
   18486:	4a56      	ldr	r2, [pc, #344]	; (185e0 <prvTraceInitTraceData+0x20c>)
   18488:	4694      	mov	ip, r2
   1848a:	4463      	add	r3, ip
   1848c:	4955      	ldr	r1, [pc, #340]	; (185e4 <prvTraceInitTraceData+0x210>)
   1848e:	2250      	movs	r2, #80	; 0x50
   18490:	0018      	movs	r0, r3
   18492:	4b55      	ldr	r3, [pc, #340]	; (185e8 <prvTraceInitTraceData+0x214>)
   18494:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   18496:	4b46      	ldr	r3, [pc, #280]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18498:	681b      	ldr	r3, [r3, #0]
   1849a:	4a54      	ldr	r2, [pc, #336]	; (185ec <prvTraceInitTraceData+0x218>)
   1849c:	4954      	ldr	r1, [pc, #336]	; (185f0 <prvTraceInitTraceData+0x21c>)
   1849e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   184a0:	4b43      	ldr	r3, [pc, #268]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	4a53      	ldr	r2, [pc, #332]	; (185f4 <prvTraceInitTraceData+0x220>)
   184a6:	210a      	movs	r1, #10
   184a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   184aa:	4b41      	ldr	r3, [pc, #260]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184ac:	681b      	ldr	r3, [r3, #0]
   184ae:	4a52      	ldr	r2, [pc, #328]	; (185f8 <prvTraceInitTraceData+0x224>)
   184b0:	210b      	movs	r1, #11
   184b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   184b4:	4b3e      	ldr	r3, [pc, #248]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184b6:	681b      	ldr	r3, [r3, #0]
   184b8:	4a50      	ldr	r2, [pc, #320]	; (185fc <prvTraceInitTraceData+0x228>)
   184ba:	210c      	movs	r1, #12
   184bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   184be:	4b3c      	ldr	r3, [pc, #240]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184c0:	681b      	ldr	r3, [r3, #0]
   184c2:	4a4f      	ldr	r2, [pc, #316]	; (18600 <prvTraceInitTraceData+0x22c>)
   184c4:	210d      	movs	r1, #13
   184c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   184c8:	4b39      	ldr	r3, [pc, #228]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184ca:	681b      	ldr	r3, [r3, #0]
   184cc:	4a4d      	ldr	r2, [pc, #308]	; (18604 <prvTraceInitTraceData+0x230>)
   184ce:	2171      	movs	r1, #113	; 0x71
   184d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   184d2:	4b37      	ldr	r3, [pc, #220]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184d4:	681b      	ldr	r3, [r3, #0]
   184d6:	4a4c      	ldr	r2, [pc, #304]	; (18608 <prvTraceInitTraceData+0x234>)
   184d8:	2172      	movs	r1, #114	; 0x72
   184da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   184dc:	4b34      	ldr	r3, [pc, #208]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184de:	681b      	ldr	r3, [r3, #0]
   184e0:	4a4a      	ldr	r2, [pc, #296]	; (1860c <prvTraceInitTraceData+0x238>)
   184e2:	2173      	movs	r1, #115	; 0x73
   184e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   184e6:	4b32      	ldr	r3, [pc, #200]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184e8:	681b      	ldr	r3, [r3, #0]
   184ea:	4a49      	ldr	r2, [pc, #292]	; (18610 <prvTraceInitTraceData+0x23c>)
   184ec:	2174      	movs	r1, #116	; 0x74
   184ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   184f0:	4b2f      	ldr	r3, [pc, #188]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184f2:	681b      	ldr	r3, [r3, #0]
   184f4:	4a47      	ldr	r2, [pc, #284]	; (18614 <prvTraceInitTraceData+0x240>)
   184f6:	21f1      	movs	r1, #241	; 0xf1
   184f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   184fa:	4b2d      	ldr	r3, [pc, #180]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   184fc:	681b      	ldr	r3, [r3, #0]
   184fe:	4a46      	ldr	r2, [pc, #280]	; (18618 <prvTraceInitTraceData+0x244>)
   18500:	21f2      	movs	r1, #242	; 0xf2
   18502:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   18504:	4b2a      	ldr	r3, [pc, #168]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18506:	681b      	ldr	r3, [r3, #0]
   18508:	4a44      	ldr	r2, [pc, #272]	; (1861c <prvTraceInitTraceData+0x248>)
   1850a:	21f3      	movs	r1, #243	; 0xf3
   1850c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1850e:	4b28      	ldr	r3, [pc, #160]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18510:	681b      	ldr	r3, [r3, #0]
   18512:	4a43      	ldr	r2, [pc, #268]	; (18620 <prvTraceInitTraceData+0x24c>)
   18514:	21f4      	movs	r1, #244	; 0xf4
   18516:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   18518:	4b42      	ldr	r3, [pc, #264]	; (18624 <prvTraceInitTraceData+0x250>)
   1851a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1851c:	4b24      	ldr	r3, [pc, #144]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1851e:	681b      	ldr	r3, [r3, #0]
   18520:	22f4      	movs	r2, #244	; 0xf4
   18522:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   18524:	4b22      	ldr	r3, [pc, #136]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18526:	681b      	ldr	r3, [r3, #0]
   18528:	22f3      	movs	r2, #243	; 0xf3
   1852a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1852c:	4b20      	ldr	r3, [pc, #128]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1852e:	681b      	ldr	r3, [r3, #0]
   18530:	22f2      	movs	r2, #242	; 0xf2
   18532:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   18534:	4b1e      	ldr	r3, [pc, #120]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18536:	681b      	ldr	r3, [r3, #0]
   18538:	22f1      	movs	r2, #241	; 0xf1
   1853a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1853c:	4b1c      	ldr	r3, [pc, #112]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1853e:	681b      	ldr	r3, [r3, #0]
   18540:	2274      	movs	r2, #116	; 0x74
   18542:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   18544:	4b1a      	ldr	r3, [pc, #104]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18546:	681b      	ldr	r3, [r3, #0]
   18548:	2273      	movs	r2, #115	; 0x73
   1854a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1854c:	4b18      	ldr	r3, [pc, #96]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1854e:	681b      	ldr	r3, [r3, #0]
   18550:	2272      	movs	r2, #114	; 0x72
   18552:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   18554:	4b16      	ldr	r3, [pc, #88]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18556:	681b      	ldr	r3, [r3, #0]
   18558:	2271      	movs	r2, #113	; 0x71
   1855a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1855c:	4b14      	ldr	r3, [pc, #80]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1855e:	681b      	ldr	r3, [r3, #0]
   18560:	2204      	movs	r2, #4
   18562:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   18564:	4b12      	ldr	r3, [pc, #72]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18566:	681b      	ldr	r3, [r3, #0]
   18568:	2203      	movs	r2, #3
   1856a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1856c:	4b10      	ldr	r3, [pc, #64]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1856e:	681b      	ldr	r3, [r3, #0]
   18570:	2202      	movs	r2, #2
   18572:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   18574:	4b0e      	ldr	r3, [pc, #56]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18576:	681b      	ldr	r3, [r3, #0]
   18578:	2201      	movs	r2, #1
   1857a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1857c:	4b2a      	ldr	r3, [pc, #168]	; (18628 <prvTraceInitTraceData+0x254>)
   1857e:	681b      	ldr	r3, [r3, #0]
   18580:	2b00      	cmp	r3, #0
   18582:	d012      	beq.n	185aa <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18584:	4b0a      	ldr	r3, [pc, #40]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   18586:	681b      	ldr	r3, [r3, #0]
   18588:	4a15      	ldr	r2, [pc, #84]	; (185e0 <prvTraceInitTraceData+0x20c>)
   1858a:	1898      	adds	r0, r3, r2
   1858c:	4b26      	ldr	r3, [pc, #152]	; (18628 <prvTraceInitTraceData+0x254>)
   1858e:	681b      	ldr	r3, [r3, #0]
   18590:	2250      	movs	r2, #80	; 0x50
   18592:	0019      	movs	r1, r3
   18594:	4b14      	ldr	r3, [pc, #80]	; (185e8 <prvTraceInitTraceData+0x214>)
   18596:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   18598:	4b05      	ldr	r3, [pc, #20]	; (185b0 <prvTraceInitTraceData+0x1dc>)
   1859a:	681b      	ldr	r3, [r3, #0]
   1859c:	4a23      	ldr	r2, [pc, #140]	; (1862c <prvTraceInitTraceData+0x258>)
   1859e:	2101      	movs	r1, #1
   185a0:	5099      	str	r1, [r3, r2]
		vTraceStop();
   185a2:	4b23      	ldr	r3, [pc, #140]	; (18630 <prvTraceInitTraceData+0x25c>)
   185a4:	4798      	blx	r3
   185a6:	e000      	b.n	185aa <prvTraceInitTraceData+0x1d6>
			return;
   185a8:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   185aa:	46bd      	mov	sp, r7
   185ac:	bd80      	pop	{r7, pc}
   185ae:	46c0      	nop			; (mov r8, r8)
   185b0:	20000dc0 	.word	0x20000dc0
   185b4:	200049c0 	.word	0x200049c0
   185b8:	e000e018 	.word	0xe000e018
   185bc:	20005590 	.word	0x20005590
   185c0:	0003460f 	.word	0x0003460f
   185c4:	00001aa1 	.word	0x00001aa1
   185c8:	f0f0f0f0 	.word	0xf0f0f0f0
   185cc:	00017539 	.word	0x00017539
   185d0:	0000055c 	.word	0x0000055c
   185d4:	f1f1f1f1 	.word	0xf1f1f1f1
   185d8:	00000564 	.word	0x00000564
   185dc:	f2f2f2f2 	.word	0xf2f2f2f2
   185e0:	000006bc 	.word	0x000006bc
   185e4:	000377d4 	.word	0x000377d4
   185e8:	00018949 	.word	0x00018949
   185ec:	0000070c 	.word	0x0000070c
   185f0:	f3f3f3f3 	.word	0xf3f3f3f3
   185f4:	00000bc4 	.word	0x00000bc4
   185f8:	00000bc5 	.word	0x00000bc5
   185fc:	00000bc6 	.word	0x00000bc6
   18600:	00000bc7 	.word	0x00000bc7
   18604:	00000bc8 	.word	0x00000bc8
   18608:	00000bc9 	.word	0x00000bc9
   1860c:	00000bca 	.word	0x00000bca
   18610:	00000bcb 	.word	0x00000bcb
   18614:	00000bcc 	.word	0x00000bcc
   18618:	00000bcd 	.word	0x00000bcd
   1861c:	00000bce 	.word	0x00000bce
   18620:	00000bcf 	.word	0x00000bcf
   18624:	000176d9 	.word	0x000176d9
   18628:	20000d20 	.word	0x20000d20
   1862c:	000006b4 	.word	0x000006b4
   18630:	00017941 	.word	0x00017941

00018634 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   18634:	b580      	push	{r7, lr}
   18636:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   18638:	4b10      	ldr	r3, [pc, #64]	; (1867c <prvTraceNextFreeEventBufferSlot+0x48>)
   1863a:	681b      	ldr	r3, [r3, #0]
   1863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1863e:	2b00      	cmp	r3, #0
   18640:	d101      	bne.n	18646 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   18642:	2300      	movs	r3, #0
   18644:	e017      	b.n	18676 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18646:	4b0d      	ldr	r3, [pc, #52]	; (1867c <prvTraceNextFreeEventBufferSlot+0x48>)
   18648:	681b      	ldr	r3, [r3, #0]
   1864a:	69da      	ldr	r2, [r3, #28]
   1864c:	232c      	movs	r3, #44	; 0x2c
   1864e:	33ff      	adds	r3, #255	; 0xff
   18650:	429a      	cmp	r2, r3
   18652:	d905      	bls.n	18660 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   18654:	4b0a      	ldr	r3, [pc, #40]	; (18680 <prvTraceNextFreeEventBufferSlot+0x4c>)
   18656:	0018      	movs	r0, r3
   18658:	4b0a      	ldr	r3, [pc, #40]	; (18684 <prvTraceNextFreeEventBufferSlot+0x50>)
   1865a:	4798      	blx	r3
		return NULL;
   1865c:	2300      	movs	r3, #0
   1865e:	e00a      	b.n	18676 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   18660:	4b06      	ldr	r3, [pc, #24]	; (1867c <prvTraceNextFreeEventBufferSlot+0x48>)
   18662:	681a      	ldr	r2, [r3, #0]
   18664:	4b05      	ldr	r3, [pc, #20]	; (1867c <prvTraceNextFreeEventBufferSlot+0x48>)
   18666:	681b      	ldr	r3, [r3, #0]
   18668:	69db      	ldr	r3, [r3, #28]
   1866a:	009b      	lsls	r3, r3, #2
   1866c:	21e2      	movs	r1, #226	; 0xe2
   1866e:	00c9      	lsls	r1, r1, #3
   18670:	468c      	mov	ip, r1
   18672:	4463      	add	r3, ip
   18674:	18d3      	adds	r3, r2, r3
}
   18676:	0018      	movs	r0, r3
   18678:	46bd      	mov	sp, r7
   1867a:	bd80      	pop	{r7, pc}
   1867c:	20000dc0 	.word	0x20000dc0
   18680:	000377e8 	.word	0x000377e8
   18684:	00018a7d 	.word	0x00018a7d

00018688 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   18688:	b580      	push	{r7, lr}
   1868a:	b082      	sub	sp, #8
   1868c:	af00      	add	r7, sp, #0
   1868e:	0002      	movs	r2, r0
   18690:	1dfb      	adds	r3, r7, #7
   18692:	701a      	strb	r2, [r3, #0]
   18694:	1dbb      	adds	r3, r7, #6
   18696:	1c0a      	adds	r2, r1, #0
   18698:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1869a:	1dbb      	adds	r3, r7, #6
   1869c:	781b      	ldrb	r3, [r3, #0]
   1869e:	2b08      	cmp	r3, #8
   186a0:	d905      	bls.n	186ae <uiIndexOfObject+0x26>
   186a2:	4b2a      	ldr	r3, [pc, #168]	; (1874c <uiIndexOfObject+0xc4>)
   186a4:	0018      	movs	r0, r3
   186a6:	4b2a      	ldr	r3, [pc, #168]	; (18750 <uiIndexOfObject+0xc8>)
   186a8:	4798      	blx	r3
   186aa:	2300      	movs	r3, #0
   186ac:	e049      	b.n	18742 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   186ae:	1dfb      	adds	r3, r7, #7
   186b0:	781b      	ldrb	r3, [r3, #0]
   186b2:	2b00      	cmp	r3, #0
   186b4:	d00b      	beq.n	186ce <uiIndexOfObject+0x46>
   186b6:	4b27      	ldr	r3, [pc, #156]	; (18754 <uiIndexOfObject+0xcc>)
   186b8:	681a      	ldr	r2, [r3, #0]
   186ba:	1dbb      	adds	r3, r7, #6
   186bc:	781b      	ldrb	r3, [r3, #0]
   186be:	2164      	movs	r1, #100	; 0x64
   186c0:	18d3      	adds	r3, r2, r3
   186c2:	185b      	adds	r3, r3, r1
   186c4:	781b      	ldrb	r3, [r3, #0]
   186c6:	1dfa      	adds	r2, r7, #7
   186c8:	7812      	ldrb	r2, [r2, #0]
   186ca:	429a      	cmp	r2, r3
   186cc:	d905      	bls.n	186da <uiIndexOfObject+0x52>
   186ce:	4b22      	ldr	r3, [pc, #136]	; (18758 <uiIndexOfObject+0xd0>)
   186d0:	0018      	movs	r0, r3
   186d2:	4b1f      	ldr	r3, [pc, #124]	; (18750 <uiIndexOfObject+0xc8>)
   186d4:	4798      	blx	r3
   186d6:	2300      	movs	r3, #0
   186d8:	e033      	b.n	18742 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   186da:	1dbb      	adds	r3, r7, #6
   186dc:	781b      	ldrb	r3, [r3, #0]
   186de:	2b08      	cmp	r3, #8
   186e0:	d82a      	bhi.n	18738 <uiIndexOfObject+0xb0>
   186e2:	1dfb      	adds	r3, r7, #7
   186e4:	781b      	ldrb	r3, [r3, #0]
   186e6:	2b00      	cmp	r3, #0
   186e8:	d026      	beq.n	18738 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   186ea:	4b1a      	ldr	r3, [pc, #104]	; (18754 <uiIndexOfObject+0xcc>)
   186ec:	681a      	ldr	r2, [r3, #0]
   186ee:	1dbb      	adds	r3, r7, #6
   186f0:	781b      	ldrb	r3, [r3, #0]
   186f2:	2164      	movs	r1, #100	; 0x64
   186f4:	18d3      	adds	r3, r2, r3
   186f6:	185b      	adds	r3, r3, r1
   186f8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   186fa:	1dfa      	adds	r2, r7, #7
   186fc:	7812      	ldrb	r2, [r2, #0]
   186fe:	429a      	cmp	r2, r3
   18700:	d81a      	bhi.n	18738 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18702:	4b14      	ldr	r3, [pc, #80]	; (18754 <uiIndexOfObject+0xcc>)
   18704:	681a      	ldr	r2, [r3, #0]
   18706:	1dbb      	adds	r3, r7, #6
   18708:	781b      	ldrb	r3, [r3, #0]
   1870a:	3340      	adds	r3, #64	; 0x40
   1870c:	005b      	lsls	r3, r3, #1
   1870e:	18d3      	adds	r3, r2, r3
   18710:	3308      	adds	r3, #8
   18712:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18714:	4b0f      	ldr	r3, [pc, #60]	; (18754 <uiIndexOfObject+0xcc>)
   18716:	6819      	ldr	r1, [r3, #0]
   18718:	1dbb      	adds	r3, r7, #6
   1871a:	781b      	ldrb	r3, [r3, #0]
   1871c:	207c      	movs	r0, #124	; 0x7c
   1871e:	18cb      	adds	r3, r1, r3
   18720:	181b      	adds	r3, r3, r0
   18722:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18724:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18726:	1df9      	adds	r1, r7, #7
   18728:	7809      	ldrb	r1, [r1, #0]
   1872a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1872c:	b289      	uxth	r1, r1
   1872e:	434b      	muls	r3, r1
   18730:	b29b      	uxth	r3, r3
   18732:	18d3      	adds	r3, r2, r3
   18734:	b29b      	uxth	r3, r3
   18736:	e004      	b.n	18742 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   18738:	4b08      	ldr	r3, [pc, #32]	; (1875c <uiIndexOfObject+0xd4>)
   1873a:	0018      	movs	r0, r3
   1873c:	4b04      	ldr	r3, [pc, #16]	; (18750 <uiIndexOfObject+0xc8>)
   1873e:	4798      	blx	r3
	return 0;
   18740:	2300      	movs	r3, #0
}
   18742:	0018      	movs	r0, r3
   18744:	46bd      	mov	sp, r7
   18746:	b002      	add	sp, #8
   18748:	bd80      	pop	{r7, pc}
   1874a:	46c0      	nop			; (mov r8, r8)
   1874c:	00037810 	.word	0x00037810
   18750:	00018a7d 	.word	0x00018a7d
   18754:	20000dc0 	.word	0x20000dc0
   18758:	00037850 	.word	0x00037850
   1875c:	00037890 	.word	0x00037890

00018760 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   18760:	b580      	push	{r7, lr}
   18762:	b088      	sub	sp, #32
   18764:	af00      	add	r7, sp, #0
   18766:	0002      	movs	r2, r0
   18768:	1dfb      	adds	r3, r7, #7
   1876a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1876c:	4b5a      	ldr	r3, [pc, #360]	; (188d8 <prvTraceGetObjectHandle+0x178>)
   1876e:	681b      	ldr	r3, [r3, #0]
   18770:	2b00      	cmp	r3, #0
   18772:	d105      	bne.n	18780 <prvTraceGetObjectHandle+0x20>
   18774:	4b59      	ldr	r3, [pc, #356]	; (188dc <prvTraceGetObjectHandle+0x17c>)
   18776:	0018      	movs	r0, r3
   18778:	4b59      	ldr	r3, [pc, #356]	; (188e0 <prvTraceGetObjectHandle+0x180>)
   1877a:	4798      	blx	r3
   1877c:	2300      	movs	r3, #0
   1877e:	e0a7      	b.n	188d0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18780:	1dfb      	adds	r3, r7, #7
   18782:	781b      	ldrb	r3, [r3, #0]
   18784:	2b08      	cmp	r3, #8
   18786:	d905      	bls.n	18794 <prvTraceGetObjectHandle+0x34>
   18788:	4b56      	ldr	r3, [pc, #344]	; (188e4 <prvTraceGetObjectHandle+0x184>)
   1878a:	0018      	movs	r0, r3
   1878c:	4b54      	ldr	r3, [pc, #336]	; (188e0 <prvTraceGetObjectHandle+0x180>)
   1878e:	4798      	blx	r3
   18790:	2300      	movs	r3, #0
   18792:	e09d      	b.n	188d0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18794:	f3ef 8310 	mrs	r3, PRIMASK
   18798:	60fb      	str	r3, [r7, #12]
  return(result);
   1879a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1879c:	61bb      	str	r3, [r7, #24]
   1879e:	2301      	movs	r3, #1
   187a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   187a2:	693b      	ldr	r3, [r7, #16]
   187a4:	f383 8810 	msr	PRIMASK, r3
   187a8:	4b4f      	ldr	r3, [pc, #316]	; (188e8 <prvTraceGetObjectHandle+0x188>)
   187aa:	681b      	ldr	r3, [r3, #0]
   187ac:	1c5a      	adds	r2, r3, #1
   187ae:	4b4e      	ldr	r3, [pc, #312]	; (188e8 <prvTraceGetObjectHandle+0x188>)
   187b0:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   187b2:	1dfb      	adds	r3, r7, #7
   187b4:	781a      	ldrb	r2, [r3, #0]
   187b6:	4b4d      	ldr	r3, [pc, #308]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   187b8:	0052      	lsls	r2, r2, #1
   187ba:	5ad3      	ldrh	r3, [r2, r3]
   187bc:	001a      	movs	r2, r3
   187be:	4b4c      	ldr	r3, [pc, #304]	; (188f0 <prvTraceGetObjectHandle+0x190>)
   187c0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   187c2:	4b4b      	ldr	r3, [pc, #300]	; (188f0 <prvTraceGetObjectHandle+0x190>)
   187c4:	681b      	ldr	r3, [r3, #0]
   187c6:	4a49      	ldr	r2, [pc, #292]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   187c8:	2148      	movs	r1, #72	; 0x48
   187ca:	18d3      	adds	r3, r2, r3
   187cc:	185b      	adds	r3, r3, r1
   187ce:	781b      	ldrb	r3, [r3, #0]
   187d0:	2b00      	cmp	r3, #0
   187d2:	d117      	bne.n	18804 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   187d4:	4b46      	ldr	r3, [pc, #280]	; (188f0 <prvTraceGetObjectHandle+0x190>)
   187d6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   187d8:	4b45      	ldr	r3, [pc, #276]	; (188f0 <prvTraceGetObjectHandle+0x190>)
   187da:	681b      	ldr	r3, [r3, #0]
   187dc:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   187de:	1dfb      	adds	r3, r7, #7
   187e0:	781b      	ldrb	r3, [r3, #0]
   187e2:	4842      	ldr	r0, [pc, #264]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   187e4:	3308      	adds	r3, #8
   187e6:	005b      	lsls	r3, r3, #1
   187e8:	18c3      	adds	r3, r0, r3
   187ea:	3302      	adds	r3, #2
   187ec:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   187ee:	b2db      	uxtb	r3, r3
   187f0:	1acb      	subs	r3, r1, r3
   187f2:	b2db      	uxtb	r3, r3
   187f4:	3301      	adds	r3, #1
   187f6:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   187f8:	4b3c      	ldr	r3, [pc, #240]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   187fa:	2148      	movs	r1, #72	; 0x48
   187fc:	189b      	adds	r3, r3, r2
   187fe:	185b      	adds	r3, r3, r1
   18800:	1c02      	adds	r2, r0, #0
   18802:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   18804:	4b3a      	ldr	r3, [pc, #232]	; (188f0 <prvTraceGetObjectHandle+0x190>)
   18806:	681a      	ldr	r2, [r3, #0]
   18808:	231f      	movs	r3, #31
   1880a:	18fb      	adds	r3, r7, r3
   1880c:	4937      	ldr	r1, [pc, #220]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   1880e:	2048      	movs	r0, #72	; 0x48
   18810:	188a      	adds	r2, r1, r2
   18812:	1812      	adds	r2, r2, r0
   18814:	7812      	ldrb	r2, [r2, #0]
   18816:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18818:	1dfb      	adds	r3, r7, #7
   1881a:	781a      	ldrb	r2, [r3, #0]
   1881c:	4b33      	ldr	r3, [pc, #204]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   1881e:	0052      	lsls	r2, r2, #1
   18820:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   18822:	1dfb      	adds	r3, r7, #7
   18824:	781b      	ldrb	r3, [r3, #0]
   18826:	4931      	ldr	r1, [pc, #196]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   18828:	3310      	adds	r3, #16
   1882a:	005b      	lsls	r3, r3, #1
   1882c:	18cb      	adds	r3, r1, r3
   1882e:	3304      	adds	r3, #4
   18830:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18832:	429a      	cmp	r2, r3
   18834:	d90d      	bls.n	18852 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18836:	1dfb      	adds	r3, r7, #7
   18838:	781b      	ldrb	r3, [r3, #0]
   1883a:	0018      	movs	r0, r3
   1883c:	4b2d      	ldr	r3, [pc, #180]	; (188f4 <prvTraceGetObjectHandle+0x194>)
   1883e:	4798      	blx	r3
   18840:	0003      	movs	r3, r0
   18842:	0018      	movs	r0, r3
   18844:	4b26      	ldr	r3, [pc, #152]	; (188e0 <prvTraceGetObjectHandle+0x180>)
   18846:	4798      	blx	r3
		handle = 0;
   18848:	231f      	movs	r3, #31
   1884a:	18fb      	adds	r3, r7, r3
   1884c:	2200      	movs	r2, #0
   1884e:	701a      	strb	r2, [r3, #0]
   18850:	e031      	b.n	188b6 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   18852:	1dfb      	adds	r3, r7, #7
   18854:	781b      	ldrb	r3, [r3, #0]
   18856:	4a25      	ldr	r2, [pc, #148]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   18858:	0059      	lsls	r1, r3, #1
   1885a:	5a8a      	ldrh	r2, [r1, r2]
   1885c:	3201      	adds	r2, #1
   1885e:	b291      	uxth	r1, r2
   18860:	4a22      	ldr	r2, [pc, #136]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   18862:	005b      	lsls	r3, r3, #1
   18864:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   18866:	1dfb      	adds	r3, r7, #7
   18868:	781a      	ldrb	r2, [r3, #0]
   1886a:	4b20      	ldr	r3, [pc, #128]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   1886c:	0052      	lsls	r2, r2, #1
   1886e:	5ad3      	ldrh	r3, [r2, r3]
   18870:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   18872:	1dfb      	adds	r3, r7, #7
   18874:	781b      	ldrb	r3, [r3, #0]
   18876:	4a1d      	ldr	r2, [pc, #116]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   18878:	3308      	adds	r3, #8
   1887a:	005b      	lsls	r3, r3, #1
   1887c:	18d3      	adds	r3, r2, r3
   1887e:	3302      	adds	r3, #2
   18880:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   18882:	1acb      	subs	r3, r1, r3
   18884:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   18886:	1dfb      	adds	r3, r7, #7
   18888:	781b      	ldrb	r3, [r3, #0]
   1888a:	4a18      	ldr	r2, [pc, #96]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   1888c:	3318      	adds	r3, #24
   1888e:	005b      	lsls	r3, r3, #1
   18890:	18d3      	adds	r3, r2, r3
   18892:	3306      	adds	r3, #6
   18894:	881b      	ldrh	r3, [r3, #0]
   18896:	001a      	movs	r2, r3
		if (hndCount >
   18898:	697b      	ldr	r3, [r7, #20]
   1889a:	429a      	cmp	r2, r3
   1889c:	da0b      	bge.n	188b6 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1889e:	1dfb      	adds	r3, r7, #7
   188a0:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   188a2:	697a      	ldr	r2, [r7, #20]
   188a4:	b2d2      	uxtb	r2, r2
   188a6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   188a8:	4a10      	ldr	r2, [pc, #64]	; (188ec <prvTraceGetObjectHandle+0x18c>)
   188aa:	3318      	adds	r3, #24
   188ac:	005b      	lsls	r3, r3, #1
   188ae:	18d3      	adds	r3, r2, r3
   188b0:	3306      	adds	r3, #6
   188b2:	1c0a      	adds	r2, r1, #0
   188b4:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   188b6:	4b0c      	ldr	r3, [pc, #48]	; (188e8 <prvTraceGetObjectHandle+0x188>)
   188b8:	681b      	ldr	r3, [r3, #0]
   188ba:	1e5a      	subs	r2, r3, #1
   188bc:	4b0a      	ldr	r3, [pc, #40]	; (188e8 <prvTraceGetObjectHandle+0x188>)
   188be:	601a      	str	r2, [r3, #0]
   188c0:	69bb      	ldr	r3, [r7, #24]
   188c2:	60bb      	str	r3, [r7, #8]
   188c4:	68bb      	ldr	r3, [r7, #8]
   188c6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   188ca:	231f      	movs	r3, #31
   188cc:	18fb      	adds	r3, r7, r3
   188ce:	781b      	ldrb	r3, [r3, #0]
}
   188d0:	0018      	movs	r0, r3
   188d2:	46bd      	mov	sp, r7
   188d4:	b008      	add	sp, #32
   188d6:	bd80      	pop	{r7, pc}
   188d8:	20000dc0 	.word	0x20000dc0
   188dc:	00036cf0 	.word	0x00036cf0
   188e0:	00018a7d 	.word	0x00018a7d
   188e4:	000378d0 	.word	0x000378d0
   188e8:	20000d18 	.word	0x20000d18
   188ec:	20000d30 	.word	0x20000d30
   188f0:	20000dc4 	.word	0x20000dc4
   188f4:	0001779d 	.word	0x0001779d

000188f8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   188f8:	b590      	push	{r4, r7, lr}
   188fa:	b085      	sub	sp, #20
   188fc:	af00      	add	r7, sp, #0
   188fe:	0002      	movs	r2, r0
   18900:	1dfb      	adds	r3, r7, #7
   18902:	701a      	strb	r2, [r3, #0]
   18904:	1dbb      	adds	r3, r7, #6
   18906:	1c0a      	adds	r2, r1, #0
   18908:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1890a:	230e      	movs	r3, #14
   1890c:	18fc      	adds	r4, r7, r3
   1890e:	1dfb      	adds	r3, r7, #7
   18910:	781a      	ldrb	r2, [r3, #0]
   18912:	1dbb      	adds	r3, r7, #6
   18914:	781b      	ldrb	r3, [r3, #0]
   18916:	0011      	movs	r1, r2
   18918:	0018      	movs	r0, r3
   1891a:	4b09      	ldr	r3, [pc, #36]	; (18940 <prvMarkObjectAsUsed+0x48>)
   1891c:	4798      	blx	r3
   1891e:	0003      	movs	r3, r0
   18920:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   18922:	4b08      	ldr	r3, [pc, #32]	; (18944 <prvMarkObjectAsUsed+0x4c>)
   18924:	681a      	ldr	r2, [r3, #0]
   18926:	230e      	movs	r3, #14
   18928:	18fb      	adds	r3, r7, r3
   1892a:	881b      	ldrh	r3, [r3, #0]
   1892c:	219c      	movs	r1, #156	; 0x9c
   1892e:	18d3      	adds	r3, r2, r3
   18930:	185b      	adds	r3, r3, r1
   18932:	2201      	movs	r2, #1
   18934:	701a      	strb	r2, [r3, #0]
}
   18936:	46c0      	nop			; (mov r8, r8)
   18938:	46bd      	mov	sp, r7
   1893a:	b005      	add	sp, #20
   1893c:	bd90      	pop	{r4, r7, pc}
   1893e:	46c0      	nop			; (mov r8, r8)
   18940:	00018689 	.word	0x00018689
   18944:	20000dc0 	.word	0x20000dc0

00018948 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   18948:	b580      	push	{r7, lr}
   1894a:	b086      	sub	sp, #24
   1894c:	af00      	add	r7, sp, #0
   1894e:	60f8      	str	r0, [r7, #12]
   18950:	60b9      	str	r1, [r7, #8]
   18952:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   18954:	2300      	movs	r3, #0
   18956:	617b      	str	r3, [r7, #20]
   18958:	e010      	b.n	1897c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1895a:	68fa      	ldr	r2, [r7, #12]
   1895c:	697b      	ldr	r3, [r7, #20]
   1895e:	18d3      	adds	r3, r2, r3
   18960:	68b9      	ldr	r1, [r7, #8]
   18962:	697a      	ldr	r2, [r7, #20]
   18964:	188a      	adds	r2, r1, r2
   18966:	7812      	ldrb	r2, [r2, #0]
   18968:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1896a:	68ba      	ldr	r2, [r7, #8]
   1896c:	697b      	ldr	r3, [r7, #20]
   1896e:	18d3      	adds	r3, r2, r3
   18970:	781b      	ldrb	r3, [r3, #0]
   18972:	2b00      	cmp	r3, #0
   18974:	d007      	beq.n	18986 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   18976:	697b      	ldr	r3, [r7, #20]
   18978:	3301      	adds	r3, #1
   1897a:	617b      	str	r3, [r7, #20]
   1897c:	697a      	ldr	r2, [r7, #20]
   1897e:	687b      	ldr	r3, [r7, #4]
   18980:	429a      	cmp	r2, r3
   18982:	d3ea      	bcc.n	1895a <prvStrncpy+0x12>
			break;
	}
}
   18984:	e000      	b.n	18988 <prvStrncpy+0x40>
			break;
   18986:	46c0      	nop			; (mov r8, r8)
}
   18988:	46c0      	nop			; (mov r8, r8)
   1898a:	46bd      	mov	sp, r7
   1898c:	b006      	add	sp, #24
   1898e:	bd80      	pop	{r7, pc}

00018990 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   18990:	b580      	push	{r7, lr}
   18992:	b082      	sub	sp, #8
   18994:	af00      	add	r7, sp, #0
   18996:	603a      	str	r2, [r7, #0]
   18998:	1dfb      	adds	r3, r7, #7
   1899a:	1c02      	adds	r2, r0, #0
   1899c:	701a      	strb	r2, [r3, #0]
   1899e:	1dbb      	adds	r3, r7, #6
   189a0:	1c0a      	adds	r2, r1, #0
   189a2:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   189a4:	683b      	ldr	r3, [r7, #0]
   189a6:	2b00      	cmp	r3, #0
   189a8:	d104      	bne.n	189b4 <prvTraceSetObjectName+0x24>
   189aa:	4b2a      	ldr	r3, [pc, #168]	; (18a54 <prvTraceSetObjectName+0xc4>)
   189ac:	0018      	movs	r0, r3
   189ae:	4b2a      	ldr	r3, [pc, #168]	; (18a58 <prvTraceSetObjectName+0xc8>)
   189b0:	4798      	blx	r3
   189b2:	e04b      	b.n	18a4c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   189b4:	1dfb      	adds	r3, r7, #7
   189b6:	781b      	ldrb	r3, [r3, #0]
   189b8:	2b08      	cmp	r3, #8
   189ba:	d904      	bls.n	189c6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   189bc:	4b27      	ldr	r3, [pc, #156]	; (18a5c <prvTraceSetObjectName+0xcc>)
   189be:	0018      	movs	r0, r3
   189c0:	4b25      	ldr	r3, [pc, #148]	; (18a58 <prvTraceSetObjectName+0xc8>)
   189c2:	4798      	blx	r3
		return;
   189c4:	e042      	b.n	18a4c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   189c6:	1dbb      	adds	r3, r7, #6
   189c8:	781b      	ldrb	r3, [r3, #0]
   189ca:	2b00      	cmp	r3, #0
   189cc:	d104      	bne.n	189d8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   189ce:	4b24      	ldr	r3, [pc, #144]	; (18a60 <prvTraceSetObjectName+0xd0>)
   189d0:	0018      	movs	r0, r3
   189d2:	4b21      	ldr	r3, [pc, #132]	; (18a58 <prvTraceSetObjectName+0xc8>)
   189d4:	4798      	blx	r3
		return;
   189d6:	e039      	b.n	18a4c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   189d8:	4b22      	ldr	r3, [pc, #136]	; (18a64 <prvTraceSetObjectName+0xd4>)
   189da:	681a      	ldr	r2, [r3, #0]
   189dc:	1dfb      	adds	r3, r7, #7
   189de:	781b      	ldrb	r3, [r3, #0]
   189e0:	2164      	movs	r1, #100	; 0x64
   189e2:	18d3      	adds	r3, r2, r3
   189e4:	185b      	adds	r3, r3, r1
   189e6:	781b      	ldrb	r3, [r3, #0]
   189e8:	1dba      	adds	r2, r7, #6
   189ea:	7812      	ldrb	r2, [r2, #0]
   189ec:	429a      	cmp	r2, r3
   189ee:	d909      	bls.n	18a04 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   189f0:	1dfb      	adds	r3, r7, #7
   189f2:	781b      	ldrb	r3, [r3, #0]
   189f4:	0018      	movs	r0, r3
   189f6:	4b1c      	ldr	r3, [pc, #112]	; (18a68 <prvTraceSetObjectName+0xd8>)
   189f8:	4798      	blx	r3
   189fa:	0003      	movs	r3, r0
   189fc:	0018      	movs	r0, r3
   189fe:	4b16      	ldr	r3, [pc, #88]	; (18a58 <prvTraceSetObjectName+0xc8>)
   18a00:	4798      	blx	r3
   18a02:	e023      	b.n	18a4c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   18a04:	1dfb      	adds	r3, r7, #7
   18a06:	781a      	ldrb	r2, [r3, #0]
   18a08:	1dbb      	adds	r3, r7, #6
   18a0a:	781b      	ldrb	r3, [r3, #0]
   18a0c:	0011      	movs	r1, r2
   18a0e:	0018      	movs	r0, r3
   18a10:	4b16      	ldr	r3, [pc, #88]	; (18a6c <prvTraceSetObjectName+0xdc>)
   18a12:	4798      	blx	r3
   18a14:	0003      	movs	r3, r0
   18a16:	001a      	movs	r2, r3
   18a18:	4b15      	ldr	r3, [pc, #84]	; (18a70 <prvTraceSetObjectName+0xe0>)
   18a1a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   18a1c:	4b15      	ldr	r3, [pc, #84]	; (18a74 <prvTraceSetObjectName+0xe4>)
   18a1e:	681b      	ldr	r3, [r3, #0]
   18a20:	2b00      	cmp	r3, #0
   18a22:	d113      	bne.n	18a4c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18a24:	4b0f      	ldr	r3, [pc, #60]	; (18a64 <prvTraceSetObjectName+0xd4>)
   18a26:	681a      	ldr	r2, [r3, #0]
   18a28:	4b11      	ldr	r3, [pc, #68]	; (18a70 <prvTraceSetObjectName+0xe0>)
   18a2a:	881b      	ldrh	r3, [r3, #0]
   18a2c:	3398      	adds	r3, #152	; 0x98
   18a2e:	18d3      	adds	r3, r2, r3
   18a30:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   18a32:	4b0c      	ldr	r3, [pc, #48]	; (18a64 <prvTraceSetObjectName+0xd4>)
   18a34:	681a      	ldr	r2, [r3, #0]
   18a36:	1dfb      	adds	r3, r7, #7
   18a38:	781b      	ldrb	r3, [r3, #0]
   18a3a:	2170      	movs	r1, #112	; 0x70
   18a3c:	18d3      	adds	r3, r2, r3
   18a3e:	185b      	adds	r3, r3, r1
   18a40:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18a42:	001a      	movs	r2, r3
   18a44:	683b      	ldr	r3, [r7, #0]
   18a46:	0019      	movs	r1, r3
   18a48:	4b0b      	ldr	r3, [pc, #44]	; (18a78 <prvTraceSetObjectName+0xe8>)
   18a4a:	4798      	blx	r3
		}
	}
}
   18a4c:	46bd      	mov	sp, r7
   18a4e:	b002      	add	sp, #8
   18a50:	bd80      	pop	{r7, pc}
   18a52:	46c0      	nop			; (mov r8, r8)
   18a54:	000379d4 	.word	0x000379d4
   18a58:	00018a7d 	.word	0x00018a7d
   18a5c:	00037a08 	.word	0x00037a08
   18a60:	00037a38 	.word	0x00037a38
   18a64:	20000dc0 	.word	0x20000dc0
   18a68:	0001779d 	.word	0x0001779d
   18a6c:	00018689 	.word	0x00018689
   18a70:	20000dc8 	.word	0x20000dc8
   18a74:	20000d20 	.word	0x20000d20
   18a78:	00018949 	.word	0x00018949

00018a7c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   18a7c:	b580      	push	{r7, lr}
   18a7e:	b082      	sub	sp, #8
   18a80:	af00      	add	r7, sp, #0
   18a82:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   18a84:	4b11      	ldr	r3, [pc, #68]	; (18acc <prvTraceError+0x50>)
   18a86:	681b      	ldr	r3, [r3, #0]
   18a88:	2b00      	cmp	r3, #0
   18a8a:	d001      	beq.n	18a90 <prvTraceError+0x14>
	{
		vTraceStop();
   18a8c:	4b10      	ldr	r3, [pc, #64]	; (18ad0 <prvTraceError+0x54>)
   18a8e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   18a90:	4b10      	ldr	r3, [pc, #64]	; (18ad4 <prvTraceError+0x58>)
   18a92:	681b      	ldr	r3, [r3, #0]
   18a94:	2b00      	cmp	r3, #0
   18a96:	d115      	bne.n	18ac4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   18a98:	4b0e      	ldr	r3, [pc, #56]	; (18ad4 <prvTraceError+0x58>)
   18a9a:	687a      	ldr	r2, [r7, #4]
   18a9c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   18a9e:	4b0b      	ldr	r3, [pc, #44]	; (18acc <prvTraceError+0x50>)
   18aa0:	681b      	ldr	r3, [r3, #0]
   18aa2:	2b00      	cmp	r3, #0
   18aa4:	d00e      	beq.n	18ac4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18aa6:	4b09      	ldr	r3, [pc, #36]	; (18acc <prvTraceError+0x50>)
   18aa8:	681b      	ldr	r3, [r3, #0]
   18aaa:	4a0b      	ldr	r2, [pc, #44]	; (18ad8 <prvTraceError+0x5c>)
   18aac:	1898      	adds	r0, r3, r2
   18aae:	4b09      	ldr	r3, [pc, #36]	; (18ad4 <prvTraceError+0x58>)
   18ab0:	681b      	ldr	r3, [r3, #0]
   18ab2:	2250      	movs	r2, #80	; 0x50
   18ab4:	0019      	movs	r1, r3
   18ab6:	4b09      	ldr	r3, [pc, #36]	; (18adc <prvTraceError+0x60>)
   18ab8:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   18aba:	4b04      	ldr	r3, [pc, #16]	; (18acc <prvTraceError+0x50>)
   18abc:	681b      	ldr	r3, [r3, #0]
   18abe:	4a08      	ldr	r2, [pc, #32]	; (18ae0 <prvTraceError+0x64>)
   18ac0:	2101      	movs	r1, #1
   18ac2:	5099      	str	r1, [r3, r2]
		}
	}
}
   18ac4:	46c0      	nop			; (mov r8, r8)
   18ac6:	46bd      	mov	sp, r7
   18ac8:	b002      	add	sp, #8
   18aca:	bd80      	pop	{r7, pc}
   18acc:	20000dc0 	.word	0x20000dc0
   18ad0:	00017941 	.word	0x00017941
   18ad4:	20000d20 	.word	0x20000d20
   18ad8:	000006bc 	.word	0x000006bc
   18adc:	00018949 	.word	0x00018949
   18ae0:	000006b4 	.word	0x000006b4

00018ae4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   18ae4:	b580      	push	{r7, lr}
   18ae6:	b086      	sub	sp, #24
   18ae8:	af00      	add	r7, sp, #0
   18aea:	0002      	movs	r2, r0
   18aec:	1dfb      	adds	r3, r7, #7
   18aee:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   18af0:	2300      	movs	r3, #0
   18af2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   18af4:	2300      	movs	r3, #0
   18af6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   18af8:	1dfb      	adds	r3, r7, #7
   18afa:	781b      	ldrb	r3, [r3, #0]
   18afc:	2b00      	cmp	r3, #0
   18afe:	d000      	beq.n	18b02 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   18b00:	e089      	b.n	18c16 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   18b02:	4b49      	ldr	r3, [pc, #292]	; (18c28 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   18b04:	0018      	movs	r0, r3
   18b06:	4b49      	ldr	r3, [pc, #292]	; (18c2c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   18b08:	4798      	blx	r3
   18b0a:	e08a      	b.n	18c22 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   18b0c:	4b48      	ldr	r3, [pc, #288]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b0e:	681b      	ldr	r3, [r3, #0]
   18b10:	69da      	ldr	r2, [r3, #28]
   18b12:	697b      	ldr	r3, [r7, #20]
   18b14:	18d3      	adds	r3, r2, r3
   18b16:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18b18:	4b45      	ldr	r3, [pc, #276]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b1a:	6819      	ldr	r1, [r3, #0]
   18b1c:	693b      	ldr	r3, [r7, #16]
   18b1e:	009a      	lsls	r2, r3, #2
   18b20:	23e2      	movs	r3, #226	; 0xe2
   18b22:	00db      	lsls	r3, r3, #3
   18b24:	188a      	adds	r2, r1, r2
   18b26:	18d3      	adds	r3, r2, r3
   18b28:	781b      	ldrb	r3, [r3, #0]
   18b2a:	2b98      	cmp	r3, #152	; 0x98
   18b2c:	d934      	bls.n	18b98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   18b2e:	4b40      	ldr	r3, [pc, #256]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b30:	6819      	ldr	r1, [r3, #0]
   18b32:	693b      	ldr	r3, [r7, #16]
   18b34:	009a      	lsls	r2, r3, #2
   18b36:	23e2      	movs	r3, #226	; 0xe2
   18b38:	00db      	lsls	r3, r3, #3
   18b3a:	188a      	adds	r2, r1, r2
   18b3c:	18d3      	adds	r3, r2, r3
   18b3e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18b40:	2ba7      	cmp	r3, #167	; 0xa7
   18b42:	d829      	bhi.n	18b98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   18b44:	4b3a      	ldr	r3, [pc, #232]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b46:	6819      	ldr	r1, [r3, #0]
   18b48:	693b      	ldr	r3, [r7, #16]
   18b4a:	009a      	lsls	r2, r3, #2
   18b4c:	23e2      	movs	r3, #226	; 0xe2
   18b4e:	00db      	lsls	r3, r3, #3
   18b50:	188a      	adds	r2, r1, r2
   18b52:	18d3      	adds	r3, r2, r3
   18b54:	781a      	ldrb	r2, [r3, #0]
   18b56:	230f      	movs	r3, #15
   18b58:	18fb      	adds	r3, r7, r3
   18b5a:	3268      	adds	r2, #104	; 0x68
   18b5c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   18b5e:	230f      	movs	r3, #15
   18b60:	18fb      	adds	r3, r7, r3
   18b62:	781a      	ldrb	r2, [r3, #0]
   18b64:	693b      	ldr	r3, [r7, #16]
   18b66:	18d2      	adds	r2, r2, r3
   18b68:	4b31      	ldr	r3, [pc, #196]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b6a:	681b      	ldr	r3, [r3, #0]
   18b6c:	699b      	ldr	r3, [r3, #24]
   18b6e:	429a      	cmp	r2, r3
   18b70:	d24d      	bcs.n	18c0e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   18b72:	4b2f      	ldr	r3, [pc, #188]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b74:	681a      	ldr	r2, [r3, #0]
   18b76:	693b      	ldr	r3, [r7, #16]
   18b78:	009b      	lsls	r3, r3, #2
   18b7a:	21e2      	movs	r1, #226	; 0xe2
   18b7c:	00c9      	lsls	r1, r1, #3
   18b7e:	468c      	mov	ip, r1
   18b80:	4463      	add	r3, ip
   18b82:	18d0      	adds	r0, r2, r3
   18b84:	230f      	movs	r3, #15
   18b86:	18fb      	adds	r3, r7, r3
   18b88:	781b      	ldrb	r3, [r3, #0]
   18b8a:	3301      	adds	r3, #1
   18b8c:	009b      	lsls	r3, r3, #2
   18b8e:	001a      	movs	r2, r3
   18b90:	2100      	movs	r1, #0
   18b92:	4b28      	ldr	r3, [pc, #160]	; (18c34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18b94:	4798      	blx	r3
		{
   18b96:	e03a      	b.n	18c0e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   18b98:	4b25      	ldr	r3, [pc, #148]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18b9a:	6819      	ldr	r1, [r3, #0]
   18b9c:	693b      	ldr	r3, [r7, #16]
   18b9e:	009a      	lsls	r2, r3, #2
   18ba0:	23e2      	movs	r3, #226	; 0xe2
   18ba2:	00db      	lsls	r3, r3, #3
   18ba4:	188a      	adds	r2, r1, r2
   18ba6:	18d3      	adds	r3, r2, r3
   18ba8:	781b      	ldrb	r3, [r3, #0]
   18baa:	2b01      	cmp	r3, #1
   18bac:	d130      	bne.n	18c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   18bae:	693b      	ldr	r3, [r7, #16]
   18bb0:	1c5a      	adds	r2, r3, #1
   18bb2:	4b1f      	ldr	r3, [pc, #124]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18bb4:	681b      	ldr	r3, [r3, #0]
   18bb6:	699b      	ldr	r3, [r3, #24]
   18bb8:	429a      	cmp	r2, r3
   18bba:	d20e      	bcs.n	18bda <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   18bbc:	4b1c      	ldr	r3, [pc, #112]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18bbe:	681a      	ldr	r2, [r3, #0]
   18bc0:	693b      	ldr	r3, [r7, #16]
   18bc2:	009b      	lsls	r3, r3, #2
   18bc4:	21e2      	movs	r1, #226	; 0xe2
   18bc6:	00c9      	lsls	r1, r1, #3
   18bc8:	468c      	mov	ip, r1
   18bca:	4463      	add	r3, ip
   18bcc:	18d3      	adds	r3, r2, r3
   18bce:	2208      	movs	r2, #8
   18bd0:	2100      	movs	r1, #0
   18bd2:	0018      	movs	r0, r3
   18bd4:	4b17      	ldr	r3, [pc, #92]	; (18c34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18bd6:	4798      	blx	r3
   18bd8:	e01a      	b.n	18c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   18bda:	4b15      	ldr	r3, [pc, #84]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18bdc:	681b      	ldr	r3, [r3, #0]
   18bde:	22e2      	movs	r2, #226	; 0xe2
   18be0:	00d2      	lsls	r2, r2, #3
   18be2:	4694      	mov	ip, r2
   18be4:	4463      	add	r3, ip
   18be6:	2204      	movs	r2, #4
   18be8:	2100      	movs	r1, #0
   18bea:	0018      	movs	r0, r3
   18bec:	4b11      	ldr	r3, [pc, #68]	; (18c34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18bee:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   18bf0:	4b0f      	ldr	r3, [pc, #60]	; (18c30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18bf2:	681a      	ldr	r2, [r3, #0]
   18bf4:	693b      	ldr	r3, [r7, #16]
   18bf6:	009b      	lsls	r3, r3, #2
   18bf8:	21e2      	movs	r1, #226	; 0xe2
   18bfa:	00c9      	lsls	r1, r1, #3
   18bfc:	468c      	mov	ip, r1
   18bfe:	4463      	add	r3, ip
   18c00:	18d3      	adds	r3, r2, r3
   18c02:	2204      	movs	r2, #4
   18c04:	2100      	movs	r1, #0
   18c06:	0018      	movs	r0, r3
   18c08:	4b0a      	ldr	r3, [pc, #40]	; (18c34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18c0a:	4798      	blx	r3
   18c0c:	e000      	b.n	18c10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   18c0e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   18c10:	697b      	ldr	r3, [r7, #20]
   18c12:	3301      	adds	r3, #1
   18c14:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   18c16:	1dfb      	adds	r3, r7, #7
   18c18:	781a      	ldrb	r2, [r3, #0]
   18c1a:	697b      	ldr	r3, [r7, #20]
   18c1c:	429a      	cmp	r2, r3
   18c1e:	d900      	bls.n	18c22 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18c20:	e774      	b.n	18b0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18c22:	46bd      	mov	sp, r7
   18c24:	b006      	add	sp, #24
   18c26:	bd80      	pop	{r7, pc}
   18c28:	00037a98 	.word	0x00037a98
   18c2c:	00018a7d 	.word	0x00018a7d
   18c30:	20000dc0 	.word	0x20000dc0
   18c34:	0003460f 	.word	0x0003460f

00018c38 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18c38:	b580      	push	{r7, lr}
   18c3a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   18c3c:	4b12      	ldr	r3, [pc, #72]	; (18c88 <prvTraceUpdateCounters+0x50>)
   18c3e:	681b      	ldr	r3, [r3, #0]
   18c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c42:	2b00      	cmp	r3, #0
   18c44:	d01c      	beq.n	18c80 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   18c46:	4b10      	ldr	r3, [pc, #64]	; (18c88 <prvTraceUpdateCounters+0x50>)
   18c48:	681b      	ldr	r3, [r3, #0]
   18c4a:	695a      	ldr	r2, [r3, #20]
   18c4c:	3201      	adds	r2, #1
   18c4e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   18c50:	4b0d      	ldr	r3, [pc, #52]	; (18c88 <prvTraceUpdateCounters+0x50>)
   18c52:	681b      	ldr	r3, [r3, #0]
   18c54:	69da      	ldr	r2, [r3, #28]
   18c56:	3201      	adds	r2, #1
   18c58:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18c5a:	4b0b      	ldr	r3, [pc, #44]	; (18c88 <prvTraceUpdateCounters+0x50>)
   18c5c:	681b      	ldr	r3, [r3, #0]
   18c5e:	69da      	ldr	r2, [r3, #28]
   18c60:	232c      	movs	r3, #44	; 0x2c
   18c62:	33ff      	adds	r3, #255	; 0xff
   18c64:	429a      	cmp	r2, r3
   18c66:	d907      	bls.n	18c78 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   18c68:	4b07      	ldr	r3, [pc, #28]	; (18c88 <prvTraceUpdateCounters+0x50>)
   18c6a:	681b      	ldr	r3, [r3, #0]
   18c6c:	2201      	movs	r2, #1
   18c6e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   18c70:	4b05      	ldr	r3, [pc, #20]	; (18c88 <prvTraceUpdateCounters+0x50>)
   18c72:	681b      	ldr	r3, [r3, #0]
   18c74:	2200      	movs	r2, #0
   18c76:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   18c78:	2001      	movs	r0, #1
   18c7a:	4b04      	ldr	r3, [pc, #16]	; (18c8c <prvTraceUpdateCounters+0x54>)
   18c7c:	4798      	blx	r3
   18c7e:	e000      	b.n	18c82 <prvTraceUpdateCounters+0x4a>
		return;
   18c80:	46c0      	nop			; (mov r8, r8)
#endif
}
   18c82:	46bd      	mov	sp, r7
   18c84:	bd80      	pop	{r7, pc}
   18c86:	46c0      	nop			; (mov r8, r8)
   18c88:	20000dc0 	.word	0x20000dc0
   18c8c:	00018ae5 	.word	0x00018ae5

00018c90 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   18c90:	b5b0      	push	{r4, r5, r7, lr}
   18c92:	b086      	sub	sp, #24
   18c94:	af00      	add	r7, sp, #0
   18c96:	0002      	movs	r2, r0
   18c98:	1dbb      	adds	r3, r7, #6
   18c9a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   18c9c:	2300      	movs	r3, #0
   18c9e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   18ca0:	2300      	movs	r3, #0
   18ca2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   18ca4:	2300      	movs	r3, #0
   18ca6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   18ca8:	1dbb      	adds	r3, r7, #6
   18caa:	881b      	ldrh	r3, [r3, #0]
   18cac:	2bff      	cmp	r3, #255	; 0xff
   18cae:	d00a      	beq.n	18cc6 <prvTraceGetDTS+0x36>
   18cb0:	1dbb      	adds	r3, r7, #6
   18cb2:	881b      	ldrh	r3, [r3, #0]
   18cb4:	4a60      	ldr	r2, [pc, #384]	; (18e38 <prvTraceGetDTS+0x1a8>)
   18cb6:	4293      	cmp	r3, r2
   18cb8:	d005      	beq.n	18cc6 <prvTraceGetDTS+0x36>
   18cba:	4b60      	ldr	r3, [pc, #384]	; (18e3c <prvTraceGetDTS+0x1ac>)
   18cbc:	0018      	movs	r0, r3
   18cbe:	4b60      	ldr	r3, [pc, #384]	; (18e40 <prvTraceGetDTS+0x1b0>)
   18cc0:	4798      	blx	r3
   18cc2:	2300      	movs	r3, #0
   18cc4:	e0b3      	b.n	18e2e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   18cc6:	4b5f      	ldr	r3, [pc, #380]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18cc8:	681b      	ldr	r3, [r3, #0]
   18cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18ccc:	2b00      	cmp	r3, #0
   18cce:	d118      	bne.n	18d02 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   18cd0:	4b5d      	ldr	r3, [pc, #372]	; (18e48 <prvTraceGetDTS+0x1b8>)
   18cd2:	681b      	ldr	r3, [r3, #0]
   18cd4:	2b00      	cmp	r3, #0
   18cd6:	d006      	beq.n	18ce6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   18cd8:	4b5a      	ldr	r3, [pc, #360]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18cda:	681b      	ldr	r3, [r3, #0]
   18cdc:	4a5a      	ldr	r2, [pc, #360]	; (18e48 <prvTraceGetDTS+0x1b8>)
   18cde:	6812      	ldr	r2, [r2, #0]
   18ce0:	0892      	lsrs	r2, r2, #2
   18ce2:	625a      	str	r2, [r3, #36]	; 0x24
   18ce4:	e00d      	b.n	18d02 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   18ce6:	4b59      	ldr	r3, [pc, #356]	; (18e4c <prvTraceGetDTS+0x1bc>)
   18ce8:	681a      	ldr	r2, [r3, #0]
   18cea:	4b59      	ldr	r3, [pc, #356]	; (18e50 <prvTraceGetDTS+0x1c0>)
   18cec:	681b      	ldr	r3, [r3, #0]
   18cee:	429a      	cmp	r2, r3
   18cf0:	d007      	beq.n	18d02 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   18cf2:	4b54      	ldr	r3, [pc, #336]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18cf4:	681c      	ldr	r4, [r3, #0]
   18cf6:	2000      	movs	r0, #0
   18cf8:	4b56      	ldr	r3, [pc, #344]	; (18e54 <prvTraceGetDTS+0x1c4>)
   18cfa:	4798      	blx	r3
   18cfc:	0003      	movs	r3, r0
   18cfe:	089b      	lsrs	r3, r3, #2
   18d00:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   18d02:	230c      	movs	r3, #12
   18d04:	18fb      	adds	r3, r7, r3
   18d06:	0018      	movs	r0, r3
   18d08:	4b53      	ldr	r3, [pc, #332]	; (18e58 <prvTraceGetDTS+0x1c8>)
   18d0a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   18d0c:	68fa      	ldr	r2, [r7, #12]
   18d0e:	4b53      	ldr	r3, [pc, #332]	; (18e5c <prvTraceGetDTS+0x1cc>)
   18d10:	681b      	ldr	r3, [r3, #0]
   18d12:	1ad3      	subs	r3, r2, r3
   18d14:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   18d16:	68fa      	ldr	r2, [r7, #12]
   18d18:	4b50      	ldr	r3, [pc, #320]	; (18e5c <prvTraceGetDTS+0x1cc>)
   18d1a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   18d1c:	4b49      	ldr	r3, [pc, #292]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d1e:	681b      	ldr	r3, [r3, #0]
   18d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18d22:	2b00      	cmp	r3, #0
   18d24:	d044      	beq.n	18db0 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   18d26:	4b47      	ldr	r3, [pc, #284]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d28:	681b      	ldr	r3, [r3, #0]
   18d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18d2c:	693b      	ldr	r3, [r7, #16]
   18d2e:	429a      	cmp	r2, r3
   18d30:	d21e      	bcs.n	18d70 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   18d32:	4b44      	ldr	r3, [pc, #272]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d34:	681c      	ldr	r4, [r3, #0]
   18d36:	4b43      	ldr	r3, [pc, #268]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d38:	681b      	ldr	r3, [r3, #0]
   18d3a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   18d3c:	4b41      	ldr	r3, [pc, #260]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d3e:	681b      	ldr	r3, [r3, #0]
   18d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18d42:	4b47      	ldr	r3, [pc, #284]	; (18e60 <prvTraceGetDTS+0x1d0>)
   18d44:	0011      	movs	r1, r2
   18d46:	6938      	ldr	r0, [r7, #16]
   18d48:	4798      	blx	r3
   18d4a:	0003      	movs	r3, r0
   18d4c:	18eb      	adds	r3, r5, r3
   18d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   18d50:	4b3c      	ldr	r3, [pc, #240]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d52:	681c      	ldr	r4, [r3, #0]
   18d54:	4b3b      	ldr	r3, [pc, #236]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d56:	681b      	ldr	r3, [r3, #0]
   18d58:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   18d5a:	4b3a      	ldr	r3, [pc, #232]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d5c:	681b      	ldr	r3, [r3, #0]
   18d5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   18d60:	693a      	ldr	r2, [r7, #16]
   18d62:	4b40      	ldr	r3, [pc, #256]	; (18e64 <prvTraceGetDTS+0x1d4>)
   18d64:	0010      	movs	r0, r2
   18d66:	4798      	blx	r3
   18d68:	000b      	movs	r3, r1
   18d6a:	18eb      	adds	r3, r5, r3
   18d6c:	62a3      	str	r3, [r4, #40]	; 0x28
   18d6e:	e007      	b.n	18d80 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   18d70:	4b34      	ldr	r3, [pc, #208]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d72:	681b      	ldr	r3, [r3, #0]
   18d74:	4a33      	ldr	r2, [pc, #204]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d76:	6812      	ldr	r2, [r2, #0]
   18d78:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18d7a:	693a      	ldr	r2, [r7, #16]
   18d7c:	188a      	adds	r2, r1, r2
   18d7e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   18d80:	4b30      	ldr	r3, [pc, #192]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d82:	681b      	ldr	r3, [r3, #0]
   18d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18d86:	4b2f      	ldr	r3, [pc, #188]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d88:	681b      	ldr	r3, [r3, #0]
   18d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18d8c:	429a      	cmp	r2, r3
   18d8e:	d313      	bcc.n	18db8 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   18d90:	4b2c      	ldr	r3, [pc, #176]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d92:	681b      	ldr	r3, [r3, #0]
   18d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18d96:	3201      	adds	r2, #1
   18d98:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   18d9a:	4b2a      	ldr	r3, [pc, #168]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18d9c:	681b      	ldr	r3, [r3, #0]
   18d9e:	4a29      	ldr	r2, [pc, #164]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18da0:	6812      	ldr	r2, [r2, #0]
   18da2:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18da4:	4a27      	ldr	r2, [pc, #156]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18da6:	6812      	ldr	r2, [r2, #0]
   18da8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   18daa:	1a8a      	subs	r2, r1, r2
   18dac:	629a      	str	r2, [r3, #40]	; 0x28
   18dae:	e003      	b.n	18db8 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   18db0:	4b24      	ldr	r3, [pc, #144]	; (18e44 <prvTraceGetDTS+0x1b4>)
   18db2:	681b      	ldr	r3, [r3, #0]
   18db4:	68fa      	ldr	r2, [r7, #12]
   18db6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   18db8:	1dbb      	adds	r3, r7, #6
   18dba:	881a      	ldrh	r2, [r3, #0]
   18dbc:	693b      	ldr	r3, [r7, #16]
   18dbe:	429a      	cmp	r2, r3
   18dc0:	d22f      	bcs.n	18e22 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   18dc2:	4b29      	ldr	r3, [pc, #164]	; (18e68 <prvTraceGetDTS+0x1d8>)
   18dc4:	4798      	blx	r3
   18dc6:	0003      	movs	r3, r0
   18dc8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   18dca:	697b      	ldr	r3, [r7, #20]
   18dcc:	2b00      	cmp	r3, #0
   18dce:	d028      	beq.n	18e22 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   18dd0:	1dbb      	adds	r3, r7, #6
   18dd2:	881b      	ldrh	r3, [r3, #0]
   18dd4:	4a18      	ldr	r2, [pc, #96]	; (18e38 <prvTraceGetDTS+0x1a8>)
   18dd6:	4293      	cmp	r3, r2
   18dd8:	d10b      	bne.n	18df2 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   18dda:	697b      	ldr	r3, [r7, #20]
   18ddc:	22a9      	movs	r2, #169	; 0xa9
   18dde:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   18de0:	693b      	ldr	r3, [r7, #16]
   18de2:	0c1b      	lsrs	r3, r3, #16
   18de4:	b29a      	uxth	r2, r3
   18de6:	697b      	ldr	r3, [r7, #20]
   18de8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   18dea:	697b      	ldr	r3, [r7, #20]
   18dec:	2200      	movs	r2, #0
   18dee:	705a      	strb	r2, [r3, #1]
   18df0:	e015      	b.n	18e1e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   18df2:	1dbb      	adds	r3, r7, #6
   18df4:	881b      	ldrh	r3, [r3, #0]
   18df6:	2bff      	cmp	r3, #255	; 0xff
   18df8:	d10d      	bne.n	18e16 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   18dfa:	697b      	ldr	r3, [r7, #20]
   18dfc:	22a8      	movs	r2, #168	; 0xa8
   18dfe:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   18e00:	693b      	ldr	r3, [r7, #16]
   18e02:	0a1b      	lsrs	r3, r3, #8
   18e04:	b29a      	uxth	r2, r3
   18e06:	697b      	ldr	r3, [r7, #20]
   18e08:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   18e0a:	693b      	ldr	r3, [r7, #16]
   18e0c:	0e1b      	lsrs	r3, r3, #24
   18e0e:	b2da      	uxtb	r2, r3
   18e10:	697b      	ldr	r3, [r7, #20]
   18e12:	705a      	strb	r2, [r3, #1]
   18e14:	e003      	b.n	18e1e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   18e16:	4b15      	ldr	r3, [pc, #84]	; (18e6c <prvTraceGetDTS+0x1dc>)
   18e18:	0018      	movs	r0, r3
   18e1a:	4b09      	ldr	r3, [pc, #36]	; (18e40 <prvTraceGetDTS+0x1b0>)
   18e1c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   18e1e:	4b14      	ldr	r3, [pc, #80]	; (18e70 <prvTraceGetDTS+0x1e0>)
   18e20:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   18e22:	693b      	ldr	r3, [r7, #16]
   18e24:	b29b      	uxth	r3, r3
   18e26:	1dba      	adds	r2, r7, #6
   18e28:	8812      	ldrh	r2, [r2, #0]
   18e2a:	4013      	ands	r3, r2
   18e2c:	b29b      	uxth	r3, r3
}
   18e2e:	0018      	movs	r0, r3
   18e30:	46bd      	mov	sp, r7
   18e32:	b006      	add	sp, #24
   18e34:	bdb0      	pop	{r4, r5, r7, pc}
   18e36:	46c0      	nop			; (mov r8, r8)
   18e38:	0000ffff 	.word	0x0000ffff
   18e3c:	00037af0 	.word	0x00037af0
   18e40:	00018a7d 	.word	0x00018a7d
   18e44:	20000dc0 	.word	0x20000dc0
   18e48:	20000d1c 	.word	0x20000d1c
   18e4c:	e000e018 	.word	0xe000e018
   18e50:	20005590 	.word	0x20005590
   18e54:	00028e95 	.word	0x00028e95
   18e58:	00018e75 	.word	0x00018e75
   18e5c:	20000dcc 	.word	0x20000dcc
   18e60:	00031b55 	.word	0x00031b55
   18e64:	00031c61 	.word	0x00031c61
   18e68:	00018635 	.word	0x00018635
   18e6c:	00037b30 	.word	0x00037b30
   18e70:	00018c39 	.word	0x00018c39

00018e74 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   18e74:	b580      	push	{r7, lr}
   18e76:	b084      	sub	sp, #16
   18e78:	af00      	add	r7, sp, #0
   18e7a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   18e7c:	2300      	movs	r3, #0
   18e7e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   18e80:	2300      	movs	r3, #0
   18e82:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   18e84:	4b2d      	ldr	r3, [pc, #180]	; (18f3c <prvTracePortGetTimeStamp+0xc8>)
   18e86:	681b      	ldr	r3, [r3, #0]
   18e88:	2b01      	cmp	r3, #1
   18e8a:	d107      	bne.n	18e9c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   18e8c:	687b      	ldr	r3, [r7, #4]
   18e8e:	2b00      	cmp	r3, #0
   18e90:	d04f      	beq.n	18f32 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   18e92:	4b2b      	ldr	r3, [pc, #172]	; (18f40 <prvTracePortGetTimeStamp+0xcc>)
   18e94:	681a      	ldr	r2, [r3, #0]
   18e96:	687b      	ldr	r3, [r7, #4]
   18e98:	601a      	str	r2, [r3, #0]
		return;
   18e9a:	e04a      	b.n	18f32 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   18e9c:	4b29      	ldr	r3, [pc, #164]	; (18f44 <prvTracePortGetTimeStamp+0xd0>)
   18e9e:	681a      	ldr	r2, [r3, #0]
   18ea0:	4b29      	ldr	r3, [pc, #164]	; (18f48 <prvTracePortGetTimeStamp+0xd4>)
   18ea2:	681b      	ldr	r3, [r3, #0]
   18ea4:	1ad3      	subs	r3, r2, r3
   18ea6:	3301      	adds	r3, #1
   18ea8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   18eaa:	4b28      	ldr	r3, [pc, #160]	; (18f4c <prvTracePortGetTimeStamp+0xd8>)
   18eac:	681a      	ldr	r2, [r3, #0]
   18eae:	4b28      	ldr	r3, [pc, #160]	; (18f50 <prvTracePortGetTimeStamp+0xdc>)
   18eb0:	681b      	ldr	r3, [r3, #0]
   18eb2:	1ad3      	subs	r3, r2, r3
   18eb4:	3b01      	subs	r3, #1
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	db03      	blt.n	18ec2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   18eba:	4b24      	ldr	r3, [pc, #144]	; (18f4c <prvTracePortGetTimeStamp+0xd8>)
   18ebc:	681b      	ldr	r3, [r3, #0]
   18ebe:	60fb      	str	r3, [r7, #12]
   18ec0:	e002      	b.n	18ec8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   18ec2:	4b23      	ldr	r3, [pc, #140]	; (18f50 <prvTracePortGetTimeStamp+0xdc>)
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   18ec8:	4b20      	ldr	r3, [pc, #128]	; (18f4c <prvTracePortGetTimeStamp+0xd8>)
   18eca:	681b      	ldr	r3, [r3, #0]
   18ecc:	68fa      	ldr	r2, [r7, #12]
   18ece:	429a      	cmp	r2, r3
   18ed0:	d107      	bne.n	18ee2 <prvTracePortGetTimeStamp+0x6e>
   18ed2:	4b20      	ldr	r3, [pc, #128]	; (18f54 <prvTracePortGetTimeStamp+0xe0>)
   18ed4:	681b      	ldr	r3, [r3, #0]
   18ed6:	68ba      	ldr	r2, [r7, #8]
   18ed8:	429a      	cmp	r2, r3
   18eda:	d202      	bcs.n	18ee2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   18edc:	68fb      	ldr	r3, [r7, #12]
   18ede:	3301      	adds	r3, #1
   18ee0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   18ee2:	687b      	ldr	r3, [r7, #4]
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d016      	beq.n	18f16 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   18ee8:	4b16      	ldr	r3, [pc, #88]	; (18f44 <prvTracePortGetTimeStamp+0xd0>)
   18eea:	681b      	ldr	r3, [r3, #0]
   18eec:	3301      	adds	r3, #1
   18eee:	089b      	lsrs	r3, r3, #2
   18ef0:	68fa      	ldr	r2, [r7, #12]
   18ef2:	435a      	muls	r2, r3
   18ef4:	4b12      	ldr	r3, [pc, #72]	; (18f40 <prvTracePortGetTimeStamp+0xcc>)
   18ef6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   18ef8:	4b12      	ldr	r3, [pc, #72]	; (18f44 <prvTracePortGetTimeStamp+0xd0>)
   18efa:	681b      	ldr	r3, [r3, #0]
   18efc:	3301      	adds	r3, #1
   18efe:	2203      	movs	r2, #3
   18f00:	4013      	ands	r3, r2
   18f02:	68fa      	ldr	r2, [r7, #12]
   18f04:	435a      	muls	r2, r3
   18f06:	68bb      	ldr	r3, [r7, #8]
   18f08:	18d3      	adds	r3, r2, r3
   18f0a:	089a      	lsrs	r2, r3, #2
   18f0c:	4b0c      	ldr	r3, [pc, #48]	; (18f40 <prvTracePortGetTimeStamp+0xcc>)
   18f0e:	681b      	ldr	r3, [r3, #0]
   18f10:	18d2      	adds	r2, r2, r3
   18f12:	4b0b      	ldr	r3, [pc, #44]	; (18f40 <prvTracePortGetTimeStamp+0xcc>)
   18f14:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   18f16:	4b0d      	ldr	r3, [pc, #52]	; (18f4c <prvTracePortGetTimeStamp+0xd8>)
   18f18:	68fa      	ldr	r2, [r7, #12]
   18f1a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   18f1c:	687b      	ldr	r3, [r7, #4]
   18f1e:	2b00      	cmp	r3, #0
   18f20:	d003      	beq.n	18f2a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   18f22:	4b07      	ldr	r3, [pc, #28]	; (18f40 <prvTracePortGetTimeStamp+0xcc>)
   18f24:	681a      	ldr	r2, [r3, #0]
   18f26:	687b      	ldr	r3, [r7, #4]
   18f28:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   18f2a:	4b0a      	ldr	r3, [pc, #40]	; (18f54 <prvTracePortGetTimeStamp+0xe0>)
   18f2c:	68ba      	ldr	r2, [r7, #8]
   18f2e:	601a      	str	r2, [r3, #0]
   18f30:	e000      	b.n	18f34 <prvTracePortGetTimeStamp+0xc0>
		return;
   18f32:	46c0      	nop			; (mov r8, r8)
}
   18f34:	46bd      	mov	sp, r7
   18f36:	b004      	add	sp, #16
   18f38:	bd80      	pop	{r7, pc}
   18f3a:	46c0      	nop			; (mov r8, r8)
   18f3c:	20000d0c 	.word	0x20000d0c
   18f40:	20000d10 	.word	0x20000d10
   18f44:	e000e014 	.word	0xe000e014
   18f48:	e000e018 	.word	0xe000e018
   18f4c:	20000dd0 	.word	0x20000dd0
   18f50:	20000d08 	.word	0x20000d08
   18f54:	20000dd4 	.word	0x20000dd4

00018f58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   18f58:	b580      	push	{r7, lr}
   18f5a:	b082      	sub	sp, #8
   18f5c:	af00      	add	r7, sp, #0
   18f5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f60:	687b      	ldr	r3, [r7, #4]
   18f62:	3308      	adds	r3, #8
   18f64:	001a      	movs	r2, r3
   18f66:	687b      	ldr	r3, [r7, #4]
   18f68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   18f6a:	687b      	ldr	r3, [r7, #4]
   18f6c:	2201      	movs	r2, #1
   18f6e:	4252      	negs	r2, r2
   18f70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f72:	687b      	ldr	r3, [r7, #4]
   18f74:	3308      	adds	r3, #8
   18f76:	001a      	movs	r2, r3
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   18f7c:	687b      	ldr	r3, [r7, #4]
   18f7e:	3308      	adds	r3, #8
   18f80:	001a      	movs	r2, r3
   18f82:	687b      	ldr	r3, [r7, #4]
   18f84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   18f86:	687b      	ldr	r3, [r7, #4]
   18f88:	2200      	movs	r2, #0
   18f8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   18f8c:	46c0      	nop			; (mov r8, r8)
   18f8e:	46bd      	mov	sp, r7
   18f90:	b002      	add	sp, #8
   18f92:	bd80      	pop	{r7, pc}

00018f94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   18f94:	b580      	push	{r7, lr}
   18f96:	b082      	sub	sp, #8
   18f98:	af00      	add	r7, sp, #0
   18f9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   18f9c:	687b      	ldr	r3, [r7, #4]
   18f9e:	2200      	movs	r2, #0
   18fa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   18fa2:	46c0      	nop			; (mov r8, r8)
   18fa4:	46bd      	mov	sp, r7
   18fa6:	b002      	add	sp, #8
   18fa8:	bd80      	pop	{r7, pc}

00018faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   18faa:	b580      	push	{r7, lr}
   18fac:	b084      	sub	sp, #16
   18fae:	af00      	add	r7, sp, #0
   18fb0:	6078      	str	r0, [r7, #4]
   18fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   18fb4:	687b      	ldr	r3, [r7, #4]
   18fb6:	685b      	ldr	r3, [r3, #4]
   18fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   18fba:	683b      	ldr	r3, [r7, #0]
   18fbc:	68fa      	ldr	r2, [r7, #12]
   18fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   18fc0:	68fb      	ldr	r3, [r7, #12]
   18fc2:	689a      	ldr	r2, [r3, #8]
   18fc4:	683b      	ldr	r3, [r7, #0]
   18fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   18fc8:	68fb      	ldr	r3, [r7, #12]
   18fca:	689b      	ldr	r3, [r3, #8]
   18fcc:	683a      	ldr	r2, [r7, #0]
   18fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   18fd0:	68fb      	ldr	r3, [r7, #12]
   18fd2:	683a      	ldr	r2, [r7, #0]
   18fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   18fd6:	683b      	ldr	r3, [r7, #0]
   18fd8:	687a      	ldr	r2, [r7, #4]
   18fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   18fdc:	687b      	ldr	r3, [r7, #4]
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	1c5a      	adds	r2, r3, #1
   18fe2:	687b      	ldr	r3, [r7, #4]
   18fe4:	601a      	str	r2, [r3, #0]
}
   18fe6:	46c0      	nop			; (mov r8, r8)
   18fe8:	46bd      	mov	sp, r7
   18fea:	b004      	add	sp, #16
   18fec:	bd80      	pop	{r7, pc}

00018fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   18fee:	b580      	push	{r7, lr}
   18ff0:	b084      	sub	sp, #16
   18ff2:	af00      	add	r7, sp, #0
   18ff4:	6078      	str	r0, [r7, #4]
   18ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   18ff8:	683b      	ldr	r3, [r7, #0]
   18ffa:	681b      	ldr	r3, [r3, #0]
   18ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   18ffe:	68bb      	ldr	r3, [r7, #8]
   19000:	3301      	adds	r3, #1
   19002:	d103      	bne.n	1900c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19004:	687b      	ldr	r3, [r7, #4]
   19006:	691b      	ldr	r3, [r3, #16]
   19008:	60fb      	str	r3, [r7, #12]
   1900a:	e00c      	b.n	19026 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1900c:	687b      	ldr	r3, [r7, #4]
   1900e:	3308      	adds	r3, #8
   19010:	60fb      	str	r3, [r7, #12]
   19012:	e002      	b.n	1901a <vListInsert+0x2c>
   19014:	68fb      	ldr	r3, [r7, #12]
   19016:	685b      	ldr	r3, [r3, #4]
   19018:	60fb      	str	r3, [r7, #12]
   1901a:	68fb      	ldr	r3, [r7, #12]
   1901c:	685b      	ldr	r3, [r3, #4]
   1901e:	681a      	ldr	r2, [r3, #0]
   19020:	68bb      	ldr	r3, [r7, #8]
   19022:	429a      	cmp	r2, r3
   19024:	d9f6      	bls.n	19014 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19026:	68fb      	ldr	r3, [r7, #12]
   19028:	685a      	ldr	r2, [r3, #4]
   1902a:	683b      	ldr	r3, [r7, #0]
   1902c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1902e:	683b      	ldr	r3, [r7, #0]
   19030:	685b      	ldr	r3, [r3, #4]
   19032:	683a      	ldr	r2, [r7, #0]
   19034:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19036:	683b      	ldr	r3, [r7, #0]
   19038:	68fa      	ldr	r2, [r7, #12]
   1903a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1903c:	68fb      	ldr	r3, [r7, #12]
   1903e:	683a      	ldr	r2, [r7, #0]
   19040:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19042:	683b      	ldr	r3, [r7, #0]
   19044:	687a      	ldr	r2, [r7, #4]
   19046:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19048:	687b      	ldr	r3, [r7, #4]
   1904a:	681b      	ldr	r3, [r3, #0]
   1904c:	1c5a      	adds	r2, r3, #1
   1904e:	687b      	ldr	r3, [r7, #4]
   19050:	601a      	str	r2, [r3, #0]
}
   19052:	46c0      	nop			; (mov r8, r8)
   19054:	46bd      	mov	sp, r7
   19056:	b004      	add	sp, #16
   19058:	bd80      	pop	{r7, pc}

0001905a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1905a:	b580      	push	{r7, lr}
   1905c:	b084      	sub	sp, #16
   1905e:	af00      	add	r7, sp, #0
   19060:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19062:	687b      	ldr	r3, [r7, #4]
   19064:	691b      	ldr	r3, [r3, #16]
   19066:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19068:	687b      	ldr	r3, [r7, #4]
   1906a:	685b      	ldr	r3, [r3, #4]
   1906c:	687a      	ldr	r2, [r7, #4]
   1906e:	6892      	ldr	r2, [r2, #8]
   19070:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19072:	687b      	ldr	r3, [r7, #4]
   19074:	689b      	ldr	r3, [r3, #8]
   19076:	687a      	ldr	r2, [r7, #4]
   19078:	6852      	ldr	r2, [r2, #4]
   1907a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1907c:	68fb      	ldr	r3, [r7, #12]
   1907e:	685a      	ldr	r2, [r3, #4]
   19080:	687b      	ldr	r3, [r7, #4]
   19082:	429a      	cmp	r2, r3
   19084:	d103      	bne.n	1908e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	689a      	ldr	r2, [r3, #8]
   1908a:	68fb      	ldr	r3, [r7, #12]
   1908c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1908e:	687b      	ldr	r3, [r7, #4]
   19090:	2200      	movs	r2, #0
   19092:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19094:	68fb      	ldr	r3, [r7, #12]
   19096:	681b      	ldr	r3, [r3, #0]
   19098:	1e5a      	subs	r2, r3, #1
   1909a:	68fb      	ldr	r3, [r7, #12]
   1909c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1909e:	68fb      	ldr	r3, [r7, #12]
   190a0:	681b      	ldr	r3, [r3, #0]
}
   190a2:	0018      	movs	r0, r3
   190a4:	46bd      	mov	sp, r7
   190a6:	b004      	add	sp, #16
   190a8:	bd80      	pop	{r7, pc}
	...

000190ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   190ac:	b580      	push	{r7, lr}
   190ae:	b084      	sub	sp, #16
   190b0:	af00      	add	r7, sp, #0
   190b2:	60f8      	str	r0, [r7, #12]
   190b4:	60b9      	str	r1, [r7, #8]
   190b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   190b8:	68fb      	ldr	r3, [r7, #12]
   190ba:	3b04      	subs	r3, #4
   190bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   190be:	68fb      	ldr	r3, [r7, #12]
   190c0:	2280      	movs	r2, #128	; 0x80
   190c2:	0452      	lsls	r2, r2, #17
   190c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   190c6:	68fb      	ldr	r3, [r7, #12]
   190c8:	3b04      	subs	r3, #4
   190ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   190cc:	68ba      	ldr	r2, [r7, #8]
   190ce:	68fb      	ldr	r3, [r7, #12]
   190d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   190d2:	68fb      	ldr	r3, [r7, #12]
   190d4:	3b04      	subs	r3, #4
   190d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   190d8:	4a08      	ldr	r2, [pc, #32]	; (190fc <pxPortInitialiseStack+0x50>)
   190da:	68fb      	ldr	r3, [r7, #12]
   190dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   190de:	68fb      	ldr	r3, [r7, #12]
   190e0:	3b14      	subs	r3, #20
   190e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   190e4:	687a      	ldr	r2, [r7, #4]
   190e6:	68fb      	ldr	r3, [r7, #12]
   190e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   190ea:	68fb      	ldr	r3, [r7, #12]
   190ec:	3b20      	subs	r3, #32
   190ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   190f0:	68fb      	ldr	r3, [r7, #12]
}
   190f2:	0018      	movs	r0, r3
   190f4:	46bd      	mov	sp, r7
   190f6:	b004      	add	sp, #16
   190f8:	bd80      	pop	{r7, pc}
   190fa:	46c0      	nop			; (mov r8, r8)
   190fc:	00019101 	.word	0x00019101

00019100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19100:	b580      	push	{r7, lr}
   19102:	b082      	sub	sp, #8
   19104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19106:	2300      	movs	r3, #0
   19108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1910a:	4b07      	ldr	r3, [pc, #28]	; (19128 <prvTaskExitError+0x28>)
   1910c:	681b      	ldr	r3, [r3, #0]
   1910e:	3301      	adds	r3, #1
   19110:	d001      	beq.n	19116 <prvTaskExitError+0x16>
   19112:	b672      	cpsid	i
   19114:	e7fe      	b.n	19114 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19116:	b672      	cpsid	i
	while( ulDummy == 0 )
   19118:	46c0      	nop			; (mov r8, r8)
   1911a:	687b      	ldr	r3, [r7, #4]
   1911c:	2b00      	cmp	r3, #0
   1911e:	d0fc      	beq.n	1911a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19120:	46c0      	nop			; (mov r8, r8)
   19122:	46bd      	mov	sp, r7
   19124:	b002      	add	sp, #8
   19126:	bd80      	pop	{r7, pc}
   19128:	20000104 	.word	0x20000104

0001912c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1912c:	b580      	push	{r7, lr}
   1912e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19130:	46c0      	nop			; (mov r8, r8)
   19132:	46bd      	mov	sp, r7
   19134:	bd80      	pop	{r7, pc}
	...

00019140 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19140:	4a0b      	ldr	r2, [pc, #44]	; (19170 <pxCurrentTCBConst2>)
   19142:	6813      	ldr	r3, [r2, #0]
   19144:	6818      	ldr	r0, [r3, #0]
   19146:	3020      	adds	r0, #32
   19148:	f380 8809 	msr	PSP, r0
   1914c:	2002      	movs	r0, #2
   1914e:	f380 8814 	msr	CONTROL, r0
   19152:	f3bf 8f6f 	isb	sy
   19156:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19158:	46ae      	mov	lr, r5
   1915a:	bc08      	pop	{r3}
   1915c:	bc04      	pop	{r2}
   1915e:	b662      	cpsie	i
   19160:	4718      	bx	r3
   19162:	46c0      	nop			; (mov r8, r8)
   19164:	46c0      	nop			; (mov r8, r8)
   19166:	46c0      	nop			; (mov r8, r8)
   19168:	46c0      	nop			; (mov r8, r8)
   1916a:	46c0      	nop			; (mov r8, r8)
   1916c:	46c0      	nop			; (mov r8, r8)
   1916e:	46c0      	nop			; (mov r8, r8)

00019170 <pxCurrentTCBConst2>:
   19170:	200040a8 	.word	0x200040a8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19174:	46c0      	nop			; (mov r8, r8)
   19176:	46c0      	nop			; (mov r8, r8)

00019178 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19178:	b580      	push	{r7, lr}
   1917a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1917c:	4b0e      	ldr	r3, [pc, #56]	; (191b8 <xPortStartScheduler+0x40>)
   1917e:	4a0e      	ldr	r2, [pc, #56]	; (191b8 <xPortStartScheduler+0x40>)
   19180:	6812      	ldr	r2, [r2, #0]
   19182:	21ff      	movs	r1, #255	; 0xff
   19184:	0409      	lsls	r1, r1, #16
   19186:	430a      	orrs	r2, r1
   19188:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1918a:	4b0b      	ldr	r3, [pc, #44]	; (191b8 <xPortStartScheduler+0x40>)
   1918c:	4a0a      	ldr	r2, [pc, #40]	; (191b8 <xPortStartScheduler+0x40>)
   1918e:	6812      	ldr	r2, [r2, #0]
   19190:	21ff      	movs	r1, #255	; 0xff
   19192:	0609      	lsls	r1, r1, #24
   19194:	430a      	orrs	r2, r1
   19196:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19198:	4b08      	ldr	r3, [pc, #32]	; (191bc <xPortStartScheduler+0x44>)
   1919a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1919c:	4b08      	ldr	r3, [pc, #32]	; (191c0 <xPortStartScheduler+0x48>)
   1919e:	2200      	movs	r2, #0
   191a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   191a2:	4b08      	ldr	r3, [pc, #32]	; (191c4 <xPortStartScheduler+0x4c>)
   191a4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   191a6:	4b08      	ldr	r3, [pc, #32]	; (191c8 <xPortStartScheduler+0x50>)
   191a8:	4798      	blx	r3
	prvTaskExitError();
   191aa:	4b08      	ldr	r3, [pc, #32]	; (191cc <xPortStartScheduler+0x54>)
   191ac:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   191ae:	2300      	movs	r3, #0
}
   191b0:	0018      	movs	r0, r3
   191b2:	46bd      	mov	sp, r7
   191b4:	bd80      	pop	{r7, pc}
   191b6:	46c0      	nop			; (mov r8, r8)
   191b8:	e000ed20 	.word	0xe000ed20
   191bc:	000192d9 	.word	0x000192d9
   191c0:	20000104 	.word	0x20000104
   191c4:	00019141 	.word	0x00019141
   191c8:	0001b835 	.word	0x0001b835
   191cc:	00019101 	.word	0x00019101

000191d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   191d0:	b580      	push	{r7, lr}
   191d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   191d4:	4b03      	ldr	r3, [pc, #12]	; (191e4 <vPortYield+0x14>)
   191d6:	2280      	movs	r2, #128	; 0x80
   191d8:	0552      	lsls	r2, r2, #21
   191da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   191dc:	46c0      	nop			; (mov r8, r8)
   191de:	46bd      	mov	sp, r7
   191e0:	bd80      	pop	{r7, pc}
   191e2:	46c0      	nop			; (mov r8, r8)
   191e4:	e000ed04 	.word	0xe000ed04

000191e8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   191e8:	b580      	push	{r7, lr}
   191ea:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   191ec:	b672      	cpsid	i
    uxCriticalNesting++;
   191ee:	4b06      	ldr	r3, [pc, #24]	; (19208 <vPortEnterCritical+0x20>)
   191f0:	681b      	ldr	r3, [r3, #0]
   191f2:	1c5a      	adds	r2, r3, #1
   191f4:	4b04      	ldr	r3, [pc, #16]	; (19208 <vPortEnterCritical+0x20>)
   191f6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   191f8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   191fc:	f3bf 8f6f 	isb	sy
}
   19200:	46c0      	nop			; (mov r8, r8)
   19202:	46bd      	mov	sp, r7
   19204:	bd80      	pop	{r7, pc}
   19206:	46c0      	nop			; (mov r8, r8)
   19208:	20000104 	.word	0x20000104

0001920c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1920c:	b580      	push	{r7, lr}
   1920e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19210:	4b09      	ldr	r3, [pc, #36]	; (19238 <vPortExitCritical+0x2c>)
   19212:	681b      	ldr	r3, [r3, #0]
   19214:	2b00      	cmp	r3, #0
   19216:	d101      	bne.n	1921c <vPortExitCritical+0x10>
   19218:	b672      	cpsid	i
   1921a:	e7fe      	b.n	1921a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1921c:	4b06      	ldr	r3, [pc, #24]	; (19238 <vPortExitCritical+0x2c>)
   1921e:	681b      	ldr	r3, [r3, #0]
   19220:	1e5a      	subs	r2, r3, #1
   19222:	4b05      	ldr	r3, [pc, #20]	; (19238 <vPortExitCritical+0x2c>)
   19224:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19226:	4b04      	ldr	r3, [pc, #16]	; (19238 <vPortExitCritical+0x2c>)
   19228:	681b      	ldr	r3, [r3, #0]
   1922a:	2b00      	cmp	r3, #0
   1922c:	d100      	bne.n	19230 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1922e:	b662      	cpsie	i
    }
}
   19230:	46c0      	nop			; (mov r8, r8)
   19232:	46bd      	mov	sp, r7
   19234:	bd80      	pop	{r7, pc}
   19236:	46c0      	nop			; (mov r8, r8)
   19238:	20000104 	.word	0x20000104

0001923c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1923c:	f3ef 8010 	mrs	r0, PRIMASK
   19240:	b672      	cpsid	i
   19242:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19244:	46c0      	nop			; (mov r8, r8)
   19246:	0018      	movs	r0, r3

00019248 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19248:	f380 8810 	msr	PRIMASK, r0
   1924c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1924e:	46c0      	nop			; (mov r8, r8)

00019250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19250:	f3ef 8009 	mrs	r0, PSP
   19254:	4b0e      	ldr	r3, [pc, #56]	; (19290 <pxCurrentTCBConst>)
   19256:	681a      	ldr	r2, [r3, #0]
   19258:	3820      	subs	r0, #32
   1925a:	6010      	str	r0, [r2, #0]
   1925c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1925e:	4644      	mov	r4, r8
   19260:	464d      	mov	r5, r9
   19262:	4656      	mov	r6, sl
   19264:	465f      	mov	r7, fp
   19266:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19268:	b508      	push	{r3, lr}
   1926a:	b672      	cpsid	i
   1926c:	f002 fae2 	bl	1b834 <vTaskSwitchContext>
   19270:	b662      	cpsie	i
   19272:	bc0c      	pop	{r2, r3}
   19274:	6811      	ldr	r1, [r2, #0]
   19276:	6808      	ldr	r0, [r1, #0]
   19278:	3010      	adds	r0, #16
   1927a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1927c:	46a0      	mov	r8, r4
   1927e:	46a9      	mov	r9, r5
   19280:	46b2      	mov	sl, r6
   19282:	46bb      	mov	fp, r7
   19284:	f380 8809 	msr	PSP, r0
   19288:	3820      	subs	r0, #32
   1928a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1928c:	4718      	bx	r3
   1928e:	46c0      	nop			; (mov r8, r8)

00019290 <pxCurrentTCBConst>:
   19290:	200040a8 	.word	0x200040a8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19294:	46c0      	nop			; (mov r8, r8)
   19296:	46c0      	nop			; (mov r8, r8)

00019298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19298:	b580      	push	{r7, lr}
   1929a:	b082      	sub	sp, #8
   1929c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1929e:	4b0a      	ldr	r3, [pc, #40]	; (192c8 <SysTick_Handler+0x30>)
   192a0:	4798      	blx	r3
   192a2:	0003      	movs	r3, r0
   192a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   192a6:	4b09      	ldr	r3, [pc, #36]	; (192cc <SysTick_Handler+0x34>)
   192a8:	4798      	blx	r3
   192aa:	1e03      	subs	r3, r0, #0
   192ac:	d003      	beq.n	192b6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   192ae:	4b08      	ldr	r3, [pc, #32]	; (192d0 <SysTick_Handler+0x38>)
   192b0:	2280      	movs	r2, #128	; 0x80
   192b2:	0552      	lsls	r2, r2, #21
   192b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   192b6:	687b      	ldr	r3, [r7, #4]
   192b8:	0018      	movs	r0, r3
   192ba:	4b06      	ldr	r3, [pc, #24]	; (192d4 <SysTick_Handler+0x3c>)
   192bc:	4798      	blx	r3
}
   192be:	46c0      	nop			; (mov r8, r8)
   192c0:	46bd      	mov	sp, r7
   192c2:	b002      	add	sp, #8
   192c4:	bd80      	pop	{r7, pc}
   192c6:	46c0      	nop			; (mov r8, r8)
   192c8:	0001923d 	.word	0x0001923d
   192cc:	0001b645 	.word	0x0001b645
   192d0:	e000ed04 	.word	0xe000ed04
   192d4:	00019249 	.word	0x00019249

000192d8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   192d8:	b5b0      	push	{r4, r5, r7, lr}
   192da:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   192dc:	4b0b      	ldr	r3, [pc, #44]	; (1930c <prvSetupTimerInterrupt+0x34>)
   192de:	2200      	movs	r2, #0
   192e0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   192e2:	4b0b      	ldr	r3, [pc, #44]	; (19310 <prvSetupTimerInterrupt+0x38>)
   192e4:	2200      	movs	r2, #0
   192e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   192e8:	4c0a      	ldr	r4, [pc, #40]	; (19314 <prvSetupTimerInterrupt+0x3c>)
   192ea:	2000      	movs	r0, #0
   192ec:	4b0a      	ldr	r3, [pc, #40]	; (19318 <prvSetupTimerInterrupt+0x40>)
   192ee:	4798      	blx	r3
   192f0:	4b0a      	ldr	r3, [pc, #40]	; (1931c <prvSetupTimerInterrupt+0x44>)
   192f2:	22fa      	movs	r2, #250	; 0xfa
   192f4:	0091      	lsls	r1, r2, #2
   192f6:	4798      	blx	r3
   192f8:	0003      	movs	r3, r0
   192fa:	3b01      	subs	r3, #1
   192fc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   192fe:	4b03      	ldr	r3, [pc, #12]	; (1930c <prvSetupTimerInterrupt+0x34>)
   19300:	2207      	movs	r2, #7
   19302:	601a      	str	r2, [r3, #0]
}
   19304:	46c0      	nop			; (mov r8, r8)
   19306:	46bd      	mov	sp, r7
   19308:	bdb0      	pop	{r4, r5, r7, pc}
   1930a:	46c0      	nop			; (mov r8, r8)
   1930c:	e000e010 	.word	0xe000e010
   19310:	e000e018 	.word	0xe000e018
   19314:	e000e014 	.word	0xe000e014
   19318:	00028e95 	.word	0x00028e95
   1931c:	00031b55 	.word	0x00031b55

00019320 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19320:	b580      	push	{r7, lr}
   19322:	b084      	sub	sp, #16
   19324:	af00      	add	r7, sp, #0
   19326:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19328:	2300      	movs	r3, #0
   1932a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1932c:	687b      	ldr	r3, [r7, #4]
   1932e:	2207      	movs	r2, #7
   19330:	4013      	ands	r3, r2
   19332:	d004      	beq.n	1933e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19334:	687b      	ldr	r3, [r7, #4]
   19336:	2207      	movs	r2, #7
   19338:	4393      	bics	r3, r2
   1933a:	3308      	adds	r3, #8
   1933c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1933e:	4b21      	ldr	r3, [pc, #132]	; (193c4 <pvPortMalloc+0xa4>)
   19340:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19342:	4b21      	ldr	r3, [pc, #132]	; (193c8 <pvPortMalloc+0xa8>)
   19344:	681b      	ldr	r3, [r3, #0]
   19346:	2b00      	cmp	r3, #0
   19348:	d105      	bne.n	19356 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1934a:	4b20      	ldr	r3, [pc, #128]	; (193cc <pvPortMalloc+0xac>)
   1934c:	2207      	movs	r2, #7
   1934e:	4393      	bics	r3, r2
   19350:	001a      	movs	r2, r3
   19352:	4b1d      	ldr	r3, [pc, #116]	; (193c8 <pvPortMalloc+0xa8>)
   19354:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19356:	4b1e      	ldr	r3, [pc, #120]	; (193d0 <pvPortMalloc+0xb0>)
   19358:	681a      	ldr	r2, [r3, #0]
   1935a:	687b      	ldr	r3, [r7, #4]
   1935c:	18d3      	adds	r3, r2, r3
   1935e:	4a1d      	ldr	r2, [pc, #116]	; (193d4 <pvPortMalloc+0xb4>)
   19360:	4293      	cmp	r3, r2
   19362:	d813      	bhi.n	1938c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19364:	4b1a      	ldr	r3, [pc, #104]	; (193d0 <pvPortMalloc+0xb0>)
   19366:	681a      	ldr	r2, [r3, #0]
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	18d2      	adds	r2, r2, r3
   1936c:	4b18      	ldr	r3, [pc, #96]	; (193d0 <pvPortMalloc+0xb0>)
   1936e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19370:	429a      	cmp	r2, r3
   19372:	d90b      	bls.n	1938c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19374:	4b14      	ldr	r3, [pc, #80]	; (193c8 <pvPortMalloc+0xa8>)
   19376:	681a      	ldr	r2, [r3, #0]
   19378:	4b15      	ldr	r3, [pc, #84]	; (193d0 <pvPortMalloc+0xb0>)
   1937a:	681b      	ldr	r3, [r3, #0]
   1937c:	18d3      	adds	r3, r2, r3
   1937e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19380:	4b13      	ldr	r3, [pc, #76]	; (193d0 <pvPortMalloc+0xb0>)
   19382:	681a      	ldr	r2, [r3, #0]
   19384:	687b      	ldr	r3, [r7, #4]
   19386:	18d2      	adds	r2, r2, r3
   19388:	4b11      	ldr	r3, [pc, #68]	; (193d0 <pvPortMalloc+0xb0>)
   1938a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	2b00      	cmp	r3, #0
   19390:	d006      	beq.n	193a0 <pvPortMalloc+0x80>
   19392:	68fb      	ldr	r3, [r7, #12]
   19394:	687a      	ldr	r2, [r7, #4]
   19396:	0019      	movs	r1, r3
   19398:	2094      	movs	r0, #148	; 0x94
   1939a:	4b0f      	ldr	r3, [pc, #60]	; (193d8 <pvPortMalloc+0xb8>)
   1939c:	4798      	blx	r3
   1939e:	e005      	b.n	193ac <pvPortMalloc+0x8c>
   193a0:	68fb      	ldr	r3, [r7, #12]
   193a2:	687a      	ldr	r2, [r7, #4]
   193a4:	0019      	movs	r1, r3
   193a6:	20e8      	movs	r0, #232	; 0xe8
   193a8:	4b0b      	ldr	r3, [pc, #44]	; (193d8 <pvPortMalloc+0xb8>)
   193aa:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   193ac:	4b0b      	ldr	r3, [pc, #44]	; (193dc <pvPortMalloc+0xbc>)
   193ae:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   193b0:	68fb      	ldr	r3, [r7, #12]
   193b2:	2b00      	cmp	r3, #0
   193b4:	d101      	bne.n	193ba <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   193b6:	4b0a      	ldr	r3, [pc, #40]	; (193e0 <pvPortMalloc+0xc0>)
   193b8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   193ba:	68fb      	ldr	r3, [r7, #12]
}
   193bc:	0018      	movs	r0, r3
   193be:	46bd      	mov	sp, r7
   193c0:	b004      	add	sp, #16
   193c2:	bd80      	pop	{r7, pc}
   193c4:	0001b4a1 	.word	0x0001b4a1
   193c8:	200040a4 	.word	0x200040a4
   193cc:	20000de0 	.word	0x20000de0
   193d0:	200040a0 	.word	0x200040a0
   193d4:	000032bf 	.word	0x000032bf
   193d8:	00017a89 	.word	0x00017a89
   193dc:	0001b4b9 	.word	0x0001b4b9
   193e0:	00031b25 	.word	0x00031b25

000193e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   193e4:	b580      	push	{r7, lr}
   193e6:	b082      	sub	sp, #8
   193e8:	af00      	add	r7, sp, #0
   193ea:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   193ec:	687b      	ldr	r3, [r7, #4]
   193ee:	2b00      	cmp	r3, #0
   193f0:	d001      	beq.n	193f6 <vPortFree+0x12>
   193f2:	b672      	cpsid	i
   193f4:	e7fe      	b.n	193f4 <vPortFree+0x10>
}
   193f6:	46c0      	nop			; (mov r8, r8)
   193f8:	46bd      	mov	sp, r7
   193fa:	b002      	add	sp, #8
   193fc:	bd80      	pop	{r7, pc}
	...

00019400 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19400:	b580      	push	{r7, lr}
   19402:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19404:	4b03      	ldr	r3, [pc, #12]	; (19414 <xPortGetFreeHeapSize+0x14>)
   19406:	681b      	ldr	r3, [r3, #0]
   19408:	22cb      	movs	r2, #203	; 0xcb
   1940a:	0192      	lsls	r2, r2, #6
   1940c:	1ad3      	subs	r3, r2, r3
}
   1940e:	0018      	movs	r0, r3
   19410:	46bd      	mov	sp, r7
   19412:	bd80      	pop	{r7, pc}
   19414:	200040a0 	.word	0x200040a0

00019418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   19418:	b580      	push	{r7, lr}
   1941a:	b084      	sub	sp, #16
   1941c:	af00      	add	r7, sp, #0
   1941e:	6078      	str	r0, [r7, #4]
   19420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19422:	687b      	ldr	r3, [r7, #4]
   19424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   19426:	68fb      	ldr	r3, [r7, #12]
   19428:	2b00      	cmp	r3, #0
   1942a:	d101      	bne.n	19430 <xQueueGenericReset+0x18>
   1942c:	b672      	cpsid	i
   1942e:	e7fe      	b.n	1942e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   19430:	4b23      	ldr	r3, [pc, #140]	; (194c0 <xQueueGenericReset+0xa8>)
   19432:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   19434:	68fb      	ldr	r3, [r7, #12]
   19436:	681a      	ldr	r2, [r3, #0]
   19438:	68fb      	ldr	r3, [r7, #12]
   1943a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1943c:	68fb      	ldr	r3, [r7, #12]
   1943e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19440:	434b      	muls	r3, r1
   19442:	18d2      	adds	r2, r2, r3
   19444:	68fb      	ldr	r3, [r7, #12]
   19446:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   19448:	68fb      	ldr	r3, [r7, #12]
   1944a:	2200      	movs	r2, #0
   1944c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1944e:	68fb      	ldr	r3, [r7, #12]
   19450:	681a      	ldr	r2, [r3, #0]
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   19456:	68fb      	ldr	r3, [r7, #12]
   19458:	681a      	ldr	r2, [r3, #0]
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1945e:	1e59      	subs	r1, r3, #1
   19460:	68fb      	ldr	r3, [r7, #12]
   19462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19464:	434b      	muls	r3, r1
   19466:	18d2      	adds	r2, r2, r3
   19468:	68fb      	ldr	r3, [r7, #12]
   1946a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1946c:	68fb      	ldr	r3, [r7, #12]
   1946e:	2244      	movs	r2, #68	; 0x44
   19470:	21ff      	movs	r1, #255	; 0xff
   19472:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   19474:	68fb      	ldr	r3, [r7, #12]
   19476:	2245      	movs	r2, #69	; 0x45
   19478:	21ff      	movs	r1, #255	; 0xff
   1947a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1947c:	683b      	ldr	r3, [r7, #0]
   1947e:	2b00      	cmp	r3, #0
   19480:	d10d      	bne.n	1949e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19482:	68fb      	ldr	r3, [r7, #12]
   19484:	691b      	ldr	r3, [r3, #16]
   19486:	2b00      	cmp	r3, #0
   19488:	d013      	beq.n	194b2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1948a:	68fb      	ldr	r3, [r7, #12]
   1948c:	3310      	adds	r3, #16
   1948e:	0018      	movs	r0, r3
   19490:	4b0c      	ldr	r3, [pc, #48]	; (194c4 <xQueueGenericReset+0xac>)
   19492:	4798      	blx	r3
   19494:	1e03      	subs	r3, r0, #0
   19496:	d00c      	beq.n	194b2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   19498:	4b0b      	ldr	r3, [pc, #44]	; (194c8 <xQueueGenericReset+0xb0>)
   1949a:	4798      	blx	r3
   1949c:	e009      	b.n	194b2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1949e:	68fb      	ldr	r3, [r7, #12]
   194a0:	3310      	adds	r3, #16
   194a2:	0018      	movs	r0, r3
   194a4:	4b09      	ldr	r3, [pc, #36]	; (194cc <xQueueGenericReset+0xb4>)
   194a6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   194a8:	68fb      	ldr	r3, [r7, #12]
   194aa:	3324      	adds	r3, #36	; 0x24
   194ac:	0018      	movs	r0, r3
   194ae:	4b07      	ldr	r3, [pc, #28]	; (194cc <xQueueGenericReset+0xb4>)
   194b0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   194b2:	4b07      	ldr	r3, [pc, #28]	; (194d0 <xQueueGenericReset+0xb8>)
   194b4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   194b6:	2301      	movs	r3, #1
}
   194b8:	0018      	movs	r0, r3
   194ba:	46bd      	mov	sp, r7
   194bc:	b004      	add	sp, #16
   194be:	bd80      	pop	{r7, pc}
   194c0:	000191e9 	.word	0x000191e9
   194c4:	0001ba79 	.word	0x0001ba79
   194c8:	000191d1 	.word	0x000191d1
   194cc:	00018f59 	.word	0x00018f59
   194d0:	0001920d 	.word	0x0001920d

000194d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   194d4:	b590      	push	{r4, r7, lr}
   194d6:	b08b      	sub	sp, #44	; 0x2c
   194d8:	af02      	add	r7, sp, #8
   194da:	60f8      	str	r0, [r7, #12]
   194dc:	60b9      	str	r1, [r7, #8]
   194de:	1dfb      	adds	r3, r7, #7
   194e0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   194e2:	68fb      	ldr	r3, [r7, #12]
   194e4:	2b00      	cmp	r3, #0
   194e6:	d101      	bne.n	194ec <xQueueGenericCreate+0x18>
   194e8:	b672      	cpsid	i
   194ea:	e7fe      	b.n	194ea <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   194ec:	68bb      	ldr	r3, [r7, #8]
   194ee:	2b00      	cmp	r3, #0
   194f0:	d102      	bne.n	194f8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   194f2:	2300      	movs	r3, #0
   194f4:	61fb      	str	r3, [r7, #28]
   194f6:	e003      	b.n	19500 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   194f8:	68fb      	ldr	r3, [r7, #12]
   194fa:	68ba      	ldr	r2, [r7, #8]
   194fc:	4353      	muls	r3, r2
   194fe:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   19500:	69fb      	ldr	r3, [r7, #28]
   19502:	3354      	adds	r3, #84	; 0x54
   19504:	0018      	movs	r0, r3
   19506:	4b19      	ldr	r3, [pc, #100]	; (1956c <xQueueGenericCreate+0x98>)
   19508:	4798      	blx	r3
   1950a:	0003      	movs	r3, r0
   1950c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1950e:	69bb      	ldr	r3, [r7, #24]
   19510:	2b00      	cmp	r3, #0
   19512:	d00d      	beq.n	19530 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   19514:	69bb      	ldr	r3, [r7, #24]
   19516:	3354      	adds	r3, #84	; 0x54
   19518:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1951a:	1dfb      	adds	r3, r7, #7
   1951c:	781c      	ldrb	r4, [r3, #0]
   1951e:	697a      	ldr	r2, [r7, #20]
   19520:	68b9      	ldr	r1, [r7, #8]
   19522:	68f8      	ldr	r0, [r7, #12]
   19524:	69bb      	ldr	r3, [r7, #24]
   19526:	9300      	str	r3, [sp, #0]
   19528:	0023      	movs	r3, r4
   1952a:	4c11      	ldr	r4, [pc, #68]	; (19570 <xQueueGenericCreate+0x9c>)
   1952c:	47a0      	blx	r4
   1952e:	e017      	b.n	19560 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   19530:	4b10      	ldr	r3, [pc, #64]	; (19574 <xQueueGenericCreate+0xa0>)
   19532:	4798      	blx	r3
   19534:	0003      	movs	r3, r0
   19536:	0018      	movs	r0, r3
   19538:	4b0f      	ldr	r3, [pc, #60]	; (19578 <xQueueGenericCreate+0xa4>)
   1953a:	4798      	blx	r3
   1953c:	0003      	movs	r3, r0
   1953e:	001a      	movs	r2, r3
   19540:	4b0e      	ldr	r3, [pc, #56]	; (1957c <xQueueGenericCreate+0xa8>)
   19542:	881b      	ldrh	r3, [r3, #0]
   19544:	4013      	ands	r3, r2
   19546:	b29b      	uxth	r3, r3
   19548:	2b00      	cmp	r3, #0
   1954a:	d009      	beq.n	19560 <xQueueGenericCreate+0x8c>
   1954c:	1dfb      	adds	r3, r7, #7
   1954e:	781b      	ldrb	r3, [r3, #0]
   19550:	4a0b      	ldr	r2, [pc, #44]	; (19580 <xQueueGenericCreate+0xac>)
   19552:	5cd3      	ldrb	r3, [r2, r3]
   19554:	3340      	adds	r3, #64	; 0x40
   19556:	b2db      	uxtb	r3, r3
   19558:	2100      	movs	r1, #0
   1955a:	0018      	movs	r0, r3
   1955c:	4b09      	ldr	r3, [pc, #36]	; (19584 <xQueueGenericCreate+0xb0>)
   1955e:	4798      	blx	r3
		}

		return pxNewQueue;
   19560:	69bb      	ldr	r3, [r7, #24]
	}
   19562:	0018      	movs	r0, r3
   19564:	46bd      	mov	sp, r7
   19566:	b009      	add	sp, #36	; 0x24
   19568:	bd90      	pop	{r4, r7, pc}
   1956a:	46c0      	nop			; (mov r8, r8)
   1956c:	00019321 	.word	0x00019321
   19570:	00019589 	.word	0x00019589
   19574:	0001747d 	.word	0x0001747d
   19578:	000171e1 	.word	0x000171e1
   1957c:	20000100 	.word	0x20000100
   19580:	200000f4 	.word	0x200000f4
   19584:	00017ee1 	.word	0x00017ee1

00019588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   19588:	b5b0      	push	{r4, r5, r7, lr}
   1958a:	b084      	sub	sp, #16
   1958c:	af00      	add	r7, sp, #0
   1958e:	60f8      	str	r0, [r7, #12]
   19590:	60b9      	str	r1, [r7, #8]
   19592:	607a      	str	r2, [r7, #4]
   19594:	001a      	movs	r2, r3
   19596:	1cfb      	adds	r3, r7, #3
   19598:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1959a:	68bb      	ldr	r3, [r7, #8]
   1959c:	2b00      	cmp	r3, #0
   1959e:	d103      	bne.n	195a8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   195a0:	6a3b      	ldr	r3, [r7, #32]
   195a2:	6a3a      	ldr	r2, [r7, #32]
   195a4:	601a      	str	r2, [r3, #0]
   195a6:	e002      	b.n	195ae <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   195a8:	6a3b      	ldr	r3, [r7, #32]
   195aa:	687a      	ldr	r2, [r7, #4]
   195ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   195ae:	6a3b      	ldr	r3, [r7, #32]
   195b0:	68fa      	ldr	r2, [r7, #12]
   195b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   195b4:	6a3b      	ldr	r3, [r7, #32]
   195b6:	68ba      	ldr	r2, [r7, #8]
   195b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   195ba:	6a3b      	ldr	r3, [r7, #32]
   195bc:	2101      	movs	r1, #1
   195be:	0018      	movs	r0, r3
   195c0:	4b41      	ldr	r3, [pc, #260]	; (196c8 <prvInitialiseNewQueue+0x140>)
   195c2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   195c4:	6a3b      	ldr	r3, [r7, #32]
   195c6:	1cfa      	adds	r2, r7, #3
   195c8:	2150      	movs	r1, #80	; 0x50
   195ca:	7812      	ldrb	r2, [r2, #0]
   195cc:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   195ce:	6a3b      	ldr	r3, [r7, #32]
   195d0:	2200      	movs	r2, #0
   195d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   195d4:	6a3b      	ldr	r3, [r7, #32]
   195d6:	0018      	movs	r0, r3
   195d8:	4b3c      	ldr	r3, [pc, #240]	; (196cc <prvInitialiseNewQueue+0x144>)
   195da:	4798      	blx	r3
   195dc:	0003      	movs	r3, r0
   195de:	001a      	movs	r2, r3
   195e0:	4b3b      	ldr	r3, [pc, #236]	; (196d0 <prvInitialiseNewQueue+0x148>)
   195e2:	5c9b      	ldrb	r3, [r3, r2]
   195e4:	0018      	movs	r0, r3
   195e6:	4b3b      	ldr	r3, [pc, #236]	; (196d4 <prvInitialiseNewQueue+0x14c>)
   195e8:	4798      	blx	r3
   195ea:	0003      	movs	r3, r0
   195ec:	b29a      	uxth	r2, r3
   195ee:	6a3b      	ldr	r3, [r7, #32]
   195f0:	0011      	movs	r1, r2
   195f2:	0018      	movs	r0, r3
   195f4:	4b38      	ldr	r3, [pc, #224]	; (196d8 <prvInitialiseNewQueue+0x150>)
   195f6:	4798      	blx	r3
   195f8:	4b38      	ldr	r3, [pc, #224]	; (196dc <prvInitialiseNewQueue+0x154>)
   195fa:	881a      	ldrh	r2, [r3, #0]
   195fc:	6a3b      	ldr	r3, [r7, #32]
   195fe:	0011      	movs	r1, r2
   19600:	0018      	movs	r0, r3
   19602:	4b37      	ldr	r3, [pc, #220]	; (196e0 <prvInitialiseNewQueue+0x158>)
   19604:	4798      	blx	r3
   19606:	6a3b      	ldr	r3, [r7, #32]
   19608:	0018      	movs	r0, r3
   1960a:	4b30      	ldr	r3, [pc, #192]	; (196cc <prvInitialiseNewQueue+0x144>)
   1960c:	4798      	blx	r3
   1960e:	0003      	movs	r3, r0
   19610:	001a      	movs	r2, r3
   19612:	4b2f      	ldr	r3, [pc, #188]	; (196d0 <prvInitialiseNewQueue+0x148>)
   19614:	5c9c      	ldrb	r4, [r3, r2]
   19616:	6a3b      	ldr	r3, [r7, #32]
   19618:	0018      	movs	r0, r3
   1961a:	4b32      	ldr	r3, [pc, #200]	; (196e4 <prvInitialiseNewQueue+0x15c>)
   1961c:	4798      	blx	r3
   1961e:	0003      	movs	r3, r0
   19620:	b2db      	uxtb	r3, r3
   19622:	0019      	movs	r1, r3
   19624:	0020      	movs	r0, r4
   19626:	4b30      	ldr	r3, [pc, #192]	; (196e8 <prvInitialiseNewQueue+0x160>)
   19628:	4798      	blx	r3
   1962a:	4b30      	ldr	r3, [pc, #192]	; (196ec <prvInitialiseNewQueue+0x164>)
   1962c:	4798      	blx	r3
   1962e:	0003      	movs	r3, r0
   19630:	0018      	movs	r0, r3
   19632:	4b2f      	ldr	r3, [pc, #188]	; (196f0 <prvInitialiseNewQueue+0x168>)
   19634:	4798      	blx	r3
   19636:	0003      	movs	r3, r0
   19638:	001a      	movs	r2, r3
   1963a:	4b2e      	ldr	r3, [pc, #184]	; (196f4 <prvInitialiseNewQueue+0x16c>)
   1963c:	881b      	ldrh	r3, [r3, #0]
   1963e:	4013      	ands	r3, r2
   19640:	b29b      	uxth	r3, r3
   19642:	2b00      	cmp	r3, #0
   19644:	d029      	beq.n	1969a <prvInitialiseNewQueue+0x112>
   19646:	6a3b      	ldr	r3, [r7, #32]
   19648:	0018      	movs	r0, r3
   1964a:	4b2b      	ldr	r3, [pc, #172]	; (196f8 <prvInitialiseNewQueue+0x170>)
   1964c:	4798      	blx	r3
   1964e:	0003      	movs	r3, r0
   19650:	001a      	movs	r2, r3
   19652:	4b28      	ldr	r3, [pc, #160]	; (196f4 <prvInitialiseNewQueue+0x16c>)
   19654:	881b      	ldrh	r3, [r3, #0]
   19656:	4013      	ands	r3, r2
   19658:	b29b      	uxth	r3, r3
   1965a:	2b00      	cmp	r3, #0
   1965c:	d01d      	beq.n	1969a <prvInitialiseNewQueue+0x112>
   1965e:	6a3b      	ldr	r3, [r7, #32]
   19660:	0018      	movs	r0, r3
   19662:	4b1a      	ldr	r3, [pc, #104]	; (196cc <prvInitialiseNewQueue+0x144>)
   19664:	4798      	blx	r3
   19666:	0003      	movs	r3, r0
   19668:	001a      	movs	r2, r3
   1966a:	4b19      	ldr	r3, [pc, #100]	; (196d0 <prvInitialiseNewQueue+0x148>)
   1966c:	5c9b      	ldrb	r3, [r3, r2]
   1966e:	3318      	adds	r3, #24
   19670:	b2db      	uxtb	r3, r3
   19672:	001d      	movs	r5, r3
   19674:	6a3b      	ldr	r3, [r7, #32]
   19676:	0018      	movs	r0, r3
   19678:	4b14      	ldr	r3, [pc, #80]	; (196cc <prvInitialiseNewQueue+0x144>)
   1967a:	4798      	blx	r3
   1967c:	0003      	movs	r3, r0
   1967e:	001a      	movs	r2, r3
   19680:	4b13      	ldr	r3, [pc, #76]	; (196d0 <prvInitialiseNewQueue+0x148>)
   19682:	5c9c      	ldrb	r4, [r3, r2]
   19684:	6a3b      	ldr	r3, [r7, #32]
   19686:	0018      	movs	r0, r3
   19688:	4b16      	ldr	r3, [pc, #88]	; (196e4 <prvInitialiseNewQueue+0x15c>)
   1968a:	4798      	blx	r3
   1968c:	0003      	movs	r3, r0
   1968e:	b2db      	uxtb	r3, r3
   19690:	001a      	movs	r2, r3
   19692:	0021      	movs	r1, r4
   19694:	0028      	movs	r0, r5
   19696:	4b19      	ldr	r3, [pc, #100]	; (196fc <prvInitialiseNewQueue+0x174>)
   19698:	4798      	blx	r3
   1969a:	6a3b      	ldr	r3, [r7, #32]
   1969c:	0018      	movs	r0, r3
   1969e:	4b0b      	ldr	r3, [pc, #44]	; (196cc <prvInitialiseNewQueue+0x144>)
   196a0:	4798      	blx	r3
   196a2:	0003      	movs	r3, r0
   196a4:	001a      	movs	r2, r3
   196a6:	4b0a      	ldr	r3, [pc, #40]	; (196d0 <prvInitialiseNewQueue+0x148>)
   196a8:	5c9c      	ldrb	r4, [r3, r2]
   196aa:	6a3b      	ldr	r3, [r7, #32]
   196ac:	0018      	movs	r0, r3
   196ae:	4b0d      	ldr	r3, [pc, #52]	; (196e4 <prvInitialiseNewQueue+0x15c>)
   196b0:	4798      	blx	r3
   196b2:	0003      	movs	r3, r0
   196b4:	b2db      	uxtb	r3, r3
   196b6:	2200      	movs	r2, #0
   196b8:	0019      	movs	r1, r3
   196ba:	0020      	movs	r0, r4
   196bc:	4b10      	ldr	r3, [pc, #64]	; (19700 <prvInitialiseNewQueue+0x178>)
   196be:	4798      	blx	r3
}
   196c0:	46c0      	nop			; (mov r8, r8)
   196c2:	46bd      	mov	sp, r7
   196c4:	b004      	add	sp, #16
   196c6:	bdb0      	pop	{r4, r5, r7, pc}
   196c8:	00019419 	.word	0x00019419
   196cc:	000171a1 	.word	0x000171a1
   196d0:	200000f4 	.word	0x200000f4
   196d4:	00018761 	.word	0x00018761
   196d8:	000172c5 	.word	0x000172c5
   196dc:	20000102 	.word	0x20000102
   196e0:	00017301 	.word	0x00017301
   196e4:	00017281 	.word	0x00017281
   196e8:	000188f9 	.word	0x000188f9
   196ec:	0001747d 	.word	0x0001747d
   196f0:	000171e1 	.word	0x000171e1
   196f4:	20000100 	.word	0x20000100
   196f8:	000172a1 	.word	0x000172a1
   196fc:	00017bd9 	.word	0x00017bd9
   19700:	00018235 	.word	0x00018235

00019704 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   19704:	b590      	push	{r4, r7, lr}
   19706:	b083      	sub	sp, #12
   19708:	af00      	add	r7, sp, #0
   1970a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1970c:	687b      	ldr	r3, [r7, #4]
   1970e:	2b00      	cmp	r3, #0
   19710:	d00e      	beq.n	19730 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   19712:	687b      	ldr	r3, [r7, #4]
   19714:	2200      	movs	r2, #0
   19716:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   19718:	687b      	ldr	r3, [r7, #4]
   1971a:	2200      	movs	r2, #0
   1971c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1971e:	687b      	ldr	r3, [r7, #4]
   19720:	2200      	movs	r2, #0
   19722:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   19724:	6878      	ldr	r0, [r7, #4]
   19726:	2300      	movs	r3, #0
   19728:	2200      	movs	r2, #0
   1972a:	2100      	movs	r1, #0
   1972c:	4c02      	ldr	r4, [pc, #8]	; (19738 <prvInitialiseMutex+0x34>)
   1972e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   19730:	46c0      	nop			; (mov r8, r8)
   19732:	46bd      	mov	sp, r7
   19734:	b003      	add	sp, #12
   19736:	bd90      	pop	{r4, r7, pc}
   19738:	0001977d 	.word	0x0001977d

0001973c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1973c:	b580      	push	{r7, lr}
   1973e:	b086      	sub	sp, #24
   19740:	af00      	add	r7, sp, #0
   19742:	0002      	movs	r2, r0
   19744:	1dfb      	adds	r3, r7, #7
   19746:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   19748:	2301      	movs	r3, #1
   1974a:	617b      	str	r3, [r7, #20]
   1974c:	2300      	movs	r3, #0
   1974e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   19750:	1dfb      	adds	r3, r7, #7
   19752:	781a      	ldrb	r2, [r3, #0]
   19754:	6939      	ldr	r1, [r7, #16]
   19756:	697b      	ldr	r3, [r7, #20]
   19758:	0018      	movs	r0, r3
   1975a:	4b06      	ldr	r3, [pc, #24]	; (19774 <xQueueCreateMutex+0x38>)
   1975c:	4798      	blx	r3
   1975e:	0003      	movs	r3, r0
   19760:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   19762:	68fb      	ldr	r3, [r7, #12]
   19764:	0018      	movs	r0, r3
   19766:	4b04      	ldr	r3, [pc, #16]	; (19778 <xQueueCreateMutex+0x3c>)
   19768:	4798      	blx	r3

		return pxNewQueue;
   1976a:	68fb      	ldr	r3, [r7, #12]
	}
   1976c:	0018      	movs	r0, r3
   1976e:	46bd      	mov	sp, r7
   19770:	b006      	add	sp, #24
   19772:	bd80      	pop	{r7, pc}
   19774:	000194d5 	.word	0x000194d5
   19778:	00019705 	.word	0x00019705

0001977c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1977c:	b5b0      	push	{r4, r5, r7, lr}
   1977e:	b08a      	sub	sp, #40	; 0x28
   19780:	af00      	add	r7, sp, #0
   19782:	60f8      	str	r0, [r7, #12]
   19784:	60b9      	str	r1, [r7, #8]
   19786:	607a      	str	r2, [r7, #4]
   19788:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1978a:	2300      	movs	r3, #0
   1978c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1978e:	68fb      	ldr	r3, [r7, #12]
   19790:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   19792:	6a3b      	ldr	r3, [r7, #32]
   19794:	2b00      	cmp	r3, #0
   19796:	d101      	bne.n	1979c <xQueueGenericSend+0x20>
   19798:	b672      	cpsid	i
   1979a:	e7fe      	b.n	1979a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1979c:	68bb      	ldr	r3, [r7, #8]
   1979e:	2b00      	cmp	r3, #0
   197a0:	d103      	bne.n	197aa <xQueueGenericSend+0x2e>
   197a2:	6a3b      	ldr	r3, [r7, #32]
   197a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   197a6:	2b00      	cmp	r3, #0
   197a8:	d101      	bne.n	197ae <xQueueGenericSend+0x32>
   197aa:	2301      	movs	r3, #1
   197ac:	e000      	b.n	197b0 <xQueueGenericSend+0x34>
   197ae:	2300      	movs	r3, #0
   197b0:	2b00      	cmp	r3, #0
   197b2:	d101      	bne.n	197b8 <xQueueGenericSend+0x3c>
   197b4:	b672      	cpsid	i
   197b6:	e7fe      	b.n	197b6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   197b8:	683b      	ldr	r3, [r7, #0]
   197ba:	2b02      	cmp	r3, #2
   197bc:	d103      	bne.n	197c6 <xQueueGenericSend+0x4a>
   197be:	6a3b      	ldr	r3, [r7, #32]
   197c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   197c2:	2b01      	cmp	r3, #1
   197c4:	d101      	bne.n	197ca <xQueueGenericSend+0x4e>
   197c6:	2301      	movs	r3, #1
   197c8:	e000      	b.n	197cc <xQueueGenericSend+0x50>
   197ca:	2300      	movs	r3, #0
   197cc:	2b00      	cmp	r3, #0
   197ce:	d101      	bne.n	197d4 <xQueueGenericSend+0x58>
   197d0:	b672      	cpsid	i
   197d2:	e7fe      	b.n	197d2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   197d4:	4bbc      	ldr	r3, [pc, #752]	; (19ac8 <xQueueGenericSend+0x34c>)
   197d6:	4798      	blx	r3
   197d8:	1e03      	subs	r3, r0, #0
   197da:	d102      	bne.n	197e2 <xQueueGenericSend+0x66>
   197dc:	687b      	ldr	r3, [r7, #4]
   197de:	2b00      	cmp	r3, #0
   197e0:	d101      	bne.n	197e6 <xQueueGenericSend+0x6a>
   197e2:	2301      	movs	r3, #1
   197e4:	e000      	b.n	197e8 <xQueueGenericSend+0x6c>
   197e6:	2300      	movs	r3, #0
   197e8:	2b00      	cmp	r3, #0
   197ea:	d101      	bne.n	197f0 <xQueueGenericSend+0x74>
   197ec:	b672      	cpsid	i
   197ee:	e7fe      	b.n	197ee <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   197f0:	4bb6      	ldr	r3, [pc, #728]	; (19acc <xQueueGenericSend+0x350>)
   197f2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   197f4:	6a3b      	ldr	r3, [r7, #32]
   197f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   197f8:	6a3b      	ldr	r3, [r7, #32]
   197fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   197fc:	429a      	cmp	r2, r3
   197fe:	d303      	bcc.n	19808 <xQueueGenericSend+0x8c>
   19800:	683b      	ldr	r3, [r7, #0]
   19802:	2b02      	cmp	r3, #2
   19804:	d000      	beq.n	19808 <xQueueGenericSend+0x8c>
   19806:	e08e      	b.n	19926 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   19808:	4bb1      	ldr	r3, [pc, #708]	; (19ad0 <xQueueGenericSend+0x354>)
   1980a:	4798      	blx	r3
   1980c:	0003      	movs	r3, r0
   1980e:	0018      	movs	r0, r3
   19810:	4bb0      	ldr	r3, [pc, #704]	; (19ad4 <xQueueGenericSend+0x358>)
   19812:	4798      	blx	r3
   19814:	0003      	movs	r3, r0
   19816:	001a      	movs	r2, r3
   19818:	4baf      	ldr	r3, [pc, #700]	; (19ad8 <xQueueGenericSend+0x35c>)
   1981a:	881b      	ldrh	r3, [r3, #0]
   1981c:	4013      	ands	r3, r2
   1981e:	b29b      	uxth	r3, r3
   19820:	2b00      	cmp	r3, #0
   19822:	d02e      	beq.n	19882 <xQueueGenericSend+0x106>
   19824:	6a3b      	ldr	r3, [r7, #32]
   19826:	0018      	movs	r0, r3
   19828:	4bac      	ldr	r3, [pc, #688]	; (19adc <xQueueGenericSend+0x360>)
   1982a:	4798      	blx	r3
   1982c:	0003      	movs	r3, r0
   1982e:	001a      	movs	r2, r3
   19830:	4ba9      	ldr	r3, [pc, #676]	; (19ad8 <xQueueGenericSend+0x35c>)
   19832:	881b      	ldrh	r3, [r3, #0]
   19834:	4013      	ands	r3, r2
   19836:	b29b      	uxth	r3, r3
   19838:	2b00      	cmp	r3, #0
   1983a:	d022      	beq.n	19882 <xQueueGenericSend+0x106>
   1983c:	683b      	ldr	r3, [r7, #0]
   1983e:	2b00      	cmp	r3, #0
   19840:	d10b      	bne.n	1985a <xQueueGenericSend+0xde>
   19842:	6a3b      	ldr	r3, [r7, #32]
   19844:	0018      	movs	r0, r3
   19846:	4ba6      	ldr	r3, [pc, #664]	; (19ae0 <xQueueGenericSend+0x364>)
   19848:	4798      	blx	r3
   1984a:	0003      	movs	r3, r0
   1984c:	001a      	movs	r2, r3
   1984e:	4ba5      	ldr	r3, [pc, #660]	; (19ae4 <xQueueGenericSend+0x368>)
   19850:	5c9b      	ldrb	r3, [r3, r2]
   19852:	3320      	adds	r3, #32
   19854:	b2db      	uxtb	r3, r3
   19856:	001d      	movs	r5, r3
   19858:	e000      	b.n	1985c <xQueueGenericSend+0xe0>
   1985a:	2525      	movs	r5, #37	; 0x25
   1985c:	6a3b      	ldr	r3, [r7, #32]
   1985e:	0018      	movs	r0, r3
   19860:	4b9f      	ldr	r3, [pc, #636]	; (19ae0 <xQueueGenericSend+0x364>)
   19862:	4798      	blx	r3
   19864:	0003      	movs	r3, r0
   19866:	001a      	movs	r2, r3
   19868:	4b9e      	ldr	r3, [pc, #632]	; (19ae4 <xQueueGenericSend+0x368>)
   1986a:	5c9c      	ldrb	r4, [r3, r2]
   1986c:	6a3b      	ldr	r3, [r7, #32]
   1986e:	0018      	movs	r0, r3
   19870:	4b9d      	ldr	r3, [pc, #628]	; (19ae8 <xQueueGenericSend+0x36c>)
   19872:	4798      	blx	r3
   19874:	0003      	movs	r3, r0
   19876:	b2db      	uxtb	r3, r3
   19878:	001a      	movs	r2, r3
   1987a:	0021      	movs	r1, r4
   1987c:	0028      	movs	r0, r5
   1987e:	4b9b      	ldr	r3, [pc, #620]	; (19aec <xQueueGenericSend+0x370>)
   19880:	4798      	blx	r3
   19882:	6a3b      	ldr	r3, [r7, #32]
   19884:	0018      	movs	r0, r3
   19886:	4b96      	ldr	r3, [pc, #600]	; (19ae0 <xQueueGenericSend+0x364>)
   19888:	4798      	blx	r3
   1988a:	0003      	movs	r3, r0
   1988c:	001a      	movs	r2, r3
   1988e:	4b95      	ldr	r3, [pc, #596]	; (19ae4 <xQueueGenericSend+0x368>)
   19890:	5c9c      	ldrb	r4, [r3, r2]
   19892:	6a3b      	ldr	r3, [r7, #32]
   19894:	0018      	movs	r0, r3
   19896:	4b94      	ldr	r3, [pc, #592]	; (19ae8 <xQueueGenericSend+0x36c>)
   19898:	4798      	blx	r3
   1989a:	0003      	movs	r3, r0
   1989c:	b2dd      	uxtb	r5, r3
   1989e:	6a3b      	ldr	r3, [r7, #32]
   198a0:	0018      	movs	r0, r3
   198a2:	4b8f      	ldr	r3, [pc, #572]	; (19ae0 <xQueueGenericSend+0x364>)
   198a4:	4798      	blx	r3
   198a6:	0003      	movs	r3, r0
   198a8:	001a      	movs	r2, r3
   198aa:	4b8e      	ldr	r3, [pc, #568]	; (19ae4 <xQueueGenericSend+0x368>)
   198ac:	5c9b      	ldrb	r3, [r3, r2]
   198ae:	2b02      	cmp	r3, #2
   198b0:	d005      	beq.n	198be <xQueueGenericSend+0x142>
   198b2:	6a3b      	ldr	r3, [r7, #32]
   198b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   198b6:	b2db      	uxtb	r3, r3
   198b8:	3301      	adds	r3, #1
   198ba:	b2db      	uxtb	r3, r3
   198bc:	e000      	b.n	198c0 <xQueueGenericSend+0x144>
   198be:	2300      	movs	r3, #0
   198c0:	001a      	movs	r2, r3
   198c2:	0029      	movs	r1, r5
   198c4:	0020      	movs	r0, r4
   198c6:	4b8a      	ldr	r3, [pc, #552]	; (19af0 <xQueueGenericSend+0x374>)
   198c8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   198ca:	683a      	ldr	r2, [r7, #0]
   198cc:	68b9      	ldr	r1, [r7, #8]
   198ce:	6a3b      	ldr	r3, [r7, #32]
   198d0:	0018      	movs	r0, r3
   198d2:	4b88      	ldr	r3, [pc, #544]	; (19af4 <xQueueGenericSend+0x378>)
   198d4:	4798      	blx	r3
   198d6:	0003      	movs	r3, r0
   198d8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   198da:	6a3b      	ldr	r3, [r7, #32]
   198dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   198de:	2b00      	cmp	r3, #0
   198e0:	d00a      	beq.n	198f8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   198e2:	683a      	ldr	r2, [r7, #0]
   198e4:	6a3b      	ldr	r3, [r7, #32]
   198e6:	0011      	movs	r1, r2
   198e8:	0018      	movs	r0, r3
   198ea:	4b83      	ldr	r3, [pc, #524]	; (19af8 <xQueueGenericSend+0x37c>)
   198ec:	4798      	blx	r3
   198ee:	1e03      	subs	r3, r0, #0
   198f0:	d015      	beq.n	1991e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   198f2:	4b82      	ldr	r3, [pc, #520]	; (19afc <xQueueGenericSend+0x380>)
   198f4:	4798      	blx	r3
   198f6:	e012      	b.n	1991e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   198f8:	6a3b      	ldr	r3, [r7, #32]
   198fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   198fc:	2b00      	cmp	r3, #0
   198fe:	d009      	beq.n	19914 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19900:	6a3b      	ldr	r3, [r7, #32]
   19902:	3324      	adds	r3, #36	; 0x24
   19904:	0018      	movs	r0, r3
   19906:	4b7e      	ldr	r3, [pc, #504]	; (19b00 <xQueueGenericSend+0x384>)
   19908:	4798      	blx	r3
   1990a:	1e03      	subs	r3, r0, #0
   1990c:	d007      	beq.n	1991e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1990e:	4b7b      	ldr	r3, [pc, #492]	; (19afc <xQueueGenericSend+0x380>)
   19910:	4798      	blx	r3
   19912:	e004      	b.n	1991e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   19914:	69fb      	ldr	r3, [r7, #28]
   19916:	2b00      	cmp	r3, #0
   19918:	d001      	beq.n	1991e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1991a:	4b78      	ldr	r3, [pc, #480]	; (19afc <xQueueGenericSend+0x380>)
   1991c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1991e:	4b79      	ldr	r3, [pc, #484]	; (19b04 <xQueueGenericSend+0x388>)
   19920:	4798      	blx	r3
				return pdPASS;
   19922:	2301      	movs	r3, #1
   19924:	e142      	b.n	19bac <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19926:	687b      	ldr	r3, [r7, #4]
   19928:	2b00      	cmp	r3, #0
   1992a:	d140      	bne.n	199ae <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1992c:	4b75      	ldr	r3, [pc, #468]	; (19b04 <xQueueGenericSend+0x388>)
   1992e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   19930:	4b67      	ldr	r3, [pc, #412]	; (19ad0 <xQueueGenericSend+0x354>)
   19932:	4798      	blx	r3
   19934:	0003      	movs	r3, r0
   19936:	0018      	movs	r0, r3
   19938:	4b66      	ldr	r3, [pc, #408]	; (19ad4 <xQueueGenericSend+0x358>)
   1993a:	4798      	blx	r3
   1993c:	0003      	movs	r3, r0
   1993e:	001a      	movs	r2, r3
   19940:	4b65      	ldr	r3, [pc, #404]	; (19ad8 <xQueueGenericSend+0x35c>)
   19942:	881b      	ldrh	r3, [r3, #0]
   19944:	4013      	ands	r3, r2
   19946:	b29b      	uxth	r3, r3
   19948:	2b00      	cmp	r3, #0
   1994a:	d02e      	beq.n	199aa <xQueueGenericSend+0x22e>
   1994c:	6a3b      	ldr	r3, [r7, #32]
   1994e:	0018      	movs	r0, r3
   19950:	4b62      	ldr	r3, [pc, #392]	; (19adc <xQueueGenericSend+0x360>)
   19952:	4798      	blx	r3
   19954:	0003      	movs	r3, r0
   19956:	001a      	movs	r2, r3
   19958:	4b5f      	ldr	r3, [pc, #380]	; (19ad8 <xQueueGenericSend+0x35c>)
   1995a:	881b      	ldrh	r3, [r3, #0]
   1995c:	4013      	ands	r3, r2
   1995e:	b29b      	uxth	r3, r3
   19960:	2b00      	cmp	r3, #0
   19962:	d022      	beq.n	199aa <xQueueGenericSend+0x22e>
   19964:	683b      	ldr	r3, [r7, #0]
   19966:	2b00      	cmp	r3, #0
   19968:	d10b      	bne.n	19982 <xQueueGenericSend+0x206>
   1996a:	6a3b      	ldr	r3, [r7, #32]
   1996c:	0018      	movs	r0, r3
   1996e:	4b5c      	ldr	r3, [pc, #368]	; (19ae0 <xQueueGenericSend+0x364>)
   19970:	4798      	blx	r3
   19972:	0003      	movs	r3, r0
   19974:	001a      	movs	r2, r3
   19976:	4b5b      	ldr	r3, [pc, #364]	; (19ae4 <xQueueGenericSend+0x368>)
   19978:	5c9b      	ldrb	r3, [r3, r2]
   1997a:	3348      	adds	r3, #72	; 0x48
   1997c:	b2db      	uxtb	r3, r3
   1997e:	001d      	movs	r5, r3
   19980:	e000      	b.n	19984 <xQueueGenericSend+0x208>
   19982:	254d      	movs	r5, #77	; 0x4d
   19984:	6a3b      	ldr	r3, [r7, #32]
   19986:	0018      	movs	r0, r3
   19988:	4b55      	ldr	r3, [pc, #340]	; (19ae0 <xQueueGenericSend+0x364>)
   1998a:	4798      	blx	r3
   1998c:	0003      	movs	r3, r0
   1998e:	001a      	movs	r2, r3
   19990:	4b54      	ldr	r3, [pc, #336]	; (19ae4 <xQueueGenericSend+0x368>)
   19992:	5c9c      	ldrb	r4, [r3, r2]
   19994:	6a3b      	ldr	r3, [r7, #32]
   19996:	0018      	movs	r0, r3
   19998:	4b53      	ldr	r3, [pc, #332]	; (19ae8 <xQueueGenericSend+0x36c>)
   1999a:	4798      	blx	r3
   1999c:	0003      	movs	r3, r0
   1999e:	b2db      	uxtb	r3, r3
   199a0:	001a      	movs	r2, r3
   199a2:	0021      	movs	r1, r4
   199a4:	0028      	movs	r0, r5
   199a6:	4b51      	ldr	r3, [pc, #324]	; (19aec <xQueueGenericSend+0x370>)
   199a8:	4798      	blx	r3
					return errQUEUE_FULL;
   199aa:	2300      	movs	r3, #0
   199ac:	e0fe      	b.n	19bac <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   199ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   199b0:	2b00      	cmp	r3, #0
   199b2:	d106      	bne.n	199c2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   199b4:	2314      	movs	r3, #20
   199b6:	18fb      	adds	r3, r7, r3
   199b8:	0018      	movs	r0, r3
   199ba:	4b53      	ldr	r3, [pc, #332]	; (19b08 <xQueueGenericSend+0x38c>)
   199bc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   199be:	2301      	movs	r3, #1
   199c0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   199c2:	4b50      	ldr	r3, [pc, #320]	; (19b04 <xQueueGenericSend+0x388>)
   199c4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   199c6:	4b51      	ldr	r3, [pc, #324]	; (19b0c <xQueueGenericSend+0x390>)
   199c8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   199ca:	4b40      	ldr	r3, [pc, #256]	; (19acc <xQueueGenericSend+0x350>)
   199cc:	4798      	blx	r3
   199ce:	6a3b      	ldr	r3, [r7, #32]
   199d0:	2244      	movs	r2, #68	; 0x44
   199d2:	5c9b      	ldrb	r3, [r3, r2]
   199d4:	b25b      	sxtb	r3, r3
   199d6:	3301      	adds	r3, #1
   199d8:	d103      	bne.n	199e2 <xQueueGenericSend+0x266>
   199da:	6a3b      	ldr	r3, [r7, #32]
   199dc:	2244      	movs	r2, #68	; 0x44
   199de:	2100      	movs	r1, #0
   199e0:	5499      	strb	r1, [r3, r2]
   199e2:	6a3b      	ldr	r3, [r7, #32]
   199e4:	2245      	movs	r2, #69	; 0x45
   199e6:	5c9b      	ldrb	r3, [r3, r2]
   199e8:	b25b      	sxtb	r3, r3
   199ea:	3301      	adds	r3, #1
   199ec:	d103      	bne.n	199f6 <xQueueGenericSend+0x27a>
   199ee:	6a3b      	ldr	r3, [r7, #32]
   199f0:	2245      	movs	r2, #69	; 0x45
   199f2:	2100      	movs	r1, #0
   199f4:	5499      	strb	r1, [r3, r2]
   199f6:	4b43      	ldr	r3, [pc, #268]	; (19b04 <xQueueGenericSend+0x388>)
   199f8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   199fa:	1d3a      	adds	r2, r7, #4
   199fc:	2314      	movs	r3, #20
   199fe:	18fb      	adds	r3, r7, r3
   19a00:	0011      	movs	r1, r2
   19a02:	0018      	movs	r0, r3
   19a04:	4b42      	ldr	r3, [pc, #264]	; (19b10 <xQueueGenericSend+0x394>)
   19a06:	4798      	blx	r3
   19a08:	1e03      	subs	r3, r0, #0
   19a0a:	d000      	beq.n	19a0e <xQueueGenericSend+0x292>
   19a0c:	e08a      	b.n	19b24 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   19a0e:	6a3b      	ldr	r3, [r7, #32]
   19a10:	0018      	movs	r0, r3
   19a12:	4b40      	ldr	r3, [pc, #256]	; (19b14 <xQueueGenericSend+0x398>)
   19a14:	4798      	blx	r3
   19a16:	1e03      	subs	r3, r0, #0
   19a18:	d04f      	beq.n	19aba <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   19a1a:	4b2d      	ldr	r3, [pc, #180]	; (19ad0 <xQueueGenericSend+0x354>)
   19a1c:	4798      	blx	r3
   19a1e:	0003      	movs	r3, r0
   19a20:	0018      	movs	r0, r3
   19a22:	4b2c      	ldr	r3, [pc, #176]	; (19ad4 <xQueueGenericSend+0x358>)
   19a24:	4798      	blx	r3
   19a26:	0003      	movs	r3, r0
   19a28:	001a      	movs	r2, r3
   19a2a:	4b2b      	ldr	r3, [pc, #172]	; (19ad8 <xQueueGenericSend+0x35c>)
   19a2c:	881b      	ldrh	r3, [r3, #0]
   19a2e:	4013      	ands	r3, r2
   19a30:	b29b      	uxth	r3, r3
   19a32:	2b00      	cmp	r3, #0
   19a34:	d02e      	beq.n	19a94 <xQueueGenericSend+0x318>
   19a36:	6a3b      	ldr	r3, [r7, #32]
   19a38:	0018      	movs	r0, r3
   19a3a:	4b28      	ldr	r3, [pc, #160]	; (19adc <xQueueGenericSend+0x360>)
   19a3c:	4798      	blx	r3
   19a3e:	0003      	movs	r3, r0
   19a40:	001a      	movs	r2, r3
   19a42:	4b25      	ldr	r3, [pc, #148]	; (19ad8 <xQueueGenericSend+0x35c>)
   19a44:	881b      	ldrh	r3, [r3, #0]
   19a46:	4013      	ands	r3, r2
   19a48:	b29b      	uxth	r3, r3
   19a4a:	2b00      	cmp	r3, #0
   19a4c:	d022      	beq.n	19a94 <xQueueGenericSend+0x318>
   19a4e:	683b      	ldr	r3, [r7, #0]
   19a50:	2b00      	cmp	r3, #0
   19a52:	d10b      	bne.n	19a6c <xQueueGenericSend+0x2f0>
   19a54:	6a3b      	ldr	r3, [r7, #32]
   19a56:	0018      	movs	r0, r3
   19a58:	4b21      	ldr	r3, [pc, #132]	; (19ae0 <xQueueGenericSend+0x364>)
   19a5a:	4798      	blx	r3
   19a5c:	0003      	movs	r3, r0
   19a5e:	001a      	movs	r2, r3
   19a60:	4b20      	ldr	r3, [pc, #128]	; (19ae4 <xQueueGenericSend+0x368>)
   19a62:	5c9b      	ldrb	r3, [r3, r2]
   19a64:	3370      	adds	r3, #112	; 0x70
   19a66:	b2db      	uxtb	r3, r3
   19a68:	001d      	movs	r5, r3
   19a6a:	e000      	b.n	19a6e <xQueueGenericSend+0x2f2>
   19a6c:	2575      	movs	r5, #117	; 0x75
   19a6e:	6a3b      	ldr	r3, [r7, #32]
   19a70:	0018      	movs	r0, r3
   19a72:	4b1b      	ldr	r3, [pc, #108]	; (19ae0 <xQueueGenericSend+0x364>)
   19a74:	4798      	blx	r3
   19a76:	0003      	movs	r3, r0
   19a78:	001a      	movs	r2, r3
   19a7a:	4b1a      	ldr	r3, [pc, #104]	; (19ae4 <xQueueGenericSend+0x368>)
   19a7c:	5c9c      	ldrb	r4, [r3, r2]
   19a7e:	6a3b      	ldr	r3, [r7, #32]
   19a80:	0018      	movs	r0, r3
   19a82:	4b19      	ldr	r3, [pc, #100]	; (19ae8 <xQueueGenericSend+0x36c>)
   19a84:	4798      	blx	r3
   19a86:	0003      	movs	r3, r0
   19a88:	b2db      	uxtb	r3, r3
   19a8a:	001a      	movs	r2, r3
   19a8c:	0021      	movs	r1, r4
   19a8e:	0028      	movs	r0, r5
   19a90:	4b16      	ldr	r3, [pc, #88]	; (19aec <xQueueGenericSend+0x370>)
   19a92:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   19a94:	6a3b      	ldr	r3, [r7, #32]
   19a96:	3310      	adds	r3, #16
   19a98:	687a      	ldr	r2, [r7, #4]
   19a9a:	0011      	movs	r1, r2
   19a9c:	0018      	movs	r0, r3
   19a9e:	4b1e      	ldr	r3, [pc, #120]	; (19b18 <xQueueGenericSend+0x39c>)
   19aa0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19aa2:	6a3b      	ldr	r3, [r7, #32]
   19aa4:	0018      	movs	r0, r3
   19aa6:	4b1d      	ldr	r3, [pc, #116]	; (19b1c <xQueueGenericSend+0x3a0>)
   19aa8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   19aaa:	4b1d      	ldr	r3, [pc, #116]	; (19b20 <xQueueGenericSend+0x3a4>)
   19aac:	4798      	blx	r3
   19aae:	1e03      	subs	r3, r0, #0
   19ab0:	d000      	beq.n	19ab4 <xQueueGenericSend+0x338>
   19ab2:	e69d      	b.n	197f0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19ab4:	4b11      	ldr	r3, [pc, #68]	; (19afc <xQueueGenericSend+0x380>)
   19ab6:	4798      	blx	r3
   19ab8:	e69a      	b.n	197f0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   19aba:	6a3b      	ldr	r3, [r7, #32]
   19abc:	0018      	movs	r0, r3
   19abe:	4b17      	ldr	r3, [pc, #92]	; (19b1c <xQueueGenericSend+0x3a0>)
   19ac0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19ac2:	4b17      	ldr	r3, [pc, #92]	; (19b20 <xQueueGenericSend+0x3a4>)
   19ac4:	4798      	blx	r3
   19ac6:	e693      	b.n	197f0 <xQueueGenericSend+0x74>
   19ac8:	0001bf09 	.word	0x0001bf09
   19acc:	000191e9 	.word	0x000191e9
   19ad0:	0001747d 	.word	0x0001747d
   19ad4:	000171e1 	.word	0x000171e1
   19ad8:	20000100 	.word	0x20000100
   19adc:	000172a1 	.word	0x000172a1
   19ae0:	000171a1 	.word	0x000171a1
   19ae4:	200000f4 	.word	0x200000f4
   19ae8:	00017281 	.word	0x00017281
   19aec:	00017bd9 	.word	0x00017bd9
   19af0:	00018235 	.word	0x00018235
   19af4:	0001a9b5 	.word	0x0001a9b5
   19af8:	0001acb9 	.word	0x0001acb9
   19afc:	000191d1 	.word	0x000191d1
   19b00:	0001ba79 	.word	0x0001ba79
   19b04:	0001920d 	.word	0x0001920d
   19b08:	0001bbb9 	.word	0x0001bbb9
   19b0c:	0001b4a1 	.word	0x0001b4a1
   19b10:	0001bbe1 	.word	0x0001bbe1
   19b14:	0001ac09 	.word	0x0001ac09
   19b18:	0001b955 	.word	0x0001b955
   19b1c:	0001aae5 	.word	0x0001aae5
   19b20:	0001b4b9 	.word	0x0001b4b9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19b24:	6a3b      	ldr	r3, [r7, #32]
   19b26:	0018      	movs	r0, r3
   19b28:	4b22      	ldr	r3, [pc, #136]	; (19bb4 <xQueueGenericSend+0x438>)
   19b2a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19b2c:	4b22      	ldr	r3, [pc, #136]	; (19bb8 <xQueueGenericSend+0x43c>)
   19b2e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19b30:	4b22      	ldr	r3, [pc, #136]	; (19bbc <xQueueGenericSend+0x440>)
   19b32:	4798      	blx	r3
   19b34:	0003      	movs	r3, r0
   19b36:	0018      	movs	r0, r3
   19b38:	4b21      	ldr	r3, [pc, #132]	; (19bc0 <xQueueGenericSend+0x444>)
   19b3a:	4798      	blx	r3
   19b3c:	0003      	movs	r3, r0
   19b3e:	001a      	movs	r2, r3
   19b40:	4b20      	ldr	r3, [pc, #128]	; (19bc4 <xQueueGenericSend+0x448>)
   19b42:	881b      	ldrh	r3, [r3, #0]
   19b44:	4013      	ands	r3, r2
   19b46:	b29b      	uxth	r3, r3
   19b48:	2b00      	cmp	r3, #0
   19b4a:	d02e      	beq.n	19baa <xQueueGenericSend+0x42e>
   19b4c:	6a3b      	ldr	r3, [r7, #32]
   19b4e:	0018      	movs	r0, r3
   19b50:	4b1d      	ldr	r3, [pc, #116]	; (19bc8 <xQueueGenericSend+0x44c>)
   19b52:	4798      	blx	r3
   19b54:	0003      	movs	r3, r0
   19b56:	001a      	movs	r2, r3
   19b58:	4b1a      	ldr	r3, [pc, #104]	; (19bc4 <xQueueGenericSend+0x448>)
   19b5a:	881b      	ldrh	r3, [r3, #0]
   19b5c:	4013      	ands	r3, r2
   19b5e:	b29b      	uxth	r3, r3
   19b60:	2b00      	cmp	r3, #0
   19b62:	d022      	beq.n	19baa <xQueueGenericSend+0x42e>
   19b64:	683b      	ldr	r3, [r7, #0]
   19b66:	2b00      	cmp	r3, #0
   19b68:	d10b      	bne.n	19b82 <xQueueGenericSend+0x406>
   19b6a:	6a3b      	ldr	r3, [r7, #32]
   19b6c:	0018      	movs	r0, r3
   19b6e:	4b17      	ldr	r3, [pc, #92]	; (19bcc <xQueueGenericSend+0x450>)
   19b70:	4798      	blx	r3
   19b72:	0003      	movs	r3, r0
   19b74:	001a      	movs	r2, r3
   19b76:	4b16      	ldr	r3, [pc, #88]	; (19bd0 <xQueueGenericSend+0x454>)
   19b78:	5c9b      	ldrb	r3, [r3, r2]
   19b7a:	3348      	adds	r3, #72	; 0x48
   19b7c:	b2db      	uxtb	r3, r3
   19b7e:	001d      	movs	r5, r3
   19b80:	e000      	b.n	19b84 <xQueueGenericSend+0x408>
   19b82:	254d      	movs	r5, #77	; 0x4d
   19b84:	6a3b      	ldr	r3, [r7, #32]
   19b86:	0018      	movs	r0, r3
   19b88:	4b10      	ldr	r3, [pc, #64]	; (19bcc <xQueueGenericSend+0x450>)
   19b8a:	4798      	blx	r3
   19b8c:	0003      	movs	r3, r0
   19b8e:	001a      	movs	r2, r3
   19b90:	4b0f      	ldr	r3, [pc, #60]	; (19bd0 <xQueueGenericSend+0x454>)
   19b92:	5c9c      	ldrb	r4, [r3, r2]
   19b94:	6a3b      	ldr	r3, [r7, #32]
   19b96:	0018      	movs	r0, r3
   19b98:	4b0e      	ldr	r3, [pc, #56]	; (19bd4 <xQueueGenericSend+0x458>)
   19b9a:	4798      	blx	r3
   19b9c:	0003      	movs	r3, r0
   19b9e:	b2db      	uxtb	r3, r3
   19ba0:	001a      	movs	r2, r3
   19ba2:	0021      	movs	r1, r4
   19ba4:	0028      	movs	r0, r5
   19ba6:	4b0c      	ldr	r3, [pc, #48]	; (19bd8 <xQueueGenericSend+0x45c>)
   19ba8:	4798      	blx	r3
			return errQUEUE_FULL;
   19baa:	2300      	movs	r3, #0
		}
	}
}
   19bac:	0018      	movs	r0, r3
   19bae:	46bd      	mov	sp, r7
   19bb0:	b00a      	add	sp, #40	; 0x28
   19bb2:	bdb0      	pop	{r4, r5, r7, pc}
   19bb4:	0001aae5 	.word	0x0001aae5
   19bb8:	0001b4b9 	.word	0x0001b4b9
   19bbc:	0001747d 	.word	0x0001747d
   19bc0:	000171e1 	.word	0x000171e1
   19bc4:	20000100 	.word	0x20000100
   19bc8:	000172a1 	.word	0x000172a1
   19bcc:	000171a1 	.word	0x000171a1
   19bd0:	200000f4 	.word	0x200000f4
   19bd4:	00017281 	.word	0x00017281
   19bd8:	00017bd9 	.word	0x00017bd9

00019bdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   19bdc:	b5b0      	push	{r4, r5, r7, lr}
   19bde:	b088      	sub	sp, #32
   19be0:	af00      	add	r7, sp, #0
   19be2:	60f8      	str	r0, [r7, #12]
   19be4:	60b9      	str	r1, [r7, #8]
   19be6:	607a      	str	r2, [r7, #4]
   19be8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19bea:	68fb      	ldr	r3, [r7, #12]
   19bec:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   19bee:	69bb      	ldr	r3, [r7, #24]
   19bf0:	2b00      	cmp	r3, #0
   19bf2:	d101      	bne.n	19bf8 <xQueueGenericSendFromISR+0x1c>
   19bf4:	b672      	cpsid	i
   19bf6:	e7fe      	b.n	19bf6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19bf8:	68bb      	ldr	r3, [r7, #8]
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	d103      	bne.n	19c06 <xQueueGenericSendFromISR+0x2a>
   19bfe:	69bb      	ldr	r3, [r7, #24]
   19c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19c02:	2b00      	cmp	r3, #0
   19c04:	d101      	bne.n	19c0a <xQueueGenericSendFromISR+0x2e>
   19c06:	2301      	movs	r3, #1
   19c08:	e000      	b.n	19c0c <xQueueGenericSendFromISR+0x30>
   19c0a:	2300      	movs	r3, #0
   19c0c:	2b00      	cmp	r3, #0
   19c0e:	d101      	bne.n	19c14 <xQueueGenericSendFromISR+0x38>
   19c10:	b672      	cpsid	i
   19c12:	e7fe      	b.n	19c12 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19c14:	683b      	ldr	r3, [r7, #0]
   19c16:	2b02      	cmp	r3, #2
   19c18:	d103      	bne.n	19c22 <xQueueGenericSendFromISR+0x46>
   19c1a:	69bb      	ldr	r3, [r7, #24]
   19c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19c1e:	2b01      	cmp	r3, #1
   19c20:	d101      	bne.n	19c26 <xQueueGenericSendFromISR+0x4a>
   19c22:	2301      	movs	r3, #1
   19c24:	e000      	b.n	19c28 <xQueueGenericSendFromISR+0x4c>
   19c26:	2300      	movs	r3, #0
   19c28:	2b00      	cmp	r3, #0
   19c2a:	d101      	bne.n	19c30 <xQueueGenericSendFromISR+0x54>
   19c2c:	b672      	cpsid	i
   19c2e:	e7fe      	b.n	19c2e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19c30:	4b68      	ldr	r3, [pc, #416]	; (19dd4 <xQueueGenericSendFromISR+0x1f8>)
   19c32:	4798      	blx	r3
   19c34:	0003      	movs	r3, r0
   19c36:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19c38:	69bb      	ldr	r3, [r7, #24]
   19c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19c3c:	69bb      	ldr	r3, [r7, #24]
   19c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19c40:	429a      	cmp	r2, r3
   19c42:	d303      	bcc.n	19c4c <xQueueGenericSendFromISR+0x70>
   19c44:	683b      	ldr	r3, [r7, #0]
   19c46:	2b02      	cmp	r3, #2
   19c48:	d000      	beq.n	19c4c <xQueueGenericSendFromISR+0x70>
   19c4a:	e088      	b.n	19d5e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19c4c:	2313      	movs	r3, #19
   19c4e:	18fb      	adds	r3, r7, r3
   19c50:	69ba      	ldr	r2, [r7, #24]
   19c52:	2145      	movs	r1, #69	; 0x45
   19c54:	5c52      	ldrb	r2, [r2, r1]
   19c56:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19c58:	69bb      	ldr	r3, [r7, #24]
   19c5a:	0018      	movs	r0, r3
   19c5c:	4b5e      	ldr	r3, [pc, #376]	; (19dd8 <xQueueGenericSendFromISR+0x1fc>)
   19c5e:	4798      	blx	r3
   19c60:	0003      	movs	r3, r0
   19c62:	001a      	movs	r2, r3
   19c64:	4b5d      	ldr	r3, [pc, #372]	; (19ddc <xQueueGenericSendFromISR+0x200>)
   19c66:	881b      	ldrh	r3, [r3, #0]
   19c68:	4013      	ands	r3, r2
   19c6a:	b29b      	uxth	r3, r3
   19c6c:	2b00      	cmp	r3, #0
   19c6e:	d022      	beq.n	19cb6 <xQueueGenericSendFromISR+0xda>
   19c70:	683b      	ldr	r3, [r7, #0]
   19c72:	2b00      	cmp	r3, #0
   19c74:	d10b      	bne.n	19c8e <xQueueGenericSendFromISR+0xb2>
   19c76:	69bb      	ldr	r3, [r7, #24]
   19c78:	0018      	movs	r0, r3
   19c7a:	4b59      	ldr	r3, [pc, #356]	; (19de0 <xQueueGenericSendFromISR+0x204>)
   19c7c:	4798      	blx	r3
   19c7e:	0003      	movs	r3, r0
   19c80:	001a      	movs	r2, r3
   19c82:	4b58      	ldr	r3, [pc, #352]	; (19de4 <xQueueGenericSendFromISR+0x208>)
   19c84:	5c9b      	ldrb	r3, [r3, r2]
   19c86:	3330      	adds	r3, #48	; 0x30
   19c88:	b2db      	uxtb	r3, r3
   19c8a:	001d      	movs	r5, r3
   19c8c:	e000      	b.n	19c90 <xQueueGenericSendFromISR+0xb4>
   19c8e:	2535      	movs	r5, #53	; 0x35
   19c90:	69bb      	ldr	r3, [r7, #24]
   19c92:	0018      	movs	r0, r3
   19c94:	4b52      	ldr	r3, [pc, #328]	; (19de0 <xQueueGenericSendFromISR+0x204>)
   19c96:	4798      	blx	r3
   19c98:	0003      	movs	r3, r0
   19c9a:	001a      	movs	r2, r3
   19c9c:	4b51      	ldr	r3, [pc, #324]	; (19de4 <xQueueGenericSendFromISR+0x208>)
   19c9e:	5c9c      	ldrb	r4, [r3, r2]
   19ca0:	69bb      	ldr	r3, [r7, #24]
   19ca2:	0018      	movs	r0, r3
   19ca4:	4b50      	ldr	r3, [pc, #320]	; (19de8 <xQueueGenericSendFromISR+0x20c>)
   19ca6:	4798      	blx	r3
   19ca8:	0003      	movs	r3, r0
   19caa:	b2db      	uxtb	r3, r3
   19cac:	001a      	movs	r2, r3
   19cae:	0021      	movs	r1, r4
   19cb0:	0028      	movs	r0, r5
   19cb2:	4b4e      	ldr	r3, [pc, #312]	; (19dec <xQueueGenericSendFromISR+0x210>)
   19cb4:	4798      	blx	r3
   19cb6:	69bb      	ldr	r3, [r7, #24]
   19cb8:	0018      	movs	r0, r3
   19cba:	4b49      	ldr	r3, [pc, #292]	; (19de0 <xQueueGenericSendFromISR+0x204>)
   19cbc:	4798      	blx	r3
   19cbe:	0003      	movs	r3, r0
   19cc0:	001a      	movs	r2, r3
   19cc2:	4b48      	ldr	r3, [pc, #288]	; (19de4 <xQueueGenericSendFromISR+0x208>)
   19cc4:	5c9c      	ldrb	r4, [r3, r2]
   19cc6:	69bb      	ldr	r3, [r7, #24]
   19cc8:	0018      	movs	r0, r3
   19cca:	4b47      	ldr	r3, [pc, #284]	; (19de8 <xQueueGenericSendFromISR+0x20c>)
   19ccc:	4798      	blx	r3
   19cce:	0003      	movs	r3, r0
   19cd0:	b2d9      	uxtb	r1, r3
   19cd2:	69bb      	ldr	r3, [r7, #24]
   19cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19cd6:	b2db      	uxtb	r3, r3
   19cd8:	3301      	adds	r3, #1
   19cda:	b2db      	uxtb	r3, r3
   19cdc:	001a      	movs	r2, r3
   19cde:	0020      	movs	r0, r4
   19ce0:	4b43      	ldr	r3, [pc, #268]	; (19df0 <xQueueGenericSendFromISR+0x214>)
   19ce2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19ce4:	683a      	ldr	r2, [r7, #0]
   19ce6:	68b9      	ldr	r1, [r7, #8]
   19ce8:	69bb      	ldr	r3, [r7, #24]
   19cea:	0018      	movs	r0, r3
   19cec:	4b41      	ldr	r3, [pc, #260]	; (19df4 <xQueueGenericSendFromISR+0x218>)
   19cee:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19cf0:	2313      	movs	r3, #19
   19cf2:	18fb      	adds	r3, r7, r3
   19cf4:	781b      	ldrb	r3, [r3, #0]
   19cf6:	b25b      	sxtb	r3, r3
   19cf8:	3301      	adds	r3, #1
   19cfa:	d124      	bne.n	19d46 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19cfc:	69bb      	ldr	r3, [r7, #24]
   19cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19d00:	2b00      	cmp	r3, #0
   19d02:	d00e      	beq.n	19d22 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19d04:	683a      	ldr	r2, [r7, #0]
   19d06:	69bb      	ldr	r3, [r7, #24]
   19d08:	0011      	movs	r1, r2
   19d0a:	0018      	movs	r0, r3
   19d0c:	4b3a      	ldr	r3, [pc, #232]	; (19df8 <xQueueGenericSendFromISR+0x21c>)
   19d0e:	4798      	blx	r3
   19d10:	1e03      	subs	r3, r0, #0
   19d12:	d021      	beq.n	19d58 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19d14:	687b      	ldr	r3, [r7, #4]
   19d16:	2b00      	cmp	r3, #0
   19d18:	d01e      	beq.n	19d58 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19d1a:	687b      	ldr	r3, [r7, #4]
   19d1c:	2201      	movs	r2, #1
   19d1e:	601a      	str	r2, [r3, #0]
   19d20:	e01a      	b.n	19d58 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19d22:	69bb      	ldr	r3, [r7, #24]
   19d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19d26:	2b00      	cmp	r3, #0
   19d28:	d016      	beq.n	19d58 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19d2a:	69bb      	ldr	r3, [r7, #24]
   19d2c:	3324      	adds	r3, #36	; 0x24
   19d2e:	0018      	movs	r0, r3
   19d30:	4b32      	ldr	r3, [pc, #200]	; (19dfc <xQueueGenericSendFromISR+0x220>)
   19d32:	4798      	blx	r3
   19d34:	1e03      	subs	r3, r0, #0
   19d36:	d00f      	beq.n	19d58 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19d38:	687b      	ldr	r3, [r7, #4]
   19d3a:	2b00      	cmp	r3, #0
   19d3c:	d00c      	beq.n	19d58 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19d3e:	687b      	ldr	r3, [r7, #4]
   19d40:	2201      	movs	r2, #1
   19d42:	601a      	str	r2, [r3, #0]
   19d44:	e008      	b.n	19d58 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   19d46:	2313      	movs	r3, #19
   19d48:	18fb      	adds	r3, r7, r3
   19d4a:	781b      	ldrb	r3, [r3, #0]
   19d4c:	3301      	adds	r3, #1
   19d4e:	b2db      	uxtb	r3, r3
   19d50:	b259      	sxtb	r1, r3
   19d52:	69bb      	ldr	r3, [r7, #24]
   19d54:	2245      	movs	r2, #69	; 0x45
   19d56:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19d58:	2301      	movs	r3, #1
   19d5a:	61fb      	str	r3, [r7, #28]
		{
   19d5c:	e030      	b.n	19dc0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19d5e:	69bb      	ldr	r3, [r7, #24]
   19d60:	0018      	movs	r0, r3
   19d62:	4b1d      	ldr	r3, [pc, #116]	; (19dd8 <xQueueGenericSendFromISR+0x1fc>)
   19d64:	4798      	blx	r3
   19d66:	0003      	movs	r3, r0
   19d68:	001a      	movs	r2, r3
   19d6a:	4b1c      	ldr	r3, [pc, #112]	; (19ddc <xQueueGenericSendFromISR+0x200>)
   19d6c:	881b      	ldrh	r3, [r3, #0]
   19d6e:	4013      	ands	r3, r2
   19d70:	b29b      	uxth	r3, r3
   19d72:	2b00      	cmp	r3, #0
   19d74:	d022      	beq.n	19dbc <xQueueGenericSendFromISR+0x1e0>
   19d76:	683b      	ldr	r3, [r7, #0]
   19d78:	2b00      	cmp	r3, #0
   19d7a:	d10b      	bne.n	19d94 <xQueueGenericSendFromISR+0x1b8>
   19d7c:	69bb      	ldr	r3, [r7, #24]
   19d7e:	0018      	movs	r0, r3
   19d80:	4b17      	ldr	r3, [pc, #92]	; (19de0 <xQueueGenericSendFromISR+0x204>)
   19d82:	4798      	blx	r3
   19d84:	0003      	movs	r3, r0
   19d86:	001a      	movs	r2, r3
   19d88:	4b16      	ldr	r3, [pc, #88]	; (19de4 <xQueueGenericSendFromISR+0x208>)
   19d8a:	5c9b      	ldrb	r3, [r3, r2]
   19d8c:	3358      	adds	r3, #88	; 0x58
   19d8e:	b2db      	uxtb	r3, r3
   19d90:	001d      	movs	r5, r3
   19d92:	e000      	b.n	19d96 <xQueueGenericSendFromISR+0x1ba>
   19d94:	255d      	movs	r5, #93	; 0x5d
   19d96:	69bb      	ldr	r3, [r7, #24]
   19d98:	0018      	movs	r0, r3
   19d9a:	4b11      	ldr	r3, [pc, #68]	; (19de0 <xQueueGenericSendFromISR+0x204>)
   19d9c:	4798      	blx	r3
   19d9e:	0003      	movs	r3, r0
   19da0:	001a      	movs	r2, r3
   19da2:	4b10      	ldr	r3, [pc, #64]	; (19de4 <xQueueGenericSendFromISR+0x208>)
   19da4:	5c9c      	ldrb	r4, [r3, r2]
   19da6:	69bb      	ldr	r3, [r7, #24]
   19da8:	0018      	movs	r0, r3
   19daa:	4b0f      	ldr	r3, [pc, #60]	; (19de8 <xQueueGenericSendFromISR+0x20c>)
   19dac:	4798      	blx	r3
   19dae:	0003      	movs	r3, r0
   19db0:	b2db      	uxtb	r3, r3
   19db2:	001a      	movs	r2, r3
   19db4:	0021      	movs	r1, r4
   19db6:	0028      	movs	r0, r5
   19db8:	4b0c      	ldr	r3, [pc, #48]	; (19dec <xQueueGenericSendFromISR+0x210>)
   19dba:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19dbc:	2300      	movs	r3, #0
   19dbe:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19dc0:	697b      	ldr	r3, [r7, #20]
   19dc2:	0018      	movs	r0, r3
   19dc4:	4b0e      	ldr	r3, [pc, #56]	; (19e00 <xQueueGenericSendFromISR+0x224>)
   19dc6:	4798      	blx	r3

	return xReturn;
   19dc8:	69fb      	ldr	r3, [r7, #28]
}
   19dca:	0018      	movs	r0, r3
   19dcc:	46bd      	mov	sp, r7
   19dce:	b008      	add	sp, #32
   19dd0:	bdb0      	pop	{r4, r5, r7, pc}
   19dd2:	46c0      	nop			; (mov r8, r8)
   19dd4:	0001923d 	.word	0x0001923d
   19dd8:	000172a1 	.word	0x000172a1
   19ddc:	20000100 	.word	0x20000100
   19de0:	000171a1 	.word	0x000171a1
   19de4:	200000f4 	.word	0x200000f4
   19de8:	00017281 	.word	0x00017281
   19dec:	00017bd9 	.word	0x00017bd9
   19df0:	00018235 	.word	0x00018235
   19df4:	0001a9b5 	.word	0x0001a9b5
   19df8:	0001acb9 	.word	0x0001acb9
   19dfc:	0001ba79 	.word	0x0001ba79
   19e00:	00019249 	.word	0x00019249

00019e04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   19e04:	b580      	push	{r7, lr}
   19e06:	b082      	sub	sp, #8
   19e08:	af00      	add	r7, sp, #0
   19e0a:	6078      	str	r0, [r7, #4]
   19e0c:	6039      	str	r1, [r7, #0]
   19e0e:	6839      	ldr	r1, [r7, #0]
   19e10:	687b      	ldr	r3, [r7, #4]
   19e12:	2200      	movs	r2, #0
   19e14:	0018      	movs	r0, r3
   19e16:	4b03      	ldr	r3, [pc, #12]	; (19e24 <xQueueGiveFromISR+0x20>)
   19e18:	4798      	blx	r3
   19e1a:	0003      	movs	r3, r0
   19e1c:	0018      	movs	r0, r3
   19e1e:	46bd      	mov	sp, r7
   19e20:	b002      	add	sp, #8
   19e22:	bd80      	pop	{r7, pc}
   19e24:	00019e29 	.word	0x00019e29

00019e28 <MyWrapper>:
{
   19e28:	b5b0      	push	{r4, r5, r7, lr}
   19e2a:	b08a      	sub	sp, #40	; 0x28
   19e2c:	af00      	add	r7, sp, #0
   19e2e:	60f8      	str	r0, [r7, #12]
   19e30:	60b9      	str	r1, [r7, #8]
   19e32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19e34:	68fb      	ldr	r3, [r7, #12]
   19e36:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   19e38:	6a3b      	ldr	r3, [r7, #32]
   19e3a:	2b00      	cmp	r3, #0
   19e3c:	d101      	bne.n	19e42 <MyWrapper+0x1a>
   19e3e:	b672      	cpsid	i
   19e40:	e7fe      	b.n	19e40 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   19e42:	6a3b      	ldr	r3, [r7, #32]
   19e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19e46:	2b00      	cmp	r3, #0
   19e48:	d001      	beq.n	19e4e <MyWrapper+0x26>
   19e4a:	b672      	cpsid	i
   19e4c:	e7fe      	b.n	19e4c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   19e4e:	6a3b      	ldr	r3, [r7, #32]
   19e50:	681b      	ldr	r3, [r3, #0]
   19e52:	2b00      	cmp	r3, #0
   19e54:	d103      	bne.n	19e5e <MyWrapper+0x36>
   19e56:	6a3b      	ldr	r3, [r7, #32]
   19e58:	685b      	ldr	r3, [r3, #4]
   19e5a:	2b00      	cmp	r3, #0
   19e5c:	d101      	bne.n	19e62 <MyWrapper+0x3a>
   19e5e:	2301      	movs	r3, #1
   19e60:	e000      	b.n	19e64 <MyWrapper+0x3c>
   19e62:	2300      	movs	r3, #0
   19e64:	2b00      	cmp	r3, #0
   19e66:	d101      	bne.n	19e6c <MyWrapper+0x44>
   19e68:	b672      	cpsid	i
   19e6a:	e7fe      	b.n	19e6a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19e6c:	4b66      	ldr	r3, [pc, #408]	; (1a008 <MyWrapper+0x1e0>)
   19e6e:	4798      	blx	r3
   19e70:	0003      	movs	r3, r0
   19e72:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   19e74:	6a3b      	ldr	r3, [r7, #32]
   19e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19e78:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   19e7a:	6a3b      	ldr	r3, [r7, #32]
   19e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   19e7e:	69bb      	ldr	r3, [r7, #24]
   19e80:	429a      	cmp	r2, r3
   19e82:	d800      	bhi.n	19e86 <MyWrapper+0x5e>
   19e84:	e085      	b.n	19f92 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19e86:	2317      	movs	r3, #23
   19e88:	18fb      	adds	r3, r7, r3
   19e8a:	6a3a      	ldr	r2, [r7, #32]
   19e8c:	2145      	movs	r1, #69	; 0x45
   19e8e:	5c52      	ldrb	r2, [r2, r1]
   19e90:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19e92:	6a3b      	ldr	r3, [r7, #32]
   19e94:	0018      	movs	r0, r3
   19e96:	4b5d      	ldr	r3, [pc, #372]	; (1a00c <MyWrapper+0x1e4>)
   19e98:	4798      	blx	r3
   19e9a:	0003      	movs	r3, r0
   19e9c:	001a      	movs	r2, r3
   19e9e:	4b5c      	ldr	r3, [pc, #368]	; (1a010 <MyWrapper+0x1e8>)
   19ea0:	881b      	ldrh	r3, [r3, #0]
   19ea2:	4013      	ands	r3, r2
   19ea4:	b29b      	uxth	r3, r3
   19ea6:	2b00      	cmp	r3, #0
   19ea8:	d022      	beq.n	19ef0 <MyWrapper+0xc8>
   19eaa:	687b      	ldr	r3, [r7, #4]
   19eac:	2b00      	cmp	r3, #0
   19eae:	d10b      	bne.n	19ec8 <MyWrapper+0xa0>
   19eb0:	6a3b      	ldr	r3, [r7, #32]
   19eb2:	0018      	movs	r0, r3
   19eb4:	4b57      	ldr	r3, [pc, #348]	; (1a014 <MyWrapper+0x1ec>)
   19eb6:	4798      	blx	r3
   19eb8:	0003      	movs	r3, r0
   19eba:	001a      	movs	r2, r3
   19ebc:	4b56      	ldr	r3, [pc, #344]	; (1a018 <MyWrapper+0x1f0>)
   19ebe:	5c9b      	ldrb	r3, [r3, r2]
   19ec0:	3330      	adds	r3, #48	; 0x30
   19ec2:	b2db      	uxtb	r3, r3
   19ec4:	001d      	movs	r5, r3
   19ec6:	e000      	b.n	19eca <MyWrapper+0xa2>
   19ec8:	2535      	movs	r5, #53	; 0x35
   19eca:	6a3b      	ldr	r3, [r7, #32]
   19ecc:	0018      	movs	r0, r3
   19ece:	4b51      	ldr	r3, [pc, #324]	; (1a014 <MyWrapper+0x1ec>)
   19ed0:	4798      	blx	r3
   19ed2:	0003      	movs	r3, r0
   19ed4:	001a      	movs	r2, r3
   19ed6:	4b50      	ldr	r3, [pc, #320]	; (1a018 <MyWrapper+0x1f0>)
   19ed8:	5c9c      	ldrb	r4, [r3, r2]
   19eda:	6a3b      	ldr	r3, [r7, #32]
   19edc:	0018      	movs	r0, r3
   19ede:	4b4f      	ldr	r3, [pc, #316]	; (1a01c <MyWrapper+0x1f4>)
   19ee0:	4798      	blx	r3
   19ee2:	0003      	movs	r3, r0
   19ee4:	b2db      	uxtb	r3, r3
   19ee6:	001a      	movs	r2, r3
   19ee8:	0021      	movs	r1, r4
   19eea:	0028      	movs	r0, r5
   19eec:	4b4c      	ldr	r3, [pc, #304]	; (1a020 <MyWrapper+0x1f8>)
   19eee:	4798      	blx	r3
   19ef0:	6a3b      	ldr	r3, [r7, #32]
   19ef2:	0018      	movs	r0, r3
   19ef4:	4b47      	ldr	r3, [pc, #284]	; (1a014 <MyWrapper+0x1ec>)
   19ef6:	4798      	blx	r3
   19ef8:	0003      	movs	r3, r0
   19efa:	001a      	movs	r2, r3
   19efc:	4b46      	ldr	r3, [pc, #280]	; (1a018 <MyWrapper+0x1f0>)
   19efe:	5c9c      	ldrb	r4, [r3, r2]
   19f00:	6a3b      	ldr	r3, [r7, #32]
   19f02:	0018      	movs	r0, r3
   19f04:	4b45      	ldr	r3, [pc, #276]	; (1a01c <MyWrapper+0x1f4>)
   19f06:	4798      	blx	r3
   19f08:	0003      	movs	r3, r0
   19f0a:	b2d9      	uxtb	r1, r3
   19f0c:	6a3b      	ldr	r3, [r7, #32]
   19f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19f10:	b2db      	uxtb	r3, r3
   19f12:	3301      	adds	r3, #1
   19f14:	b2db      	uxtb	r3, r3
   19f16:	001a      	movs	r2, r3
   19f18:	0020      	movs	r0, r4
   19f1a:	4b42      	ldr	r3, [pc, #264]	; (1a024 <MyWrapper+0x1fc>)
   19f1c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   19f1e:	69bb      	ldr	r3, [r7, #24]
   19f20:	1c5a      	adds	r2, r3, #1
   19f22:	6a3b      	ldr	r3, [r7, #32]
   19f24:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19f26:	2317      	movs	r3, #23
   19f28:	18fb      	adds	r3, r7, r3
   19f2a:	781b      	ldrb	r3, [r3, #0]
   19f2c:	b25b      	sxtb	r3, r3
   19f2e:	3301      	adds	r3, #1
   19f30:	d123      	bne.n	19f7a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19f32:	6a3b      	ldr	r3, [r7, #32]
   19f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19f36:	2b00      	cmp	r3, #0
   19f38:	d00d      	beq.n	19f56 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   19f3a:	6a3b      	ldr	r3, [r7, #32]
   19f3c:	2100      	movs	r1, #0
   19f3e:	0018      	movs	r0, r3
   19f40:	4b39      	ldr	r3, [pc, #228]	; (1a028 <MyWrapper+0x200>)
   19f42:	4798      	blx	r3
   19f44:	1e03      	subs	r3, r0, #0
   19f46:	d021      	beq.n	19f8c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19f48:	68bb      	ldr	r3, [r7, #8]
   19f4a:	2b00      	cmp	r3, #0
   19f4c:	d01e      	beq.n	19f8c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   19f4e:	68bb      	ldr	r3, [r7, #8]
   19f50:	2201      	movs	r2, #1
   19f52:	601a      	str	r2, [r3, #0]
   19f54:	e01a      	b.n	19f8c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19f56:	6a3b      	ldr	r3, [r7, #32]
   19f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f5a:	2b00      	cmp	r3, #0
   19f5c:	d016      	beq.n	19f8c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19f5e:	6a3b      	ldr	r3, [r7, #32]
   19f60:	3324      	adds	r3, #36	; 0x24
   19f62:	0018      	movs	r0, r3
   19f64:	4b31      	ldr	r3, [pc, #196]	; (1a02c <MyWrapper+0x204>)
   19f66:	4798      	blx	r3
   19f68:	1e03      	subs	r3, r0, #0
   19f6a:	d00f      	beq.n	19f8c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19f6c:	68bb      	ldr	r3, [r7, #8]
   19f6e:	2b00      	cmp	r3, #0
   19f70:	d00c      	beq.n	19f8c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   19f72:	68bb      	ldr	r3, [r7, #8]
   19f74:	2201      	movs	r2, #1
   19f76:	601a      	str	r2, [r3, #0]
   19f78:	e008      	b.n	19f8c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   19f7a:	2317      	movs	r3, #23
   19f7c:	18fb      	adds	r3, r7, r3
   19f7e:	781b      	ldrb	r3, [r3, #0]
   19f80:	3301      	adds	r3, #1
   19f82:	b2db      	uxtb	r3, r3
   19f84:	b259      	sxtb	r1, r3
   19f86:	6a3b      	ldr	r3, [r7, #32]
   19f88:	2245      	movs	r2, #69	; 0x45
   19f8a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   19f8c:	2301      	movs	r3, #1
   19f8e:	627b      	str	r3, [r7, #36]	; 0x24
   19f90:	e030      	b.n	19ff4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   19f92:	6a3b      	ldr	r3, [r7, #32]
   19f94:	0018      	movs	r0, r3
   19f96:	4b1d      	ldr	r3, [pc, #116]	; (1a00c <MyWrapper+0x1e4>)
   19f98:	4798      	blx	r3
   19f9a:	0003      	movs	r3, r0
   19f9c:	001a      	movs	r2, r3
   19f9e:	4b1c      	ldr	r3, [pc, #112]	; (1a010 <MyWrapper+0x1e8>)
   19fa0:	881b      	ldrh	r3, [r3, #0]
   19fa2:	4013      	ands	r3, r2
   19fa4:	b29b      	uxth	r3, r3
   19fa6:	2b00      	cmp	r3, #0
   19fa8:	d022      	beq.n	19ff0 <MyWrapper+0x1c8>
   19faa:	687b      	ldr	r3, [r7, #4]
   19fac:	2b00      	cmp	r3, #0
   19fae:	d10b      	bne.n	19fc8 <MyWrapper+0x1a0>
   19fb0:	6a3b      	ldr	r3, [r7, #32]
   19fb2:	0018      	movs	r0, r3
   19fb4:	4b17      	ldr	r3, [pc, #92]	; (1a014 <MyWrapper+0x1ec>)
   19fb6:	4798      	blx	r3
   19fb8:	0003      	movs	r3, r0
   19fba:	001a      	movs	r2, r3
   19fbc:	4b16      	ldr	r3, [pc, #88]	; (1a018 <MyWrapper+0x1f0>)
   19fbe:	5c9b      	ldrb	r3, [r3, r2]
   19fc0:	3358      	adds	r3, #88	; 0x58
   19fc2:	b2db      	uxtb	r3, r3
   19fc4:	001d      	movs	r5, r3
   19fc6:	e000      	b.n	19fca <MyWrapper+0x1a2>
   19fc8:	255d      	movs	r5, #93	; 0x5d
   19fca:	6a3b      	ldr	r3, [r7, #32]
   19fcc:	0018      	movs	r0, r3
   19fce:	4b11      	ldr	r3, [pc, #68]	; (1a014 <MyWrapper+0x1ec>)
   19fd0:	4798      	blx	r3
   19fd2:	0003      	movs	r3, r0
   19fd4:	001a      	movs	r2, r3
   19fd6:	4b10      	ldr	r3, [pc, #64]	; (1a018 <MyWrapper+0x1f0>)
   19fd8:	5c9c      	ldrb	r4, [r3, r2]
   19fda:	6a3b      	ldr	r3, [r7, #32]
   19fdc:	0018      	movs	r0, r3
   19fde:	4b0f      	ldr	r3, [pc, #60]	; (1a01c <MyWrapper+0x1f4>)
   19fe0:	4798      	blx	r3
   19fe2:	0003      	movs	r3, r0
   19fe4:	b2db      	uxtb	r3, r3
   19fe6:	001a      	movs	r2, r3
   19fe8:	0021      	movs	r1, r4
   19fea:	0028      	movs	r0, r5
   19fec:	4b0c      	ldr	r3, [pc, #48]	; (1a020 <MyWrapper+0x1f8>)
   19fee:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19ff0:	2300      	movs	r3, #0
   19ff2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19ff4:	69fb      	ldr	r3, [r7, #28]
   19ff6:	0018      	movs	r0, r3
   19ff8:	4b0d      	ldr	r3, [pc, #52]	; (1a030 <MyWrapper+0x208>)
   19ffa:	4798      	blx	r3

	return xReturn;
   19ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   19ffe:	0018      	movs	r0, r3
   1a000:	46bd      	mov	sp, r7
   1a002:	b00a      	add	sp, #40	; 0x28
   1a004:	bdb0      	pop	{r4, r5, r7, pc}
   1a006:	46c0      	nop			; (mov r8, r8)
   1a008:	0001923d 	.word	0x0001923d
   1a00c:	000172a1 	.word	0x000172a1
   1a010:	20000100 	.word	0x20000100
   1a014:	000171a1 	.word	0x000171a1
   1a018:	200000f4 	.word	0x200000f4
   1a01c:	00017281 	.word	0x00017281
   1a020:	00017bd9 	.word	0x00017bd9
   1a024:	00018235 	.word	0x00018235
   1a028:	0001acb9 	.word	0x0001acb9
   1a02c:	0001ba79 	.word	0x0001ba79
   1a030:	00019249 	.word	0x00019249

0001a034 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1a034:	b5b0      	push	{r4, r5, r7, lr}
   1a036:	b08a      	sub	sp, #40	; 0x28
   1a038:	af00      	add	r7, sp, #0
   1a03a:	60f8      	str	r0, [r7, #12]
   1a03c:	60b9      	str	r1, [r7, #8]
   1a03e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1a040:	2300      	movs	r3, #0
   1a042:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a044:	68fb      	ldr	r3, [r7, #12]
   1a046:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a048:	6a3b      	ldr	r3, [r7, #32]
   1a04a:	2b00      	cmp	r3, #0
   1a04c:	d101      	bne.n	1a052 <xQueueReceive+0x1e>
   1a04e:	b672      	cpsid	i
   1a050:	e7fe      	b.n	1a050 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a052:	68bb      	ldr	r3, [r7, #8]
   1a054:	2b00      	cmp	r3, #0
   1a056:	d103      	bne.n	1a060 <xQueueReceive+0x2c>
   1a058:	6a3b      	ldr	r3, [r7, #32]
   1a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a05c:	2b00      	cmp	r3, #0
   1a05e:	d101      	bne.n	1a064 <xQueueReceive+0x30>
   1a060:	2301      	movs	r3, #1
   1a062:	e000      	b.n	1a066 <xQueueReceive+0x32>
   1a064:	2300      	movs	r3, #0
   1a066:	2b00      	cmp	r3, #0
   1a068:	d101      	bne.n	1a06e <xQueueReceive+0x3a>
   1a06a:	b672      	cpsid	i
   1a06c:	e7fe      	b.n	1a06c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a06e:	4bbf      	ldr	r3, [pc, #764]	; (1a36c <xQueueReceive+0x338>)
   1a070:	4798      	blx	r3
   1a072:	1e03      	subs	r3, r0, #0
   1a074:	d102      	bne.n	1a07c <xQueueReceive+0x48>
   1a076:	687b      	ldr	r3, [r7, #4]
   1a078:	2b00      	cmp	r3, #0
   1a07a:	d101      	bne.n	1a080 <xQueueReceive+0x4c>
   1a07c:	2301      	movs	r3, #1
   1a07e:	e000      	b.n	1a082 <xQueueReceive+0x4e>
   1a080:	2300      	movs	r3, #0
   1a082:	2b00      	cmp	r3, #0
   1a084:	d101      	bne.n	1a08a <xQueueReceive+0x56>
   1a086:	b672      	cpsid	i
   1a088:	e7fe      	b.n	1a088 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a08a:	4bb9      	ldr	r3, [pc, #740]	; (1a370 <xQueueReceive+0x33c>)
   1a08c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a08e:	6a3b      	ldr	r3, [r7, #32]
   1a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a092:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a094:	69fb      	ldr	r3, [r7, #28]
   1a096:	2b00      	cmp	r3, #0
   1a098:	d100      	bne.n	1a09c <xQueueReceive+0x68>
   1a09a:	e07d      	b.n	1a198 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a09c:	68ba      	ldr	r2, [r7, #8]
   1a09e:	6a3b      	ldr	r3, [r7, #32]
   1a0a0:	0011      	movs	r1, r2
   1a0a2:	0018      	movs	r0, r3
   1a0a4:	4bb3      	ldr	r3, [pc, #716]	; (1a374 <xQueueReceive+0x340>)
   1a0a6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a0a8:	4bb3      	ldr	r3, [pc, #716]	; (1a378 <xQueueReceive+0x344>)
   1a0aa:	4798      	blx	r3
   1a0ac:	0003      	movs	r3, r0
   1a0ae:	0018      	movs	r0, r3
   1a0b0:	4bb2      	ldr	r3, [pc, #712]	; (1a37c <xQueueReceive+0x348>)
   1a0b2:	4798      	blx	r3
   1a0b4:	0003      	movs	r3, r0
   1a0b6:	001a      	movs	r2, r3
   1a0b8:	4bb1      	ldr	r3, [pc, #708]	; (1a380 <xQueueReceive+0x34c>)
   1a0ba:	881b      	ldrh	r3, [r3, #0]
   1a0bc:	4013      	ands	r3, r2
   1a0be:	b29b      	uxth	r3, r3
   1a0c0:	2b00      	cmp	r3, #0
   1a0c2:	d029      	beq.n	1a118 <xQueueReceive+0xe4>
   1a0c4:	6a3b      	ldr	r3, [r7, #32]
   1a0c6:	0018      	movs	r0, r3
   1a0c8:	4bae      	ldr	r3, [pc, #696]	; (1a384 <xQueueReceive+0x350>)
   1a0ca:	4798      	blx	r3
   1a0cc:	0003      	movs	r3, r0
   1a0ce:	001a      	movs	r2, r3
   1a0d0:	4bab      	ldr	r3, [pc, #684]	; (1a380 <xQueueReceive+0x34c>)
   1a0d2:	881b      	ldrh	r3, [r3, #0]
   1a0d4:	4013      	ands	r3, r2
   1a0d6:	b29b      	uxth	r3, r3
   1a0d8:	2b00      	cmp	r3, #0
   1a0da:	d01d      	beq.n	1a118 <xQueueReceive+0xe4>
   1a0dc:	6a3b      	ldr	r3, [r7, #32]
   1a0de:	0018      	movs	r0, r3
   1a0e0:	4ba9      	ldr	r3, [pc, #676]	; (1a388 <xQueueReceive+0x354>)
   1a0e2:	4798      	blx	r3
   1a0e4:	0003      	movs	r3, r0
   1a0e6:	001a      	movs	r2, r3
   1a0e8:	4ba8      	ldr	r3, [pc, #672]	; (1a38c <xQueueReceive+0x358>)
   1a0ea:	5c9b      	ldrb	r3, [r3, r2]
   1a0ec:	3328      	adds	r3, #40	; 0x28
   1a0ee:	b2db      	uxtb	r3, r3
   1a0f0:	001d      	movs	r5, r3
   1a0f2:	6a3b      	ldr	r3, [r7, #32]
   1a0f4:	0018      	movs	r0, r3
   1a0f6:	4ba4      	ldr	r3, [pc, #656]	; (1a388 <xQueueReceive+0x354>)
   1a0f8:	4798      	blx	r3
   1a0fa:	0003      	movs	r3, r0
   1a0fc:	001a      	movs	r2, r3
   1a0fe:	4ba3      	ldr	r3, [pc, #652]	; (1a38c <xQueueReceive+0x358>)
   1a100:	5c9c      	ldrb	r4, [r3, r2]
   1a102:	6a3b      	ldr	r3, [r7, #32]
   1a104:	0018      	movs	r0, r3
   1a106:	4ba2      	ldr	r3, [pc, #648]	; (1a390 <xQueueReceive+0x35c>)
   1a108:	4798      	blx	r3
   1a10a:	0003      	movs	r3, r0
   1a10c:	b2db      	uxtb	r3, r3
   1a10e:	001a      	movs	r2, r3
   1a110:	0021      	movs	r1, r4
   1a112:	0028      	movs	r0, r5
   1a114:	4b9f      	ldr	r3, [pc, #636]	; (1a394 <xQueueReceive+0x360>)
   1a116:	4798      	blx	r3
   1a118:	6a3b      	ldr	r3, [r7, #32]
   1a11a:	0018      	movs	r0, r3
   1a11c:	4b9a      	ldr	r3, [pc, #616]	; (1a388 <xQueueReceive+0x354>)
   1a11e:	4798      	blx	r3
   1a120:	0003      	movs	r3, r0
   1a122:	001a      	movs	r2, r3
   1a124:	4b99      	ldr	r3, [pc, #612]	; (1a38c <xQueueReceive+0x358>)
   1a126:	5c9c      	ldrb	r4, [r3, r2]
   1a128:	6a3b      	ldr	r3, [r7, #32]
   1a12a:	0018      	movs	r0, r3
   1a12c:	4b98      	ldr	r3, [pc, #608]	; (1a390 <xQueueReceive+0x35c>)
   1a12e:	4798      	blx	r3
   1a130:	0003      	movs	r3, r0
   1a132:	b2dd      	uxtb	r5, r3
   1a134:	6a3b      	ldr	r3, [r7, #32]
   1a136:	0018      	movs	r0, r3
   1a138:	4b93      	ldr	r3, [pc, #588]	; (1a388 <xQueueReceive+0x354>)
   1a13a:	4798      	blx	r3
   1a13c:	0003      	movs	r3, r0
   1a13e:	001a      	movs	r2, r3
   1a140:	4b92      	ldr	r3, [pc, #584]	; (1a38c <xQueueReceive+0x358>)
   1a142:	5c9b      	ldrb	r3, [r3, r2]
   1a144:	2b02      	cmp	r3, #2
   1a146:	d108      	bne.n	1a15a <xQueueReceive+0x126>
   1a148:	4b8b      	ldr	r3, [pc, #556]	; (1a378 <xQueueReceive+0x344>)
   1a14a:	4798      	blx	r3
   1a14c:	0003      	movs	r3, r0
   1a14e:	0018      	movs	r0, r3
   1a150:	4b91      	ldr	r3, [pc, #580]	; (1a398 <xQueueReceive+0x364>)
   1a152:	4798      	blx	r3
   1a154:	0003      	movs	r3, r0
   1a156:	b2db      	uxtb	r3, r3
   1a158:	e004      	b.n	1a164 <xQueueReceive+0x130>
   1a15a:	6a3b      	ldr	r3, [r7, #32]
   1a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a15e:	b2db      	uxtb	r3, r3
   1a160:	3b01      	subs	r3, #1
   1a162:	b2db      	uxtb	r3, r3
   1a164:	001a      	movs	r2, r3
   1a166:	0029      	movs	r1, r5
   1a168:	0020      	movs	r0, r4
   1a16a:	4b8c      	ldr	r3, [pc, #560]	; (1a39c <xQueueReceive+0x368>)
   1a16c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a16e:	69fb      	ldr	r3, [r7, #28]
   1a170:	1e5a      	subs	r2, r3, #1
   1a172:	6a3b      	ldr	r3, [r7, #32]
   1a174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a176:	6a3b      	ldr	r3, [r7, #32]
   1a178:	691b      	ldr	r3, [r3, #16]
   1a17a:	2b00      	cmp	r3, #0
   1a17c:	d008      	beq.n	1a190 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a17e:	6a3b      	ldr	r3, [r7, #32]
   1a180:	3310      	adds	r3, #16
   1a182:	0018      	movs	r0, r3
   1a184:	4b86      	ldr	r3, [pc, #536]	; (1a3a0 <xQueueReceive+0x36c>)
   1a186:	4798      	blx	r3
   1a188:	1e03      	subs	r3, r0, #0
   1a18a:	d001      	beq.n	1a190 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a18c:	4b85      	ldr	r3, [pc, #532]	; (1a3a4 <xQueueReceive+0x370>)
   1a18e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a190:	4b85      	ldr	r3, [pc, #532]	; (1a3a8 <xQueueReceive+0x374>)
   1a192:	4798      	blx	r3
				return pdPASS;
   1a194:	2301      	movs	r3, #1
   1a196:	e15f      	b.n	1a458 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a198:	687b      	ldr	r3, [r7, #4]
   1a19a:	2b00      	cmp	r3, #0
   1a19c:	d13b      	bne.n	1a216 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a19e:	4b82      	ldr	r3, [pc, #520]	; (1a3a8 <xQueueReceive+0x374>)
   1a1a0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a1a2:	4b75      	ldr	r3, [pc, #468]	; (1a378 <xQueueReceive+0x344>)
   1a1a4:	4798      	blx	r3
   1a1a6:	0003      	movs	r3, r0
   1a1a8:	0018      	movs	r0, r3
   1a1aa:	4b74      	ldr	r3, [pc, #464]	; (1a37c <xQueueReceive+0x348>)
   1a1ac:	4798      	blx	r3
   1a1ae:	0003      	movs	r3, r0
   1a1b0:	001a      	movs	r2, r3
   1a1b2:	4b73      	ldr	r3, [pc, #460]	; (1a380 <xQueueReceive+0x34c>)
   1a1b4:	881b      	ldrh	r3, [r3, #0]
   1a1b6:	4013      	ands	r3, r2
   1a1b8:	b29b      	uxth	r3, r3
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	d029      	beq.n	1a212 <xQueueReceive+0x1de>
   1a1be:	6a3b      	ldr	r3, [r7, #32]
   1a1c0:	0018      	movs	r0, r3
   1a1c2:	4b70      	ldr	r3, [pc, #448]	; (1a384 <xQueueReceive+0x350>)
   1a1c4:	4798      	blx	r3
   1a1c6:	0003      	movs	r3, r0
   1a1c8:	001a      	movs	r2, r3
   1a1ca:	4b6d      	ldr	r3, [pc, #436]	; (1a380 <xQueueReceive+0x34c>)
   1a1cc:	881b      	ldrh	r3, [r3, #0]
   1a1ce:	4013      	ands	r3, r2
   1a1d0:	b29b      	uxth	r3, r3
   1a1d2:	2b00      	cmp	r3, #0
   1a1d4:	d01d      	beq.n	1a212 <xQueueReceive+0x1de>
   1a1d6:	6a3b      	ldr	r3, [r7, #32]
   1a1d8:	0018      	movs	r0, r3
   1a1da:	4b6b      	ldr	r3, [pc, #428]	; (1a388 <xQueueReceive+0x354>)
   1a1dc:	4798      	blx	r3
   1a1de:	0003      	movs	r3, r0
   1a1e0:	001a      	movs	r2, r3
   1a1e2:	4b6a      	ldr	r3, [pc, #424]	; (1a38c <xQueueReceive+0x358>)
   1a1e4:	5c9b      	ldrb	r3, [r3, r2]
   1a1e6:	3350      	adds	r3, #80	; 0x50
   1a1e8:	b2db      	uxtb	r3, r3
   1a1ea:	001d      	movs	r5, r3
   1a1ec:	6a3b      	ldr	r3, [r7, #32]
   1a1ee:	0018      	movs	r0, r3
   1a1f0:	4b65      	ldr	r3, [pc, #404]	; (1a388 <xQueueReceive+0x354>)
   1a1f2:	4798      	blx	r3
   1a1f4:	0003      	movs	r3, r0
   1a1f6:	001a      	movs	r2, r3
   1a1f8:	4b64      	ldr	r3, [pc, #400]	; (1a38c <xQueueReceive+0x358>)
   1a1fa:	5c9c      	ldrb	r4, [r3, r2]
   1a1fc:	6a3b      	ldr	r3, [r7, #32]
   1a1fe:	0018      	movs	r0, r3
   1a200:	4b63      	ldr	r3, [pc, #396]	; (1a390 <xQueueReceive+0x35c>)
   1a202:	4798      	blx	r3
   1a204:	0003      	movs	r3, r0
   1a206:	b2db      	uxtb	r3, r3
   1a208:	001a      	movs	r2, r3
   1a20a:	0021      	movs	r1, r4
   1a20c:	0028      	movs	r0, r5
   1a20e:	4b61      	ldr	r3, [pc, #388]	; (1a394 <xQueueReceive+0x360>)
   1a210:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a212:	2300      	movs	r3, #0
   1a214:	e120      	b.n	1a458 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a218:	2b00      	cmp	r3, #0
   1a21a:	d106      	bne.n	1a22a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a21c:	2314      	movs	r3, #20
   1a21e:	18fb      	adds	r3, r7, r3
   1a220:	0018      	movs	r0, r3
   1a222:	4b62      	ldr	r3, [pc, #392]	; (1a3ac <xQueueReceive+0x378>)
   1a224:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a226:	2301      	movs	r3, #1
   1a228:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a22a:	4b5f      	ldr	r3, [pc, #380]	; (1a3a8 <xQueueReceive+0x374>)
   1a22c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a22e:	4b60      	ldr	r3, [pc, #384]	; (1a3b0 <xQueueReceive+0x37c>)
   1a230:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a232:	4b4f      	ldr	r3, [pc, #316]	; (1a370 <xQueueReceive+0x33c>)
   1a234:	4798      	blx	r3
   1a236:	6a3b      	ldr	r3, [r7, #32]
   1a238:	2244      	movs	r2, #68	; 0x44
   1a23a:	5c9b      	ldrb	r3, [r3, r2]
   1a23c:	b25b      	sxtb	r3, r3
   1a23e:	3301      	adds	r3, #1
   1a240:	d103      	bne.n	1a24a <xQueueReceive+0x216>
   1a242:	6a3b      	ldr	r3, [r7, #32]
   1a244:	2244      	movs	r2, #68	; 0x44
   1a246:	2100      	movs	r1, #0
   1a248:	5499      	strb	r1, [r3, r2]
   1a24a:	6a3b      	ldr	r3, [r7, #32]
   1a24c:	2245      	movs	r2, #69	; 0x45
   1a24e:	5c9b      	ldrb	r3, [r3, r2]
   1a250:	b25b      	sxtb	r3, r3
   1a252:	3301      	adds	r3, #1
   1a254:	d103      	bne.n	1a25e <xQueueReceive+0x22a>
   1a256:	6a3b      	ldr	r3, [r7, #32]
   1a258:	2245      	movs	r2, #69	; 0x45
   1a25a:	2100      	movs	r1, #0
   1a25c:	5499      	strb	r1, [r3, r2]
   1a25e:	4b52      	ldr	r3, [pc, #328]	; (1a3a8 <xQueueReceive+0x374>)
   1a260:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a262:	1d3a      	adds	r2, r7, #4
   1a264:	2314      	movs	r3, #20
   1a266:	18fb      	adds	r3, r7, r3
   1a268:	0011      	movs	r1, r2
   1a26a:	0018      	movs	r0, r3
   1a26c:	4b51      	ldr	r3, [pc, #324]	; (1a3b4 <xQueueReceive+0x380>)
   1a26e:	4798      	blx	r3
   1a270:	1e03      	subs	r3, r0, #0
   1a272:	d000      	beq.n	1a276 <xQueueReceive+0x242>
   1a274:	e0aa      	b.n	1a3cc <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a276:	6a3b      	ldr	r3, [r7, #32]
   1a278:	0018      	movs	r0, r3
   1a27a:	4b4f      	ldr	r3, [pc, #316]	; (1a3b8 <xQueueReceive+0x384>)
   1a27c:	4798      	blx	r3
   1a27e:	1e03      	subs	r3, r0, #0
   1a280:	d06d      	beq.n	1a35e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a282:	4b3d      	ldr	r3, [pc, #244]	; (1a378 <xQueueReceive+0x344>)
   1a284:	4798      	blx	r3
   1a286:	0003      	movs	r3, r0
   1a288:	0018      	movs	r0, r3
   1a28a:	4b3c      	ldr	r3, [pc, #240]	; (1a37c <xQueueReceive+0x348>)
   1a28c:	4798      	blx	r3
   1a28e:	0003      	movs	r3, r0
   1a290:	001a      	movs	r2, r3
   1a292:	4b3b      	ldr	r3, [pc, #236]	; (1a380 <xQueueReceive+0x34c>)
   1a294:	881b      	ldrh	r3, [r3, #0]
   1a296:	4013      	ands	r3, r2
   1a298:	b29b      	uxth	r3, r3
   1a29a:	2b00      	cmp	r3, #0
   1a29c:	d029      	beq.n	1a2f2 <xQueueReceive+0x2be>
   1a29e:	6a3b      	ldr	r3, [r7, #32]
   1a2a0:	0018      	movs	r0, r3
   1a2a2:	4b38      	ldr	r3, [pc, #224]	; (1a384 <xQueueReceive+0x350>)
   1a2a4:	4798      	blx	r3
   1a2a6:	0003      	movs	r3, r0
   1a2a8:	001a      	movs	r2, r3
   1a2aa:	4b35      	ldr	r3, [pc, #212]	; (1a380 <xQueueReceive+0x34c>)
   1a2ac:	881b      	ldrh	r3, [r3, #0]
   1a2ae:	4013      	ands	r3, r2
   1a2b0:	b29b      	uxth	r3, r3
   1a2b2:	2b00      	cmp	r3, #0
   1a2b4:	d01d      	beq.n	1a2f2 <xQueueReceive+0x2be>
   1a2b6:	6a3b      	ldr	r3, [r7, #32]
   1a2b8:	0018      	movs	r0, r3
   1a2ba:	4b33      	ldr	r3, [pc, #204]	; (1a388 <xQueueReceive+0x354>)
   1a2bc:	4798      	blx	r3
   1a2be:	0003      	movs	r3, r0
   1a2c0:	001a      	movs	r2, r3
   1a2c2:	4b32      	ldr	r3, [pc, #200]	; (1a38c <xQueueReceive+0x358>)
   1a2c4:	5c9b      	ldrb	r3, [r3, r2]
   1a2c6:	3368      	adds	r3, #104	; 0x68
   1a2c8:	b2db      	uxtb	r3, r3
   1a2ca:	001d      	movs	r5, r3
   1a2cc:	6a3b      	ldr	r3, [r7, #32]
   1a2ce:	0018      	movs	r0, r3
   1a2d0:	4b2d      	ldr	r3, [pc, #180]	; (1a388 <xQueueReceive+0x354>)
   1a2d2:	4798      	blx	r3
   1a2d4:	0003      	movs	r3, r0
   1a2d6:	001a      	movs	r2, r3
   1a2d8:	4b2c      	ldr	r3, [pc, #176]	; (1a38c <xQueueReceive+0x358>)
   1a2da:	5c9c      	ldrb	r4, [r3, r2]
   1a2dc:	6a3b      	ldr	r3, [r7, #32]
   1a2de:	0018      	movs	r0, r3
   1a2e0:	4b2b      	ldr	r3, [pc, #172]	; (1a390 <xQueueReceive+0x35c>)
   1a2e2:	4798      	blx	r3
   1a2e4:	0003      	movs	r3, r0
   1a2e6:	b2db      	uxtb	r3, r3
   1a2e8:	001a      	movs	r2, r3
   1a2ea:	0021      	movs	r1, r4
   1a2ec:	0028      	movs	r0, r5
   1a2ee:	4b29      	ldr	r3, [pc, #164]	; (1a394 <xQueueReceive+0x360>)
   1a2f0:	4798      	blx	r3
   1a2f2:	6a3b      	ldr	r3, [r7, #32]
   1a2f4:	0018      	movs	r0, r3
   1a2f6:	4b24      	ldr	r3, [pc, #144]	; (1a388 <xQueueReceive+0x354>)
   1a2f8:	4798      	blx	r3
   1a2fa:	0003      	movs	r3, r0
   1a2fc:	001a      	movs	r2, r3
   1a2fe:	4b23      	ldr	r3, [pc, #140]	; (1a38c <xQueueReceive+0x358>)
   1a300:	5c9b      	ldrb	r3, [r3, r2]
   1a302:	2b02      	cmp	r3, #2
   1a304:	d018      	beq.n	1a338 <xQueueReceive+0x304>
   1a306:	4b1c      	ldr	r3, [pc, #112]	; (1a378 <xQueueReceive+0x344>)
   1a308:	4798      	blx	r3
   1a30a:	0003      	movs	r3, r0
   1a30c:	0018      	movs	r0, r3
   1a30e:	4b1b      	ldr	r3, [pc, #108]	; (1a37c <xQueueReceive+0x348>)
   1a310:	4798      	blx	r3
   1a312:	0003      	movs	r3, r0
   1a314:	001a      	movs	r2, r3
   1a316:	4b1a      	ldr	r3, [pc, #104]	; (1a380 <xQueueReceive+0x34c>)
   1a318:	881b      	ldrh	r3, [r3, #0]
   1a31a:	4013      	ands	r3, r2
   1a31c:	b29b      	uxth	r3, r3
   1a31e:	2b00      	cmp	r3, #0
   1a320:	d00a      	beq.n	1a338 <xQueueReceive+0x304>
   1a322:	4b15      	ldr	r3, [pc, #84]	; (1a378 <xQueueReceive+0x344>)
   1a324:	4798      	blx	r3
   1a326:	0003      	movs	r3, r0
   1a328:	0018      	movs	r0, r3
   1a32a:	4b1b      	ldr	r3, [pc, #108]	; (1a398 <xQueueReceive+0x364>)
   1a32c:	4798      	blx	r3
   1a32e:	0003      	movs	r3, r0
   1a330:	b2db      	uxtb	r3, r3
   1a332:	0018      	movs	r0, r3
   1a334:	4b21      	ldr	r3, [pc, #132]	; (1a3bc <xQueueReceive+0x388>)
   1a336:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a338:	6a3b      	ldr	r3, [r7, #32]
   1a33a:	3324      	adds	r3, #36	; 0x24
   1a33c:	687a      	ldr	r2, [r7, #4]
   1a33e:	0011      	movs	r1, r2
   1a340:	0018      	movs	r0, r3
   1a342:	4b1f      	ldr	r3, [pc, #124]	; (1a3c0 <xQueueReceive+0x38c>)
   1a344:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a346:	6a3b      	ldr	r3, [r7, #32]
   1a348:	0018      	movs	r0, r3
   1a34a:	4b1e      	ldr	r3, [pc, #120]	; (1a3c4 <xQueueReceive+0x390>)
   1a34c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a34e:	4b1e      	ldr	r3, [pc, #120]	; (1a3c8 <xQueueReceive+0x394>)
   1a350:	4798      	blx	r3
   1a352:	1e03      	subs	r3, r0, #0
   1a354:	d000      	beq.n	1a358 <xQueueReceive+0x324>
   1a356:	e698      	b.n	1a08a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1a358:	4b12      	ldr	r3, [pc, #72]	; (1a3a4 <xQueueReceive+0x370>)
   1a35a:	4798      	blx	r3
   1a35c:	e695      	b.n	1a08a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1a35e:	6a3b      	ldr	r3, [r7, #32]
   1a360:	0018      	movs	r0, r3
   1a362:	4b18      	ldr	r3, [pc, #96]	; (1a3c4 <xQueueReceive+0x390>)
   1a364:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a366:	4b18      	ldr	r3, [pc, #96]	; (1a3c8 <xQueueReceive+0x394>)
   1a368:	4798      	blx	r3
   1a36a:	e68e      	b.n	1a08a <xQueueReceive+0x56>
   1a36c:	0001bf09 	.word	0x0001bf09
   1a370:	000191e9 	.word	0x000191e9
   1a374:	0001aa95 	.word	0x0001aa95
   1a378:	0001747d 	.word	0x0001747d
   1a37c:	000171e1 	.word	0x000171e1
   1a380:	20000100 	.word	0x20000100
   1a384:	000172a1 	.word	0x000172a1
   1a388:	000171a1 	.word	0x000171a1
   1a38c:	200000f4 	.word	0x200000f4
   1a390:	00017281 	.word	0x00017281
   1a394:	00017bd9 	.word	0x00017bd9
   1a398:	000171c1 	.word	0x000171c1
   1a39c:	00018235 	.word	0x00018235
   1a3a0:	0001ba79 	.word	0x0001ba79
   1a3a4:	000191d1 	.word	0x000191d1
   1a3a8:	0001920d 	.word	0x0001920d
   1a3ac:	0001bbb9 	.word	0x0001bbb9
   1a3b0:	0001b4a1 	.word	0x0001b4a1
   1a3b4:	0001bbe1 	.word	0x0001bbe1
   1a3b8:	0001abd5 	.word	0x0001abd5
   1a3bc:	00018371 	.word	0x00018371
   1a3c0:	0001b955 	.word	0x0001b955
   1a3c4:	0001aae5 	.word	0x0001aae5
   1a3c8:	0001b4b9 	.word	0x0001b4b9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1a3cc:	6a3b      	ldr	r3, [r7, #32]
   1a3ce:	0018      	movs	r0, r3
   1a3d0:	4b23      	ldr	r3, [pc, #140]	; (1a460 <xQueueReceive+0x42c>)
   1a3d2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a3d4:	4b23      	ldr	r3, [pc, #140]	; (1a464 <xQueueReceive+0x430>)
   1a3d6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a3d8:	6a3b      	ldr	r3, [r7, #32]
   1a3da:	0018      	movs	r0, r3
   1a3dc:	4b22      	ldr	r3, [pc, #136]	; (1a468 <xQueueReceive+0x434>)
   1a3de:	4798      	blx	r3
   1a3e0:	1e03      	subs	r3, r0, #0
   1a3e2:	d100      	bne.n	1a3e6 <xQueueReceive+0x3b2>
   1a3e4:	e651      	b.n	1a08a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a3e6:	4b21      	ldr	r3, [pc, #132]	; (1a46c <xQueueReceive+0x438>)
   1a3e8:	4798      	blx	r3
   1a3ea:	0003      	movs	r3, r0
   1a3ec:	0018      	movs	r0, r3
   1a3ee:	4b20      	ldr	r3, [pc, #128]	; (1a470 <xQueueReceive+0x43c>)
   1a3f0:	4798      	blx	r3
   1a3f2:	0003      	movs	r3, r0
   1a3f4:	001a      	movs	r2, r3
   1a3f6:	4b1f      	ldr	r3, [pc, #124]	; (1a474 <xQueueReceive+0x440>)
   1a3f8:	881b      	ldrh	r3, [r3, #0]
   1a3fa:	4013      	ands	r3, r2
   1a3fc:	b29b      	uxth	r3, r3
   1a3fe:	2b00      	cmp	r3, #0
   1a400:	d029      	beq.n	1a456 <xQueueReceive+0x422>
   1a402:	6a3b      	ldr	r3, [r7, #32]
   1a404:	0018      	movs	r0, r3
   1a406:	4b1c      	ldr	r3, [pc, #112]	; (1a478 <xQueueReceive+0x444>)
   1a408:	4798      	blx	r3
   1a40a:	0003      	movs	r3, r0
   1a40c:	001a      	movs	r2, r3
   1a40e:	4b19      	ldr	r3, [pc, #100]	; (1a474 <xQueueReceive+0x440>)
   1a410:	881b      	ldrh	r3, [r3, #0]
   1a412:	4013      	ands	r3, r2
   1a414:	b29b      	uxth	r3, r3
   1a416:	2b00      	cmp	r3, #0
   1a418:	d01d      	beq.n	1a456 <xQueueReceive+0x422>
   1a41a:	6a3b      	ldr	r3, [r7, #32]
   1a41c:	0018      	movs	r0, r3
   1a41e:	4b17      	ldr	r3, [pc, #92]	; (1a47c <xQueueReceive+0x448>)
   1a420:	4798      	blx	r3
   1a422:	0003      	movs	r3, r0
   1a424:	001a      	movs	r2, r3
   1a426:	4b16      	ldr	r3, [pc, #88]	; (1a480 <xQueueReceive+0x44c>)
   1a428:	5c9b      	ldrb	r3, [r3, r2]
   1a42a:	3350      	adds	r3, #80	; 0x50
   1a42c:	b2db      	uxtb	r3, r3
   1a42e:	001d      	movs	r5, r3
   1a430:	6a3b      	ldr	r3, [r7, #32]
   1a432:	0018      	movs	r0, r3
   1a434:	4b11      	ldr	r3, [pc, #68]	; (1a47c <xQueueReceive+0x448>)
   1a436:	4798      	blx	r3
   1a438:	0003      	movs	r3, r0
   1a43a:	001a      	movs	r2, r3
   1a43c:	4b10      	ldr	r3, [pc, #64]	; (1a480 <xQueueReceive+0x44c>)
   1a43e:	5c9c      	ldrb	r4, [r3, r2]
   1a440:	6a3b      	ldr	r3, [r7, #32]
   1a442:	0018      	movs	r0, r3
   1a444:	4b0f      	ldr	r3, [pc, #60]	; (1a484 <xQueueReceive+0x450>)
   1a446:	4798      	blx	r3
   1a448:	0003      	movs	r3, r0
   1a44a:	b2db      	uxtb	r3, r3
   1a44c:	001a      	movs	r2, r3
   1a44e:	0021      	movs	r1, r4
   1a450:	0028      	movs	r0, r5
   1a452:	4b0d      	ldr	r3, [pc, #52]	; (1a488 <xQueueReceive+0x454>)
   1a454:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a458:	0018      	movs	r0, r3
   1a45a:	46bd      	mov	sp, r7
   1a45c:	b00a      	add	sp, #40	; 0x28
   1a45e:	bdb0      	pop	{r4, r5, r7, pc}
   1a460:	0001aae5 	.word	0x0001aae5
   1a464:	0001b4b9 	.word	0x0001b4b9
   1a468:	0001abd5 	.word	0x0001abd5
   1a46c:	0001747d 	.word	0x0001747d
   1a470:	000171e1 	.word	0x000171e1
   1a474:	20000100 	.word	0x20000100
   1a478:	000172a1 	.word	0x000172a1
   1a47c:	000171a1 	.word	0x000171a1
   1a480:	200000f4 	.word	0x200000f4
   1a484:	00017281 	.word	0x00017281
   1a488:	00017bd9 	.word	0x00017bd9

0001a48c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1a48c:	b5b0      	push	{r4, r5, r7, lr}
   1a48e:	b08a      	sub	sp, #40	; 0x28
   1a490:	af00      	add	r7, sp, #0
   1a492:	6078      	str	r0, [r7, #4]
   1a494:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1a496:	2300      	movs	r3, #0
   1a498:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a49a:	687b      	ldr	r3, [r7, #4]
   1a49c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1a49e:	2300      	movs	r3, #0
   1a4a0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a4a2:	69fb      	ldr	r3, [r7, #28]
   1a4a4:	2b00      	cmp	r3, #0
   1a4a6:	d101      	bne.n	1a4ac <xQueueSemaphoreTake+0x20>
   1a4a8:	b672      	cpsid	i
   1a4aa:	e7fe      	b.n	1a4aa <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a4ac:	69fb      	ldr	r3, [r7, #28]
   1a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a4b0:	2b00      	cmp	r3, #0
   1a4b2:	d001      	beq.n	1a4b8 <xQueueSemaphoreTake+0x2c>
   1a4b4:	b672      	cpsid	i
   1a4b6:	e7fe      	b.n	1a4b6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a4b8:	4bcb      	ldr	r3, [pc, #812]	; (1a7e8 <xQueueSemaphoreTake+0x35c>)
   1a4ba:	4798      	blx	r3
   1a4bc:	1e03      	subs	r3, r0, #0
   1a4be:	d102      	bne.n	1a4c6 <xQueueSemaphoreTake+0x3a>
   1a4c0:	683b      	ldr	r3, [r7, #0]
   1a4c2:	2b00      	cmp	r3, #0
   1a4c4:	d101      	bne.n	1a4ca <xQueueSemaphoreTake+0x3e>
   1a4c6:	2301      	movs	r3, #1
   1a4c8:	e000      	b.n	1a4cc <xQueueSemaphoreTake+0x40>
   1a4ca:	2300      	movs	r3, #0
   1a4cc:	2b00      	cmp	r3, #0
   1a4ce:	d101      	bne.n	1a4d4 <xQueueSemaphoreTake+0x48>
   1a4d0:	b672      	cpsid	i
   1a4d2:	e7fe      	b.n	1a4d2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a4d4:	4bc5      	ldr	r3, [pc, #788]	; (1a7ec <xQueueSemaphoreTake+0x360>)
   1a4d6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1a4d8:	69fb      	ldr	r3, [r7, #28]
   1a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a4dc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1a4de:	69bb      	ldr	r3, [r7, #24]
   1a4e0:	2b00      	cmp	r3, #0
   1a4e2:	d100      	bne.n	1a4e6 <xQueueSemaphoreTake+0x5a>
   1a4e4:	e080      	b.n	1a5e8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1a4e6:	4bc2      	ldr	r3, [pc, #776]	; (1a7f0 <xQueueSemaphoreTake+0x364>)
   1a4e8:	4798      	blx	r3
   1a4ea:	0003      	movs	r3, r0
   1a4ec:	0018      	movs	r0, r3
   1a4ee:	4bc1      	ldr	r3, [pc, #772]	; (1a7f4 <xQueueSemaphoreTake+0x368>)
   1a4f0:	4798      	blx	r3
   1a4f2:	0003      	movs	r3, r0
   1a4f4:	001a      	movs	r2, r3
   1a4f6:	4bc0      	ldr	r3, [pc, #768]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a4f8:	881b      	ldrh	r3, [r3, #0]
   1a4fa:	4013      	ands	r3, r2
   1a4fc:	b29b      	uxth	r3, r3
   1a4fe:	2b00      	cmp	r3, #0
   1a500:	d029      	beq.n	1a556 <xQueueSemaphoreTake+0xca>
   1a502:	69fb      	ldr	r3, [r7, #28]
   1a504:	0018      	movs	r0, r3
   1a506:	4bbd      	ldr	r3, [pc, #756]	; (1a7fc <xQueueSemaphoreTake+0x370>)
   1a508:	4798      	blx	r3
   1a50a:	0003      	movs	r3, r0
   1a50c:	001a      	movs	r2, r3
   1a50e:	4bba      	ldr	r3, [pc, #744]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a510:	881b      	ldrh	r3, [r3, #0]
   1a512:	4013      	ands	r3, r2
   1a514:	b29b      	uxth	r3, r3
   1a516:	2b00      	cmp	r3, #0
   1a518:	d01d      	beq.n	1a556 <xQueueSemaphoreTake+0xca>
   1a51a:	69fb      	ldr	r3, [r7, #28]
   1a51c:	0018      	movs	r0, r3
   1a51e:	4bb8      	ldr	r3, [pc, #736]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a520:	4798      	blx	r3
   1a522:	0003      	movs	r3, r0
   1a524:	001a      	movs	r2, r3
   1a526:	4bb7      	ldr	r3, [pc, #732]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a528:	5c9b      	ldrb	r3, [r3, r2]
   1a52a:	3328      	adds	r3, #40	; 0x28
   1a52c:	b2db      	uxtb	r3, r3
   1a52e:	001d      	movs	r5, r3
   1a530:	69fb      	ldr	r3, [r7, #28]
   1a532:	0018      	movs	r0, r3
   1a534:	4bb2      	ldr	r3, [pc, #712]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a536:	4798      	blx	r3
   1a538:	0003      	movs	r3, r0
   1a53a:	001a      	movs	r2, r3
   1a53c:	4bb1      	ldr	r3, [pc, #708]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a53e:	5c9c      	ldrb	r4, [r3, r2]
   1a540:	69fb      	ldr	r3, [r7, #28]
   1a542:	0018      	movs	r0, r3
   1a544:	4bb0      	ldr	r3, [pc, #704]	; (1a808 <xQueueSemaphoreTake+0x37c>)
   1a546:	4798      	blx	r3
   1a548:	0003      	movs	r3, r0
   1a54a:	b2db      	uxtb	r3, r3
   1a54c:	001a      	movs	r2, r3
   1a54e:	0021      	movs	r1, r4
   1a550:	0028      	movs	r0, r5
   1a552:	4bae      	ldr	r3, [pc, #696]	; (1a80c <xQueueSemaphoreTake+0x380>)
   1a554:	4798      	blx	r3
   1a556:	69fb      	ldr	r3, [r7, #28]
   1a558:	0018      	movs	r0, r3
   1a55a:	4ba9      	ldr	r3, [pc, #676]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a55c:	4798      	blx	r3
   1a55e:	0003      	movs	r3, r0
   1a560:	001a      	movs	r2, r3
   1a562:	4ba8      	ldr	r3, [pc, #672]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a564:	5c9c      	ldrb	r4, [r3, r2]
   1a566:	69fb      	ldr	r3, [r7, #28]
   1a568:	0018      	movs	r0, r3
   1a56a:	4ba7      	ldr	r3, [pc, #668]	; (1a808 <xQueueSemaphoreTake+0x37c>)
   1a56c:	4798      	blx	r3
   1a56e:	0003      	movs	r3, r0
   1a570:	b2dd      	uxtb	r5, r3
   1a572:	69fb      	ldr	r3, [r7, #28]
   1a574:	0018      	movs	r0, r3
   1a576:	4ba2      	ldr	r3, [pc, #648]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a578:	4798      	blx	r3
   1a57a:	0003      	movs	r3, r0
   1a57c:	001a      	movs	r2, r3
   1a57e:	4ba1      	ldr	r3, [pc, #644]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a580:	5c9b      	ldrb	r3, [r3, r2]
   1a582:	2b02      	cmp	r3, #2
   1a584:	d108      	bne.n	1a598 <xQueueSemaphoreTake+0x10c>
   1a586:	4b9a      	ldr	r3, [pc, #616]	; (1a7f0 <xQueueSemaphoreTake+0x364>)
   1a588:	4798      	blx	r3
   1a58a:	0003      	movs	r3, r0
   1a58c:	0018      	movs	r0, r3
   1a58e:	4ba0      	ldr	r3, [pc, #640]	; (1a810 <xQueueSemaphoreTake+0x384>)
   1a590:	4798      	blx	r3
   1a592:	0003      	movs	r3, r0
   1a594:	b2db      	uxtb	r3, r3
   1a596:	e004      	b.n	1a5a2 <xQueueSemaphoreTake+0x116>
   1a598:	69fb      	ldr	r3, [r7, #28]
   1a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a59c:	b2db      	uxtb	r3, r3
   1a59e:	3b01      	subs	r3, #1
   1a5a0:	b2db      	uxtb	r3, r3
   1a5a2:	001a      	movs	r2, r3
   1a5a4:	0029      	movs	r1, r5
   1a5a6:	0020      	movs	r0, r4
   1a5a8:	4b9a      	ldr	r3, [pc, #616]	; (1a814 <xQueueSemaphoreTake+0x388>)
   1a5aa:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1a5ac:	69bb      	ldr	r3, [r7, #24]
   1a5ae:	1e5a      	subs	r2, r3, #1
   1a5b0:	69fb      	ldr	r3, [r7, #28]
   1a5b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a5b4:	69fb      	ldr	r3, [r7, #28]
   1a5b6:	681b      	ldr	r3, [r3, #0]
   1a5b8:	2b00      	cmp	r3, #0
   1a5ba:	d104      	bne.n	1a5c6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1a5bc:	4b96      	ldr	r3, [pc, #600]	; (1a818 <xQueueSemaphoreTake+0x38c>)
   1a5be:	4798      	blx	r3
   1a5c0:	0002      	movs	r2, r0
   1a5c2:	69fb      	ldr	r3, [r7, #28]
   1a5c4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a5c6:	69fb      	ldr	r3, [r7, #28]
   1a5c8:	691b      	ldr	r3, [r3, #16]
   1a5ca:	2b00      	cmp	r3, #0
   1a5cc:	d008      	beq.n	1a5e0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a5ce:	69fb      	ldr	r3, [r7, #28]
   1a5d0:	3310      	adds	r3, #16
   1a5d2:	0018      	movs	r0, r3
   1a5d4:	4b91      	ldr	r3, [pc, #580]	; (1a81c <xQueueSemaphoreTake+0x390>)
   1a5d6:	4798      	blx	r3
   1a5d8:	1e03      	subs	r3, r0, #0
   1a5da:	d001      	beq.n	1a5e0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a5dc:	4b90      	ldr	r3, [pc, #576]	; (1a820 <xQueueSemaphoreTake+0x394>)
   1a5de:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a5e0:	4b90      	ldr	r3, [pc, #576]	; (1a824 <xQueueSemaphoreTake+0x398>)
   1a5e2:	4798      	blx	r3
				return pdPASS;
   1a5e4:	2301      	movs	r3, #1
   1a5e6:	e18b      	b.n	1a900 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a5e8:	683b      	ldr	r3, [r7, #0]
   1a5ea:	2b00      	cmp	r3, #0
   1a5ec:	d140      	bne.n	1a670 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1a5ee:	6a3b      	ldr	r3, [r7, #32]
   1a5f0:	2b00      	cmp	r3, #0
   1a5f2:	d001      	beq.n	1a5f8 <xQueueSemaphoreTake+0x16c>
   1a5f4:	b672      	cpsid	i
   1a5f6:	e7fe      	b.n	1a5f6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1a5f8:	4b8a      	ldr	r3, [pc, #552]	; (1a824 <xQueueSemaphoreTake+0x398>)
   1a5fa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a5fc:	4b7c      	ldr	r3, [pc, #496]	; (1a7f0 <xQueueSemaphoreTake+0x364>)
   1a5fe:	4798      	blx	r3
   1a600:	0003      	movs	r3, r0
   1a602:	0018      	movs	r0, r3
   1a604:	4b7b      	ldr	r3, [pc, #492]	; (1a7f4 <xQueueSemaphoreTake+0x368>)
   1a606:	4798      	blx	r3
   1a608:	0003      	movs	r3, r0
   1a60a:	001a      	movs	r2, r3
   1a60c:	4b7a      	ldr	r3, [pc, #488]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a60e:	881b      	ldrh	r3, [r3, #0]
   1a610:	4013      	ands	r3, r2
   1a612:	b29b      	uxth	r3, r3
   1a614:	2b00      	cmp	r3, #0
   1a616:	d029      	beq.n	1a66c <xQueueSemaphoreTake+0x1e0>
   1a618:	69fb      	ldr	r3, [r7, #28]
   1a61a:	0018      	movs	r0, r3
   1a61c:	4b77      	ldr	r3, [pc, #476]	; (1a7fc <xQueueSemaphoreTake+0x370>)
   1a61e:	4798      	blx	r3
   1a620:	0003      	movs	r3, r0
   1a622:	001a      	movs	r2, r3
   1a624:	4b74      	ldr	r3, [pc, #464]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a626:	881b      	ldrh	r3, [r3, #0]
   1a628:	4013      	ands	r3, r2
   1a62a:	b29b      	uxth	r3, r3
   1a62c:	2b00      	cmp	r3, #0
   1a62e:	d01d      	beq.n	1a66c <xQueueSemaphoreTake+0x1e0>
   1a630:	69fb      	ldr	r3, [r7, #28]
   1a632:	0018      	movs	r0, r3
   1a634:	4b72      	ldr	r3, [pc, #456]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a636:	4798      	blx	r3
   1a638:	0003      	movs	r3, r0
   1a63a:	001a      	movs	r2, r3
   1a63c:	4b71      	ldr	r3, [pc, #452]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a63e:	5c9b      	ldrb	r3, [r3, r2]
   1a640:	3350      	adds	r3, #80	; 0x50
   1a642:	b2db      	uxtb	r3, r3
   1a644:	001d      	movs	r5, r3
   1a646:	69fb      	ldr	r3, [r7, #28]
   1a648:	0018      	movs	r0, r3
   1a64a:	4b6d      	ldr	r3, [pc, #436]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a64c:	4798      	blx	r3
   1a64e:	0003      	movs	r3, r0
   1a650:	001a      	movs	r2, r3
   1a652:	4b6c      	ldr	r3, [pc, #432]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a654:	5c9c      	ldrb	r4, [r3, r2]
   1a656:	69fb      	ldr	r3, [r7, #28]
   1a658:	0018      	movs	r0, r3
   1a65a:	4b6b      	ldr	r3, [pc, #428]	; (1a808 <xQueueSemaphoreTake+0x37c>)
   1a65c:	4798      	blx	r3
   1a65e:	0003      	movs	r3, r0
   1a660:	b2db      	uxtb	r3, r3
   1a662:	001a      	movs	r2, r3
   1a664:	0021      	movs	r1, r4
   1a666:	0028      	movs	r0, r5
   1a668:	4b68      	ldr	r3, [pc, #416]	; (1a80c <xQueueSemaphoreTake+0x380>)
   1a66a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a66c:	2300      	movs	r3, #0
   1a66e:	e147      	b.n	1a900 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a672:	2b00      	cmp	r3, #0
   1a674:	d106      	bne.n	1a684 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a676:	230c      	movs	r3, #12
   1a678:	18fb      	adds	r3, r7, r3
   1a67a:	0018      	movs	r0, r3
   1a67c:	4b6a      	ldr	r3, [pc, #424]	; (1a828 <xQueueSemaphoreTake+0x39c>)
   1a67e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a680:	2301      	movs	r3, #1
   1a682:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a684:	4b67      	ldr	r3, [pc, #412]	; (1a824 <xQueueSemaphoreTake+0x398>)
   1a686:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a688:	4b68      	ldr	r3, [pc, #416]	; (1a82c <xQueueSemaphoreTake+0x3a0>)
   1a68a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a68c:	4b57      	ldr	r3, [pc, #348]	; (1a7ec <xQueueSemaphoreTake+0x360>)
   1a68e:	4798      	blx	r3
   1a690:	69fb      	ldr	r3, [r7, #28]
   1a692:	2244      	movs	r2, #68	; 0x44
   1a694:	5c9b      	ldrb	r3, [r3, r2]
   1a696:	b25b      	sxtb	r3, r3
   1a698:	3301      	adds	r3, #1
   1a69a:	d103      	bne.n	1a6a4 <xQueueSemaphoreTake+0x218>
   1a69c:	69fb      	ldr	r3, [r7, #28]
   1a69e:	2244      	movs	r2, #68	; 0x44
   1a6a0:	2100      	movs	r1, #0
   1a6a2:	5499      	strb	r1, [r3, r2]
   1a6a4:	69fb      	ldr	r3, [r7, #28]
   1a6a6:	2245      	movs	r2, #69	; 0x45
   1a6a8:	5c9b      	ldrb	r3, [r3, r2]
   1a6aa:	b25b      	sxtb	r3, r3
   1a6ac:	3301      	adds	r3, #1
   1a6ae:	d103      	bne.n	1a6b8 <xQueueSemaphoreTake+0x22c>
   1a6b0:	69fb      	ldr	r3, [r7, #28]
   1a6b2:	2245      	movs	r2, #69	; 0x45
   1a6b4:	2100      	movs	r1, #0
   1a6b6:	5499      	strb	r1, [r3, r2]
   1a6b8:	4b5a      	ldr	r3, [pc, #360]	; (1a824 <xQueueSemaphoreTake+0x398>)
   1a6ba:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a6bc:	003a      	movs	r2, r7
   1a6be:	230c      	movs	r3, #12
   1a6c0:	18fb      	adds	r3, r7, r3
   1a6c2:	0011      	movs	r1, r2
   1a6c4:	0018      	movs	r0, r3
   1a6c6:	4b5a      	ldr	r3, [pc, #360]	; (1a830 <xQueueSemaphoreTake+0x3a4>)
   1a6c8:	4798      	blx	r3
   1a6ca:	1e03      	subs	r3, r0, #0
   1a6cc:	d000      	beq.n	1a6d0 <xQueueSemaphoreTake+0x244>
   1a6ce:	e0bd      	b.n	1a84c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a6d0:	69fb      	ldr	r3, [r7, #28]
   1a6d2:	0018      	movs	r0, r3
   1a6d4:	4b57      	ldr	r3, [pc, #348]	; (1a834 <xQueueSemaphoreTake+0x3a8>)
   1a6d6:	4798      	blx	r3
   1a6d8:	1e03      	subs	r3, r0, #0
   1a6da:	d100      	bne.n	1a6de <xQueueSemaphoreTake+0x252>
   1a6dc:	e07c      	b.n	1a7d8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a6de:	4b44      	ldr	r3, [pc, #272]	; (1a7f0 <xQueueSemaphoreTake+0x364>)
   1a6e0:	4798      	blx	r3
   1a6e2:	0003      	movs	r3, r0
   1a6e4:	0018      	movs	r0, r3
   1a6e6:	4b43      	ldr	r3, [pc, #268]	; (1a7f4 <xQueueSemaphoreTake+0x368>)
   1a6e8:	4798      	blx	r3
   1a6ea:	0003      	movs	r3, r0
   1a6ec:	001a      	movs	r2, r3
   1a6ee:	4b42      	ldr	r3, [pc, #264]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a6f0:	881b      	ldrh	r3, [r3, #0]
   1a6f2:	4013      	ands	r3, r2
   1a6f4:	b29b      	uxth	r3, r3
   1a6f6:	2b00      	cmp	r3, #0
   1a6f8:	d029      	beq.n	1a74e <xQueueSemaphoreTake+0x2c2>
   1a6fa:	69fb      	ldr	r3, [r7, #28]
   1a6fc:	0018      	movs	r0, r3
   1a6fe:	4b3f      	ldr	r3, [pc, #252]	; (1a7fc <xQueueSemaphoreTake+0x370>)
   1a700:	4798      	blx	r3
   1a702:	0003      	movs	r3, r0
   1a704:	001a      	movs	r2, r3
   1a706:	4b3c      	ldr	r3, [pc, #240]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a708:	881b      	ldrh	r3, [r3, #0]
   1a70a:	4013      	ands	r3, r2
   1a70c:	b29b      	uxth	r3, r3
   1a70e:	2b00      	cmp	r3, #0
   1a710:	d01d      	beq.n	1a74e <xQueueSemaphoreTake+0x2c2>
   1a712:	69fb      	ldr	r3, [r7, #28]
   1a714:	0018      	movs	r0, r3
   1a716:	4b3a      	ldr	r3, [pc, #232]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a718:	4798      	blx	r3
   1a71a:	0003      	movs	r3, r0
   1a71c:	001a      	movs	r2, r3
   1a71e:	4b39      	ldr	r3, [pc, #228]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a720:	5c9b      	ldrb	r3, [r3, r2]
   1a722:	3368      	adds	r3, #104	; 0x68
   1a724:	b2db      	uxtb	r3, r3
   1a726:	001d      	movs	r5, r3
   1a728:	69fb      	ldr	r3, [r7, #28]
   1a72a:	0018      	movs	r0, r3
   1a72c:	4b34      	ldr	r3, [pc, #208]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a72e:	4798      	blx	r3
   1a730:	0003      	movs	r3, r0
   1a732:	001a      	movs	r2, r3
   1a734:	4b33      	ldr	r3, [pc, #204]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a736:	5c9c      	ldrb	r4, [r3, r2]
   1a738:	69fb      	ldr	r3, [r7, #28]
   1a73a:	0018      	movs	r0, r3
   1a73c:	4b32      	ldr	r3, [pc, #200]	; (1a808 <xQueueSemaphoreTake+0x37c>)
   1a73e:	4798      	blx	r3
   1a740:	0003      	movs	r3, r0
   1a742:	b2db      	uxtb	r3, r3
   1a744:	001a      	movs	r2, r3
   1a746:	0021      	movs	r1, r4
   1a748:	0028      	movs	r0, r5
   1a74a:	4b30      	ldr	r3, [pc, #192]	; (1a80c <xQueueSemaphoreTake+0x380>)
   1a74c:	4798      	blx	r3
   1a74e:	69fb      	ldr	r3, [r7, #28]
   1a750:	0018      	movs	r0, r3
   1a752:	4b2b      	ldr	r3, [pc, #172]	; (1a800 <xQueueSemaphoreTake+0x374>)
   1a754:	4798      	blx	r3
   1a756:	0003      	movs	r3, r0
   1a758:	001a      	movs	r2, r3
   1a75a:	4b2a      	ldr	r3, [pc, #168]	; (1a804 <xQueueSemaphoreTake+0x378>)
   1a75c:	5c9b      	ldrb	r3, [r3, r2]
   1a75e:	2b02      	cmp	r3, #2
   1a760:	d018      	beq.n	1a794 <xQueueSemaphoreTake+0x308>
   1a762:	4b23      	ldr	r3, [pc, #140]	; (1a7f0 <xQueueSemaphoreTake+0x364>)
   1a764:	4798      	blx	r3
   1a766:	0003      	movs	r3, r0
   1a768:	0018      	movs	r0, r3
   1a76a:	4b22      	ldr	r3, [pc, #136]	; (1a7f4 <xQueueSemaphoreTake+0x368>)
   1a76c:	4798      	blx	r3
   1a76e:	0003      	movs	r3, r0
   1a770:	001a      	movs	r2, r3
   1a772:	4b21      	ldr	r3, [pc, #132]	; (1a7f8 <xQueueSemaphoreTake+0x36c>)
   1a774:	881b      	ldrh	r3, [r3, #0]
   1a776:	4013      	ands	r3, r2
   1a778:	b29b      	uxth	r3, r3
   1a77a:	2b00      	cmp	r3, #0
   1a77c:	d00a      	beq.n	1a794 <xQueueSemaphoreTake+0x308>
   1a77e:	4b1c      	ldr	r3, [pc, #112]	; (1a7f0 <xQueueSemaphoreTake+0x364>)
   1a780:	4798      	blx	r3
   1a782:	0003      	movs	r3, r0
   1a784:	0018      	movs	r0, r3
   1a786:	4b22      	ldr	r3, [pc, #136]	; (1a810 <xQueueSemaphoreTake+0x384>)
   1a788:	4798      	blx	r3
   1a78a:	0003      	movs	r3, r0
   1a78c:	b2db      	uxtb	r3, r3
   1a78e:	0018      	movs	r0, r3
   1a790:	4b29      	ldr	r3, [pc, #164]	; (1a838 <xQueueSemaphoreTake+0x3ac>)
   1a792:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a794:	69fb      	ldr	r3, [r7, #28]
   1a796:	681b      	ldr	r3, [r3, #0]
   1a798:	2b00      	cmp	r3, #0
   1a79a:	d10a      	bne.n	1a7b2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1a79c:	4b13      	ldr	r3, [pc, #76]	; (1a7ec <xQueueSemaphoreTake+0x360>)
   1a79e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1a7a0:	69fb      	ldr	r3, [r7, #28]
   1a7a2:	685b      	ldr	r3, [r3, #4]
   1a7a4:	0018      	movs	r0, r3
   1a7a6:	4b25      	ldr	r3, [pc, #148]	; (1a83c <xQueueSemaphoreTake+0x3b0>)
   1a7a8:	4798      	blx	r3
   1a7aa:	0003      	movs	r3, r0
   1a7ac:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1a7ae:	4b1d      	ldr	r3, [pc, #116]	; (1a824 <xQueueSemaphoreTake+0x398>)
   1a7b0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a7b2:	69fb      	ldr	r3, [r7, #28]
   1a7b4:	3324      	adds	r3, #36	; 0x24
   1a7b6:	683a      	ldr	r2, [r7, #0]
   1a7b8:	0011      	movs	r1, r2
   1a7ba:	0018      	movs	r0, r3
   1a7bc:	4b20      	ldr	r3, [pc, #128]	; (1a840 <xQueueSemaphoreTake+0x3b4>)
   1a7be:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a7c0:	69fb      	ldr	r3, [r7, #28]
   1a7c2:	0018      	movs	r0, r3
   1a7c4:	4b1f      	ldr	r3, [pc, #124]	; (1a844 <xQueueSemaphoreTake+0x3b8>)
   1a7c6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a7c8:	4b1f      	ldr	r3, [pc, #124]	; (1a848 <xQueueSemaphoreTake+0x3bc>)
   1a7ca:	4798      	blx	r3
   1a7cc:	1e03      	subs	r3, r0, #0
   1a7ce:	d000      	beq.n	1a7d2 <xQueueSemaphoreTake+0x346>
   1a7d0:	e680      	b.n	1a4d4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1a7d2:	4b13      	ldr	r3, [pc, #76]	; (1a820 <xQueueSemaphoreTake+0x394>)
   1a7d4:	4798      	blx	r3
   1a7d6:	e67d      	b.n	1a4d4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1a7d8:	69fb      	ldr	r3, [r7, #28]
   1a7da:	0018      	movs	r0, r3
   1a7dc:	4b19      	ldr	r3, [pc, #100]	; (1a844 <xQueueSemaphoreTake+0x3b8>)
   1a7de:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a7e0:	4b19      	ldr	r3, [pc, #100]	; (1a848 <xQueueSemaphoreTake+0x3bc>)
   1a7e2:	4798      	blx	r3
   1a7e4:	e676      	b.n	1a4d4 <xQueueSemaphoreTake+0x48>
   1a7e6:	46c0      	nop			; (mov r8, r8)
   1a7e8:	0001bf09 	.word	0x0001bf09
   1a7ec:	000191e9 	.word	0x000191e9
   1a7f0:	0001747d 	.word	0x0001747d
   1a7f4:	000171e1 	.word	0x000171e1
   1a7f8:	20000100 	.word	0x20000100
   1a7fc:	000172a1 	.word	0x000172a1
   1a800:	000171a1 	.word	0x000171a1
   1a804:	200000f4 	.word	0x200000f4
   1a808:	00017281 	.word	0x00017281
   1a80c:	00017bd9 	.word	0x00017bd9
   1a810:	000171c1 	.word	0x000171c1
   1a814:	00018235 	.word	0x00018235
   1a818:	0001c3d5 	.word	0x0001c3d5
   1a81c:	0001ba79 	.word	0x0001ba79
   1a820:	000191d1 	.word	0x000191d1
   1a824:	0001920d 	.word	0x0001920d
   1a828:	0001bbb9 	.word	0x0001bbb9
   1a82c:	0001b4a1 	.word	0x0001b4a1
   1a830:	0001bbe1 	.word	0x0001bbe1
   1a834:	0001abd5 	.word	0x0001abd5
   1a838:	00018371 	.word	0x00018371
   1a83c:	0001bf41 	.word	0x0001bf41
   1a840:	0001b955 	.word	0x0001b955
   1a844:	0001aae5 	.word	0x0001aae5
   1a848:	0001b4b9 	.word	0x0001b4b9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1a84c:	69fb      	ldr	r3, [r7, #28]
   1a84e:	0018      	movs	r0, r3
   1a850:	4b2d      	ldr	r3, [pc, #180]	; (1a908 <xQueueSemaphoreTake+0x47c>)
   1a852:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a854:	4b2d      	ldr	r3, [pc, #180]	; (1a90c <xQueueSemaphoreTake+0x480>)
   1a856:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a858:	69fb      	ldr	r3, [r7, #28]
   1a85a:	0018      	movs	r0, r3
   1a85c:	4b2c      	ldr	r3, [pc, #176]	; (1a910 <xQueueSemaphoreTake+0x484>)
   1a85e:	4798      	blx	r3
   1a860:	1e03      	subs	r3, r0, #0
   1a862:	d100      	bne.n	1a866 <xQueueSemaphoreTake+0x3da>
   1a864:	e636      	b.n	1a4d4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1a866:	6a3b      	ldr	r3, [r7, #32]
   1a868:	2b00      	cmp	r3, #0
   1a86a:	d010      	beq.n	1a88e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1a86c:	4b29      	ldr	r3, [pc, #164]	; (1a914 <xQueueSemaphoreTake+0x488>)
   1a86e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1a870:	69fb      	ldr	r3, [r7, #28]
   1a872:	0018      	movs	r0, r3
   1a874:	4b28      	ldr	r3, [pc, #160]	; (1a918 <xQueueSemaphoreTake+0x48c>)
   1a876:	4798      	blx	r3
   1a878:	0003      	movs	r3, r0
   1a87a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1a87c:	69fb      	ldr	r3, [r7, #28]
   1a87e:	685b      	ldr	r3, [r3, #4]
   1a880:	697a      	ldr	r2, [r7, #20]
   1a882:	0011      	movs	r1, r2
   1a884:	0018      	movs	r0, r3
   1a886:	4b25      	ldr	r3, [pc, #148]	; (1a91c <xQueueSemaphoreTake+0x490>)
   1a888:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1a88a:	4b25      	ldr	r3, [pc, #148]	; (1a920 <xQueueSemaphoreTake+0x494>)
   1a88c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a88e:	4b25      	ldr	r3, [pc, #148]	; (1a924 <xQueueSemaphoreTake+0x498>)
   1a890:	4798      	blx	r3
   1a892:	0003      	movs	r3, r0
   1a894:	0018      	movs	r0, r3
   1a896:	4b24      	ldr	r3, [pc, #144]	; (1a928 <xQueueSemaphoreTake+0x49c>)
   1a898:	4798      	blx	r3
   1a89a:	0003      	movs	r3, r0
   1a89c:	001a      	movs	r2, r3
   1a89e:	4b23      	ldr	r3, [pc, #140]	; (1a92c <xQueueSemaphoreTake+0x4a0>)
   1a8a0:	881b      	ldrh	r3, [r3, #0]
   1a8a2:	4013      	ands	r3, r2
   1a8a4:	b29b      	uxth	r3, r3
   1a8a6:	2b00      	cmp	r3, #0
   1a8a8:	d029      	beq.n	1a8fe <xQueueSemaphoreTake+0x472>
   1a8aa:	69fb      	ldr	r3, [r7, #28]
   1a8ac:	0018      	movs	r0, r3
   1a8ae:	4b20      	ldr	r3, [pc, #128]	; (1a930 <xQueueSemaphoreTake+0x4a4>)
   1a8b0:	4798      	blx	r3
   1a8b2:	0003      	movs	r3, r0
   1a8b4:	001a      	movs	r2, r3
   1a8b6:	4b1d      	ldr	r3, [pc, #116]	; (1a92c <xQueueSemaphoreTake+0x4a0>)
   1a8b8:	881b      	ldrh	r3, [r3, #0]
   1a8ba:	4013      	ands	r3, r2
   1a8bc:	b29b      	uxth	r3, r3
   1a8be:	2b00      	cmp	r3, #0
   1a8c0:	d01d      	beq.n	1a8fe <xQueueSemaphoreTake+0x472>
   1a8c2:	69fb      	ldr	r3, [r7, #28]
   1a8c4:	0018      	movs	r0, r3
   1a8c6:	4b1b      	ldr	r3, [pc, #108]	; (1a934 <xQueueSemaphoreTake+0x4a8>)
   1a8c8:	4798      	blx	r3
   1a8ca:	0003      	movs	r3, r0
   1a8cc:	001a      	movs	r2, r3
   1a8ce:	4b1a      	ldr	r3, [pc, #104]	; (1a938 <xQueueSemaphoreTake+0x4ac>)
   1a8d0:	5c9b      	ldrb	r3, [r3, r2]
   1a8d2:	3350      	adds	r3, #80	; 0x50
   1a8d4:	b2db      	uxtb	r3, r3
   1a8d6:	001d      	movs	r5, r3
   1a8d8:	69fb      	ldr	r3, [r7, #28]
   1a8da:	0018      	movs	r0, r3
   1a8dc:	4b15      	ldr	r3, [pc, #84]	; (1a934 <xQueueSemaphoreTake+0x4a8>)
   1a8de:	4798      	blx	r3
   1a8e0:	0003      	movs	r3, r0
   1a8e2:	001a      	movs	r2, r3
   1a8e4:	4b14      	ldr	r3, [pc, #80]	; (1a938 <xQueueSemaphoreTake+0x4ac>)
   1a8e6:	5c9c      	ldrb	r4, [r3, r2]
   1a8e8:	69fb      	ldr	r3, [r7, #28]
   1a8ea:	0018      	movs	r0, r3
   1a8ec:	4b13      	ldr	r3, [pc, #76]	; (1a93c <xQueueSemaphoreTake+0x4b0>)
   1a8ee:	4798      	blx	r3
   1a8f0:	0003      	movs	r3, r0
   1a8f2:	b2db      	uxtb	r3, r3
   1a8f4:	001a      	movs	r2, r3
   1a8f6:	0021      	movs	r1, r4
   1a8f8:	0028      	movs	r0, r5
   1a8fa:	4b11      	ldr	r3, [pc, #68]	; (1a940 <xQueueSemaphoreTake+0x4b4>)
   1a8fc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a8fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a900:	0018      	movs	r0, r3
   1a902:	46bd      	mov	sp, r7
   1a904:	b00a      	add	sp, #40	; 0x28
   1a906:	bdb0      	pop	{r4, r5, r7, pc}
   1a908:	0001aae5 	.word	0x0001aae5
   1a90c:	0001b4b9 	.word	0x0001b4b9
   1a910:	0001abd5 	.word	0x0001abd5
   1a914:	000191e9 	.word	0x000191e9
   1a918:	0001a987 	.word	0x0001a987
   1a91c:	0001c239 	.word	0x0001c239
   1a920:	0001920d 	.word	0x0001920d
   1a924:	0001747d 	.word	0x0001747d
   1a928:	000171e1 	.word	0x000171e1
   1a92c:	20000100 	.word	0x20000100
   1a930:	000172a1 	.word	0x000172a1
   1a934:	000171a1 	.word	0x000171a1
   1a938:	200000f4 	.word	0x200000f4
   1a93c:	00017281 	.word	0x00017281
   1a940:	00017bd9 	.word	0x00017bd9

0001a944 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1a944:	b580      	push	{r7, lr}
   1a946:	b082      	sub	sp, #8
   1a948:	af00      	add	r7, sp, #0
   1a94a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1a94c:	687b      	ldr	r3, [r7, #4]
   1a94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1a950:	0018      	movs	r0, r3
   1a952:	46bd      	mov	sp, r7
   1a954:	b002      	add	sp, #8
   1a956:	bd80      	pop	{r7, pc}

0001a958 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1a958:	b580      	push	{r7, lr}
   1a95a:	b082      	sub	sp, #8
   1a95c:	af00      	add	r7, sp, #0
   1a95e:	6078      	str	r0, [r7, #4]
   1a960:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1a962:	687b      	ldr	r3, [r7, #4]
   1a964:	683a      	ldr	r2, [r7, #0]
   1a966:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1a968:	46c0      	nop			; (mov r8, r8)
   1a96a:	46bd      	mov	sp, r7
   1a96c:	b002      	add	sp, #8
   1a96e:	bd80      	pop	{r7, pc}

0001a970 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1a970:	b580      	push	{r7, lr}
   1a972:	b082      	sub	sp, #8
   1a974:	af00      	add	r7, sp, #0
   1a976:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1a978:	687b      	ldr	r3, [r7, #4]
   1a97a:	2250      	movs	r2, #80	; 0x50
   1a97c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1a97e:	0018      	movs	r0, r3
   1a980:	46bd      	mov	sp, r7
   1a982:	b002      	add	sp, #8
   1a984:	bd80      	pop	{r7, pc}

0001a986 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1a986:	b580      	push	{r7, lr}
   1a988:	b084      	sub	sp, #16
   1a98a:	af00      	add	r7, sp, #0
   1a98c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1a98e:	687b      	ldr	r3, [r7, #4]
   1a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a992:	2b00      	cmp	r3, #0
   1a994:	d006      	beq.n	1a9a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1a996:	687b      	ldr	r3, [r7, #4]
   1a998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a99a:	681b      	ldr	r3, [r3, #0]
   1a99c:	2205      	movs	r2, #5
   1a99e:	1ad3      	subs	r3, r2, r3
   1a9a0:	60fb      	str	r3, [r7, #12]
   1a9a2:	e001      	b.n	1a9a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1a9a4:	2300      	movs	r3, #0
   1a9a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1a9a8:	68fb      	ldr	r3, [r7, #12]
	}
   1a9aa:	0018      	movs	r0, r3
   1a9ac:	46bd      	mov	sp, r7
   1a9ae:	b004      	add	sp, #16
   1a9b0:	bd80      	pop	{r7, pc}
	...

0001a9b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1a9b4:	b580      	push	{r7, lr}
   1a9b6:	b086      	sub	sp, #24
   1a9b8:	af00      	add	r7, sp, #0
   1a9ba:	60f8      	str	r0, [r7, #12]
   1a9bc:	60b9      	str	r1, [r7, #8]
   1a9be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1a9c0:	2300      	movs	r3, #0
   1a9c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a9c4:	68fb      	ldr	r3, [r7, #12]
   1a9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a9c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a9ca:	68fb      	ldr	r3, [r7, #12]
   1a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9ce:	2b00      	cmp	r3, #0
   1a9d0:	d10e      	bne.n	1a9f0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a9d2:	68fb      	ldr	r3, [r7, #12]
   1a9d4:	681b      	ldr	r3, [r3, #0]
   1a9d6:	2b00      	cmp	r3, #0
   1a9d8:	d14e      	bne.n	1aa78 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1a9da:	68fb      	ldr	r3, [r7, #12]
   1a9dc:	685b      	ldr	r3, [r3, #4]
   1a9de:	0018      	movs	r0, r3
   1a9e0:	4b2a      	ldr	r3, [pc, #168]	; (1aa8c <prvCopyDataToQueue+0xd8>)
   1a9e2:	4798      	blx	r3
   1a9e4:	0003      	movs	r3, r0
   1a9e6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1a9e8:	68fb      	ldr	r3, [r7, #12]
   1a9ea:	2200      	movs	r2, #0
   1a9ec:	605a      	str	r2, [r3, #4]
   1a9ee:	e043      	b.n	1aa78 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1a9f0:	687b      	ldr	r3, [r7, #4]
   1a9f2:	2b00      	cmp	r3, #0
   1a9f4:	d119      	bne.n	1aa2a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1a9f6:	68fb      	ldr	r3, [r7, #12]
   1a9f8:	6898      	ldr	r0, [r3, #8]
   1a9fa:	68fb      	ldr	r3, [r7, #12]
   1a9fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a9fe:	68bb      	ldr	r3, [r7, #8]
   1aa00:	0019      	movs	r1, r3
   1aa02:	4b23      	ldr	r3, [pc, #140]	; (1aa90 <prvCopyDataToQueue+0xdc>)
   1aa04:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1aa06:	68fb      	ldr	r3, [r7, #12]
   1aa08:	689a      	ldr	r2, [r3, #8]
   1aa0a:	68fb      	ldr	r3, [r7, #12]
   1aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa0e:	18d2      	adds	r2, r2, r3
   1aa10:	68fb      	ldr	r3, [r7, #12]
   1aa12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1aa14:	68fb      	ldr	r3, [r7, #12]
   1aa16:	689a      	ldr	r2, [r3, #8]
   1aa18:	68fb      	ldr	r3, [r7, #12]
   1aa1a:	685b      	ldr	r3, [r3, #4]
   1aa1c:	429a      	cmp	r2, r3
   1aa1e:	d32b      	bcc.n	1aa78 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1aa20:	68fb      	ldr	r3, [r7, #12]
   1aa22:	681a      	ldr	r2, [r3, #0]
   1aa24:	68fb      	ldr	r3, [r7, #12]
   1aa26:	609a      	str	r2, [r3, #8]
   1aa28:	e026      	b.n	1aa78 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1aa2a:	68fb      	ldr	r3, [r7, #12]
   1aa2c:	68d8      	ldr	r0, [r3, #12]
   1aa2e:	68fb      	ldr	r3, [r7, #12]
   1aa30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1aa32:	68bb      	ldr	r3, [r7, #8]
   1aa34:	0019      	movs	r1, r3
   1aa36:	4b16      	ldr	r3, [pc, #88]	; (1aa90 <prvCopyDataToQueue+0xdc>)
   1aa38:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1aa3a:	68fb      	ldr	r3, [r7, #12]
   1aa3c:	68da      	ldr	r2, [r3, #12]
   1aa3e:	68fb      	ldr	r3, [r7, #12]
   1aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa42:	425b      	negs	r3, r3
   1aa44:	18d2      	adds	r2, r2, r3
   1aa46:	68fb      	ldr	r3, [r7, #12]
   1aa48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1aa4a:	68fb      	ldr	r3, [r7, #12]
   1aa4c:	68da      	ldr	r2, [r3, #12]
   1aa4e:	68fb      	ldr	r3, [r7, #12]
   1aa50:	681b      	ldr	r3, [r3, #0]
   1aa52:	429a      	cmp	r2, r3
   1aa54:	d207      	bcs.n	1aa66 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1aa56:	68fb      	ldr	r3, [r7, #12]
   1aa58:	685a      	ldr	r2, [r3, #4]
   1aa5a:	68fb      	ldr	r3, [r7, #12]
   1aa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa5e:	425b      	negs	r3, r3
   1aa60:	18d2      	adds	r2, r2, r3
   1aa62:	68fb      	ldr	r3, [r7, #12]
   1aa64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1aa66:	687b      	ldr	r3, [r7, #4]
   1aa68:	2b02      	cmp	r3, #2
   1aa6a:	d105      	bne.n	1aa78 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1aa6c:	693b      	ldr	r3, [r7, #16]
   1aa6e:	2b00      	cmp	r3, #0
   1aa70:	d002      	beq.n	1aa78 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1aa72:	693b      	ldr	r3, [r7, #16]
   1aa74:	3b01      	subs	r3, #1
   1aa76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1aa78:	693b      	ldr	r3, [r7, #16]
   1aa7a:	1c5a      	adds	r2, r3, #1
   1aa7c:	68fb      	ldr	r3, [r7, #12]
   1aa7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1aa80:	697b      	ldr	r3, [r7, #20]
}
   1aa82:	0018      	movs	r0, r3
   1aa84:	46bd      	mov	sp, r7
   1aa86:	b006      	add	sp, #24
   1aa88:	bd80      	pop	{r7, pc}
   1aa8a:	46c0      	nop			; (mov r8, r8)
   1aa8c:	0001c0d1 	.word	0x0001c0d1
   1aa90:	000345d9 	.word	0x000345d9

0001aa94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1aa94:	b580      	push	{r7, lr}
   1aa96:	b082      	sub	sp, #8
   1aa98:	af00      	add	r7, sp, #0
   1aa9a:	6078      	str	r0, [r7, #4]
   1aa9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1aa9e:	687b      	ldr	r3, [r7, #4]
   1aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aaa2:	2b00      	cmp	r3, #0
   1aaa4:	d018      	beq.n	1aad8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1aaa6:	687b      	ldr	r3, [r7, #4]
   1aaa8:	68da      	ldr	r2, [r3, #12]
   1aaaa:	687b      	ldr	r3, [r7, #4]
   1aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aaae:	18d2      	adds	r2, r2, r3
   1aab0:	687b      	ldr	r3, [r7, #4]
   1aab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1aab4:	687b      	ldr	r3, [r7, #4]
   1aab6:	68da      	ldr	r2, [r3, #12]
   1aab8:	687b      	ldr	r3, [r7, #4]
   1aaba:	685b      	ldr	r3, [r3, #4]
   1aabc:	429a      	cmp	r2, r3
   1aabe:	d303      	bcc.n	1aac8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1aac0:	687b      	ldr	r3, [r7, #4]
   1aac2:	681a      	ldr	r2, [r3, #0]
   1aac4:	687b      	ldr	r3, [r7, #4]
   1aac6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1aac8:	687b      	ldr	r3, [r7, #4]
   1aaca:	68d9      	ldr	r1, [r3, #12]
   1aacc:	687b      	ldr	r3, [r7, #4]
   1aace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1aad0:	683b      	ldr	r3, [r7, #0]
   1aad2:	0018      	movs	r0, r3
   1aad4:	4b02      	ldr	r3, [pc, #8]	; (1aae0 <prvCopyDataFromQueue+0x4c>)
   1aad6:	4798      	blx	r3
	}
}
   1aad8:	46c0      	nop			; (mov r8, r8)
   1aada:	46bd      	mov	sp, r7
   1aadc:	b002      	add	sp, #8
   1aade:	bd80      	pop	{r7, pc}
   1aae0:	000345d9 	.word	0x000345d9

0001aae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1aae4:	b580      	push	{r7, lr}
   1aae6:	b084      	sub	sp, #16
   1aae8:	af00      	add	r7, sp, #0
   1aaea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1aaec:	4b34      	ldr	r3, [pc, #208]	; (1abc0 <prvUnlockQueue+0xdc>)
   1aaee:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1aaf0:	230f      	movs	r3, #15
   1aaf2:	18fb      	adds	r3, r7, r3
   1aaf4:	687a      	ldr	r2, [r7, #4]
   1aaf6:	2145      	movs	r1, #69	; 0x45
   1aaf8:	5c52      	ldrb	r2, [r2, r1]
   1aafa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aafc:	e022      	b.n	1ab44 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1aafe:	687b      	ldr	r3, [r7, #4]
   1ab00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ab02:	2b00      	cmp	r3, #0
   1ab04:	d009      	beq.n	1ab1a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ab06:	687b      	ldr	r3, [r7, #4]
   1ab08:	2100      	movs	r1, #0
   1ab0a:	0018      	movs	r0, r3
   1ab0c:	4b2d      	ldr	r3, [pc, #180]	; (1abc4 <prvUnlockQueue+0xe0>)
   1ab0e:	4798      	blx	r3
   1ab10:	1e03      	subs	r3, r0, #0
   1ab12:	d00f      	beq.n	1ab34 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1ab14:	4b2c      	ldr	r3, [pc, #176]	; (1abc8 <prvUnlockQueue+0xe4>)
   1ab16:	4798      	blx	r3
   1ab18:	e00c      	b.n	1ab34 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ab1a:	687b      	ldr	r3, [r7, #4]
   1ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab1e:	2b00      	cmp	r3, #0
   1ab20:	d017      	beq.n	1ab52 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ab22:	687b      	ldr	r3, [r7, #4]
   1ab24:	3324      	adds	r3, #36	; 0x24
   1ab26:	0018      	movs	r0, r3
   1ab28:	4b28      	ldr	r3, [pc, #160]	; (1abcc <prvUnlockQueue+0xe8>)
   1ab2a:	4798      	blx	r3
   1ab2c:	1e03      	subs	r3, r0, #0
   1ab2e:	d001      	beq.n	1ab34 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1ab30:	4b25      	ldr	r3, [pc, #148]	; (1abc8 <prvUnlockQueue+0xe4>)
   1ab32:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1ab34:	230f      	movs	r3, #15
   1ab36:	18fb      	adds	r3, r7, r3
   1ab38:	781b      	ldrb	r3, [r3, #0]
   1ab3a:	3b01      	subs	r3, #1
   1ab3c:	b2da      	uxtb	r2, r3
   1ab3e:	230f      	movs	r3, #15
   1ab40:	18fb      	adds	r3, r7, r3
   1ab42:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ab44:	230f      	movs	r3, #15
   1ab46:	18fb      	adds	r3, r7, r3
   1ab48:	781b      	ldrb	r3, [r3, #0]
   1ab4a:	b25b      	sxtb	r3, r3
   1ab4c:	2b00      	cmp	r3, #0
   1ab4e:	dcd6      	bgt.n	1aafe <prvUnlockQueue+0x1a>
   1ab50:	e000      	b.n	1ab54 <prvUnlockQueue+0x70>
						break;
   1ab52:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1ab54:	687b      	ldr	r3, [r7, #4]
   1ab56:	2245      	movs	r2, #69	; 0x45
   1ab58:	21ff      	movs	r1, #255	; 0xff
   1ab5a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ab5c:	4b1c      	ldr	r3, [pc, #112]	; (1abd0 <prvUnlockQueue+0xec>)
   1ab5e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1ab60:	4b17      	ldr	r3, [pc, #92]	; (1abc0 <prvUnlockQueue+0xdc>)
   1ab62:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1ab64:	230e      	movs	r3, #14
   1ab66:	18fb      	adds	r3, r7, r3
   1ab68:	687a      	ldr	r2, [r7, #4]
   1ab6a:	2144      	movs	r1, #68	; 0x44
   1ab6c:	5c52      	ldrb	r2, [r2, r1]
   1ab6e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ab70:	e014      	b.n	1ab9c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ab72:	687b      	ldr	r3, [r7, #4]
   1ab74:	691b      	ldr	r3, [r3, #16]
   1ab76:	2b00      	cmp	r3, #0
   1ab78:	d017      	beq.n	1abaa <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ab7a:	687b      	ldr	r3, [r7, #4]
   1ab7c:	3310      	adds	r3, #16
   1ab7e:	0018      	movs	r0, r3
   1ab80:	4b12      	ldr	r3, [pc, #72]	; (1abcc <prvUnlockQueue+0xe8>)
   1ab82:	4798      	blx	r3
   1ab84:	1e03      	subs	r3, r0, #0
   1ab86:	d001      	beq.n	1ab8c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1ab88:	4b0f      	ldr	r3, [pc, #60]	; (1abc8 <prvUnlockQueue+0xe4>)
   1ab8a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1ab8c:	230e      	movs	r3, #14
   1ab8e:	18fb      	adds	r3, r7, r3
   1ab90:	781b      	ldrb	r3, [r3, #0]
   1ab92:	3b01      	subs	r3, #1
   1ab94:	b2da      	uxtb	r2, r3
   1ab96:	230e      	movs	r3, #14
   1ab98:	18fb      	adds	r3, r7, r3
   1ab9a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ab9c:	230e      	movs	r3, #14
   1ab9e:	18fb      	adds	r3, r7, r3
   1aba0:	781b      	ldrb	r3, [r3, #0]
   1aba2:	b25b      	sxtb	r3, r3
   1aba4:	2b00      	cmp	r3, #0
   1aba6:	dce4      	bgt.n	1ab72 <prvUnlockQueue+0x8e>
   1aba8:	e000      	b.n	1abac <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1abaa:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1abac:	687b      	ldr	r3, [r7, #4]
   1abae:	2244      	movs	r2, #68	; 0x44
   1abb0:	21ff      	movs	r1, #255	; 0xff
   1abb2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1abb4:	4b06      	ldr	r3, [pc, #24]	; (1abd0 <prvUnlockQueue+0xec>)
   1abb6:	4798      	blx	r3
}
   1abb8:	46c0      	nop			; (mov r8, r8)
   1abba:	46bd      	mov	sp, r7
   1abbc:	b004      	add	sp, #16
   1abbe:	bd80      	pop	{r7, pc}
   1abc0:	000191e9 	.word	0x000191e9
   1abc4:	0001acb9 	.word	0x0001acb9
   1abc8:	0001bc8d 	.word	0x0001bc8d
   1abcc:	0001ba79 	.word	0x0001ba79
   1abd0:	0001920d 	.word	0x0001920d

0001abd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1abd4:	b580      	push	{r7, lr}
   1abd6:	b084      	sub	sp, #16
   1abd8:	af00      	add	r7, sp, #0
   1abda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1abdc:	4b08      	ldr	r3, [pc, #32]	; (1ac00 <prvIsQueueEmpty+0x2c>)
   1abde:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1abe0:	687b      	ldr	r3, [r7, #4]
   1abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1abe4:	2b00      	cmp	r3, #0
   1abe6:	d102      	bne.n	1abee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1abe8:	2301      	movs	r3, #1
   1abea:	60fb      	str	r3, [r7, #12]
   1abec:	e001      	b.n	1abf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1abee:	2300      	movs	r3, #0
   1abf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1abf2:	4b04      	ldr	r3, [pc, #16]	; (1ac04 <prvIsQueueEmpty+0x30>)
   1abf4:	4798      	blx	r3

	return xReturn;
   1abf6:	68fb      	ldr	r3, [r7, #12]
}
   1abf8:	0018      	movs	r0, r3
   1abfa:	46bd      	mov	sp, r7
   1abfc:	b004      	add	sp, #16
   1abfe:	bd80      	pop	{r7, pc}
   1ac00:	000191e9 	.word	0x000191e9
   1ac04:	0001920d 	.word	0x0001920d

0001ac08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1ac08:	b580      	push	{r7, lr}
   1ac0a:	b084      	sub	sp, #16
   1ac0c:	af00      	add	r7, sp, #0
   1ac0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1ac10:	4b09      	ldr	r3, [pc, #36]	; (1ac38 <prvIsQueueFull+0x30>)
   1ac12:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1ac14:	687b      	ldr	r3, [r7, #4]
   1ac16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ac18:	687b      	ldr	r3, [r7, #4]
   1ac1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ac1c:	429a      	cmp	r2, r3
   1ac1e:	d102      	bne.n	1ac26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1ac20:	2301      	movs	r3, #1
   1ac22:	60fb      	str	r3, [r7, #12]
   1ac24:	e001      	b.n	1ac2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1ac26:	2300      	movs	r3, #0
   1ac28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ac2a:	4b04      	ldr	r3, [pc, #16]	; (1ac3c <prvIsQueueFull+0x34>)
   1ac2c:	4798      	blx	r3

	return xReturn;
   1ac2e:	68fb      	ldr	r3, [r7, #12]
}
   1ac30:	0018      	movs	r0, r3
   1ac32:	46bd      	mov	sp, r7
   1ac34:	b004      	add	sp, #16
   1ac36:	bd80      	pop	{r7, pc}
   1ac38:	000191e9 	.word	0x000191e9
   1ac3c:	0001920d 	.word	0x0001920d

0001ac40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ac40:	b580      	push	{r7, lr}
   1ac42:	b086      	sub	sp, #24
   1ac44:	af00      	add	r7, sp, #0
   1ac46:	60f8      	str	r0, [r7, #12]
   1ac48:	60b9      	str	r1, [r7, #8]
   1ac4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ac4c:	68fb      	ldr	r3, [r7, #12]
   1ac4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1ac50:	4b15      	ldr	r3, [pc, #84]	; (1aca8 <vQueueWaitForMessageRestricted+0x68>)
   1ac52:	4798      	blx	r3
   1ac54:	697b      	ldr	r3, [r7, #20]
   1ac56:	2244      	movs	r2, #68	; 0x44
   1ac58:	5c9b      	ldrb	r3, [r3, r2]
   1ac5a:	b25b      	sxtb	r3, r3
   1ac5c:	3301      	adds	r3, #1
   1ac5e:	d103      	bne.n	1ac68 <vQueueWaitForMessageRestricted+0x28>
   1ac60:	697b      	ldr	r3, [r7, #20]
   1ac62:	2244      	movs	r2, #68	; 0x44
   1ac64:	2100      	movs	r1, #0
   1ac66:	5499      	strb	r1, [r3, r2]
   1ac68:	697b      	ldr	r3, [r7, #20]
   1ac6a:	2245      	movs	r2, #69	; 0x45
   1ac6c:	5c9b      	ldrb	r3, [r3, r2]
   1ac6e:	b25b      	sxtb	r3, r3
   1ac70:	3301      	adds	r3, #1
   1ac72:	d103      	bne.n	1ac7c <vQueueWaitForMessageRestricted+0x3c>
   1ac74:	697b      	ldr	r3, [r7, #20]
   1ac76:	2245      	movs	r2, #69	; 0x45
   1ac78:	2100      	movs	r1, #0
   1ac7a:	5499      	strb	r1, [r3, r2]
   1ac7c:	4b0b      	ldr	r3, [pc, #44]	; (1acac <vQueueWaitForMessageRestricted+0x6c>)
   1ac7e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1ac80:	697b      	ldr	r3, [r7, #20]
   1ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ac84:	2b00      	cmp	r3, #0
   1ac86:	d106      	bne.n	1ac96 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1ac88:	697b      	ldr	r3, [r7, #20]
   1ac8a:	3324      	adds	r3, #36	; 0x24
   1ac8c:	687a      	ldr	r2, [r7, #4]
   1ac8e:	68b9      	ldr	r1, [r7, #8]
   1ac90:	0018      	movs	r0, r3
   1ac92:	4b07      	ldr	r3, [pc, #28]	; (1acb0 <vQueueWaitForMessageRestricted+0x70>)
   1ac94:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ac96:	697b      	ldr	r3, [r7, #20]
   1ac98:	0018      	movs	r0, r3
   1ac9a:	4b06      	ldr	r3, [pc, #24]	; (1acb4 <vQueueWaitForMessageRestricted+0x74>)
   1ac9c:	4798      	blx	r3
	}
   1ac9e:	46c0      	nop			; (mov r8, r8)
   1aca0:	46bd      	mov	sp, r7
   1aca2:	b006      	add	sp, #24
   1aca4:	bd80      	pop	{r7, pc}
   1aca6:	46c0      	nop			; (mov r8, r8)
   1aca8:	000191e9 	.word	0x000191e9
   1acac:	0001920d 	.word	0x0001920d
   1acb0:	0001b999 	.word	0x0001b999
   1acb4:	0001aae5 	.word	0x0001aae5

0001acb8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1acb8:	b5b0      	push	{r4, r5, r7, lr}
   1acba:	b086      	sub	sp, #24
   1acbc:	af00      	add	r7, sp, #0
   1acbe:	6078      	str	r0, [r7, #4]
   1acc0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1acc2:	687b      	ldr	r3, [r7, #4]
   1acc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1acc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1acc8:	2300      	movs	r3, #0
   1acca:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1accc:	693b      	ldr	r3, [r7, #16]
   1acce:	2b00      	cmp	r3, #0
   1acd0:	d101      	bne.n	1acd6 <prvNotifyQueueSetContainer+0x1e>
   1acd2:	b672      	cpsid	i
   1acd4:	e7fe      	b.n	1acd4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1acd6:	693b      	ldr	r3, [r7, #16]
   1acd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1acda:	693b      	ldr	r3, [r7, #16]
   1acdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1acde:	429a      	cmp	r2, r3
   1ace0:	d301      	bcc.n	1ace6 <prvNotifyQueueSetContainer+0x2e>
   1ace2:	b672      	cpsid	i
   1ace4:	e7fe      	b.n	1ace4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1ace6:	693b      	ldr	r3, [r7, #16]
   1ace8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1acea:	693b      	ldr	r3, [r7, #16]
   1acec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1acee:	429a      	cmp	r2, r3
   1acf0:	d300      	bcc.n	1acf4 <prvNotifyQueueSetContainer+0x3c>
   1acf2:	e08b      	b.n	1ae0c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1acf4:	230f      	movs	r3, #15
   1acf6:	18fb      	adds	r3, r7, r3
   1acf8:	693a      	ldr	r2, [r7, #16]
   1acfa:	2145      	movs	r1, #69	; 0x45
   1acfc:	5c52      	ldrb	r2, [r2, r1]
   1acfe:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1ad00:	4b45      	ldr	r3, [pc, #276]	; (1ae18 <prvNotifyQueueSetContainer+0x160>)
   1ad02:	4798      	blx	r3
   1ad04:	0003      	movs	r3, r0
   1ad06:	0018      	movs	r0, r3
   1ad08:	4b44      	ldr	r3, [pc, #272]	; (1ae1c <prvNotifyQueueSetContainer+0x164>)
   1ad0a:	4798      	blx	r3
   1ad0c:	0003      	movs	r3, r0
   1ad0e:	001a      	movs	r2, r3
   1ad10:	4b43      	ldr	r3, [pc, #268]	; (1ae20 <prvNotifyQueueSetContainer+0x168>)
   1ad12:	881b      	ldrh	r3, [r3, #0]
   1ad14:	4013      	ands	r3, r2
   1ad16:	b29b      	uxth	r3, r3
   1ad18:	2b00      	cmp	r3, #0
   1ad1a:	d02e      	beq.n	1ad7a <prvNotifyQueueSetContainer+0xc2>
   1ad1c:	693b      	ldr	r3, [r7, #16]
   1ad1e:	0018      	movs	r0, r3
   1ad20:	4b40      	ldr	r3, [pc, #256]	; (1ae24 <prvNotifyQueueSetContainer+0x16c>)
   1ad22:	4798      	blx	r3
   1ad24:	0003      	movs	r3, r0
   1ad26:	001a      	movs	r2, r3
   1ad28:	4b3d      	ldr	r3, [pc, #244]	; (1ae20 <prvNotifyQueueSetContainer+0x168>)
   1ad2a:	881b      	ldrh	r3, [r3, #0]
   1ad2c:	4013      	ands	r3, r2
   1ad2e:	b29b      	uxth	r3, r3
   1ad30:	2b00      	cmp	r3, #0
   1ad32:	d022      	beq.n	1ad7a <prvNotifyQueueSetContainer+0xc2>
   1ad34:	683b      	ldr	r3, [r7, #0]
   1ad36:	2b00      	cmp	r3, #0
   1ad38:	d10b      	bne.n	1ad52 <prvNotifyQueueSetContainer+0x9a>
   1ad3a:	693b      	ldr	r3, [r7, #16]
   1ad3c:	0018      	movs	r0, r3
   1ad3e:	4b3a      	ldr	r3, [pc, #232]	; (1ae28 <prvNotifyQueueSetContainer+0x170>)
   1ad40:	4798      	blx	r3
   1ad42:	0003      	movs	r3, r0
   1ad44:	001a      	movs	r2, r3
   1ad46:	4b39      	ldr	r3, [pc, #228]	; (1ae2c <prvNotifyQueueSetContainer+0x174>)
   1ad48:	5c9b      	ldrb	r3, [r3, r2]
   1ad4a:	3320      	adds	r3, #32
   1ad4c:	b2db      	uxtb	r3, r3
   1ad4e:	001d      	movs	r5, r3
   1ad50:	e000      	b.n	1ad54 <prvNotifyQueueSetContainer+0x9c>
   1ad52:	2525      	movs	r5, #37	; 0x25
   1ad54:	693b      	ldr	r3, [r7, #16]
   1ad56:	0018      	movs	r0, r3
   1ad58:	4b33      	ldr	r3, [pc, #204]	; (1ae28 <prvNotifyQueueSetContainer+0x170>)
   1ad5a:	4798      	blx	r3
   1ad5c:	0003      	movs	r3, r0
   1ad5e:	001a      	movs	r2, r3
   1ad60:	4b32      	ldr	r3, [pc, #200]	; (1ae2c <prvNotifyQueueSetContainer+0x174>)
   1ad62:	5c9c      	ldrb	r4, [r3, r2]
   1ad64:	693b      	ldr	r3, [r7, #16]
   1ad66:	0018      	movs	r0, r3
   1ad68:	4b31      	ldr	r3, [pc, #196]	; (1ae30 <prvNotifyQueueSetContainer+0x178>)
   1ad6a:	4798      	blx	r3
   1ad6c:	0003      	movs	r3, r0
   1ad6e:	b2db      	uxtb	r3, r3
   1ad70:	001a      	movs	r2, r3
   1ad72:	0021      	movs	r1, r4
   1ad74:	0028      	movs	r0, r5
   1ad76:	4b2f      	ldr	r3, [pc, #188]	; (1ae34 <prvNotifyQueueSetContainer+0x17c>)
   1ad78:	4798      	blx	r3
   1ad7a:	693b      	ldr	r3, [r7, #16]
   1ad7c:	0018      	movs	r0, r3
   1ad7e:	4b2a      	ldr	r3, [pc, #168]	; (1ae28 <prvNotifyQueueSetContainer+0x170>)
   1ad80:	4798      	blx	r3
   1ad82:	0003      	movs	r3, r0
   1ad84:	001a      	movs	r2, r3
   1ad86:	4b29      	ldr	r3, [pc, #164]	; (1ae2c <prvNotifyQueueSetContainer+0x174>)
   1ad88:	5c9c      	ldrb	r4, [r3, r2]
   1ad8a:	693b      	ldr	r3, [r7, #16]
   1ad8c:	0018      	movs	r0, r3
   1ad8e:	4b28      	ldr	r3, [pc, #160]	; (1ae30 <prvNotifyQueueSetContainer+0x178>)
   1ad90:	4798      	blx	r3
   1ad92:	0003      	movs	r3, r0
   1ad94:	b2dd      	uxtb	r5, r3
   1ad96:	693b      	ldr	r3, [r7, #16]
   1ad98:	0018      	movs	r0, r3
   1ad9a:	4b23      	ldr	r3, [pc, #140]	; (1ae28 <prvNotifyQueueSetContainer+0x170>)
   1ad9c:	4798      	blx	r3
   1ad9e:	0003      	movs	r3, r0
   1ada0:	001a      	movs	r2, r3
   1ada2:	4b22      	ldr	r3, [pc, #136]	; (1ae2c <prvNotifyQueueSetContainer+0x174>)
   1ada4:	5c9b      	ldrb	r3, [r3, r2]
   1ada6:	2b02      	cmp	r3, #2
   1ada8:	d005      	beq.n	1adb6 <prvNotifyQueueSetContainer+0xfe>
   1adaa:	693b      	ldr	r3, [r7, #16]
   1adac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1adae:	b2db      	uxtb	r3, r3
   1adb0:	3301      	adds	r3, #1
   1adb2:	b2db      	uxtb	r3, r3
   1adb4:	e000      	b.n	1adb8 <prvNotifyQueueSetContainer+0x100>
   1adb6:	2300      	movs	r3, #0
   1adb8:	001a      	movs	r2, r3
   1adba:	0029      	movs	r1, r5
   1adbc:	0020      	movs	r0, r4
   1adbe:	4b1e      	ldr	r3, [pc, #120]	; (1ae38 <prvNotifyQueueSetContainer+0x180>)
   1adc0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1adc2:	683a      	ldr	r2, [r7, #0]
   1adc4:	1d39      	adds	r1, r7, #4
   1adc6:	693b      	ldr	r3, [r7, #16]
   1adc8:	0018      	movs	r0, r3
   1adca:	4b1c      	ldr	r3, [pc, #112]	; (1ae3c <prvNotifyQueueSetContainer+0x184>)
   1adcc:	4798      	blx	r3
   1adce:	0003      	movs	r3, r0
   1add0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1add2:	230f      	movs	r3, #15
   1add4:	18fb      	adds	r3, r7, r3
   1add6:	781b      	ldrb	r3, [r3, #0]
   1add8:	b25b      	sxtb	r3, r3
   1adda:	3301      	adds	r3, #1
   1addc:	d10d      	bne.n	1adfa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1adde:	693b      	ldr	r3, [r7, #16]
   1ade0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ade2:	2b00      	cmp	r3, #0
   1ade4:	d012      	beq.n	1ae0c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1ade6:	693b      	ldr	r3, [r7, #16]
   1ade8:	3324      	adds	r3, #36	; 0x24
   1adea:	0018      	movs	r0, r3
   1adec:	4b14      	ldr	r3, [pc, #80]	; (1ae40 <prvNotifyQueueSetContainer+0x188>)
   1adee:	4798      	blx	r3
   1adf0:	1e03      	subs	r3, r0, #0
   1adf2:	d00b      	beq.n	1ae0c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1adf4:	2301      	movs	r3, #1
   1adf6:	617b      	str	r3, [r7, #20]
   1adf8:	e008      	b.n	1ae0c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1adfa:	230f      	movs	r3, #15
   1adfc:	18fb      	adds	r3, r7, r3
   1adfe:	781b      	ldrb	r3, [r3, #0]
   1ae00:	3301      	adds	r3, #1
   1ae02:	b2db      	uxtb	r3, r3
   1ae04:	b259      	sxtb	r1, r3
   1ae06:	693b      	ldr	r3, [r7, #16]
   1ae08:	2245      	movs	r2, #69	; 0x45
   1ae0a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ae0c:	697b      	ldr	r3, [r7, #20]
	}
   1ae0e:	0018      	movs	r0, r3
   1ae10:	46bd      	mov	sp, r7
   1ae12:	b006      	add	sp, #24
   1ae14:	bdb0      	pop	{r4, r5, r7, pc}
   1ae16:	46c0      	nop			; (mov r8, r8)
   1ae18:	0001747d 	.word	0x0001747d
   1ae1c:	000171e1 	.word	0x000171e1
   1ae20:	20000100 	.word	0x20000100
   1ae24:	000172a1 	.word	0x000172a1
   1ae28:	000171a1 	.word	0x000171a1
   1ae2c:	200000f4 	.word	0x200000f4
   1ae30:	00017281 	.word	0x00017281
   1ae34:	00017bd9 	.word	0x00017bd9
   1ae38:	00018235 	.word	0x00018235
   1ae3c:	0001a9b5 	.word	0x0001a9b5
   1ae40:	0001ba79 	.word	0x0001ba79

0001ae44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1ae44:	b590      	push	{r4, r7, lr}
   1ae46:	b08d      	sub	sp, #52	; 0x34
   1ae48:	af04      	add	r7, sp, #16
   1ae4a:	60f8      	str	r0, [r7, #12]
   1ae4c:	60b9      	str	r1, [r7, #8]
   1ae4e:	603b      	str	r3, [r7, #0]
   1ae50:	1dbb      	adds	r3, r7, #6
   1ae52:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ae54:	1dbb      	adds	r3, r7, #6
   1ae56:	881b      	ldrh	r3, [r3, #0]
   1ae58:	009b      	lsls	r3, r3, #2
   1ae5a:	0018      	movs	r0, r3
   1ae5c:	4b1d      	ldr	r3, [pc, #116]	; (1aed4 <xTaskCreate+0x90>)
   1ae5e:	4798      	blx	r3
   1ae60:	0003      	movs	r3, r0
   1ae62:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1ae64:	697b      	ldr	r3, [r7, #20]
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	d010      	beq.n	1ae8c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1ae6a:	2054      	movs	r0, #84	; 0x54
   1ae6c:	4b19      	ldr	r3, [pc, #100]	; (1aed4 <xTaskCreate+0x90>)
   1ae6e:	4798      	blx	r3
   1ae70:	0003      	movs	r3, r0
   1ae72:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1ae74:	69fb      	ldr	r3, [r7, #28]
   1ae76:	2b00      	cmp	r3, #0
   1ae78:	d003      	beq.n	1ae82 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1ae7a:	69fb      	ldr	r3, [r7, #28]
   1ae7c:	697a      	ldr	r2, [r7, #20]
   1ae7e:	631a      	str	r2, [r3, #48]	; 0x30
   1ae80:	e006      	b.n	1ae90 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1ae82:	697b      	ldr	r3, [r7, #20]
   1ae84:	0018      	movs	r0, r3
   1ae86:	4b14      	ldr	r3, [pc, #80]	; (1aed8 <xTaskCreate+0x94>)
   1ae88:	4798      	blx	r3
   1ae8a:	e001      	b.n	1ae90 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ae90:	69fb      	ldr	r3, [r7, #28]
   1ae92:	2b00      	cmp	r3, #0
   1ae94:	d016      	beq.n	1aec4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ae96:	1dbb      	adds	r3, r7, #6
   1ae98:	881a      	ldrh	r2, [r3, #0]
   1ae9a:	683c      	ldr	r4, [r7, #0]
   1ae9c:	68b9      	ldr	r1, [r7, #8]
   1ae9e:	68f8      	ldr	r0, [r7, #12]
   1aea0:	2300      	movs	r3, #0
   1aea2:	9303      	str	r3, [sp, #12]
   1aea4:	69fb      	ldr	r3, [r7, #28]
   1aea6:	9302      	str	r3, [sp, #8]
   1aea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aeaa:	9301      	str	r3, [sp, #4]
   1aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aeae:	9300      	str	r3, [sp, #0]
   1aeb0:	0023      	movs	r3, r4
   1aeb2:	4c0a      	ldr	r4, [pc, #40]	; (1aedc <xTaskCreate+0x98>)
   1aeb4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1aeb6:	69fb      	ldr	r3, [r7, #28]
   1aeb8:	0018      	movs	r0, r3
   1aeba:	4b09      	ldr	r3, [pc, #36]	; (1aee0 <xTaskCreate+0x9c>)
   1aebc:	4798      	blx	r3
			xReturn = pdPASS;
   1aebe:	2301      	movs	r3, #1
   1aec0:	61bb      	str	r3, [r7, #24]
   1aec2:	e002      	b.n	1aeca <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1aec4:	2301      	movs	r3, #1
   1aec6:	425b      	negs	r3, r3
   1aec8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1aeca:	69bb      	ldr	r3, [r7, #24]
	}
   1aecc:	0018      	movs	r0, r3
   1aece:	46bd      	mov	sp, r7
   1aed0:	b009      	add	sp, #36	; 0x24
   1aed2:	bd90      	pop	{r4, r7, pc}
   1aed4:	00019321 	.word	0x00019321
   1aed8:	000193e5 	.word	0x000193e5
   1aedc:	0001aee5 	.word	0x0001aee5
   1aee0:	0001aff5 	.word	0x0001aff5

0001aee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1aee4:	b580      	push	{r7, lr}
   1aee6:	b086      	sub	sp, #24
   1aee8:	af00      	add	r7, sp, #0
   1aeea:	60f8      	str	r0, [r7, #12]
   1aeec:	60b9      	str	r1, [r7, #8]
   1aeee:	607a      	str	r2, [r7, #4]
   1aef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aef4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1aef6:	687b      	ldr	r3, [r7, #4]
   1aef8:	009b      	lsls	r3, r3, #2
   1aefa:	001a      	movs	r2, r3
   1aefc:	21a5      	movs	r1, #165	; 0xa5
   1aefe:	4b39      	ldr	r3, [pc, #228]	; (1afe4 <prvInitialiseNewTask+0x100>)
   1af00:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1af06:	687b      	ldr	r3, [r7, #4]
   1af08:	4937      	ldr	r1, [pc, #220]	; (1afe8 <prvInitialiseNewTask+0x104>)
   1af0a:	468c      	mov	ip, r1
   1af0c:	4463      	add	r3, ip
   1af0e:	009b      	lsls	r3, r3, #2
   1af10:	18d3      	adds	r3, r2, r3
   1af12:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1af14:	693b      	ldr	r3, [r7, #16]
   1af16:	2207      	movs	r2, #7
   1af18:	4393      	bics	r3, r2
   1af1a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1af1c:	693b      	ldr	r3, [r7, #16]
   1af1e:	2207      	movs	r2, #7
   1af20:	4013      	ands	r3, r2
   1af22:	d001      	beq.n	1af28 <prvInitialiseNewTask+0x44>
   1af24:	b672      	cpsid	i
   1af26:	e7fe      	b.n	1af26 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1af28:	2300      	movs	r3, #0
   1af2a:	617b      	str	r3, [r7, #20]
   1af2c:	e013      	b.n	1af56 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1af2e:	68ba      	ldr	r2, [r7, #8]
   1af30:	697b      	ldr	r3, [r7, #20]
   1af32:	18d3      	adds	r3, r2, r3
   1af34:	7818      	ldrb	r0, [r3, #0]
   1af36:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af38:	2134      	movs	r1, #52	; 0x34
   1af3a:	697b      	ldr	r3, [r7, #20]
   1af3c:	18d3      	adds	r3, r2, r3
   1af3e:	185b      	adds	r3, r3, r1
   1af40:	1c02      	adds	r2, r0, #0
   1af42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1af44:	68ba      	ldr	r2, [r7, #8]
   1af46:	697b      	ldr	r3, [r7, #20]
   1af48:	18d3      	adds	r3, r2, r3
   1af4a:	781b      	ldrb	r3, [r3, #0]
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d006      	beq.n	1af5e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1af50:	697b      	ldr	r3, [r7, #20]
   1af52:	3301      	adds	r3, #1
   1af54:	617b      	str	r3, [r7, #20]
   1af56:	697b      	ldr	r3, [r7, #20]
   1af58:	2b07      	cmp	r3, #7
   1af5a:	d9e8      	bls.n	1af2e <prvInitialiseNewTask+0x4a>
   1af5c:	e000      	b.n	1af60 <prvInitialiseNewTask+0x7c>
		{
			break;
   1af5e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af62:	223b      	movs	r2, #59	; 0x3b
   1af64:	2100      	movs	r1, #0
   1af66:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1af68:	6a3b      	ldr	r3, [r7, #32]
   1af6a:	2b04      	cmp	r3, #4
   1af6c:	d901      	bls.n	1af72 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1af6e:	2304      	movs	r3, #4
   1af70:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af74:	6a3a      	ldr	r2, [r7, #32]
   1af76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af7a:	6a3a      	ldr	r2, [r7, #32]
   1af7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af80:	2200      	movs	r2, #0
   1af82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af86:	3304      	adds	r3, #4
   1af88:	0018      	movs	r0, r3
   1af8a:	4b18      	ldr	r3, [pc, #96]	; (1afec <prvInitialiseNewTask+0x108>)
   1af8c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af90:	3318      	adds	r3, #24
   1af92:	0018      	movs	r0, r3
   1af94:	4b15      	ldr	r3, [pc, #84]	; (1afec <prvInitialiseNewTask+0x108>)
   1af96:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1af98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1af9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1af9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af9e:	6a3b      	ldr	r3, [r7, #32]
   1afa0:	2205      	movs	r2, #5
   1afa2:	1ad2      	subs	r2, r2, r3
   1afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1afac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afb0:	2200      	movs	r2, #0
   1afb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afb6:	2250      	movs	r2, #80	; 0x50
   1afb8:	2100      	movs	r1, #0
   1afba:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1afbc:	683a      	ldr	r2, [r7, #0]
   1afbe:	68f9      	ldr	r1, [r7, #12]
   1afc0:	693b      	ldr	r3, [r7, #16]
   1afc2:	0018      	movs	r0, r3
   1afc4:	4b0a      	ldr	r3, [pc, #40]	; (1aff0 <prvInitialiseNewTask+0x10c>)
   1afc6:	4798      	blx	r3
   1afc8:	0002      	movs	r2, r0
   1afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1afcc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afd0:	2b00      	cmp	r3, #0
   1afd2:	d002      	beq.n	1afda <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1afd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1afda:	46c0      	nop			; (mov r8, r8)
   1afdc:	46bd      	mov	sp, r7
   1afde:	b006      	add	sp, #24
   1afe0:	bd80      	pop	{r7, pc}
   1afe2:	46c0      	nop			; (mov r8, r8)
   1afe4:	0003460f 	.word	0x0003460f
   1afe8:	3fffffff 	.word	0x3fffffff
   1afec:	00018f95 	.word	0x00018f95
   1aff0:	000190ad 	.word	0x000190ad

0001aff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1aff4:	b580      	push	{r7, lr}
   1aff6:	b082      	sub	sp, #8
   1aff8:	af00      	add	r7, sp, #0
   1affa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1affc:	4b60      	ldr	r3, [pc, #384]	; (1b180 <prvAddNewTaskToReadyList+0x18c>)
   1affe:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1b000:	4b60      	ldr	r3, [pc, #384]	; (1b184 <prvAddNewTaskToReadyList+0x190>)
   1b002:	681b      	ldr	r3, [r3, #0]
   1b004:	1c5a      	adds	r2, r3, #1
   1b006:	4b5f      	ldr	r3, [pc, #380]	; (1b184 <prvAddNewTaskToReadyList+0x190>)
   1b008:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1b00a:	4b5f      	ldr	r3, [pc, #380]	; (1b188 <prvAddNewTaskToReadyList+0x194>)
   1b00c:	681b      	ldr	r3, [r3, #0]
   1b00e:	2b00      	cmp	r3, #0
   1b010:	d109      	bne.n	1b026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1b012:	4b5d      	ldr	r3, [pc, #372]	; (1b188 <prvAddNewTaskToReadyList+0x194>)
   1b014:	687a      	ldr	r2, [r7, #4]
   1b016:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1b018:	4b5a      	ldr	r3, [pc, #360]	; (1b184 <prvAddNewTaskToReadyList+0x190>)
   1b01a:	681b      	ldr	r3, [r3, #0]
   1b01c:	2b01      	cmp	r3, #1
   1b01e:	d110      	bne.n	1b042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1b020:	4b5a      	ldr	r3, [pc, #360]	; (1b18c <prvAddNewTaskToReadyList+0x198>)
   1b022:	4798      	blx	r3
   1b024:	e00d      	b.n	1b042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1b026:	4b5a      	ldr	r3, [pc, #360]	; (1b190 <prvAddNewTaskToReadyList+0x19c>)
   1b028:	681b      	ldr	r3, [r3, #0]
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	d109      	bne.n	1b042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1b02e:	4b56      	ldr	r3, [pc, #344]	; (1b188 <prvAddNewTaskToReadyList+0x194>)
   1b030:	681b      	ldr	r3, [r3, #0]
   1b032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b034:	687b      	ldr	r3, [r7, #4]
   1b036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b038:	429a      	cmp	r2, r3
   1b03a:	d802      	bhi.n	1b042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b03c:	4b52      	ldr	r3, [pc, #328]	; (1b188 <prvAddNewTaskToReadyList+0x194>)
   1b03e:	687a      	ldr	r2, [r7, #4]
   1b040:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b042:	4b54      	ldr	r3, [pc, #336]	; (1b194 <prvAddNewTaskToReadyList+0x1a0>)
   1b044:	681b      	ldr	r3, [r3, #0]
   1b046:	1c5a      	adds	r2, r3, #1
   1b048:	4b52      	ldr	r3, [pc, #328]	; (1b194 <prvAddNewTaskToReadyList+0x1a0>)
   1b04a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1b04c:	4b51      	ldr	r3, [pc, #324]	; (1b194 <prvAddNewTaskToReadyList+0x1a0>)
   1b04e:	681a      	ldr	r2, [r3, #0]
   1b050:	687b      	ldr	r3, [r7, #4]
   1b052:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1b054:	687b      	ldr	r3, [r7, #4]
   1b056:	2b00      	cmp	r3, #0
   1b058:	d052      	beq.n	1b100 <prvAddNewTaskToReadyList+0x10c>
   1b05a:	2003      	movs	r0, #3
   1b05c:	4b4e      	ldr	r3, [pc, #312]	; (1b198 <prvAddNewTaskToReadyList+0x1a4>)
   1b05e:	4798      	blx	r3
   1b060:	0003      	movs	r3, r0
   1b062:	b29a      	uxth	r2, r3
   1b064:	687b      	ldr	r3, [r7, #4]
   1b066:	0011      	movs	r1, r2
   1b068:	0018      	movs	r0, r3
   1b06a:	4b4c      	ldr	r3, [pc, #304]	; (1b19c <prvAddNewTaskToReadyList+0x1a8>)
   1b06c:	4798      	blx	r3
   1b06e:	4b4c      	ldr	r3, [pc, #304]	; (1b1a0 <prvAddNewTaskToReadyList+0x1ac>)
   1b070:	881a      	ldrh	r2, [r3, #0]
   1b072:	687b      	ldr	r3, [r7, #4]
   1b074:	0011      	movs	r1, r2
   1b076:	0018      	movs	r0, r3
   1b078:	4b4a      	ldr	r3, [pc, #296]	; (1b1a4 <prvAddNewTaskToReadyList+0x1b0>)
   1b07a:	4798      	blx	r3
   1b07c:	687b      	ldr	r3, [r7, #4]
   1b07e:	0018      	movs	r0, r3
   1b080:	4b49      	ldr	r3, [pc, #292]	; (1b1a8 <prvAddNewTaskToReadyList+0x1b4>)
   1b082:	4798      	blx	r3
   1b084:	0003      	movs	r3, r0
   1b086:	b2d9      	uxtb	r1, r3
   1b088:	687b      	ldr	r3, [r7, #4]
   1b08a:	3334      	adds	r3, #52	; 0x34
   1b08c:	001a      	movs	r2, r3
   1b08e:	2003      	movs	r0, #3
   1b090:	4b46      	ldr	r3, [pc, #280]	; (1b1ac <prvAddNewTaskToReadyList+0x1b8>)
   1b092:	4798      	blx	r3
   1b094:	687b      	ldr	r3, [r7, #4]
   1b096:	0018      	movs	r0, r3
   1b098:	4b43      	ldr	r3, [pc, #268]	; (1b1a8 <prvAddNewTaskToReadyList+0x1b4>)
   1b09a:	4798      	blx	r3
   1b09c:	0003      	movs	r3, r0
   1b09e:	b2d9      	uxtb	r1, r3
   1b0a0:	687b      	ldr	r3, [r7, #4]
   1b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b0a4:	b2db      	uxtb	r3, r3
   1b0a6:	001a      	movs	r2, r3
   1b0a8:	2003      	movs	r0, #3
   1b0aa:	4b41      	ldr	r3, [pc, #260]	; (1b1b0 <prvAddNewTaskToReadyList+0x1bc>)
   1b0ac:	4798      	blx	r3
   1b0ae:	4b41      	ldr	r3, [pc, #260]	; (1b1b4 <prvAddNewTaskToReadyList+0x1c0>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	0018      	movs	r0, r3
   1b0b6:	4b40      	ldr	r3, [pc, #256]	; (1b1b8 <prvAddNewTaskToReadyList+0x1c4>)
   1b0b8:	4798      	blx	r3
   1b0ba:	0003      	movs	r3, r0
   1b0bc:	001a      	movs	r2, r3
   1b0be:	4b3f      	ldr	r3, [pc, #252]	; (1b1bc <prvAddNewTaskToReadyList+0x1c8>)
   1b0c0:	881b      	ldrh	r3, [r3, #0]
   1b0c2:	4013      	ands	r3, r2
   1b0c4:	b29b      	uxth	r3, r3
   1b0c6:	2b00      	cmp	r3, #0
   1b0c8:	d016      	beq.n	1b0f8 <prvAddNewTaskToReadyList+0x104>
   1b0ca:	687b      	ldr	r3, [r7, #4]
   1b0cc:	0018      	movs	r0, r3
   1b0ce:	4b3a      	ldr	r3, [pc, #232]	; (1b1b8 <prvAddNewTaskToReadyList+0x1c4>)
   1b0d0:	4798      	blx	r3
   1b0d2:	0003      	movs	r3, r0
   1b0d4:	001a      	movs	r2, r3
   1b0d6:	4b39      	ldr	r3, [pc, #228]	; (1b1bc <prvAddNewTaskToReadyList+0x1c8>)
   1b0d8:	881b      	ldrh	r3, [r3, #0]
   1b0da:	4013      	ands	r3, r2
   1b0dc:	b29b      	uxth	r3, r3
   1b0de:	2b00      	cmp	r3, #0
   1b0e0:	d00a      	beq.n	1b0f8 <prvAddNewTaskToReadyList+0x104>
   1b0e2:	687b      	ldr	r3, [r7, #4]
   1b0e4:	0018      	movs	r0, r3
   1b0e6:	4b30      	ldr	r3, [pc, #192]	; (1b1a8 <prvAddNewTaskToReadyList+0x1b4>)
   1b0e8:	4798      	blx	r3
   1b0ea:	0003      	movs	r3, r0
   1b0ec:	b2db      	uxtb	r3, r3
   1b0ee:	001a      	movs	r2, r3
   1b0f0:	2103      	movs	r1, #3
   1b0f2:	201b      	movs	r0, #27
   1b0f4:	4b32      	ldr	r3, [pc, #200]	; (1b1c0 <prvAddNewTaskToReadyList+0x1cc>)
   1b0f6:	4798      	blx	r3
   1b0f8:	687b      	ldr	r3, [r7, #4]
   1b0fa:	0018      	movs	r0, r3
   1b0fc:	4b31      	ldr	r3, [pc, #196]	; (1b1c4 <prvAddNewTaskToReadyList+0x1d0>)
   1b0fe:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1b100:	687b      	ldr	r3, [r7, #4]
   1b102:	0018      	movs	r0, r3
   1b104:	4b2c      	ldr	r3, [pc, #176]	; (1b1b8 <prvAddNewTaskToReadyList+0x1c4>)
   1b106:	4798      	blx	r3
   1b108:	0003      	movs	r3, r0
   1b10a:	001a      	movs	r2, r3
   1b10c:	4b2b      	ldr	r3, [pc, #172]	; (1b1bc <prvAddNewTaskToReadyList+0x1c8>)
   1b10e:	881b      	ldrh	r3, [r3, #0]
   1b110:	4013      	ands	r3, r2
   1b112:	b29b      	uxth	r3, r3
   1b114:	2b00      	cmp	r3, #0
   1b116:	d008      	beq.n	1b12a <prvAddNewTaskToReadyList+0x136>
   1b118:	687b      	ldr	r3, [r7, #4]
   1b11a:	0018      	movs	r0, r3
   1b11c:	4b22      	ldr	r3, [pc, #136]	; (1b1a8 <prvAddNewTaskToReadyList+0x1b4>)
   1b11e:	4798      	blx	r3
   1b120:	0003      	movs	r3, r0
   1b122:	b2db      	uxtb	r3, r3
   1b124:	0018      	movs	r0, r3
   1b126:	4b28      	ldr	r3, [pc, #160]	; (1b1c8 <prvAddNewTaskToReadyList+0x1d4>)
   1b128:	4798      	blx	r3
   1b12a:	687b      	ldr	r3, [r7, #4]
   1b12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b12e:	4b27      	ldr	r3, [pc, #156]	; (1b1cc <prvAddNewTaskToReadyList+0x1d8>)
   1b130:	681b      	ldr	r3, [r3, #0]
   1b132:	429a      	cmp	r2, r3
   1b134:	d903      	bls.n	1b13e <prvAddNewTaskToReadyList+0x14a>
   1b136:	687b      	ldr	r3, [r7, #4]
   1b138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b13a:	4b24      	ldr	r3, [pc, #144]	; (1b1cc <prvAddNewTaskToReadyList+0x1d8>)
   1b13c:	601a      	str	r2, [r3, #0]
   1b13e:	687b      	ldr	r3, [r7, #4]
   1b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b142:	0013      	movs	r3, r2
   1b144:	009b      	lsls	r3, r3, #2
   1b146:	189b      	adds	r3, r3, r2
   1b148:	009b      	lsls	r3, r3, #2
   1b14a:	4a21      	ldr	r2, [pc, #132]	; (1b1d0 <prvAddNewTaskToReadyList+0x1dc>)
   1b14c:	189a      	adds	r2, r3, r2
   1b14e:	687b      	ldr	r3, [r7, #4]
   1b150:	3304      	adds	r3, #4
   1b152:	0019      	movs	r1, r3
   1b154:	0010      	movs	r0, r2
   1b156:	4b1f      	ldr	r3, [pc, #124]	; (1b1d4 <prvAddNewTaskToReadyList+0x1e0>)
   1b158:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b15a:	4b1f      	ldr	r3, [pc, #124]	; (1b1d8 <prvAddNewTaskToReadyList+0x1e4>)
   1b15c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1b15e:	4b0c      	ldr	r3, [pc, #48]	; (1b190 <prvAddNewTaskToReadyList+0x19c>)
   1b160:	681b      	ldr	r3, [r3, #0]
   1b162:	2b00      	cmp	r3, #0
   1b164:	d008      	beq.n	1b178 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b166:	4b08      	ldr	r3, [pc, #32]	; (1b188 <prvAddNewTaskToReadyList+0x194>)
   1b168:	681b      	ldr	r3, [r3, #0]
   1b16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b16c:	687b      	ldr	r3, [r7, #4]
   1b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b170:	429a      	cmp	r2, r3
   1b172:	d201      	bcs.n	1b178 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b174:	4b19      	ldr	r3, [pc, #100]	; (1b1dc <prvAddNewTaskToReadyList+0x1e8>)
   1b176:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b178:	46c0      	nop			; (mov r8, r8)
   1b17a:	46bd      	mov	sp, r7
   1b17c:	b002      	add	sp, #8
   1b17e:	bd80      	pop	{r7, pc}
   1b180:	000191e9 	.word	0x000191e9
   1b184:	20004180 	.word	0x20004180
   1b188:	200040a8 	.word	0x200040a8
   1b18c:	0001bd15 	.word	0x0001bd15
   1b190:	2000418c 	.word	0x2000418c
   1b194:	2000419c 	.word	0x2000419c
   1b198:	00018761 	.word	0x00018761
   1b19c:	00017205 	.word	0x00017205
   1b1a0:	20000102 	.word	0x20000102
   1b1a4:	00017241 	.word	0x00017241
   1b1a8:	000171c1 	.word	0x000171c1
   1b1ac:	00018991 	.word	0x00018991
   1b1b0:	000180f5 	.word	0x000180f5
   1b1b4:	0001747d 	.word	0x0001747d
   1b1b8:	000171e1 	.word	0x000171e1
   1b1bc:	20000100 	.word	0x20000100
   1b1c0:	00017bd9 	.word	0x00017bd9
   1b1c4:	00017341 	.word	0x00017341
   1b1c8:	00017991 	.word	0x00017991
   1b1cc:	20004188 	.word	0x20004188
   1b1d0:	200040ac 	.word	0x200040ac
   1b1d4:	00018fab 	.word	0x00018fab
   1b1d8:	0001920d 	.word	0x0001920d
   1b1dc:	000191d1 	.word	0x000191d1

0001b1e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1b1e0:	b580      	push	{r7, lr}
   1b1e2:	b084      	sub	sp, #16
   1b1e4:	af00      	add	r7, sp, #0
   1b1e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1b1e8:	2300      	movs	r3, #0
   1b1ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1b1ec:	687b      	ldr	r3, [r7, #4]
   1b1ee:	2b00      	cmp	r3, #0
   1b1f0:	d045      	beq.n	1b27e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1b1f2:	4b27      	ldr	r3, [pc, #156]	; (1b290 <vTaskDelay+0xb0>)
   1b1f4:	681b      	ldr	r3, [r3, #0]
   1b1f6:	2b00      	cmp	r3, #0
   1b1f8:	d001      	beq.n	1b1fe <vTaskDelay+0x1e>
   1b1fa:	b672      	cpsid	i
   1b1fc:	e7fe      	b.n	1b1fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1b1fe:	4b25      	ldr	r3, [pc, #148]	; (1b294 <vTaskDelay+0xb4>)
   1b200:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1b202:	4b25      	ldr	r3, [pc, #148]	; (1b298 <vTaskDelay+0xb8>)
   1b204:	681b      	ldr	r3, [r3, #0]
   1b206:	0018      	movs	r0, r3
   1b208:	4b24      	ldr	r3, [pc, #144]	; (1b29c <vTaskDelay+0xbc>)
   1b20a:	4798      	blx	r3
   1b20c:	0003      	movs	r3, r0
   1b20e:	001a      	movs	r2, r3
   1b210:	4b23      	ldr	r3, [pc, #140]	; (1b2a0 <vTaskDelay+0xc0>)
   1b212:	881b      	ldrh	r3, [r3, #0]
   1b214:	4013      	ands	r3, r2
   1b216:	b29b      	uxth	r3, r3
   1b218:	2b00      	cmp	r3, #0
   1b21a:	d00e      	beq.n	1b23a <vTaskDelay+0x5a>
   1b21c:	687b      	ldr	r3, [r7, #4]
   1b21e:	0019      	movs	r1, r3
   1b220:	2089      	movs	r0, #137	; 0x89
   1b222:	4b20      	ldr	r3, [pc, #128]	; (1b2a4 <vTaskDelay+0xc4>)
   1b224:	4798      	blx	r3
   1b226:	4b1c      	ldr	r3, [pc, #112]	; (1b298 <vTaskDelay+0xb8>)
   1b228:	681b      	ldr	r3, [r3, #0]
   1b22a:	0018      	movs	r0, r3
   1b22c:	4b1e      	ldr	r3, [pc, #120]	; (1b2a8 <vTaskDelay+0xc8>)
   1b22e:	4798      	blx	r3
   1b230:	0003      	movs	r3, r0
   1b232:	b2db      	uxtb	r3, r3
   1b234:	0018      	movs	r0, r3
   1b236:	4b1d      	ldr	r3, [pc, #116]	; (1b2ac <vTaskDelay+0xcc>)
   1b238:	4798      	blx	r3
   1b23a:	4b1d      	ldr	r3, [pc, #116]	; (1b2b0 <vTaskDelay+0xd0>)
   1b23c:	4798      	blx	r3
   1b23e:	0003      	movs	r3, r0
   1b240:	0018      	movs	r0, r3
   1b242:	4b16      	ldr	r3, [pc, #88]	; (1b29c <vTaskDelay+0xbc>)
   1b244:	4798      	blx	r3
   1b246:	0003      	movs	r3, r0
   1b248:	001a      	movs	r2, r3
   1b24a:	4b15      	ldr	r3, [pc, #84]	; (1b2a0 <vTaskDelay+0xc0>)
   1b24c:	881b      	ldrh	r3, [r3, #0]
   1b24e:	4013      	ands	r3, r2
   1b250:	b29b      	uxth	r3, r3
   1b252:	2b00      	cmp	r3, #0
   1b254:	d00a      	beq.n	1b26c <vTaskDelay+0x8c>
   1b256:	4b16      	ldr	r3, [pc, #88]	; (1b2b0 <vTaskDelay+0xd0>)
   1b258:	4798      	blx	r3
   1b25a:	0003      	movs	r3, r0
   1b25c:	0018      	movs	r0, r3
   1b25e:	4b12      	ldr	r3, [pc, #72]	; (1b2a8 <vTaskDelay+0xc8>)
   1b260:	4798      	blx	r3
   1b262:	0003      	movs	r3, r0
   1b264:	b2db      	uxtb	r3, r3
   1b266:	0018      	movs	r0, r3
   1b268:	4b10      	ldr	r3, [pc, #64]	; (1b2ac <vTaskDelay+0xcc>)
   1b26a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1b26c:	687b      	ldr	r3, [r7, #4]
   1b26e:	2100      	movs	r1, #0
   1b270:	0018      	movs	r0, r3
   1b272:	4b10      	ldr	r3, [pc, #64]	; (1b2b4 <vTaskDelay+0xd4>)
   1b274:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1b276:	4b10      	ldr	r3, [pc, #64]	; (1b2b8 <vTaskDelay+0xd8>)
   1b278:	4798      	blx	r3
   1b27a:	0003      	movs	r3, r0
   1b27c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1b27e:	68fb      	ldr	r3, [r7, #12]
   1b280:	2b00      	cmp	r3, #0
   1b282:	d101      	bne.n	1b288 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1b284:	4b0d      	ldr	r3, [pc, #52]	; (1b2bc <vTaskDelay+0xdc>)
   1b286:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b288:	46c0      	nop			; (mov r8, r8)
   1b28a:	46bd      	mov	sp, r7
   1b28c:	b004      	add	sp, #16
   1b28e:	bd80      	pop	{r7, pc}
   1b290:	200041a8 	.word	0x200041a8
   1b294:	0001b4a1 	.word	0x0001b4a1
   1b298:	200040a8 	.word	0x200040a8
   1b29c:	000171e1 	.word	0x000171e1
   1b2a0:	20000100 	.word	0x20000100
   1b2a4:	00017ee1 	.word	0x00017ee1
   1b2a8:	000171c1 	.word	0x000171c1
   1b2ac:	00018371 	.word	0x00018371
   1b2b0:	0001747d 	.word	0x0001747d
   1b2b4:	0001c3f9 	.word	0x0001c3f9
   1b2b8:	0001b4b9 	.word	0x0001b4b9
   1b2bc:	000191d1 	.word	0x000191d1

0001b2c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1b2c0:	b580      	push	{r7, lr}
   1b2c2:	b084      	sub	sp, #16
   1b2c4:	af00      	add	r7, sp, #0
   1b2c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1b2c8:	4b42      	ldr	r3, [pc, #264]	; (1b3d4 <vTaskSuspend+0x114>)
   1b2ca:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1b2cc:	687b      	ldr	r3, [r7, #4]
   1b2ce:	2b00      	cmp	r3, #0
   1b2d0:	d102      	bne.n	1b2d8 <vTaskSuspend+0x18>
   1b2d2:	4b41      	ldr	r3, [pc, #260]	; (1b3d8 <vTaskSuspend+0x118>)
   1b2d4:	681b      	ldr	r3, [r3, #0]
   1b2d6:	e000      	b.n	1b2da <vTaskSuspend+0x1a>
   1b2d8:	687b      	ldr	r3, [r7, #4]
   1b2da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1b2dc:	4b3f      	ldr	r3, [pc, #252]	; (1b3dc <vTaskSuspend+0x11c>)
   1b2de:	4798      	blx	r3
   1b2e0:	0003      	movs	r3, r0
   1b2e2:	0018      	movs	r0, r3
   1b2e4:	4b3e      	ldr	r3, [pc, #248]	; (1b3e0 <vTaskSuspend+0x120>)
   1b2e6:	4798      	blx	r3
   1b2e8:	0003      	movs	r3, r0
   1b2ea:	001a      	movs	r2, r3
   1b2ec:	4b3d      	ldr	r3, [pc, #244]	; (1b3e4 <vTaskSuspend+0x124>)
   1b2ee:	881b      	ldrh	r3, [r3, #0]
   1b2f0:	4013      	ands	r3, r2
   1b2f2:	b29b      	uxth	r3, r3
   1b2f4:	2b00      	cmp	r3, #0
   1b2f6:	d016      	beq.n	1b326 <vTaskSuspend+0x66>
   1b2f8:	68fb      	ldr	r3, [r7, #12]
   1b2fa:	0018      	movs	r0, r3
   1b2fc:	4b38      	ldr	r3, [pc, #224]	; (1b3e0 <vTaskSuspend+0x120>)
   1b2fe:	4798      	blx	r3
   1b300:	0003      	movs	r3, r0
   1b302:	001a      	movs	r2, r3
   1b304:	4b37      	ldr	r3, [pc, #220]	; (1b3e4 <vTaskSuspend+0x124>)
   1b306:	881b      	ldrh	r3, [r3, #0]
   1b308:	4013      	ands	r3, r2
   1b30a:	b29b      	uxth	r3, r3
   1b30c:	2b00      	cmp	r3, #0
   1b30e:	d00a      	beq.n	1b326 <vTaskSuspend+0x66>
   1b310:	68fb      	ldr	r3, [r7, #12]
   1b312:	0018      	movs	r0, r3
   1b314:	4b34      	ldr	r3, [pc, #208]	; (1b3e8 <vTaskSuspend+0x128>)
   1b316:	4798      	blx	r3
   1b318:	0003      	movs	r3, r0
   1b31a:	b2db      	uxtb	r3, r3
   1b31c:	001a      	movs	r2, r3
   1b31e:	2103      	movs	r1, #3
   1b320:	208a      	movs	r0, #138	; 0x8a
   1b322:	4b32      	ldr	r3, [pc, #200]	; (1b3ec <vTaskSuspend+0x12c>)
   1b324:	4798      	blx	r3
   1b326:	68fb      	ldr	r3, [r7, #12]
   1b328:	0018      	movs	r0, r3
   1b32a:	4b2f      	ldr	r3, [pc, #188]	; (1b3e8 <vTaskSuspend+0x128>)
   1b32c:	4798      	blx	r3
   1b32e:	0003      	movs	r3, r0
   1b330:	b2db      	uxtb	r3, r3
   1b332:	0018      	movs	r0, r3
   1b334:	4b2e      	ldr	r3, [pc, #184]	; (1b3f0 <vTaskSuspend+0x130>)
   1b336:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b338:	68fb      	ldr	r3, [r7, #12]
   1b33a:	3304      	adds	r3, #4
   1b33c:	0018      	movs	r0, r3
   1b33e:	4b2d      	ldr	r3, [pc, #180]	; (1b3f4 <vTaskSuspend+0x134>)
   1b340:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b342:	68fb      	ldr	r3, [r7, #12]
   1b344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b346:	2b00      	cmp	r3, #0
   1b348:	d004      	beq.n	1b354 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b34a:	68fb      	ldr	r3, [r7, #12]
   1b34c:	3318      	adds	r3, #24
   1b34e:	0018      	movs	r0, r3
   1b350:	4b28      	ldr	r3, [pc, #160]	; (1b3f4 <vTaskSuspend+0x134>)
   1b352:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1b354:	68fb      	ldr	r3, [r7, #12]
   1b356:	1d1a      	adds	r2, r3, #4
   1b358:	4b27      	ldr	r3, [pc, #156]	; (1b3f8 <vTaskSuspend+0x138>)
   1b35a:	0011      	movs	r1, r2
   1b35c:	0018      	movs	r0, r3
   1b35e:	4b27      	ldr	r3, [pc, #156]	; (1b3fc <vTaskSuspend+0x13c>)
   1b360:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1b362:	68fb      	ldr	r3, [r7, #12]
   1b364:	2250      	movs	r2, #80	; 0x50
   1b366:	5c9b      	ldrb	r3, [r3, r2]
   1b368:	b2db      	uxtb	r3, r3
   1b36a:	2b01      	cmp	r3, #1
   1b36c:	d103      	bne.n	1b376 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b36e:	68fb      	ldr	r3, [r7, #12]
   1b370:	2250      	movs	r2, #80	; 0x50
   1b372:	2100      	movs	r1, #0
   1b374:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1b376:	4b22      	ldr	r3, [pc, #136]	; (1b400 <vTaskSuspend+0x140>)
   1b378:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1b37a:	4b22      	ldr	r3, [pc, #136]	; (1b404 <vTaskSuspend+0x144>)
   1b37c:	681b      	ldr	r3, [r3, #0]
   1b37e:	2b00      	cmp	r3, #0
   1b380:	d005      	beq.n	1b38e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1b382:	4b14      	ldr	r3, [pc, #80]	; (1b3d4 <vTaskSuspend+0x114>)
   1b384:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1b386:	4b20      	ldr	r3, [pc, #128]	; (1b408 <vTaskSuspend+0x148>)
   1b388:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1b38a:	4b1d      	ldr	r3, [pc, #116]	; (1b400 <vTaskSuspend+0x140>)
   1b38c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1b38e:	4b12      	ldr	r3, [pc, #72]	; (1b3d8 <vTaskSuspend+0x118>)
   1b390:	681b      	ldr	r3, [r3, #0]
   1b392:	68fa      	ldr	r2, [r7, #12]
   1b394:	429a      	cmp	r2, r3
   1b396:	d118      	bne.n	1b3ca <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1b398:	4b1a      	ldr	r3, [pc, #104]	; (1b404 <vTaskSuspend+0x144>)
   1b39a:	681b      	ldr	r3, [r3, #0]
   1b39c:	2b00      	cmp	r3, #0
   1b39e:	d008      	beq.n	1b3b2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1b3a0:	4b1a      	ldr	r3, [pc, #104]	; (1b40c <vTaskSuspend+0x14c>)
   1b3a2:	681b      	ldr	r3, [r3, #0]
   1b3a4:	2b00      	cmp	r3, #0
   1b3a6:	d001      	beq.n	1b3ac <vTaskSuspend+0xec>
   1b3a8:	b672      	cpsid	i
   1b3aa:	e7fe      	b.n	1b3aa <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1b3ac:	4b18      	ldr	r3, [pc, #96]	; (1b410 <vTaskSuspend+0x150>)
   1b3ae:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b3b0:	e00b      	b.n	1b3ca <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1b3b2:	4b11      	ldr	r3, [pc, #68]	; (1b3f8 <vTaskSuspend+0x138>)
   1b3b4:	681a      	ldr	r2, [r3, #0]
   1b3b6:	4b17      	ldr	r3, [pc, #92]	; (1b414 <vTaskSuspend+0x154>)
   1b3b8:	681b      	ldr	r3, [r3, #0]
   1b3ba:	429a      	cmp	r2, r3
   1b3bc:	d103      	bne.n	1b3c6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1b3be:	4b06      	ldr	r3, [pc, #24]	; (1b3d8 <vTaskSuspend+0x118>)
   1b3c0:	2200      	movs	r2, #0
   1b3c2:	601a      	str	r2, [r3, #0]
	}
   1b3c4:	e001      	b.n	1b3ca <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1b3c6:	4b14      	ldr	r3, [pc, #80]	; (1b418 <vTaskSuspend+0x158>)
   1b3c8:	4798      	blx	r3
	}
   1b3ca:	46c0      	nop			; (mov r8, r8)
   1b3cc:	46bd      	mov	sp, r7
   1b3ce:	b004      	add	sp, #16
   1b3d0:	bd80      	pop	{r7, pc}
   1b3d2:	46c0      	nop			; (mov r8, r8)
   1b3d4:	000191e9 	.word	0x000191e9
   1b3d8:	200040a8 	.word	0x200040a8
   1b3dc:	0001747d 	.word	0x0001747d
   1b3e0:	000171e1 	.word	0x000171e1
   1b3e4:	20000100 	.word	0x20000100
   1b3e8:	000171c1 	.word	0x000171c1
   1b3ec:	00017bd9 	.word	0x00017bd9
   1b3f0:	00018371 	.word	0x00018371
   1b3f4:	0001905b 	.word	0x0001905b
   1b3f8:	2000416c 	.word	0x2000416c
   1b3fc:	00018fab 	.word	0x00018fab
   1b400:	0001920d 	.word	0x0001920d
   1b404:	2000418c 	.word	0x2000418c
   1b408:	0001bea5 	.word	0x0001bea5
   1b40c:	200041a8 	.word	0x200041a8
   1b410:	000191d1 	.word	0x000191d1
   1b414:	20004180 	.word	0x20004180
   1b418:	0001b835 	.word	0x0001b835

0001b41c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1b41c:	b590      	push	{r4, r7, lr}
   1b41e:	b085      	sub	sp, #20
   1b420:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1b422:	4916      	ldr	r1, [pc, #88]	; (1b47c <vTaskStartScheduler+0x60>)
   1b424:	4816      	ldr	r0, [pc, #88]	; (1b480 <vTaskStartScheduler+0x64>)
   1b426:	4b17      	ldr	r3, [pc, #92]	; (1b484 <vTaskStartScheduler+0x68>)
   1b428:	9301      	str	r3, [sp, #4]
   1b42a:	2300      	movs	r3, #0
   1b42c:	9300      	str	r3, [sp, #0]
   1b42e:	2300      	movs	r3, #0
   1b430:	2296      	movs	r2, #150	; 0x96
   1b432:	4c15      	ldr	r4, [pc, #84]	; (1b488 <vTaskStartScheduler+0x6c>)
   1b434:	47a0      	blx	r4
   1b436:	0003      	movs	r3, r0
   1b438:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1b43a:	687b      	ldr	r3, [r7, #4]
   1b43c:	2b01      	cmp	r3, #1
   1b43e:	d103      	bne.n	1b448 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1b440:	4b12      	ldr	r3, [pc, #72]	; (1b48c <vTaskStartScheduler+0x70>)
   1b442:	4798      	blx	r3
   1b444:	0003      	movs	r3, r0
   1b446:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1b448:	687b      	ldr	r3, [r7, #4]
   1b44a:	2b01      	cmp	r3, #1
   1b44c:	d10d      	bne.n	1b46a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1b44e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1b450:	4b0f      	ldr	r3, [pc, #60]	; (1b490 <vTaskStartScheduler+0x74>)
   1b452:	2201      	movs	r2, #1
   1b454:	4252      	negs	r2, r2
   1b456:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1b458:	4b0e      	ldr	r3, [pc, #56]	; (1b494 <vTaskStartScheduler+0x78>)
   1b45a:	2201      	movs	r2, #1
   1b45c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1b45e:	4b0e      	ldr	r3, [pc, #56]	; (1b498 <vTaskStartScheduler+0x7c>)
   1b460:	2200      	movs	r2, #0
   1b462:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1b464:	4b0d      	ldr	r3, [pc, #52]	; (1b49c <vTaskStartScheduler+0x80>)
   1b466:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1b468:	e004      	b.n	1b474 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1b46a:	687b      	ldr	r3, [r7, #4]
   1b46c:	3301      	adds	r3, #1
   1b46e:	d101      	bne.n	1b474 <vTaskStartScheduler+0x58>
   1b470:	b672      	cpsid	i
   1b472:	e7fe      	b.n	1b472 <vTaskStartScheduler+0x56>
}
   1b474:	46c0      	nop			; (mov r8, r8)
   1b476:	46bd      	mov	sp, r7
   1b478:	b003      	add	sp, #12
   1b47a:	bd90      	pop	{r4, r7, pc}
   1b47c:	00037d1c 	.word	0x00037d1c
   1b480:	0001bced 	.word	0x0001bced
   1b484:	200041a4 	.word	0x200041a4
   1b488:	0001ae45 	.word	0x0001ae45
   1b48c:	0001c4ad 	.word	0x0001c4ad
   1b490:	200041a0 	.word	0x200041a0
   1b494:	2000418c 	.word	0x2000418c
   1b498:	20004184 	.word	0x20004184
   1b49c:	00019179 	.word	0x00019179

0001b4a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1b4a0:	b580      	push	{r7, lr}
   1b4a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1b4a4:	4b03      	ldr	r3, [pc, #12]	; (1b4b4 <vTaskSuspendAll+0x14>)
   1b4a6:	681b      	ldr	r3, [r3, #0]
   1b4a8:	1c5a      	adds	r2, r3, #1
   1b4aa:	4b02      	ldr	r3, [pc, #8]	; (1b4b4 <vTaskSuspendAll+0x14>)
   1b4ac:	601a      	str	r2, [r3, #0]
}
   1b4ae:	46c0      	nop			; (mov r8, r8)
   1b4b0:	46bd      	mov	sp, r7
   1b4b2:	bd80      	pop	{r7, pc}
   1b4b4:	200041a8 	.word	0x200041a8

0001b4b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1b4b8:	b580      	push	{r7, lr}
   1b4ba:	b084      	sub	sp, #16
   1b4bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1b4be:	2300      	movs	r3, #0
   1b4c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1b4c2:	2300      	movs	r3, #0
   1b4c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1b4c6:	4b45      	ldr	r3, [pc, #276]	; (1b5dc <xTaskResumeAll+0x124>)
   1b4c8:	681b      	ldr	r3, [r3, #0]
   1b4ca:	2b00      	cmp	r3, #0
   1b4cc:	d101      	bne.n	1b4d2 <xTaskResumeAll+0x1a>
   1b4ce:	b672      	cpsid	i
   1b4d0:	e7fe      	b.n	1b4d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1b4d2:	4b43      	ldr	r3, [pc, #268]	; (1b5e0 <xTaskResumeAll+0x128>)
   1b4d4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1b4d6:	4b41      	ldr	r3, [pc, #260]	; (1b5dc <xTaskResumeAll+0x124>)
   1b4d8:	681b      	ldr	r3, [r3, #0]
   1b4da:	1e5a      	subs	r2, r3, #1
   1b4dc:	4b3f      	ldr	r3, [pc, #252]	; (1b5dc <xTaskResumeAll+0x124>)
   1b4de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b4e0:	4b3e      	ldr	r3, [pc, #248]	; (1b5dc <xTaskResumeAll+0x124>)
   1b4e2:	681b      	ldr	r3, [r3, #0]
   1b4e4:	2b00      	cmp	r3, #0
   1b4e6:	d000      	beq.n	1b4ea <xTaskResumeAll+0x32>
   1b4e8:	e071      	b.n	1b5ce <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1b4ea:	4b3e      	ldr	r3, [pc, #248]	; (1b5e4 <xTaskResumeAll+0x12c>)
   1b4ec:	681b      	ldr	r3, [r3, #0]
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d100      	bne.n	1b4f4 <xTaskResumeAll+0x3c>
   1b4f2:	e06c      	b.n	1b5ce <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b4f4:	e044      	b.n	1b580 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1b4f6:	4b3c      	ldr	r3, [pc, #240]	; (1b5e8 <xTaskResumeAll+0x130>)
   1b4f8:	68db      	ldr	r3, [r3, #12]
   1b4fa:	68db      	ldr	r3, [r3, #12]
   1b4fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b4fe:	68fb      	ldr	r3, [r7, #12]
   1b500:	3318      	adds	r3, #24
   1b502:	0018      	movs	r0, r3
   1b504:	4b39      	ldr	r3, [pc, #228]	; (1b5ec <xTaskResumeAll+0x134>)
   1b506:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b508:	68fb      	ldr	r3, [r7, #12]
   1b50a:	3304      	adds	r3, #4
   1b50c:	0018      	movs	r0, r3
   1b50e:	4b37      	ldr	r3, [pc, #220]	; (1b5ec <xTaskResumeAll+0x134>)
   1b510:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1b512:	68fb      	ldr	r3, [r7, #12]
   1b514:	0018      	movs	r0, r3
   1b516:	4b36      	ldr	r3, [pc, #216]	; (1b5f0 <xTaskResumeAll+0x138>)
   1b518:	4798      	blx	r3
   1b51a:	0003      	movs	r3, r0
   1b51c:	001a      	movs	r2, r3
   1b51e:	4b35      	ldr	r3, [pc, #212]	; (1b5f4 <xTaskResumeAll+0x13c>)
   1b520:	881b      	ldrh	r3, [r3, #0]
   1b522:	4013      	ands	r3, r2
   1b524:	b29b      	uxth	r3, r3
   1b526:	2b00      	cmp	r3, #0
   1b528:	d008      	beq.n	1b53c <xTaskResumeAll+0x84>
   1b52a:	68fb      	ldr	r3, [r7, #12]
   1b52c:	0018      	movs	r0, r3
   1b52e:	4b32      	ldr	r3, [pc, #200]	; (1b5f8 <xTaskResumeAll+0x140>)
   1b530:	4798      	blx	r3
   1b532:	0003      	movs	r3, r0
   1b534:	b2db      	uxtb	r3, r3
   1b536:	0018      	movs	r0, r3
   1b538:	4b30      	ldr	r3, [pc, #192]	; (1b5fc <xTaskResumeAll+0x144>)
   1b53a:	4798      	blx	r3
   1b53c:	68fb      	ldr	r3, [r7, #12]
   1b53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b540:	4b2f      	ldr	r3, [pc, #188]	; (1b600 <xTaskResumeAll+0x148>)
   1b542:	681b      	ldr	r3, [r3, #0]
   1b544:	429a      	cmp	r2, r3
   1b546:	d903      	bls.n	1b550 <xTaskResumeAll+0x98>
   1b548:	68fb      	ldr	r3, [r7, #12]
   1b54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b54c:	4b2c      	ldr	r3, [pc, #176]	; (1b600 <xTaskResumeAll+0x148>)
   1b54e:	601a      	str	r2, [r3, #0]
   1b550:	68fb      	ldr	r3, [r7, #12]
   1b552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b554:	0013      	movs	r3, r2
   1b556:	009b      	lsls	r3, r3, #2
   1b558:	189b      	adds	r3, r3, r2
   1b55a:	009b      	lsls	r3, r3, #2
   1b55c:	4a29      	ldr	r2, [pc, #164]	; (1b604 <xTaskResumeAll+0x14c>)
   1b55e:	189a      	adds	r2, r3, r2
   1b560:	68fb      	ldr	r3, [r7, #12]
   1b562:	3304      	adds	r3, #4
   1b564:	0019      	movs	r1, r3
   1b566:	0010      	movs	r0, r2
   1b568:	4b27      	ldr	r3, [pc, #156]	; (1b608 <xTaskResumeAll+0x150>)
   1b56a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b56c:	68fb      	ldr	r3, [r7, #12]
   1b56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b570:	4b26      	ldr	r3, [pc, #152]	; (1b60c <xTaskResumeAll+0x154>)
   1b572:	681b      	ldr	r3, [r3, #0]
   1b574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b576:	429a      	cmp	r2, r3
   1b578:	d302      	bcc.n	1b580 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1b57a:	4b25      	ldr	r3, [pc, #148]	; (1b610 <xTaskResumeAll+0x158>)
   1b57c:	2201      	movs	r2, #1
   1b57e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b580:	4b19      	ldr	r3, [pc, #100]	; (1b5e8 <xTaskResumeAll+0x130>)
   1b582:	681b      	ldr	r3, [r3, #0]
   1b584:	2b00      	cmp	r3, #0
   1b586:	d1b6      	bne.n	1b4f6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1b588:	68fb      	ldr	r3, [r7, #12]
   1b58a:	2b00      	cmp	r3, #0
   1b58c:	d001      	beq.n	1b592 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1b58e:	4b21      	ldr	r3, [pc, #132]	; (1b614 <xTaskResumeAll+0x15c>)
   1b590:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1b592:	4b21      	ldr	r3, [pc, #132]	; (1b618 <xTaskResumeAll+0x160>)
   1b594:	681b      	ldr	r3, [r3, #0]
   1b596:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1b598:	687b      	ldr	r3, [r7, #4]
   1b59a:	2b00      	cmp	r3, #0
   1b59c:	d00f      	beq.n	1b5be <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1b59e:	4b1f      	ldr	r3, [pc, #124]	; (1b61c <xTaskResumeAll+0x164>)
   1b5a0:	4798      	blx	r3
   1b5a2:	1e03      	subs	r3, r0, #0
   1b5a4:	d002      	beq.n	1b5ac <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1b5a6:	4b1a      	ldr	r3, [pc, #104]	; (1b610 <xTaskResumeAll+0x158>)
   1b5a8:	2201      	movs	r2, #1
   1b5aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1b5ac:	687b      	ldr	r3, [r7, #4]
   1b5ae:	3b01      	subs	r3, #1
   1b5b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1b5b2:	687b      	ldr	r3, [r7, #4]
   1b5b4:	2b00      	cmp	r3, #0
   1b5b6:	d1f2      	bne.n	1b59e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1b5b8:	4b17      	ldr	r3, [pc, #92]	; (1b618 <xTaskResumeAll+0x160>)
   1b5ba:	2200      	movs	r2, #0
   1b5bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1b5be:	4b14      	ldr	r3, [pc, #80]	; (1b610 <xTaskResumeAll+0x158>)
   1b5c0:	681b      	ldr	r3, [r3, #0]
   1b5c2:	2b00      	cmp	r3, #0
   1b5c4:	d003      	beq.n	1b5ce <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1b5c6:	2301      	movs	r3, #1
   1b5c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1b5ca:	4b15      	ldr	r3, [pc, #84]	; (1b620 <xTaskResumeAll+0x168>)
   1b5cc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1b5ce:	4b15      	ldr	r3, [pc, #84]	; (1b624 <xTaskResumeAll+0x16c>)
   1b5d0:	4798      	blx	r3

	return xAlreadyYielded;
   1b5d2:	68bb      	ldr	r3, [r7, #8]
}
   1b5d4:	0018      	movs	r0, r3
   1b5d6:	46bd      	mov	sp, r7
   1b5d8:	b004      	add	sp, #16
   1b5da:	bd80      	pop	{r7, pc}
   1b5dc:	200041a8 	.word	0x200041a8
   1b5e0:	000191e9 	.word	0x000191e9
   1b5e4:	20004180 	.word	0x20004180
   1b5e8:	20004140 	.word	0x20004140
   1b5ec:	0001905b 	.word	0x0001905b
   1b5f0:	000171e1 	.word	0x000171e1
   1b5f4:	20000100 	.word	0x20000100
   1b5f8:	000171c1 	.word	0x000171c1
   1b5fc:	00017991 	.word	0x00017991
   1b600:	20004188 	.word	0x20004188
   1b604:	200040ac 	.word	0x200040ac
   1b608:	00018fab 	.word	0x00018fab
   1b60c:	200040a8 	.word	0x200040a8
   1b610:	20004194 	.word	0x20004194
   1b614:	0001bea5 	.word	0x0001bea5
   1b618:	20004190 	.word	0x20004190
   1b61c:	0001b645 	.word	0x0001b645
   1b620:	000191d1 	.word	0x000191d1
   1b624:	0001920d 	.word	0x0001920d

0001b628 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1b628:	b580      	push	{r7, lr}
   1b62a:	b082      	sub	sp, #8
   1b62c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1b62e:	4b04      	ldr	r3, [pc, #16]	; (1b640 <xTaskGetTickCount+0x18>)
   1b630:	681b      	ldr	r3, [r3, #0]
   1b632:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1b634:	687b      	ldr	r3, [r7, #4]
}
   1b636:	0018      	movs	r0, r3
   1b638:	46bd      	mov	sp, r7
   1b63a:	b002      	add	sp, #8
   1b63c:	bd80      	pop	{r7, pc}
   1b63e:	46c0      	nop			; (mov r8, r8)
   1b640:	20004184 	.word	0x20004184

0001b644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1b644:	b580      	push	{r7, lr}
   1b646:	b086      	sub	sp, #24
   1b648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1b64a:	2300      	movs	r3, #0
   1b64c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1b64e:	4b64      	ldr	r3, [pc, #400]	; (1b7e0 <xTaskIncrementTick+0x19c>)
   1b650:	681b      	ldr	r3, [r3, #0]
   1b652:	2b01      	cmp	r3, #1
   1b654:	d003      	beq.n	1b65e <xTaskIncrementTick+0x1a>
   1b656:	4b63      	ldr	r3, [pc, #396]	; (1b7e4 <xTaskIncrementTick+0x1a0>)
   1b658:	681b      	ldr	r3, [r3, #0]
   1b65a:	2b00      	cmp	r3, #0
   1b65c:	d107      	bne.n	1b66e <xTaskIncrementTick+0x2a>
   1b65e:	4b62      	ldr	r3, [pc, #392]	; (1b7e8 <xTaskIncrementTick+0x1a4>)
   1b660:	681b      	ldr	r3, [r3, #0]
   1b662:	1c5a      	adds	r2, r3, #1
   1b664:	4b60      	ldr	r3, [pc, #384]	; (1b7e8 <xTaskIncrementTick+0x1a4>)
   1b666:	601a      	str	r2, [r3, #0]
   1b668:	2000      	movs	r0, #0
   1b66a:	4b60      	ldr	r3, [pc, #384]	; (1b7ec <xTaskIncrementTick+0x1a8>)
   1b66c:	4798      	blx	r3
   1b66e:	4b5c      	ldr	r3, [pc, #368]	; (1b7e0 <xTaskIncrementTick+0x19c>)
   1b670:	681b      	ldr	r3, [r3, #0]
   1b672:	2b00      	cmp	r3, #0
   1b674:	d106      	bne.n	1b684 <xTaskIncrementTick+0x40>
   1b676:	4b5e      	ldr	r3, [pc, #376]	; (1b7f0 <xTaskIncrementTick+0x1ac>)
   1b678:	681b      	ldr	r3, [r3, #0]
   1b67a:	3301      	adds	r3, #1
   1b67c:	0019      	movs	r1, r3
   1b67e:	2003      	movs	r0, #3
   1b680:	4b5c      	ldr	r3, [pc, #368]	; (1b7f4 <xTaskIncrementTick+0x1b0>)
   1b682:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b684:	4b56      	ldr	r3, [pc, #344]	; (1b7e0 <xTaskIncrementTick+0x19c>)
   1b686:	681b      	ldr	r3, [r3, #0]
   1b688:	2b00      	cmp	r3, #0
   1b68a:	d000      	beq.n	1b68e <xTaskIncrementTick+0x4a>
   1b68c:	e098      	b.n	1b7c0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1b68e:	4b58      	ldr	r3, [pc, #352]	; (1b7f0 <xTaskIncrementTick+0x1ac>)
   1b690:	681b      	ldr	r3, [r3, #0]
   1b692:	3301      	adds	r3, #1
   1b694:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1b696:	4b56      	ldr	r3, [pc, #344]	; (1b7f0 <xTaskIncrementTick+0x1ac>)
   1b698:	693a      	ldr	r2, [r7, #16]
   1b69a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1b69c:	693b      	ldr	r3, [r7, #16]
   1b69e:	2b00      	cmp	r3, #0
   1b6a0:	d117      	bne.n	1b6d2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1b6a2:	4b55      	ldr	r3, [pc, #340]	; (1b7f8 <xTaskIncrementTick+0x1b4>)
   1b6a4:	681b      	ldr	r3, [r3, #0]
   1b6a6:	681b      	ldr	r3, [r3, #0]
   1b6a8:	2b00      	cmp	r3, #0
   1b6aa:	d001      	beq.n	1b6b0 <xTaskIncrementTick+0x6c>
   1b6ac:	b672      	cpsid	i
   1b6ae:	e7fe      	b.n	1b6ae <xTaskIncrementTick+0x6a>
   1b6b0:	4b51      	ldr	r3, [pc, #324]	; (1b7f8 <xTaskIncrementTick+0x1b4>)
   1b6b2:	681b      	ldr	r3, [r3, #0]
   1b6b4:	60fb      	str	r3, [r7, #12]
   1b6b6:	4b51      	ldr	r3, [pc, #324]	; (1b7fc <xTaskIncrementTick+0x1b8>)
   1b6b8:	681a      	ldr	r2, [r3, #0]
   1b6ba:	4b4f      	ldr	r3, [pc, #316]	; (1b7f8 <xTaskIncrementTick+0x1b4>)
   1b6bc:	601a      	str	r2, [r3, #0]
   1b6be:	4b4f      	ldr	r3, [pc, #316]	; (1b7fc <xTaskIncrementTick+0x1b8>)
   1b6c0:	68fa      	ldr	r2, [r7, #12]
   1b6c2:	601a      	str	r2, [r3, #0]
   1b6c4:	4b4e      	ldr	r3, [pc, #312]	; (1b800 <xTaskIncrementTick+0x1bc>)
   1b6c6:	681b      	ldr	r3, [r3, #0]
   1b6c8:	1c5a      	adds	r2, r3, #1
   1b6ca:	4b4d      	ldr	r3, [pc, #308]	; (1b800 <xTaskIncrementTick+0x1bc>)
   1b6cc:	601a      	str	r2, [r3, #0]
   1b6ce:	4b4d      	ldr	r3, [pc, #308]	; (1b804 <xTaskIncrementTick+0x1c0>)
   1b6d0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1b6d2:	4b4d      	ldr	r3, [pc, #308]	; (1b808 <xTaskIncrementTick+0x1c4>)
   1b6d4:	681b      	ldr	r3, [r3, #0]
   1b6d6:	693a      	ldr	r2, [r7, #16]
   1b6d8:	429a      	cmp	r2, r3
   1b6da:	d363      	bcc.n	1b7a4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b6dc:	4b46      	ldr	r3, [pc, #280]	; (1b7f8 <xTaskIncrementTick+0x1b4>)
   1b6de:	681b      	ldr	r3, [r3, #0]
   1b6e0:	681b      	ldr	r3, [r3, #0]
   1b6e2:	2b00      	cmp	r3, #0
   1b6e4:	d101      	bne.n	1b6ea <xTaskIncrementTick+0xa6>
   1b6e6:	2301      	movs	r3, #1
   1b6e8:	e000      	b.n	1b6ec <xTaskIncrementTick+0xa8>
   1b6ea:	2300      	movs	r3, #0
   1b6ec:	2b00      	cmp	r3, #0
   1b6ee:	d004      	beq.n	1b6fa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b6f0:	4b45      	ldr	r3, [pc, #276]	; (1b808 <xTaskIncrementTick+0x1c4>)
   1b6f2:	2201      	movs	r2, #1
   1b6f4:	4252      	negs	r2, r2
   1b6f6:	601a      	str	r2, [r3, #0]
					break;
   1b6f8:	e054      	b.n	1b7a4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1b6fa:	4b3f      	ldr	r3, [pc, #252]	; (1b7f8 <xTaskIncrementTick+0x1b4>)
   1b6fc:	681b      	ldr	r3, [r3, #0]
   1b6fe:	68db      	ldr	r3, [r3, #12]
   1b700:	68db      	ldr	r3, [r3, #12]
   1b702:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1b704:	68bb      	ldr	r3, [r7, #8]
   1b706:	685b      	ldr	r3, [r3, #4]
   1b708:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1b70a:	693a      	ldr	r2, [r7, #16]
   1b70c:	687b      	ldr	r3, [r7, #4]
   1b70e:	429a      	cmp	r2, r3
   1b710:	d203      	bcs.n	1b71a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1b712:	4b3d      	ldr	r3, [pc, #244]	; (1b808 <xTaskIncrementTick+0x1c4>)
   1b714:	687a      	ldr	r2, [r7, #4]
   1b716:	601a      	str	r2, [r3, #0]
						break;
   1b718:	e044      	b.n	1b7a4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b71a:	68bb      	ldr	r3, [r7, #8]
   1b71c:	3304      	adds	r3, #4
   1b71e:	0018      	movs	r0, r3
   1b720:	4b3a      	ldr	r3, [pc, #232]	; (1b80c <xTaskIncrementTick+0x1c8>)
   1b722:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b724:	68bb      	ldr	r3, [r7, #8]
   1b726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b728:	2b00      	cmp	r3, #0
   1b72a:	d004      	beq.n	1b736 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b72c:	68bb      	ldr	r3, [r7, #8]
   1b72e:	3318      	adds	r3, #24
   1b730:	0018      	movs	r0, r3
   1b732:	4b36      	ldr	r3, [pc, #216]	; (1b80c <xTaskIncrementTick+0x1c8>)
   1b734:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1b736:	68bb      	ldr	r3, [r7, #8]
   1b738:	0018      	movs	r0, r3
   1b73a:	4b35      	ldr	r3, [pc, #212]	; (1b810 <xTaskIncrementTick+0x1cc>)
   1b73c:	4798      	blx	r3
   1b73e:	0003      	movs	r3, r0
   1b740:	001a      	movs	r2, r3
   1b742:	4b34      	ldr	r3, [pc, #208]	; (1b814 <xTaskIncrementTick+0x1d0>)
   1b744:	881b      	ldrh	r3, [r3, #0]
   1b746:	4013      	ands	r3, r2
   1b748:	b29b      	uxth	r3, r3
   1b74a:	2b00      	cmp	r3, #0
   1b74c:	d008      	beq.n	1b760 <xTaskIncrementTick+0x11c>
   1b74e:	68bb      	ldr	r3, [r7, #8]
   1b750:	0018      	movs	r0, r3
   1b752:	4b31      	ldr	r3, [pc, #196]	; (1b818 <xTaskIncrementTick+0x1d4>)
   1b754:	4798      	blx	r3
   1b756:	0003      	movs	r3, r0
   1b758:	b2db      	uxtb	r3, r3
   1b75a:	0018      	movs	r0, r3
   1b75c:	4b2f      	ldr	r3, [pc, #188]	; (1b81c <xTaskIncrementTick+0x1d8>)
   1b75e:	4798      	blx	r3
   1b760:	68bb      	ldr	r3, [r7, #8]
   1b762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b764:	4b2e      	ldr	r3, [pc, #184]	; (1b820 <xTaskIncrementTick+0x1dc>)
   1b766:	681b      	ldr	r3, [r3, #0]
   1b768:	429a      	cmp	r2, r3
   1b76a:	d903      	bls.n	1b774 <xTaskIncrementTick+0x130>
   1b76c:	68bb      	ldr	r3, [r7, #8]
   1b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b770:	4b2b      	ldr	r3, [pc, #172]	; (1b820 <xTaskIncrementTick+0x1dc>)
   1b772:	601a      	str	r2, [r3, #0]
   1b774:	68bb      	ldr	r3, [r7, #8]
   1b776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b778:	0013      	movs	r3, r2
   1b77a:	009b      	lsls	r3, r3, #2
   1b77c:	189b      	adds	r3, r3, r2
   1b77e:	009b      	lsls	r3, r3, #2
   1b780:	4a28      	ldr	r2, [pc, #160]	; (1b824 <xTaskIncrementTick+0x1e0>)
   1b782:	189a      	adds	r2, r3, r2
   1b784:	68bb      	ldr	r3, [r7, #8]
   1b786:	3304      	adds	r3, #4
   1b788:	0019      	movs	r1, r3
   1b78a:	0010      	movs	r0, r2
   1b78c:	4b26      	ldr	r3, [pc, #152]	; (1b828 <xTaskIncrementTick+0x1e4>)
   1b78e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b790:	68bb      	ldr	r3, [r7, #8]
   1b792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b794:	4b25      	ldr	r3, [pc, #148]	; (1b82c <xTaskIncrementTick+0x1e8>)
   1b796:	681b      	ldr	r3, [r3, #0]
   1b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b79a:	429a      	cmp	r2, r3
   1b79c:	d39e      	bcc.n	1b6dc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1b79e:	2301      	movs	r3, #1
   1b7a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b7a2:	e79b      	b.n	1b6dc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1b7a4:	4b21      	ldr	r3, [pc, #132]	; (1b82c <xTaskIncrementTick+0x1e8>)
   1b7a6:	681b      	ldr	r3, [r3, #0]
   1b7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b7aa:	491e      	ldr	r1, [pc, #120]	; (1b824 <xTaskIncrementTick+0x1e0>)
   1b7ac:	0013      	movs	r3, r2
   1b7ae:	009b      	lsls	r3, r3, #2
   1b7b0:	189b      	adds	r3, r3, r2
   1b7b2:	009b      	lsls	r3, r3, #2
   1b7b4:	585b      	ldr	r3, [r3, r1]
   1b7b6:	2b01      	cmp	r3, #1
   1b7b8:	d907      	bls.n	1b7ca <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1b7ba:	2301      	movs	r3, #1
   1b7bc:	617b      	str	r3, [r7, #20]
   1b7be:	e004      	b.n	1b7ca <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1b7c0:	4b08      	ldr	r3, [pc, #32]	; (1b7e4 <xTaskIncrementTick+0x1a0>)
   1b7c2:	681b      	ldr	r3, [r3, #0]
   1b7c4:	1c5a      	adds	r2, r3, #1
   1b7c6:	4b07      	ldr	r3, [pc, #28]	; (1b7e4 <xTaskIncrementTick+0x1a0>)
   1b7c8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1b7ca:	4b19      	ldr	r3, [pc, #100]	; (1b830 <xTaskIncrementTick+0x1ec>)
   1b7cc:	681b      	ldr	r3, [r3, #0]
   1b7ce:	2b00      	cmp	r3, #0
   1b7d0:	d001      	beq.n	1b7d6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1b7d2:	2301      	movs	r3, #1
   1b7d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1b7d6:	697b      	ldr	r3, [r7, #20]
}
   1b7d8:	0018      	movs	r0, r3
   1b7da:	46bd      	mov	sp, r7
   1b7dc:	b006      	add	sp, #24
   1b7de:	bd80      	pop	{r7, pc}
   1b7e0:	200041a8 	.word	0x200041a8
   1b7e4:	20004190 	.word	0x20004190
   1b7e8:	20000d08 	.word	0x20000d08
   1b7ec:	00018e75 	.word	0x00018e75
   1b7f0:	20004184 	.word	0x20004184
   1b7f4:	00017ee1 	.word	0x00017ee1
   1b7f8:	20004138 	.word	0x20004138
   1b7fc:	2000413c 	.word	0x2000413c
   1b800:	20004198 	.word	0x20004198
   1b804:	0001bea5 	.word	0x0001bea5
   1b808:	200041a0 	.word	0x200041a0
   1b80c:	0001905b 	.word	0x0001905b
   1b810:	000171e1 	.word	0x000171e1
   1b814:	20000100 	.word	0x20000100
   1b818:	000171c1 	.word	0x000171c1
   1b81c:	00017991 	.word	0x00017991
   1b820:	20004188 	.word	0x20004188
   1b824:	200040ac 	.word	0x200040ac
   1b828:	00018fab 	.word	0x00018fab
   1b82c:	200040a8 	.word	0x200040a8
   1b830:	20004194 	.word	0x20004194

0001b834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1b834:	b580      	push	{r7, lr}
   1b836:	b082      	sub	sp, #8
   1b838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1b83a:	4b3a      	ldr	r3, [pc, #232]	; (1b924 <vTaskSwitchContext+0xf0>)
   1b83c:	681b      	ldr	r3, [r3, #0]
   1b83e:	2b00      	cmp	r3, #0
   1b840:	d003      	beq.n	1b84a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1b842:	4b39      	ldr	r3, [pc, #228]	; (1b928 <vTaskSwitchContext+0xf4>)
   1b844:	2201      	movs	r2, #1
   1b846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1b848:	e067      	b.n	1b91a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1b84a:	4b37      	ldr	r3, [pc, #220]	; (1b928 <vTaskSwitchContext+0xf4>)
   1b84c:	2200      	movs	r2, #0
   1b84e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1b850:	4b36      	ldr	r3, [pc, #216]	; (1b92c <vTaskSwitchContext+0xf8>)
   1b852:	681b      	ldr	r3, [r3, #0]
   1b854:	681a      	ldr	r2, [r3, #0]
   1b856:	4b35      	ldr	r3, [pc, #212]	; (1b92c <vTaskSwitchContext+0xf8>)
   1b858:	681b      	ldr	r3, [r3, #0]
   1b85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b85c:	429a      	cmp	r2, r3
   1b85e:	d808      	bhi.n	1b872 <vTaskSwitchContext+0x3e>
   1b860:	4b32      	ldr	r3, [pc, #200]	; (1b92c <vTaskSwitchContext+0xf8>)
   1b862:	681a      	ldr	r2, [r3, #0]
   1b864:	4b31      	ldr	r3, [pc, #196]	; (1b92c <vTaskSwitchContext+0xf8>)
   1b866:	681b      	ldr	r3, [r3, #0]
   1b868:	3334      	adds	r3, #52	; 0x34
   1b86a:	0019      	movs	r1, r3
   1b86c:	0010      	movs	r0, r2
   1b86e:	4b30      	ldr	r3, [pc, #192]	; (1b930 <vTaskSwitchContext+0xfc>)
   1b870:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1b872:	4b30      	ldr	r3, [pc, #192]	; (1b934 <vTaskSwitchContext+0x100>)
   1b874:	681b      	ldr	r3, [r3, #0]
   1b876:	607b      	str	r3, [r7, #4]
   1b878:	e007      	b.n	1b88a <vTaskSwitchContext+0x56>
   1b87a:	687b      	ldr	r3, [r7, #4]
   1b87c:	2b00      	cmp	r3, #0
   1b87e:	d101      	bne.n	1b884 <vTaskSwitchContext+0x50>
   1b880:	b672      	cpsid	i
   1b882:	e7fe      	b.n	1b882 <vTaskSwitchContext+0x4e>
   1b884:	687b      	ldr	r3, [r7, #4]
   1b886:	3b01      	subs	r3, #1
   1b888:	607b      	str	r3, [r7, #4]
   1b88a:	492b      	ldr	r1, [pc, #172]	; (1b938 <vTaskSwitchContext+0x104>)
   1b88c:	687a      	ldr	r2, [r7, #4]
   1b88e:	0013      	movs	r3, r2
   1b890:	009b      	lsls	r3, r3, #2
   1b892:	189b      	adds	r3, r3, r2
   1b894:	009b      	lsls	r3, r3, #2
   1b896:	585b      	ldr	r3, [r3, r1]
   1b898:	2b00      	cmp	r3, #0
   1b89a:	d0ee      	beq.n	1b87a <vTaskSwitchContext+0x46>
   1b89c:	687a      	ldr	r2, [r7, #4]
   1b89e:	0013      	movs	r3, r2
   1b8a0:	009b      	lsls	r3, r3, #2
   1b8a2:	189b      	adds	r3, r3, r2
   1b8a4:	009b      	lsls	r3, r3, #2
   1b8a6:	4a24      	ldr	r2, [pc, #144]	; (1b938 <vTaskSwitchContext+0x104>)
   1b8a8:	189b      	adds	r3, r3, r2
   1b8aa:	603b      	str	r3, [r7, #0]
   1b8ac:	683b      	ldr	r3, [r7, #0]
   1b8ae:	685b      	ldr	r3, [r3, #4]
   1b8b0:	685a      	ldr	r2, [r3, #4]
   1b8b2:	683b      	ldr	r3, [r7, #0]
   1b8b4:	605a      	str	r2, [r3, #4]
   1b8b6:	683b      	ldr	r3, [r7, #0]
   1b8b8:	685a      	ldr	r2, [r3, #4]
   1b8ba:	683b      	ldr	r3, [r7, #0]
   1b8bc:	3308      	adds	r3, #8
   1b8be:	429a      	cmp	r2, r3
   1b8c0:	d104      	bne.n	1b8cc <vTaskSwitchContext+0x98>
   1b8c2:	683b      	ldr	r3, [r7, #0]
   1b8c4:	685b      	ldr	r3, [r3, #4]
   1b8c6:	685a      	ldr	r2, [r3, #4]
   1b8c8:	683b      	ldr	r3, [r7, #0]
   1b8ca:	605a      	str	r2, [r3, #4]
   1b8cc:	683b      	ldr	r3, [r7, #0]
   1b8ce:	685b      	ldr	r3, [r3, #4]
   1b8d0:	68da      	ldr	r2, [r3, #12]
   1b8d2:	4b16      	ldr	r3, [pc, #88]	; (1b92c <vTaskSwitchContext+0xf8>)
   1b8d4:	601a      	str	r2, [r3, #0]
   1b8d6:	4b17      	ldr	r3, [pc, #92]	; (1b934 <vTaskSwitchContext+0x100>)
   1b8d8:	687a      	ldr	r2, [r7, #4]
   1b8da:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1b8dc:	4b17      	ldr	r3, [pc, #92]	; (1b93c <vTaskSwitchContext+0x108>)
   1b8de:	2201      	movs	r2, #1
   1b8e0:	601a      	str	r2, [r3, #0]
   1b8e2:	4b17      	ldr	r3, [pc, #92]	; (1b940 <vTaskSwitchContext+0x10c>)
   1b8e4:	4798      	blx	r3
   1b8e6:	0003      	movs	r3, r0
   1b8e8:	0018      	movs	r0, r3
   1b8ea:	4b16      	ldr	r3, [pc, #88]	; (1b944 <vTaskSwitchContext+0x110>)
   1b8ec:	4798      	blx	r3
   1b8ee:	0003      	movs	r3, r0
   1b8f0:	001a      	movs	r2, r3
   1b8f2:	4b15      	ldr	r3, [pc, #84]	; (1b948 <vTaskSwitchContext+0x114>)
   1b8f4:	881b      	ldrh	r3, [r3, #0]
   1b8f6:	4013      	ands	r3, r2
   1b8f8:	b29b      	uxth	r3, r3
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	d00a      	beq.n	1b914 <vTaskSwitchContext+0xe0>
   1b8fe:	4b10      	ldr	r3, [pc, #64]	; (1b940 <vTaskSwitchContext+0x10c>)
   1b900:	4798      	blx	r3
   1b902:	0003      	movs	r3, r0
   1b904:	0018      	movs	r0, r3
   1b906:	4b11      	ldr	r3, [pc, #68]	; (1b94c <vTaskSwitchContext+0x118>)
   1b908:	4798      	blx	r3
   1b90a:	0003      	movs	r3, r0
   1b90c:	b2db      	uxtb	r3, r3
   1b90e:	0018      	movs	r0, r3
   1b910:	4b0f      	ldr	r3, [pc, #60]	; (1b950 <vTaskSwitchContext+0x11c>)
   1b912:	4798      	blx	r3
   1b914:	4b09      	ldr	r3, [pc, #36]	; (1b93c <vTaskSwitchContext+0x108>)
   1b916:	2202      	movs	r2, #2
   1b918:	601a      	str	r2, [r3, #0]
}
   1b91a:	46c0      	nop			; (mov r8, r8)
   1b91c:	46bd      	mov	sp, r7
   1b91e:	b002      	add	sp, #8
   1b920:	bd80      	pop	{r7, pc}
   1b922:	46c0      	nop			; (mov r8, r8)
   1b924:	200041a8 	.word	0x200041a8
   1b928:	20004194 	.word	0x20004194
   1b92c:	200040a8 	.word	0x200040a8
   1b930:	00031b3d 	.word	0x00031b3d
   1b934:	20004188 	.word	0x20004188
   1b938:	200040ac 	.word	0x200040ac
   1b93c:	20000d14 	.word	0x20000d14
   1b940:	0001747d 	.word	0x0001747d
   1b944:	000171e1 	.word	0x000171e1
   1b948:	20000100 	.word	0x20000100
   1b94c:	000171c1 	.word	0x000171c1
   1b950:	00017fdd 	.word	0x00017fdd

0001b954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1b954:	b580      	push	{r7, lr}
   1b956:	b082      	sub	sp, #8
   1b958:	af00      	add	r7, sp, #0
   1b95a:	6078      	str	r0, [r7, #4]
   1b95c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1b95e:	687b      	ldr	r3, [r7, #4]
   1b960:	2b00      	cmp	r3, #0
   1b962:	d101      	bne.n	1b968 <vTaskPlaceOnEventList+0x14>
   1b964:	b672      	cpsid	i
   1b966:	e7fe      	b.n	1b966 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b968:	4b08      	ldr	r3, [pc, #32]	; (1b98c <vTaskPlaceOnEventList+0x38>)
   1b96a:	681b      	ldr	r3, [r3, #0]
   1b96c:	3318      	adds	r3, #24
   1b96e:	001a      	movs	r2, r3
   1b970:	687b      	ldr	r3, [r7, #4]
   1b972:	0011      	movs	r1, r2
   1b974:	0018      	movs	r0, r3
   1b976:	4b06      	ldr	r3, [pc, #24]	; (1b990 <vTaskPlaceOnEventList+0x3c>)
   1b978:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1b97a:	683b      	ldr	r3, [r7, #0]
   1b97c:	2101      	movs	r1, #1
   1b97e:	0018      	movs	r0, r3
   1b980:	4b04      	ldr	r3, [pc, #16]	; (1b994 <vTaskPlaceOnEventList+0x40>)
   1b982:	4798      	blx	r3
}
   1b984:	46c0      	nop			; (mov r8, r8)
   1b986:	46bd      	mov	sp, r7
   1b988:	b002      	add	sp, #8
   1b98a:	bd80      	pop	{r7, pc}
   1b98c:	200040a8 	.word	0x200040a8
   1b990:	00018fef 	.word	0x00018fef
   1b994:	0001c3f9 	.word	0x0001c3f9

0001b998 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b998:	b580      	push	{r7, lr}
   1b99a:	b084      	sub	sp, #16
   1b99c:	af00      	add	r7, sp, #0
   1b99e:	60f8      	str	r0, [r7, #12]
   1b9a0:	60b9      	str	r1, [r7, #8]
   1b9a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1b9a4:	68fb      	ldr	r3, [r7, #12]
   1b9a6:	2b00      	cmp	r3, #0
   1b9a8:	d101      	bne.n	1b9ae <vTaskPlaceOnEventListRestricted+0x16>
   1b9aa:	b672      	cpsid	i
   1b9ac:	e7fe      	b.n	1b9ac <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b9ae:	4b28      	ldr	r3, [pc, #160]	; (1ba50 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b9b0:	681b      	ldr	r3, [r3, #0]
   1b9b2:	3318      	adds	r3, #24
   1b9b4:	001a      	movs	r2, r3
   1b9b6:	68fb      	ldr	r3, [r7, #12]
   1b9b8:	0011      	movs	r1, r2
   1b9ba:	0018      	movs	r0, r3
   1b9bc:	4b25      	ldr	r3, [pc, #148]	; (1ba54 <vTaskPlaceOnEventListRestricted+0xbc>)
   1b9be:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1b9c0:	687b      	ldr	r3, [r7, #4]
   1b9c2:	2b00      	cmp	r3, #0
   1b9c4:	d002      	beq.n	1b9cc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1b9c6:	2301      	movs	r3, #1
   1b9c8:	425b      	negs	r3, r3
   1b9ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1b9cc:	4b20      	ldr	r3, [pc, #128]	; (1ba50 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b9ce:	681b      	ldr	r3, [r3, #0]
   1b9d0:	0018      	movs	r0, r3
   1b9d2:	4b21      	ldr	r3, [pc, #132]	; (1ba58 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b9d4:	4798      	blx	r3
   1b9d6:	0003      	movs	r3, r0
   1b9d8:	001a      	movs	r2, r3
   1b9da:	4b20      	ldr	r3, [pc, #128]	; (1ba5c <vTaskPlaceOnEventListRestricted+0xc4>)
   1b9dc:	881b      	ldrh	r3, [r3, #0]
   1b9de:	4013      	ands	r3, r2
   1b9e0:	b29b      	uxth	r3, r3
   1b9e2:	2b00      	cmp	r3, #0
   1b9e4:	d011      	beq.n	1ba0a <vTaskPlaceOnEventListRestricted+0x72>
   1b9e6:	4b1e      	ldr	r3, [pc, #120]	; (1ba60 <vTaskPlaceOnEventListRestricted+0xc8>)
   1b9e8:	681a      	ldr	r2, [r3, #0]
   1b9ea:	68bb      	ldr	r3, [r7, #8]
   1b9ec:	18d3      	adds	r3, r2, r3
   1b9ee:	0019      	movs	r1, r3
   1b9f0:	2088      	movs	r0, #136	; 0x88
   1b9f2:	4b1c      	ldr	r3, [pc, #112]	; (1ba64 <vTaskPlaceOnEventListRestricted+0xcc>)
   1b9f4:	4798      	blx	r3
   1b9f6:	4b16      	ldr	r3, [pc, #88]	; (1ba50 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b9f8:	681b      	ldr	r3, [r3, #0]
   1b9fa:	0018      	movs	r0, r3
   1b9fc:	4b1a      	ldr	r3, [pc, #104]	; (1ba68 <vTaskPlaceOnEventListRestricted+0xd0>)
   1b9fe:	4798      	blx	r3
   1ba00:	0003      	movs	r3, r0
   1ba02:	b2db      	uxtb	r3, r3
   1ba04:	0018      	movs	r0, r3
   1ba06:	4b19      	ldr	r3, [pc, #100]	; (1ba6c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ba08:	4798      	blx	r3
   1ba0a:	4b19      	ldr	r3, [pc, #100]	; (1ba70 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ba0c:	4798      	blx	r3
   1ba0e:	0003      	movs	r3, r0
   1ba10:	0018      	movs	r0, r3
   1ba12:	4b11      	ldr	r3, [pc, #68]	; (1ba58 <vTaskPlaceOnEventListRestricted+0xc0>)
   1ba14:	4798      	blx	r3
   1ba16:	0003      	movs	r3, r0
   1ba18:	001a      	movs	r2, r3
   1ba1a:	4b10      	ldr	r3, [pc, #64]	; (1ba5c <vTaskPlaceOnEventListRestricted+0xc4>)
   1ba1c:	881b      	ldrh	r3, [r3, #0]
   1ba1e:	4013      	ands	r3, r2
   1ba20:	b29b      	uxth	r3, r3
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	d00a      	beq.n	1ba3c <vTaskPlaceOnEventListRestricted+0xa4>
   1ba26:	4b12      	ldr	r3, [pc, #72]	; (1ba70 <vTaskPlaceOnEventListRestricted+0xd8>)
   1ba28:	4798      	blx	r3
   1ba2a:	0003      	movs	r3, r0
   1ba2c:	0018      	movs	r0, r3
   1ba2e:	4b0e      	ldr	r3, [pc, #56]	; (1ba68 <vTaskPlaceOnEventListRestricted+0xd0>)
   1ba30:	4798      	blx	r3
   1ba32:	0003      	movs	r3, r0
   1ba34:	b2db      	uxtb	r3, r3
   1ba36:	0018      	movs	r0, r3
   1ba38:	4b0c      	ldr	r3, [pc, #48]	; (1ba6c <vTaskPlaceOnEventListRestricted+0xd4>)
   1ba3a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ba3c:	687a      	ldr	r2, [r7, #4]
   1ba3e:	68bb      	ldr	r3, [r7, #8]
   1ba40:	0011      	movs	r1, r2
   1ba42:	0018      	movs	r0, r3
   1ba44:	4b0b      	ldr	r3, [pc, #44]	; (1ba74 <vTaskPlaceOnEventListRestricted+0xdc>)
   1ba46:	4798      	blx	r3
	}
   1ba48:	46c0      	nop			; (mov r8, r8)
   1ba4a:	46bd      	mov	sp, r7
   1ba4c:	b004      	add	sp, #16
   1ba4e:	bd80      	pop	{r7, pc}
   1ba50:	200040a8 	.word	0x200040a8
   1ba54:	00018fab 	.word	0x00018fab
   1ba58:	000171e1 	.word	0x000171e1
   1ba5c:	20000100 	.word	0x20000100
   1ba60:	20004184 	.word	0x20004184
   1ba64:	00017ee1 	.word	0x00017ee1
   1ba68:	000171c1 	.word	0x000171c1
   1ba6c:	00018371 	.word	0x00018371
   1ba70:	0001747d 	.word	0x0001747d
   1ba74:	0001c3f9 	.word	0x0001c3f9

0001ba78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ba78:	b580      	push	{r7, lr}
   1ba7a:	b084      	sub	sp, #16
   1ba7c:	af00      	add	r7, sp, #0
   1ba7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1ba80:	687b      	ldr	r3, [r7, #4]
   1ba82:	68db      	ldr	r3, [r3, #12]
   1ba84:	68db      	ldr	r3, [r3, #12]
   1ba86:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ba88:	68bb      	ldr	r3, [r7, #8]
   1ba8a:	2b00      	cmp	r3, #0
   1ba8c:	d101      	bne.n	1ba92 <xTaskRemoveFromEventList+0x1a>
   1ba8e:	b672      	cpsid	i
   1ba90:	e7fe      	b.n	1ba90 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ba92:	68bb      	ldr	r3, [r7, #8]
   1ba94:	3318      	adds	r3, #24
   1ba96:	0018      	movs	r0, r3
   1ba98:	4b2a      	ldr	r3, [pc, #168]	; (1bb44 <xTaskRemoveFromEventList+0xcc>)
   1ba9a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ba9c:	4b2a      	ldr	r3, [pc, #168]	; (1bb48 <xTaskRemoveFromEventList+0xd0>)
   1ba9e:	681b      	ldr	r3, [r3, #0]
   1baa0:	2b00      	cmp	r3, #0
   1baa2:	d132      	bne.n	1bb0a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1baa4:	68bb      	ldr	r3, [r7, #8]
   1baa6:	3304      	adds	r3, #4
   1baa8:	0018      	movs	r0, r3
   1baaa:	4b26      	ldr	r3, [pc, #152]	; (1bb44 <xTaskRemoveFromEventList+0xcc>)
   1baac:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1baae:	68bb      	ldr	r3, [r7, #8]
   1bab0:	0018      	movs	r0, r3
   1bab2:	4b26      	ldr	r3, [pc, #152]	; (1bb4c <xTaskRemoveFromEventList+0xd4>)
   1bab4:	4798      	blx	r3
   1bab6:	0003      	movs	r3, r0
   1bab8:	001a      	movs	r2, r3
   1baba:	4b25      	ldr	r3, [pc, #148]	; (1bb50 <xTaskRemoveFromEventList+0xd8>)
   1babc:	881b      	ldrh	r3, [r3, #0]
   1babe:	4013      	ands	r3, r2
   1bac0:	b29b      	uxth	r3, r3
   1bac2:	2b00      	cmp	r3, #0
   1bac4:	d008      	beq.n	1bad8 <xTaskRemoveFromEventList+0x60>
   1bac6:	68bb      	ldr	r3, [r7, #8]
   1bac8:	0018      	movs	r0, r3
   1baca:	4b22      	ldr	r3, [pc, #136]	; (1bb54 <xTaskRemoveFromEventList+0xdc>)
   1bacc:	4798      	blx	r3
   1bace:	0003      	movs	r3, r0
   1bad0:	b2db      	uxtb	r3, r3
   1bad2:	0018      	movs	r0, r3
   1bad4:	4b20      	ldr	r3, [pc, #128]	; (1bb58 <xTaskRemoveFromEventList+0xe0>)
   1bad6:	4798      	blx	r3
   1bad8:	68bb      	ldr	r3, [r7, #8]
   1bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1badc:	4b1f      	ldr	r3, [pc, #124]	; (1bb5c <xTaskRemoveFromEventList+0xe4>)
   1bade:	681b      	ldr	r3, [r3, #0]
   1bae0:	429a      	cmp	r2, r3
   1bae2:	d903      	bls.n	1baec <xTaskRemoveFromEventList+0x74>
   1bae4:	68bb      	ldr	r3, [r7, #8]
   1bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bae8:	4b1c      	ldr	r3, [pc, #112]	; (1bb5c <xTaskRemoveFromEventList+0xe4>)
   1baea:	601a      	str	r2, [r3, #0]
   1baec:	68bb      	ldr	r3, [r7, #8]
   1baee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1baf0:	0013      	movs	r3, r2
   1baf2:	009b      	lsls	r3, r3, #2
   1baf4:	189b      	adds	r3, r3, r2
   1baf6:	009b      	lsls	r3, r3, #2
   1baf8:	4a19      	ldr	r2, [pc, #100]	; (1bb60 <xTaskRemoveFromEventList+0xe8>)
   1bafa:	189a      	adds	r2, r3, r2
   1bafc:	68bb      	ldr	r3, [r7, #8]
   1bafe:	3304      	adds	r3, #4
   1bb00:	0019      	movs	r1, r3
   1bb02:	0010      	movs	r0, r2
   1bb04:	4b17      	ldr	r3, [pc, #92]	; (1bb64 <xTaskRemoveFromEventList+0xec>)
   1bb06:	4798      	blx	r3
   1bb08:	e007      	b.n	1bb1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1bb0a:	68bb      	ldr	r3, [r7, #8]
   1bb0c:	3318      	adds	r3, #24
   1bb0e:	001a      	movs	r2, r3
   1bb10:	4b15      	ldr	r3, [pc, #84]	; (1bb68 <xTaskRemoveFromEventList+0xf0>)
   1bb12:	0011      	movs	r1, r2
   1bb14:	0018      	movs	r0, r3
   1bb16:	4b13      	ldr	r3, [pc, #76]	; (1bb64 <xTaskRemoveFromEventList+0xec>)
   1bb18:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1bb1a:	68bb      	ldr	r3, [r7, #8]
   1bb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bb1e:	4b13      	ldr	r3, [pc, #76]	; (1bb6c <xTaskRemoveFromEventList+0xf4>)
   1bb20:	681b      	ldr	r3, [r3, #0]
   1bb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bb24:	429a      	cmp	r2, r3
   1bb26:	d905      	bls.n	1bb34 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1bb28:	2301      	movs	r3, #1
   1bb2a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1bb2c:	4b10      	ldr	r3, [pc, #64]	; (1bb70 <xTaskRemoveFromEventList+0xf8>)
   1bb2e:	2201      	movs	r2, #1
   1bb30:	601a      	str	r2, [r3, #0]
   1bb32:	e001      	b.n	1bb38 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1bb34:	2300      	movs	r3, #0
   1bb36:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1bb38:	68fb      	ldr	r3, [r7, #12]
}
   1bb3a:	0018      	movs	r0, r3
   1bb3c:	46bd      	mov	sp, r7
   1bb3e:	b004      	add	sp, #16
   1bb40:	bd80      	pop	{r7, pc}
   1bb42:	46c0      	nop			; (mov r8, r8)
   1bb44:	0001905b 	.word	0x0001905b
   1bb48:	200041a8 	.word	0x200041a8
   1bb4c:	000171e1 	.word	0x000171e1
   1bb50:	20000100 	.word	0x20000100
   1bb54:	000171c1 	.word	0x000171c1
   1bb58:	00017991 	.word	0x00017991
   1bb5c:	20004188 	.word	0x20004188
   1bb60:	200040ac 	.word	0x200040ac
   1bb64:	00018fab 	.word	0x00018fab
   1bb68:	20004140 	.word	0x20004140
   1bb6c:	200040a8 	.word	0x200040a8
   1bb70:	20004194 	.word	0x20004194

0001bb74 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bb74:	b580      	push	{r7, lr}
   1bb76:	b082      	sub	sp, #8
   1bb78:	af00      	add	r7, sp, #0
   1bb7a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1bb7c:	687b      	ldr	r3, [r7, #4]
   1bb7e:	2b00      	cmp	r3, #0
   1bb80:	d101      	bne.n	1bb86 <vTaskSetTimeOutState+0x12>
   1bb82:	b672      	cpsid	i
   1bb84:	e7fe      	b.n	1bb84 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1bb86:	4b08      	ldr	r3, [pc, #32]	; (1bba8 <vTaskSetTimeOutState+0x34>)
   1bb88:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bb8a:	4b08      	ldr	r3, [pc, #32]	; (1bbac <vTaskSetTimeOutState+0x38>)
   1bb8c:	681a      	ldr	r2, [r3, #0]
   1bb8e:	687b      	ldr	r3, [r7, #4]
   1bb90:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1bb92:	4b07      	ldr	r3, [pc, #28]	; (1bbb0 <vTaskSetTimeOutState+0x3c>)
   1bb94:	681a      	ldr	r2, [r3, #0]
   1bb96:	687b      	ldr	r3, [r7, #4]
   1bb98:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1bb9a:	4b06      	ldr	r3, [pc, #24]	; (1bbb4 <vTaskSetTimeOutState+0x40>)
   1bb9c:	4798      	blx	r3
}
   1bb9e:	46c0      	nop			; (mov r8, r8)
   1bba0:	46bd      	mov	sp, r7
   1bba2:	b002      	add	sp, #8
   1bba4:	bd80      	pop	{r7, pc}
   1bba6:	46c0      	nop			; (mov r8, r8)
   1bba8:	000191e9 	.word	0x000191e9
   1bbac:	20004198 	.word	0x20004198
   1bbb0:	20004184 	.word	0x20004184
   1bbb4:	0001920d 	.word	0x0001920d

0001bbb8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bbb8:	b580      	push	{r7, lr}
   1bbba:	b082      	sub	sp, #8
   1bbbc:	af00      	add	r7, sp, #0
   1bbbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bbc0:	4b05      	ldr	r3, [pc, #20]	; (1bbd8 <vTaskInternalSetTimeOutState+0x20>)
   1bbc2:	681a      	ldr	r2, [r3, #0]
   1bbc4:	687b      	ldr	r3, [r7, #4]
   1bbc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1bbc8:	4b04      	ldr	r3, [pc, #16]	; (1bbdc <vTaskInternalSetTimeOutState+0x24>)
   1bbca:	681a      	ldr	r2, [r3, #0]
   1bbcc:	687b      	ldr	r3, [r7, #4]
   1bbce:	605a      	str	r2, [r3, #4]
}
   1bbd0:	46c0      	nop			; (mov r8, r8)
   1bbd2:	46bd      	mov	sp, r7
   1bbd4:	b002      	add	sp, #8
   1bbd6:	bd80      	pop	{r7, pc}
   1bbd8:	20004198 	.word	0x20004198
   1bbdc:	20004184 	.word	0x20004184

0001bbe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1bbe0:	b580      	push	{r7, lr}
   1bbe2:	b086      	sub	sp, #24
   1bbe4:	af00      	add	r7, sp, #0
   1bbe6:	6078      	str	r0, [r7, #4]
   1bbe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1bbea:	687b      	ldr	r3, [r7, #4]
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	d101      	bne.n	1bbf4 <xTaskCheckForTimeOut+0x14>
   1bbf0:	b672      	cpsid	i
   1bbf2:	e7fe      	b.n	1bbf2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1bbf4:	683b      	ldr	r3, [r7, #0]
   1bbf6:	2b00      	cmp	r3, #0
   1bbf8:	d101      	bne.n	1bbfe <xTaskCheckForTimeOut+0x1e>
   1bbfa:	b672      	cpsid	i
   1bbfc:	e7fe      	b.n	1bbfc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1bbfe:	4b1e      	ldr	r3, [pc, #120]	; (1bc78 <xTaskCheckForTimeOut+0x98>)
   1bc00:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1bc02:	4b1e      	ldr	r3, [pc, #120]	; (1bc7c <xTaskCheckForTimeOut+0x9c>)
   1bc04:	681b      	ldr	r3, [r3, #0]
   1bc06:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1bc08:	687b      	ldr	r3, [r7, #4]
   1bc0a:	685b      	ldr	r3, [r3, #4]
   1bc0c:	693a      	ldr	r2, [r7, #16]
   1bc0e:	1ad3      	subs	r3, r2, r3
   1bc10:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1bc12:	683b      	ldr	r3, [r7, #0]
   1bc14:	681b      	ldr	r3, [r3, #0]
   1bc16:	3301      	adds	r3, #1
   1bc18:	d102      	bne.n	1bc20 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1bc1a:	2300      	movs	r3, #0
   1bc1c:	617b      	str	r3, [r7, #20]
   1bc1e:	e024      	b.n	1bc6a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1bc20:	687b      	ldr	r3, [r7, #4]
   1bc22:	681a      	ldr	r2, [r3, #0]
   1bc24:	4b16      	ldr	r3, [pc, #88]	; (1bc80 <xTaskCheckForTimeOut+0xa0>)
   1bc26:	681b      	ldr	r3, [r3, #0]
   1bc28:	429a      	cmp	r2, r3
   1bc2a:	d007      	beq.n	1bc3c <xTaskCheckForTimeOut+0x5c>
   1bc2c:	687b      	ldr	r3, [r7, #4]
   1bc2e:	685a      	ldr	r2, [r3, #4]
   1bc30:	693b      	ldr	r3, [r7, #16]
   1bc32:	429a      	cmp	r2, r3
   1bc34:	d802      	bhi.n	1bc3c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1bc36:	2301      	movs	r3, #1
   1bc38:	617b      	str	r3, [r7, #20]
   1bc3a:	e016      	b.n	1bc6a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1bc3c:	683b      	ldr	r3, [r7, #0]
   1bc3e:	681a      	ldr	r2, [r3, #0]
   1bc40:	68fb      	ldr	r3, [r7, #12]
   1bc42:	429a      	cmp	r2, r3
   1bc44:	d90c      	bls.n	1bc60 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1bc46:	683b      	ldr	r3, [r7, #0]
   1bc48:	681a      	ldr	r2, [r3, #0]
   1bc4a:	68fb      	ldr	r3, [r7, #12]
   1bc4c:	1ad2      	subs	r2, r2, r3
   1bc4e:	683b      	ldr	r3, [r7, #0]
   1bc50:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1bc52:	687b      	ldr	r3, [r7, #4]
   1bc54:	0018      	movs	r0, r3
   1bc56:	4b0b      	ldr	r3, [pc, #44]	; (1bc84 <xTaskCheckForTimeOut+0xa4>)
   1bc58:	4798      	blx	r3
			xReturn = pdFALSE;
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	617b      	str	r3, [r7, #20]
   1bc5e:	e004      	b.n	1bc6a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1bc60:	683b      	ldr	r3, [r7, #0]
   1bc62:	2200      	movs	r2, #0
   1bc64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1bc66:	2301      	movs	r3, #1
   1bc68:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1bc6a:	4b07      	ldr	r3, [pc, #28]	; (1bc88 <xTaskCheckForTimeOut+0xa8>)
   1bc6c:	4798      	blx	r3

	return xReturn;
   1bc6e:	697b      	ldr	r3, [r7, #20]
}
   1bc70:	0018      	movs	r0, r3
   1bc72:	46bd      	mov	sp, r7
   1bc74:	b006      	add	sp, #24
   1bc76:	bd80      	pop	{r7, pc}
   1bc78:	000191e9 	.word	0x000191e9
   1bc7c:	20004184 	.word	0x20004184
   1bc80:	20004198 	.word	0x20004198
   1bc84:	0001bbb9 	.word	0x0001bbb9
   1bc88:	0001920d 	.word	0x0001920d

0001bc8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1bc8c:	b580      	push	{r7, lr}
   1bc8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1bc90:	4b02      	ldr	r3, [pc, #8]	; (1bc9c <vTaskMissedYield+0x10>)
   1bc92:	2201      	movs	r2, #1
   1bc94:	601a      	str	r2, [r3, #0]
}
   1bc96:	46c0      	nop			; (mov r8, r8)
   1bc98:	46bd      	mov	sp, r7
   1bc9a:	bd80      	pop	{r7, pc}
   1bc9c:	20004194 	.word	0x20004194

0001bca0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1bca0:	b580      	push	{r7, lr}
   1bca2:	b084      	sub	sp, #16
   1bca4:	af00      	add	r7, sp, #0
   1bca6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bca8:	687b      	ldr	r3, [r7, #4]
   1bcaa:	2b00      	cmp	r3, #0
   1bcac:	d005      	beq.n	1bcba <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bcae:	687b      	ldr	r3, [r7, #4]
   1bcb0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1bcb2:	68bb      	ldr	r3, [r7, #8]
   1bcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bcb6:	60fb      	str	r3, [r7, #12]
   1bcb8:	e001      	b.n	1bcbe <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1bcba:	2300      	movs	r3, #0
   1bcbc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1bcbe:	68fb      	ldr	r3, [r7, #12]
	}
   1bcc0:	0018      	movs	r0, r3
   1bcc2:	46bd      	mov	sp, r7
   1bcc4:	b004      	add	sp, #16
   1bcc6:	bd80      	pop	{r7, pc}

0001bcc8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1bcc8:	b580      	push	{r7, lr}
   1bcca:	b084      	sub	sp, #16
   1bccc:	af00      	add	r7, sp, #0
   1bcce:	6078      	str	r0, [r7, #4]
   1bcd0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bcd2:	687b      	ldr	r3, [r7, #4]
   1bcd4:	2b00      	cmp	r3, #0
   1bcd6:	d004      	beq.n	1bce2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bcd8:	687b      	ldr	r3, [r7, #4]
   1bcda:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1bcdc:	68fb      	ldr	r3, [r7, #12]
   1bcde:	683a      	ldr	r2, [r7, #0]
   1bce0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1bce2:	46c0      	nop			; (mov r8, r8)
   1bce4:	46bd      	mov	sp, r7
   1bce6:	b004      	add	sp, #16
   1bce8:	bd80      	pop	{r7, pc}
	...

0001bcec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1bcec:	b580      	push	{r7, lr}
   1bcee:	b082      	sub	sp, #8
   1bcf0:	af00      	add	r7, sp, #0
   1bcf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1bcf4:	4b04      	ldr	r3, [pc, #16]	; (1bd08 <prvIdleTask+0x1c>)
   1bcf6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1bcf8:	4b04      	ldr	r3, [pc, #16]	; (1bd0c <prvIdleTask+0x20>)
   1bcfa:	681b      	ldr	r3, [r3, #0]
   1bcfc:	2b01      	cmp	r3, #1
   1bcfe:	d9f9      	bls.n	1bcf4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1bd00:	4b03      	ldr	r3, [pc, #12]	; (1bd10 <prvIdleTask+0x24>)
   1bd02:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1bd04:	e7f6      	b.n	1bcf4 <prvIdleTask+0x8>
   1bd06:	46c0      	nop			; (mov r8, r8)
   1bd08:	0001bda1 	.word	0x0001bda1
   1bd0c:	200040ac 	.word	0x200040ac
   1bd10:	000191d1 	.word	0x000191d1

0001bd14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1bd14:	b580      	push	{r7, lr}
   1bd16:	b082      	sub	sp, #8
   1bd18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1bd1a:	2300      	movs	r3, #0
   1bd1c:	607b      	str	r3, [r7, #4]
   1bd1e:	e00c      	b.n	1bd3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1bd20:	687a      	ldr	r2, [r7, #4]
   1bd22:	0013      	movs	r3, r2
   1bd24:	009b      	lsls	r3, r3, #2
   1bd26:	189b      	adds	r3, r3, r2
   1bd28:	009b      	lsls	r3, r3, #2
   1bd2a:	4a14      	ldr	r2, [pc, #80]	; (1bd7c <prvInitialiseTaskLists+0x68>)
   1bd2c:	189b      	adds	r3, r3, r2
   1bd2e:	0018      	movs	r0, r3
   1bd30:	4b13      	ldr	r3, [pc, #76]	; (1bd80 <prvInitialiseTaskLists+0x6c>)
   1bd32:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1bd34:	687b      	ldr	r3, [r7, #4]
   1bd36:	3301      	adds	r3, #1
   1bd38:	607b      	str	r3, [r7, #4]
   1bd3a:	687b      	ldr	r3, [r7, #4]
   1bd3c:	2b04      	cmp	r3, #4
   1bd3e:	d9ef      	bls.n	1bd20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1bd40:	4b10      	ldr	r3, [pc, #64]	; (1bd84 <prvInitialiseTaskLists+0x70>)
   1bd42:	0018      	movs	r0, r3
   1bd44:	4b0e      	ldr	r3, [pc, #56]	; (1bd80 <prvInitialiseTaskLists+0x6c>)
   1bd46:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1bd48:	4b0f      	ldr	r3, [pc, #60]	; (1bd88 <prvInitialiseTaskLists+0x74>)
   1bd4a:	0018      	movs	r0, r3
   1bd4c:	4b0c      	ldr	r3, [pc, #48]	; (1bd80 <prvInitialiseTaskLists+0x6c>)
   1bd4e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1bd50:	4b0e      	ldr	r3, [pc, #56]	; (1bd8c <prvInitialiseTaskLists+0x78>)
   1bd52:	0018      	movs	r0, r3
   1bd54:	4b0a      	ldr	r3, [pc, #40]	; (1bd80 <prvInitialiseTaskLists+0x6c>)
   1bd56:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1bd58:	4b0d      	ldr	r3, [pc, #52]	; (1bd90 <prvInitialiseTaskLists+0x7c>)
   1bd5a:	0018      	movs	r0, r3
   1bd5c:	4b08      	ldr	r3, [pc, #32]	; (1bd80 <prvInitialiseTaskLists+0x6c>)
   1bd5e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1bd60:	4b0c      	ldr	r3, [pc, #48]	; (1bd94 <prvInitialiseTaskLists+0x80>)
   1bd62:	0018      	movs	r0, r3
   1bd64:	4b06      	ldr	r3, [pc, #24]	; (1bd80 <prvInitialiseTaskLists+0x6c>)
   1bd66:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1bd68:	4b0b      	ldr	r3, [pc, #44]	; (1bd98 <prvInitialiseTaskLists+0x84>)
   1bd6a:	4a06      	ldr	r2, [pc, #24]	; (1bd84 <prvInitialiseTaskLists+0x70>)
   1bd6c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1bd6e:	4b0b      	ldr	r3, [pc, #44]	; (1bd9c <prvInitialiseTaskLists+0x88>)
   1bd70:	4a05      	ldr	r2, [pc, #20]	; (1bd88 <prvInitialiseTaskLists+0x74>)
   1bd72:	601a      	str	r2, [r3, #0]
}
   1bd74:	46c0      	nop			; (mov r8, r8)
   1bd76:	46bd      	mov	sp, r7
   1bd78:	b002      	add	sp, #8
   1bd7a:	bd80      	pop	{r7, pc}
   1bd7c:	200040ac 	.word	0x200040ac
   1bd80:	00018f59 	.word	0x00018f59
   1bd84:	20004110 	.word	0x20004110
   1bd88:	20004124 	.word	0x20004124
   1bd8c:	20004140 	.word	0x20004140
   1bd90:	20004154 	.word	0x20004154
   1bd94:	2000416c 	.word	0x2000416c
   1bd98:	20004138 	.word	0x20004138
   1bd9c:	2000413c 	.word	0x2000413c

0001bda0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1bda0:	b580      	push	{r7, lr}
   1bda2:	b082      	sub	sp, #8
   1bda4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1bda6:	e01a      	b.n	1bdde <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1bda8:	4b11      	ldr	r3, [pc, #68]	; (1bdf0 <prvCheckTasksWaitingTermination+0x50>)
   1bdaa:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1bdac:	4b11      	ldr	r3, [pc, #68]	; (1bdf4 <prvCheckTasksWaitingTermination+0x54>)
   1bdae:	68db      	ldr	r3, [r3, #12]
   1bdb0:	68db      	ldr	r3, [r3, #12]
   1bdb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1bdb4:	687b      	ldr	r3, [r7, #4]
   1bdb6:	3304      	adds	r3, #4
   1bdb8:	0018      	movs	r0, r3
   1bdba:	4b0f      	ldr	r3, [pc, #60]	; (1bdf8 <prvCheckTasksWaitingTermination+0x58>)
   1bdbc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1bdbe:	4b0f      	ldr	r3, [pc, #60]	; (1bdfc <prvCheckTasksWaitingTermination+0x5c>)
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	1e5a      	subs	r2, r3, #1
   1bdc4:	4b0d      	ldr	r3, [pc, #52]	; (1bdfc <prvCheckTasksWaitingTermination+0x5c>)
   1bdc6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1bdc8:	4b0d      	ldr	r3, [pc, #52]	; (1be00 <prvCheckTasksWaitingTermination+0x60>)
   1bdca:	681b      	ldr	r3, [r3, #0]
   1bdcc:	1e5a      	subs	r2, r3, #1
   1bdce:	4b0c      	ldr	r3, [pc, #48]	; (1be00 <prvCheckTasksWaitingTermination+0x60>)
   1bdd0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1bdd2:	4b0c      	ldr	r3, [pc, #48]	; (1be04 <prvCheckTasksWaitingTermination+0x64>)
   1bdd4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1bdd6:	687b      	ldr	r3, [r7, #4]
   1bdd8:	0018      	movs	r0, r3
   1bdda:	4b0b      	ldr	r3, [pc, #44]	; (1be08 <prvCheckTasksWaitingTermination+0x68>)
   1bddc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1bdde:	4b08      	ldr	r3, [pc, #32]	; (1be00 <prvCheckTasksWaitingTermination+0x60>)
   1bde0:	681b      	ldr	r3, [r3, #0]
   1bde2:	2b00      	cmp	r3, #0
   1bde4:	d1e0      	bne.n	1bda8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1bde6:	46c0      	nop			; (mov r8, r8)
   1bde8:	46bd      	mov	sp, r7
   1bdea:	b002      	add	sp, #8
   1bdec:	bd80      	pop	{r7, pc}
   1bdee:	46c0      	nop			; (mov r8, r8)
   1bdf0:	000191e9 	.word	0x000191e9
   1bdf4:	20004154 	.word	0x20004154
   1bdf8:	0001905b 	.word	0x0001905b
   1bdfc:	20004180 	.word	0x20004180
   1be00:	20004168 	.word	0x20004168
   1be04:	0001920d 	.word	0x0001920d
   1be08:	0001be7d 	.word	0x0001be7d

0001be0c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1be0c:	b580      	push	{r7, lr}
   1be0e:	b084      	sub	sp, #16
   1be10:	af00      	add	r7, sp, #0
   1be12:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1be14:	2300      	movs	r3, #0
   1be16:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1be18:	e005      	b.n	1be26 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1be1a:	687b      	ldr	r3, [r7, #4]
   1be1c:	3301      	adds	r3, #1
   1be1e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1be20:	68fb      	ldr	r3, [r7, #12]
   1be22:	3301      	adds	r3, #1
   1be24:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1be26:	687b      	ldr	r3, [r7, #4]
   1be28:	781b      	ldrb	r3, [r3, #0]
   1be2a:	2ba5      	cmp	r3, #165	; 0xa5
   1be2c:	d0f5      	beq.n	1be1a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1be2e:	68fb      	ldr	r3, [r7, #12]
   1be30:	089b      	lsrs	r3, r3, #2
   1be32:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1be34:	68fb      	ldr	r3, [r7, #12]
   1be36:	b29b      	uxth	r3, r3
	}
   1be38:	0018      	movs	r0, r3
   1be3a:	46bd      	mov	sp, r7
   1be3c:	b004      	add	sp, #16
   1be3e:	bd80      	pop	{r7, pc}

0001be40 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1be40:	b580      	push	{r7, lr}
   1be42:	b086      	sub	sp, #24
   1be44:	af00      	add	r7, sp, #0
   1be46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1be48:	687b      	ldr	r3, [r7, #4]
   1be4a:	2b00      	cmp	r3, #0
   1be4c:	d102      	bne.n	1be54 <uxTaskGetStackHighWaterMark+0x14>
   1be4e:	4b09      	ldr	r3, [pc, #36]	; (1be74 <uxTaskGetStackHighWaterMark+0x34>)
   1be50:	681b      	ldr	r3, [r3, #0]
   1be52:	e000      	b.n	1be56 <uxTaskGetStackHighWaterMark+0x16>
   1be54:	687b      	ldr	r3, [r7, #4]
   1be56:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1be58:	697b      	ldr	r3, [r7, #20]
   1be5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1be5c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1be5e:	693b      	ldr	r3, [r7, #16]
   1be60:	0018      	movs	r0, r3
   1be62:	4b05      	ldr	r3, [pc, #20]	; (1be78 <uxTaskGetStackHighWaterMark+0x38>)
   1be64:	4798      	blx	r3
   1be66:	0003      	movs	r3, r0
   1be68:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1be6a:	68fb      	ldr	r3, [r7, #12]
	}
   1be6c:	0018      	movs	r0, r3
   1be6e:	46bd      	mov	sp, r7
   1be70:	b006      	add	sp, #24
   1be72:	bd80      	pop	{r7, pc}
   1be74:	200040a8 	.word	0x200040a8
   1be78:	0001be0d 	.word	0x0001be0d

0001be7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1be7c:	b580      	push	{r7, lr}
   1be7e:	b082      	sub	sp, #8
   1be80:	af00      	add	r7, sp, #0
   1be82:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1be84:	687b      	ldr	r3, [r7, #4]
   1be86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1be88:	0018      	movs	r0, r3
   1be8a:	4b05      	ldr	r3, [pc, #20]	; (1bea0 <prvDeleteTCB+0x24>)
   1be8c:	4798      	blx	r3
			vPortFree( pxTCB );
   1be8e:	687b      	ldr	r3, [r7, #4]
   1be90:	0018      	movs	r0, r3
   1be92:	4b03      	ldr	r3, [pc, #12]	; (1bea0 <prvDeleteTCB+0x24>)
   1be94:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1be96:	46c0      	nop			; (mov r8, r8)
   1be98:	46bd      	mov	sp, r7
   1be9a:	b002      	add	sp, #8
   1be9c:	bd80      	pop	{r7, pc}
   1be9e:	46c0      	nop			; (mov r8, r8)
   1bea0:	000193e5 	.word	0x000193e5

0001bea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1bea4:	b580      	push	{r7, lr}
   1bea6:	b082      	sub	sp, #8
   1bea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1beaa:	4b0e      	ldr	r3, [pc, #56]	; (1bee4 <prvResetNextTaskUnblockTime+0x40>)
   1beac:	681b      	ldr	r3, [r3, #0]
   1beae:	681b      	ldr	r3, [r3, #0]
   1beb0:	2b00      	cmp	r3, #0
   1beb2:	d101      	bne.n	1beb8 <prvResetNextTaskUnblockTime+0x14>
   1beb4:	2301      	movs	r3, #1
   1beb6:	e000      	b.n	1beba <prvResetNextTaskUnblockTime+0x16>
   1beb8:	2300      	movs	r3, #0
   1beba:	2b00      	cmp	r3, #0
   1bebc:	d004      	beq.n	1bec8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1bebe:	4b0a      	ldr	r3, [pc, #40]	; (1bee8 <prvResetNextTaskUnblockTime+0x44>)
   1bec0:	2201      	movs	r2, #1
   1bec2:	4252      	negs	r2, r2
   1bec4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1bec6:	e008      	b.n	1beda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1bec8:	4b06      	ldr	r3, [pc, #24]	; (1bee4 <prvResetNextTaskUnblockTime+0x40>)
   1beca:	681b      	ldr	r3, [r3, #0]
   1becc:	68db      	ldr	r3, [r3, #12]
   1bece:	68db      	ldr	r3, [r3, #12]
   1bed0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1bed2:	687b      	ldr	r3, [r7, #4]
   1bed4:	685a      	ldr	r2, [r3, #4]
   1bed6:	4b04      	ldr	r3, [pc, #16]	; (1bee8 <prvResetNextTaskUnblockTime+0x44>)
   1bed8:	601a      	str	r2, [r3, #0]
}
   1beda:	46c0      	nop			; (mov r8, r8)
   1bedc:	46bd      	mov	sp, r7
   1bede:	b002      	add	sp, #8
   1bee0:	bd80      	pop	{r7, pc}
   1bee2:	46c0      	nop			; (mov r8, r8)
   1bee4:	20004138 	.word	0x20004138
   1bee8:	200041a0 	.word	0x200041a0

0001beec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1beec:	b580      	push	{r7, lr}
   1beee:	b082      	sub	sp, #8
   1bef0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1bef2:	4b04      	ldr	r3, [pc, #16]	; (1bf04 <xTaskGetCurrentTaskHandle+0x18>)
   1bef4:	681b      	ldr	r3, [r3, #0]
   1bef6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1bef8:	687b      	ldr	r3, [r7, #4]
	}
   1befa:	0018      	movs	r0, r3
   1befc:	46bd      	mov	sp, r7
   1befe:	b002      	add	sp, #8
   1bf00:	bd80      	pop	{r7, pc}
   1bf02:	46c0      	nop			; (mov r8, r8)
   1bf04:	200040a8 	.word	0x200040a8

0001bf08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1bf08:	b580      	push	{r7, lr}
   1bf0a:	b082      	sub	sp, #8
   1bf0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1bf0e:	4b0a      	ldr	r3, [pc, #40]	; (1bf38 <xTaskGetSchedulerState+0x30>)
   1bf10:	681b      	ldr	r3, [r3, #0]
   1bf12:	2b00      	cmp	r3, #0
   1bf14:	d102      	bne.n	1bf1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1bf16:	2301      	movs	r3, #1
   1bf18:	607b      	str	r3, [r7, #4]
   1bf1a:	e008      	b.n	1bf2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1bf1c:	4b07      	ldr	r3, [pc, #28]	; (1bf3c <xTaskGetSchedulerState+0x34>)
   1bf1e:	681b      	ldr	r3, [r3, #0]
   1bf20:	2b00      	cmp	r3, #0
   1bf22:	d102      	bne.n	1bf2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1bf24:	2302      	movs	r3, #2
   1bf26:	607b      	str	r3, [r7, #4]
   1bf28:	e001      	b.n	1bf2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1bf2a:	2300      	movs	r3, #0
   1bf2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1bf2e:	687b      	ldr	r3, [r7, #4]
	}
   1bf30:	0018      	movs	r0, r3
   1bf32:	46bd      	mov	sp, r7
   1bf34:	b002      	add	sp, #8
   1bf36:	bd80      	pop	{r7, pc}
   1bf38:	2000418c 	.word	0x2000418c
   1bf3c:	200041a8 	.word	0x200041a8

0001bf40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1bf40:	b590      	push	{r4, r7, lr}
   1bf42:	b085      	sub	sp, #20
   1bf44:	af00      	add	r7, sp, #0
   1bf46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1bf4c:	2300      	movs	r3, #0
   1bf4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1bf50:	687b      	ldr	r3, [r7, #4]
   1bf52:	2b00      	cmp	r3, #0
   1bf54:	d100      	bne.n	1bf58 <xTaskPriorityInherit+0x18>
   1bf56:	e09d      	b.n	1c094 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1bf58:	68bb      	ldr	r3, [r7, #8]
   1bf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf5c:	4b50      	ldr	r3, [pc, #320]	; (1c0a0 <xTaskPriorityInherit+0x160>)
   1bf5e:	681b      	ldr	r3, [r3, #0]
   1bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf62:	429a      	cmp	r2, r3
   1bf64:	d300      	bcc.n	1bf68 <xTaskPriorityInherit+0x28>
   1bf66:	e08c      	b.n	1c082 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1bf68:	68bb      	ldr	r3, [r7, #8]
   1bf6a:	699b      	ldr	r3, [r3, #24]
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	db06      	blt.n	1bf7e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bf70:	4b4b      	ldr	r3, [pc, #300]	; (1c0a0 <xTaskPriorityInherit+0x160>)
   1bf72:	681b      	ldr	r3, [r3, #0]
   1bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf76:	2205      	movs	r2, #5
   1bf78:	1ad2      	subs	r2, r2, r3
   1bf7a:	68bb      	ldr	r3, [r7, #8]
   1bf7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1bf7e:	68bb      	ldr	r3, [r7, #8]
   1bf80:	6959      	ldr	r1, [r3, #20]
   1bf82:	68bb      	ldr	r3, [r7, #8]
   1bf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf86:	0013      	movs	r3, r2
   1bf88:	009b      	lsls	r3, r3, #2
   1bf8a:	189b      	adds	r3, r3, r2
   1bf8c:	009b      	lsls	r3, r3, #2
   1bf8e:	4a45      	ldr	r2, [pc, #276]	; (1c0a4 <xTaskPriorityInherit+0x164>)
   1bf90:	189b      	adds	r3, r3, r2
   1bf92:	4299      	cmp	r1, r3
   1bf94:	d101      	bne.n	1bf9a <xTaskPriorityInherit+0x5a>
   1bf96:	2301      	movs	r3, #1
   1bf98:	e000      	b.n	1bf9c <xTaskPriorityInherit+0x5c>
   1bf9a:	2300      	movs	r3, #0
   1bf9c:	2b00      	cmp	r3, #0
   1bf9e:	d037      	beq.n	1c010 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bfa0:	68bb      	ldr	r3, [r7, #8]
   1bfa2:	3304      	adds	r3, #4
   1bfa4:	0018      	movs	r0, r3
   1bfa6:	4b40      	ldr	r3, [pc, #256]	; (1c0a8 <xTaskPriorityInherit+0x168>)
   1bfa8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1bfaa:	4b3d      	ldr	r3, [pc, #244]	; (1c0a0 <xTaskPriorityInherit+0x160>)
   1bfac:	681b      	ldr	r3, [r3, #0]
   1bfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfb0:	68bb      	ldr	r3, [r7, #8]
   1bfb2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1bfb4:	68bb      	ldr	r3, [r7, #8]
   1bfb6:	0018      	movs	r0, r3
   1bfb8:	4b3c      	ldr	r3, [pc, #240]	; (1c0ac <xTaskPriorityInherit+0x16c>)
   1bfba:	4798      	blx	r3
   1bfbc:	0003      	movs	r3, r0
   1bfbe:	001a      	movs	r2, r3
   1bfc0:	4b3b      	ldr	r3, [pc, #236]	; (1c0b0 <xTaskPriorityInherit+0x170>)
   1bfc2:	881b      	ldrh	r3, [r3, #0]
   1bfc4:	4013      	ands	r3, r2
   1bfc6:	b29b      	uxth	r3, r3
   1bfc8:	2b00      	cmp	r3, #0
   1bfca:	d008      	beq.n	1bfde <xTaskPriorityInherit+0x9e>
   1bfcc:	68bb      	ldr	r3, [r7, #8]
   1bfce:	0018      	movs	r0, r3
   1bfd0:	4b38      	ldr	r3, [pc, #224]	; (1c0b4 <xTaskPriorityInherit+0x174>)
   1bfd2:	4798      	blx	r3
   1bfd4:	0003      	movs	r3, r0
   1bfd6:	b2db      	uxtb	r3, r3
   1bfd8:	0018      	movs	r0, r3
   1bfda:	4b37      	ldr	r3, [pc, #220]	; (1c0b8 <xTaskPriorityInherit+0x178>)
   1bfdc:	4798      	blx	r3
   1bfde:	68bb      	ldr	r3, [r7, #8]
   1bfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfe2:	4b36      	ldr	r3, [pc, #216]	; (1c0bc <xTaskPriorityInherit+0x17c>)
   1bfe4:	681b      	ldr	r3, [r3, #0]
   1bfe6:	429a      	cmp	r2, r3
   1bfe8:	d903      	bls.n	1bff2 <xTaskPriorityInherit+0xb2>
   1bfea:	68bb      	ldr	r3, [r7, #8]
   1bfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bfee:	4b33      	ldr	r3, [pc, #204]	; (1c0bc <xTaskPriorityInherit+0x17c>)
   1bff0:	601a      	str	r2, [r3, #0]
   1bff2:	68bb      	ldr	r3, [r7, #8]
   1bff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bff6:	0013      	movs	r3, r2
   1bff8:	009b      	lsls	r3, r3, #2
   1bffa:	189b      	adds	r3, r3, r2
   1bffc:	009b      	lsls	r3, r3, #2
   1bffe:	4a29      	ldr	r2, [pc, #164]	; (1c0a4 <xTaskPriorityInherit+0x164>)
   1c000:	189a      	adds	r2, r3, r2
   1c002:	68bb      	ldr	r3, [r7, #8]
   1c004:	3304      	adds	r3, #4
   1c006:	0019      	movs	r1, r3
   1c008:	0010      	movs	r0, r2
   1c00a:	4b2d      	ldr	r3, [pc, #180]	; (1c0c0 <xTaskPriorityInherit+0x180>)
   1c00c:	4798      	blx	r3
   1c00e:	e004      	b.n	1c01a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c010:	4b23      	ldr	r3, [pc, #140]	; (1c0a0 <xTaskPriorityInherit+0x160>)
   1c012:	681b      	ldr	r3, [r3, #0]
   1c014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c016:	68bb      	ldr	r3, [r7, #8]
   1c018:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1c01a:	68bb      	ldr	r3, [r7, #8]
   1c01c:	0018      	movs	r0, r3
   1c01e:	4b23      	ldr	r3, [pc, #140]	; (1c0ac <xTaskPriorityInherit+0x16c>)
   1c020:	4798      	blx	r3
   1c022:	0003      	movs	r3, r0
   1c024:	001a      	movs	r2, r3
   1c026:	4b22      	ldr	r3, [pc, #136]	; (1c0b0 <xTaskPriorityInherit+0x170>)
   1c028:	881b      	ldrh	r3, [r3, #0]
   1c02a:	4013      	ands	r3, r2
   1c02c:	b29b      	uxth	r3, r3
   1c02e:	2b00      	cmp	r3, #0
   1c030:	d024      	beq.n	1c07c <xTaskPriorityInherit+0x13c>
   1c032:	68bb      	ldr	r3, [r7, #8]
   1c034:	0018      	movs	r0, r3
   1c036:	4b1f      	ldr	r3, [pc, #124]	; (1c0b4 <xTaskPriorityInherit+0x174>)
   1c038:	4798      	blx	r3
   1c03a:	0003      	movs	r3, r0
   1c03c:	b2db      	uxtb	r3, r3
   1c03e:	001c      	movs	r4, r3
   1c040:	68bb      	ldr	r3, [r7, #8]
   1c042:	0018      	movs	r0, r3
   1c044:	4b1b      	ldr	r3, [pc, #108]	; (1c0b4 <xTaskPriorityInherit+0x174>)
   1c046:	4798      	blx	r3
   1c048:	0003      	movs	r3, r0
   1c04a:	b2db      	uxtb	r3, r3
   1c04c:	0019      	movs	r1, r3
   1c04e:	2003      	movs	r0, #3
   1c050:	4b1c      	ldr	r3, [pc, #112]	; (1c0c4 <xTaskPriorityInherit+0x184>)
   1c052:	4798      	blx	r3
   1c054:	0003      	movs	r3, r0
   1c056:	0022      	movs	r2, r4
   1c058:	2103      	movs	r1, #3
   1c05a:	208e      	movs	r0, #142	; 0x8e
   1c05c:	4c1a      	ldr	r4, [pc, #104]	; (1c0c8 <xTaskPriorityInherit+0x188>)
   1c05e:	47a0      	blx	r4
   1c060:	68bb      	ldr	r3, [r7, #8]
   1c062:	0018      	movs	r0, r3
   1c064:	4b13      	ldr	r3, [pc, #76]	; (1c0b4 <xTaskPriorityInherit+0x174>)
   1c066:	4798      	blx	r3
   1c068:	0003      	movs	r3, r0
   1c06a:	b2d9      	uxtb	r1, r3
   1c06c:	4b0c      	ldr	r3, [pc, #48]	; (1c0a0 <xTaskPriorityInherit+0x160>)
   1c06e:	681b      	ldr	r3, [r3, #0]
   1c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c072:	b2db      	uxtb	r3, r3
   1c074:	001a      	movs	r2, r3
   1c076:	2003      	movs	r0, #3
   1c078:	4b14      	ldr	r3, [pc, #80]	; (1c0cc <xTaskPriorityInherit+0x18c>)
   1c07a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1c07c:	2301      	movs	r3, #1
   1c07e:	60fb      	str	r3, [r7, #12]
   1c080:	e008      	b.n	1c094 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1c082:	68bb      	ldr	r3, [r7, #8]
   1c084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c086:	4b06      	ldr	r3, [pc, #24]	; (1c0a0 <xTaskPriorityInherit+0x160>)
   1c088:	681b      	ldr	r3, [r3, #0]
   1c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c08c:	429a      	cmp	r2, r3
   1c08e:	d201      	bcs.n	1c094 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c090:	2301      	movs	r3, #1
   1c092:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c094:	68fb      	ldr	r3, [r7, #12]
	}
   1c096:	0018      	movs	r0, r3
   1c098:	46bd      	mov	sp, r7
   1c09a:	b005      	add	sp, #20
   1c09c:	bd90      	pop	{r4, r7, pc}
   1c09e:	46c0      	nop			; (mov r8, r8)
   1c0a0:	200040a8 	.word	0x200040a8
   1c0a4:	200040ac 	.word	0x200040ac
   1c0a8:	0001905b 	.word	0x0001905b
   1c0ac:	000171e1 	.word	0x000171e1
   1c0b0:	20000100 	.word	0x20000100
   1c0b4:	000171c1 	.word	0x000171c1
   1c0b8:	00017991 	.word	0x00017991
   1c0bc:	20004188 	.word	0x20004188
   1c0c0:	00018fab 	.word	0x00018fab
   1c0c4:	00018199 	.word	0x00018199
   1c0c8:	00017d09 	.word	0x00017d09
   1c0cc:	000180f5 	.word	0x000180f5

0001c0d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1c0d0:	b590      	push	{r4, r7, lr}
   1c0d2:	b085      	sub	sp, #20
   1c0d4:	af00      	add	r7, sp, #0
   1c0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c0d8:	687b      	ldr	r3, [r7, #4]
   1c0da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c0dc:	2300      	movs	r3, #0
   1c0de:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c0e0:	687b      	ldr	r3, [r7, #4]
   1c0e2:	2b00      	cmp	r3, #0
   1c0e4:	d100      	bne.n	1c0e8 <xTaskPriorityDisinherit+0x18>
   1c0e6:	e089      	b.n	1c1fc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1c0e8:	4b47      	ldr	r3, [pc, #284]	; (1c208 <xTaskPriorityDisinherit+0x138>)
   1c0ea:	681b      	ldr	r3, [r3, #0]
   1c0ec:	68ba      	ldr	r2, [r7, #8]
   1c0ee:	429a      	cmp	r2, r3
   1c0f0:	d001      	beq.n	1c0f6 <xTaskPriorityDisinherit+0x26>
   1c0f2:	b672      	cpsid	i
   1c0f4:	e7fe      	b.n	1c0f4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1c0f6:	68bb      	ldr	r3, [r7, #8]
   1c0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0fa:	2b00      	cmp	r3, #0
   1c0fc:	d101      	bne.n	1c102 <xTaskPriorityDisinherit+0x32>
   1c0fe:	b672      	cpsid	i
   1c100:	e7fe      	b.n	1c100 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1c102:	68bb      	ldr	r3, [r7, #8]
   1c104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c106:	1e5a      	subs	r2, r3, #1
   1c108:	68bb      	ldr	r3, [r7, #8]
   1c10a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1c10c:	68bb      	ldr	r3, [r7, #8]
   1c10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c110:	68bb      	ldr	r3, [r7, #8]
   1c112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c114:	429a      	cmp	r2, r3
   1c116:	d071      	beq.n	1c1fc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1c118:	68bb      	ldr	r3, [r7, #8]
   1c11a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c11c:	2b00      	cmp	r3, #0
   1c11e:	d16d      	bne.n	1c1fc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c120:	68bb      	ldr	r3, [r7, #8]
   1c122:	3304      	adds	r3, #4
   1c124:	0018      	movs	r0, r3
   1c126:	4b39      	ldr	r3, [pc, #228]	; (1c20c <xTaskPriorityDisinherit+0x13c>)
   1c128:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c12a:	68bb      	ldr	r3, [r7, #8]
   1c12c:	0018      	movs	r0, r3
   1c12e:	4b38      	ldr	r3, [pc, #224]	; (1c210 <xTaskPriorityDisinherit+0x140>)
   1c130:	4798      	blx	r3
   1c132:	0003      	movs	r3, r0
   1c134:	001a      	movs	r2, r3
   1c136:	4b37      	ldr	r3, [pc, #220]	; (1c214 <xTaskPriorityDisinherit+0x144>)
   1c138:	881b      	ldrh	r3, [r3, #0]
   1c13a:	4013      	ands	r3, r2
   1c13c:	b29b      	uxth	r3, r3
   1c13e:	2b00      	cmp	r3, #0
   1c140:	d023      	beq.n	1c18a <xTaskPriorityDisinherit+0xba>
   1c142:	68bb      	ldr	r3, [r7, #8]
   1c144:	0018      	movs	r0, r3
   1c146:	4b34      	ldr	r3, [pc, #208]	; (1c218 <xTaskPriorityDisinherit+0x148>)
   1c148:	4798      	blx	r3
   1c14a:	0003      	movs	r3, r0
   1c14c:	b2db      	uxtb	r3, r3
   1c14e:	001c      	movs	r4, r3
   1c150:	68bb      	ldr	r3, [r7, #8]
   1c152:	0018      	movs	r0, r3
   1c154:	4b30      	ldr	r3, [pc, #192]	; (1c218 <xTaskPriorityDisinherit+0x148>)
   1c156:	4798      	blx	r3
   1c158:	0003      	movs	r3, r0
   1c15a:	b2db      	uxtb	r3, r3
   1c15c:	0019      	movs	r1, r3
   1c15e:	2003      	movs	r0, #3
   1c160:	4b2e      	ldr	r3, [pc, #184]	; (1c21c <xTaskPriorityDisinherit+0x14c>)
   1c162:	4798      	blx	r3
   1c164:	0003      	movs	r3, r0
   1c166:	0022      	movs	r2, r4
   1c168:	2103      	movs	r1, #3
   1c16a:	208f      	movs	r0, #143	; 0x8f
   1c16c:	4c2c      	ldr	r4, [pc, #176]	; (1c220 <xTaskPriorityDisinherit+0x150>)
   1c16e:	47a0      	blx	r4
   1c170:	68bb      	ldr	r3, [r7, #8]
   1c172:	0018      	movs	r0, r3
   1c174:	4b28      	ldr	r3, [pc, #160]	; (1c218 <xTaskPriorityDisinherit+0x148>)
   1c176:	4798      	blx	r3
   1c178:	0003      	movs	r3, r0
   1c17a:	b2d9      	uxtb	r1, r3
   1c17c:	68bb      	ldr	r3, [r7, #8]
   1c17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c180:	b2db      	uxtb	r3, r3
   1c182:	001a      	movs	r2, r3
   1c184:	2003      	movs	r0, #3
   1c186:	4b27      	ldr	r3, [pc, #156]	; (1c224 <xTaskPriorityDisinherit+0x154>)
   1c188:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1c18a:	68bb      	ldr	r3, [r7, #8]
   1c18c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c18e:	68bb      	ldr	r3, [r7, #8]
   1c190:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c192:	68bb      	ldr	r3, [r7, #8]
   1c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c196:	2205      	movs	r2, #5
   1c198:	1ad2      	subs	r2, r2, r3
   1c19a:	68bb      	ldr	r3, [r7, #8]
   1c19c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1c19e:	68bb      	ldr	r3, [r7, #8]
   1c1a0:	0018      	movs	r0, r3
   1c1a2:	4b1b      	ldr	r3, [pc, #108]	; (1c210 <xTaskPriorityDisinherit+0x140>)
   1c1a4:	4798      	blx	r3
   1c1a6:	0003      	movs	r3, r0
   1c1a8:	001a      	movs	r2, r3
   1c1aa:	4b1a      	ldr	r3, [pc, #104]	; (1c214 <xTaskPriorityDisinherit+0x144>)
   1c1ac:	881b      	ldrh	r3, [r3, #0]
   1c1ae:	4013      	ands	r3, r2
   1c1b0:	b29b      	uxth	r3, r3
   1c1b2:	2b00      	cmp	r3, #0
   1c1b4:	d008      	beq.n	1c1c8 <xTaskPriorityDisinherit+0xf8>
   1c1b6:	68bb      	ldr	r3, [r7, #8]
   1c1b8:	0018      	movs	r0, r3
   1c1ba:	4b17      	ldr	r3, [pc, #92]	; (1c218 <xTaskPriorityDisinherit+0x148>)
   1c1bc:	4798      	blx	r3
   1c1be:	0003      	movs	r3, r0
   1c1c0:	b2db      	uxtb	r3, r3
   1c1c2:	0018      	movs	r0, r3
   1c1c4:	4b18      	ldr	r3, [pc, #96]	; (1c228 <xTaskPriorityDisinherit+0x158>)
   1c1c6:	4798      	blx	r3
   1c1c8:	68bb      	ldr	r3, [r7, #8]
   1c1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1cc:	4b17      	ldr	r3, [pc, #92]	; (1c22c <xTaskPriorityDisinherit+0x15c>)
   1c1ce:	681b      	ldr	r3, [r3, #0]
   1c1d0:	429a      	cmp	r2, r3
   1c1d2:	d903      	bls.n	1c1dc <xTaskPriorityDisinherit+0x10c>
   1c1d4:	68bb      	ldr	r3, [r7, #8]
   1c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1d8:	4b14      	ldr	r3, [pc, #80]	; (1c22c <xTaskPriorityDisinherit+0x15c>)
   1c1da:	601a      	str	r2, [r3, #0]
   1c1dc:	68bb      	ldr	r3, [r7, #8]
   1c1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c1e0:	0013      	movs	r3, r2
   1c1e2:	009b      	lsls	r3, r3, #2
   1c1e4:	189b      	adds	r3, r3, r2
   1c1e6:	009b      	lsls	r3, r3, #2
   1c1e8:	4a11      	ldr	r2, [pc, #68]	; (1c230 <xTaskPriorityDisinherit+0x160>)
   1c1ea:	189a      	adds	r2, r3, r2
   1c1ec:	68bb      	ldr	r3, [r7, #8]
   1c1ee:	3304      	adds	r3, #4
   1c1f0:	0019      	movs	r1, r3
   1c1f2:	0010      	movs	r0, r2
   1c1f4:	4b0f      	ldr	r3, [pc, #60]	; (1c234 <xTaskPriorityDisinherit+0x164>)
   1c1f6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1c1f8:	2301      	movs	r3, #1
   1c1fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c1fc:	68fb      	ldr	r3, [r7, #12]
	}
   1c1fe:	0018      	movs	r0, r3
   1c200:	46bd      	mov	sp, r7
   1c202:	b005      	add	sp, #20
   1c204:	bd90      	pop	{r4, r7, pc}
   1c206:	46c0      	nop			; (mov r8, r8)
   1c208:	200040a8 	.word	0x200040a8
   1c20c:	0001905b 	.word	0x0001905b
   1c210:	000171e1 	.word	0x000171e1
   1c214:	20000100 	.word	0x20000100
   1c218:	000171c1 	.word	0x000171c1
   1c21c:	00018199 	.word	0x00018199
   1c220:	00017d09 	.word	0x00017d09
   1c224:	000180f5 	.word	0x000180f5
   1c228:	00017991 	.word	0x00017991
   1c22c:	20004188 	.word	0x20004188
   1c230:	200040ac 	.word	0x200040ac
   1c234:	00018fab 	.word	0x00018fab

0001c238 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1c238:	b590      	push	{r4, r7, lr}
   1c23a:	b087      	sub	sp, #28
   1c23c:	af00      	add	r7, sp, #0
   1c23e:	6078      	str	r0, [r7, #4]
   1c240:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c242:	687b      	ldr	r3, [r7, #4]
   1c244:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1c246:	2301      	movs	r3, #1
   1c248:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c24a:	687b      	ldr	r3, [r7, #4]
   1c24c:	2b00      	cmp	r3, #0
   1c24e:	d100      	bne.n	1c252 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1c250:	e0a4      	b.n	1c39c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1c252:	693b      	ldr	r3, [r7, #16]
   1c254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c256:	2b00      	cmp	r3, #0
   1c258:	d101      	bne.n	1c25e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1c25a:	b672      	cpsid	i
   1c25c:	e7fe      	b.n	1c25c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1c25e:	693b      	ldr	r3, [r7, #16]
   1c260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c262:	683b      	ldr	r3, [r7, #0]
   1c264:	429a      	cmp	r2, r3
   1c266:	d202      	bcs.n	1c26e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1c268:	683b      	ldr	r3, [r7, #0]
   1c26a:	617b      	str	r3, [r7, #20]
   1c26c:	e002      	b.n	1c274 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1c26e:	693b      	ldr	r3, [r7, #16]
   1c270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c272:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1c274:	693b      	ldr	r3, [r7, #16]
   1c276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c278:	697b      	ldr	r3, [r7, #20]
   1c27a:	429a      	cmp	r2, r3
   1c27c:	d100      	bne.n	1c280 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1c27e:	e08d      	b.n	1c39c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1c280:	693b      	ldr	r3, [r7, #16]
   1c282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c284:	68fb      	ldr	r3, [r7, #12]
   1c286:	429a      	cmp	r2, r3
   1c288:	d000      	beq.n	1c28c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1c28a:	e087      	b.n	1c39c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1c28c:	4b45      	ldr	r3, [pc, #276]	; (1c3a4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1c28e:	681b      	ldr	r3, [r3, #0]
   1c290:	693a      	ldr	r2, [r7, #16]
   1c292:	429a      	cmp	r2, r3
   1c294:	d101      	bne.n	1c29a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1c296:	b672      	cpsid	i
   1c298:	e7fe      	b.n	1c298 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c29a:	693b      	ldr	r3, [r7, #16]
   1c29c:	0018      	movs	r0, r3
   1c29e:	4b42      	ldr	r3, [pc, #264]	; (1c3a8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c2a0:	4798      	blx	r3
   1c2a2:	0003      	movs	r3, r0
   1c2a4:	001a      	movs	r2, r3
   1c2a6:	4b41      	ldr	r3, [pc, #260]	; (1c3ac <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c2a8:	881b      	ldrh	r3, [r3, #0]
   1c2aa:	4013      	ands	r3, r2
   1c2ac:	b29b      	uxth	r3, r3
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d023      	beq.n	1c2fa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1c2b2:	693b      	ldr	r3, [r7, #16]
   1c2b4:	0018      	movs	r0, r3
   1c2b6:	4b3e      	ldr	r3, [pc, #248]	; (1c3b0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c2b8:	4798      	blx	r3
   1c2ba:	0003      	movs	r3, r0
   1c2bc:	b2db      	uxtb	r3, r3
   1c2be:	001c      	movs	r4, r3
   1c2c0:	693b      	ldr	r3, [r7, #16]
   1c2c2:	0018      	movs	r0, r3
   1c2c4:	4b3a      	ldr	r3, [pc, #232]	; (1c3b0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c2c6:	4798      	blx	r3
   1c2c8:	0003      	movs	r3, r0
   1c2ca:	b2db      	uxtb	r3, r3
   1c2cc:	0019      	movs	r1, r3
   1c2ce:	2003      	movs	r0, #3
   1c2d0:	4b38      	ldr	r3, [pc, #224]	; (1c3b4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1c2d2:	4798      	blx	r3
   1c2d4:	0003      	movs	r3, r0
   1c2d6:	0022      	movs	r2, r4
   1c2d8:	2103      	movs	r1, #3
   1c2da:	208f      	movs	r0, #143	; 0x8f
   1c2dc:	4c36      	ldr	r4, [pc, #216]	; (1c3b8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1c2de:	47a0      	blx	r4
   1c2e0:	693b      	ldr	r3, [r7, #16]
   1c2e2:	0018      	movs	r0, r3
   1c2e4:	4b32      	ldr	r3, [pc, #200]	; (1c3b0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c2e6:	4798      	blx	r3
   1c2e8:	0003      	movs	r3, r0
   1c2ea:	b2d9      	uxtb	r1, r3
   1c2ec:	693b      	ldr	r3, [r7, #16]
   1c2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c2f0:	b2db      	uxtb	r3, r3
   1c2f2:	001a      	movs	r2, r3
   1c2f4:	2003      	movs	r0, #3
   1c2f6:	4b31      	ldr	r3, [pc, #196]	; (1c3bc <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1c2f8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1c2fa:	693b      	ldr	r3, [r7, #16]
   1c2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c2fe:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1c300:	693b      	ldr	r3, [r7, #16]
   1c302:	697a      	ldr	r2, [r7, #20]
   1c304:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c306:	693b      	ldr	r3, [r7, #16]
   1c308:	699b      	ldr	r3, [r3, #24]
   1c30a:	2b00      	cmp	r3, #0
   1c30c:	db04      	blt.n	1c318 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c30e:	697b      	ldr	r3, [r7, #20]
   1c310:	2205      	movs	r2, #5
   1c312:	1ad2      	subs	r2, r2, r3
   1c314:	693b      	ldr	r3, [r7, #16]
   1c316:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1c318:	693b      	ldr	r3, [r7, #16]
   1c31a:	6959      	ldr	r1, [r3, #20]
   1c31c:	68ba      	ldr	r2, [r7, #8]
   1c31e:	0013      	movs	r3, r2
   1c320:	009b      	lsls	r3, r3, #2
   1c322:	189b      	adds	r3, r3, r2
   1c324:	009b      	lsls	r3, r3, #2
   1c326:	4a26      	ldr	r2, [pc, #152]	; (1c3c0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c328:	189b      	adds	r3, r3, r2
   1c32a:	4299      	cmp	r1, r3
   1c32c:	d101      	bne.n	1c332 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1c32e:	2301      	movs	r3, #1
   1c330:	e000      	b.n	1c334 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1c332:	2300      	movs	r3, #0
   1c334:	2b00      	cmp	r3, #0
   1c336:	d031      	beq.n	1c39c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c338:	693b      	ldr	r3, [r7, #16]
   1c33a:	3304      	adds	r3, #4
   1c33c:	0018      	movs	r0, r3
   1c33e:	4b21      	ldr	r3, [pc, #132]	; (1c3c4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1c340:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1c342:	693b      	ldr	r3, [r7, #16]
   1c344:	0018      	movs	r0, r3
   1c346:	4b18      	ldr	r3, [pc, #96]	; (1c3a8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c348:	4798      	blx	r3
   1c34a:	0003      	movs	r3, r0
   1c34c:	001a      	movs	r2, r3
   1c34e:	4b17      	ldr	r3, [pc, #92]	; (1c3ac <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c350:	881b      	ldrh	r3, [r3, #0]
   1c352:	4013      	ands	r3, r2
   1c354:	b29b      	uxth	r3, r3
   1c356:	2b00      	cmp	r3, #0
   1c358:	d008      	beq.n	1c36c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1c35a:	693b      	ldr	r3, [r7, #16]
   1c35c:	0018      	movs	r0, r3
   1c35e:	4b14      	ldr	r3, [pc, #80]	; (1c3b0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c360:	4798      	blx	r3
   1c362:	0003      	movs	r3, r0
   1c364:	b2db      	uxtb	r3, r3
   1c366:	0018      	movs	r0, r3
   1c368:	4b17      	ldr	r3, [pc, #92]	; (1c3c8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1c36a:	4798      	blx	r3
   1c36c:	693b      	ldr	r3, [r7, #16]
   1c36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c370:	4b16      	ldr	r3, [pc, #88]	; (1c3cc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c372:	681b      	ldr	r3, [r3, #0]
   1c374:	429a      	cmp	r2, r3
   1c376:	d903      	bls.n	1c380 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1c378:	693b      	ldr	r3, [r7, #16]
   1c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c37c:	4b13      	ldr	r3, [pc, #76]	; (1c3cc <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c37e:	601a      	str	r2, [r3, #0]
   1c380:	693b      	ldr	r3, [r7, #16]
   1c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c384:	0013      	movs	r3, r2
   1c386:	009b      	lsls	r3, r3, #2
   1c388:	189b      	adds	r3, r3, r2
   1c38a:	009b      	lsls	r3, r3, #2
   1c38c:	4a0c      	ldr	r2, [pc, #48]	; (1c3c0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c38e:	189a      	adds	r2, r3, r2
   1c390:	693b      	ldr	r3, [r7, #16]
   1c392:	3304      	adds	r3, #4
   1c394:	0019      	movs	r1, r3
   1c396:	0010      	movs	r0, r2
   1c398:	4b0d      	ldr	r3, [pc, #52]	; (1c3d0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1c39a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c39c:	46c0      	nop			; (mov r8, r8)
   1c39e:	46bd      	mov	sp, r7
   1c3a0:	b007      	add	sp, #28
   1c3a2:	bd90      	pop	{r4, r7, pc}
   1c3a4:	200040a8 	.word	0x200040a8
   1c3a8:	000171e1 	.word	0x000171e1
   1c3ac:	20000100 	.word	0x20000100
   1c3b0:	000171c1 	.word	0x000171c1
   1c3b4:	00018199 	.word	0x00018199
   1c3b8:	00017d09 	.word	0x00017d09
   1c3bc:	000180f5 	.word	0x000180f5
   1c3c0:	200040ac 	.word	0x200040ac
   1c3c4:	0001905b 	.word	0x0001905b
   1c3c8:	00017991 	.word	0x00017991
   1c3cc:	20004188 	.word	0x20004188
   1c3d0:	00018fab 	.word	0x00018fab

0001c3d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1c3d4:	b580      	push	{r7, lr}
   1c3d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1c3d8:	4b06      	ldr	r3, [pc, #24]	; (1c3f4 <pvTaskIncrementMutexHeldCount+0x20>)
   1c3da:	681b      	ldr	r3, [r3, #0]
   1c3dc:	2b00      	cmp	r3, #0
   1c3de:	d004      	beq.n	1c3ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1c3e0:	4b04      	ldr	r3, [pc, #16]	; (1c3f4 <pvTaskIncrementMutexHeldCount+0x20>)
   1c3e2:	681b      	ldr	r3, [r3, #0]
   1c3e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c3e6:	3201      	adds	r2, #1
   1c3e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1c3ea:	4b02      	ldr	r3, [pc, #8]	; (1c3f4 <pvTaskIncrementMutexHeldCount+0x20>)
   1c3ec:	681b      	ldr	r3, [r3, #0]
	}
   1c3ee:	0018      	movs	r0, r3
   1c3f0:	46bd      	mov	sp, r7
   1c3f2:	bd80      	pop	{r7, pc}
   1c3f4:	200040a8 	.word	0x200040a8

0001c3f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1c3f8:	b580      	push	{r7, lr}
   1c3fa:	b084      	sub	sp, #16
   1c3fc:	af00      	add	r7, sp, #0
   1c3fe:	6078      	str	r0, [r7, #4]
   1c400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1c402:	4b21      	ldr	r3, [pc, #132]	; (1c488 <prvAddCurrentTaskToDelayedList+0x90>)
   1c404:	681b      	ldr	r3, [r3, #0]
   1c406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c408:	4b20      	ldr	r3, [pc, #128]	; (1c48c <prvAddCurrentTaskToDelayedList+0x94>)
   1c40a:	681b      	ldr	r3, [r3, #0]
   1c40c:	3304      	adds	r3, #4
   1c40e:	0018      	movs	r0, r3
   1c410:	4b1f      	ldr	r3, [pc, #124]	; (1c490 <prvAddCurrentTaskToDelayedList+0x98>)
   1c412:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1c414:	687b      	ldr	r3, [r7, #4]
   1c416:	3301      	adds	r3, #1
   1c418:	d10b      	bne.n	1c432 <prvAddCurrentTaskToDelayedList+0x3a>
   1c41a:	683b      	ldr	r3, [r7, #0]
   1c41c:	2b00      	cmp	r3, #0
   1c41e:	d008      	beq.n	1c432 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c420:	4b1a      	ldr	r3, [pc, #104]	; (1c48c <prvAddCurrentTaskToDelayedList+0x94>)
   1c422:	681b      	ldr	r3, [r3, #0]
   1c424:	1d1a      	adds	r2, r3, #4
   1c426:	4b1b      	ldr	r3, [pc, #108]	; (1c494 <prvAddCurrentTaskToDelayedList+0x9c>)
   1c428:	0011      	movs	r1, r2
   1c42a:	0018      	movs	r0, r3
   1c42c:	4b1a      	ldr	r3, [pc, #104]	; (1c498 <prvAddCurrentTaskToDelayedList+0xa0>)
   1c42e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1c430:	e026      	b.n	1c480 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1c432:	68fa      	ldr	r2, [r7, #12]
   1c434:	687b      	ldr	r3, [r7, #4]
   1c436:	18d3      	adds	r3, r2, r3
   1c438:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1c43a:	4b14      	ldr	r3, [pc, #80]	; (1c48c <prvAddCurrentTaskToDelayedList+0x94>)
   1c43c:	681b      	ldr	r3, [r3, #0]
   1c43e:	68ba      	ldr	r2, [r7, #8]
   1c440:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1c442:	68ba      	ldr	r2, [r7, #8]
   1c444:	68fb      	ldr	r3, [r7, #12]
   1c446:	429a      	cmp	r2, r3
   1c448:	d209      	bcs.n	1c45e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c44a:	4b14      	ldr	r3, [pc, #80]	; (1c49c <prvAddCurrentTaskToDelayedList+0xa4>)
   1c44c:	681a      	ldr	r2, [r3, #0]
   1c44e:	4b0f      	ldr	r3, [pc, #60]	; (1c48c <prvAddCurrentTaskToDelayedList+0x94>)
   1c450:	681b      	ldr	r3, [r3, #0]
   1c452:	3304      	adds	r3, #4
   1c454:	0019      	movs	r1, r3
   1c456:	0010      	movs	r0, r2
   1c458:	4b11      	ldr	r3, [pc, #68]	; (1c4a0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c45a:	4798      	blx	r3
}
   1c45c:	e010      	b.n	1c480 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c45e:	4b11      	ldr	r3, [pc, #68]	; (1c4a4 <prvAddCurrentTaskToDelayedList+0xac>)
   1c460:	681a      	ldr	r2, [r3, #0]
   1c462:	4b0a      	ldr	r3, [pc, #40]	; (1c48c <prvAddCurrentTaskToDelayedList+0x94>)
   1c464:	681b      	ldr	r3, [r3, #0]
   1c466:	3304      	adds	r3, #4
   1c468:	0019      	movs	r1, r3
   1c46a:	0010      	movs	r0, r2
   1c46c:	4b0c      	ldr	r3, [pc, #48]	; (1c4a0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c46e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1c470:	4b0d      	ldr	r3, [pc, #52]	; (1c4a8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c472:	681b      	ldr	r3, [r3, #0]
   1c474:	68ba      	ldr	r2, [r7, #8]
   1c476:	429a      	cmp	r2, r3
   1c478:	d202      	bcs.n	1c480 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1c47a:	4b0b      	ldr	r3, [pc, #44]	; (1c4a8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c47c:	68ba      	ldr	r2, [r7, #8]
   1c47e:	601a      	str	r2, [r3, #0]
}
   1c480:	46c0      	nop			; (mov r8, r8)
   1c482:	46bd      	mov	sp, r7
   1c484:	b004      	add	sp, #16
   1c486:	bd80      	pop	{r7, pc}
   1c488:	20004184 	.word	0x20004184
   1c48c:	200040a8 	.word	0x200040a8
   1c490:	0001905b 	.word	0x0001905b
   1c494:	2000416c 	.word	0x2000416c
   1c498:	00018fab 	.word	0x00018fab
   1c49c:	2000413c 	.word	0x2000413c
   1c4a0:	00018fef 	.word	0x00018fef
   1c4a4:	20004138 	.word	0x20004138
   1c4a8:	200041a0 	.word	0x200041a0

0001c4ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1c4ac:	b590      	push	{r4, r7, lr}
   1c4ae:	b085      	sub	sp, #20
   1c4b0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1c4b2:	2300      	movs	r3, #0
   1c4b4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1c4b6:	4b0e      	ldr	r3, [pc, #56]	; (1c4f0 <xTimerCreateTimerTask+0x44>)
   1c4b8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1c4ba:	4b0e      	ldr	r3, [pc, #56]	; (1c4f4 <xTimerCreateTimerTask+0x48>)
   1c4bc:	681b      	ldr	r3, [r3, #0]
   1c4be:	2b00      	cmp	r3, #0
   1c4c0:	d00b      	beq.n	1c4da <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1c4c2:	490d      	ldr	r1, [pc, #52]	; (1c4f8 <xTimerCreateTimerTask+0x4c>)
   1c4c4:	480d      	ldr	r0, [pc, #52]	; (1c4fc <xTimerCreateTimerTask+0x50>)
   1c4c6:	4b0e      	ldr	r3, [pc, #56]	; (1c500 <xTimerCreateTimerTask+0x54>)
   1c4c8:	9301      	str	r3, [sp, #4]
   1c4ca:	2302      	movs	r3, #2
   1c4cc:	9300      	str	r3, [sp, #0]
   1c4ce:	2300      	movs	r3, #0
   1c4d0:	2280      	movs	r2, #128	; 0x80
   1c4d2:	4c0c      	ldr	r4, [pc, #48]	; (1c504 <xTimerCreateTimerTask+0x58>)
   1c4d4:	47a0      	blx	r4
   1c4d6:	0003      	movs	r3, r0
   1c4d8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1c4da:	687b      	ldr	r3, [r7, #4]
   1c4dc:	2b00      	cmp	r3, #0
   1c4de:	d101      	bne.n	1c4e4 <xTimerCreateTimerTask+0x38>
   1c4e0:	b672      	cpsid	i
   1c4e2:	e7fe      	b.n	1c4e2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1c4e4:	687b      	ldr	r3, [r7, #4]
}
   1c4e6:	0018      	movs	r0, r3
   1c4e8:	46bd      	mov	sp, r7
   1c4ea:	b003      	add	sp, #12
   1c4ec:	bd90      	pop	{r4, r7, pc}
   1c4ee:	46c0      	nop			; (mov r8, r8)
   1c4f0:	0001c9f5 	.word	0x0001c9f5
   1c4f4:	200041dc 	.word	0x200041dc
   1c4f8:	00037d24 	.word	0x00037d24
   1c4fc:	0001c62d 	.word	0x0001c62d
   1c500:	200041e0 	.word	0x200041e0
   1c504:	0001ae45 	.word	0x0001ae45

0001c508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1c508:	b590      	push	{r4, r7, lr}
   1c50a:	b089      	sub	sp, #36	; 0x24
   1c50c:	af00      	add	r7, sp, #0
   1c50e:	60f8      	str	r0, [r7, #12]
   1c510:	60b9      	str	r1, [r7, #8]
   1c512:	607a      	str	r2, [r7, #4]
   1c514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1c516:	2300      	movs	r3, #0
   1c518:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1c51a:	68fb      	ldr	r3, [r7, #12]
   1c51c:	2b00      	cmp	r3, #0
   1c51e:	d101      	bne.n	1c524 <xTimerGenericCommand+0x1c>
   1c520:	b672      	cpsid	i
   1c522:	e7fe      	b.n	1c522 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1c524:	4b1e      	ldr	r3, [pc, #120]	; (1c5a0 <xTimerGenericCommand+0x98>)
   1c526:	681b      	ldr	r3, [r3, #0]
   1c528:	2b00      	cmp	r3, #0
   1c52a:	d033      	beq.n	1c594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1c52c:	2310      	movs	r3, #16
   1c52e:	18fb      	adds	r3, r7, r3
   1c530:	68ba      	ldr	r2, [r7, #8]
   1c532:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1c534:	2310      	movs	r3, #16
   1c536:	18fb      	adds	r3, r7, r3
   1c538:	687a      	ldr	r2, [r7, #4]
   1c53a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1c53c:	2310      	movs	r3, #16
   1c53e:	18fb      	adds	r3, r7, r3
   1c540:	68fa      	ldr	r2, [r7, #12]
   1c542:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1c544:	68bb      	ldr	r3, [r7, #8]
   1c546:	2b05      	cmp	r3, #5
   1c548:	dc1a      	bgt.n	1c580 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1c54a:	4b16      	ldr	r3, [pc, #88]	; (1c5a4 <xTimerGenericCommand+0x9c>)
   1c54c:	4798      	blx	r3
   1c54e:	0003      	movs	r3, r0
   1c550:	2b02      	cmp	r3, #2
   1c552:	d10a      	bne.n	1c56a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1c554:	4b12      	ldr	r3, [pc, #72]	; (1c5a0 <xTimerGenericCommand+0x98>)
   1c556:	6818      	ldr	r0, [r3, #0]
   1c558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c55a:	2310      	movs	r3, #16
   1c55c:	18f9      	adds	r1, r7, r3
   1c55e:	2300      	movs	r3, #0
   1c560:	4c11      	ldr	r4, [pc, #68]	; (1c5a8 <xTimerGenericCommand+0xa0>)
   1c562:	47a0      	blx	r4
   1c564:	0003      	movs	r3, r0
   1c566:	61fb      	str	r3, [r7, #28]
   1c568:	e014      	b.n	1c594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1c56a:	4b0d      	ldr	r3, [pc, #52]	; (1c5a0 <xTimerGenericCommand+0x98>)
   1c56c:	6818      	ldr	r0, [r3, #0]
   1c56e:	2310      	movs	r3, #16
   1c570:	18f9      	adds	r1, r7, r3
   1c572:	2300      	movs	r3, #0
   1c574:	2200      	movs	r2, #0
   1c576:	4c0c      	ldr	r4, [pc, #48]	; (1c5a8 <xTimerGenericCommand+0xa0>)
   1c578:	47a0      	blx	r4
   1c57a:	0003      	movs	r3, r0
   1c57c:	61fb      	str	r3, [r7, #28]
   1c57e:	e009      	b.n	1c594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c580:	4b07      	ldr	r3, [pc, #28]	; (1c5a0 <xTimerGenericCommand+0x98>)
   1c582:	6818      	ldr	r0, [r3, #0]
   1c584:	683a      	ldr	r2, [r7, #0]
   1c586:	2310      	movs	r3, #16
   1c588:	18f9      	adds	r1, r7, r3
   1c58a:	2300      	movs	r3, #0
   1c58c:	4c07      	ldr	r4, [pc, #28]	; (1c5ac <xTimerGenericCommand+0xa4>)
   1c58e:	47a0      	blx	r4
   1c590:	0003      	movs	r3, r0
   1c592:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1c594:	69fb      	ldr	r3, [r7, #28]
}
   1c596:	0018      	movs	r0, r3
   1c598:	46bd      	mov	sp, r7
   1c59a:	b009      	add	sp, #36	; 0x24
   1c59c:	bd90      	pop	{r4, r7, pc}
   1c59e:	46c0      	nop			; (mov r8, r8)
   1c5a0:	200041dc 	.word	0x200041dc
   1c5a4:	0001bf09 	.word	0x0001bf09
   1c5a8:	0001977d 	.word	0x0001977d
   1c5ac:	00019bdd 	.word	0x00019bdd

0001c5b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1c5b0:	b590      	push	{r4, r7, lr}
   1c5b2:	b087      	sub	sp, #28
   1c5b4:	af02      	add	r7, sp, #8
   1c5b6:	6078      	str	r0, [r7, #4]
   1c5b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c5ba:	4b18      	ldr	r3, [pc, #96]	; (1c61c <prvProcessExpiredTimer+0x6c>)
   1c5bc:	681b      	ldr	r3, [r3, #0]
   1c5be:	68db      	ldr	r3, [r3, #12]
   1c5c0:	68db      	ldr	r3, [r3, #12]
   1c5c2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c5c4:	68fb      	ldr	r3, [r7, #12]
   1c5c6:	3304      	adds	r3, #4
   1c5c8:	0018      	movs	r0, r3
   1c5ca:	4b15      	ldr	r3, [pc, #84]	; (1c620 <prvProcessExpiredTimer+0x70>)
   1c5cc:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c5ce:	68fb      	ldr	r3, [r7, #12]
   1c5d0:	69db      	ldr	r3, [r3, #28]
   1c5d2:	2b01      	cmp	r3, #1
   1c5d4:	d119      	bne.n	1c60a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1c5d6:	68fb      	ldr	r3, [r7, #12]
   1c5d8:	699a      	ldr	r2, [r3, #24]
   1c5da:	687b      	ldr	r3, [r7, #4]
   1c5dc:	18d1      	adds	r1, r2, r3
   1c5de:	687b      	ldr	r3, [r7, #4]
   1c5e0:	683a      	ldr	r2, [r7, #0]
   1c5e2:	68f8      	ldr	r0, [r7, #12]
   1c5e4:	4c0f      	ldr	r4, [pc, #60]	; (1c624 <prvProcessExpiredTimer+0x74>)
   1c5e6:	47a0      	blx	r4
   1c5e8:	1e03      	subs	r3, r0, #0
   1c5ea:	d00e      	beq.n	1c60a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c5ec:	687a      	ldr	r2, [r7, #4]
   1c5ee:	68f8      	ldr	r0, [r7, #12]
   1c5f0:	2300      	movs	r3, #0
   1c5f2:	9300      	str	r3, [sp, #0]
   1c5f4:	2300      	movs	r3, #0
   1c5f6:	2100      	movs	r1, #0
   1c5f8:	4c0b      	ldr	r4, [pc, #44]	; (1c628 <prvProcessExpiredTimer+0x78>)
   1c5fa:	47a0      	blx	r4
   1c5fc:	0003      	movs	r3, r0
   1c5fe:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1c600:	68bb      	ldr	r3, [r7, #8]
   1c602:	2b00      	cmp	r3, #0
   1c604:	d101      	bne.n	1c60a <prvProcessExpiredTimer+0x5a>
   1c606:	b672      	cpsid	i
   1c608:	e7fe      	b.n	1c608 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c60a:	68fb      	ldr	r3, [r7, #12]
   1c60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c60e:	68fa      	ldr	r2, [r7, #12]
   1c610:	0010      	movs	r0, r2
   1c612:	4798      	blx	r3
}
   1c614:	46c0      	nop			; (mov r8, r8)
   1c616:	46bd      	mov	sp, r7
   1c618:	b005      	add	sp, #20
   1c61a:	bd90      	pop	{r4, r7, pc}
   1c61c:	200041d4 	.word	0x200041d4
   1c620:	0001905b 	.word	0x0001905b
   1c624:	0001c795 	.word	0x0001c795
   1c628:	0001c509 	.word	0x0001c509

0001c62c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1c62c:	b580      	push	{r7, lr}
   1c62e:	b084      	sub	sp, #16
   1c630:	af00      	add	r7, sp, #0
   1c632:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1c634:	4b08      	ldr	r3, [pc, #32]	; (1c658 <prvTimerTask+0x2c>)
   1c636:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c638:	2308      	movs	r3, #8
   1c63a:	18fb      	adds	r3, r7, r3
   1c63c:	0018      	movs	r0, r3
   1c63e:	4b07      	ldr	r3, [pc, #28]	; (1c65c <prvTimerTask+0x30>)
   1c640:	4798      	blx	r3
   1c642:	0003      	movs	r3, r0
   1c644:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1c646:	68ba      	ldr	r2, [r7, #8]
   1c648:	68fb      	ldr	r3, [r7, #12]
   1c64a:	0011      	movs	r1, r2
   1c64c:	0018      	movs	r0, r3
   1c64e:	4b04      	ldr	r3, [pc, #16]	; (1c660 <prvTimerTask+0x34>)
   1c650:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1c652:	4b04      	ldr	r3, [pc, #16]	; (1c664 <prvTimerTask+0x38>)
   1c654:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c656:	e7ef      	b.n	1c638 <prvTimerTask+0xc>
   1c658:	0003198d 	.word	0x0003198d
   1c65c:	0001c70d 	.word	0x0001c70d
   1c660:	0001c669 	.word	0x0001c669
   1c664:	0001c81d 	.word	0x0001c81d

0001c668 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1c668:	b580      	push	{r7, lr}
   1c66a:	b084      	sub	sp, #16
   1c66c:	af00      	add	r7, sp, #0
   1c66e:	6078      	str	r0, [r7, #4]
   1c670:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1c672:	4b1e      	ldr	r3, [pc, #120]	; (1c6ec <prvProcessTimerOrBlockTask+0x84>)
   1c674:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c676:	2308      	movs	r3, #8
   1c678:	18fb      	adds	r3, r7, r3
   1c67a:	0018      	movs	r0, r3
   1c67c:	4b1c      	ldr	r3, [pc, #112]	; (1c6f0 <prvProcessTimerOrBlockTask+0x88>)
   1c67e:	4798      	blx	r3
   1c680:	0003      	movs	r3, r0
   1c682:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1c684:	68bb      	ldr	r3, [r7, #8]
   1c686:	2b00      	cmp	r3, #0
   1c688:	d129      	bne.n	1c6de <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1c68a:	683b      	ldr	r3, [r7, #0]
   1c68c:	2b00      	cmp	r3, #0
   1c68e:	d10c      	bne.n	1c6aa <prvProcessTimerOrBlockTask+0x42>
   1c690:	687a      	ldr	r2, [r7, #4]
   1c692:	68fb      	ldr	r3, [r7, #12]
   1c694:	429a      	cmp	r2, r3
   1c696:	d808      	bhi.n	1c6aa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1c698:	4b16      	ldr	r3, [pc, #88]	; (1c6f4 <prvProcessTimerOrBlockTask+0x8c>)
   1c69a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1c69c:	68fa      	ldr	r2, [r7, #12]
   1c69e:	687b      	ldr	r3, [r7, #4]
   1c6a0:	0011      	movs	r1, r2
   1c6a2:	0018      	movs	r0, r3
   1c6a4:	4b14      	ldr	r3, [pc, #80]	; (1c6f8 <prvProcessTimerOrBlockTask+0x90>)
   1c6a6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1c6a8:	e01b      	b.n	1c6e2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1c6aa:	683b      	ldr	r3, [r7, #0]
   1c6ac:	2b00      	cmp	r3, #0
   1c6ae:	d006      	beq.n	1c6be <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1c6b0:	4b12      	ldr	r3, [pc, #72]	; (1c6fc <prvProcessTimerOrBlockTask+0x94>)
   1c6b2:	681b      	ldr	r3, [r3, #0]
   1c6b4:	681b      	ldr	r3, [r3, #0]
   1c6b6:	425a      	negs	r2, r3
   1c6b8:	4153      	adcs	r3, r2
   1c6ba:	b2db      	uxtb	r3, r3
   1c6bc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1c6be:	4b10      	ldr	r3, [pc, #64]	; (1c700 <prvProcessTimerOrBlockTask+0x98>)
   1c6c0:	6818      	ldr	r0, [r3, #0]
   1c6c2:	687a      	ldr	r2, [r7, #4]
   1c6c4:	68fb      	ldr	r3, [r7, #12]
   1c6c6:	1ad3      	subs	r3, r2, r3
   1c6c8:	683a      	ldr	r2, [r7, #0]
   1c6ca:	0019      	movs	r1, r3
   1c6cc:	4b0d      	ldr	r3, [pc, #52]	; (1c704 <prvProcessTimerOrBlockTask+0x9c>)
   1c6ce:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c6d0:	4b08      	ldr	r3, [pc, #32]	; (1c6f4 <prvProcessTimerOrBlockTask+0x8c>)
   1c6d2:	4798      	blx	r3
   1c6d4:	1e03      	subs	r3, r0, #0
   1c6d6:	d104      	bne.n	1c6e2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1c6d8:	4b0b      	ldr	r3, [pc, #44]	; (1c708 <prvProcessTimerOrBlockTask+0xa0>)
   1c6da:	4798      	blx	r3
}
   1c6dc:	e001      	b.n	1c6e2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1c6de:	4b05      	ldr	r3, [pc, #20]	; (1c6f4 <prvProcessTimerOrBlockTask+0x8c>)
   1c6e0:	4798      	blx	r3
}
   1c6e2:	46c0      	nop			; (mov r8, r8)
   1c6e4:	46bd      	mov	sp, r7
   1c6e6:	b004      	add	sp, #16
   1c6e8:	bd80      	pop	{r7, pc}
   1c6ea:	46c0      	nop			; (mov r8, r8)
   1c6ec:	0001b4a1 	.word	0x0001b4a1
   1c6f0:	0001c74d 	.word	0x0001c74d
   1c6f4:	0001b4b9 	.word	0x0001b4b9
   1c6f8:	0001c5b1 	.word	0x0001c5b1
   1c6fc:	200041d8 	.word	0x200041d8
   1c700:	200041dc 	.word	0x200041dc
   1c704:	0001ac41 	.word	0x0001ac41
   1c708:	000191d1 	.word	0x000191d1

0001c70c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1c70c:	b580      	push	{r7, lr}
   1c70e:	b084      	sub	sp, #16
   1c710:	af00      	add	r7, sp, #0
   1c712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1c714:	4b0c      	ldr	r3, [pc, #48]	; (1c748 <prvGetNextExpireTime+0x3c>)
   1c716:	681b      	ldr	r3, [r3, #0]
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	425a      	negs	r2, r3
   1c71c:	4153      	adcs	r3, r2
   1c71e:	b2db      	uxtb	r3, r3
   1c720:	001a      	movs	r2, r3
   1c722:	687b      	ldr	r3, [r7, #4]
   1c724:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1c726:	687b      	ldr	r3, [r7, #4]
   1c728:	681b      	ldr	r3, [r3, #0]
   1c72a:	2b00      	cmp	r3, #0
   1c72c:	d105      	bne.n	1c73a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c72e:	4b06      	ldr	r3, [pc, #24]	; (1c748 <prvGetNextExpireTime+0x3c>)
   1c730:	681b      	ldr	r3, [r3, #0]
   1c732:	68db      	ldr	r3, [r3, #12]
   1c734:	681b      	ldr	r3, [r3, #0]
   1c736:	60fb      	str	r3, [r7, #12]
   1c738:	e001      	b.n	1c73e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1c73a:	2300      	movs	r3, #0
   1c73c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1c73e:	68fb      	ldr	r3, [r7, #12]
}
   1c740:	0018      	movs	r0, r3
   1c742:	46bd      	mov	sp, r7
   1c744:	b004      	add	sp, #16
   1c746:	bd80      	pop	{r7, pc}
   1c748:	200041d4 	.word	0x200041d4

0001c74c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1c74c:	b580      	push	{r7, lr}
   1c74e:	b084      	sub	sp, #16
   1c750:	af00      	add	r7, sp, #0
   1c752:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1c754:	4b0c      	ldr	r3, [pc, #48]	; (1c788 <prvSampleTimeNow+0x3c>)
   1c756:	4798      	blx	r3
   1c758:	0003      	movs	r3, r0
   1c75a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1c75c:	4b0b      	ldr	r3, [pc, #44]	; (1c78c <prvSampleTimeNow+0x40>)
   1c75e:	681b      	ldr	r3, [r3, #0]
   1c760:	68fa      	ldr	r2, [r7, #12]
   1c762:	429a      	cmp	r2, r3
   1c764:	d205      	bcs.n	1c772 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1c766:	4b0a      	ldr	r3, [pc, #40]	; (1c790 <prvSampleTimeNow+0x44>)
   1c768:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1c76a:	687b      	ldr	r3, [r7, #4]
   1c76c:	2201      	movs	r2, #1
   1c76e:	601a      	str	r2, [r3, #0]
   1c770:	e002      	b.n	1c778 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1c772:	687b      	ldr	r3, [r7, #4]
   1c774:	2200      	movs	r2, #0
   1c776:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1c778:	4b04      	ldr	r3, [pc, #16]	; (1c78c <prvSampleTimeNow+0x40>)
   1c77a:	68fa      	ldr	r2, [r7, #12]
   1c77c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1c77e:	68fb      	ldr	r3, [r7, #12]
}
   1c780:	0018      	movs	r0, r3
   1c782:	46bd      	mov	sp, r7
   1c784:	b004      	add	sp, #16
   1c786:	bd80      	pop	{r7, pc}
   1c788:	0001b629 	.word	0x0001b629
   1c78c:	200041e4 	.word	0x200041e4
   1c790:	0001c935 	.word	0x0001c935

0001c794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1c794:	b580      	push	{r7, lr}
   1c796:	b086      	sub	sp, #24
   1c798:	af00      	add	r7, sp, #0
   1c79a:	60f8      	str	r0, [r7, #12]
   1c79c:	60b9      	str	r1, [r7, #8]
   1c79e:	607a      	str	r2, [r7, #4]
   1c7a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1c7a2:	2300      	movs	r3, #0
   1c7a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1c7a6:	68fb      	ldr	r3, [r7, #12]
   1c7a8:	68ba      	ldr	r2, [r7, #8]
   1c7aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c7ac:	68fb      	ldr	r3, [r7, #12]
   1c7ae:	68fa      	ldr	r2, [r7, #12]
   1c7b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1c7b2:	68ba      	ldr	r2, [r7, #8]
   1c7b4:	687b      	ldr	r3, [r7, #4]
   1c7b6:	429a      	cmp	r2, r3
   1c7b8:	d812      	bhi.n	1c7e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c7ba:	687a      	ldr	r2, [r7, #4]
   1c7bc:	683b      	ldr	r3, [r7, #0]
   1c7be:	1ad2      	subs	r2, r2, r3
   1c7c0:	68fb      	ldr	r3, [r7, #12]
   1c7c2:	699b      	ldr	r3, [r3, #24]
   1c7c4:	429a      	cmp	r2, r3
   1c7c6:	d302      	bcc.n	1c7ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1c7c8:	2301      	movs	r3, #1
   1c7ca:	617b      	str	r3, [r7, #20]
   1c7cc:	e01b      	b.n	1c806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1c7ce:	4b10      	ldr	r3, [pc, #64]	; (1c810 <prvInsertTimerInActiveList+0x7c>)
   1c7d0:	681a      	ldr	r2, [r3, #0]
   1c7d2:	68fb      	ldr	r3, [r7, #12]
   1c7d4:	3304      	adds	r3, #4
   1c7d6:	0019      	movs	r1, r3
   1c7d8:	0010      	movs	r0, r2
   1c7da:	4b0e      	ldr	r3, [pc, #56]	; (1c814 <prvInsertTimerInActiveList+0x80>)
   1c7dc:	4798      	blx	r3
   1c7de:	e012      	b.n	1c806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1c7e0:	687a      	ldr	r2, [r7, #4]
   1c7e2:	683b      	ldr	r3, [r7, #0]
   1c7e4:	429a      	cmp	r2, r3
   1c7e6:	d206      	bcs.n	1c7f6 <prvInsertTimerInActiveList+0x62>
   1c7e8:	68ba      	ldr	r2, [r7, #8]
   1c7ea:	683b      	ldr	r3, [r7, #0]
   1c7ec:	429a      	cmp	r2, r3
   1c7ee:	d302      	bcc.n	1c7f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1c7f0:	2301      	movs	r3, #1
   1c7f2:	617b      	str	r3, [r7, #20]
   1c7f4:	e007      	b.n	1c806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c7f6:	4b08      	ldr	r3, [pc, #32]	; (1c818 <prvInsertTimerInActiveList+0x84>)
   1c7f8:	681a      	ldr	r2, [r3, #0]
   1c7fa:	68fb      	ldr	r3, [r7, #12]
   1c7fc:	3304      	adds	r3, #4
   1c7fe:	0019      	movs	r1, r3
   1c800:	0010      	movs	r0, r2
   1c802:	4b04      	ldr	r3, [pc, #16]	; (1c814 <prvInsertTimerInActiveList+0x80>)
   1c804:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1c806:	697b      	ldr	r3, [r7, #20]
}
   1c808:	0018      	movs	r0, r3
   1c80a:	46bd      	mov	sp, r7
   1c80c:	b006      	add	sp, #24
   1c80e:	bd80      	pop	{r7, pc}
   1c810:	200041d8 	.word	0x200041d8
   1c814:	00018fef 	.word	0x00018fef
   1c818:	200041d4 	.word	0x200041d4

0001c81c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1c81c:	b590      	push	{r4, r7, lr}
   1c81e:	b08b      	sub	sp, #44	; 0x2c
   1c820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c822:	e068      	b.n	1c8f6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1c824:	2308      	movs	r3, #8
   1c826:	18fb      	adds	r3, r7, r3
   1c828:	681b      	ldr	r3, [r3, #0]
   1c82a:	2b00      	cmp	r3, #0
   1c82c:	db63      	blt.n	1c8f6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1c82e:	2308      	movs	r3, #8
   1c830:	18fb      	adds	r3, r7, r3
   1c832:	689b      	ldr	r3, [r3, #8]
   1c834:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1c836:	69fb      	ldr	r3, [r7, #28]
   1c838:	695b      	ldr	r3, [r3, #20]
   1c83a:	2b00      	cmp	r3, #0
   1c83c:	d004      	beq.n	1c848 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c83e:	69fb      	ldr	r3, [r7, #28]
   1c840:	3304      	adds	r3, #4
   1c842:	0018      	movs	r0, r3
   1c844:	4b33      	ldr	r3, [pc, #204]	; (1c914 <prvProcessReceivedCommands+0xf8>)
   1c846:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c848:	1d3b      	adds	r3, r7, #4
   1c84a:	0018      	movs	r0, r3
   1c84c:	4b32      	ldr	r3, [pc, #200]	; (1c918 <prvProcessReceivedCommands+0xfc>)
   1c84e:	4798      	blx	r3
   1c850:	0003      	movs	r3, r0
   1c852:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1c854:	2308      	movs	r3, #8
   1c856:	18fb      	adds	r3, r7, r3
   1c858:	681b      	ldr	r3, [r3, #0]
   1c85a:	2b09      	cmp	r3, #9
   1c85c:	d84a      	bhi.n	1c8f4 <prvProcessReceivedCommands+0xd8>
   1c85e:	009a      	lsls	r2, r3, #2
   1c860:	4b2e      	ldr	r3, [pc, #184]	; (1c91c <prvProcessReceivedCommands+0x100>)
   1c862:	18d3      	adds	r3, r2, r3
   1c864:	681b      	ldr	r3, [r3, #0]
   1c866:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1c868:	2308      	movs	r3, #8
   1c86a:	18fb      	adds	r3, r7, r3
   1c86c:	685a      	ldr	r2, [r3, #4]
   1c86e:	69fb      	ldr	r3, [r7, #28]
   1c870:	699b      	ldr	r3, [r3, #24]
   1c872:	18d1      	adds	r1, r2, r3
   1c874:	2308      	movs	r3, #8
   1c876:	18fb      	adds	r3, r7, r3
   1c878:	685b      	ldr	r3, [r3, #4]
   1c87a:	69ba      	ldr	r2, [r7, #24]
   1c87c:	69f8      	ldr	r0, [r7, #28]
   1c87e:	4c28      	ldr	r4, [pc, #160]	; (1c920 <prvProcessReceivedCommands+0x104>)
   1c880:	47a0      	blx	r4
   1c882:	1e03      	subs	r3, r0, #0
   1c884:	d037      	beq.n	1c8f6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c886:	69fb      	ldr	r3, [r7, #28]
   1c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c88a:	69fa      	ldr	r2, [r7, #28]
   1c88c:	0010      	movs	r0, r2
   1c88e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c890:	69fb      	ldr	r3, [r7, #28]
   1c892:	69db      	ldr	r3, [r3, #28]
   1c894:	2b01      	cmp	r3, #1
   1c896:	d12e      	bne.n	1c8f6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1c898:	2308      	movs	r3, #8
   1c89a:	18fb      	adds	r3, r7, r3
   1c89c:	685a      	ldr	r2, [r3, #4]
   1c89e:	69fb      	ldr	r3, [r7, #28]
   1c8a0:	699b      	ldr	r3, [r3, #24]
   1c8a2:	18d2      	adds	r2, r2, r3
   1c8a4:	69f8      	ldr	r0, [r7, #28]
   1c8a6:	2300      	movs	r3, #0
   1c8a8:	9300      	str	r3, [sp, #0]
   1c8aa:	2300      	movs	r3, #0
   1c8ac:	2100      	movs	r1, #0
   1c8ae:	4c1d      	ldr	r4, [pc, #116]	; (1c924 <prvProcessReceivedCommands+0x108>)
   1c8b0:	47a0      	blx	r4
   1c8b2:	0003      	movs	r3, r0
   1c8b4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1c8b6:	697b      	ldr	r3, [r7, #20]
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	d11c      	bne.n	1c8f6 <prvProcessReceivedCommands+0xda>
   1c8bc:	b672      	cpsid	i
   1c8be:	e7fe      	b.n	1c8be <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1c8c0:	2308      	movs	r3, #8
   1c8c2:	18fb      	adds	r3, r7, r3
   1c8c4:	685a      	ldr	r2, [r3, #4]
   1c8c6:	69fb      	ldr	r3, [r7, #28]
   1c8c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1c8ca:	69fb      	ldr	r3, [r7, #28]
   1c8cc:	699b      	ldr	r3, [r3, #24]
   1c8ce:	2b00      	cmp	r3, #0
   1c8d0:	d101      	bne.n	1c8d6 <prvProcessReceivedCommands+0xba>
   1c8d2:	b672      	cpsid	i
   1c8d4:	e7fe      	b.n	1c8d4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1c8d6:	69fb      	ldr	r3, [r7, #28]
   1c8d8:	699a      	ldr	r2, [r3, #24]
   1c8da:	69bb      	ldr	r3, [r7, #24]
   1c8dc:	18d1      	adds	r1, r2, r3
   1c8de:	69bb      	ldr	r3, [r7, #24]
   1c8e0:	69ba      	ldr	r2, [r7, #24]
   1c8e2:	69f8      	ldr	r0, [r7, #28]
   1c8e4:	4c0e      	ldr	r4, [pc, #56]	; (1c920 <prvProcessReceivedCommands+0x104>)
   1c8e6:	47a0      	blx	r4
					break;
   1c8e8:	e005      	b.n	1c8f6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1c8ea:	69fb      	ldr	r3, [r7, #28]
   1c8ec:	0018      	movs	r0, r3
   1c8ee:	4b0e      	ldr	r3, [pc, #56]	; (1c928 <prvProcessReceivedCommands+0x10c>)
   1c8f0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1c8f2:	e000      	b.n	1c8f6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1c8f4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c8f6:	4b0d      	ldr	r3, [pc, #52]	; (1c92c <prvProcessReceivedCommands+0x110>)
   1c8f8:	681b      	ldr	r3, [r3, #0]
   1c8fa:	2208      	movs	r2, #8
   1c8fc:	18b9      	adds	r1, r7, r2
   1c8fe:	2200      	movs	r2, #0
   1c900:	0018      	movs	r0, r3
   1c902:	4b0b      	ldr	r3, [pc, #44]	; (1c930 <prvProcessReceivedCommands+0x114>)
   1c904:	4798      	blx	r3
   1c906:	1e03      	subs	r3, r0, #0
   1c908:	d18c      	bne.n	1c824 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1c90a:	46c0      	nop			; (mov r8, r8)
   1c90c:	46bd      	mov	sp, r7
   1c90e:	b009      	add	sp, #36	; 0x24
   1c910:	bd90      	pop	{r4, r7, pc}
   1c912:	46c0      	nop			; (mov r8, r8)
   1c914:	0001905b 	.word	0x0001905b
   1c918:	0001c74d 	.word	0x0001c74d
   1c91c:	00037d2c 	.word	0x00037d2c
   1c920:	0001c795 	.word	0x0001c795
   1c924:	0001c509 	.word	0x0001c509
   1c928:	000193e5 	.word	0x000193e5
   1c92c:	200041dc 	.word	0x200041dc
   1c930:	0001a035 	.word	0x0001a035

0001c934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1c934:	b590      	push	{r4, r7, lr}
   1c936:	b089      	sub	sp, #36	; 0x24
   1c938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c93a:	e03e      	b.n	1c9ba <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c93c:	4b28      	ldr	r3, [pc, #160]	; (1c9e0 <prvSwitchTimerLists+0xac>)
   1c93e:	681b      	ldr	r3, [r3, #0]
   1c940:	68db      	ldr	r3, [r3, #12]
   1c942:	681b      	ldr	r3, [r3, #0]
   1c944:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c946:	4b26      	ldr	r3, [pc, #152]	; (1c9e0 <prvSwitchTimerLists+0xac>)
   1c948:	681b      	ldr	r3, [r3, #0]
   1c94a:	68db      	ldr	r3, [r3, #12]
   1c94c:	68db      	ldr	r3, [r3, #12]
   1c94e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c950:	693b      	ldr	r3, [r7, #16]
   1c952:	3304      	adds	r3, #4
   1c954:	0018      	movs	r0, r3
   1c956:	4b23      	ldr	r3, [pc, #140]	; (1c9e4 <prvSwitchTimerLists+0xb0>)
   1c958:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c95a:	693b      	ldr	r3, [r7, #16]
   1c95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c95e:	693a      	ldr	r2, [r7, #16]
   1c960:	0010      	movs	r0, r2
   1c962:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c964:	693b      	ldr	r3, [r7, #16]
   1c966:	69db      	ldr	r3, [r3, #28]
   1c968:	2b01      	cmp	r3, #1
   1c96a:	d126      	bne.n	1c9ba <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1c96c:	693b      	ldr	r3, [r7, #16]
   1c96e:	699a      	ldr	r2, [r3, #24]
   1c970:	697b      	ldr	r3, [r7, #20]
   1c972:	18d3      	adds	r3, r2, r3
   1c974:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1c976:	68fa      	ldr	r2, [r7, #12]
   1c978:	697b      	ldr	r3, [r7, #20]
   1c97a:	429a      	cmp	r2, r3
   1c97c:	d90e      	bls.n	1c99c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1c97e:	693b      	ldr	r3, [r7, #16]
   1c980:	68fa      	ldr	r2, [r7, #12]
   1c982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c984:	693b      	ldr	r3, [r7, #16]
   1c986:	693a      	ldr	r2, [r7, #16]
   1c988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c98a:	4b15      	ldr	r3, [pc, #84]	; (1c9e0 <prvSwitchTimerLists+0xac>)
   1c98c:	681a      	ldr	r2, [r3, #0]
   1c98e:	693b      	ldr	r3, [r7, #16]
   1c990:	3304      	adds	r3, #4
   1c992:	0019      	movs	r1, r3
   1c994:	0010      	movs	r0, r2
   1c996:	4b14      	ldr	r3, [pc, #80]	; (1c9e8 <prvSwitchTimerLists+0xb4>)
   1c998:	4798      	blx	r3
   1c99a:	e00e      	b.n	1c9ba <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c99c:	697a      	ldr	r2, [r7, #20]
   1c99e:	6938      	ldr	r0, [r7, #16]
   1c9a0:	2300      	movs	r3, #0
   1c9a2:	9300      	str	r3, [sp, #0]
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	2100      	movs	r1, #0
   1c9a8:	4c10      	ldr	r4, [pc, #64]	; (1c9ec <prvSwitchTimerLists+0xb8>)
   1c9aa:	47a0      	blx	r4
   1c9ac:	0003      	movs	r3, r0
   1c9ae:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1c9b0:	68bb      	ldr	r3, [r7, #8]
   1c9b2:	2b00      	cmp	r3, #0
   1c9b4:	d101      	bne.n	1c9ba <prvSwitchTimerLists+0x86>
   1c9b6:	b672      	cpsid	i
   1c9b8:	e7fe      	b.n	1c9b8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c9ba:	4b09      	ldr	r3, [pc, #36]	; (1c9e0 <prvSwitchTimerLists+0xac>)
   1c9bc:	681b      	ldr	r3, [r3, #0]
   1c9be:	681b      	ldr	r3, [r3, #0]
   1c9c0:	2b00      	cmp	r3, #0
   1c9c2:	d1bb      	bne.n	1c93c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1c9c4:	4b06      	ldr	r3, [pc, #24]	; (1c9e0 <prvSwitchTimerLists+0xac>)
   1c9c6:	681b      	ldr	r3, [r3, #0]
   1c9c8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1c9ca:	4b09      	ldr	r3, [pc, #36]	; (1c9f0 <prvSwitchTimerLists+0xbc>)
   1c9cc:	681a      	ldr	r2, [r3, #0]
   1c9ce:	4b04      	ldr	r3, [pc, #16]	; (1c9e0 <prvSwitchTimerLists+0xac>)
   1c9d0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1c9d2:	4b07      	ldr	r3, [pc, #28]	; (1c9f0 <prvSwitchTimerLists+0xbc>)
   1c9d4:	687a      	ldr	r2, [r7, #4]
   1c9d6:	601a      	str	r2, [r3, #0]
}
   1c9d8:	46c0      	nop			; (mov r8, r8)
   1c9da:	46bd      	mov	sp, r7
   1c9dc:	b007      	add	sp, #28
   1c9de:	bd90      	pop	{r4, r7, pc}
   1c9e0:	200041d4 	.word	0x200041d4
   1c9e4:	0001905b 	.word	0x0001905b
   1c9e8:	00018fef 	.word	0x00018fef
   1c9ec:	0001c509 	.word	0x0001c509
   1c9f0:	200041d8 	.word	0x200041d8

0001c9f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1c9f4:	b580      	push	{r7, lr}
   1c9f6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1c9f8:	4b10      	ldr	r3, [pc, #64]	; (1ca3c <prvCheckForValidListAndQueue+0x48>)
   1c9fa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1c9fc:	4b10      	ldr	r3, [pc, #64]	; (1ca40 <prvCheckForValidListAndQueue+0x4c>)
   1c9fe:	681b      	ldr	r3, [r3, #0]
   1ca00:	2b00      	cmp	r3, #0
   1ca02:	d115      	bne.n	1ca30 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1ca04:	4b0f      	ldr	r3, [pc, #60]	; (1ca44 <prvCheckForValidListAndQueue+0x50>)
   1ca06:	0018      	movs	r0, r3
   1ca08:	4b0f      	ldr	r3, [pc, #60]	; (1ca48 <prvCheckForValidListAndQueue+0x54>)
   1ca0a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1ca0c:	4b0f      	ldr	r3, [pc, #60]	; (1ca4c <prvCheckForValidListAndQueue+0x58>)
   1ca0e:	0018      	movs	r0, r3
   1ca10:	4b0d      	ldr	r3, [pc, #52]	; (1ca48 <prvCheckForValidListAndQueue+0x54>)
   1ca12:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1ca14:	4b0e      	ldr	r3, [pc, #56]	; (1ca50 <prvCheckForValidListAndQueue+0x5c>)
   1ca16:	4a0b      	ldr	r2, [pc, #44]	; (1ca44 <prvCheckForValidListAndQueue+0x50>)
   1ca18:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1ca1a:	4b0e      	ldr	r3, [pc, #56]	; (1ca54 <prvCheckForValidListAndQueue+0x60>)
   1ca1c:	4a0b      	ldr	r2, [pc, #44]	; (1ca4c <prvCheckForValidListAndQueue+0x58>)
   1ca1e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1ca20:	2200      	movs	r2, #0
   1ca22:	210c      	movs	r1, #12
   1ca24:	2005      	movs	r0, #5
   1ca26:	4b0c      	ldr	r3, [pc, #48]	; (1ca58 <prvCheckForValidListAndQueue+0x64>)
   1ca28:	4798      	blx	r3
   1ca2a:	0002      	movs	r2, r0
   1ca2c:	4b04      	ldr	r3, [pc, #16]	; (1ca40 <prvCheckForValidListAndQueue+0x4c>)
   1ca2e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ca30:	4b0a      	ldr	r3, [pc, #40]	; (1ca5c <prvCheckForValidListAndQueue+0x68>)
   1ca32:	4798      	blx	r3
}
   1ca34:	46c0      	nop			; (mov r8, r8)
   1ca36:	46bd      	mov	sp, r7
   1ca38:	bd80      	pop	{r7, pc}
   1ca3a:	46c0      	nop			; (mov r8, r8)
   1ca3c:	000191e9 	.word	0x000191e9
   1ca40:	200041dc 	.word	0x200041dc
   1ca44:	200041ac 	.word	0x200041ac
   1ca48:	00018f59 	.word	0x00018f59
   1ca4c:	200041c0 	.word	0x200041c0
   1ca50:	200041d4 	.word	0x200041d4
   1ca54:	200041d8 	.word	0x200041d8
   1ca58:	000194d5 	.word	0x000194d5
   1ca5c:	0001920d 	.word	0x0001920d

0001ca60 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1ca60:	b580      	push	{r7, lr}
   1ca62:	b082      	sub	sp, #8
   1ca64:	af00      	add	r7, sp, #0
   1ca66:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1ca68:	687b      	ldr	r3, [r7, #4]
   1ca6a:	7c1b      	ldrb	r3, [r3, #16]
   1ca6c:	2b00      	cmp	r3, #0
   1ca6e:	d00b      	beq.n	1ca88 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1ca70:	687b      	ldr	r3, [r7, #4]
   1ca72:	689b      	ldr	r3, [r3, #8]
   1ca74:	1c5a      	adds	r2, r3, #1
   1ca76:	687b      	ldr	r3, [r7, #4]
   1ca78:	68d9      	ldr	r1, [r3, #12]
   1ca7a:	4b10      	ldr	r3, [pc, #64]	; (1cabc <advance_pointer+0x5c>)
   1ca7c:	0010      	movs	r0, r2
   1ca7e:	4798      	blx	r3
   1ca80:	000b      	movs	r3, r1
   1ca82:	001a      	movs	r2, r3
   1ca84:	687b      	ldr	r3, [r7, #4]
   1ca86:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1ca88:	687b      	ldr	r3, [r7, #4]
   1ca8a:	685b      	ldr	r3, [r3, #4]
   1ca8c:	1c5a      	adds	r2, r3, #1
   1ca8e:	687b      	ldr	r3, [r7, #4]
   1ca90:	68d9      	ldr	r1, [r3, #12]
   1ca92:	4b0a      	ldr	r3, [pc, #40]	; (1cabc <advance_pointer+0x5c>)
   1ca94:	0010      	movs	r0, r2
   1ca96:	4798      	blx	r3
   1ca98:	000b      	movs	r3, r1
   1ca9a:	001a      	movs	r2, r3
   1ca9c:	687b      	ldr	r3, [r7, #4]
   1ca9e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1caa0:	687b      	ldr	r3, [r7, #4]
   1caa2:	685a      	ldr	r2, [r3, #4]
   1caa4:	687b      	ldr	r3, [r7, #4]
   1caa6:	689b      	ldr	r3, [r3, #8]
   1caa8:	1ad3      	subs	r3, r2, r3
   1caaa:	425a      	negs	r2, r3
   1caac:	4153      	adcs	r3, r2
   1caae:	b2da      	uxtb	r2, r3
   1cab0:	687b      	ldr	r3, [r7, #4]
   1cab2:	741a      	strb	r2, [r3, #16]
 }
   1cab4:	46c0      	nop			; (mov r8, r8)
   1cab6:	46bd      	mov	sp, r7
   1cab8:	b002      	add	sp, #8
   1caba:	bd80      	pop	{r7, pc}
   1cabc:	00031c61 	.word	0x00031c61

0001cac0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1cac0:	b580      	push	{r7, lr}
   1cac2:	b082      	sub	sp, #8
   1cac4:	af00      	add	r7, sp, #0
   1cac6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1cac8:	687b      	ldr	r3, [r7, #4]
   1caca:	2200      	movs	r2, #0
   1cacc:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1cace:	687b      	ldr	r3, [r7, #4]
   1cad0:	689b      	ldr	r3, [r3, #8]
   1cad2:	1c5a      	adds	r2, r3, #1
   1cad4:	687b      	ldr	r3, [r7, #4]
   1cad6:	68d9      	ldr	r1, [r3, #12]
   1cad8:	4b05      	ldr	r3, [pc, #20]	; (1caf0 <retreat_pointer+0x30>)
   1cada:	0010      	movs	r0, r2
   1cadc:	4798      	blx	r3
   1cade:	000b      	movs	r3, r1
   1cae0:	001a      	movs	r2, r3
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	609a      	str	r2, [r3, #8]
 }
   1cae6:	46c0      	nop			; (mov r8, r8)
   1cae8:	46bd      	mov	sp, r7
   1caea:	b002      	add	sp, #8
   1caec:	bd80      	pop	{r7, pc}
   1caee:	46c0      	nop			; (mov r8, r8)
   1caf0:	00031c61 	.word	0x00031c61

0001caf4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1caf4:	b580      	push	{r7, lr}
   1caf6:	b084      	sub	sp, #16
   1caf8:	af00      	add	r7, sp, #0
   1cafa:	6078      	str	r0, [r7, #4]
   1cafc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1cafe:	2014      	movs	r0, #20
   1cb00:	4b09      	ldr	r3, [pc, #36]	; (1cb28 <circular_buf_init+0x34>)
   1cb02:	4798      	blx	r3
   1cb04:	0003      	movs	r3, r0
   1cb06:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1cb08:	68fb      	ldr	r3, [r7, #12]
   1cb0a:	687a      	ldr	r2, [r7, #4]
   1cb0c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1cb0e:	68fb      	ldr	r3, [r7, #12]
   1cb10:	683a      	ldr	r2, [r7, #0]
   1cb12:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1cb14:	68fb      	ldr	r3, [r7, #12]
   1cb16:	0018      	movs	r0, r3
   1cb18:	4b04      	ldr	r3, [pc, #16]	; (1cb2c <circular_buf_init+0x38>)
   1cb1a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1cb1c:	68fb      	ldr	r3, [r7, #12]
 }
   1cb1e:	0018      	movs	r0, r3
   1cb20:	46bd      	mov	sp, r7
   1cb22:	b004      	add	sp, #16
   1cb24:	bd80      	pop	{r7, pc}
   1cb26:	46c0      	nop			; (mov r8, r8)
   1cb28:	000345b1 	.word	0x000345b1
   1cb2c:	0001cb31 	.word	0x0001cb31

0001cb30 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1cb30:	b580      	push	{r7, lr}
   1cb32:	b082      	sub	sp, #8
   1cb34:	af00      	add	r7, sp, #0
   1cb36:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1cb38:	687b      	ldr	r3, [r7, #4]
   1cb3a:	2200      	movs	r2, #0
   1cb3c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1cb3e:	687b      	ldr	r3, [r7, #4]
   1cb40:	2200      	movs	r2, #0
   1cb42:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1cb44:	687b      	ldr	r3, [r7, #4]
   1cb46:	2200      	movs	r2, #0
   1cb48:	741a      	strb	r2, [r3, #16]
 }
   1cb4a:	46c0      	nop			; (mov r8, r8)
   1cb4c:	46bd      	mov	sp, r7
   1cb4e:	b002      	add	sp, #8
   1cb50:	bd80      	pop	{r7, pc}
	...

0001cb54 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1cb54:	b580      	push	{r7, lr}
   1cb56:	b082      	sub	sp, #8
   1cb58:	af00      	add	r7, sp, #0
   1cb5a:	6078      	str	r0, [r7, #4]
   1cb5c:	000a      	movs	r2, r1
   1cb5e:	1cfb      	adds	r3, r7, #3
   1cb60:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1cb62:	687b      	ldr	r3, [r7, #4]
   1cb64:	681a      	ldr	r2, [r3, #0]
   1cb66:	687b      	ldr	r3, [r7, #4]
   1cb68:	685b      	ldr	r3, [r3, #4]
   1cb6a:	18d3      	adds	r3, r2, r3
   1cb6c:	1cfa      	adds	r2, r7, #3
   1cb6e:	7812      	ldrb	r2, [r2, #0]
   1cb70:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1cb72:	687b      	ldr	r3, [r7, #4]
   1cb74:	0018      	movs	r0, r3
   1cb76:	4b03      	ldr	r3, [pc, #12]	; (1cb84 <circular_buf_put+0x30>)
   1cb78:	4798      	blx	r3
 }
   1cb7a:	46c0      	nop			; (mov r8, r8)
   1cb7c:	46bd      	mov	sp, r7
   1cb7e:	b002      	add	sp, #8
   1cb80:	bd80      	pop	{r7, pc}
   1cb82:	46c0      	nop			; (mov r8, r8)
   1cb84:	0001ca61 	.word	0x0001ca61

0001cb88 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1cb88:	b580      	push	{r7, lr}
   1cb8a:	b084      	sub	sp, #16
   1cb8c:	af00      	add	r7, sp, #0
   1cb8e:	6078      	str	r0, [r7, #4]
   1cb90:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1cb92:	2301      	movs	r3, #1
   1cb94:	425b      	negs	r3, r3
   1cb96:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1cb98:	687b      	ldr	r3, [r7, #4]
   1cb9a:	0018      	movs	r0, r3
   1cb9c:	4b0d      	ldr	r3, [pc, #52]	; (1cbd4 <circular_buf_get+0x4c>)
   1cb9e:	4798      	blx	r3
   1cba0:	0003      	movs	r3, r0
   1cba2:	001a      	movs	r2, r3
   1cba4:	2301      	movs	r3, #1
   1cba6:	4053      	eors	r3, r2
   1cba8:	b2db      	uxtb	r3, r3
   1cbaa:	2b00      	cmp	r3, #0
   1cbac:	d00d      	beq.n	1cbca <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1cbae:	687b      	ldr	r3, [r7, #4]
   1cbb0:	681a      	ldr	r2, [r3, #0]
   1cbb2:	687b      	ldr	r3, [r7, #4]
   1cbb4:	689b      	ldr	r3, [r3, #8]
   1cbb6:	18d3      	adds	r3, r2, r3
   1cbb8:	781a      	ldrb	r2, [r3, #0]
   1cbba:	683b      	ldr	r3, [r7, #0]
   1cbbc:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1cbbe:	687b      	ldr	r3, [r7, #4]
   1cbc0:	0018      	movs	r0, r3
   1cbc2:	4b05      	ldr	r3, [pc, #20]	; (1cbd8 <circular_buf_get+0x50>)
   1cbc4:	4798      	blx	r3

		 r = 0;
   1cbc6:	2300      	movs	r3, #0
   1cbc8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1cbca:	68fb      	ldr	r3, [r7, #12]
 }
   1cbcc:	0018      	movs	r0, r3
   1cbce:	46bd      	mov	sp, r7
   1cbd0:	b004      	add	sp, #16
   1cbd2:	bd80      	pop	{r7, pc}
   1cbd4:	0001cbdd 	.word	0x0001cbdd
   1cbd8:	0001cac1 	.word	0x0001cac1

0001cbdc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1cbdc:	b580      	push	{r7, lr}
   1cbde:	b082      	sub	sp, #8
   1cbe0:	af00      	add	r7, sp, #0
   1cbe2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1cbe4:	687b      	ldr	r3, [r7, #4]
   1cbe6:	7c1b      	ldrb	r3, [r3, #16]
   1cbe8:	2201      	movs	r2, #1
   1cbea:	4053      	eors	r3, r2
   1cbec:	b2db      	uxtb	r3, r3
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d007      	beq.n	1cc02 <circular_buf_empty+0x26>
   1cbf2:	687b      	ldr	r3, [r7, #4]
   1cbf4:	685a      	ldr	r2, [r3, #4]
   1cbf6:	687b      	ldr	r3, [r7, #4]
   1cbf8:	689b      	ldr	r3, [r3, #8]
   1cbfa:	429a      	cmp	r2, r3
   1cbfc:	d101      	bne.n	1cc02 <circular_buf_empty+0x26>
   1cbfe:	2301      	movs	r3, #1
   1cc00:	e000      	b.n	1cc04 <circular_buf_empty+0x28>
   1cc02:	2300      	movs	r3, #0
   1cc04:	1c1a      	adds	r2, r3, #0
   1cc06:	2301      	movs	r3, #1
   1cc08:	4013      	ands	r3, r2
   1cc0a:	b2db      	uxtb	r3, r3
 }
   1cc0c:	0018      	movs	r0, r3
   1cc0e:	46bd      	mov	sp, r7
   1cc10:	b002      	add	sp, #8
   1cc12:	bd80      	pop	{r7, pc}

0001cc14 <system_interrupt_enable>:
{
   1cc14:	b580      	push	{r7, lr}
   1cc16:	b082      	sub	sp, #8
   1cc18:	af00      	add	r7, sp, #0
   1cc1a:	0002      	movs	r2, r0
   1cc1c:	1dfb      	adds	r3, r7, #7
   1cc1e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cc20:	4b06      	ldr	r3, [pc, #24]	; (1cc3c <system_interrupt_enable+0x28>)
   1cc22:	1dfa      	adds	r2, r7, #7
   1cc24:	7812      	ldrb	r2, [r2, #0]
   1cc26:	0011      	movs	r1, r2
   1cc28:	221f      	movs	r2, #31
   1cc2a:	400a      	ands	r2, r1
   1cc2c:	2101      	movs	r1, #1
   1cc2e:	4091      	lsls	r1, r2
   1cc30:	000a      	movs	r2, r1
   1cc32:	601a      	str	r2, [r3, #0]
}
   1cc34:	46c0      	nop			; (mov r8, r8)
   1cc36:	46bd      	mov	sp, r7
   1cc38:	b002      	add	sp, #8
   1cc3a:	bd80      	pop	{r7, pc}
   1cc3c:	e000e100 	.word	0xe000e100

0001cc40 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1cc40:	b580      	push	{r7, lr}
   1cc42:	b084      	sub	sp, #16
   1cc44:	af00      	add	r7, sp, #0
   1cc46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1cc48:	687b      	ldr	r3, [r7, #4]
   1cc4a:	681b      	ldr	r3, [r3, #0]
   1cc4c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1cc4e:	68fb      	ldr	r3, [r7, #12]
   1cc50:	69db      	ldr	r3, [r3, #28]
   1cc52:	1e5a      	subs	r2, r3, #1
   1cc54:	4193      	sbcs	r3, r2
   1cc56:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1cc58:	0018      	movs	r0, r3
   1cc5a:	46bd      	mov	sp, r7
   1cc5c:	b004      	add	sp, #16
   1cc5e:	bd80      	pop	{r7, pc}

0001cc60 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1cc60:	b580      	push	{r7, lr}
   1cc62:	b082      	sub	sp, #8
   1cc64:	af00      	add	r7, sp, #0
   1cc66:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1cc68:	46c0      	nop			; (mov r8, r8)
   1cc6a:	687b      	ldr	r3, [r7, #4]
   1cc6c:	0018      	movs	r0, r3
   1cc6e:	4b04      	ldr	r3, [pc, #16]	; (1cc80 <_usart_wait_for_sync+0x20>)
   1cc70:	4798      	blx	r3
   1cc72:	1e03      	subs	r3, r0, #0
   1cc74:	d1f9      	bne.n	1cc6a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1cc76:	46c0      	nop			; (mov r8, r8)
   1cc78:	46bd      	mov	sp, r7
   1cc7a:	b002      	add	sp, #8
   1cc7c:	bd80      	pop	{r7, pc}
   1cc7e:	46c0      	nop			; (mov r8, r8)
   1cc80:	0001cc41 	.word	0x0001cc41

0001cc84 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1cc84:	b580      	push	{r7, lr}
   1cc86:	b082      	sub	sp, #8
   1cc88:	af00      	add	r7, sp, #0
   1cc8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1cc8c:	687b      	ldr	r3, [r7, #4]
   1cc8e:	2280      	movs	r2, #128	; 0x80
   1cc90:	05d2      	lsls	r2, r2, #23
   1cc92:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1cc94:	687b      	ldr	r3, [r7, #4]
   1cc96:	2200      	movs	r2, #0
   1cc98:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1cc9a:	687b      	ldr	r3, [r7, #4]
   1cc9c:	22ff      	movs	r2, #255	; 0xff
   1cc9e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1cca0:	687b      	ldr	r3, [r7, #4]
   1cca2:	2200      	movs	r2, #0
   1cca4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1cca6:	687b      	ldr	r3, [r7, #4]
   1cca8:	2200      	movs	r2, #0
   1ccaa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1ccac:	687b      	ldr	r3, [r7, #4]
   1ccae:	2296      	movs	r2, #150	; 0x96
   1ccb0:	0192      	lsls	r2, r2, #6
   1ccb2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1ccb4:	687b      	ldr	r3, [r7, #4]
   1ccb6:	2224      	movs	r2, #36	; 0x24
   1ccb8:	2101      	movs	r1, #1
   1ccba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1ccbc:	687b      	ldr	r3, [r7, #4]
   1ccbe:	2225      	movs	r2, #37	; 0x25
   1ccc0:	2101      	movs	r1, #1
   1ccc2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1ccc4:	687b      	ldr	r3, [r7, #4]
   1ccc6:	2226      	movs	r2, #38	; 0x26
   1ccc8:	2100      	movs	r1, #0
   1ccca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1cccc:	687b      	ldr	r3, [r7, #4]
   1ccce:	2227      	movs	r2, #39	; 0x27
   1ccd0:	2100      	movs	r1, #0
   1ccd2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1ccd4:	687b      	ldr	r3, [r7, #4]
   1ccd6:	2200      	movs	r2, #0
   1ccd8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1ccda:	687b      	ldr	r3, [r7, #4]
   1ccdc:	2288      	movs	r2, #136	; 0x88
   1ccde:	0352      	lsls	r2, r2, #13
   1cce0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1cce2:	687b      	ldr	r3, [r7, #4]
   1cce4:	222c      	movs	r2, #44	; 0x2c
   1cce6:	2100      	movs	r1, #0
   1cce8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1ccea:	687b      	ldr	r3, [r7, #4]
   1ccec:	222d      	movs	r2, #45	; 0x2d
   1ccee:	2100      	movs	r1, #0
   1ccf0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1ccf2:	687b      	ldr	r3, [r7, #4]
   1ccf4:	2200      	movs	r2, #0
   1ccf6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1ccf8:	687b      	ldr	r3, [r7, #4]
   1ccfa:	2200      	movs	r2, #0
   1ccfc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1ccfe:	687b      	ldr	r3, [r7, #4]
   1cd00:	2200      	movs	r2, #0
   1cd02:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1cd04:	687b      	ldr	r3, [r7, #4]
   1cd06:	2200      	movs	r2, #0
   1cd08:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1cd0a:	687b      	ldr	r3, [r7, #4]
   1cd0c:	2200      	movs	r2, #0
   1cd0e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1cd10:	687b      	ldr	r3, [r7, #4]
   1cd12:	2200      	movs	r2, #0
   1cd14:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1cd16:	687b      	ldr	r3, [r7, #4]
   1cd18:	2200      	movs	r2, #0
   1cd1a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1cd1c:	687b      	ldr	r3, [r7, #4]
   1cd1e:	2200      	movs	r2, #0
   1cd20:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1cd22:	687b      	ldr	r3, [r7, #4]
   1cd24:	2200      	movs	r2, #0
   1cd26:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1cd28:	687b      	ldr	r3, [r7, #4]
   1cd2a:	2200      	movs	r2, #0
   1cd2c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1cd2e:	687b      	ldr	r3, [r7, #4]
   1cd30:	2213      	movs	r2, #19
   1cd32:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1cd34:	687b      	ldr	r3, [r7, #4]
   1cd36:	2200      	movs	r2, #0
   1cd38:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1cd3a:	46c0      	nop			; (mov r8, r8)
   1cd3c:	46bd      	mov	sp, r7
   1cd3e:	b002      	add	sp, #8
   1cd40:	bd80      	pop	{r7, pc}
	...

0001cd44 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1cd44:	b580      	push	{r7, lr}
   1cd46:	b084      	sub	sp, #16
   1cd48:	af00      	add	r7, sp, #0
   1cd4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1cd4c:	687b      	ldr	r3, [r7, #4]
   1cd4e:	681b      	ldr	r3, [r3, #0]
   1cd50:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1cd52:	687b      	ldr	r3, [r7, #4]
   1cd54:	681b      	ldr	r3, [r3, #0]
   1cd56:	0018      	movs	r0, r3
   1cd58:	4b09      	ldr	r3, [pc, #36]	; (1cd80 <usart_enable+0x3c>)
   1cd5a:	4798      	blx	r3
   1cd5c:	0003      	movs	r3, r0
   1cd5e:	0018      	movs	r0, r3
   1cd60:	4b08      	ldr	r3, [pc, #32]	; (1cd84 <usart_enable+0x40>)
   1cd62:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1cd64:	687b      	ldr	r3, [r7, #4]
   1cd66:	0018      	movs	r0, r3
   1cd68:	4b07      	ldr	r3, [pc, #28]	; (1cd88 <usart_enable+0x44>)
   1cd6a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1cd6c:	68fb      	ldr	r3, [r7, #12]
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	2202      	movs	r2, #2
   1cd72:	431a      	orrs	r2, r3
   1cd74:	68fb      	ldr	r3, [r7, #12]
   1cd76:	601a      	str	r2, [r3, #0]
}
   1cd78:	46c0      	nop			; (mov r8, r8)
   1cd7a:	46bd      	mov	sp, r7
   1cd7c:	b004      	add	sp, #16
   1cd7e:	bd80      	pop	{r7, pc}
   1cd80:	000267ad 	.word	0x000267ad
   1cd84:	0001cc15 	.word	0x0001cc15
   1cd88:	0001cc61 	.word	0x0001cc61

0001cd8c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1cd8c:	b580      	push	{r7, lr}
   1cd8e:	b082      	sub	sp, #8
   1cd90:	af00      	add	r7, sp, #0
   1cd92:	6078      	str	r0, [r7, #4]
   1cd94:	000a      	movs	r2, r1
   1cd96:	1cfb      	adds	r3, r7, #3
   1cd98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1cd9a:	687b      	ldr	r3, [r7, #4]
   1cd9c:	2231      	movs	r2, #49	; 0x31
   1cd9e:	5c9b      	ldrb	r3, [r3, r2]
   1cda0:	b25a      	sxtb	r2, r3
   1cda2:	1cfb      	adds	r3, r7, #3
   1cda4:	781b      	ldrb	r3, [r3, #0]
   1cda6:	2101      	movs	r1, #1
   1cda8:	4099      	lsls	r1, r3
   1cdaa:	000b      	movs	r3, r1
   1cdac:	b25b      	sxtb	r3, r3
   1cdae:	4313      	orrs	r3, r2
   1cdb0:	b25b      	sxtb	r3, r3
   1cdb2:	b2d9      	uxtb	r1, r3
   1cdb4:	687b      	ldr	r3, [r7, #4]
   1cdb6:	2231      	movs	r2, #49	; 0x31
   1cdb8:	5499      	strb	r1, [r3, r2]

}
   1cdba:	46c0      	nop			; (mov r8, r8)
   1cdbc:	46bd      	mov	sp, r7
   1cdbe:	b002      	add	sp, #8
   1cdc0:	bd80      	pop	{r7, pc}
	...

0001cdc4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1cdc4:	b580      	push	{r7, lr}
   1cdc6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1cdc8:	2380      	movs	r3, #128	; 0x80
   1cdca:	009a      	lsls	r2, r3, #2
   1cdcc:	4b0f      	ldr	r3, [pc, #60]	; (1ce0c <InitializeSerialConsole+0x48>)
   1cdce:	0011      	movs	r1, r2
   1cdd0:	0018      	movs	r0, r3
   1cdd2:	4b0f      	ldr	r3, [pc, #60]	; (1ce10 <InitializeSerialConsole+0x4c>)
   1cdd4:	4798      	blx	r3
   1cdd6:	0002      	movs	r2, r0
   1cdd8:	4b0e      	ldr	r3, [pc, #56]	; (1ce14 <InitializeSerialConsole+0x50>)
   1cdda:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1cddc:	2380      	movs	r3, #128	; 0x80
   1cdde:	009a      	lsls	r2, r3, #2
   1cde0:	4b0d      	ldr	r3, [pc, #52]	; (1ce18 <InitializeSerialConsole+0x54>)
   1cde2:	0011      	movs	r1, r2
   1cde4:	0018      	movs	r0, r3
   1cde6:	4b0a      	ldr	r3, [pc, #40]	; (1ce10 <InitializeSerialConsole+0x4c>)
   1cde8:	4798      	blx	r3
   1cdea:	0002      	movs	r2, r0
   1cdec:	4b0b      	ldr	r3, [pc, #44]	; (1ce1c <InitializeSerialConsole+0x58>)
   1cdee:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1cdf0:	4b0b      	ldr	r3, [pc, #44]	; (1ce20 <InitializeSerialConsole+0x5c>)
   1cdf2:	4798      	blx	r3
    configure_usart_callbacks();
   1cdf4:	4b0b      	ldr	r3, [pc, #44]	; (1ce24 <InitializeSerialConsole+0x60>)
   1cdf6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1cdf8:	490b      	ldr	r1, [pc, #44]	; (1ce28 <InitializeSerialConsole+0x64>)
   1cdfa:	4b0c      	ldr	r3, [pc, #48]	; (1ce2c <InitializeSerialConsole+0x68>)
   1cdfc:	2201      	movs	r2, #1
   1cdfe:	0018      	movs	r0, r3
   1ce00:	4b0b      	ldr	r3, [pc, #44]	; (1ce30 <InitializeSerialConsole+0x6c>)
   1ce02:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1ce04:	46c0      	nop			; (mov r8, r8)
   1ce06:	46bd      	mov	sp, r7
   1ce08:	bd80      	pop	{r7, pc}
   1ce0a:	46c0      	nop			; (mov r8, r8)
   1ce0c:	20005850 	.word	0x20005850
   1ce10:	0001caf5 	.word	0x0001caf5
   1ce14:	20005648 	.word	0x20005648
   1ce18:	20005650 	.word	0x20005650
   1ce1c:	20005a54 	.word	0x20005a54
   1ce20:	0001cf99 	.word	0x0001cf99
   1ce24:	0001d011 	.word	0x0001d011
   1ce28:	2000564c 	.word	0x2000564c
   1ce2c:	20005614 	.word	0x20005614
   1ce30:	00028055 	.word	0x00028055

0001ce34 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ce34:	b580      	push	{r7, lr}
   1ce36:	b084      	sub	sp, #16
   1ce38:	af00      	add	r7, sp, #0
   1ce3a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ce3c:	4b1a      	ldr	r3, [pc, #104]	; (1cea8 <SerialConsoleWriteString+0x74>)
   1ce3e:	4798      	blx	r3
    if (string != NULL) {
   1ce40:	687b      	ldr	r3, [r7, #4]
   1ce42:	2b00      	cmp	r3, #0
   1ce44:	d02a      	beq.n	1ce9c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ce46:	2300      	movs	r3, #0
   1ce48:	60fb      	str	r3, [r7, #12]
   1ce4a:	e00b      	b.n	1ce64 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ce4c:	4b17      	ldr	r3, [pc, #92]	; (1ceac <SerialConsoleWriteString+0x78>)
   1ce4e:	6818      	ldr	r0, [r3, #0]
   1ce50:	687a      	ldr	r2, [r7, #4]
   1ce52:	68fb      	ldr	r3, [r7, #12]
   1ce54:	18d3      	adds	r3, r2, r3
   1ce56:	781b      	ldrb	r3, [r3, #0]
   1ce58:	0019      	movs	r1, r3
   1ce5a:	4b15      	ldr	r3, [pc, #84]	; (1ceb0 <SerialConsoleWriteString+0x7c>)
   1ce5c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ce5e:	68fb      	ldr	r3, [r7, #12]
   1ce60:	3301      	adds	r3, #1
   1ce62:	60fb      	str	r3, [r7, #12]
   1ce64:	687b      	ldr	r3, [r7, #4]
   1ce66:	0018      	movs	r0, r3
   1ce68:	4b12      	ldr	r3, [pc, #72]	; (1ceb4 <SerialConsoleWriteString+0x80>)
   1ce6a:	4798      	blx	r3
   1ce6c:	0002      	movs	r2, r0
   1ce6e:	68fb      	ldr	r3, [r7, #12]
   1ce70:	429a      	cmp	r2, r3
   1ce72:	d8eb      	bhi.n	1ce4c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ce74:	4b10      	ldr	r3, [pc, #64]	; (1ceb8 <SerialConsoleWriteString+0x84>)
   1ce76:	2101      	movs	r1, #1
   1ce78:	0018      	movs	r0, r3
   1ce7a:	4b10      	ldr	r3, [pc, #64]	; (1cebc <SerialConsoleWriteString+0x88>)
   1ce7c:	4798      	blx	r3
   1ce7e:	1e03      	subs	r3, r0, #0
   1ce80:	d10c      	bne.n	1ce9c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ce82:	4b0a      	ldr	r3, [pc, #40]	; (1ceac <SerialConsoleWriteString+0x78>)
   1ce84:	681b      	ldr	r3, [r3, #0]
   1ce86:	4a0e      	ldr	r2, [pc, #56]	; (1cec0 <SerialConsoleWriteString+0x8c>)
   1ce88:	0011      	movs	r1, r2
   1ce8a:	0018      	movs	r0, r3
   1ce8c:	4b0d      	ldr	r3, [pc, #52]	; (1cec4 <SerialConsoleWriteString+0x90>)
   1ce8e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ce90:	490b      	ldr	r1, [pc, #44]	; (1cec0 <SerialConsoleWriteString+0x8c>)
   1ce92:	4b09      	ldr	r3, [pc, #36]	; (1ceb8 <SerialConsoleWriteString+0x84>)
   1ce94:	2201      	movs	r2, #1
   1ce96:	0018      	movs	r0, r3
   1ce98:	4b0b      	ldr	r3, [pc, #44]	; (1cec8 <SerialConsoleWriteString+0x94>)
   1ce9a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ce9c:	4b0b      	ldr	r3, [pc, #44]	; (1cecc <SerialConsoleWriteString+0x98>)
   1ce9e:	4798      	blx	r3
}
   1cea0:	46c0      	nop			; (mov r8, r8)
   1cea2:	46bd      	mov	sp, r7
   1cea4:	b004      	add	sp, #16
   1cea6:	bd80      	pop	{r7, pc}
   1cea8:	0001b4a1 	.word	0x0001b4a1
   1ceac:	20005a54 	.word	0x20005a54
   1ceb0:	0001cb55 	.word	0x0001cb55
   1ceb4:	000349ab 	.word	0x000349ab
   1ceb8:	20005614 	.word	0x20005614
   1cebc:	0002809d 	.word	0x0002809d
   1cec0:	20005a50 	.word	0x20005a50
   1cec4:	0001cb89 	.word	0x0001cb89
   1cec8:	0002800d 	.word	0x0002800d
   1cecc:	0001b4b9 	.word	0x0001b4b9

0001ced0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ced0:	b580      	push	{r7, lr}
   1ced2:	b084      	sub	sp, #16
   1ced4:	af00      	add	r7, sp, #0
   1ced6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ced8:	4b08      	ldr	r3, [pc, #32]	; (1cefc <SerialConsoleReadCharacter+0x2c>)
   1ceda:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1cedc:	4b08      	ldr	r3, [pc, #32]	; (1cf00 <SerialConsoleReadCharacter+0x30>)
   1cede:	681b      	ldr	r3, [r3, #0]
   1cee0:	687a      	ldr	r2, [r7, #4]
   1cee2:	0011      	movs	r1, r2
   1cee4:	0018      	movs	r0, r3
   1cee6:	4b07      	ldr	r3, [pc, #28]	; (1cf04 <SerialConsoleReadCharacter+0x34>)
   1cee8:	4798      	blx	r3
   1ceea:	0003      	movs	r3, r0
   1ceec:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ceee:	4b06      	ldr	r3, [pc, #24]	; (1cf08 <SerialConsoleReadCharacter+0x38>)
   1cef0:	4798      	blx	r3
    return a;
   1cef2:	68fb      	ldr	r3, [r7, #12]
}
   1cef4:	0018      	movs	r0, r3
   1cef6:	46bd      	mov	sp, r7
   1cef8:	b004      	add	sp, #16
   1cefa:	bd80      	pop	{r7, pc}
   1cefc:	0001b4a1 	.word	0x0001b4a1
   1cf00:	20005648 	.word	0x20005648
   1cf04:	0001cb89 	.word	0x0001cb89
   1cf08:	0001b4b9 	.word	0x0001b4b9

0001cf0c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1cf0c:	b580      	push	{r7, lr}
   1cf0e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1cf10:	4b02      	ldr	r3, [pc, #8]	; (1cf1c <getLogLevel+0x10>)
   1cf12:	781b      	ldrb	r3, [r3, #0]
}
   1cf14:	0018      	movs	r0, r3
   1cf16:	46bd      	mov	sp, r7
   1cf18:	bd80      	pop	{r7, pc}
   1cf1a:	46c0      	nop			; (mov r8, r8)
   1cf1c:	200041e8 	.word	0x200041e8

0001cf20 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1cf20:	b40e      	push	{r1, r2, r3}
   1cf22:	b590      	push	{r4, r7, lr}
   1cf24:	b084      	sub	sp, #16
   1cf26:	af00      	add	r7, sp, #0
   1cf28:	0002      	movs	r2, r0
   1cf2a:	1dfb      	adds	r3, r7, #7
   1cf2c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1cf2e:	4b0e      	ldr	r3, [pc, #56]	; (1cf68 <LogMessage+0x48>)
   1cf30:	4798      	blx	r3
   1cf32:	0003      	movs	r3, r0
   1cf34:	001a      	movs	r2, r3
   1cf36:	1dfb      	adds	r3, r7, #7
   1cf38:	781b      	ldrb	r3, [r3, #0]
   1cf3a:	4293      	cmp	r3, r2
   1cf3c:	d30c      	bcc.n	1cf58 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1cf3e:	2320      	movs	r3, #32
   1cf40:	18fb      	adds	r3, r7, r3
   1cf42:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1cf44:	68fb      	ldr	r3, [r7, #12]
   1cf46:	69fa      	ldr	r2, [r7, #28]
   1cf48:	4808      	ldr	r0, [pc, #32]	; (1cf6c <LogMessage+0x4c>)
   1cf4a:	217f      	movs	r1, #127	; 0x7f
   1cf4c:	4c08      	ldr	r4, [pc, #32]	; (1cf70 <LogMessage+0x50>)
   1cf4e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1cf50:	4b06      	ldr	r3, [pc, #24]	; (1cf6c <LogMessage+0x4c>)
   1cf52:	0018      	movs	r0, r3
   1cf54:	4b07      	ldr	r3, [pc, #28]	; (1cf74 <LogMessage+0x54>)
   1cf56:	4798      	blx	r3
        va_end(ap);
    }
};
   1cf58:	46c0      	nop			; (mov r8, r8)
   1cf5a:	46bd      	mov	sp, r7
   1cf5c:	b004      	add	sp, #16
   1cf5e:	bc90      	pop	{r4, r7}
   1cf60:	bc08      	pop	{r3}
   1cf62:	b003      	add	sp, #12
   1cf64:	4718      	bx	r3
   1cf66:	46c0      	nop			; (mov r8, r8)
   1cf68:	0001cf0d 	.word	0x0001cf0d
   1cf6c:	20005594 	.word	0x20005594
   1cf70:	00034be5 	.word	0x00034be5
   1cf74:	0001ce35 	.word	0x0001ce35

0001cf78 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1cf78:	b40f      	push	{r0, r1, r2, r3}
   1cf7a:	b580      	push	{r7, lr}
   1cf7c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1cf7e:	68bb      	ldr	r3, [r7, #8]
   1cf80:	0019      	movs	r1, r3
   1cf82:	2001      	movs	r0, #1
   1cf84:	4b03      	ldr	r3, [pc, #12]	; (1cf94 <LogMessageDebug+0x1c>)
   1cf86:	4798      	blx	r3
};
   1cf88:	46c0      	nop			; (mov r8, r8)
   1cf8a:	46bd      	mov	sp, r7
   1cf8c:	bc80      	pop	{r7}
   1cf8e:	bc08      	pop	{r3}
   1cf90:	b004      	add	sp, #16
   1cf92:	4718      	bx	r3
   1cf94:	0001cf21 	.word	0x0001cf21

0001cf98 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1cf98:	b580      	push	{r7, lr}
   1cf9a:	b090      	sub	sp, #64	; 0x40
   1cf9c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1cf9e:	003b      	movs	r3, r7
   1cfa0:	0018      	movs	r0, r3
   1cfa2:	4b14      	ldr	r3, [pc, #80]	; (1cff4 <configure_usart+0x5c>)
   1cfa4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1cfa6:	003b      	movs	r3, r7
   1cfa8:	22e1      	movs	r2, #225	; 0xe1
   1cfaa:	0252      	lsls	r2, r2, #9
   1cfac:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1cfae:	003b      	movs	r3, r7
   1cfb0:	22c4      	movs	r2, #196	; 0xc4
   1cfb2:	0392      	lsls	r2, r2, #14
   1cfb4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1cfb6:	003b      	movs	r3, r7
   1cfb8:	2201      	movs	r2, #1
   1cfba:	4252      	negs	r2, r2
   1cfbc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1cfbe:	003b      	movs	r3, r7
   1cfc0:	2201      	movs	r2, #1
   1cfc2:	4252      	negs	r2, r2
   1cfc4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1cfc6:	003b      	movs	r3, r7
   1cfc8:	4a0b      	ldr	r2, [pc, #44]	; (1cff8 <configure_usart+0x60>)
   1cfca:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1cfcc:	003b      	movs	r3, r7
   1cfce:	4a0b      	ldr	r2, [pc, #44]	; (1cffc <configure_usart+0x64>)
   1cfd0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1cfd2:	46c0      	nop			; (mov r8, r8)
   1cfd4:	003a      	movs	r2, r7
   1cfd6:	490a      	ldr	r1, [pc, #40]	; (1d000 <configure_usart+0x68>)
   1cfd8:	4b0a      	ldr	r3, [pc, #40]	; (1d004 <configure_usart+0x6c>)
   1cfda:	0018      	movs	r0, r3
   1cfdc:	4b0a      	ldr	r3, [pc, #40]	; (1d008 <configure_usart+0x70>)
   1cfde:	4798      	blx	r3
   1cfe0:	1e03      	subs	r3, r0, #0
   1cfe2:	d1f7      	bne.n	1cfd4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1cfe4:	4b07      	ldr	r3, [pc, #28]	; (1d004 <configure_usart+0x6c>)
   1cfe6:	0018      	movs	r0, r3
   1cfe8:	4b08      	ldr	r3, [pc, #32]	; (1d00c <configure_usart+0x74>)
   1cfea:	4798      	blx	r3
}
   1cfec:	46c0      	nop			; (mov r8, r8)
   1cfee:	46bd      	mov	sp, r7
   1cff0:	b010      	add	sp, #64	; 0x40
   1cff2:	bd80      	pop	{r7, pc}
   1cff4:	0001cc85 	.word	0x0001cc85
   1cff8:	002a0003 	.word	0x002a0003
   1cffc:	002b0003 	.word	0x002b0003
   1d000:	42001800 	.word	0x42001800
   1d004:	20005614 	.word	0x20005614
   1d008:	00027c11 	.word	0x00027c11
   1d00c:	0001cd45 	.word	0x0001cd45

0001d010 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1d010:	b580      	push	{r7, lr}
   1d012:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d014:	490c      	ldr	r1, [pc, #48]	; (1d048 <configure_usart_callbacks+0x38>)
   1d016:	4b0d      	ldr	r3, [pc, #52]	; (1d04c <configure_usart_callbacks+0x3c>)
   1d018:	2200      	movs	r2, #0
   1d01a:	0018      	movs	r0, r3
   1d01c:	4b0c      	ldr	r3, [pc, #48]	; (1d050 <configure_usart_callbacks+0x40>)
   1d01e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1d020:	490c      	ldr	r1, [pc, #48]	; (1d054 <configure_usart_callbacks+0x44>)
   1d022:	4b0a      	ldr	r3, [pc, #40]	; (1d04c <configure_usart_callbacks+0x3c>)
   1d024:	2201      	movs	r2, #1
   1d026:	0018      	movs	r0, r3
   1d028:	4b09      	ldr	r3, [pc, #36]	; (1d050 <configure_usart_callbacks+0x40>)
   1d02a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d02c:	4b07      	ldr	r3, [pc, #28]	; (1d04c <configure_usart_callbacks+0x3c>)
   1d02e:	2100      	movs	r1, #0
   1d030:	0018      	movs	r0, r3
   1d032:	4b09      	ldr	r3, [pc, #36]	; (1d058 <configure_usart_callbacks+0x48>)
   1d034:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1d036:	4b05      	ldr	r3, [pc, #20]	; (1d04c <configure_usart_callbacks+0x3c>)
   1d038:	2101      	movs	r1, #1
   1d03a:	0018      	movs	r0, r3
   1d03c:	4b06      	ldr	r3, [pc, #24]	; (1d058 <configure_usart_callbacks+0x48>)
   1d03e:	4798      	blx	r3
}
   1d040:	46c0      	nop			; (mov r8, r8)
   1d042:	46bd      	mov	sp, r7
   1d044:	bd80      	pop	{r7, pc}
   1d046:	46c0      	nop			; (mov r8, r8)
   1d048:	0001d0a5 	.word	0x0001d0a5
   1d04c:	20005614 	.word	0x20005614
   1d050:	00027fc5 	.word	0x00027fc5
   1d054:	0001d05d 	.word	0x0001d05d
   1d058:	0001cd8d 	.word	0x0001cd8d

0001d05c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1d05c:	b580      	push	{r7, lr}
   1d05e:	b082      	sub	sp, #8
   1d060:	af00      	add	r7, sp, #0
   1d062:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1d064:	4b09      	ldr	r3, [pc, #36]	; (1d08c <usart_read_callback+0x30>)
   1d066:	681a      	ldr	r2, [r3, #0]
   1d068:	4b09      	ldr	r3, [pc, #36]	; (1d090 <usart_read_callback+0x34>)
   1d06a:	781b      	ldrb	r3, [r3, #0]
   1d06c:	0019      	movs	r1, r3
   1d06e:	0010      	movs	r0, r2
   1d070:	4b08      	ldr	r3, [pc, #32]	; (1d094 <usart_read_callback+0x38>)
   1d072:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1d074:	4906      	ldr	r1, [pc, #24]	; (1d090 <usart_read_callback+0x34>)
   1d076:	4b08      	ldr	r3, [pc, #32]	; (1d098 <usart_read_callback+0x3c>)
   1d078:	2201      	movs	r2, #1
   1d07a:	0018      	movs	r0, r3
   1d07c:	4b07      	ldr	r3, [pc, #28]	; (1d09c <usart_read_callback+0x40>)
   1d07e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1d080:	4b07      	ldr	r3, [pc, #28]	; (1d0a0 <usart_read_callback+0x44>)
   1d082:	4798      	blx	r3
}
   1d084:	46c0      	nop			; (mov r8, r8)
   1d086:	46bd      	mov	sp, r7
   1d088:	b002      	add	sp, #8
   1d08a:	bd80      	pop	{r7, pc}
   1d08c:	20005648 	.word	0x20005648
   1d090:	2000564c 	.word	0x2000564c
   1d094:	0001cb55 	.word	0x0001cb55
   1d098:	20005614 	.word	0x20005614
   1d09c:	00028055 	.word	0x00028055
   1d0a0:	00013b65 	.word	0x00013b65

0001d0a4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1d0a4:	b580      	push	{r7, lr}
   1d0a6:	b082      	sub	sp, #8
   1d0a8:	af00      	add	r7, sp, #0
   1d0aa:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1d0ac:	4b09      	ldr	r3, [pc, #36]	; (1d0d4 <usart_write_callback+0x30>)
   1d0ae:	681b      	ldr	r3, [r3, #0]
   1d0b0:	4a09      	ldr	r2, [pc, #36]	; (1d0d8 <usart_write_callback+0x34>)
   1d0b2:	0011      	movs	r1, r2
   1d0b4:	0018      	movs	r0, r3
   1d0b6:	4b09      	ldr	r3, [pc, #36]	; (1d0dc <usart_write_callback+0x38>)
   1d0b8:	4798      	blx	r3
   1d0ba:	0003      	movs	r3, r0
   1d0bc:	3301      	adds	r3, #1
   1d0be:	d005      	beq.n	1d0cc <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d0c0:	4905      	ldr	r1, [pc, #20]	; (1d0d8 <usart_write_callback+0x34>)
   1d0c2:	4b07      	ldr	r3, [pc, #28]	; (1d0e0 <usart_write_callback+0x3c>)
   1d0c4:	2201      	movs	r2, #1
   1d0c6:	0018      	movs	r0, r3
   1d0c8:	4b06      	ldr	r3, [pc, #24]	; (1d0e4 <usart_write_callback+0x40>)
   1d0ca:	4798      	blx	r3
    }
}
   1d0cc:	46c0      	nop			; (mov r8, r8)
   1d0ce:	46bd      	mov	sp, r7
   1d0d0:	b002      	add	sp, #8
   1d0d2:	bd80      	pop	{r7, pc}
   1d0d4:	20005a54 	.word	0x20005a54
   1d0d8:	20005a50 	.word	0x20005a50
   1d0dc:	0001cb89 	.word	0x0001cb89
   1d0e0:	20005614 	.word	0x20005614
   1d0e4:	0002800d 	.word	0x0002800d

0001d0e8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1d0e8:	b590      	push	{r4, r7, lr}
   1d0ea:	b087      	sub	sp, #28
   1d0ec:	af00      	add	r7, sp, #0
   1d0ee:	60f8      	str	r0, [r7, #12]
   1d0f0:	000c      	movs	r4, r1
   1d0f2:	0010      	movs	r0, r2
   1d0f4:	0019      	movs	r1, r3
   1d0f6:	230a      	movs	r3, #10
   1d0f8:	18fb      	adds	r3, r7, r3
   1d0fa:	1c22      	adds	r2, r4, #0
   1d0fc:	801a      	strh	r2, [r3, #0]
   1d0fe:	2308      	movs	r3, #8
   1d100:	18fb      	adds	r3, r7, r3
   1d102:	1c02      	adds	r2, r0, #0
   1d104:	801a      	strh	r2, [r3, #0]
   1d106:	1dfb      	adds	r3, r7, #7
   1d108:	1c0a      	adds	r2, r1, #0
   1d10a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1d10c:	230a      	movs	r3, #10
   1d10e:	18fb      	adds	r3, r7, r3
   1d110:	881a      	ldrh	r2, [r3, #0]
   1d112:	2308      	movs	r3, #8
   1d114:	18fb      	adds	r3, r7, r3
   1d116:	881b      	ldrh	r3, [r3, #0]
   1d118:	1ad3      	subs	r3, r2, r3
   1d11a:	3307      	adds	r3, #7
   1d11c:	2b00      	cmp	r3, #0
   1d11e:	da00      	bge.n	1d122 <SDMMC_UNSTUFF_BITS+0x3a>
   1d120:	3307      	adds	r3, #7
   1d122:	10db      	asrs	r3, r3, #3
   1d124:	3b01      	subs	r3, #1
   1d126:	68fa      	ldr	r2, [r7, #12]
   1d128:	18d3      	adds	r3, r2, r3
   1d12a:	781b      	ldrb	r3, [r3, #0]
   1d12c:	0019      	movs	r1, r3
   1d12e:	2308      	movs	r3, #8
   1d130:	18fb      	adds	r3, r7, r3
   1d132:	881b      	ldrh	r3, [r3, #0]
   1d134:	2207      	movs	r2, #7
   1d136:	4013      	ands	r3, r2
   1d138:	4119      	asrs	r1, r3
   1d13a:	000b      	movs	r3, r1
   1d13c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1d13e:	2308      	movs	r3, #8
   1d140:	18fb      	adds	r3, r7, r3
   1d142:	881b      	ldrh	r3, [r3, #0]
   1d144:	2207      	movs	r2, #7
   1d146:	401a      	ands	r2, r3
   1d148:	1dfb      	adds	r3, r7, #7
   1d14a:	781b      	ldrb	r3, [r3, #0]
   1d14c:	18d3      	adds	r3, r2, r3
   1d14e:	2b08      	cmp	r3, #8
   1d150:	dd1c      	ble.n	1d18c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1d152:	230a      	movs	r3, #10
   1d154:	18fb      	adds	r3, r7, r3
   1d156:	881a      	ldrh	r2, [r3, #0]
   1d158:	2308      	movs	r3, #8
   1d15a:	18fb      	adds	r3, r7, r3
   1d15c:	881b      	ldrh	r3, [r3, #0]
   1d15e:	1ad3      	subs	r3, r2, r3
   1d160:	3307      	adds	r3, #7
   1d162:	2b00      	cmp	r3, #0
   1d164:	da00      	bge.n	1d168 <SDMMC_UNSTUFF_BITS+0x80>
   1d166:	3307      	adds	r3, #7
   1d168:	10db      	asrs	r3, r3, #3
   1d16a:	3b02      	subs	r3, #2
   1d16c:	68fa      	ldr	r2, [r7, #12]
   1d16e:	18d3      	adds	r3, r2, r3
   1d170:	781b      	ldrb	r3, [r3, #0]
   1d172:	0019      	movs	r1, r3
   1d174:	2308      	movs	r3, #8
   1d176:	18fb      	adds	r3, r7, r3
   1d178:	881b      	ldrh	r3, [r3, #0]
   1d17a:	2207      	movs	r2, #7
   1d17c:	4013      	ands	r3, r2
   1d17e:	2208      	movs	r2, #8
   1d180:	1ad3      	subs	r3, r2, r3
   1d182:	4099      	lsls	r1, r3
   1d184:	000b      	movs	r3, r1
   1d186:	697a      	ldr	r2, [r7, #20]
   1d188:	4313      	orrs	r3, r2
   1d18a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d18c:	2308      	movs	r3, #8
   1d18e:	18fb      	adds	r3, r7, r3
   1d190:	881b      	ldrh	r3, [r3, #0]
   1d192:	2207      	movs	r2, #7
   1d194:	401a      	ands	r2, r3
   1d196:	1dfb      	adds	r3, r7, #7
   1d198:	781b      	ldrb	r3, [r3, #0]
   1d19a:	18d3      	adds	r3, r2, r3
   1d19c:	2b10      	cmp	r3, #16
   1d19e:	dd1c      	ble.n	1d1da <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d1a0:	230a      	movs	r3, #10
   1d1a2:	18fb      	adds	r3, r7, r3
   1d1a4:	881a      	ldrh	r2, [r3, #0]
   1d1a6:	2308      	movs	r3, #8
   1d1a8:	18fb      	adds	r3, r7, r3
   1d1aa:	881b      	ldrh	r3, [r3, #0]
   1d1ac:	1ad3      	subs	r3, r2, r3
   1d1ae:	3307      	adds	r3, #7
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	da00      	bge.n	1d1b6 <SDMMC_UNSTUFF_BITS+0xce>
   1d1b4:	3307      	adds	r3, #7
   1d1b6:	10db      	asrs	r3, r3, #3
   1d1b8:	3b03      	subs	r3, #3
   1d1ba:	68fa      	ldr	r2, [r7, #12]
   1d1bc:	18d3      	adds	r3, r2, r3
   1d1be:	781b      	ldrb	r3, [r3, #0]
   1d1c0:	0019      	movs	r1, r3
   1d1c2:	2308      	movs	r3, #8
   1d1c4:	18fb      	adds	r3, r7, r3
   1d1c6:	881b      	ldrh	r3, [r3, #0]
   1d1c8:	2207      	movs	r2, #7
   1d1ca:	4013      	ands	r3, r2
   1d1cc:	2210      	movs	r2, #16
   1d1ce:	1ad3      	subs	r3, r2, r3
   1d1d0:	4099      	lsls	r1, r3
   1d1d2:	000b      	movs	r3, r1
   1d1d4:	697a      	ldr	r2, [r7, #20]
   1d1d6:	4313      	orrs	r3, r2
   1d1d8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d1da:	2308      	movs	r3, #8
   1d1dc:	18fb      	adds	r3, r7, r3
   1d1de:	881b      	ldrh	r3, [r3, #0]
   1d1e0:	2207      	movs	r2, #7
   1d1e2:	401a      	ands	r2, r3
   1d1e4:	1dfb      	adds	r3, r7, #7
   1d1e6:	781b      	ldrb	r3, [r3, #0]
   1d1e8:	18d3      	adds	r3, r2, r3
   1d1ea:	2b10      	cmp	r3, #16
   1d1ec:	dd1c      	ble.n	1d228 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d1ee:	230a      	movs	r3, #10
   1d1f0:	18fb      	adds	r3, r7, r3
   1d1f2:	881a      	ldrh	r2, [r3, #0]
   1d1f4:	2308      	movs	r3, #8
   1d1f6:	18fb      	adds	r3, r7, r3
   1d1f8:	881b      	ldrh	r3, [r3, #0]
   1d1fa:	1ad3      	subs	r3, r2, r3
   1d1fc:	3307      	adds	r3, #7
   1d1fe:	2b00      	cmp	r3, #0
   1d200:	da00      	bge.n	1d204 <SDMMC_UNSTUFF_BITS+0x11c>
   1d202:	3307      	adds	r3, #7
   1d204:	10db      	asrs	r3, r3, #3
   1d206:	3b03      	subs	r3, #3
   1d208:	68fa      	ldr	r2, [r7, #12]
   1d20a:	18d3      	adds	r3, r2, r3
   1d20c:	781b      	ldrb	r3, [r3, #0]
   1d20e:	0019      	movs	r1, r3
   1d210:	2308      	movs	r3, #8
   1d212:	18fb      	adds	r3, r7, r3
   1d214:	881b      	ldrh	r3, [r3, #0]
   1d216:	2207      	movs	r2, #7
   1d218:	4013      	ands	r3, r2
   1d21a:	2210      	movs	r2, #16
   1d21c:	1ad3      	subs	r3, r2, r3
   1d21e:	4099      	lsls	r1, r3
   1d220:	000b      	movs	r3, r1
   1d222:	697a      	ldr	r2, [r7, #20]
   1d224:	4313      	orrs	r3, r2
   1d226:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1d228:	1dfb      	adds	r3, r7, #7
   1d22a:	781b      	ldrb	r3, [r3, #0]
   1d22c:	2201      	movs	r2, #1
   1d22e:	409a      	lsls	r2, r3
   1d230:	0013      	movs	r3, r2
   1d232:	1e5a      	subs	r2, r3, #1
   1d234:	697b      	ldr	r3, [r7, #20]
   1d236:	4013      	ands	r3, r2
   1d238:	617b      	str	r3, [r7, #20]
	return value;
   1d23a:	697b      	ldr	r3, [r7, #20]
}
   1d23c:	0018      	movs	r0, r3
   1d23e:	46bd      	mov	sp, r7
   1d240:	b007      	add	sp, #28
   1d242:	bd90      	pop	{r4, r7, pc}

0001d244 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1d244:	b580      	push	{r7, lr}
   1d246:	b082      	sub	sp, #8
   1d248:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d24a:	4b23      	ldr	r3, [pc, #140]	; (1d2d8 <mmc_spi_op_cond+0x94>)
   1d24c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1d24e:	4b23      	ldr	r3, [pc, #140]	; (1d2dc <mmc_spi_op_cond+0x98>)
   1d250:	2100      	movs	r1, #0
   1d252:	0018      	movs	r0, r3
   1d254:	4b22      	ldr	r3, [pc, #136]	; (1d2e0 <mmc_spi_op_cond+0x9c>)
   1d256:	4798      	blx	r3
   1d258:	0003      	movs	r3, r0
   1d25a:	001a      	movs	r2, r3
   1d25c:	2301      	movs	r3, #1
   1d25e:	4053      	eors	r3, r2
   1d260:	b2db      	uxtb	r3, r3
   1d262:	2b00      	cmp	r3, #0
   1d264:	d001      	beq.n	1d26a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1d266:	2300      	movs	r3, #0
   1d268:	e031      	b.n	1d2ce <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1d26a:	4b1e      	ldr	r3, [pc, #120]	; (1d2e4 <mmc_spi_op_cond+0xa0>)
   1d26c:	4798      	blx	r3
   1d26e:	0003      	movs	r3, r0
   1d270:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1d272:	683b      	ldr	r3, [r7, #0]
   1d274:	2201      	movs	r2, #1
   1d276:	4013      	ands	r3, r2
   1d278:	d006      	beq.n	1d288 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1d27a:	687b      	ldr	r3, [r7, #4]
   1d27c:	1e5a      	subs	r2, r3, #1
   1d27e:	607a      	str	r2, [r7, #4]
   1d280:	2b00      	cmp	r3, #0
   1d282:	d1e4      	bne.n	1d24e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1d284:	2300      	movs	r3, #0
   1d286:	e022      	b.n	1d2ce <mmc_spi_op_cond+0x8a>
			break;
   1d288:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d28a:	4b17      	ldr	r3, [pc, #92]	; (1d2e8 <mmc_spi_op_cond+0xa4>)
   1d28c:	2100      	movs	r1, #0
   1d28e:	0018      	movs	r0, r3
   1d290:	4b13      	ldr	r3, [pc, #76]	; (1d2e0 <mmc_spi_op_cond+0x9c>)
   1d292:	4798      	blx	r3
   1d294:	0003      	movs	r3, r0
   1d296:	001a      	movs	r2, r3
   1d298:	2301      	movs	r3, #1
   1d29a:	4053      	eors	r3, r2
   1d29c:	b2db      	uxtb	r3, r3
   1d29e:	2b00      	cmp	r3, #0
   1d2a0:	d001      	beq.n	1d2a6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d2a2:	2300      	movs	r3, #0
   1d2a4:	e013      	b.n	1d2ce <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1d2a6:	4b0f      	ldr	r3, [pc, #60]	; (1d2e4 <mmc_spi_op_cond+0xa0>)
   1d2a8:	4798      	blx	r3
   1d2aa:	0002      	movs	r2, r0
   1d2ac:	23c0      	movs	r3, #192	; 0xc0
   1d2ae:	05db      	lsls	r3, r3, #23
   1d2b0:	401a      	ands	r2, r3
   1d2b2:	2380      	movs	r3, #128	; 0x80
   1d2b4:	05db      	lsls	r3, r3, #23
   1d2b6:	429a      	cmp	r2, r3
   1d2b8:	d108      	bne.n	1d2cc <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d2ba:	4b0c      	ldr	r3, [pc, #48]	; (1d2ec <mmc_spi_op_cond+0xa8>)
   1d2bc:	681a      	ldr	r2, [r3, #0]
   1d2be:	4b0b      	ldr	r3, [pc, #44]	; (1d2ec <mmc_spi_op_cond+0xa8>)
   1d2c0:	681b      	ldr	r3, [r3, #0]
   1d2c2:	7adb      	ldrb	r3, [r3, #11]
   1d2c4:	2108      	movs	r1, #8
   1d2c6:	430b      	orrs	r3, r1
   1d2c8:	b2db      	uxtb	r3, r3
   1d2ca:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d2cc:	2301      	movs	r3, #1
}
   1d2ce:	0018      	movs	r0, r3
   1d2d0:	46bd      	mov	sp, r7
   1d2d2:	b002      	add	sp, #8
   1d2d4:	bd80      	pop	{r7, pc}
   1d2d6:	46c0      	nop			; (mov r8, r8)
   1d2d8:	00001bee 	.word	0x00001bee
   1d2dc:	00001101 	.word	0x00001101
   1d2e0:	0001ecc1 	.word	0x0001ecc1
   1d2e4:	0001ef01 	.word	0x0001ef01
   1d2e8:	0000053a 	.word	0x0000053a
   1d2ec:	20004210 	.word	0x20004210

0001d2f0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1d2f0:	b580      	push	{r7, lr}
   1d2f2:	b086      	sub	sp, #24
   1d2f4:	af00      	add	r7, sp, #0
   1d2f6:	0002      	movs	r2, r0
   1d2f8:	1dfb      	adds	r3, r7, #7
   1d2fa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d2fc:	4b2e      	ldr	r3, [pc, #184]	; (1d3b8 <sd_spi_op_cond+0xc8>)
   1d2fe:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1d300:	4b2e      	ldr	r3, [pc, #184]	; (1d3bc <sd_spi_op_cond+0xcc>)
   1d302:	2100      	movs	r1, #0
   1d304:	0018      	movs	r0, r3
   1d306:	4b2e      	ldr	r3, [pc, #184]	; (1d3c0 <sd_spi_op_cond+0xd0>)
   1d308:	4798      	blx	r3
   1d30a:	0003      	movs	r3, r0
   1d30c:	001a      	movs	r2, r3
   1d30e:	2301      	movs	r3, #1
   1d310:	4053      	eors	r3, r2
   1d312:	b2db      	uxtb	r3, r3
   1d314:	2b00      	cmp	r3, #0
   1d316:	d001      	beq.n	1d31c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1d318:	2300      	movs	r3, #0
   1d31a:	e048      	b.n	1d3ae <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1d31c:	2300      	movs	r3, #0
   1d31e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1d320:	1dfb      	adds	r3, r7, #7
   1d322:	781b      	ldrb	r3, [r3, #0]
   1d324:	2b00      	cmp	r3, #0
   1d326:	d004      	beq.n	1d332 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1d328:	697b      	ldr	r3, [r7, #20]
   1d32a:	2280      	movs	r2, #128	; 0x80
   1d32c:	05d2      	lsls	r2, r2, #23
   1d32e:	4313      	orrs	r3, r2
   1d330:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1d332:	697b      	ldr	r3, [r7, #20]
   1d334:	4a23      	ldr	r2, [pc, #140]	; (1d3c4 <sd_spi_op_cond+0xd4>)
   1d336:	0019      	movs	r1, r3
   1d338:	0010      	movs	r0, r2
   1d33a:	4b21      	ldr	r3, [pc, #132]	; (1d3c0 <sd_spi_op_cond+0xd0>)
   1d33c:	4798      	blx	r3
   1d33e:	0003      	movs	r3, r0
   1d340:	001a      	movs	r2, r3
   1d342:	2301      	movs	r3, #1
   1d344:	4053      	eors	r3, r2
   1d346:	b2db      	uxtb	r3, r3
   1d348:	2b00      	cmp	r3, #0
   1d34a:	d001      	beq.n	1d350 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1d34c:	2300      	movs	r3, #0
   1d34e:	e02e      	b.n	1d3ae <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1d350:	4b1d      	ldr	r3, [pc, #116]	; (1d3c8 <sd_spi_op_cond+0xd8>)
   1d352:	4798      	blx	r3
   1d354:	0003      	movs	r3, r0
   1d356:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1d358:	68fb      	ldr	r3, [r7, #12]
   1d35a:	2201      	movs	r2, #1
   1d35c:	4013      	ands	r3, r2
   1d35e:	d006      	beq.n	1d36e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1d360:	693b      	ldr	r3, [r7, #16]
   1d362:	1e5a      	subs	r2, r3, #1
   1d364:	613a      	str	r2, [r7, #16]
   1d366:	2b00      	cmp	r3, #0
   1d368:	d1ca      	bne.n	1d300 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1d36a:	2300      	movs	r3, #0
   1d36c:	e01f      	b.n	1d3ae <sd_spi_op_cond+0xbe>
			break;
   1d36e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d370:	4b16      	ldr	r3, [pc, #88]	; (1d3cc <sd_spi_op_cond+0xdc>)
   1d372:	2100      	movs	r1, #0
   1d374:	0018      	movs	r0, r3
   1d376:	4b12      	ldr	r3, [pc, #72]	; (1d3c0 <sd_spi_op_cond+0xd0>)
   1d378:	4798      	blx	r3
   1d37a:	0003      	movs	r3, r0
   1d37c:	001a      	movs	r2, r3
   1d37e:	2301      	movs	r3, #1
   1d380:	4053      	eors	r3, r2
   1d382:	b2db      	uxtb	r3, r3
   1d384:	2b00      	cmp	r3, #0
   1d386:	d001      	beq.n	1d38c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d388:	2300      	movs	r3, #0
   1d38a:	e010      	b.n	1d3ae <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1d38c:	4b0e      	ldr	r3, [pc, #56]	; (1d3c8 <sd_spi_op_cond+0xd8>)
   1d38e:	4798      	blx	r3
   1d390:	0002      	movs	r2, r0
   1d392:	2380      	movs	r3, #128	; 0x80
   1d394:	05db      	lsls	r3, r3, #23
   1d396:	4013      	ands	r3, r2
   1d398:	d008      	beq.n	1d3ac <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d39a:	4b0d      	ldr	r3, [pc, #52]	; (1d3d0 <sd_spi_op_cond+0xe0>)
   1d39c:	681a      	ldr	r2, [r3, #0]
   1d39e:	4b0c      	ldr	r3, [pc, #48]	; (1d3d0 <sd_spi_op_cond+0xe0>)
   1d3a0:	681b      	ldr	r3, [r3, #0]
   1d3a2:	7adb      	ldrb	r3, [r3, #11]
   1d3a4:	2108      	movs	r1, #8
   1d3a6:	430b      	orrs	r3, r1
   1d3a8:	b2db      	uxtb	r3, r3
   1d3aa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d3ac:	2301      	movs	r3, #1
}
   1d3ae:	0018      	movs	r0, r3
   1d3b0:	46bd      	mov	sp, r7
   1d3b2:	b006      	add	sp, #24
   1d3b4:	bd80      	pop	{r7, pc}
   1d3b6:	46c0      	nop			; (mov r8, r8)
   1d3b8:	00001bee 	.word	0x00001bee
   1d3bc:	00001137 	.word	0x00001137
   1d3c0:	0001ecc1 	.word	0x0001ecc1
   1d3c4:	00001129 	.word	0x00001129
   1d3c8:	0001ef01 	.word	0x0001ef01
   1d3cc:	0000053a 	.word	0x0000053a
   1d3d0:	20004210 	.word	0x20004210

0001d3d4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1d3d4:	b580      	push	{r7, lr}
   1d3d6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1d3d8:	2301      	movs	r3, #1
}
   1d3da:	0018      	movs	r0, r3
   1d3dc:	46bd      	mov	sp, r7
   1d3de:	bd80      	pop	{r7, pc}

0001d3e0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1d3e0:	b580      	push	{r7, lr}
   1d3e2:	b084      	sub	sp, #16
   1d3e4:	af00      	add	r7, sp, #0
   1d3e6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1d3e8:	687b      	ldr	r3, [r7, #4]
   1d3ea:	2200      	movs	r2, #0
   1d3ec:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1d3ee:	23d5      	movs	r3, #213	; 0xd5
   1d3f0:	005b      	lsls	r3, r3, #1
   1d3f2:	4a14      	ldr	r2, [pc, #80]	; (1d444 <sd_cmd8+0x64>)
   1d3f4:	0019      	movs	r1, r3
   1d3f6:	0010      	movs	r0, r2
   1d3f8:	4b13      	ldr	r3, [pc, #76]	; (1d448 <sd_cmd8+0x68>)
   1d3fa:	4798      	blx	r3
   1d3fc:	0003      	movs	r3, r0
   1d3fe:	001a      	movs	r2, r3
   1d400:	2301      	movs	r3, #1
   1d402:	4053      	eors	r3, r2
   1d404:	b2db      	uxtb	r3, r3
   1d406:	2b00      	cmp	r3, #0
   1d408:	d001      	beq.n	1d40e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1d40a:	2301      	movs	r3, #1
   1d40c:	e015      	b.n	1d43a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1d40e:	4b0f      	ldr	r3, [pc, #60]	; (1d44c <sd_cmd8+0x6c>)
   1d410:	4798      	blx	r3
   1d412:	0003      	movs	r3, r0
   1d414:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1d416:	68fb      	ldr	r3, [r7, #12]
   1d418:	3301      	adds	r3, #1
   1d41a:	d101      	bne.n	1d420 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1d41c:	2301      	movs	r3, #1
   1d41e:	e00c      	b.n	1d43a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1d420:	68fb      	ldr	r3, [r7, #12]
   1d422:	051b      	lsls	r3, r3, #20
   1d424:	0d1a      	lsrs	r2, r3, #20
   1d426:	23d5      	movs	r3, #213	; 0xd5
   1d428:	005b      	lsls	r3, r3, #1
   1d42a:	429a      	cmp	r2, r3
   1d42c:	d001      	beq.n	1d432 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1d42e:	2300      	movs	r3, #0
   1d430:	e003      	b.n	1d43a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1d432:	687b      	ldr	r3, [r7, #4]
   1d434:	2201      	movs	r2, #1
   1d436:	701a      	strb	r2, [r3, #0]
	return true;
   1d438:	2301      	movs	r3, #1
}
   1d43a:	0018      	movs	r0, r3
   1d43c:	46bd      	mov	sp, r7
   1d43e:	b004      	add	sp, #16
   1d440:	bd80      	pop	{r7, pc}
   1d442:	46c0      	nop			; (mov r8, r8)
   1d444:	00005508 	.word	0x00005508
   1d448:	0001ecc1 	.word	0x0001ecc1
   1d44c:	0001ef01 	.word	0x0001ef01

0001d450 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1d450:	b590      	push	{r4, r7, lr}
   1d452:	b089      	sub	sp, #36	; 0x24
   1d454:	af02      	add	r7, sp, #8
   1d456:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1d458:	2380      	movs	r3, #128	; 0x80
   1d45a:	009a      	lsls	r2, r3, #2
   1d45c:	4841      	ldr	r0, [pc, #260]	; (1d564 <mmc_cmd8+0x114>)
   1d45e:	2300      	movs	r3, #0
   1d460:	9300      	str	r3, [sp, #0]
   1d462:	2301      	movs	r3, #1
   1d464:	2100      	movs	r1, #0
   1d466:	4c40      	ldr	r4, [pc, #256]	; (1d568 <mmc_cmd8+0x118>)
   1d468:	47a0      	blx	r4
   1d46a:	0003      	movs	r3, r0
   1d46c:	001a      	movs	r2, r3
   1d46e:	2301      	movs	r3, #1
   1d470:	4053      	eors	r3, r2
   1d472:	b2db      	uxtb	r3, r3
   1d474:	2b00      	cmp	r3, #0
   1d476:	d001      	beq.n	1d47c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1d478:	2300      	movs	r3, #0
   1d47a:	e06e      	b.n	1d55a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d47c:	2316      	movs	r3, #22
   1d47e:	18fb      	adds	r3, r7, r3
   1d480:	2200      	movs	r2, #0
   1d482:	801a      	strh	r2, [r3, #0]
   1d484:	e014      	b.n	1d4b0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1d486:	2310      	movs	r3, #16
   1d488:	18fb      	adds	r3, r7, r3
   1d48a:	0018      	movs	r0, r3
   1d48c:	4b37      	ldr	r3, [pc, #220]	; (1d56c <mmc_cmd8+0x11c>)
   1d48e:	4798      	blx	r3
   1d490:	0003      	movs	r3, r0
   1d492:	001a      	movs	r2, r3
   1d494:	2301      	movs	r3, #1
   1d496:	4053      	eors	r3, r2
   1d498:	b2db      	uxtb	r3, r3
   1d49a:	2b00      	cmp	r3, #0
   1d49c:	d001      	beq.n	1d4a2 <mmc_cmd8+0x52>
			return false;
   1d49e:	2300      	movs	r3, #0
   1d4a0:	e05b      	b.n	1d55a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d4a2:	2316      	movs	r3, #22
   1d4a4:	18fb      	adds	r3, r7, r3
   1d4a6:	881a      	ldrh	r2, [r3, #0]
   1d4a8:	2316      	movs	r3, #22
   1d4aa:	18fb      	adds	r3, r7, r3
   1d4ac:	3201      	adds	r2, #1
   1d4ae:	801a      	strh	r2, [r3, #0]
   1d4b0:	2316      	movs	r3, #22
   1d4b2:	18fb      	adds	r3, r7, r3
   1d4b4:	881b      	ldrh	r3, [r3, #0]
   1d4b6:	2b31      	cmp	r3, #49	; 0x31
   1d4b8:	d9e5      	bls.n	1d486 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1d4ba:	693b      	ldr	r3, [r7, #16]
   1d4bc:	b2db      	uxtb	r3, r3
   1d4be:	2202      	movs	r2, #2
   1d4c0:	4013      	ands	r3, r2
   1d4c2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1d4c4:	687b      	ldr	r3, [r7, #4]
   1d4c6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1d4c8:	4b29      	ldr	r3, [pc, #164]	; (1d570 <mmc_cmd8+0x120>)
   1d4ca:	681b      	ldr	r3, [r3, #0]
   1d4cc:	330e      	adds	r3, #14
   1d4ce:	0018      	movs	r0, r3
   1d4d0:	230c      	movs	r3, #12
   1d4d2:	223e      	movs	r2, #62	; 0x3e
   1d4d4:	2180      	movs	r1, #128	; 0x80
   1d4d6:	4c27      	ldr	r4, [pc, #156]	; (1d574 <mmc_cmd8+0x124>)
   1d4d8:	47a0      	blx	r4
   1d4da:	0002      	movs	r2, r0
   1d4dc:	4b26      	ldr	r3, [pc, #152]	; (1d578 <mmc_cmd8+0x128>)
   1d4de:	429a      	cmp	r2, r3
   1d4e0:	d135      	bne.n	1d54e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d4e2:	e014      	b.n	1d50e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1d4e4:	230c      	movs	r3, #12
   1d4e6:	18fb      	adds	r3, r7, r3
   1d4e8:	0018      	movs	r0, r3
   1d4ea:	4b20      	ldr	r3, [pc, #128]	; (1d56c <mmc_cmd8+0x11c>)
   1d4ec:	4798      	blx	r3
   1d4ee:	0003      	movs	r3, r0
   1d4f0:	001a      	movs	r2, r3
   1d4f2:	2301      	movs	r3, #1
   1d4f4:	4053      	eors	r3, r2
   1d4f6:	b2db      	uxtb	r3, r3
   1d4f8:	2b00      	cmp	r3, #0
   1d4fa:	d001      	beq.n	1d500 <mmc_cmd8+0xb0>
				return false;
   1d4fc:	2300      	movs	r3, #0
   1d4fe:	e02c      	b.n	1d55a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d500:	2316      	movs	r3, #22
   1d502:	18fb      	adds	r3, r7, r3
   1d504:	881a      	ldrh	r2, [r3, #0]
   1d506:	2316      	movs	r3, #22
   1d508:	18fb      	adds	r3, r7, r3
   1d50a:	3201      	adds	r2, #1
   1d50c:	801a      	strh	r2, [r3, #0]
   1d50e:	2316      	movs	r3, #22
   1d510:	18fb      	adds	r3, r7, r3
   1d512:	881b      	ldrh	r3, [r3, #0]
   1d514:	2b35      	cmp	r3, #53	; 0x35
   1d516:	d9e5      	bls.n	1d4e4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1d518:	4b15      	ldr	r3, [pc, #84]	; (1d570 <mmc_cmd8+0x120>)
   1d51a:	681b      	ldr	r3, [r3, #0]
   1d51c:	68fa      	ldr	r2, [r7, #12]
   1d51e:	0852      	lsrs	r2, r2, #1
   1d520:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d522:	e014      	b.n	1d54e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1d524:	230c      	movs	r3, #12
   1d526:	18fb      	adds	r3, r7, r3
   1d528:	0018      	movs	r0, r3
   1d52a:	4b10      	ldr	r3, [pc, #64]	; (1d56c <mmc_cmd8+0x11c>)
   1d52c:	4798      	blx	r3
   1d52e:	0003      	movs	r3, r0
   1d530:	001a      	movs	r2, r3
   1d532:	2301      	movs	r3, #1
   1d534:	4053      	eors	r3, r2
   1d536:	b2db      	uxtb	r3, r3
   1d538:	2b00      	cmp	r3, #0
   1d53a:	d001      	beq.n	1d540 <mmc_cmd8+0xf0>
			return false;
   1d53c:	2300      	movs	r3, #0
   1d53e:	e00c      	b.n	1d55a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d540:	2316      	movs	r3, #22
   1d542:	18fb      	adds	r3, r7, r3
   1d544:	881a      	ldrh	r2, [r3, #0]
   1d546:	2316      	movs	r3, #22
   1d548:	18fb      	adds	r3, r7, r3
   1d54a:	3201      	adds	r2, #1
   1d54c:	801a      	strh	r2, [r3, #0]
   1d54e:	2316      	movs	r3, #22
   1d550:	18fb      	adds	r3, r7, r3
   1d552:	881b      	ldrh	r3, [r3, #0]
   1d554:	2b7f      	cmp	r3, #127	; 0x7f
   1d556:	d9e5      	bls.n	1d524 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1d558:	2301      	movs	r3, #1
}
   1d55a:	0018      	movs	r0, r3
   1d55c:	46bd      	mov	sp, r7
   1d55e:	b007      	add	sp, #28
   1d560:	bd90      	pop	{r4, r7, pc}
   1d562:	46c0      	nop			; (mov r8, r8)
   1d564:	00081108 	.word	0x00081108
   1d568:	0001ece9 	.word	0x0001ece9
   1d56c:	0001ef15 	.word	0x0001ef15
   1d570:	20004210 	.word	0x20004210
   1d574:	0001d0e9 	.word	0x0001d0e9
   1d578:	00000fff 	.word	0x00000fff

0001d57c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1d57c:	b590      	push	{r4, r7, lr}
   1d57e:	b083      	sub	sp, #12
   1d580:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1d582:	4b15      	ldr	r3, [pc, #84]	; (1d5d8 <sd_mmc_cmd9_spi+0x5c>)
   1d584:	681b      	ldr	r3, [r3, #0]
   1d586:	891b      	ldrh	r3, [r3, #8]
   1d588:	0419      	lsls	r1, r3, #16
   1d58a:	4814      	ldr	r0, [pc, #80]	; (1d5dc <sd_mmc_cmd9_spi+0x60>)
   1d58c:	2301      	movs	r3, #1
   1d58e:	9300      	str	r3, [sp, #0]
   1d590:	2301      	movs	r3, #1
   1d592:	2210      	movs	r2, #16
   1d594:	4c12      	ldr	r4, [pc, #72]	; (1d5e0 <sd_mmc_cmd9_spi+0x64>)
   1d596:	47a0      	blx	r4
   1d598:	0003      	movs	r3, r0
   1d59a:	001a      	movs	r2, r3
   1d59c:	2301      	movs	r3, #1
   1d59e:	4053      	eors	r3, r2
   1d5a0:	b2db      	uxtb	r3, r3
   1d5a2:	2b00      	cmp	r3, #0
   1d5a4:	d001      	beq.n	1d5aa <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1d5a6:	2300      	movs	r3, #0
   1d5a8:	e012      	b.n	1d5d0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1d5aa:	4b0b      	ldr	r3, [pc, #44]	; (1d5d8 <sd_mmc_cmd9_spi+0x5c>)
   1d5ac:	681b      	ldr	r3, [r3, #0]
   1d5ae:	330e      	adds	r3, #14
   1d5b0:	2101      	movs	r1, #1
   1d5b2:	0018      	movs	r0, r3
   1d5b4:	4b0b      	ldr	r3, [pc, #44]	; (1d5e4 <sd_mmc_cmd9_spi+0x68>)
   1d5b6:	4798      	blx	r3
   1d5b8:	0003      	movs	r3, r0
   1d5ba:	001a      	movs	r2, r3
   1d5bc:	2301      	movs	r3, #1
   1d5be:	4053      	eors	r3, r2
   1d5c0:	b2db      	uxtb	r3, r3
   1d5c2:	2b00      	cmp	r3, #0
   1d5c4:	d001      	beq.n	1d5ca <sd_mmc_cmd9_spi+0x4e>
		return false;
   1d5c6:	2300      	movs	r3, #0
   1d5c8:	e002      	b.n	1d5d0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1d5ca:	4b07      	ldr	r3, [pc, #28]	; (1d5e8 <sd_mmc_cmd9_spi+0x6c>)
   1d5cc:	4798      	blx	r3
   1d5ce:	0003      	movs	r3, r0
}
   1d5d0:	0018      	movs	r0, r3
   1d5d2:	46bd      	mov	sp, r7
   1d5d4:	b001      	add	sp, #4
   1d5d6:	bd90      	pop	{r4, r7, pc}
   1d5d8:	20004210 	.word	0x20004210
   1d5dc:	00081109 	.word	0x00081109
   1d5e0:	0001ece9 	.word	0x0001ece9
   1d5e4:	0001efb9 	.word	0x0001efb9
   1d5e8:	0001f05d 	.word	0x0001f05d

0001d5ec <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1d5ec:	b5b0      	push	{r4, r5, r7, lr}
   1d5ee:	b084      	sub	sp, #16
   1d5f0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1d5f2:	4b45      	ldr	r3, [pc, #276]	; (1d708 <mmc_decode_csd+0x11c>)
   1d5f4:	681b      	ldr	r3, [r3, #0]
   1d5f6:	330e      	adds	r3, #14
   1d5f8:	0018      	movs	r0, r3
   1d5fa:	2304      	movs	r3, #4
   1d5fc:	227a      	movs	r2, #122	; 0x7a
   1d5fe:	2180      	movs	r1, #128	; 0x80
   1d600:	4c42      	ldr	r4, [pc, #264]	; (1d70c <mmc_decode_csd+0x120>)
   1d602:	47a0      	blx	r4
   1d604:	0003      	movs	r3, r0
   1d606:	2b02      	cmp	r3, #2
   1d608:	d011      	beq.n	1d62e <mmc_decode_csd+0x42>
   1d60a:	d802      	bhi.n	1d612 <mmc_decode_csd+0x26>
   1d60c:	2b01      	cmp	r3, #1
   1d60e:	d009      	beq.n	1d624 <mmc_decode_csd+0x38>
   1d610:	e003      	b.n	1d61a <mmc_decode_csd+0x2e>
   1d612:	2b03      	cmp	r3, #3
   1d614:	d010      	beq.n	1d638 <mmc_decode_csd+0x4c>
   1d616:	2b04      	cmp	r3, #4
   1d618:	d013      	beq.n	1d642 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1d61a:	4b3b      	ldr	r3, [pc, #236]	; (1d708 <mmc_decode_csd+0x11c>)
   1d61c:	681b      	ldr	r3, [r3, #0]
   1d61e:	2212      	movs	r2, #18
   1d620:	731a      	strb	r2, [r3, #12]
		break;
   1d622:	e013      	b.n	1d64c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1d624:	4b38      	ldr	r3, [pc, #224]	; (1d708 <mmc_decode_csd+0x11c>)
   1d626:	681b      	ldr	r3, [r3, #0]
   1d628:	2214      	movs	r2, #20
   1d62a:	731a      	strb	r2, [r3, #12]
		break;
   1d62c:	e00e      	b.n	1d64c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1d62e:	4b36      	ldr	r3, [pc, #216]	; (1d708 <mmc_decode_csd+0x11c>)
   1d630:	681b      	ldr	r3, [r3, #0]
   1d632:	2222      	movs	r2, #34	; 0x22
   1d634:	731a      	strb	r2, [r3, #12]
		break;
   1d636:	e009      	b.n	1d64c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1d638:	4b33      	ldr	r3, [pc, #204]	; (1d708 <mmc_decode_csd+0x11c>)
   1d63a:	681b      	ldr	r3, [r3, #0]
   1d63c:	2230      	movs	r2, #48	; 0x30
   1d63e:	731a      	strb	r2, [r3, #12]
		break;
   1d640:	e004      	b.n	1d64c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1d642:	4b31      	ldr	r3, [pc, #196]	; (1d708 <mmc_decode_csd+0x11c>)
   1d644:	681b      	ldr	r3, [r3, #0]
   1d646:	2240      	movs	r2, #64	; 0x40
   1d648:	731a      	strb	r2, [r3, #12]
		break;
   1d64a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d64c:	4b2e      	ldr	r3, [pc, #184]	; (1d708 <mmc_decode_csd+0x11c>)
   1d64e:	681b      	ldr	r3, [r3, #0]
   1d650:	330e      	adds	r3, #14
   1d652:	0018      	movs	r0, r3
   1d654:	2308      	movs	r3, #8
   1d656:	2260      	movs	r2, #96	; 0x60
   1d658:	2180      	movs	r1, #128	; 0x80
   1d65a:	4c2c      	ldr	r4, [pc, #176]	; (1d70c <mmc_decode_csd+0x120>)
   1d65c:	47a0      	blx	r4
   1d65e:	0003      	movs	r3, r0
   1d660:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d662:	68fb      	ldr	r3, [r7, #12]
   1d664:	2207      	movs	r2, #7
   1d666:	401a      	ands	r2, r3
   1d668:	4b29      	ldr	r3, [pc, #164]	; (1d710 <mmc_decode_csd+0x124>)
   1d66a:	0092      	lsls	r2, r2, #2
   1d66c:	58d3      	ldr	r3, [r2, r3]
   1d66e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d670:	68fb      	ldr	r3, [r7, #12]
   1d672:	08db      	lsrs	r3, r3, #3
   1d674:	220f      	movs	r2, #15
   1d676:	401a      	ands	r2, r3
   1d678:	4b26      	ldr	r3, [pc, #152]	; (1d714 <mmc_decode_csd+0x128>)
   1d67a:	0092      	lsls	r2, r2, #2
   1d67c:	58d3      	ldr	r3, [r2, r3]
   1d67e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d680:	4b21      	ldr	r3, [pc, #132]	; (1d708 <mmc_decode_csd+0x11c>)
   1d682:	681b      	ldr	r3, [r3, #0]
   1d684:	68ba      	ldr	r2, [r7, #8]
   1d686:	6879      	ldr	r1, [r7, #4]
   1d688:	434a      	muls	r2, r1
   1d68a:	21fa      	movs	r1, #250	; 0xfa
   1d68c:	0089      	lsls	r1, r1, #2
   1d68e:	434a      	muls	r2, r1
   1d690:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1d692:	4b1d      	ldr	r3, [pc, #116]	; (1d708 <mmc_decode_csd+0x11c>)
   1d694:	681b      	ldr	r3, [r3, #0]
   1d696:	330e      	adds	r3, #14
   1d698:	0018      	movs	r0, r3
   1d69a:	230c      	movs	r3, #12
   1d69c:	223e      	movs	r2, #62	; 0x3e
   1d69e:	2180      	movs	r1, #128	; 0x80
   1d6a0:	4c1a      	ldr	r4, [pc, #104]	; (1d70c <mmc_decode_csd+0x120>)
   1d6a2:	47a0      	blx	r4
   1d6a4:	0002      	movs	r2, r0
   1d6a6:	4b1c      	ldr	r3, [pc, #112]	; (1d718 <mmc_decode_csd+0x12c>)
   1d6a8:	429a      	cmp	r2, r3
   1d6aa:	d028      	beq.n	1d6fe <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d6ac:	4b16      	ldr	r3, [pc, #88]	; (1d708 <mmc_decode_csd+0x11c>)
   1d6ae:	681b      	ldr	r3, [r3, #0]
   1d6b0:	330e      	adds	r3, #14
   1d6b2:	0018      	movs	r0, r3
   1d6b4:	230c      	movs	r3, #12
   1d6b6:	223e      	movs	r2, #62	; 0x3e
   1d6b8:	2180      	movs	r1, #128	; 0x80
   1d6ba:	4c14      	ldr	r4, [pc, #80]	; (1d70c <mmc_decode_csd+0x120>)
   1d6bc:	47a0      	blx	r4
   1d6be:	0003      	movs	r3, r0
   1d6c0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d6c2:	4b11      	ldr	r3, [pc, #68]	; (1d708 <mmc_decode_csd+0x11c>)
   1d6c4:	681b      	ldr	r3, [r3, #0]
   1d6c6:	330e      	adds	r3, #14
   1d6c8:	0018      	movs	r0, r3
   1d6ca:	2303      	movs	r3, #3
   1d6cc:	222f      	movs	r2, #47	; 0x2f
   1d6ce:	2180      	movs	r1, #128	; 0x80
   1d6d0:	4d0e      	ldr	r5, [pc, #56]	; (1d70c <mmc_decode_csd+0x120>)
   1d6d2:	47a8      	blx	r5
   1d6d4:	0003      	movs	r3, r0
   1d6d6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d6d8:	409c      	lsls	r4, r3
   1d6da:	0023      	movs	r3, r4
   1d6dc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d6de:	4b0a      	ldr	r3, [pc, #40]	; (1d708 <mmc_decode_csd+0x11c>)
   1d6e0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d6e2:	4b09      	ldr	r3, [pc, #36]	; (1d708 <mmc_decode_csd+0x11c>)
   1d6e4:	681b      	ldr	r3, [r3, #0]
   1d6e6:	330e      	adds	r3, #14
   1d6e8:	0018      	movs	r0, r3
   1d6ea:	2304      	movs	r3, #4
   1d6ec:	2250      	movs	r2, #80	; 0x50
   1d6ee:	2180      	movs	r1, #128	; 0x80
   1d6f0:	4d06      	ldr	r5, [pc, #24]	; (1d70c <mmc_decode_csd+0x120>)
   1d6f2:	47a8      	blx	r5
   1d6f4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d6f6:	683b      	ldr	r3, [r7, #0]
   1d6f8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d6fa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d6fc:	6063      	str	r3, [r4, #4]
	}
}
   1d6fe:	46c0      	nop			; (mov r8, r8)
   1d700:	46bd      	mov	sp, r7
   1d702:	b004      	add	sp, #16
   1d704:	bdb0      	pop	{r4, r5, r7, pc}
   1d706:	46c0      	nop			; (mov r8, r8)
   1d708:	20004210 	.word	0x20004210
   1d70c:	0001d0e9 	.word	0x0001d0e9
   1d710:	00037d54 	.word	0x00037d54
   1d714:	00037db0 	.word	0x00037db0
   1d718:	00000fff 	.word	0x00000fff

0001d71c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1d71c:	b5b0      	push	{r4, r5, r7, lr}
   1d71e:	b084      	sub	sp, #16
   1d720:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d722:	4b35      	ldr	r3, [pc, #212]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d724:	681b      	ldr	r3, [r3, #0]
   1d726:	330e      	adds	r3, #14
   1d728:	0018      	movs	r0, r3
   1d72a:	2308      	movs	r3, #8
   1d72c:	2260      	movs	r2, #96	; 0x60
   1d72e:	2180      	movs	r1, #128	; 0x80
   1d730:	4c32      	ldr	r4, [pc, #200]	; (1d7fc <sd_decode_csd+0xe0>)
   1d732:	47a0      	blx	r4
   1d734:	0003      	movs	r3, r0
   1d736:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d738:	68fb      	ldr	r3, [r7, #12]
   1d73a:	2207      	movs	r2, #7
   1d73c:	401a      	ands	r2, r3
   1d73e:	4b30      	ldr	r3, [pc, #192]	; (1d800 <sd_decode_csd+0xe4>)
   1d740:	0092      	lsls	r2, r2, #2
   1d742:	58d3      	ldr	r3, [r2, r3]
   1d744:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d746:	68fb      	ldr	r3, [r7, #12]
   1d748:	08db      	lsrs	r3, r3, #3
   1d74a:	220f      	movs	r2, #15
   1d74c:	401a      	ands	r2, r3
   1d74e:	4b2d      	ldr	r3, [pc, #180]	; (1d804 <sd_decode_csd+0xe8>)
   1d750:	0092      	lsls	r2, r2, #2
   1d752:	58d3      	ldr	r3, [r2, r3]
   1d754:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d756:	4b28      	ldr	r3, [pc, #160]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d758:	681b      	ldr	r3, [r3, #0]
   1d75a:	68ba      	ldr	r2, [r7, #8]
   1d75c:	6879      	ldr	r1, [r7, #4]
   1d75e:	434a      	muls	r2, r1
   1d760:	21fa      	movs	r1, #250	; 0xfa
   1d762:	0089      	lsls	r1, r1, #2
   1d764:	434a      	muls	r2, r1
   1d766:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1d768:	4b23      	ldr	r3, [pc, #140]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d76a:	681b      	ldr	r3, [r3, #0]
   1d76c:	330e      	adds	r3, #14
   1d76e:	0018      	movs	r0, r3
   1d770:	2302      	movs	r3, #2
   1d772:	227e      	movs	r2, #126	; 0x7e
   1d774:	2180      	movs	r1, #128	; 0x80
   1d776:	4c21      	ldr	r4, [pc, #132]	; (1d7fc <sd_decode_csd+0xe0>)
   1d778:	47a0      	blx	r4
   1d77a:	1e03      	subs	r3, r0, #0
   1d77c:	d00f      	beq.n	1d79e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1d77e:	4b1e      	ldr	r3, [pc, #120]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d780:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1d782:	4b1d      	ldr	r3, [pc, #116]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d784:	681b      	ldr	r3, [r3, #0]
   1d786:	330e      	adds	r3, #14
   1d788:	0018      	movs	r0, r3
   1d78a:	2316      	movs	r3, #22
   1d78c:	2230      	movs	r2, #48	; 0x30
   1d78e:	2180      	movs	r1, #128	; 0x80
   1d790:	4d1a      	ldr	r5, [pc, #104]	; (1d7fc <sd_decode_csd+0xe0>)
   1d792:	47a8      	blx	r5
   1d794:	0003      	movs	r3, r0
				* 512;
   1d796:	3301      	adds	r3, #1
   1d798:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1d79a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1d79c:	e028      	b.n	1d7f0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d79e:	4b16      	ldr	r3, [pc, #88]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d7a0:	681b      	ldr	r3, [r3, #0]
   1d7a2:	330e      	adds	r3, #14
   1d7a4:	0018      	movs	r0, r3
   1d7a6:	230c      	movs	r3, #12
   1d7a8:	223e      	movs	r2, #62	; 0x3e
   1d7aa:	2180      	movs	r1, #128	; 0x80
   1d7ac:	4c13      	ldr	r4, [pc, #76]	; (1d7fc <sd_decode_csd+0xe0>)
   1d7ae:	47a0      	blx	r4
   1d7b0:	0003      	movs	r3, r0
   1d7b2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d7b4:	4b10      	ldr	r3, [pc, #64]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d7b6:	681b      	ldr	r3, [r3, #0]
   1d7b8:	330e      	adds	r3, #14
   1d7ba:	0018      	movs	r0, r3
   1d7bc:	2303      	movs	r3, #3
   1d7be:	222f      	movs	r2, #47	; 0x2f
   1d7c0:	2180      	movs	r1, #128	; 0x80
   1d7c2:	4d0e      	ldr	r5, [pc, #56]	; (1d7fc <sd_decode_csd+0xe0>)
   1d7c4:	47a8      	blx	r5
   1d7c6:	0003      	movs	r3, r0
   1d7c8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d7ca:	409c      	lsls	r4, r3
   1d7cc:	0023      	movs	r3, r4
   1d7ce:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d7d0:	4b09      	ldr	r3, [pc, #36]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d7d2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1d7d4:	4b08      	ldr	r3, [pc, #32]	; (1d7f8 <sd_decode_csd+0xdc>)
   1d7d6:	681b      	ldr	r3, [r3, #0]
   1d7d8:	330e      	adds	r3, #14
   1d7da:	0018      	movs	r0, r3
   1d7dc:	2304      	movs	r3, #4
   1d7de:	2250      	movs	r2, #80	; 0x50
   1d7e0:	2180      	movs	r1, #128	; 0x80
   1d7e2:	4d06      	ldr	r5, [pc, #24]	; (1d7fc <sd_decode_csd+0xe0>)
   1d7e4:	47a8      	blx	r5
   1d7e6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d7e8:	683b      	ldr	r3, [r7, #0]
   1d7ea:	4093      	lsls	r3, r2
				/ 1024;
   1d7ec:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d7ee:	6063      	str	r3, [r4, #4]
}
   1d7f0:	46c0      	nop			; (mov r8, r8)
   1d7f2:	46bd      	mov	sp, r7
   1d7f4:	b004      	add	sp, #16
   1d7f6:	bdb0      	pop	{r4, r5, r7, pc}
   1d7f8:	20004210 	.word	0x20004210
   1d7fc:	0001d0e9 	.word	0x0001d0e9
   1d800:	00037d54 	.word	0x00037d54
   1d804:	00037d70 	.word	0x00037d70

0001d808 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1d808:	b580      	push	{r7, lr}
   1d80a:	b082      	sub	sp, #8
   1d80c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1d80e:	4b11      	ldr	r3, [pc, #68]	; (1d854 <sd_mmc_cmd13+0x4c>)
   1d810:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1d812:	4b11      	ldr	r3, [pc, #68]	; (1d858 <sd_mmc_cmd13+0x50>)
   1d814:	2100      	movs	r1, #0
   1d816:	0018      	movs	r0, r3
   1d818:	4b10      	ldr	r3, [pc, #64]	; (1d85c <sd_mmc_cmd13+0x54>)
   1d81a:	4798      	blx	r3
   1d81c:	0003      	movs	r3, r0
   1d81e:	001a      	movs	r2, r3
   1d820:	2301      	movs	r3, #1
   1d822:	4053      	eors	r3, r2
   1d824:	b2db      	uxtb	r3, r3
   1d826:	2b00      	cmp	r3, #0
   1d828:	d001      	beq.n	1d82e <sd_mmc_cmd13+0x26>
				return false;
   1d82a:	2300      	movs	r3, #0
   1d82c:	e00e      	b.n	1d84c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1d82e:	4b0c      	ldr	r3, [pc, #48]	; (1d860 <sd_mmc_cmd13+0x58>)
   1d830:	4798      	blx	r3
   1d832:	0002      	movs	r2, r0
   1d834:	23ff      	movs	r3, #255	; 0xff
   1d836:	4013      	ands	r3, r2
   1d838:	d006      	beq.n	1d848 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1d83a:	687b      	ldr	r3, [r7, #4]
   1d83c:	1e5a      	subs	r2, r3, #1
   1d83e:	607a      	str	r2, [r7, #4]
   1d840:	2b00      	cmp	r3, #0
   1d842:	d1e6      	bne.n	1d812 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1d844:	2300      	movs	r3, #0
   1d846:	e001      	b.n	1d84c <sd_mmc_cmd13+0x44>
				break;
   1d848:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1d84a:	2301      	movs	r3, #1
}
   1d84c:	0018      	movs	r0, r3
   1d84e:	46bd      	mov	sp, r7
   1d850:	b002      	add	sp, #8
   1d852:	bd80      	pop	{r7, pc}
   1d854:	00030d40 	.word	0x00030d40
   1d858:	00001b0d 	.word	0x00001b0d
   1d85c:	0001ecc1 	.word	0x0001ecc1
   1d860:	0001ef01 	.word	0x0001ef01

0001d864 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1d864:	b590      	push	{r4, r7, lr}
   1d866:	b085      	sub	sp, #20
   1d868:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1d86a:	4b38      	ldr	r3, [pc, #224]	; (1d94c <sd_acmd51+0xe8>)
   1d86c:	681b      	ldr	r3, [r3, #0]
   1d86e:	891b      	ldrh	r3, [r3, #8]
   1d870:	041b      	lsls	r3, r3, #16
   1d872:	4a37      	ldr	r2, [pc, #220]	; (1d950 <sd_acmd51+0xec>)
   1d874:	0019      	movs	r1, r3
   1d876:	0010      	movs	r0, r2
   1d878:	4b36      	ldr	r3, [pc, #216]	; (1d954 <sd_acmd51+0xf0>)
   1d87a:	4798      	blx	r3
   1d87c:	0003      	movs	r3, r0
   1d87e:	001a      	movs	r2, r3
   1d880:	2301      	movs	r3, #1
   1d882:	4053      	eors	r3, r2
   1d884:	b2db      	uxtb	r3, r3
   1d886:	2b00      	cmp	r3, #0
   1d888:	d001      	beq.n	1d88e <sd_acmd51+0x2a>
		return false;
   1d88a:	2300      	movs	r3, #0
   1d88c:	e059      	b.n	1d942 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1d88e:	4832      	ldr	r0, [pc, #200]	; (1d958 <sd_acmd51+0xf4>)
   1d890:	2301      	movs	r3, #1
   1d892:	9300      	str	r3, [sp, #0]
   1d894:	2301      	movs	r3, #1
   1d896:	2208      	movs	r2, #8
   1d898:	2100      	movs	r1, #0
   1d89a:	4c30      	ldr	r4, [pc, #192]	; (1d95c <sd_acmd51+0xf8>)
   1d89c:	47a0      	blx	r4
   1d89e:	0003      	movs	r3, r0
   1d8a0:	001a      	movs	r2, r3
   1d8a2:	2301      	movs	r3, #1
   1d8a4:	4053      	eors	r3, r2
   1d8a6:	b2db      	uxtb	r3, r3
   1d8a8:	2b00      	cmp	r3, #0
   1d8aa:	d001      	beq.n	1d8b0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1d8ac:	2300      	movs	r3, #0
   1d8ae:	e048      	b.n	1d942 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1d8b0:	003b      	movs	r3, r7
   1d8b2:	2101      	movs	r1, #1
   1d8b4:	0018      	movs	r0, r3
   1d8b6:	4b2a      	ldr	r3, [pc, #168]	; (1d960 <sd_acmd51+0xfc>)
   1d8b8:	4798      	blx	r3
   1d8ba:	0003      	movs	r3, r0
   1d8bc:	001a      	movs	r2, r3
   1d8be:	2301      	movs	r3, #1
   1d8c0:	4053      	eors	r3, r2
   1d8c2:	b2db      	uxtb	r3, r3
   1d8c4:	2b00      	cmp	r3, #0
   1d8c6:	d001      	beq.n	1d8cc <sd_acmd51+0x68>
		return false;
   1d8c8:	2300      	movs	r3, #0
   1d8ca:	e03a      	b.n	1d942 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1d8cc:	4b25      	ldr	r3, [pc, #148]	; (1d964 <sd_acmd51+0x100>)
   1d8ce:	4798      	blx	r3
   1d8d0:	0003      	movs	r3, r0
   1d8d2:	001a      	movs	r2, r3
   1d8d4:	2301      	movs	r3, #1
   1d8d6:	4053      	eors	r3, r2
   1d8d8:	b2db      	uxtb	r3, r3
   1d8da:	2b00      	cmp	r3, #0
   1d8dc:	d001      	beq.n	1d8e2 <sd_acmd51+0x7e>
		return false;
   1d8de:	2300      	movs	r3, #0
   1d8e0:	e02f      	b.n	1d942 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1d8e2:	0038      	movs	r0, r7
   1d8e4:	2304      	movs	r3, #4
   1d8e6:	2238      	movs	r2, #56	; 0x38
   1d8e8:	2140      	movs	r1, #64	; 0x40
   1d8ea:	4c1f      	ldr	r4, [pc, #124]	; (1d968 <sd_acmd51+0x104>)
   1d8ec:	47a0      	blx	r4
   1d8ee:	0003      	movs	r3, r0
   1d8f0:	2b01      	cmp	r3, #1
   1d8f2:	d008      	beq.n	1d906 <sd_acmd51+0xa2>
   1d8f4:	d302      	bcc.n	1d8fc <sd_acmd51+0x98>
   1d8f6:	2b02      	cmp	r3, #2
   1d8f8:	d00a      	beq.n	1d910 <sd_acmd51+0xac>
   1d8fa:	e01c      	b.n	1d936 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d8fc:	4b13      	ldr	r3, [pc, #76]	; (1d94c <sd_acmd51+0xe8>)
   1d8fe:	681b      	ldr	r3, [r3, #0]
   1d900:	2210      	movs	r2, #16
   1d902:	731a      	strb	r2, [r3, #12]
		break;
   1d904:	e01c      	b.n	1d940 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1d906:	4b11      	ldr	r3, [pc, #68]	; (1d94c <sd_acmd51+0xe8>)
   1d908:	681b      	ldr	r3, [r3, #0]
   1d90a:	221a      	movs	r2, #26
   1d90c:	731a      	strb	r2, [r3, #12]
		break;
   1d90e:	e017      	b.n	1d940 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1d910:	0038      	movs	r0, r7
   1d912:	2301      	movs	r3, #1
   1d914:	222f      	movs	r2, #47	; 0x2f
   1d916:	2140      	movs	r1, #64	; 0x40
   1d918:	4c13      	ldr	r4, [pc, #76]	; (1d968 <sd_acmd51+0x104>)
   1d91a:	47a0      	blx	r4
   1d91c:	0003      	movs	r3, r0
   1d91e:	2b01      	cmp	r3, #1
   1d920:	d104      	bne.n	1d92c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1d922:	4b0a      	ldr	r3, [pc, #40]	; (1d94c <sd_acmd51+0xe8>)
   1d924:	681b      	ldr	r3, [r3, #0]
   1d926:	2230      	movs	r2, #48	; 0x30
   1d928:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1d92a:	e009      	b.n	1d940 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1d92c:	4b07      	ldr	r3, [pc, #28]	; (1d94c <sd_acmd51+0xe8>)
   1d92e:	681b      	ldr	r3, [r3, #0]
   1d930:	2220      	movs	r2, #32
   1d932:	731a      	strb	r2, [r3, #12]
		break;
   1d934:	e004      	b.n	1d940 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d936:	4b05      	ldr	r3, [pc, #20]	; (1d94c <sd_acmd51+0xe8>)
   1d938:	681b      	ldr	r3, [r3, #0]
   1d93a:	2210      	movs	r2, #16
   1d93c:	731a      	strb	r2, [r3, #12]
		break;
   1d93e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d940:	2301      	movs	r3, #1
}
   1d942:	0018      	movs	r0, r3
   1d944:	46bd      	mov	sp, r7
   1d946:	b003      	add	sp, #12
   1d948:	bd90      	pop	{r4, r7, pc}
   1d94a:	46c0      	nop			; (mov r8, r8)
   1d94c:	20004210 	.word	0x20004210
   1d950:	00001137 	.word	0x00001137
   1d954:	0001ecc1 	.word	0x0001ecc1
   1d958:	00081133 	.word	0x00081133
   1d95c:	0001ece9 	.word	0x0001ece9
   1d960:	0001efb9 	.word	0x0001efb9
   1d964:	0001f05d 	.word	0x0001f05d
   1d968:	0001d0e9 	.word	0x0001d0e9

0001d96c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1d96c:	b580      	push	{r7, lr}
   1d96e:	b082      	sub	sp, #8
   1d970:	af00      	add	r7, sp, #0
   1d972:	0002      	movs	r2, r0
   1d974:	1dfb      	adds	r3, r7, #7
   1d976:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1d978:	1dfb      	adds	r3, r7, #7
   1d97a:	781b      	ldrb	r3, [r3, #0]
   1d97c:	2b00      	cmp	r3, #0
   1d97e:	d001      	beq.n	1d984 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1d980:	2304      	movs	r3, #4
   1d982:	e047      	b.n	1da14 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1d984:	1dfb      	adds	r3, r7, #7
   1d986:	781b      	ldrb	r3, [r3, #0]
   1d988:	4a24      	ldr	r2, [pc, #144]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d98a:	015b      	lsls	r3, r3, #5
   1d98c:	18d3      	adds	r3, r2, r3
   1d98e:	330a      	adds	r3, #10
   1d990:	781b      	ldrb	r3, [r3, #0]
   1d992:	2b04      	cmp	r3, #4
   1d994:	d008      	beq.n	1d9a8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1d996:	1dfb      	adds	r3, r7, #7
   1d998:	781b      	ldrb	r3, [r3, #0]
   1d99a:	4a20      	ldr	r2, [pc, #128]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d99c:	015b      	lsls	r3, r3, #5
   1d99e:	18d3      	adds	r3, r2, r3
   1d9a0:	330a      	adds	r3, #10
   1d9a2:	781b      	ldrb	r3, [r3, #0]
   1d9a4:	2b03      	cmp	r3, #3
   1d9a6:	d11d      	bne.n	1d9e4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1d9a8:	1dfb      	adds	r3, r7, #7
   1d9aa:	781b      	ldrb	r3, [r3, #0]
   1d9ac:	4a1b      	ldr	r2, [pc, #108]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d9ae:	015b      	lsls	r3, r3, #5
   1d9b0:	18d3      	adds	r3, r2, r3
   1d9b2:	330a      	adds	r3, #10
   1d9b4:	2202      	movs	r2, #2
   1d9b6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1d9b8:	1dfb      	adds	r3, r7, #7
   1d9ba:	781a      	ldrb	r2, [r3, #0]
   1d9bc:	4b17      	ldr	r3, [pc, #92]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d9be:	0152      	lsls	r2, r2, #5
   1d9c0:	4917      	ldr	r1, [pc, #92]	; (1da20 <sd_mmc_select_slot+0xb4>)
   1d9c2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1d9c4:	1dfb      	adds	r3, r7, #7
   1d9c6:	781b      	ldrb	r3, [r3, #0]
   1d9c8:	4a14      	ldr	r2, [pc, #80]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d9ca:	015b      	lsls	r3, r3, #5
   1d9cc:	18d3      	adds	r3, r2, r3
   1d9ce:	330d      	adds	r3, #13
   1d9d0:	2201      	movs	r2, #1
   1d9d2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1d9d4:	1dfb      	adds	r3, r7, #7
   1d9d6:	781b      	ldrb	r3, [r3, #0]
   1d9d8:	4a10      	ldr	r2, [pc, #64]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d9da:	015b      	lsls	r3, r3, #5
   1d9dc:	18d3      	adds	r3, r2, r3
   1d9de:	331e      	adds	r3, #30
   1d9e0:	2200      	movs	r2, #0
   1d9e2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1d9e4:	4b0f      	ldr	r3, [pc, #60]	; (1da24 <sd_mmc_select_slot+0xb8>)
   1d9e6:	1dfa      	adds	r2, r7, #7
   1d9e8:	7812      	ldrb	r2, [r2, #0]
   1d9ea:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1d9ec:	1dfb      	adds	r3, r7, #7
   1d9ee:	781b      	ldrb	r3, [r3, #0]
   1d9f0:	015a      	lsls	r2, r3, #5
   1d9f2:	4b0a      	ldr	r3, [pc, #40]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1d9f4:	18d2      	adds	r2, r2, r3
   1d9f6:	4b0c      	ldr	r3, [pc, #48]	; (1da28 <sd_mmc_select_slot+0xbc>)
   1d9f8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1d9fa:	4b0c      	ldr	r3, [pc, #48]	; (1da2c <sd_mmc_select_slot+0xc0>)
   1d9fc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1d9fe:	1dfb      	adds	r3, r7, #7
   1da00:	781b      	ldrb	r3, [r3, #0]
   1da02:	4a06      	ldr	r2, [pc, #24]	; (1da1c <sd_mmc_select_slot+0xb0>)
   1da04:	015b      	lsls	r3, r3, #5
   1da06:	18d3      	adds	r3, r2, r3
   1da08:	330a      	adds	r3, #10
   1da0a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1da0c:	3b02      	subs	r3, #2
   1da0e:	425a      	negs	r2, r3
   1da10:	4153      	adcs	r3, r2
   1da12:	b2db      	uxtb	r3, r3
}
   1da14:	0018      	movs	r0, r3
   1da16:	46bd      	mov	sp, r7
   1da18:	b002      	add	sp, #8
   1da1a:	bd80      	pop	{r7, pc}
   1da1c:	200041ec 	.word	0x200041ec
   1da20:	00061a80 	.word	0x00061a80
   1da24:	2000420c 	.word	0x2000420c
   1da28:	20004210 	.word	0x20004210
   1da2c:	0001da31 	.word	0x0001da31

0001da30 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1da30:	b5b0      	push	{r4, r5, r7, lr}
   1da32:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1da34:	4b09      	ldr	r3, [pc, #36]	; (1da5c <sd_mmc_configure_slot+0x2c>)
   1da36:	7818      	ldrb	r0, [r3, #0]
   1da38:	4b09      	ldr	r3, [pc, #36]	; (1da60 <sd_mmc_configure_slot+0x30>)
   1da3a:	681b      	ldr	r3, [r3, #0]
   1da3c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1da3e:	4b08      	ldr	r3, [pc, #32]	; (1da60 <sd_mmc_configure_slot+0x30>)
   1da40:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1da42:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1da44:	4b06      	ldr	r3, [pc, #24]	; (1da60 <sd_mmc_configure_slot+0x30>)
   1da46:	681b      	ldr	r3, [r3, #0]
   1da48:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1da4a:	1e5c      	subs	r4, r3, #1
   1da4c:	41a3      	sbcs	r3, r4
   1da4e:	b2db      	uxtb	r3, r3
   1da50:	4c04      	ldr	r4, [pc, #16]	; (1da64 <sd_mmc_configure_slot+0x34>)
   1da52:	47a0      	blx	r4
}
   1da54:	46c0      	nop			; (mov r8, r8)
   1da56:	46bd      	mov	sp, r7
   1da58:	bdb0      	pop	{r4, r5, r7, pc}
   1da5a:	46c0      	nop			; (mov r8, r8)
   1da5c:	2000420c 	.word	0x2000420c
   1da60:	20004210 	.word	0x20004210
   1da64:	0001eba9 	.word	0x0001eba9

0001da68 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1da68:	b580      	push	{r7, lr}
   1da6a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1da6c:	4b05      	ldr	r3, [pc, #20]	; (1da84 <sd_mmc_deselect_slot+0x1c>)
   1da6e:	781b      	ldrb	r3, [r3, #0]
   1da70:	2b00      	cmp	r3, #0
   1da72:	d104      	bne.n	1da7e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1da74:	4b03      	ldr	r3, [pc, #12]	; (1da84 <sd_mmc_deselect_slot+0x1c>)
   1da76:	781b      	ldrb	r3, [r3, #0]
   1da78:	0018      	movs	r0, r3
   1da7a:	4b03      	ldr	r3, [pc, #12]	; (1da88 <sd_mmc_deselect_slot+0x20>)
   1da7c:	4798      	blx	r3
	}
}
   1da7e:	46c0      	nop			; (mov r8, r8)
   1da80:	46bd      	mov	sp, r7
   1da82:	bd80      	pop	{r7, pc}
   1da84:	2000420c 	.word	0x2000420c
   1da88:	0001ec31 	.word	0x0001ec31

0001da8c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1da8c:	b580      	push	{r7, lr}
   1da8e:	b082      	sub	sp, #8
   1da90:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1da92:	1dfb      	adds	r3, r7, #7
   1da94:	2200      	movs	r2, #0
   1da96:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1da98:	4b59      	ldr	r3, [pc, #356]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1da9a:	681b      	ldr	r3, [r3, #0]
   1da9c:	2201      	movs	r2, #1
   1da9e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1daa0:	4b57      	ldr	r3, [pc, #348]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1daa2:	681b      	ldr	r3, [r3, #0]
   1daa4:	2200      	movs	r2, #0
   1daa6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1daa8:	4b55      	ldr	r3, [pc, #340]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1daaa:	681b      	ldr	r3, [r3, #0]
   1daac:	2200      	movs	r2, #0
   1daae:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1dab0:	4b54      	ldr	r3, [pc, #336]	; (1dc04 <sd_mmc_spi_card_init+0x178>)
   1dab2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1dab4:	2388      	movs	r3, #136	; 0x88
   1dab6:	015b      	lsls	r3, r3, #5
   1dab8:	2100      	movs	r1, #0
   1daba:	0018      	movs	r0, r3
   1dabc:	4b52      	ldr	r3, [pc, #328]	; (1dc08 <sd_mmc_spi_card_init+0x17c>)
   1dabe:	4798      	blx	r3
   1dac0:	0003      	movs	r3, r0
   1dac2:	001a      	movs	r2, r3
   1dac4:	2301      	movs	r3, #1
   1dac6:	4053      	eors	r3, r2
   1dac8:	b2db      	uxtb	r3, r3
   1daca:	2b00      	cmp	r3, #0
   1dacc:	d001      	beq.n	1dad2 <sd_mmc_spi_card_init+0x46>
		return false;
   1dace:	2300      	movs	r3, #0
   1dad0:	e092      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1dad2:	1dfb      	adds	r3, r7, #7
   1dad4:	0018      	movs	r0, r3
   1dad6:	4b4d      	ldr	r3, [pc, #308]	; (1dc0c <sd_mmc_spi_card_init+0x180>)
   1dad8:	4798      	blx	r3
   1dada:	0003      	movs	r3, r0
   1dadc:	001a      	movs	r2, r3
   1dade:	2301      	movs	r3, #1
   1dae0:	4053      	eors	r3, r2
   1dae2:	b2db      	uxtb	r3, r3
   1dae4:	2b00      	cmp	r3, #0
   1dae6:	d001      	beq.n	1daec <sd_mmc_spi_card_init+0x60>
		return false;
   1dae8:	2300      	movs	r3, #0
   1daea:	e085      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1daec:	4b48      	ldr	r3, [pc, #288]	; (1dc10 <sd_mmc_spi_card_init+0x184>)
   1daee:	4798      	blx	r3
   1daf0:	0003      	movs	r3, r0
   1daf2:	001a      	movs	r2, r3
   1daf4:	2301      	movs	r3, #1
   1daf6:	4053      	eors	r3, r2
   1daf8:	b2db      	uxtb	r3, r3
   1dafa:	2b00      	cmp	r3, #0
   1dafc:	d001      	beq.n	1db02 <sd_mmc_spi_card_init+0x76>
		return false;
   1dafe:	2300      	movs	r3, #0
   1db00:	e07a      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1db02:	4b3f      	ldr	r3, [pc, #252]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1db04:	681b      	ldr	r3, [r3, #0]
   1db06:	7adb      	ldrb	r3, [r3, #11]
   1db08:	001a      	movs	r2, r3
   1db0a:	2301      	movs	r3, #1
   1db0c:	4013      	ands	r3, r2
   1db0e:	d021      	beq.n	1db54 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1db10:	1dfb      	adds	r3, r7, #7
   1db12:	781b      	ldrb	r3, [r3, #0]
   1db14:	0018      	movs	r0, r3
   1db16:	4b3f      	ldr	r3, [pc, #252]	; (1dc14 <sd_mmc_spi_card_init+0x188>)
   1db18:	4798      	blx	r3
   1db1a:	0003      	movs	r3, r0
   1db1c:	001a      	movs	r2, r3
   1db1e:	2301      	movs	r3, #1
   1db20:	4053      	eors	r3, r2
   1db22:	b2db      	uxtb	r3, r3
   1db24:	2b00      	cmp	r3, #0
   1db26:	d007      	beq.n	1db38 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1db28:	4b35      	ldr	r3, [pc, #212]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1db2a:	681b      	ldr	r3, [r3, #0]
   1db2c:	2202      	movs	r2, #2
   1db2e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1db30:	4b39      	ldr	r3, [pc, #228]	; (1dc18 <sd_mmc_spi_card_init+0x18c>)
   1db32:	4798      	blx	r3
   1db34:	0003      	movs	r3, r0
   1db36:	e05f      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1db38:	4b38      	ldr	r3, [pc, #224]	; (1dc1c <sd_mmc_spi_card_init+0x190>)
   1db3a:	2100      	movs	r1, #0
   1db3c:	0018      	movs	r0, r3
   1db3e:	4b32      	ldr	r3, [pc, #200]	; (1dc08 <sd_mmc_spi_card_init+0x17c>)
   1db40:	4798      	blx	r3
   1db42:	0003      	movs	r3, r0
   1db44:	001a      	movs	r2, r3
   1db46:	2301      	movs	r3, #1
   1db48:	4053      	eors	r3, r2
   1db4a:	b2db      	uxtb	r3, r3
   1db4c:	2b00      	cmp	r3, #0
   1db4e:	d001      	beq.n	1db54 <sd_mmc_spi_card_init+0xc8>
			return false;
   1db50:	2300      	movs	r3, #0
   1db52:	e051      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1db54:	4b2a      	ldr	r3, [pc, #168]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1db56:	681b      	ldr	r3, [r3, #0]
   1db58:	7adb      	ldrb	r3, [r3, #11]
   1db5a:	001a      	movs	r2, r3
   1db5c:	2301      	movs	r3, #1
   1db5e:	4013      	ands	r3, r2
   1db60:	d017      	beq.n	1db92 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1db62:	4b2f      	ldr	r3, [pc, #188]	; (1dc20 <sd_mmc_spi_card_init+0x194>)
   1db64:	4798      	blx	r3
   1db66:	0003      	movs	r3, r0
   1db68:	001a      	movs	r2, r3
   1db6a:	2301      	movs	r3, #1
   1db6c:	4053      	eors	r3, r2
   1db6e:	b2db      	uxtb	r3, r3
   1db70:	2b00      	cmp	r3, #0
   1db72:	d001      	beq.n	1db78 <sd_mmc_spi_card_init+0xec>
			return false;
   1db74:	2300      	movs	r3, #0
   1db76:	e03f      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1db78:	4b2a      	ldr	r3, [pc, #168]	; (1dc24 <sd_mmc_spi_card_init+0x198>)
   1db7a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1db7c:	4b2a      	ldr	r3, [pc, #168]	; (1dc28 <sd_mmc_spi_card_init+0x19c>)
   1db7e:	4798      	blx	r3
   1db80:	0003      	movs	r3, r0
   1db82:	001a      	movs	r2, r3
   1db84:	2301      	movs	r3, #1
   1db86:	4053      	eors	r3, r2
   1db88:	b2db      	uxtb	r3, r3
   1db8a:	2b00      	cmp	r3, #0
   1db8c:	d001      	beq.n	1db92 <sd_mmc_spi_card_init+0x106>
			return false;
   1db8e:	2300      	movs	r3, #0
   1db90:	e032      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1db92:	4b1b      	ldr	r3, [pc, #108]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1db94:	681b      	ldr	r3, [r3, #0]
   1db96:	7adb      	ldrb	r3, [r3, #11]
   1db98:	001a      	movs	r2, r3
   1db9a:	2301      	movs	r3, #1
   1db9c:	4013      	ands	r3, r2
   1db9e:	d016      	beq.n	1dbce <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1dba0:	4b17      	ldr	r3, [pc, #92]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1dba2:	681b      	ldr	r3, [r3, #0]
   1dba4:	7adb      	ldrb	r3, [r3, #11]
   1dba6:	001a      	movs	r2, r3
   1dba8:	2308      	movs	r3, #8
   1dbaa:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1dbac:	d10f      	bne.n	1dbce <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1dbae:	2380      	movs	r3, #128	; 0x80
   1dbb0:	009b      	lsls	r3, r3, #2
   1dbb2:	4a1e      	ldr	r2, [pc, #120]	; (1dc2c <sd_mmc_spi_card_init+0x1a0>)
   1dbb4:	0019      	movs	r1, r3
   1dbb6:	0010      	movs	r0, r2
   1dbb8:	4b13      	ldr	r3, [pc, #76]	; (1dc08 <sd_mmc_spi_card_init+0x17c>)
   1dbba:	4798      	blx	r3
   1dbbc:	0003      	movs	r3, r0
   1dbbe:	001a      	movs	r2, r3
   1dbc0:	2301      	movs	r3, #1
   1dbc2:	4053      	eors	r3, r2
   1dbc4:	b2db      	uxtb	r3, r3
   1dbc6:	2b00      	cmp	r3, #0
   1dbc8:	d001      	beq.n	1dbce <sd_mmc_spi_card_init+0x142>
			return false;
   1dbca:	2300      	movs	r3, #0
   1dbcc:	e014      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1dbce:	4b0c      	ldr	r3, [pc, #48]	; (1dc00 <sd_mmc_spi_card_init+0x174>)
   1dbd0:	681b      	ldr	r3, [r3, #0]
   1dbd2:	7adb      	ldrb	r3, [r3, #11]
   1dbd4:	001a      	movs	r2, r3
   1dbd6:	2301      	movs	r3, #1
   1dbd8:	4013      	ands	r3, r2
   1dbda:	d00a      	beq.n	1dbf2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1dbdc:	4b14      	ldr	r3, [pc, #80]	; (1dc30 <sd_mmc_spi_card_init+0x1a4>)
   1dbde:	4798      	blx	r3
   1dbe0:	0003      	movs	r3, r0
   1dbe2:	001a      	movs	r2, r3
   1dbe4:	2301      	movs	r3, #1
   1dbe6:	4053      	eors	r3, r2
   1dbe8:	b2db      	uxtb	r3, r3
   1dbea:	2b00      	cmp	r3, #0
   1dbec:	d001      	beq.n	1dbf2 <sd_mmc_spi_card_init+0x166>
			return false;
   1dbee:	2300      	movs	r3, #0
   1dbf0:	e002      	b.n	1dbf8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1dbf2:	4b10      	ldr	r3, [pc, #64]	; (1dc34 <sd_mmc_spi_card_init+0x1a8>)
   1dbf4:	4798      	blx	r3
	return true;
   1dbf6:	2301      	movs	r3, #1
}
   1dbf8:	0018      	movs	r0, r3
   1dbfa:	46bd      	mov	sp, r7
   1dbfc:	b002      	add	sp, #8
   1dbfe:	bd80      	pop	{r7, pc}
   1dc00:	20004210 	.word	0x20004210
   1dc04:	0001ec75 	.word	0x0001ec75
   1dc08:	0001ecc1 	.word	0x0001ecc1
   1dc0c:	0001d3e1 	.word	0x0001d3e1
   1dc10:	0001d3d5 	.word	0x0001d3d5
   1dc14:	0001d2f1 	.word	0x0001d2f1
   1dc18:	0001dc39 	.word	0x0001dc39
   1dc1c:	0000113b 	.word	0x0000113b
   1dc20:	0001d57d 	.word	0x0001d57d
   1dc24:	0001d71d 	.word	0x0001d71d
   1dc28:	0001d865 	.word	0x0001d865
   1dc2c:	00001110 	.word	0x00001110
   1dc30:	0001d809 	.word	0x0001d809
   1dc34:	0001da31 	.word	0x0001da31

0001dc38 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1dc38:	b580      	push	{r7, lr}
   1dc3a:	b082      	sub	sp, #8
   1dc3c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1dc3e:	2388      	movs	r3, #136	; 0x88
   1dc40:	015b      	lsls	r3, r3, #5
   1dc42:	2100      	movs	r1, #0
   1dc44:	0018      	movs	r0, r3
   1dc46:	4b32      	ldr	r3, [pc, #200]	; (1dd10 <sd_mmc_spi_install_mmc+0xd8>)
   1dc48:	4798      	blx	r3
   1dc4a:	0003      	movs	r3, r0
   1dc4c:	001a      	movs	r2, r3
   1dc4e:	2301      	movs	r3, #1
   1dc50:	4053      	eors	r3, r2
   1dc52:	b2db      	uxtb	r3, r3
   1dc54:	2b00      	cmp	r3, #0
   1dc56:	d001      	beq.n	1dc5c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1dc58:	2300      	movs	r3, #0
   1dc5a:	e055      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1dc5c:	4b2d      	ldr	r3, [pc, #180]	; (1dd14 <sd_mmc_spi_install_mmc+0xdc>)
   1dc5e:	4798      	blx	r3
   1dc60:	0003      	movs	r3, r0
   1dc62:	001a      	movs	r2, r3
   1dc64:	2301      	movs	r3, #1
   1dc66:	4053      	eors	r3, r2
   1dc68:	b2db      	uxtb	r3, r3
   1dc6a:	2b00      	cmp	r3, #0
   1dc6c:	d001      	beq.n	1dc72 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1dc6e:	2300      	movs	r3, #0
   1dc70:	e04a      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1dc72:	4b29      	ldr	r3, [pc, #164]	; (1dd18 <sd_mmc_spi_install_mmc+0xe0>)
   1dc74:	2100      	movs	r1, #0
   1dc76:	0018      	movs	r0, r3
   1dc78:	4b25      	ldr	r3, [pc, #148]	; (1dd10 <sd_mmc_spi_install_mmc+0xd8>)
   1dc7a:	4798      	blx	r3
   1dc7c:	0003      	movs	r3, r0
   1dc7e:	001a      	movs	r2, r3
   1dc80:	2301      	movs	r3, #1
   1dc82:	4053      	eors	r3, r2
   1dc84:	b2db      	uxtb	r3, r3
   1dc86:	2b00      	cmp	r3, #0
   1dc88:	d001      	beq.n	1dc8e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1dc8a:	2300      	movs	r3, #0
   1dc8c:	e03c      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1dc8e:	4b23      	ldr	r3, [pc, #140]	; (1dd1c <sd_mmc_spi_install_mmc+0xe4>)
   1dc90:	4798      	blx	r3
   1dc92:	0003      	movs	r3, r0
   1dc94:	001a      	movs	r2, r3
   1dc96:	2301      	movs	r3, #1
   1dc98:	4053      	eors	r3, r2
   1dc9a:	b2db      	uxtb	r3, r3
   1dc9c:	2b00      	cmp	r3, #0
   1dc9e:	d001      	beq.n	1dca4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1dca0:	2300      	movs	r3, #0
   1dca2:	e031      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1dca4:	4b1e      	ldr	r3, [pc, #120]	; (1dd20 <sd_mmc_spi_install_mmc+0xe8>)
   1dca6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1dca8:	4b1e      	ldr	r3, [pc, #120]	; (1dd24 <sd_mmc_spi_install_mmc+0xec>)
   1dcaa:	681b      	ldr	r3, [r3, #0]
   1dcac:	7b1b      	ldrb	r3, [r3, #12]
   1dcae:	2b3f      	cmp	r3, #63	; 0x3f
   1dcb0:	d90c      	bls.n	1dccc <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1dcb2:	1dfb      	adds	r3, r7, #7
   1dcb4:	0018      	movs	r0, r3
   1dcb6:	4b1c      	ldr	r3, [pc, #112]	; (1dd28 <sd_mmc_spi_install_mmc+0xf0>)
   1dcb8:	4798      	blx	r3
   1dcba:	0003      	movs	r3, r0
   1dcbc:	001a      	movs	r2, r3
   1dcbe:	2301      	movs	r3, #1
   1dcc0:	4053      	eors	r3, r2
   1dcc2:	b2db      	uxtb	r3, r3
   1dcc4:	2b00      	cmp	r3, #0
   1dcc6:	d001      	beq.n	1dccc <sd_mmc_spi_install_mmc+0x94>
			return false;
   1dcc8:	2300      	movs	r3, #0
   1dcca:	e01d      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1dccc:	2380      	movs	r3, #128	; 0x80
   1dcce:	009b      	lsls	r3, r3, #2
   1dcd0:	4a16      	ldr	r2, [pc, #88]	; (1dd2c <sd_mmc_spi_install_mmc+0xf4>)
   1dcd2:	0019      	movs	r1, r3
   1dcd4:	0010      	movs	r0, r2
   1dcd6:	4b0e      	ldr	r3, [pc, #56]	; (1dd10 <sd_mmc_spi_install_mmc+0xd8>)
   1dcd8:	4798      	blx	r3
   1dcda:	0003      	movs	r3, r0
   1dcdc:	001a      	movs	r2, r3
   1dcde:	2301      	movs	r3, #1
   1dce0:	4053      	eors	r3, r2
   1dce2:	b2db      	uxtb	r3, r3
   1dce4:	2b00      	cmp	r3, #0
   1dce6:	d001      	beq.n	1dcec <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1dce8:	2300      	movs	r3, #0
   1dcea:	e00d      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1dcec:	4b10      	ldr	r3, [pc, #64]	; (1dd30 <sd_mmc_spi_install_mmc+0xf8>)
   1dcee:	4798      	blx	r3
   1dcf0:	0003      	movs	r3, r0
   1dcf2:	001a      	movs	r2, r3
   1dcf4:	2301      	movs	r3, #1
   1dcf6:	4053      	eors	r3, r2
   1dcf8:	b2db      	uxtb	r3, r3
   1dcfa:	2b00      	cmp	r3, #0
   1dcfc:	d001      	beq.n	1dd02 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1dcfe:	2300      	movs	r3, #0
   1dd00:	e002      	b.n	1dd08 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1dd02:	4b0c      	ldr	r3, [pc, #48]	; (1dd34 <sd_mmc_spi_install_mmc+0xfc>)
   1dd04:	4798      	blx	r3
	return true;
   1dd06:	2301      	movs	r3, #1
}
   1dd08:	0018      	movs	r0, r3
   1dd0a:	46bd      	mov	sp, r7
   1dd0c:	b002      	add	sp, #8
   1dd0e:	bd80      	pop	{r7, pc}
   1dd10:	0001ecc1 	.word	0x0001ecc1
   1dd14:	0001d245 	.word	0x0001d245
   1dd18:	0000113b 	.word	0x0000113b
   1dd1c:	0001d57d 	.word	0x0001d57d
   1dd20:	0001d5ed 	.word	0x0001d5ed
   1dd24:	20004210 	.word	0x20004210
   1dd28:	0001d451 	.word	0x0001d451
   1dd2c:	00001110 	.word	0x00001110
   1dd30:	0001d809 	.word	0x0001d809
   1dd34:	0001da31 	.word	0x0001da31

0001dd38 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1dd38:	b580      	push	{r7, lr}
   1dd3a:	b082      	sub	sp, #8
   1dd3c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1dd3e:	1dfb      	adds	r3, r7, #7
   1dd40:	2200      	movs	r2, #0
   1dd42:	701a      	strb	r2, [r3, #0]
   1dd44:	e00c      	b.n	1dd60 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1dd46:	1dfb      	adds	r3, r7, #7
   1dd48:	781b      	ldrb	r3, [r3, #0]
   1dd4a:	4a0c      	ldr	r2, [pc, #48]	; (1dd7c <sd_mmc_init+0x44>)
   1dd4c:	015b      	lsls	r3, r3, #5
   1dd4e:	18d3      	adds	r3, r2, r3
   1dd50:	330a      	adds	r3, #10
   1dd52:	2204      	movs	r2, #4
   1dd54:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1dd56:	1dfb      	adds	r3, r7, #7
   1dd58:	781a      	ldrb	r2, [r3, #0]
   1dd5a:	1dfb      	adds	r3, r7, #7
   1dd5c:	3201      	adds	r2, #1
   1dd5e:	701a      	strb	r2, [r3, #0]
   1dd60:	1dfb      	adds	r3, r7, #7
   1dd62:	781b      	ldrb	r3, [r3, #0]
   1dd64:	2b00      	cmp	r3, #0
   1dd66:	d0ee      	beq.n	1dd46 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1dd68:	4b05      	ldr	r3, [pc, #20]	; (1dd80 <sd_mmc_init+0x48>)
   1dd6a:	22ff      	movs	r2, #255	; 0xff
   1dd6c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1dd6e:	4b05      	ldr	r3, [pc, #20]	; (1dd84 <sd_mmc_init+0x4c>)
   1dd70:	4798      	blx	r3
}
   1dd72:	46c0      	nop			; (mov r8, r8)
   1dd74:	46bd      	mov	sp, r7
   1dd76:	b002      	add	sp, #8
   1dd78:	bd80      	pop	{r7, pc}
   1dd7a:	46c0      	nop			; (mov r8, r8)
   1dd7c:	200041ec 	.word	0x200041ec
   1dd80:	2000420c 	.word	0x2000420c
   1dd84:	0001eae1 	.word	0x0001eae1

0001dd88 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1dd88:	b590      	push	{r4, r7, lr}
   1dd8a:	b085      	sub	sp, #20
   1dd8c:	af00      	add	r7, sp, #0
   1dd8e:	0002      	movs	r2, r0
   1dd90:	1dfb      	adds	r3, r7, #7
   1dd92:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1dd94:	230f      	movs	r3, #15
   1dd96:	18fc      	adds	r4, r7, r3
   1dd98:	1dfb      	adds	r3, r7, #7
   1dd9a:	781b      	ldrb	r3, [r3, #0]
   1dd9c:	0018      	movs	r0, r3
   1dd9e:	4b13      	ldr	r3, [pc, #76]	; (1ddec <sd_mmc_check+0x64>)
   1dda0:	4798      	blx	r3
   1dda2:	0003      	movs	r3, r0
   1dda4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1dda6:	230f      	movs	r3, #15
   1dda8:	18fb      	adds	r3, r7, r3
   1ddaa:	781b      	ldrb	r3, [r3, #0]
   1ddac:	2b01      	cmp	r3, #1
   1ddae:	d005      	beq.n	1ddbc <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ddb0:	4b0f      	ldr	r3, [pc, #60]	; (1ddf0 <sd_mmc_check+0x68>)
   1ddb2:	4798      	blx	r3
		return sd_mmc_err;
   1ddb4:	230f      	movs	r3, #15
   1ddb6:	18fb      	adds	r3, r7, r3
   1ddb8:	781b      	ldrb	r3, [r3, #0]
   1ddba:	e012      	b.n	1dde2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ddbc:	4b0d      	ldr	r3, [pc, #52]	; (1ddf4 <sd_mmc_check+0x6c>)
   1ddbe:	4798      	blx	r3
   1ddc0:	1e03      	subs	r3, r0, #0
   1ddc2:	d007      	beq.n	1ddd4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1ddc4:	4b0c      	ldr	r3, [pc, #48]	; (1ddf8 <sd_mmc_check+0x70>)
   1ddc6:	681b      	ldr	r3, [r3, #0]
   1ddc8:	2200      	movs	r2, #0
   1ddca:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1ddcc:	4b08      	ldr	r3, [pc, #32]	; (1ddf0 <sd_mmc_check+0x68>)
   1ddce:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1ddd0:	2301      	movs	r3, #1
   1ddd2:	e006      	b.n	1dde2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1ddd4:	4b08      	ldr	r3, [pc, #32]	; (1ddf8 <sd_mmc_check+0x70>)
   1ddd6:	681b      	ldr	r3, [r3, #0]
   1ddd8:	2203      	movs	r2, #3
   1ddda:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1dddc:	4b04      	ldr	r3, [pc, #16]	; (1ddf0 <sd_mmc_check+0x68>)
   1ddde:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1dde0:	2303      	movs	r3, #3
}
   1dde2:	0018      	movs	r0, r3
   1dde4:	46bd      	mov	sp, r7
   1dde6:	b005      	add	sp, #20
   1dde8:	bd90      	pop	{r4, r7, pc}
   1ddea:	46c0      	nop			; (mov r8, r8)
   1ddec:	0001d96d 	.word	0x0001d96d
   1ddf0:	0001da69 	.word	0x0001da69
   1ddf4:	0001da8d 	.word	0x0001da8d
   1ddf8:	20004210 	.word	0x20004210

0001ddfc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1ddfc:	b580      	push	{r7, lr}
   1ddfe:	b082      	sub	sp, #8
   1de00:	af00      	add	r7, sp, #0
   1de02:	0002      	movs	r2, r0
   1de04:	1dfb      	adds	r3, r7, #7
   1de06:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1de08:	1dfb      	adds	r3, r7, #7
   1de0a:	781b      	ldrb	r3, [r3, #0]
   1de0c:	0018      	movs	r0, r3
   1de0e:	4b07      	ldr	r3, [pc, #28]	; (1de2c <sd_mmc_get_type+0x30>)
   1de10:	4798      	blx	r3
   1de12:	1e03      	subs	r3, r0, #0
   1de14:	d001      	beq.n	1de1a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1de16:	2300      	movs	r3, #0
   1de18:	e004      	b.n	1de24 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1de1a:	4b05      	ldr	r3, [pc, #20]	; (1de30 <sd_mmc_get_type+0x34>)
   1de1c:	4798      	blx	r3
	return sd_mmc_card->type;
   1de1e:	4b05      	ldr	r3, [pc, #20]	; (1de34 <sd_mmc_get_type+0x38>)
   1de20:	681b      	ldr	r3, [r3, #0]
   1de22:	7adb      	ldrb	r3, [r3, #11]
}
   1de24:	0018      	movs	r0, r3
   1de26:	46bd      	mov	sp, r7
   1de28:	b002      	add	sp, #8
   1de2a:	bd80      	pop	{r7, pc}
   1de2c:	0001d96d 	.word	0x0001d96d
   1de30:	0001da69 	.word	0x0001da69
   1de34:	20004210 	.word	0x20004210

0001de38 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1de38:	b580      	push	{r7, lr}
   1de3a:	b082      	sub	sp, #8
   1de3c:	af00      	add	r7, sp, #0
   1de3e:	0002      	movs	r2, r0
   1de40:	1dfb      	adds	r3, r7, #7
   1de42:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1de44:	1dfb      	adds	r3, r7, #7
   1de46:	781b      	ldrb	r3, [r3, #0]
   1de48:	0018      	movs	r0, r3
   1de4a:	4b07      	ldr	r3, [pc, #28]	; (1de68 <sd_mmc_get_capacity+0x30>)
   1de4c:	4798      	blx	r3
   1de4e:	1e03      	subs	r3, r0, #0
   1de50:	d001      	beq.n	1de56 <sd_mmc_get_capacity+0x1e>
		return 0;
   1de52:	2300      	movs	r3, #0
   1de54:	e004      	b.n	1de60 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1de56:	4b05      	ldr	r3, [pc, #20]	; (1de6c <sd_mmc_get_capacity+0x34>)
   1de58:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1de5a:	4b05      	ldr	r3, [pc, #20]	; (1de70 <sd_mmc_get_capacity+0x38>)
   1de5c:	681b      	ldr	r3, [r3, #0]
   1de5e:	685b      	ldr	r3, [r3, #4]
}
   1de60:	0018      	movs	r0, r3
   1de62:	46bd      	mov	sp, r7
   1de64:	b002      	add	sp, #8
   1de66:	bd80      	pop	{r7, pc}
   1de68:	0001d96d 	.word	0x0001d96d
   1de6c:	0001da69 	.word	0x0001da69
   1de70:	20004210 	.word	0x20004210

0001de74 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1de74:	b580      	push	{r7, lr}
   1de76:	b082      	sub	sp, #8
   1de78:	af00      	add	r7, sp, #0
   1de7a:	0002      	movs	r2, r0
   1de7c:	1dfb      	adds	r3, r7, #7
   1de7e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1de80:	2300      	movs	r3, #0
}
   1de82:	0018      	movs	r0, r3
   1de84:	46bd      	mov	sp, r7
   1de86:	b002      	add	sp, #8
   1de88:	bd80      	pop	{r7, pc}
	...

0001de8c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1de8c:	b590      	push	{r4, r7, lr}
   1de8e:	b089      	sub	sp, #36	; 0x24
   1de90:	af02      	add	r7, sp, #8
   1de92:	6039      	str	r1, [r7, #0]
   1de94:	0011      	movs	r1, r2
   1de96:	1dfb      	adds	r3, r7, #7
   1de98:	1c02      	adds	r2, r0, #0
   1de9a:	701a      	strb	r2, [r3, #0]
   1de9c:	1d3b      	adds	r3, r7, #4
   1de9e:	1c0a      	adds	r2, r1, #0
   1dea0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1dea2:	230f      	movs	r3, #15
   1dea4:	18fc      	adds	r4, r7, r3
   1dea6:	1dfb      	adds	r3, r7, #7
   1dea8:	781b      	ldrb	r3, [r3, #0]
   1deaa:	0018      	movs	r0, r3
   1deac:	4b29      	ldr	r3, [pc, #164]	; (1df54 <sd_mmc_init_read_blocks+0xc8>)
   1deae:	4798      	blx	r3
   1deb0:	0003      	movs	r3, r0
   1deb2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1deb4:	230f      	movs	r3, #15
   1deb6:	18fb      	adds	r3, r7, r3
   1deb8:	781b      	ldrb	r3, [r3, #0]
   1deba:	2b00      	cmp	r3, #0
   1debc:	d003      	beq.n	1dec6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1debe:	230f      	movs	r3, #15
   1dec0:	18fb      	adds	r3, r7, r3
   1dec2:	781b      	ldrb	r3, [r3, #0]
   1dec4:	e041      	b.n	1df4a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1dec6:	4b24      	ldr	r3, [pc, #144]	; (1df58 <sd_mmc_init_read_blocks+0xcc>)
   1dec8:	4798      	blx	r3
   1deca:	0003      	movs	r3, r0
   1decc:	001a      	movs	r2, r3
   1dece:	2301      	movs	r3, #1
   1ded0:	4053      	eors	r3, r2
   1ded2:	b2db      	uxtb	r3, r3
   1ded4:	2b00      	cmp	r3, #0
   1ded6:	d003      	beq.n	1dee0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1ded8:	4b20      	ldr	r3, [pc, #128]	; (1df5c <sd_mmc_init_read_blocks+0xd0>)
   1deda:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1dedc:	2305      	movs	r3, #5
   1dede:	e034      	b.n	1df4a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1dee0:	1d3b      	adds	r3, r7, #4
   1dee2:	881b      	ldrh	r3, [r3, #0]
   1dee4:	2b01      	cmp	r3, #1
   1dee6:	d902      	bls.n	1deee <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1dee8:	4b1d      	ldr	r3, [pc, #116]	; (1df60 <sd_mmc_init_read_blocks+0xd4>)
   1deea:	617b      	str	r3, [r7, #20]
   1deec:	e001      	b.n	1def2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1deee:	4b1d      	ldr	r3, [pc, #116]	; (1df64 <sd_mmc_init_read_blocks+0xd8>)
   1def0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1def2:	4b1d      	ldr	r3, [pc, #116]	; (1df68 <sd_mmc_init_read_blocks+0xdc>)
   1def4:	681b      	ldr	r3, [r3, #0]
   1def6:	7adb      	ldrb	r3, [r3, #11]
   1def8:	001a      	movs	r2, r3
   1defa:	2308      	movs	r3, #8
   1defc:	4013      	ands	r3, r2
   1defe:	d002      	beq.n	1df06 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1df00:	683b      	ldr	r3, [r7, #0]
   1df02:	613b      	str	r3, [r7, #16]
   1df04:	e002      	b.n	1df0c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1df06:	683b      	ldr	r3, [r7, #0]
   1df08:	025b      	lsls	r3, r3, #9
   1df0a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1df0c:	1d3b      	adds	r3, r7, #4
   1df0e:	881c      	ldrh	r4, [r3, #0]
   1df10:	2380      	movs	r3, #128	; 0x80
   1df12:	009a      	lsls	r2, r3, #2
   1df14:	6939      	ldr	r1, [r7, #16]
   1df16:	6978      	ldr	r0, [r7, #20]
   1df18:	2301      	movs	r3, #1
   1df1a:	9300      	str	r3, [sp, #0]
   1df1c:	0023      	movs	r3, r4
   1df1e:	4c13      	ldr	r4, [pc, #76]	; (1df6c <sd_mmc_init_read_blocks+0xe0>)
   1df20:	47a0      	blx	r4
   1df22:	0003      	movs	r3, r0
   1df24:	001a      	movs	r2, r3
   1df26:	2301      	movs	r3, #1
   1df28:	4053      	eors	r3, r2
   1df2a:	b2db      	uxtb	r3, r3
   1df2c:	2b00      	cmp	r3, #0
   1df2e:	d003      	beq.n	1df38 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1df30:	4b0a      	ldr	r3, [pc, #40]	; (1df5c <sd_mmc_init_read_blocks+0xd0>)
   1df32:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1df34:	2305      	movs	r3, #5
   1df36:	e008      	b.n	1df4a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1df38:	4b0d      	ldr	r3, [pc, #52]	; (1df70 <sd_mmc_init_read_blocks+0xe4>)
   1df3a:	1d3a      	adds	r2, r7, #4
   1df3c:	8812      	ldrh	r2, [r2, #0]
   1df3e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1df40:	4b0c      	ldr	r3, [pc, #48]	; (1df74 <sd_mmc_init_read_blocks+0xe8>)
   1df42:	1d3a      	adds	r2, r7, #4
   1df44:	8812      	ldrh	r2, [r2, #0]
   1df46:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1df48:	2300      	movs	r3, #0
}
   1df4a:	0018      	movs	r0, r3
   1df4c:	46bd      	mov	sp, r7
   1df4e:	b007      	add	sp, #28
   1df50:	bd90      	pop	{r4, r7, pc}
   1df52:	46c0      	nop			; (mov r8, r8)
   1df54:	0001d96d 	.word	0x0001d96d
   1df58:	0001d809 	.word	0x0001d809
   1df5c:	0001da69 	.word	0x0001da69
   1df60:	00101112 	.word	0x00101112
   1df64:	00081111 	.word	0x00081111
   1df68:	20004210 	.word	0x20004210
   1df6c:	0001ece9 	.word	0x0001ece9
   1df70:	20004216 	.word	0x20004216
   1df74:	20004214 	.word	0x20004214

0001df78 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1df78:	b580      	push	{r7, lr}
   1df7a:	b082      	sub	sp, #8
   1df7c:	af00      	add	r7, sp, #0
   1df7e:	6078      	str	r0, [r7, #4]
   1df80:	000a      	movs	r2, r1
   1df82:	1cbb      	adds	r3, r7, #2
   1df84:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1df86:	1cbb      	adds	r3, r7, #2
   1df88:	881a      	ldrh	r2, [r3, #0]
   1df8a:	687b      	ldr	r3, [r7, #4]
   1df8c:	0011      	movs	r1, r2
   1df8e:	0018      	movs	r0, r3
   1df90:	4b0d      	ldr	r3, [pc, #52]	; (1dfc8 <sd_mmc_start_read_blocks+0x50>)
   1df92:	4798      	blx	r3
   1df94:	0003      	movs	r3, r0
   1df96:	001a      	movs	r2, r3
   1df98:	2301      	movs	r3, #1
   1df9a:	4053      	eors	r3, r2
   1df9c:	b2db      	uxtb	r3, r3
   1df9e:	2b00      	cmp	r3, #0
   1dfa0:	d004      	beq.n	1dfac <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1dfa2:	4b0a      	ldr	r3, [pc, #40]	; (1dfcc <sd_mmc_start_read_blocks+0x54>)
   1dfa4:	2200      	movs	r2, #0
   1dfa6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1dfa8:	2305      	movs	r3, #5
   1dfaa:	e008      	b.n	1dfbe <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1dfac:	4b07      	ldr	r3, [pc, #28]	; (1dfcc <sd_mmc_start_read_blocks+0x54>)
   1dfae:	881a      	ldrh	r2, [r3, #0]
   1dfb0:	1cbb      	adds	r3, r7, #2
   1dfb2:	881b      	ldrh	r3, [r3, #0]
   1dfb4:	1ad3      	subs	r3, r2, r3
   1dfb6:	b29a      	uxth	r2, r3
   1dfb8:	4b04      	ldr	r3, [pc, #16]	; (1dfcc <sd_mmc_start_read_blocks+0x54>)
   1dfba:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1dfbc:	2300      	movs	r3, #0
}
   1dfbe:	0018      	movs	r0, r3
   1dfc0:	46bd      	mov	sp, r7
   1dfc2:	b002      	add	sp, #8
   1dfc4:	bd80      	pop	{r7, pc}
   1dfc6:	46c0      	nop			; (mov r8, r8)
   1dfc8:	0001efb9 	.word	0x0001efb9
   1dfcc:	20004216 	.word	0x20004216

0001dfd0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1dfd0:	b580      	push	{r7, lr}
   1dfd2:	b082      	sub	sp, #8
   1dfd4:	af00      	add	r7, sp, #0
   1dfd6:	0002      	movs	r2, r0
   1dfd8:	1dfb      	adds	r3, r7, #7
   1dfda:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1dfdc:	4b1c      	ldr	r3, [pc, #112]	; (1e050 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1dfde:	4798      	blx	r3
   1dfe0:	0003      	movs	r3, r0
   1dfe2:	001a      	movs	r2, r3
   1dfe4:	2301      	movs	r3, #1
   1dfe6:	4053      	eors	r3, r2
   1dfe8:	b2db      	uxtb	r3, r3
   1dfea:	2b00      	cmp	r3, #0
   1dfec:	d001      	beq.n	1dff2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1dfee:	2305      	movs	r3, #5
   1dff0:	e029      	b.n	1e046 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1dff2:	1dfb      	adds	r3, r7, #7
   1dff4:	781b      	ldrb	r3, [r3, #0]
   1dff6:	2b00      	cmp	r3, #0
   1dff8:	d003      	beq.n	1e002 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1dffa:	4b16      	ldr	r3, [pc, #88]	; (1e054 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1dffc:	2200      	movs	r2, #0
   1dffe:	801a      	strh	r2, [r3, #0]
   1e000:	e005      	b.n	1e00e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e002:	4b14      	ldr	r3, [pc, #80]	; (1e054 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e004:	881b      	ldrh	r3, [r3, #0]
   1e006:	2b00      	cmp	r3, #0
   1e008:	d001      	beq.n	1e00e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1e00a:	2300      	movs	r3, #0
   1e00c:	e01b      	b.n	1e046 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e00e:	4b12      	ldr	r3, [pc, #72]	; (1e058 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1e010:	881b      	ldrh	r3, [r3, #0]
   1e012:	2b01      	cmp	r3, #1
   1e014:	d103      	bne.n	1e01e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e016:	4b11      	ldr	r3, [pc, #68]	; (1e05c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e018:	4798      	blx	r3
		return SD_MMC_OK;
   1e01a:	2300      	movs	r3, #0
   1e01c:	e013      	b.n	1e046 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1e01e:	4b10      	ldr	r3, [pc, #64]	; (1e060 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e020:	2100      	movs	r1, #0
   1e022:	0018      	movs	r0, r3
   1e024:	4b0f      	ldr	r3, [pc, #60]	; (1e064 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e026:	4798      	blx	r3
   1e028:	0003      	movs	r3, r0
   1e02a:	001a      	movs	r2, r3
   1e02c:	2301      	movs	r3, #1
   1e02e:	4053      	eors	r3, r2
   1e030:	b2db      	uxtb	r3, r3
   1e032:	2b00      	cmp	r3, #0
   1e034:	d004      	beq.n	1e040 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1e036:	4b0a      	ldr	r3, [pc, #40]	; (1e060 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e038:	2100      	movs	r1, #0
   1e03a:	0018      	movs	r0, r3
   1e03c:	4b09      	ldr	r3, [pc, #36]	; (1e064 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e03e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1e040:	4b06      	ldr	r3, [pc, #24]	; (1e05c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e042:	4798      	blx	r3
	return SD_MMC_OK;
   1e044:	2300      	movs	r3, #0
}
   1e046:	0018      	movs	r0, r3
   1e048:	46bd      	mov	sp, r7
   1e04a:	b002      	add	sp, #8
   1e04c:	bd80      	pop	{r7, pc}
   1e04e:	46c0      	nop			; (mov r8, r8)
   1e050:	0001f05d 	.word	0x0001f05d
   1e054:	20004216 	.word	0x20004216
   1e058:	20004214 	.word	0x20004214
   1e05c:	0001da69 	.word	0x0001da69
   1e060:	0000310c 	.word	0x0000310c
   1e064:	0001ecc1 	.word	0x0001ecc1

0001e068 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e068:	b590      	push	{r4, r7, lr}
   1e06a:	b089      	sub	sp, #36	; 0x24
   1e06c:	af02      	add	r7, sp, #8
   1e06e:	6039      	str	r1, [r7, #0]
   1e070:	0011      	movs	r1, r2
   1e072:	1dfb      	adds	r3, r7, #7
   1e074:	1c02      	adds	r2, r0, #0
   1e076:	701a      	strb	r2, [r3, #0]
   1e078:	1d3b      	adds	r3, r7, #4
   1e07a:	1c0a      	adds	r2, r1, #0
   1e07c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e07e:	230f      	movs	r3, #15
   1e080:	18fc      	adds	r4, r7, r3
   1e082:	1dfb      	adds	r3, r7, #7
   1e084:	781b      	ldrb	r3, [r3, #0]
   1e086:	0018      	movs	r0, r3
   1e088:	4b28      	ldr	r3, [pc, #160]	; (1e12c <sd_mmc_init_write_blocks+0xc4>)
   1e08a:	4798      	blx	r3
   1e08c:	0003      	movs	r3, r0
   1e08e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e090:	230f      	movs	r3, #15
   1e092:	18fb      	adds	r3, r7, r3
   1e094:	781b      	ldrb	r3, [r3, #0]
   1e096:	2b00      	cmp	r3, #0
   1e098:	d003      	beq.n	1e0a2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e09a:	230f      	movs	r3, #15
   1e09c:	18fb      	adds	r3, r7, r3
   1e09e:	781b      	ldrb	r3, [r3, #0]
   1e0a0:	e03f      	b.n	1e122 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e0a2:	1dfb      	adds	r3, r7, #7
   1e0a4:	781b      	ldrb	r3, [r3, #0]
   1e0a6:	0018      	movs	r0, r3
   1e0a8:	4b21      	ldr	r3, [pc, #132]	; (1e130 <sd_mmc_init_write_blocks+0xc8>)
   1e0aa:	4798      	blx	r3
   1e0ac:	1e03      	subs	r3, r0, #0
   1e0ae:	d003      	beq.n	1e0b8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e0b0:	4b20      	ldr	r3, [pc, #128]	; (1e134 <sd_mmc_init_write_blocks+0xcc>)
   1e0b2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e0b4:	2307      	movs	r3, #7
   1e0b6:	e034      	b.n	1e122 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e0b8:	1d3b      	adds	r3, r7, #4
   1e0ba:	881b      	ldrh	r3, [r3, #0]
   1e0bc:	2b01      	cmp	r3, #1
   1e0be:	d902      	bls.n	1e0c6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e0c0:	4b1d      	ldr	r3, [pc, #116]	; (1e138 <sd_mmc_init_write_blocks+0xd0>)
   1e0c2:	617b      	str	r3, [r7, #20]
   1e0c4:	e001      	b.n	1e0ca <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e0c6:	4b1d      	ldr	r3, [pc, #116]	; (1e13c <sd_mmc_init_write_blocks+0xd4>)
   1e0c8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e0ca:	4b1d      	ldr	r3, [pc, #116]	; (1e140 <sd_mmc_init_write_blocks+0xd8>)
   1e0cc:	681b      	ldr	r3, [r3, #0]
   1e0ce:	7adb      	ldrb	r3, [r3, #11]
   1e0d0:	001a      	movs	r2, r3
   1e0d2:	2308      	movs	r3, #8
   1e0d4:	4013      	ands	r3, r2
   1e0d6:	d002      	beq.n	1e0de <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1e0d8:	683b      	ldr	r3, [r7, #0]
   1e0da:	613b      	str	r3, [r7, #16]
   1e0dc:	e002      	b.n	1e0e4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e0de:	683b      	ldr	r3, [r7, #0]
   1e0e0:	025b      	lsls	r3, r3, #9
   1e0e2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e0e4:	1d3b      	adds	r3, r7, #4
   1e0e6:	881c      	ldrh	r4, [r3, #0]
   1e0e8:	2380      	movs	r3, #128	; 0x80
   1e0ea:	009a      	lsls	r2, r3, #2
   1e0ec:	6939      	ldr	r1, [r7, #16]
   1e0ee:	6978      	ldr	r0, [r7, #20]
   1e0f0:	2301      	movs	r3, #1
   1e0f2:	9300      	str	r3, [sp, #0]
   1e0f4:	0023      	movs	r3, r4
   1e0f6:	4c13      	ldr	r4, [pc, #76]	; (1e144 <sd_mmc_init_write_blocks+0xdc>)
   1e0f8:	47a0      	blx	r4
   1e0fa:	0003      	movs	r3, r0
   1e0fc:	001a      	movs	r2, r3
   1e0fe:	2301      	movs	r3, #1
   1e100:	4053      	eors	r3, r2
   1e102:	b2db      	uxtb	r3, r3
   1e104:	2b00      	cmp	r3, #0
   1e106:	d003      	beq.n	1e110 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1e108:	4b0a      	ldr	r3, [pc, #40]	; (1e134 <sd_mmc_init_write_blocks+0xcc>)
   1e10a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e10c:	2305      	movs	r3, #5
   1e10e:	e008      	b.n	1e122 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e110:	4b0d      	ldr	r3, [pc, #52]	; (1e148 <sd_mmc_init_write_blocks+0xe0>)
   1e112:	1d3a      	adds	r2, r7, #4
   1e114:	8812      	ldrh	r2, [r2, #0]
   1e116:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e118:	4b0c      	ldr	r3, [pc, #48]	; (1e14c <sd_mmc_init_write_blocks+0xe4>)
   1e11a:	1d3a      	adds	r2, r7, #4
   1e11c:	8812      	ldrh	r2, [r2, #0]
   1e11e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e120:	2300      	movs	r3, #0
}
   1e122:	0018      	movs	r0, r3
   1e124:	46bd      	mov	sp, r7
   1e126:	b007      	add	sp, #28
   1e128:	bd90      	pop	{r4, r7, pc}
   1e12a:	46c0      	nop			; (mov r8, r8)
   1e12c:	0001d96d 	.word	0x0001d96d
   1e130:	0001de75 	.word	0x0001de75
   1e134:	0001da69 	.word	0x0001da69
   1e138:	00109119 	.word	0x00109119
   1e13c:	00089118 	.word	0x00089118
   1e140:	20004210 	.word	0x20004210
   1e144:	0001ece9 	.word	0x0001ece9
   1e148:	20004216 	.word	0x20004216
   1e14c:	20004214 	.word	0x20004214

0001e150 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e150:	b580      	push	{r7, lr}
   1e152:	b082      	sub	sp, #8
   1e154:	af00      	add	r7, sp, #0
   1e156:	6078      	str	r0, [r7, #4]
   1e158:	000a      	movs	r2, r1
   1e15a:	1cbb      	adds	r3, r7, #2
   1e15c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1e15e:	1cbb      	adds	r3, r7, #2
   1e160:	881a      	ldrh	r2, [r3, #0]
   1e162:	687b      	ldr	r3, [r7, #4]
   1e164:	0011      	movs	r1, r2
   1e166:	0018      	movs	r0, r3
   1e168:	4b0d      	ldr	r3, [pc, #52]	; (1e1a0 <sd_mmc_start_write_blocks+0x50>)
   1e16a:	4798      	blx	r3
   1e16c:	0003      	movs	r3, r0
   1e16e:	001a      	movs	r2, r3
   1e170:	2301      	movs	r3, #1
   1e172:	4053      	eors	r3, r2
   1e174:	b2db      	uxtb	r3, r3
   1e176:	2b00      	cmp	r3, #0
   1e178:	d004      	beq.n	1e184 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e17a:	4b0a      	ldr	r3, [pc, #40]	; (1e1a4 <sd_mmc_start_write_blocks+0x54>)
   1e17c:	2200      	movs	r2, #0
   1e17e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e180:	2305      	movs	r3, #5
   1e182:	e008      	b.n	1e196 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e184:	4b07      	ldr	r3, [pc, #28]	; (1e1a4 <sd_mmc_start_write_blocks+0x54>)
   1e186:	881a      	ldrh	r2, [r3, #0]
   1e188:	1cbb      	adds	r3, r7, #2
   1e18a:	881b      	ldrh	r3, [r3, #0]
   1e18c:	1ad3      	subs	r3, r2, r3
   1e18e:	b29a      	uxth	r2, r3
   1e190:	4b04      	ldr	r3, [pc, #16]	; (1e1a4 <sd_mmc_start_write_blocks+0x54>)
   1e192:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e194:	2300      	movs	r3, #0
}
   1e196:	0018      	movs	r0, r3
   1e198:	46bd      	mov	sp, r7
   1e19a:	b002      	add	sp, #8
   1e19c:	bd80      	pop	{r7, pc}
   1e19e:	46c0      	nop			; (mov r8, r8)
   1e1a0:	0001f069 	.word	0x0001f069
   1e1a4:	20004216 	.word	0x20004216

0001e1a8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1e1a8:	b580      	push	{r7, lr}
   1e1aa:	b082      	sub	sp, #8
   1e1ac:	af00      	add	r7, sp, #0
   1e1ae:	0002      	movs	r2, r0
   1e1b0:	1dfb      	adds	r3, r7, #7
   1e1b2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1e1b4:	4b13      	ldr	r3, [pc, #76]	; (1e204 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1e1b6:	4798      	blx	r3
   1e1b8:	0003      	movs	r3, r0
   1e1ba:	001a      	movs	r2, r3
   1e1bc:	2301      	movs	r3, #1
   1e1be:	4053      	eors	r3, r2
   1e1c0:	b2db      	uxtb	r3, r3
   1e1c2:	2b00      	cmp	r3, #0
   1e1c4:	d001      	beq.n	1e1ca <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e1c6:	2305      	movs	r3, #5
   1e1c8:	e018      	b.n	1e1fc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1e1ca:	1dfb      	adds	r3, r7, #7
   1e1cc:	781b      	ldrb	r3, [r3, #0]
   1e1ce:	2b00      	cmp	r3, #0
   1e1d0:	d003      	beq.n	1e1da <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e1d2:	4b0d      	ldr	r3, [pc, #52]	; (1e208 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e1d4:	2200      	movs	r2, #0
   1e1d6:	801a      	strh	r2, [r3, #0]
   1e1d8:	e005      	b.n	1e1e6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e1da:	4b0b      	ldr	r3, [pc, #44]	; (1e208 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e1dc:	881b      	ldrh	r3, [r3, #0]
   1e1de:	2b00      	cmp	r3, #0
   1e1e0:	d001      	beq.n	1e1e6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1e1e2:	2300      	movs	r3, #0
   1e1e4:	e00a      	b.n	1e1fc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e1e6:	4b09      	ldr	r3, [pc, #36]	; (1e20c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1e1e8:	881b      	ldrh	r3, [r3, #0]
   1e1ea:	2b01      	cmp	r3, #1
   1e1ec:	d103      	bne.n	1e1f6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e1ee:	4b08      	ldr	r3, [pc, #32]	; (1e210 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e1f0:	4798      	blx	r3
		return SD_MMC_OK;
   1e1f2:	2300      	movs	r3, #0
   1e1f4:	e002      	b.n	1e1fc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1e1f6:	4b06      	ldr	r3, [pc, #24]	; (1e210 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e1f8:	4798      	blx	r3
	return SD_MMC_OK;
   1e1fa:	2300      	movs	r3, #0
}
   1e1fc:	0018      	movs	r0, r3
   1e1fe:	46bd      	mov	sp, r7
   1e200:	b002      	add	sp, #8
   1e202:	bd80      	pop	{r7, pc}
   1e204:	0001f129 	.word	0x0001f129
   1e208:	20004216 	.word	0x20004216
   1e20c:	20004214 	.word	0x20004214
   1e210:	0001da69 	.word	0x0001da69

0001e214 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1e214:	b580      	push	{r7, lr}
   1e216:	b082      	sub	sp, #8
   1e218:	af00      	add	r7, sp, #0
   1e21a:	0002      	movs	r2, r0
   1e21c:	1dfb      	adds	r3, r7, #7
   1e21e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1e220:	1dfb      	adds	r3, r7, #7
   1e222:	781b      	ldrb	r3, [r3, #0]
   1e224:	0018      	movs	r0, r3
   1e226:	4b16      	ldr	r3, [pc, #88]	; (1e280 <sd_mmc_test_unit_ready+0x6c>)
   1e228:	4798      	blx	r3
   1e22a:	0003      	movs	r3, r0
   1e22c:	2b01      	cmp	r3, #1
   1e22e:	d019      	beq.n	1e264 <sd_mmc_test_unit_ready+0x50>
   1e230:	2b02      	cmp	r3, #2
   1e232:	d019      	beq.n	1e268 <sd_mmc_test_unit_ready+0x54>
   1e234:	2b00      	cmp	r3, #0
   1e236:	d11e      	bne.n	1e276 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1e238:	1dfb      	adds	r3, r7, #7
   1e23a:	781b      	ldrb	r3, [r3, #0]
   1e23c:	4a11      	ldr	r2, [pc, #68]	; (1e284 <sd_mmc_test_unit_ready+0x70>)
   1e23e:	5cd3      	ldrb	r3, [r2, r3]
   1e240:	2b00      	cmp	r3, #0
   1e242:	d001      	beq.n	1e248 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1e244:	2302      	movs	r3, #2
   1e246:	e017      	b.n	1e278 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1e248:	1dfb      	adds	r3, r7, #7
   1e24a:	781b      	ldrb	r3, [r3, #0]
   1e24c:	0018      	movs	r0, r3
   1e24e:	4b0e      	ldr	r3, [pc, #56]	; (1e288 <sd_mmc_test_unit_ready+0x74>)
   1e250:	4798      	blx	r3
   1e252:	0003      	movs	r3, r0
   1e254:	001a      	movs	r2, r3
   1e256:	2303      	movs	r3, #3
   1e258:	4013      	ands	r3, r2
   1e25a:	d001      	beq.n	1e260 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1e25c:	2300      	movs	r3, #0
   1e25e:	e00b      	b.n	1e278 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1e260:	2302      	movs	r3, #2
   1e262:	e009      	b.n	1e278 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1e264:	2303      	movs	r3, #3
   1e266:	e007      	b.n	1e278 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1e268:	1dfb      	adds	r3, r7, #7
   1e26a:	781b      	ldrb	r3, [r3, #0]
   1e26c:	4a05      	ldr	r2, [pc, #20]	; (1e284 <sd_mmc_test_unit_ready+0x70>)
   1e26e:	2100      	movs	r1, #0
   1e270:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1e272:	2302      	movs	r3, #2
   1e274:	e000      	b.n	1e278 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1e276:	2301      	movs	r3, #1
	}
}
   1e278:	0018      	movs	r0, r3
   1e27a:	46bd      	mov	sp, r7
   1e27c:	b002      	add	sp, #8
   1e27e:	bd80      	pop	{r7, pc}
   1e280:	0001dd89 	.word	0x0001dd89
   1e284:	20004218 	.word	0x20004218
   1e288:	0001ddfd 	.word	0x0001ddfd

0001e28c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1e28c:	b580      	push	{r7, lr}
   1e28e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1e290:	2000      	movs	r0, #0
   1e292:	4b03      	ldr	r3, [pc, #12]	; (1e2a0 <sd_mmc_test_unit_ready_0+0x14>)
   1e294:	4798      	blx	r3
   1e296:	0003      	movs	r3, r0
}
   1e298:	0018      	movs	r0, r3
   1e29a:	46bd      	mov	sp, r7
   1e29c:	bd80      	pop	{r7, pc}
   1e29e:	46c0      	nop			; (mov r8, r8)
   1e2a0:	0001e215 	.word	0x0001e215

0001e2a4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1e2a4:	b580      	push	{r7, lr}
   1e2a6:	b082      	sub	sp, #8
   1e2a8:	af00      	add	r7, sp, #0
   1e2aa:	0002      	movs	r2, r0
   1e2ac:	6039      	str	r1, [r7, #0]
   1e2ae:	1dfb      	adds	r3, r7, #7
   1e2b0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1e2b2:	1dfb      	adds	r3, r7, #7
   1e2b4:	781b      	ldrb	r3, [r3, #0]
   1e2b6:	0018      	movs	r0, r3
   1e2b8:	4b08      	ldr	r3, [pc, #32]	; (1e2dc <sd_mmc_read_capacity+0x38>)
   1e2ba:	4798      	blx	r3
   1e2bc:	0003      	movs	r3, r0
   1e2be:	005b      	lsls	r3, r3, #1
   1e2c0:	1e5a      	subs	r2, r3, #1
   1e2c2:	683b      	ldr	r3, [r7, #0]
   1e2c4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1e2c6:	1dfb      	adds	r3, r7, #7
   1e2c8:	781b      	ldrb	r3, [r3, #0]
   1e2ca:	0018      	movs	r0, r3
   1e2cc:	4b04      	ldr	r3, [pc, #16]	; (1e2e0 <sd_mmc_read_capacity+0x3c>)
   1e2ce:	4798      	blx	r3
   1e2d0:	0003      	movs	r3, r0
}
   1e2d2:	0018      	movs	r0, r3
   1e2d4:	46bd      	mov	sp, r7
   1e2d6:	b002      	add	sp, #8
   1e2d8:	bd80      	pop	{r7, pc}
   1e2da:	46c0      	nop			; (mov r8, r8)
   1e2dc:	0001de39 	.word	0x0001de39
   1e2e0:	0001e215 	.word	0x0001e215

0001e2e4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1e2e4:	b580      	push	{r7, lr}
   1e2e6:	b082      	sub	sp, #8
   1e2e8:	af00      	add	r7, sp, #0
   1e2ea:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1e2ec:	687b      	ldr	r3, [r7, #4]
   1e2ee:	0019      	movs	r1, r3
   1e2f0:	2000      	movs	r0, #0
   1e2f2:	4b03      	ldr	r3, [pc, #12]	; (1e300 <sd_mmc_read_capacity_0+0x1c>)
   1e2f4:	4798      	blx	r3
   1e2f6:	0003      	movs	r3, r0
}
   1e2f8:	0018      	movs	r0, r3
   1e2fa:	46bd      	mov	sp, r7
   1e2fc:	b002      	add	sp, #8
   1e2fe:	bd80      	pop	{r7, pc}
   1e300:	0001e2a5 	.word	0x0001e2a5

0001e304 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1e304:	b580      	push	{r7, lr}
   1e306:	b082      	sub	sp, #8
   1e308:	af00      	add	r7, sp, #0
   1e30a:	0002      	movs	r2, r0
   1e30c:	1dfb      	adds	r3, r7, #7
   1e30e:	701a      	strb	r2, [r3, #0]
   1e310:	1dbb      	adds	r3, r7, #6
   1e312:	1c0a      	adds	r2, r1, #0
   1e314:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1e316:	1dfb      	adds	r3, r7, #7
   1e318:	781b      	ldrb	r3, [r3, #0]
   1e31a:	4a04      	ldr	r2, [pc, #16]	; (1e32c <sd_mmc_unload+0x28>)
   1e31c:	1db9      	adds	r1, r7, #6
   1e31e:	7809      	ldrb	r1, [r1, #0]
   1e320:	54d1      	strb	r1, [r2, r3]
	return true;
   1e322:	2301      	movs	r3, #1
}
   1e324:	0018      	movs	r0, r3
   1e326:	46bd      	mov	sp, r7
   1e328:	b002      	add	sp, #8
   1e32a:	bd80      	pop	{r7, pc}
   1e32c:	20004218 	.word	0x20004218

0001e330 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1e330:	b580      	push	{r7, lr}
   1e332:	b082      	sub	sp, #8
   1e334:	af00      	add	r7, sp, #0
   1e336:	0002      	movs	r2, r0
   1e338:	1dfb      	adds	r3, r7, #7
   1e33a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1e33c:	1dfb      	adds	r3, r7, #7
   1e33e:	781b      	ldrb	r3, [r3, #0]
   1e340:	0019      	movs	r1, r3
   1e342:	2000      	movs	r0, #0
   1e344:	4b03      	ldr	r3, [pc, #12]	; (1e354 <sd_mmc_unload_0+0x24>)
   1e346:	4798      	blx	r3
   1e348:	0003      	movs	r3, r0
}
   1e34a:	0018      	movs	r0, r3
   1e34c:	46bd      	mov	sp, r7
   1e34e:	b002      	add	sp, #8
   1e350:	bd80      	pop	{r7, pc}
   1e352:	46c0      	nop			; (mov r8, r8)
   1e354:	0001e305 	.word	0x0001e305

0001e358 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1e358:	b580      	push	{r7, lr}
   1e35a:	b082      	sub	sp, #8
   1e35c:	af00      	add	r7, sp, #0
   1e35e:	0002      	movs	r2, r0
   1e360:	1dfb      	adds	r3, r7, #7
   1e362:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1e364:	1dfb      	adds	r3, r7, #7
   1e366:	781b      	ldrb	r3, [r3, #0]
   1e368:	0018      	movs	r0, r3
   1e36a:	4b03      	ldr	r3, [pc, #12]	; (1e378 <sd_mmc_wr_protect+0x20>)
   1e36c:	4798      	blx	r3
   1e36e:	0003      	movs	r3, r0
}
   1e370:	0018      	movs	r0, r3
   1e372:	46bd      	mov	sp, r7
   1e374:	b002      	add	sp, #8
   1e376:	bd80      	pop	{r7, pc}
   1e378:	0001de75 	.word	0x0001de75

0001e37c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1e37c:	b580      	push	{r7, lr}
   1e37e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1e380:	2000      	movs	r0, #0
   1e382:	4b03      	ldr	r3, [pc, #12]	; (1e390 <sd_mmc_wr_protect_0+0x14>)
   1e384:	4798      	blx	r3
   1e386:	0003      	movs	r3, r0
}
   1e388:	0018      	movs	r0, r3
   1e38a:	46bd      	mov	sp, r7
   1e38c:	bd80      	pop	{r7, pc}
   1e38e:	46c0      	nop			; (mov r8, r8)
   1e390:	0001e359 	.word	0x0001e359

0001e394 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1e394:	b580      	push	{r7, lr}
   1e396:	b082      	sub	sp, #8
   1e398:	af00      	add	r7, sp, #0
   1e39a:	0002      	movs	r2, r0
   1e39c:	1dfb      	adds	r3, r7, #7
   1e39e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1e3a0:	2301      	movs	r3, #1
}
   1e3a2:	0018      	movs	r0, r3
   1e3a4:	46bd      	mov	sp, r7
   1e3a6:	b002      	add	sp, #8
   1e3a8:	bd80      	pop	{r7, pc}
	...

0001e3ac <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1e3ac:	b580      	push	{r7, lr}
   1e3ae:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1e3b0:	2000      	movs	r0, #0
   1e3b2:	4b03      	ldr	r3, [pc, #12]	; (1e3c0 <sd_mmc_removal_0+0x14>)
   1e3b4:	4798      	blx	r3
   1e3b6:	0003      	movs	r3, r0
}
   1e3b8:	0018      	movs	r0, r3
   1e3ba:	46bd      	mov	sp, r7
   1e3bc:	bd80      	pop	{r7, pc}
   1e3be:	46c0      	nop			; (mov r8, r8)
   1e3c0:	0001e395 	.word	0x0001e395

0001e3c4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1e3c4:	b580      	push	{r7, lr}
   1e3c6:	b084      	sub	sp, #16
   1e3c8:	af00      	add	r7, sp, #0
   1e3ca:	60b9      	str	r1, [r7, #8]
   1e3cc:	607a      	str	r2, [r7, #4]
   1e3ce:	230f      	movs	r3, #15
   1e3d0:	18fb      	adds	r3, r7, r3
   1e3d2:	1c02      	adds	r2, r0, #0
   1e3d4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1e3d6:	68b9      	ldr	r1, [r7, #8]
   1e3d8:	230f      	movs	r3, #15
   1e3da:	18fb      	adds	r3, r7, r3
   1e3dc:	781b      	ldrb	r3, [r3, #0]
   1e3de:	2201      	movs	r2, #1
   1e3e0:	0018      	movs	r0, r3
   1e3e2:	4b10      	ldr	r3, [pc, #64]	; (1e424 <sd_mmc_mem_2_ram+0x60>)
   1e3e4:	4798      	blx	r3
   1e3e6:	1e03      	subs	r3, r0, #0
   1e3e8:	d005      	beq.n	1e3f6 <sd_mmc_mem_2_ram+0x32>
   1e3ea:	2b02      	cmp	r3, #2
   1e3ec:	d101      	bne.n	1e3f2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e3ee:	2302      	movs	r3, #2
   1e3f0:	e013      	b.n	1e41a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1e3f2:	2301      	movs	r3, #1
   1e3f4:	e011      	b.n	1e41a <sd_mmc_mem_2_ram+0x56>
		break;
   1e3f6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1e3f8:	687b      	ldr	r3, [r7, #4]
   1e3fa:	2101      	movs	r1, #1
   1e3fc:	0018      	movs	r0, r3
   1e3fe:	4b0a      	ldr	r3, [pc, #40]	; (1e428 <sd_mmc_mem_2_ram+0x64>)
   1e400:	4798      	blx	r3
   1e402:	1e03      	subs	r3, r0, #0
   1e404:	d001      	beq.n	1e40a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1e406:	2301      	movs	r3, #1
   1e408:	e007      	b.n	1e41a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1e40a:	2000      	movs	r0, #0
   1e40c:	4b07      	ldr	r3, [pc, #28]	; (1e42c <sd_mmc_mem_2_ram+0x68>)
   1e40e:	4798      	blx	r3
   1e410:	1e03      	subs	r3, r0, #0
   1e412:	d001      	beq.n	1e418 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1e414:	2301      	movs	r3, #1
   1e416:	e000      	b.n	1e41a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1e418:	2300      	movs	r3, #0
}
   1e41a:	0018      	movs	r0, r3
   1e41c:	46bd      	mov	sp, r7
   1e41e:	b004      	add	sp, #16
   1e420:	bd80      	pop	{r7, pc}
   1e422:	46c0      	nop			; (mov r8, r8)
   1e424:	0001de8d 	.word	0x0001de8d
   1e428:	0001df79 	.word	0x0001df79
   1e42c:	0001dfd1 	.word	0x0001dfd1

0001e430 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1e430:	b580      	push	{r7, lr}
   1e432:	b082      	sub	sp, #8
   1e434:	af00      	add	r7, sp, #0
   1e436:	6078      	str	r0, [r7, #4]
   1e438:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1e43a:	683a      	ldr	r2, [r7, #0]
   1e43c:	687b      	ldr	r3, [r7, #4]
   1e43e:	0019      	movs	r1, r3
   1e440:	2000      	movs	r0, #0
   1e442:	4b03      	ldr	r3, [pc, #12]	; (1e450 <sd_mmc_mem_2_ram_0+0x20>)
   1e444:	4798      	blx	r3
   1e446:	0003      	movs	r3, r0
}
   1e448:	0018      	movs	r0, r3
   1e44a:	46bd      	mov	sp, r7
   1e44c:	b002      	add	sp, #8
   1e44e:	bd80      	pop	{r7, pc}
   1e450:	0001e3c5 	.word	0x0001e3c5

0001e454 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1e454:	b580      	push	{r7, lr}
   1e456:	b084      	sub	sp, #16
   1e458:	af00      	add	r7, sp, #0
   1e45a:	60b9      	str	r1, [r7, #8]
   1e45c:	607a      	str	r2, [r7, #4]
   1e45e:	230f      	movs	r3, #15
   1e460:	18fb      	adds	r3, r7, r3
   1e462:	1c02      	adds	r2, r0, #0
   1e464:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1e466:	68b9      	ldr	r1, [r7, #8]
   1e468:	230f      	movs	r3, #15
   1e46a:	18fb      	adds	r3, r7, r3
   1e46c:	781b      	ldrb	r3, [r3, #0]
   1e46e:	2201      	movs	r2, #1
   1e470:	0018      	movs	r0, r3
   1e472:	4b10      	ldr	r3, [pc, #64]	; (1e4b4 <sd_mmc_ram_2_mem+0x60>)
   1e474:	4798      	blx	r3
   1e476:	1e03      	subs	r3, r0, #0
   1e478:	d005      	beq.n	1e486 <sd_mmc_ram_2_mem+0x32>
   1e47a:	2b02      	cmp	r3, #2
   1e47c:	d101      	bne.n	1e482 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e47e:	2302      	movs	r3, #2
   1e480:	e013      	b.n	1e4aa <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1e482:	2301      	movs	r3, #1
   1e484:	e011      	b.n	1e4aa <sd_mmc_ram_2_mem+0x56>
		break;
   1e486:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1e488:	687b      	ldr	r3, [r7, #4]
   1e48a:	2101      	movs	r1, #1
   1e48c:	0018      	movs	r0, r3
   1e48e:	4b0a      	ldr	r3, [pc, #40]	; (1e4b8 <sd_mmc_ram_2_mem+0x64>)
   1e490:	4798      	blx	r3
   1e492:	1e03      	subs	r3, r0, #0
   1e494:	d001      	beq.n	1e49a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1e496:	2301      	movs	r3, #1
   1e498:	e007      	b.n	1e4aa <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1e49a:	2000      	movs	r0, #0
   1e49c:	4b07      	ldr	r3, [pc, #28]	; (1e4bc <sd_mmc_ram_2_mem+0x68>)
   1e49e:	4798      	blx	r3
   1e4a0:	1e03      	subs	r3, r0, #0
   1e4a2:	d001      	beq.n	1e4a8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1e4a4:	2301      	movs	r3, #1
   1e4a6:	e000      	b.n	1e4aa <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1e4a8:	2300      	movs	r3, #0
}
   1e4aa:	0018      	movs	r0, r3
   1e4ac:	46bd      	mov	sp, r7
   1e4ae:	b004      	add	sp, #16
   1e4b0:	bd80      	pop	{r7, pc}
   1e4b2:	46c0      	nop			; (mov r8, r8)
   1e4b4:	0001e069 	.word	0x0001e069
   1e4b8:	0001e151 	.word	0x0001e151
   1e4bc:	0001e1a9 	.word	0x0001e1a9

0001e4c0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1e4c0:	b580      	push	{r7, lr}
   1e4c2:	b082      	sub	sp, #8
   1e4c4:	af00      	add	r7, sp, #0
   1e4c6:	6078      	str	r0, [r7, #4]
   1e4c8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1e4ca:	683a      	ldr	r2, [r7, #0]
   1e4cc:	687b      	ldr	r3, [r7, #4]
   1e4ce:	0019      	movs	r1, r3
   1e4d0:	2000      	movs	r0, #0
   1e4d2:	4b03      	ldr	r3, [pc, #12]	; (1e4e0 <sd_mmc_ram_2_mem_0+0x20>)
   1e4d4:	4798      	blx	r3
   1e4d6:	0003      	movs	r3, r0
}
   1e4d8:	0018      	movs	r0, r3
   1e4da:	46bd      	mov	sp, r7
   1e4dc:	b002      	add	sp, #8
   1e4de:	bd80      	pop	{r7, pc}
   1e4e0:	0001e455 	.word	0x0001e455

0001e4e4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1e4e4:	b580      	push	{r7, lr}
   1e4e6:	b084      	sub	sp, #16
   1e4e8:	af00      	add	r7, sp, #0
   1e4ea:	0002      	movs	r2, r0
   1e4ec:	1dfb      	adds	r3, r7, #7
   1e4ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e4f0:	230f      	movs	r3, #15
   1e4f2:	18fb      	adds	r3, r7, r3
   1e4f4:	1dfa      	adds	r2, r7, #7
   1e4f6:	7812      	ldrb	r2, [r2, #0]
   1e4f8:	09d2      	lsrs	r2, r2, #7
   1e4fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e4fc:	230e      	movs	r3, #14
   1e4fe:	18fb      	adds	r3, r7, r3
   1e500:	1dfa      	adds	r2, r7, #7
   1e502:	7812      	ldrb	r2, [r2, #0]
   1e504:	0952      	lsrs	r2, r2, #5
   1e506:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e508:	4b0d      	ldr	r3, [pc, #52]	; (1e540 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e50a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1e50c:	230f      	movs	r3, #15
   1e50e:	18fb      	adds	r3, r7, r3
   1e510:	781b      	ldrb	r3, [r3, #0]
   1e512:	2b00      	cmp	r3, #0
   1e514:	d10f      	bne.n	1e536 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e516:	230f      	movs	r3, #15
   1e518:	18fb      	adds	r3, r7, r3
   1e51a:	781b      	ldrb	r3, [r3, #0]
   1e51c:	009b      	lsls	r3, r3, #2
   1e51e:	2210      	movs	r2, #16
   1e520:	4694      	mov	ip, r2
   1e522:	44bc      	add	ip, r7
   1e524:	4463      	add	r3, ip
   1e526:	3b08      	subs	r3, #8
   1e528:	681a      	ldr	r2, [r3, #0]
   1e52a:	230e      	movs	r3, #14
   1e52c:	18fb      	adds	r3, r7, r3
   1e52e:	781b      	ldrb	r3, [r3, #0]
   1e530:	01db      	lsls	r3, r3, #7
   1e532:	18d3      	adds	r3, r2, r3
   1e534:	e000      	b.n	1e538 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1e536:	2300      	movs	r3, #0
	}
}
   1e538:	0018      	movs	r0, r3
   1e53a:	46bd      	mov	sp, r7
   1e53c:	b004      	add	sp, #16
   1e53e:	bd80      	pop	{r7, pc}
   1e540:	41004400 	.word	0x41004400

0001e544 <system_interrupt_enable>:
{
   1e544:	b580      	push	{r7, lr}
   1e546:	b082      	sub	sp, #8
   1e548:	af00      	add	r7, sp, #0
   1e54a:	0002      	movs	r2, r0
   1e54c:	1dfb      	adds	r3, r7, #7
   1e54e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e550:	4b06      	ldr	r3, [pc, #24]	; (1e56c <system_interrupt_enable+0x28>)
   1e552:	1dfa      	adds	r2, r7, #7
   1e554:	7812      	ldrb	r2, [r2, #0]
   1e556:	0011      	movs	r1, r2
   1e558:	221f      	movs	r2, #31
   1e55a:	400a      	ands	r2, r1
   1e55c:	2101      	movs	r1, #1
   1e55e:	4091      	lsls	r1, r2
   1e560:	000a      	movs	r2, r1
   1e562:	601a      	str	r2, [r3, #0]
}
   1e564:	46c0      	nop			; (mov r8, r8)
   1e566:	46bd      	mov	sp, r7
   1e568:	b002      	add	sp, #8
   1e56a:	bd80      	pop	{r7, pc}
   1e56c:	e000e100 	.word	0xe000e100

0001e570 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1e570:	b580      	push	{r7, lr}
   1e572:	b082      	sub	sp, #8
   1e574:	af00      	add	r7, sp, #0
   1e576:	0002      	movs	r2, r0
   1e578:	1dfb      	adds	r3, r7, #7
   1e57a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e57c:	1dfb      	adds	r3, r7, #7
   1e57e:	781b      	ldrb	r3, [r3, #0]
   1e580:	0018      	movs	r0, r3
   1e582:	4b03      	ldr	r3, [pc, #12]	; (1e590 <port_get_group_from_gpio_pin+0x20>)
   1e584:	4798      	blx	r3
   1e586:	0003      	movs	r3, r0
}
   1e588:	0018      	movs	r0, r3
   1e58a:	46bd      	mov	sp, r7
   1e58c:	b002      	add	sp, #8
   1e58e:	bd80      	pop	{r7, pc}
   1e590:	0001e4e5 	.word	0x0001e4e5

0001e594 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   1e594:	b580      	push	{r7, lr}
   1e596:	b082      	sub	sp, #8
   1e598:	af00      	add	r7, sp, #0
   1e59a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   1e59c:	687b      	ldr	r3, [r7, #4]
   1e59e:	2200      	movs	r2, #0
   1e5a0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e5a2:	687b      	ldr	r3, [r7, #4]
   1e5a4:	2201      	movs	r2, #1
   1e5a6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e5a8:	687b      	ldr	r3, [r7, #4]
   1e5aa:	2200      	movs	r2, #0
   1e5ac:	709a      	strb	r2, [r3, #2]
}
   1e5ae:	46c0      	nop			; (mov r8, r8)
   1e5b0:	46bd      	mov	sp, r7
   1e5b2:	b002      	add	sp, #8
   1e5b4:	bd80      	pop	{r7, pc}
	...

0001e5b8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1e5b8:	b580      	push	{r7, lr}
   1e5ba:	b084      	sub	sp, #16
   1e5bc:	af00      	add	r7, sp, #0
   1e5be:	0002      	movs	r2, r0
   1e5c0:	1dfb      	adds	r3, r7, #7
   1e5c2:	701a      	strb	r2, [r3, #0]
   1e5c4:	1dbb      	adds	r3, r7, #6
   1e5c6:	1c0a      	adds	r2, r1, #0
   1e5c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e5ca:	1dfb      	adds	r3, r7, #7
   1e5cc:	781b      	ldrb	r3, [r3, #0]
   1e5ce:	0018      	movs	r0, r3
   1e5d0:	4b0d      	ldr	r3, [pc, #52]	; (1e608 <port_pin_set_output_level+0x50>)
   1e5d2:	4798      	blx	r3
   1e5d4:	0003      	movs	r3, r0
   1e5d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e5d8:	1dfb      	adds	r3, r7, #7
   1e5da:	781b      	ldrb	r3, [r3, #0]
   1e5dc:	221f      	movs	r2, #31
   1e5de:	4013      	ands	r3, r2
   1e5e0:	2201      	movs	r2, #1
   1e5e2:	409a      	lsls	r2, r3
   1e5e4:	0013      	movs	r3, r2
   1e5e6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1e5e8:	1dbb      	adds	r3, r7, #6
   1e5ea:	781b      	ldrb	r3, [r3, #0]
   1e5ec:	2b00      	cmp	r3, #0
   1e5ee:	d003      	beq.n	1e5f8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e5f0:	68fb      	ldr	r3, [r7, #12]
   1e5f2:	68ba      	ldr	r2, [r7, #8]
   1e5f4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1e5f6:	e002      	b.n	1e5fe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e5f8:	68fb      	ldr	r3, [r7, #12]
   1e5fa:	68ba      	ldr	r2, [r7, #8]
   1e5fc:	615a      	str	r2, [r3, #20]
}
   1e5fe:	46c0      	nop			; (mov r8, r8)
   1e600:	46bd      	mov	sp, r7
   1e602:	b004      	add	sp, #16
   1e604:	bd80      	pop	{r7, pc}
   1e606:	46c0      	nop			; (mov r8, r8)
   1e608:	0001e571 	.word	0x0001e571

0001e60c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1e60c:	b580      	push	{r7, lr}
   1e60e:	b084      	sub	sp, #16
   1e610:	af00      	add	r7, sp, #0
   1e612:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e614:	687b      	ldr	r3, [r7, #4]
   1e616:	681b      	ldr	r3, [r3, #0]
   1e618:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1e61a:	68fb      	ldr	r3, [r7, #12]
   1e61c:	69db      	ldr	r3, [r3, #28]
   1e61e:	1e5a      	subs	r2, r3, #1
   1e620:	4193      	sbcs	r3, r2
   1e622:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1e624:	0018      	movs	r0, r3
   1e626:	46bd      	mov	sp, r7
   1e628:	b004      	add	sp, #16
   1e62a:	bd80      	pop	{r7, pc}

0001e62c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1e62c:	b580      	push	{r7, lr}
   1e62e:	b082      	sub	sp, #8
   1e630:	af00      	add	r7, sp, #0
   1e632:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1e634:	687b      	ldr	r3, [r7, #4]
   1e636:	2201      	movs	r2, #1
   1e638:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e63a:	687b      	ldr	r3, [r7, #4]
   1e63c:	2200      	movs	r2, #0
   1e63e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e640:	687b      	ldr	r3, [r7, #4]
   1e642:	2200      	movs	r2, #0
   1e644:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e646:	687b      	ldr	r3, [r7, #4]
   1e648:	22c0      	movs	r2, #192	; 0xc0
   1e64a:	0392      	lsls	r2, r2, #14
   1e64c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e64e:	687b      	ldr	r3, [r7, #4]
   1e650:	2200      	movs	r2, #0
   1e652:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e654:	687b      	ldr	r3, [r7, #4]
   1e656:	2200      	movs	r2, #0
   1e658:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e65a:	687b      	ldr	r3, [r7, #4]
   1e65c:	2201      	movs	r2, #1
   1e65e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1e660:	687b      	ldr	r3, [r7, #4]
   1e662:	2201      	movs	r2, #1
   1e664:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1e666:	687b      	ldr	r3, [r7, #4]
   1e668:	2200      	movs	r2, #0
   1e66a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1e66c:	687b      	ldr	r3, [r7, #4]
   1e66e:	2224      	movs	r2, #36	; 0x24
   1e670:	2100      	movs	r1, #0
   1e672:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e674:	687b      	ldr	r3, [r7, #4]
   1e676:	3318      	adds	r3, #24
   1e678:	220c      	movs	r2, #12
   1e67a:	2100      	movs	r1, #0
   1e67c:	0018      	movs	r0, r3
   1e67e:	4b0a      	ldr	r3, [pc, #40]	; (1e6a8 <spi_get_config_defaults+0x7c>)
   1e680:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1e682:	687b      	ldr	r3, [r7, #4]
   1e684:	4a09      	ldr	r2, [pc, #36]	; (1e6ac <spi_get_config_defaults+0x80>)
   1e686:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e688:	687b      	ldr	r3, [r7, #4]
   1e68a:	2200      	movs	r2, #0
   1e68c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e68e:	687b      	ldr	r3, [r7, #4]
   1e690:	2200      	movs	r2, #0
   1e692:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1e694:	687b      	ldr	r3, [r7, #4]
   1e696:	2200      	movs	r2, #0
   1e698:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1e69a:	687b      	ldr	r3, [r7, #4]
   1e69c:	2200      	movs	r2, #0
   1e69e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1e6a0:	46c0      	nop			; (mov r8, r8)
   1e6a2:	46bd      	mov	sp, r7
   1e6a4:	b002      	add	sp, #8
   1e6a6:	bd80      	pop	{r7, pc}
   1e6a8:	0003460f 	.word	0x0003460f
   1e6ac:	000186a0 	.word	0x000186a0

0001e6b0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1e6b0:	b580      	push	{r7, lr}
   1e6b2:	b082      	sub	sp, #8
   1e6b4:	af00      	add	r7, sp, #0
   1e6b6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	220a      	movs	r2, #10
   1e6bc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1e6be:	687b      	ldr	r3, [r7, #4]
   1e6c0:	2200      	movs	r2, #0
   1e6c2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1e6c4:	687b      	ldr	r3, [r7, #4]
   1e6c6:	2200      	movs	r2, #0
   1e6c8:	709a      	strb	r2, [r3, #2]
}
   1e6ca:	46c0      	nop			; (mov r8, r8)
   1e6cc:	46bd      	mov	sp, r7
   1e6ce:	b002      	add	sp, #8
   1e6d0:	bd80      	pop	{r7, pc}
	...

0001e6d4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1e6d4:	b580      	push	{r7, lr}
   1e6d6:	b084      	sub	sp, #16
   1e6d8:	af00      	add	r7, sp, #0
   1e6da:	6078      	str	r0, [r7, #4]
   1e6dc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1e6de:	683b      	ldr	r3, [r7, #0]
   1e6e0:	781a      	ldrb	r2, [r3, #0]
   1e6e2:	687b      	ldr	r3, [r7, #4]
   1e6e4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1e6e6:	683b      	ldr	r3, [r7, #0]
   1e6e8:	785a      	ldrb	r2, [r3, #1]
   1e6ea:	687b      	ldr	r3, [r7, #4]
   1e6ec:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1e6ee:	683b      	ldr	r3, [r7, #0]
   1e6f0:	789a      	ldrb	r2, [r3, #2]
   1e6f2:	687b      	ldr	r3, [r7, #4]
   1e6f4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1e6f6:	230c      	movs	r3, #12
   1e6f8:	18fb      	adds	r3, r7, r3
   1e6fa:	0018      	movs	r0, r3
   1e6fc:	4b0b      	ldr	r3, [pc, #44]	; (1e72c <spi_attach_slave+0x58>)
   1e6fe:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1e700:	230c      	movs	r3, #12
   1e702:	18fb      	adds	r3, r7, r3
   1e704:	2201      	movs	r2, #1
   1e706:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1e708:	687b      	ldr	r3, [r7, #4]
   1e70a:	781b      	ldrb	r3, [r3, #0]
   1e70c:	220c      	movs	r2, #12
   1e70e:	18ba      	adds	r2, r7, r2
   1e710:	0011      	movs	r1, r2
   1e712:	0018      	movs	r0, r3
   1e714:	4b06      	ldr	r3, [pc, #24]	; (1e730 <spi_attach_slave+0x5c>)
   1e716:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1e718:	687b      	ldr	r3, [r7, #4]
   1e71a:	781b      	ldrb	r3, [r3, #0]
   1e71c:	2101      	movs	r1, #1
   1e71e:	0018      	movs	r0, r3
   1e720:	4b04      	ldr	r3, [pc, #16]	; (1e734 <spi_attach_slave+0x60>)
   1e722:	4798      	blx	r3
}
   1e724:	46c0      	nop			; (mov r8, r8)
   1e726:	46bd      	mov	sp, r7
   1e728:	b004      	add	sp, #16
   1e72a:	bd80      	pop	{r7, pc}
   1e72c:	0001e595 	.word	0x0001e595
   1e730:	00025add 	.word	0x00025add
   1e734:	0001e5b9 	.word	0x0001e5b9

0001e738 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1e738:	b580      	push	{r7, lr}
   1e73a:	b084      	sub	sp, #16
   1e73c:	af00      	add	r7, sp, #0
   1e73e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e740:	687b      	ldr	r3, [r7, #4]
   1e742:	681b      	ldr	r3, [r3, #0]
   1e744:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e746:	687b      	ldr	r3, [r7, #4]
   1e748:	681b      	ldr	r3, [r3, #0]
   1e74a:	0018      	movs	r0, r3
   1e74c:	4b0b      	ldr	r3, [pc, #44]	; (1e77c <spi_enable+0x44>)
   1e74e:	4798      	blx	r3
   1e750:	0003      	movs	r3, r0
   1e752:	0018      	movs	r0, r3
   1e754:	4b0a      	ldr	r3, [pc, #40]	; (1e780 <spi_enable+0x48>)
   1e756:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1e758:	46c0      	nop			; (mov r8, r8)
   1e75a:	687b      	ldr	r3, [r7, #4]
   1e75c:	0018      	movs	r0, r3
   1e75e:	4b09      	ldr	r3, [pc, #36]	; (1e784 <spi_enable+0x4c>)
   1e760:	4798      	blx	r3
   1e762:	1e03      	subs	r3, r0, #0
   1e764:	d1f9      	bne.n	1e75a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1e766:	68fb      	ldr	r3, [r7, #12]
   1e768:	681b      	ldr	r3, [r3, #0]
   1e76a:	2202      	movs	r2, #2
   1e76c:	431a      	orrs	r2, r3
   1e76e:	68fb      	ldr	r3, [r7, #12]
   1e770:	601a      	str	r2, [r3, #0]
}
   1e772:	46c0      	nop			; (mov r8, r8)
   1e774:	46bd      	mov	sp, r7
   1e776:	b004      	add	sp, #16
   1e778:	bd80      	pop	{r7, pc}
   1e77a:	46c0      	nop			; (mov r8, r8)
   1e77c:	000267ad 	.word	0x000267ad
   1e780:	0001e545 	.word	0x0001e545
   1e784:	0001e60d 	.word	0x0001e60d

0001e788 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1e788:	b580      	push	{r7, lr}
   1e78a:	b084      	sub	sp, #16
   1e78c:	af00      	add	r7, sp, #0
   1e78e:	6078      	str	r0, [r7, #4]
   1e790:	000a      	movs	r2, r1
   1e792:	1cfb      	adds	r3, r7, #3
   1e794:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1e796:	230f      	movs	r3, #15
   1e798:	18fb      	adds	r3, r7, r3
   1e79a:	2200      	movs	r2, #0
   1e79c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1e79e:	e038      	b.n	1e812 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1e7a0:	687b      	ldr	r3, [r7, #4]
   1e7a2:	1c5a      	adds	r2, r3, #1
   1e7a4:	607a      	str	r2, [r7, #4]
   1e7a6:	220e      	movs	r2, #14
   1e7a8:	18ba      	adds	r2, r7, r2
   1e7aa:	781b      	ldrb	r3, [r3, #0]
   1e7ac:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e7ae:	230d      	movs	r3, #13
   1e7b0:	18fb      	adds	r3, r7, r3
   1e7b2:	2200      	movs	r2, #0
   1e7b4:	701a      	strb	r2, [r3, #0]
   1e7b6:	e027      	b.n	1e808 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1e7b8:	230f      	movs	r3, #15
   1e7ba:	18fa      	adds	r2, r7, r3
   1e7bc:	230f      	movs	r3, #15
   1e7be:	18fb      	adds	r3, r7, r3
   1e7c0:	781b      	ldrb	r3, [r3, #0]
   1e7c2:	18db      	adds	r3, r3, r3
   1e7c4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1e7c6:	230e      	movs	r3, #14
   1e7c8:	18fa      	adds	r2, r7, r3
   1e7ca:	230f      	movs	r3, #15
   1e7cc:	18fb      	adds	r3, r7, r3
   1e7ce:	7812      	ldrb	r2, [r2, #0]
   1e7d0:	781b      	ldrb	r3, [r3, #0]
   1e7d2:	4053      	eors	r3, r2
   1e7d4:	b2db      	uxtb	r3, r3
   1e7d6:	b25b      	sxtb	r3, r3
   1e7d8:	2b00      	cmp	r3, #0
   1e7da:	da07      	bge.n	1e7ec <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1e7dc:	230f      	movs	r3, #15
   1e7de:	18fb      	adds	r3, r7, r3
   1e7e0:	220f      	movs	r2, #15
   1e7e2:	18ba      	adds	r2, r7, r2
   1e7e4:	7812      	ldrb	r2, [r2, #0]
   1e7e6:	2109      	movs	r1, #9
   1e7e8:	404a      	eors	r2, r1
   1e7ea:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1e7ec:	230e      	movs	r3, #14
   1e7ee:	18fa      	adds	r2, r7, r3
   1e7f0:	230e      	movs	r3, #14
   1e7f2:	18fb      	adds	r3, r7, r3
   1e7f4:	781b      	ldrb	r3, [r3, #0]
   1e7f6:	18db      	adds	r3, r3, r3
   1e7f8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e7fa:	230d      	movs	r3, #13
   1e7fc:	18fb      	adds	r3, r7, r3
   1e7fe:	781a      	ldrb	r2, [r3, #0]
   1e800:	230d      	movs	r3, #13
   1e802:	18fb      	adds	r3, r7, r3
   1e804:	3201      	adds	r2, #1
   1e806:	701a      	strb	r2, [r3, #0]
   1e808:	230d      	movs	r3, #13
   1e80a:	18fb      	adds	r3, r7, r3
   1e80c:	781b      	ldrb	r3, [r3, #0]
   1e80e:	2b07      	cmp	r3, #7
   1e810:	d9d2      	bls.n	1e7b8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1e812:	1cfb      	adds	r3, r7, #3
   1e814:	781b      	ldrb	r3, [r3, #0]
   1e816:	1cfa      	adds	r2, r7, #3
   1e818:	1e59      	subs	r1, r3, #1
   1e81a:	7011      	strb	r1, [r2, #0]
   1e81c:	2b00      	cmp	r3, #0
   1e81e:	d1bf      	bne.n	1e7a0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1e820:	230f      	movs	r3, #15
   1e822:	18fb      	adds	r3, r7, r3
   1e824:	781b      	ldrb	r3, [r3, #0]
   1e826:	005b      	lsls	r3, r3, #1
   1e828:	b25b      	sxtb	r3, r3
   1e82a:	2201      	movs	r2, #1
   1e82c:	4313      	orrs	r3, r2
   1e82e:	b25a      	sxtb	r2, r3
   1e830:	230f      	movs	r3, #15
   1e832:	18fb      	adds	r3, r7, r3
   1e834:	701a      	strb	r2, [r3, #0]
	return crc;
   1e836:	230f      	movs	r3, #15
   1e838:	18fb      	adds	r3, r7, r3
   1e83a:	781b      	ldrb	r3, [r3, #0]
}
   1e83c:	0018      	movs	r0, r3
   1e83e:	46bd      	mov	sp, r7
   1e840:	b004      	add	sp, #16
   1e842:	bd80      	pop	{r7, pc}

0001e844 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1e844:	b590      	push	{r4, r7, lr}
   1e846:	b083      	sub	sp, #12
   1e848:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1e84a:	1c7b      	adds	r3, r7, #1
   1e84c:	22ff      	movs	r2, #255	; 0xff
   1e84e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1e850:	1cbb      	adds	r3, r7, #2
   1e852:	22ff      	movs	r2, #255	; 0xff
   1e854:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e856:	1cbb      	adds	r3, r7, #2
   1e858:	881b      	ldrh	r3, [r3, #0]
   1e85a:	1c79      	adds	r1, r7, #1
   1e85c:	4811      	ldr	r0, [pc, #68]	; (1e8a4 <sd_mmc_spi_wait_busy+0x60>)
   1e85e:	2201      	movs	r2, #1
   1e860:	4c11      	ldr	r4, [pc, #68]	; (1e8a8 <sd_mmc_spi_wait_busy+0x64>)
   1e862:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1e864:	4b11      	ldr	r3, [pc, #68]	; (1e8ac <sd_mmc_spi_wait_busy+0x68>)
   1e866:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e868:	1cbb      	adds	r3, r7, #2
   1e86a:	881b      	ldrh	r3, [r3, #0]
   1e86c:	1c79      	adds	r1, r7, #1
   1e86e:	480d      	ldr	r0, [pc, #52]	; (1e8a4 <sd_mmc_spi_wait_busy+0x60>)
   1e870:	2201      	movs	r2, #1
   1e872:	4c0d      	ldr	r4, [pc, #52]	; (1e8a8 <sd_mmc_spi_wait_busy+0x64>)
   1e874:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e876:	1cbb      	adds	r3, r7, #2
   1e878:	881b      	ldrh	r3, [r3, #0]
   1e87a:	1c79      	adds	r1, r7, #1
   1e87c:	4809      	ldr	r0, [pc, #36]	; (1e8a4 <sd_mmc_spi_wait_busy+0x60>)
   1e87e:	2201      	movs	r2, #1
   1e880:	4c09      	ldr	r4, [pc, #36]	; (1e8a8 <sd_mmc_spi_wait_busy+0x64>)
   1e882:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1e884:	687b      	ldr	r3, [r7, #4]
   1e886:	1e5a      	subs	r2, r3, #1
   1e888:	607a      	str	r2, [r7, #4]
   1e88a:	2b00      	cmp	r3, #0
   1e88c:	d101      	bne.n	1e892 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1e88e:	2300      	movs	r3, #0
   1e890:	e004      	b.n	1e89c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1e892:	1c7b      	adds	r3, r7, #1
   1e894:	781b      	ldrb	r3, [r3, #0]
   1e896:	2bff      	cmp	r3, #255	; 0xff
   1e898:	d1ed      	bne.n	1e876 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1e89a:	2301      	movs	r3, #1
}
   1e89c:	0018      	movs	r0, r3
   1e89e:	46bd      	mov	sp, r7
   1e8a0:	b003      	add	sp, #12
   1e8a2:	bd90      	pop	{r4, r7, pc}
   1e8a4:	2000421c 	.word	0x2000421c
   1e8a8:	000270ed 	.word	0x000270ed
   1e8ac:	00030d40 	.word	0x00030d40

0001e8b0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1e8b0:	b590      	push	{r4, r7, lr}
   1e8b2:	b083      	sub	sp, #12
   1e8b4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1e8b6:	1cbb      	adds	r3, r7, #2
   1e8b8:	22ff      	movs	r2, #255	; 0xff
   1e8ba:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1e8bc:	1c7b      	adds	r3, r7, #1
   1e8be:	2200      	movs	r2, #0
   1e8c0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1e8c2:	4b18      	ldr	r3, [pc, #96]	; (1e924 <sd_mmc_spi_start_read_block+0x74>)
   1e8c4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1e8c6:	687b      	ldr	r3, [r7, #4]
   1e8c8:	1e5a      	subs	r2, r3, #1
   1e8ca:	607a      	str	r2, [r7, #4]
   1e8cc:	2b00      	cmp	r3, #0
   1e8ce:	d104      	bne.n	1e8da <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1e8d0:	4b15      	ldr	r3, [pc, #84]	; (1e928 <sd_mmc_spi_start_read_block+0x78>)
   1e8d2:	2204      	movs	r2, #4
   1e8d4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1e8d6:	2300      	movs	r3, #0
   1e8d8:	e020      	b.n	1e91c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1e8da:	1cbb      	adds	r3, r7, #2
   1e8dc:	881b      	ldrh	r3, [r3, #0]
   1e8de:	1c79      	adds	r1, r7, #1
   1e8e0:	4812      	ldr	r0, [pc, #72]	; (1e92c <sd_mmc_spi_start_read_block+0x7c>)
   1e8e2:	2201      	movs	r2, #1
   1e8e4:	4c12      	ldr	r4, [pc, #72]	; (1e930 <sd_mmc_spi_start_read_block+0x80>)
   1e8e6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1e8e8:	1c7b      	adds	r3, r7, #1
   1e8ea:	781b      	ldrb	r3, [r3, #0]
   1e8ec:	001a      	movs	r2, r3
   1e8ee:	23f0      	movs	r3, #240	; 0xf0
   1e8f0:	4013      	ands	r3, r2
   1e8f2:	d10e      	bne.n	1e912 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1e8f4:	1c7b      	adds	r3, r7, #1
   1e8f6:	781b      	ldrb	r3, [r3, #0]
   1e8f8:	001a      	movs	r2, r3
   1e8fa:	2307      	movs	r3, #7
   1e8fc:	4013      	ands	r3, r2
   1e8fe:	d003      	beq.n	1e908 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1e900:	4b09      	ldr	r3, [pc, #36]	; (1e928 <sd_mmc_spi_start_read_block+0x78>)
   1e902:	2207      	movs	r2, #7
   1e904:	701a      	strb	r2, [r3, #0]
   1e906:	e002      	b.n	1e90e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1e908:	4b07      	ldr	r3, [pc, #28]	; (1e928 <sd_mmc_spi_start_read_block+0x78>)
   1e90a:	220b      	movs	r2, #11
   1e90c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1e90e:	2300      	movs	r3, #0
   1e910:	e004      	b.n	1e91c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1e912:	1c7b      	adds	r3, r7, #1
   1e914:	781b      	ldrb	r3, [r3, #0]
   1e916:	2bfe      	cmp	r3, #254	; 0xfe
   1e918:	d1d5      	bne.n	1e8c6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1e91a:	2301      	movs	r3, #1
}
   1e91c:	0018      	movs	r0, r3
   1e91e:	46bd      	mov	sp, r7
   1e920:	b003      	add	sp, #12
   1e922:	bd90      	pop	{r4, r7, pc}
   1e924:	0007a120 	.word	0x0007a120
   1e928:	2000425f 	.word	0x2000425f
   1e92c:	2000421c 	.word	0x2000421c
   1e930:	000270ed 	.word	0x000270ed

0001e934 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1e934:	b590      	push	{r4, r7, lr}
   1e936:	b083      	sub	sp, #12
   1e938:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1e93a:	1dbb      	adds	r3, r7, #6
   1e93c:	22ff      	movs	r2, #255	; 0xff
   1e93e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1e940:	1dbb      	adds	r3, r7, #6
   1e942:	881b      	ldrh	r3, [r3, #0]
   1e944:	1d39      	adds	r1, r7, #4
   1e946:	4804      	ldr	r0, [pc, #16]	; (1e958 <sd_mmc_spi_stop_read_block+0x24>)
   1e948:	2202      	movs	r2, #2
   1e94a:	4c04      	ldr	r4, [pc, #16]	; (1e95c <sd_mmc_spi_stop_read_block+0x28>)
   1e94c:	47a0      	blx	r4
			dummy);
}
   1e94e:	46c0      	nop			; (mov r8, r8)
   1e950:	46bd      	mov	sp, r7
   1e952:	b003      	add	sp, #12
   1e954:	bd90      	pop	{r4, r7, pc}
   1e956:	46c0      	nop			; (mov r8, r8)
   1e958:	2000421c 	.word	0x2000421c
   1e95c:	000270ed 	.word	0x000270ed

0001e960 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1e960:	b580      	push	{r7, lr}
   1e962:	b082      	sub	sp, #8
   1e964:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1e966:	1dfb      	adds	r3, r7, #7
   1e968:	22ff      	movs	r2, #255	; 0xff
   1e96a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1e96c:	1df9      	adds	r1, r7, #7
   1e96e:	4b0d      	ldr	r3, [pc, #52]	; (1e9a4 <sd_mmc_spi_start_write_block+0x44>)
   1e970:	2201      	movs	r2, #1
   1e972:	0018      	movs	r0, r3
   1e974:	4b0c      	ldr	r3, [pc, #48]	; (1e9a8 <sd_mmc_spi_start_write_block+0x48>)
   1e976:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1e978:	4b0c      	ldr	r3, [pc, #48]	; (1e9ac <sd_mmc_spi_start_write_block+0x4c>)
   1e97a:	881b      	ldrh	r3, [r3, #0]
   1e97c:	2b01      	cmp	r3, #1
   1e97e:	d103      	bne.n	1e988 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1e980:	1dbb      	adds	r3, r7, #6
   1e982:	22fe      	movs	r2, #254	; 0xfe
   1e984:	701a      	strb	r2, [r3, #0]
   1e986:	e002      	b.n	1e98e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1e988:	1dbb      	adds	r3, r7, #6
   1e98a:	22fc      	movs	r2, #252	; 0xfc
   1e98c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1e98e:	1db9      	adds	r1, r7, #6
   1e990:	4b04      	ldr	r3, [pc, #16]	; (1e9a4 <sd_mmc_spi_start_write_block+0x44>)
   1e992:	2201      	movs	r2, #1
   1e994:	0018      	movs	r0, r3
   1e996:	4b04      	ldr	r3, [pc, #16]	; (1e9a8 <sd_mmc_spi_start_write_block+0x48>)
   1e998:	4798      	blx	r3
}
   1e99a:	46c0      	nop			; (mov r8, r8)
   1e99c:	46bd      	mov	sp, r7
   1e99e:	b002      	add	sp, #8
   1e9a0:	bd80      	pop	{r7, pc}
   1e9a2:	46c0      	nop			; (mov r8, r8)
   1e9a4:	2000421c 	.word	0x2000421c
   1e9a8:	00027311 	.word	0x00027311
   1e9ac:	2000426a 	.word	0x2000426a

0001e9b0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1e9b0:	b590      	push	{r4, r7, lr}
   1e9b2:	b083      	sub	sp, #12
   1e9b4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1e9b6:	1dbb      	adds	r3, r7, #6
   1e9b8:	22ff      	movs	r2, #255	; 0xff
   1e9ba:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1e9bc:	1cbb      	adds	r3, r7, #2
   1e9be:	2201      	movs	r2, #1
   1e9c0:	4252      	negs	r2, r2
   1e9c2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1e9c4:	1cb9      	adds	r1, r7, #2
   1e9c6:	4b1b      	ldr	r3, [pc, #108]	; (1ea34 <sd_mmc_spi_stop_write_block+0x84>)
   1e9c8:	2202      	movs	r2, #2
   1e9ca:	0018      	movs	r0, r3
   1e9cc:	4b1a      	ldr	r3, [pc, #104]	; (1ea38 <sd_mmc_spi_stop_write_block+0x88>)
   1e9ce:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1e9d0:	1dbb      	adds	r3, r7, #6
   1e9d2:	881b      	ldrh	r3, [r3, #0]
   1e9d4:	1d79      	adds	r1, r7, #5
   1e9d6:	4817      	ldr	r0, [pc, #92]	; (1ea34 <sd_mmc_spi_stop_write_block+0x84>)
   1e9d8:	2201      	movs	r2, #1
   1e9da:	4c18      	ldr	r4, [pc, #96]	; (1ea3c <sd_mmc_spi_stop_write_block+0x8c>)
   1e9dc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1e9de:	1d7b      	adds	r3, r7, #5
   1e9e0:	781b      	ldrb	r3, [r3, #0]
   1e9e2:	001a      	movs	r2, r3
   1e9e4:	2310      	movs	r3, #16
   1e9e6:	4013      	ands	r3, r2
   1e9e8:	d105      	bne.n	1e9f6 <sd_mmc_spi_stop_write_block+0x46>
   1e9ea:	1d7b      	adds	r3, r7, #5
   1e9ec:	781b      	ldrb	r3, [r3, #0]
   1e9ee:	001a      	movs	r2, r3
   1e9f0:	2301      	movs	r3, #1
   1e9f2:	4013      	ands	r3, r2
   1e9f4:	d104      	bne.n	1ea00 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e9f6:	4b12      	ldr	r3, [pc, #72]	; (1ea40 <sd_mmc_spi_stop_write_block+0x90>)
   1e9f8:	2201      	movs	r2, #1
   1e9fa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1e9fc:	2300      	movs	r3, #0
   1e9fe:	e014      	b.n	1ea2a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1ea00:	1d7b      	adds	r3, r7, #5
   1ea02:	781b      	ldrb	r3, [r3, #0]
   1ea04:	001a      	movs	r2, r3
   1ea06:	231e      	movs	r3, #30
   1ea08:	4013      	ands	r3, r2
   1ea0a:	2b04      	cmp	r3, #4
   1ea0c:	d00b      	beq.n	1ea26 <sd_mmc_spi_stop_write_block+0x76>
   1ea0e:	2b0a      	cmp	r3, #10
   1ea10:	d104      	bne.n	1ea1c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1ea12:	4b0b      	ldr	r3, [pc, #44]	; (1ea40 <sd_mmc_spi_stop_write_block+0x90>)
   1ea14:	2208      	movs	r2, #8
   1ea16:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1ea18:	2300      	movs	r3, #0
   1ea1a:	e006      	b.n	1ea2a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1ea1c:	4b08      	ldr	r3, [pc, #32]	; (1ea40 <sd_mmc_spi_stop_write_block+0x90>)
   1ea1e:	220a      	movs	r2, #10
   1ea20:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1ea22:	2300      	movs	r3, #0
   1ea24:	e001      	b.n	1ea2a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1ea26:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1ea28:	2301      	movs	r3, #1
}
   1ea2a:	0018      	movs	r0, r3
   1ea2c:	46bd      	mov	sp, r7
   1ea2e:	b003      	add	sp, #12
   1ea30:	bd90      	pop	{r4, r7, pc}
   1ea32:	46c0      	nop			; (mov r8, r8)
   1ea34:	2000421c 	.word	0x2000421c
   1ea38:	00027311 	.word	0x00027311
   1ea3c:	000270ed 	.word	0x000270ed
   1ea40:	2000425f 	.word	0x2000425f

0001ea44 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1ea44:	b590      	push	{r4, r7, lr}
   1ea46:	b083      	sub	sp, #12
   1ea48:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1ea4a:	4b1d      	ldr	r3, [pc, #116]	; (1eac0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1ea4c:	881b      	ldrh	r3, [r3, #0]
   1ea4e:	2b01      	cmp	r3, #1
   1ea50:	d101      	bne.n	1ea56 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1ea52:	2301      	movs	r3, #1
   1ea54:	e030      	b.n	1eab8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1ea56:	4b1a      	ldr	r3, [pc, #104]	; (1eac0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1ea58:	881b      	ldrh	r3, [r3, #0]
   1ea5a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1ea5c:	4b19      	ldr	r3, [pc, #100]	; (1eac4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1ea5e:	681a      	ldr	r2, [r3, #0]
   1ea60:	4b19      	ldr	r3, [pc, #100]	; (1eac8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1ea62:	881b      	ldrh	r3, [r3, #0]
   1ea64:	0019      	movs	r1, r3
   1ea66:	4b19      	ldr	r3, [pc, #100]	; (1eacc <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1ea68:	0010      	movs	r0, r2
   1ea6a:	4798      	blx	r3
   1ea6c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1ea6e:	429c      	cmp	r4, r3
   1ea70:	d901      	bls.n	1ea76 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1ea72:	2301      	movs	r3, #1
   1ea74:	e020      	b.n	1eab8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1ea76:	1dfb      	adds	r3, r7, #7
   1ea78:	22ff      	movs	r2, #255	; 0xff
   1ea7a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ea7c:	1df9      	adds	r1, r7, #7
   1ea7e:	4b14      	ldr	r3, [pc, #80]	; (1ead0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ea80:	2201      	movs	r2, #1
   1ea82:	0018      	movs	r0, r3
   1ea84:	4b13      	ldr	r3, [pc, #76]	; (1ead4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ea86:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1ea88:	1dfb      	adds	r3, r7, #7
   1ea8a:	22fd      	movs	r2, #253	; 0xfd
   1ea8c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ea8e:	1df9      	adds	r1, r7, #7
   1ea90:	4b0f      	ldr	r3, [pc, #60]	; (1ead0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ea92:	2201      	movs	r2, #1
   1ea94:	0018      	movs	r0, r3
   1ea96:	4b0f      	ldr	r3, [pc, #60]	; (1ead4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ea98:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1ea9a:	4b0f      	ldr	r3, [pc, #60]	; (1ead8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1ea9c:	4798      	blx	r3
   1ea9e:	0003      	movs	r3, r0
   1eaa0:	001a      	movs	r2, r3
   1eaa2:	2301      	movs	r3, #1
   1eaa4:	4053      	eors	r3, r2
   1eaa6:	b2db      	uxtb	r3, r3
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d004      	beq.n	1eab6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1eaac:	4b0b      	ldr	r3, [pc, #44]	; (1eadc <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1eaae:	2205      	movs	r2, #5
   1eab0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1eab2:	2300      	movs	r3, #0
   1eab4:	e000      	b.n	1eab8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1eab6:	2301      	movs	r3, #1
}
   1eab8:	0018      	movs	r0, r3
   1eaba:	46bd      	mov	sp, r7
   1eabc:	b003      	add	sp, #12
   1eabe:	bd90      	pop	{r4, r7, pc}
   1eac0:	2000426a 	.word	0x2000426a
   1eac4:	20004264 	.word	0x20004264
   1eac8:	20004268 	.word	0x20004268
   1eacc:	00031b55 	.word	0x00031b55
   1ead0:	2000421c 	.word	0x2000421c
   1ead4:	00027311 	.word	0x00027311
   1ead8:	0001e845 	.word	0x0001e845
   1eadc:	2000425f 	.word	0x2000425f

0001eae0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1eae0:	b580      	push	{r7, lr}
   1eae2:	b090      	sub	sp, #64	; 0x40
   1eae4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eae6:	4b1f      	ldr	r3, [pc, #124]	; (1eb64 <sd_mmc_spi_init+0x84>)
   1eae8:	2200      	movs	r2, #0
   1eaea:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1eaec:	233c      	movs	r3, #60	; 0x3c
   1eaee:	18fb      	adds	r3, r7, r3
   1eaf0:	0018      	movs	r0, r3
   1eaf2:	4b1d      	ldr	r3, [pc, #116]	; (1eb68 <sd_mmc_spi_init+0x88>)
   1eaf4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1eaf6:	1d3b      	adds	r3, r7, #4
   1eaf8:	0018      	movs	r0, r3
   1eafa:	4b1c      	ldr	r3, [pc, #112]	; (1eb6c <sd_mmc_spi_init+0x8c>)
   1eafc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1eafe:	1d3b      	adds	r3, r7, #4
   1eb00:	2280      	movs	r2, #128	; 0x80
   1eb02:	0252      	lsls	r2, r2, #9
   1eb04:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1eb06:	1d3b      	adds	r3, r7, #4
   1eb08:	4a19      	ldr	r2, [pc, #100]	; (1eb70 <sd_mmc_spi_init+0x90>)
   1eb0a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1eb0c:	1d3b      	adds	r3, r7, #4
   1eb0e:	4a19      	ldr	r2, [pc, #100]	; (1eb74 <sd_mmc_spi_init+0x94>)
   1eb10:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1eb12:	1d3b      	adds	r3, r7, #4
   1eb14:	4a18      	ldr	r2, [pc, #96]	; (1eb78 <sd_mmc_spi_init+0x98>)
   1eb16:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1eb18:	1d3b      	adds	r3, r7, #4
   1eb1a:	4a18      	ldr	r2, [pc, #96]	; (1eb7c <sd_mmc_spi_init+0x9c>)
   1eb1c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1eb1e:	1d3b      	adds	r3, r7, #4
   1eb20:	2224      	movs	r2, #36	; 0x24
   1eb22:	2100      	movs	r1, #0
   1eb24:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1eb26:	1d3b      	adds	r3, r7, #4
   1eb28:	4a15      	ldr	r2, [pc, #84]	; (1eb80 <sd_mmc_spi_init+0xa0>)
   1eb2a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1eb2c:	1d3a      	adds	r2, r7, #4
   1eb2e:	4915      	ldr	r1, [pc, #84]	; (1eb84 <sd_mmc_spi_init+0xa4>)
   1eb30:	4b15      	ldr	r3, [pc, #84]	; (1eb88 <sd_mmc_spi_init+0xa8>)
   1eb32:	0018      	movs	r0, r3
   1eb34:	4b15      	ldr	r3, [pc, #84]	; (1eb8c <sd_mmc_spi_init+0xac>)
   1eb36:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1eb38:	4b13      	ldr	r3, [pc, #76]	; (1eb88 <sd_mmc_spi_init+0xa8>)
   1eb3a:	0018      	movs	r0, r3
   1eb3c:	4b14      	ldr	r3, [pc, #80]	; (1eb90 <sd_mmc_spi_init+0xb0>)
   1eb3e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1eb40:	4b14      	ldr	r3, [pc, #80]	; (1eb94 <sd_mmc_spi_init+0xb4>)
   1eb42:	0018      	movs	r0, r3
   1eb44:	4b14      	ldr	r3, [pc, #80]	; (1eb98 <sd_mmc_spi_init+0xb8>)
   1eb46:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1eb48:	4b14      	ldr	r3, [pc, #80]	; (1eb9c <sd_mmc_spi_init+0xbc>)
   1eb4a:	781a      	ldrb	r2, [r3, #0]
   1eb4c:	4b11      	ldr	r3, [pc, #68]	; (1eb94 <sd_mmc_spi_init+0xb4>)
   1eb4e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1eb50:	4a10      	ldr	r2, [pc, #64]	; (1eb94 <sd_mmc_spi_init+0xb4>)
   1eb52:	4b13      	ldr	r3, [pc, #76]	; (1eba0 <sd_mmc_spi_init+0xc0>)
   1eb54:	0011      	movs	r1, r2
   1eb56:	0018      	movs	r0, r3
   1eb58:	4b12      	ldr	r3, [pc, #72]	; (1eba4 <sd_mmc_spi_init+0xc4>)
   1eb5a:	4798      	blx	r3
}
   1eb5c:	46c0      	nop			; (mov r8, r8)
   1eb5e:	46bd      	mov	sp, r7
   1eb60:	b010      	add	sp, #64	; 0x40
   1eb62:	bd80      	pop	{r7, pc}
   1eb64:	2000425f 	.word	0x2000425f
   1eb68:	0001e595 	.word	0x0001e595
   1eb6c:	0001e62d 	.word	0x0001e62d
   1eb70:	00100002 	.word	0x00100002
   1eb74:	00110002 	.word	0x00110002
   1eb78:	00120002 	.word	0x00120002
   1eb7c:	00130002 	.word	0x00130002
   1eb80:	00061a80 	.word	0x00061a80
   1eb84:	42000c00 	.word	0x42000c00
   1eb88:	2000421c 	.word	0x2000421c
   1eb8c:	00026f5d 	.word	0x00026f5d
   1eb90:	0001e739 	.word	0x0001e739
   1eb94:	2000425c 	.word	0x2000425c
   1eb98:	0001e6b1 	.word	0x0001e6b1
   1eb9c:	20000108 	.word	0x20000108
   1eba0:	20004258 	.word	0x20004258
   1eba4:	0001e6d5 	.word	0x0001e6d5

0001eba8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1eba8:	b590      	push	{r4, r7, lr}
   1ebaa:	b083      	sub	sp, #12
   1ebac:	af00      	add	r7, sp, #0
   1ebae:	0004      	movs	r4, r0
   1ebb0:	6039      	str	r1, [r7, #0]
   1ebb2:	0010      	movs	r0, r2
   1ebb4:	0019      	movs	r1, r3
   1ebb6:	1dfb      	adds	r3, r7, #7
   1ebb8:	1c22      	adds	r2, r4, #0
   1ebba:	701a      	strb	r2, [r3, #0]
   1ebbc:	1dbb      	adds	r3, r7, #6
   1ebbe:	1c02      	adds	r2, r0, #0
   1ebc0:	701a      	strb	r2, [r3, #0]
   1ebc2:	1d7b      	adds	r3, r7, #5
   1ebc4:	1c0a      	adds	r2, r1, #0
   1ebc6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ebc8:	4b13      	ldr	r3, [pc, #76]	; (1ec18 <sd_mmc_spi_select_device+0x70>)
   1ebca:	2200      	movs	r2, #0
   1ebcc:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1ebce:	683b      	ldr	r3, [r7, #0]
   1ebd0:	4a12      	ldr	r2, [pc, #72]	; (1ec1c <sd_mmc_spi_select_device+0x74>)
   1ebd2:	4293      	cmp	r3, r2
   1ebd4:	d907      	bls.n	1ebe6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1ebd6:	4b11      	ldr	r3, [pc, #68]	; (1ec1c <sd_mmc_spi_select_device+0x74>)
   1ebd8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1ebda:	e004      	b.n	1ebe6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1ebdc:	683b      	ldr	r3, [r7, #0]
   1ebde:	08db      	lsrs	r3, r3, #3
   1ebe0:	683a      	ldr	r2, [r7, #0]
   1ebe2:	1ad3      	subs	r3, r2, r3
   1ebe4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1ebe6:	683a      	ldr	r2, [r7, #0]
   1ebe8:	4b0d      	ldr	r3, [pc, #52]	; (1ec20 <sd_mmc_spi_select_device+0x78>)
   1ebea:	0011      	movs	r1, r2
   1ebec:	0018      	movs	r0, r3
   1ebee:	4b0d      	ldr	r3, [pc, #52]	; (1ec24 <sd_mmc_spi_select_device+0x7c>)
   1ebf0:	4798      	blx	r3
   1ebf2:	0003      	movs	r3, r0
   1ebf4:	2b17      	cmp	r3, #23
   1ebf6:	d0f1      	beq.n	1ebdc <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1ebf8:	1dfb      	adds	r3, r7, #7
   1ebfa:	781a      	ldrb	r2, [r3, #0]
   1ebfc:	0013      	movs	r3, r2
   1ebfe:	005b      	lsls	r3, r3, #1
   1ec00:	189b      	adds	r3, r3, r2
   1ec02:	4a09      	ldr	r2, [pc, #36]	; (1ec28 <sd_mmc_spi_select_device+0x80>)
   1ec04:	1899      	adds	r1, r3, r2
   1ec06:	4b06      	ldr	r3, [pc, #24]	; (1ec20 <sd_mmc_spi_select_device+0x78>)
   1ec08:	2201      	movs	r2, #1
   1ec0a:	0018      	movs	r0, r3
   1ec0c:	4b07      	ldr	r3, [pc, #28]	; (1ec2c <sd_mmc_spi_select_device+0x84>)
   1ec0e:	4798      	blx	r3
}
   1ec10:	46c0      	nop			; (mov r8, r8)
   1ec12:	46bd      	mov	sp, r7
   1ec14:	b003      	add	sp, #12
   1ec16:	bd90      	pop	{r4, r7, pc}
   1ec18:	2000425f 	.word	0x2000425f
   1ec1c:	00989680 	.word	0x00989680
   1ec20:	2000421c 	.word	0x2000421c
   1ec24:	00026c85 	.word	0x00026c85
   1ec28:	20004258 	.word	0x20004258
   1ec2c:	00027221 	.word	0x00027221

0001ec30 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1ec30:	b580      	push	{r7, lr}
   1ec32:	b082      	sub	sp, #8
   1ec34:	af00      	add	r7, sp, #0
   1ec36:	0002      	movs	r2, r0
   1ec38:	1dfb      	adds	r3, r7, #7
   1ec3a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ec3c:	4b09      	ldr	r3, [pc, #36]	; (1ec64 <sd_mmc_spi_deselect_device+0x34>)
   1ec3e:	2200      	movs	r2, #0
   1ec40:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1ec42:	1dfb      	adds	r3, r7, #7
   1ec44:	781a      	ldrb	r2, [r3, #0]
   1ec46:	0013      	movs	r3, r2
   1ec48:	005b      	lsls	r3, r3, #1
   1ec4a:	189b      	adds	r3, r3, r2
   1ec4c:	4a06      	ldr	r2, [pc, #24]	; (1ec68 <sd_mmc_spi_deselect_device+0x38>)
   1ec4e:	1899      	adds	r1, r3, r2
   1ec50:	4b06      	ldr	r3, [pc, #24]	; (1ec6c <sd_mmc_spi_deselect_device+0x3c>)
   1ec52:	2200      	movs	r2, #0
   1ec54:	0018      	movs	r0, r3
   1ec56:	4b06      	ldr	r3, [pc, #24]	; (1ec70 <sd_mmc_spi_deselect_device+0x40>)
   1ec58:	4798      	blx	r3
}
   1ec5a:	46c0      	nop			; (mov r8, r8)
   1ec5c:	46bd      	mov	sp, r7
   1ec5e:	b002      	add	sp, #8
   1ec60:	bd80      	pop	{r7, pc}
   1ec62:	46c0      	nop			; (mov r8, r8)
   1ec64:	2000425f 	.word	0x2000425f
   1ec68:	20004258 	.word	0x20004258
   1ec6c:	2000421c 	.word	0x2000421c
   1ec70:	00027221 	.word	0x00027221

0001ec74 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1ec74:	b580      	push	{r7, lr}
   1ec76:	b082      	sub	sp, #8
   1ec78:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1ec7a:	1dbb      	adds	r3, r7, #6
   1ec7c:	22ff      	movs	r2, #255	; 0xff
   1ec7e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ec80:	4b0c      	ldr	r3, [pc, #48]	; (1ecb4 <sd_mmc_spi_send_clock+0x40>)
   1ec82:	2200      	movs	r2, #0
   1ec84:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1ec86:	1dfb      	adds	r3, r7, #7
   1ec88:	2200      	movs	r2, #0
   1ec8a:	701a      	strb	r2, [r3, #0]
   1ec8c:	e00a      	b.n	1eca4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1ec8e:	1db9      	adds	r1, r7, #6
   1ec90:	4b09      	ldr	r3, [pc, #36]	; (1ecb8 <sd_mmc_spi_send_clock+0x44>)
   1ec92:	2201      	movs	r2, #1
   1ec94:	0018      	movs	r0, r3
   1ec96:	4b09      	ldr	r3, [pc, #36]	; (1ecbc <sd_mmc_spi_send_clock+0x48>)
   1ec98:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1ec9a:	1dfb      	adds	r3, r7, #7
   1ec9c:	781a      	ldrb	r2, [r3, #0]
   1ec9e:	1dfb      	adds	r3, r7, #7
   1eca0:	3201      	adds	r2, #1
   1eca2:	701a      	strb	r2, [r3, #0]
   1eca4:	1dfb      	adds	r3, r7, #7
   1eca6:	781b      	ldrb	r3, [r3, #0]
   1eca8:	2b09      	cmp	r3, #9
   1ecaa:	d9f0      	bls.n	1ec8e <sd_mmc_spi_send_clock+0x1a>
	}
}
   1ecac:	46c0      	nop			; (mov r8, r8)
   1ecae:	46bd      	mov	sp, r7
   1ecb0:	b002      	add	sp, #8
   1ecb2:	bd80      	pop	{r7, pc}
   1ecb4:	2000425f 	.word	0x2000425f
   1ecb8:	2000421c 	.word	0x2000421c
   1ecbc:	00027311 	.word	0x00027311

0001ecc0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1ecc0:	b590      	push	{r4, r7, lr}
   1ecc2:	b085      	sub	sp, #20
   1ecc4:	af02      	add	r7, sp, #8
   1ecc6:	6078      	str	r0, [r7, #4]
   1ecc8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1ecca:	6839      	ldr	r1, [r7, #0]
   1eccc:	6878      	ldr	r0, [r7, #4]
   1ecce:	2300      	movs	r3, #0
   1ecd0:	9300      	str	r3, [sp, #0]
   1ecd2:	2300      	movs	r3, #0
   1ecd4:	2200      	movs	r2, #0
   1ecd6:	4c03      	ldr	r4, [pc, #12]	; (1ece4 <sd_mmc_spi_send_cmd+0x24>)
   1ecd8:	47a0      	blx	r4
   1ecda:	0003      	movs	r3, r0
}
   1ecdc:	0018      	movs	r0, r3
   1ecde:	46bd      	mov	sp, r7
   1ece0:	b003      	add	sp, #12
   1ece2:	bd90      	pop	{r4, r7, pc}
   1ece4:	0001ece9 	.word	0x0001ece9

0001ece8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1ece8:	b590      	push	{r4, r7, lr}
   1ecea:	b089      	sub	sp, #36	; 0x24
   1ecec:	af00      	add	r7, sp, #0
   1ecee:	60f8      	str	r0, [r7, #12]
   1ecf0:	60b9      	str	r1, [r7, #8]
   1ecf2:	0019      	movs	r1, r3
   1ecf4:	1dbb      	adds	r3, r7, #6
   1ecf6:	801a      	strh	r2, [r3, #0]
   1ecf8:	1d3b      	adds	r3, r7, #4
   1ecfa:	1c0a      	adds	r2, r1, #0
   1ecfc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1ecfe:	231b      	movs	r3, #27
   1ed00:	18fb      	adds	r3, r7, r3
   1ed02:	22ff      	movs	r2, #255	; 0xff
   1ed04:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1ed06:	231c      	movs	r3, #28
   1ed08:	18fb      	adds	r3, r7, r3
   1ed0a:	22ff      	movs	r2, #255	; 0xff
   1ed0c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ed0e:	4b72      	ldr	r3, [pc, #456]	; (1eed8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ed10:	2200      	movs	r2, #0
   1ed12:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1ed14:	68fb      	ldr	r3, [r7, #12]
   1ed16:	b2db      	uxtb	r3, r3
   1ed18:	223f      	movs	r2, #63	; 0x3f
   1ed1a:	4013      	ands	r3, r2
   1ed1c:	b2db      	uxtb	r3, r3
   1ed1e:	2240      	movs	r2, #64	; 0x40
   1ed20:	4313      	orrs	r3, r2
   1ed22:	b2da      	uxtb	r2, r3
   1ed24:	2314      	movs	r3, #20
   1ed26:	18fb      	adds	r3, r7, r3
   1ed28:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1ed2a:	68bb      	ldr	r3, [r7, #8]
   1ed2c:	0e1b      	lsrs	r3, r3, #24
   1ed2e:	b2da      	uxtb	r2, r3
   1ed30:	2314      	movs	r3, #20
   1ed32:	18fb      	adds	r3, r7, r3
   1ed34:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1ed36:	68bb      	ldr	r3, [r7, #8]
   1ed38:	0c1b      	lsrs	r3, r3, #16
   1ed3a:	b2da      	uxtb	r2, r3
   1ed3c:	2314      	movs	r3, #20
   1ed3e:	18fb      	adds	r3, r7, r3
   1ed40:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1ed42:	68bb      	ldr	r3, [r7, #8]
   1ed44:	0a1b      	lsrs	r3, r3, #8
   1ed46:	b2da      	uxtb	r2, r3
   1ed48:	2314      	movs	r3, #20
   1ed4a:	18fb      	adds	r3, r7, r3
   1ed4c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1ed4e:	68bb      	ldr	r3, [r7, #8]
   1ed50:	b2da      	uxtb	r2, r3
   1ed52:	2314      	movs	r3, #20
   1ed54:	18fb      	adds	r3, r7, r3
   1ed56:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1ed58:	2314      	movs	r3, #20
   1ed5a:	18fb      	adds	r3, r7, r3
   1ed5c:	2105      	movs	r1, #5
   1ed5e:	0018      	movs	r0, r3
   1ed60:	4b5e      	ldr	r3, [pc, #376]	; (1eedc <sd_mmc_spi_adtc_start+0x1f4>)
   1ed62:	4798      	blx	r3
   1ed64:	0003      	movs	r3, r0
   1ed66:	001a      	movs	r2, r3
   1ed68:	2314      	movs	r3, #20
   1ed6a:	18fb      	adds	r3, r7, r3
   1ed6c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1ed6e:	231b      	movs	r3, #27
   1ed70:	18f9      	adds	r1, r7, r3
   1ed72:	4b5b      	ldr	r3, [pc, #364]	; (1eee0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed74:	2201      	movs	r2, #1
   1ed76:	0018      	movs	r0, r3
   1ed78:	4b5a      	ldr	r3, [pc, #360]	; (1eee4 <sd_mmc_spi_adtc_start+0x1fc>)
   1ed7a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1ed7c:	2314      	movs	r3, #20
   1ed7e:	18f9      	adds	r1, r7, r3
   1ed80:	4b57      	ldr	r3, [pc, #348]	; (1eee0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed82:	2206      	movs	r2, #6
   1ed84:	0018      	movs	r0, r3
   1ed86:	4b57      	ldr	r3, [pc, #348]	; (1eee4 <sd_mmc_spi_adtc_start+0x1fc>)
   1ed88:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1ed8a:	2313      	movs	r3, #19
   1ed8c:	18fb      	adds	r3, r7, r3
   1ed8e:	22ff      	movs	r2, #255	; 0xff
   1ed90:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ed92:	231c      	movs	r3, #28
   1ed94:	18fb      	adds	r3, r7, r3
   1ed96:	881b      	ldrh	r3, [r3, #0]
   1ed98:	2213      	movs	r2, #19
   1ed9a:	18b9      	adds	r1, r7, r2
   1ed9c:	4850      	ldr	r0, [pc, #320]	; (1eee0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ed9e:	2201      	movs	r2, #1
   1eda0:	4c51      	ldr	r4, [pc, #324]	; (1eee8 <sd_mmc_spi_adtc_start+0x200>)
   1eda2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1eda4:	231f      	movs	r3, #31
   1eda6:	18fb      	adds	r3, r7, r3
   1eda8:	2207      	movs	r2, #7
   1edaa:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1edac:	231c      	movs	r3, #28
   1edae:	18fb      	adds	r3, r7, r3
   1edb0:	881b      	ldrh	r3, [r3, #0]
   1edb2:	2213      	movs	r2, #19
   1edb4:	18b9      	adds	r1, r7, r2
   1edb6:	484a      	ldr	r0, [pc, #296]	; (1eee0 <sd_mmc_spi_adtc_start+0x1f8>)
   1edb8:	2201      	movs	r2, #1
   1edba:	4c4b      	ldr	r4, [pc, #300]	; (1eee8 <sd_mmc_spi_adtc_start+0x200>)
   1edbc:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1edbe:	2313      	movs	r3, #19
   1edc0:	18fb      	adds	r3, r7, r3
   1edc2:	781b      	ldrb	r3, [r3, #0]
   1edc4:	b25b      	sxtb	r3, r3
   1edc6:	2b00      	cmp	r3, #0
   1edc8:	da10      	bge.n	1edec <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1edca:	231f      	movs	r3, #31
   1edcc:	18fb      	adds	r3, r7, r3
   1edce:	221f      	movs	r2, #31
   1edd0:	18ba      	adds	r2, r7, r2
   1edd2:	7812      	ldrb	r2, [r2, #0]
   1edd4:	3a01      	subs	r2, #1
   1edd6:	701a      	strb	r2, [r3, #0]
   1edd8:	231f      	movs	r3, #31
   1edda:	18fb      	adds	r3, r7, r3
   1eddc:	781b      	ldrb	r3, [r3, #0]
   1edde:	2b00      	cmp	r3, #0
   1ede0:	d1e4      	bne.n	1edac <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1ede2:	4b3d      	ldr	r3, [pc, #244]	; (1eed8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ede4:	2202      	movs	r2, #2
   1ede6:	701a      	strb	r2, [r3, #0]
			return false;
   1ede8:	2300      	movs	r3, #0
   1edea:	e070      	b.n	1eece <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1edec:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1edee:	2313      	movs	r3, #19
   1edf0:	18fb      	adds	r3, r7, r3
   1edf2:	781b      	ldrb	r3, [r3, #0]
   1edf4:	001a      	movs	r2, r3
   1edf6:	4b3d      	ldr	r3, [pc, #244]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1edf8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1edfa:	2313      	movs	r3, #19
   1edfc:	18fb      	adds	r3, r7, r3
   1edfe:	781b      	ldrb	r3, [r3, #0]
   1ee00:	001a      	movs	r2, r3
   1ee02:	2308      	movs	r3, #8
   1ee04:	4013      	ands	r3, r2
   1ee06:	d004      	beq.n	1ee12 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1ee08:	4b33      	ldr	r3, [pc, #204]	; (1eed8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ee0a:	2206      	movs	r2, #6
   1ee0c:	701a      	strb	r2, [r3, #0]
		return false;
   1ee0e:	2300      	movs	r3, #0
   1ee10:	e05d      	b.n	1eece <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1ee12:	2313      	movs	r3, #19
   1ee14:	18fb      	adds	r3, r7, r3
   1ee16:	781b      	ldrb	r3, [r3, #0]
   1ee18:	001a      	movs	r2, r3
   1ee1a:	2304      	movs	r3, #4
   1ee1c:	4013      	ands	r3, r2
   1ee1e:	d004      	beq.n	1ee2a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1ee20:	4b2d      	ldr	r3, [pc, #180]	; (1eed8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ee22:	2209      	movs	r2, #9
   1ee24:	701a      	strb	r2, [r3, #0]
		return false;
   1ee26:	2300      	movs	r3, #0
   1ee28:	e051      	b.n	1eece <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1ee2a:	2313      	movs	r3, #19
   1ee2c:	18fb      	adds	r3, r7, r3
   1ee2e:	781b      	ldrb	r3, [r3, #0]
   1ee30:	001a      	movs	r2, r3
   1ee32:	2301      	movs	r3, #1
   1ee34:	439a      	bics	r2, r3
   1ee36:	1e13      	subs	r3, r2, #0
   1ee38:	d004      	beq.n	1ee44 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1ee3a:	4b27      	ldr	r3, [pc, #156]	; (1eed8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ee3c:	2201      	movs	r2, #1
   1ee3e:	701a      	strb	r2, [r3, #0]
		return false;
   1ee40:	2300      	movs	r3, #0
   1ee42:	e044      	b.n	1eece <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1ee44:	68fa      	ldr	r2, [r7, #12]
   1ee46:	2380      	movs	r3, #128	; 0x80
   1ee48:	019b      	lsls	r3, r3, #6
   1ee4a:	4013      	ands	r3, r2
   1ee4c:	d00d      	beq.n	1ee6a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1ee4e:	4b28      	ldr	r3, [pc, #160]	; (1eef0 <sd_mmc_spi_adtc_start+0x208>)
   1ee50:	4798      	blx	r3
   1ee52:	0003      	movs	r3, r0
   1ee54:	001a      	movs	r2, r3
   1ee56:	2301      	movs	r3, #1
   1ee58:	4053      	eors	r3, r2
   1ee5a:	b2db      	uxtb	r3, r3
   1ee5c:	2b00      	cmp	r3, #0
   1ee5e:	d004      	beq.n	1ee6a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1ee60:	4b1d      	ldr	r3, [pc, #116]	; (1eed8 <sd_mmc_spi_adtc_start+0x1f0>)
   1ee62:	2203      	movs	r2, #3
   1ee64:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1ee66:	2300      	movs	r3, #0
   1ee68:	e031      	b.n	1eece <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1ee6a:	68fa      	ldr	r2, [r7, #12]
   1ee6c:	2380      	movs	r3, #128	; 0x80
   1ee6e:	009b      	lsls	r3, r3, #2
   1ee70:	4013      	ands	r3, r2
   1ee72:	d00e      	beq.n	1ee92 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1ee74:	4b1d      	ldr	r3, [pc, #116]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1ee76:	2200      	movs	r2, #0
   1ee78:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1ee7a:	231c      	movs	r3, #28
   1ee7c:	18fb      	adds	r3, r7, r3
   1ee7e:	881b      	ldrh	r3, [r3, #0]
   1ee80:	491a      	ldr	r1, [pc, #104]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1ee82:	4817      	ldr	r0, [pc, #92]	; (1eee0 <sd_mmc_spi_adtc_start+0x1f8>)
   1ee84:	2201      	movs	r2, #1
   1ee86:	4c18      	ldr	r4, [pc, #96]	; (1eee8 <sd_mmc_spi_adtc_start+0x200>)
   1ee88:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1ee8a:	4b18      	ldr	r3, [pc, #96]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1ee8c:	681a      	ldr	r2, [r3, #0]
   1ee8e:	4b17      	ldr	r3, [pc, #92]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1ee90:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1ee92:	68fa      	ldr	r2, [r7, #12]
   1ee94:	2380      	movs	r3, #128	; 0x80
   1ee96:	00db      	lsls	r3, r3, #3
   1ee98:	4013      	ands	r3, r2
   1ee9a:	d00c      	beq.n	1eeb6 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1ee9c:	231c      	movs	r3, #28
   1ee9e:	18fb      	adds	r3, r7, r3
   1eea0:	881b      	ldrh	r3, [r3, #0]
   1eea2:	4912      	ldr	r1, [pc, #72]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1eea4:	480e      	ldr	r0, [pc, #56]	; (1eee0 <sd_mmc_spi_adtc_start+0x1f8>)
   1eea6:	2204      	movs	r2, #4
   1eea8:	4c0f      	ldr	r4, [pc, #60]	; (1eee8 <sd_mmc_spi_adtc_start+0x200>)
   1eeaa:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1eeac:	4b0f      	ldr	r3, [pc, #60]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1eeae:	681b      	ldr	r3, [r3, #0]
   1eeb0:	ba1a      	rev	r2, r3
   1eeb2:	4b0e      	ldr	r3, [pc, #56]	; (1eeec <sd_mmc_spi_adtc_start+0x204>)
   1eeb4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1eeb6:	4b0f      	ldr	r3, [pc, #60]	; (1eef4 <sd_mmc_spi_adtc_start+0x20c>)
   1eeb8:	1dba      	adds	r2, r7, #6
   1eeba:	8812      	ldrh	r2, [r2, #0]
   1eebc:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1eebe:	4b0e      	ldr	r3, [pc, #56]	; (1eef8 <sd_mmc_spi_adtc_start+0x210>)
   1eec0:	1d3a      	adds	r2, r7, #4
   1eec2:	8812      	ldrh	r2, [r2, #0]
   1eec4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1eec6:	4b0d      	ldr	r3, [pc, #52]	; (1eefc <sd_mmc_spi_adtc_start+0x214>)
   1eec8:	2200      	movs	r2, #0
   1eeca:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1eecc:	2301      	movs	r3, #1
}
   1eece:	0018      	movs	r0, r3
   1eed0:	46bd      	mov	sp, r7
   1eed2:	b009      	add	sp, #36	; 0x24
   1eed4:	bd90      	pop	{r4, r7, pc}
   1eed6:	46c0      	nop			; (mov r8, r8)
   1eed8:	2000425f 	.word	0x2000425f
   1eedc:	0001e789 	.word	0x0001e789
   1eee0:	2000421c 	.word	0x2000421c
   1eee4:	00027311 	.word	0x00027311
   1eee8:	000270ed 	.word	0x000270ed
   1eeec:	20004260 	.word	0x20004260
   1eef0:	0001e845 	.word	0x0001e845
   1eef4:	20004268 	.word	0x20004268
   1eef8:	2000426a 	.word	0x2000426a
   1eefc:	20004264 	.word	0x20004264

0001ef00 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1ef00:	b580      	push	{r7, lr}
   1ef02:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1ef04:	4b02      	ldr	r3, [pc, #8]	; (1ef10 <sd_mmc_spi_get_response+0x10>)
   1ef06:	681b      	ldr	r3, [r3, #0]
}
   1ef08:	0018      	movs	r0, r3
   1ef0a:	46bd      	mov	sp, r7
   1ef0c:	bd80      	pop	{r7, pc}
   1ef0e:	46c0      	nop			; (mov r8, r8)
   1ef10:	20004260 	.word	0x20004260

0001ef14 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1ef14:	b590      	push	{r4, r7, lr}
   1ef16:	b085      	sub	sp, #20
   1ef18:	af00      	add	r7, sp, #0
   1ef1a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1ef1c:	230e      	movs	r3, #14
   1ef1e:	18fb      	adds	r3, r7, r3
   1ef20:	22ff      	movs	r2, #255	; 0xff
   1ef22:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ef24:	4b1c      	ldr	r3, [pc, #112]	; (1ef98 <sd_mmc_spi_read_word+0x84>)
   1ef26:	2200      	movs	r2, #0
   1ef28:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1ef2a:	4b1c      	ldr	r3, [pc, #112]	; (1ef9c <sd_mmc_spi_read_word+0x88>)
   1ef2c:	681a      	ldr	r2, [r3, #0]
   1ef2e:	4b1c      	ldr	r3, [pc, #112]	; (1efa0 <sd_mmc_spi_read_word+0x8c>)
   1ef30:	881b      	ldrh	r3, [r3, #0]
   1ef32:	0019      	movs	r1, r3
   1ef34:	4b1b      	ldr	r3, [pc, #108]	; (1efa4 <sd_mmc_spi_read_word+0x90>)
   1ef36:	0010      	movs	r0, r2
   1ef38:	4798      	blx	r3
   1ef3a:	1e0b      	subs	r3, r1, #0
   1ef3c:	d10a      	bne.n	1ef54 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1ef3e:	4b1a      	ldr	r3, [pc, #104]	; (1efa8 <sd_mmc_spi_read_word+0x94>)
   1ef40:	4798      	blx	r3
   1ef42:	0003      	movs	r3, r0
   1ef44:	001a      	movs	r2, r3
   1ef46:	2301      	movs	r3, #1
   1ef48:	4053      	eors	r3, r2
   1ef4a:	b2db      	uxtb	r3, r3
   1ef4c:	2b00      	cmp	r3, #0
   1ef4e:	d001      	beq.n	1ef54 <sd_mmc_spi_read_word+0x40>
			return false;
   1ef50:	2300      	movs	r3, #0
   1ef52:	e01d      	b.n	1ef90 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1ef54:	230e      	movs	r3, #14
   1ef56:	18fb      	adds	r3, r7, r3
   1ef58:	881b      	ldrh	r3, [r3, #0]
   1ef5a:	1d39      	adds	r1, r7, #4
   1ef5c:	4813      	ldr	r0, [pc, #76]	; (1efac <sd_mmc_spi_read_word+0x98>)
   1ef5e:	2204      	movs	r2, #4
   1ef60:	4c13      	ldr	r4, [pc, #76]	; (1efb0 <sd_mmc_spi_read_word+0x9c>)
   1ef62:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1ef64:	687b      	ldr	r3, [r7, #4]
   1ef66:	687a      	ldr	r2, [r7, #4]
   1ef68:	6812      	ldr	r2, [r2, #0]
   1ef6a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1ef6c:	4b0b      	ldr	r3, [pc, #44]	; (1ef9c <sd_mmc_spi_read_word+0x88>)
   1ef6e:	681b      	ldr	r3, [r3, #0]
   1ef70:	1d1a      	adds	r2, r3, #4
   1ef72:	4b0a      	ldr	r3, [pc, #40]	; (1ef9c <sd_mmc_spi_read_word+0x88>)
   1ef74:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1ef76:	4b09      	ldr	r3, [pc, #36]	; (1ef9c <sd_mmc_spi_read_word+0x88>)
   1ef78:	681a      	ldr	r2, [r3, #0]
   1ef7a:	4b09      	ldr	r3, [pc, #36]	; (1efa0 <sd_mmc_spi_read_word+0x8c>)
   1ef7c:	881b      	ldrh	r3, [r3, #0]
   1ef7e:	0019      	movs	r1, r3
   1ef80:	4b08      	ldr	r3, [pc, #32]	; (1efa4 <sd_mmc_spi_read_word+0x90>)
   1ef82:	0010      	movs	r0, r2
   1ef84:	4798      	blx	r3
   1ef86:	1e0b      	subs	r3, r1, #0
   1ef88:	d101      	bne.n	1ef8e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1ef8a:	4b0a      	ldr	r3, [pc, #40]	; (1efb4 <sd_mmc_spi_read_word+0xa0>)
   1ef8c:	4798      	blx	r3
	}
	return true;
   1ef8e:	2301      	movs	r3, #1
}
   1ef90:	0018      	movs	r0, r3
   1ef92:	46bd      	mov	sp, r7
   1ef94:	b005      	add	sp, #20
   1ef96:	bd90      	pop	{r4, r7, pc}
   1ef98:	2000425f 	.word	0x2000425f
   1ef9c:	20004264 	.word	0x20004264
   1efa0:	20004268 	.word	0x20004268
   1efa4:	00031c61 	.word	0x00031c61
   1efa8:	0001e8b1 	.word	0x0001e8b1
   1efac:	2000421c 	.word	0x2000421c
   1efb0:	000270ed 	.word	0x000270ed
   1efb4:	0001e935 	.word	0x0001e935

0001efb8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1efb8:	b590      	push	{r4, r7, lr}
   1efba:	b085      	sub	sp, #20
   1efbc:	af00      	add	r7, sp, #0
   1efbe:	6078      	str	r0, [r7, #4]
   1efc0:	000a      	movs	r2, r1
   1efc2:	1cbb      	adds	r3, r7, #2
   1efc4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1efc6:	230a      	movs	r3, #10
   1efc8:	18fb      	adds	r3, r7, r3
   1efca:	22ff      	movs	r2, #255	; 0xff
   1efcc:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1efce:	4b1c      	ldr	r3, [pc, #112]	; (1f040 <sd_mmc_spi_start_read_blocks+0x88>)
   1efd0:	2200      	movs	r2, #0
   1efd2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1efd4:	2300      	movs	r3, #0
   1efd6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1efd8:	e025      	b.n	1f026 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1efda:	4b1a      	ldr	r3, [pc, #104]	; (1f044 <sd_mmc_spi_start_read_blocks+0x8c>)
   1efdc:	4798      	blx	r3
   1efde:	0003      	movs	r3, r0
   1efe0:	001a      	movs	r2, r3
   1efe2:	2301      	movs	r3, #1
   1efe4:	4053      	eors	r3, r2
   1efe6:	b2db      	uxtb	r3, r3
   1efe8:	2b00      	cmp	r3, #0
   1efea:	d001      	beq.n	1eff0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1efec:	2300      	movs	r3, #0
   1efee:	e022      	b.n	1f036 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1eff0:	687a      	ldr	r2, [r7, #4]
   1eff2:	68fb      	ldr	r3, [r7, #12]
   1eff4:	18d1      	adds	r1, r2, r3
   1eff6:	4b14      	ldr	r3, [pc, #80]	; (1f048 <sd_mmc_spi_start_read_blocks+0x90>)
   1eff8:	881a      	ldrh	r2, [r3, #0]
   1effa:	230a      	movs	r3, #10
   1effc:	18fb      	adds	r3, r7, r3
   1effe:	881b      	ldrh	r3, [r3, #0]
   1f000:	4812      	ldr	r0, [pc, #72]	; (1f04c <sd_mmc_spi_start_read_blocks+0x94>)
   1f002:	4c13      	ldr	r4, [pc, #76]	; (1f050 <sd_mmc_spi_start_read_blocks+0x98>)
   1f004:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f006:	4b10      	ldr	r3, [pc, #64]	; (1f048 <sd_mmc_spi_start_read_blocks+0x90>)
   1f008:	881b      	ldrh	r3, [r3, #0]
   1f00a:	001a      	movs	r2, r3
   1f00c:	68fb      	ldr	r3, [r7, #12]
   1f00e:	189b      	adds	r3, r3, r2
   1f010:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f012:	4b0d      	ldr	r3, [pc, #52]	; (1f048 <sd_mmc_spi_start_read_blocks+0x90>)
   1f014:	881b      	ldrh	r3, [r3, #0]
   1f016:	001a      	movs	r2, r3
   1f018:	4b0e      	ldr	r3, [pc, #56]	; (1f054 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f01a:	681b      	ldr	r3, [r3, #0]
   1f01c:	18d2      	adds	r2, r2, r3
   1f01e:	4b0d      	ldr	r3, [pc, #52]	; (1f054 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f020:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f022:	4b0d      	ldr	r3, [pc, #52]	; (1f058 <sd_mmc_spi_start_read_blocks+0xa0>)
   1f024:	4798      	blx	r3
	while (nb_block--) {
   1f026:	1cbb      	adds	r3, r7, #2
   1f028:	881b      	ldrh	r3, [r3, #0]
   1f02a:	1cba      	adds	r2, r7, #2
   1f02c:	1e59      	subs	r1, r3, #1
   1f02e:	8011      	strh	r1, [r2, #0]
   1f030:	2b00      	cmp	r3, #0
   1f032:	d1d2      	bne.n	1efda <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f034:	2301      	movs	r3, #1
}
   1f036:	0018      	movs	r0, r3
   1f038:	46bd      	mov	sp, r7
   1f03a:	b005      	add	sp, #20
   1f03c:	bd90      	pop	{r4, r7, pc}
   1f03e:	46c0      	nop			; (mov r8, r8)
   1f040:	2000425f 	.word	0x2000425f
   1f044:	0001e8b1 	.word	0x0001e8b1
   1f048:	20004268 	.word	0x20004268
   1f04c:	2000421c 	.word	0x2000421c
   1f050:	000270ed 	.word	0x000270ed
   1f054:	20004264 	.word	0x20004264
   1f058:	0001e935 	.word	0x0001e935

0001f05c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f05c:	b580      	push	{r7, lr}
   1f05e:	af00      	add	r7, sp, #0
	return true;
   1f060:	2301      	movs	r3, #1
}
   1f062:	0018      	movs	r0, r3
   1f064:	46bd      	mov	sp, r7
   1f066:	bd80      	pop	{r7, pc}

0001f068 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f068:	b580      	push	{r7, lr}
   1f06a:	b084      	sub	sp, #16
   1f06c:	af00      	add	r7, sp, #0
   1f06e:	6078      	str	r0, [r7, #4]
   1f070:	000a      	movs	r2, r1
   1f072:	1cbb      	adds	r3, r7, #2
   1f074:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f076:	4b24      	ldr	r3, [pc, #144]	; (1f108 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f078:	2200      	movs	r2, #0
   1f07a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f07c:	2300      	movs	r3, #0
   1f07e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f080:	e035      	b.n	1f0ee <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f082:	4b22      	ldr	r3, [pc, #136]	; (1f10c <sd_mmc_spi_start_write_blocks+0xa4>)
   1f084:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f086:	687a      	ldr	r2, [r7, #4]
   1f088:	68fb      	ldr	r3, [r7, #12]
   1f08a:	18d1      	adds	r1, r2, r3
   1f08c:	4b20      	ldr	r3, [pc, #128]	; (1f110 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f08e:	881a      	ldrh	r2, [r3, #0]
   1f090:	4b20      	ldr	r3, [pc, #128]	; (1f114 <sd_mmc_spi_start_write_blocks+0xac>)
   1f092:	0018      	movs	r0, r3
   1f094:	4b20      	ldr	r3, [pc, #128]	; (1f118 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f096:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f098:	4b1d      	ldr	r3, [pc, #116]	; (1f110 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f09a:	881b      	ldrh	r3, [r3, #0]
   1f09c:	001a      	movs	r2, r3
   1f09e:	68fb      	ldr	r3, [r7, #12]
   1f0a0:	189b      	adds	r3, r3, r2
   1f0a2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f0a4:	4b1a      	ldr	r3, [pc, #104]	; (1f110 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f0a6:	881b      	ldrh	r3, [r3, #0]
   1f0a8:	001a      	movs	r2, r3
   1f0aa:	4b1c      	ldr	r3, [pc, #112]	; (1f11c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f0ac:	681b      	ldr	r3, [r3, #0]
   1f0ae:	18d2      	adds	r2, r2, r3
   1f0b0:	4b1a      	ldr	r3, [pc, #104]	; (1f11c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f0b2:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f0b4:	4b1a      	ldr	r3, [pc, #104]	; (1f120 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f0b6:	4798      	blx	r3
   1f0b8:	0003      	movs	r3, r0
   1f0ba:	001a      	movs	r2, r3
   1f0bc:	2301      	movs	r3, #1
   1f0be:	4053      	eors	r3, r2
   1f0c0:	b2db      	uxtb	r3, r3
   1f0c2:	2b00      	cmp	r3, #0
   1f0c4:	d001      	beq.n	1f0ca <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f0c6:	2300      	movs	r3, #0
   1f0c8:	e019      	b.n	1f0fe <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f0ca:	1cbb      	adds	r3, r7, #2
   1f0cc:	881b      	ldrh	r3, [r3, #0]
   1f0ce:	2b00      	cmp	r3, #0
   1f0d0:	d00d      	beq.n	1f0ee <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f0d2:	4b14      	ldr	r3, [pc, #80]	; (1f124 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f0d4:	4798      	blx	r3
   1f0d6:	0003      	movs	r3, r0
   1f0d8:	001a      	movs	r2, r3
   1f0da:	2301      	movs	r3, #1
   1f0dc:	4053      	eors	r3, r2
   1f0de:	b2db      	uxtb	r3, r3
   1f0e0:	2b00      	cmp	r3, #0
   1f0e2:	d004      	beq.n	1f0ee <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f0e4:	4b08      	ldr	r3, [pc, #32]	; (1f108 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f0e6:	2205      	movs	r2, #5
   1f0e8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f0ea:	2300      	movs	r3, #0
   1f0ec:	e007      	b.n	1f0fe <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f0ee:	1cbb      	adds	r3, r7, #2
   1f0f0:	881b      	ldrh	r3, [r3, #0]
   1f0f2:	1cba      	adds	r2, r7, #2
   1f0f4:	1e59      	subs	r1, r3, #1
   1f0f6:	8011      	strh	r1, [r2, #0]
   1f0f8:	2b00      	cmp	r3, #0
   1f0fa:	d1c2      	bne.n	1f082 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1f0fc:	2301      	movs	r3, #1
}
   1f0fe:	0018      	movs	r0, r3
   1f100:	46bd      	mov	sp, r7
   1f102:	b004      	add	sp, #16
   1f104:	bd80      	pop	{r7, pc}
   1f106:	46c0      	nop			; (mov r8, r8)
   1f108:	2000425f 	.word	0x2000425f
   1f10c:	0001e961 	.word	0x0001e961
   1f110:	20004268 	.word	0x20004268
   1f114:	2000421c 	.word	0x2000421c
   1f118:	00027311 	.word	0x00027311
   1f11c:	20004264 	.word	0x20004264
   1f120:	0001e9b1 	.word	0x0001e9b1
   1f124:	0001e845 	.word	0x0001e845

0001f128 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1f128:	b580      	push	{r7, lr}
   1f12a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1f12c:	4b09      	ldr	r3, [pc, #36]	; (1f154 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1f12e:	4798      	blx	r3
   1f130:	0003      	movs	r3, r0
   1f132:	001a      	movs	r2, r3
   1f134:	2301      	movs	r3, #1
   1f136:	4053      	eors	r3, r2
   1f138:	b2db      	uxtb	r3, r3
   1f13a:	2b00      	cmp	r3, #0
   1f13c:	d004      	beq.n	1f148 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f13e:	4b06      	ldr	r3, [pc, #24]	; (1f158 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1f140:	2205      	movs	r2, #5
   1f142:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1f144:	2300      	movs	r3, #0
   1f146:	e002      	b.n	1f14e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1f148:	4b04      	ldr	r3, [pc, #16]	; (1f15c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1f14a:	4798      	blx	r3
   1f14c:	0003      	movs	r3, r0
}
   1f14e:	0018      	movs	r0, r3
   1f150:	46bd      	mov	sp, r7
   1f152:	bd80      	pop	{r7, pc}
   1f154:	0001e845 	.word	0x0001e845
   1f158:	2000425f 	.word	0x2000425f
   1f15c:	0001ea45 	.word	0x0001ea45

0001f160 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1f160:	b580      	push	{r7, lr}
   1f162:	b082      	sub	sp, #8
   1f164:	af00      	add	r7, sp, #0
   1f166:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1f168:	687b      	ldr	r3, [r7, #4]
   1f16a:	2b00      	cmp	r3, #0
   1f16c:	d00c      	beq.n	1f188 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1f16e:	4b08      	ldr	r3, [pc, #32]	; (1f190 <delay_cycles+0x30>)
   1f170:	687a      	ldr	r2, [r7, #4]
   1f172:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1f174:	4b06      	ldr	r3, [pc, #24]	; (1f190 <delay_cycles+0x30>)
   1f176:	2200      	movs	r2, #0
   1f178:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1f17a:	46c0      	nop			; (mov r8, r8)
   1f17c:	4b04      	ldr	r3, [pc, #16]	; (1f190 <delay_cycles+0x30>)
   1f17e:	681a      	ldr	r2, [r3, #0]
   1f180:	2380      	movs	r3, #128	; 0x80
   1f182:	025b      	lsls	r3, r3, #9
   1f184:	4013      	ands	r3, r2
   1f186:	d0f9      	beq.n	1f17c <delay_cycles+0x1c>
		};
	}
}
   1f188:	46c0      	nop			; (mov r8, r8)
   1f18a:	46bd      	mov	sp, r7
   1f18c:	b002      	add	sp, #8
   1f18e:	bd80      	pop	{r7, pc}
   1f190:	e000e010 	.word	0xe000e010

0001f194 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f194:	b580      	push	{r7, lr}
   1f196:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f198:	2000      	movs	r0, #0
   1f19a:	4b0f      	ldr	r3, [pc, #60]	; (1f1d8 <delay_init+0x44>)
   1f19c:	4798      	blx	r3
   1f19e:	0002      	movs	r2, r0
   1f1a0:	4b0e      	ldr	r3, [pc, #56]	; (1f1dc <delay_init+0x48>)
   1f1a2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1f1a4:	4b0d      	ldr	r3, [pc, #52]	; (1f1dc <delay_init+0x48>)
   1f1a6:	6818      	ldr	r0, [r3, #0]
   1f1a8:	4b0d      	ldr	r3, [pc, #52]	; (1f1e0 <delay_init+0x4c>)
   1f1aa:	22fa      	movs	r2, #250	; 0xfa
   1f1ac:	0091      	lsls	r1, r2, #2
   1f1ae:	4798      	blx	r3
   1f1b0:	0003      	movs	r3, r0
   1f1b2:	001a      	movs	r2, r3
   1f1b4:	4b09      	ldr	r3, [pc, #36]	; (1f1dc <delay_init+0x48>)
   1f1b6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f1b8:	4b08      	ldr	r3, [pc, #32]	; (1f1dc <delay_init+0x48>)
   1f1ba:	6818      	ldr	r0, [r3, #0]
   1f1bc:	4b08      	ldr	r3, [pc, #32]	; (1f1e0 <delay_init+0x4c>)
   1f1be:	22fa      	movs	r2, #250	; 0xfa
   1f1c0:	0091      	lsls	r1, r2, #2
   1f1c2:	4798      	blx	r3
   1f1c4:	0003      	movs	r3, r0
   1f1c6:	001a      	movs	r2, r3
   1f1c8:	4b06      	ldr	r3, [pc, #24]	; (1f1e4 <delay_init+0x50>)
   1f1ca:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f1cc:	4b06      	ldr	r3, [pc, #24]	; (1f1e8 <delay_init+0x54>)
   1f1ce:	2205      	movs	r2, #5
   1f1d0:	601a      	str	r2, [r3, #0]
}
   1f1d2:	46c0      	nop			; (mov r8, r8)
   1f1d4:	46bd      	mov	sp, r7
   1f1d6:	bd80      	pop	{r7, pc}
   1f1d8:	00028e95 	.word	0x00028e95
   1f1dc:	2000010c 	.word	0x2000010c
   1f1e0:	00031b55 	.word	0x00031b55
   1f1e4:	20000110 	.word	0x20000110
   1f1e8:	e000e010 	.word	0xe000e010

0001f1ec <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1f1ec:	b580      	push	{r7, lr}
   1f1ee:	b082      	sub	sp, #8
   1f1f0:	af00      	add	r7, sp, #0
   1f1f2:	6078      	str	r0, [r7, #4]
	while (n--) {
   1f1f4:	e004      	b.n	1f200 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1f1f6:	4b07      	ldr	r3, [pc, #28]	; (1f214 <delay_cycles_ms+0x28>)
   1f1f8:	681b      	ldr	r3, [r3, #0]
   1f1fa:	0018      	movs	r0, r3
   1f1fc:	4b06      	ldr	r3, [pc, #24]	; (1f218 <delay_cycles_ms+0x2c>)
   1f1fe:	4798      	blx	r3
	while (n--) {
   1f200:	687b      	ldr	r3, [r7, #4]
   1f202:	1e5a      	subs	r2, r3, #1
   1f204:	607a      	str	r2, [r7, #4]
   1f206:	2b00      	cmp	r3, #0
   1f208:	d1f5      	bne.n	1f1f6 <delay_cycles_ms+0xa>
	}
}
   1f20a:	46c0      	nop			; (mov r8, r8)
   1f20c:	46bd      	mov	sp, r7
   1f20e:	b002      	add	sp, #8
   1f210:	bd80      	pop	{r7, pc}
   1f212:	46c0      	nop			; (mov r8, r8)
   1f214:	2000010c 	.word	0x2000010c
   1f218:	0001f161 	.word	0x0001f161

0001f21c <system_pinmux_get_group_from_gpio_pin>:
{
   1f21c:	b580      	push	{r7, lr}
   1f21e:	b084      	sub	sp, #16
   1f220:	af00      	add	r7, sp, #0
   1f222:	0002      	movs	r2, r0
   1f224:	1dfb      	adds	r3, r7, #7
   1f226:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f228:	230f      	movs	r3, #15
   1f22a:	18fb      	adds	r3, r7, r3
   1f22c:	1dfa      	adds	r2, r7, #7
   1f22e:	7812      	ldrb	r2, [r2, #0]
   1f230:	09d2      	lsrs	r2, r2, #7
   1f232:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f234:	230e      	movs	r3, #14
   1f236:	18fb      	adds	r3, r7, r3
   1f238:	1dfa      	adds	r2, r7, #7
   1f23a:	7812      	ldrb	r2, [r2, #0]
   1f23c:	0952      	lsrs	r2, r2, #5
   1f23e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f240:	4b0d      	ldr	r3, [pc, #52]	; (1f278 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f242:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f244:	230f      	movs	r3, #15
   1f246:	18fb      	adds	r3, r7, r3
   1f248:	781b      	ldrb	r3, [r3, #0]
   1f24a:	2b00      	cmp	r3, #0
   1f24c:	d10f      	bne.n	1f26e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f24e:	230f      	movs	r3, #15
   1f250:	18fb      	adds	r3, r7, r3
   1f252:	781b      	ldrb	r3, [r3, #0]
   1f254:	009b      	lsls	r3, r3, #2
   1f256:	2210      	movs	r2, #16
   1f258:	4694      	mov	ip, r2
   1f25a:	44bc      	add	ip, r7
   1f25c:	4463      	add	r3, ip
   1f25e:	3b08      	subs	r3, #8
   1f260:	681a      	ldr	r2, [r3, #0]
   1f262:	230e      	movs	r3, #14
   1f264:	18fb      	adds	r3, r7, r3
   1f266:	781b      	ldrb	r3, [r3, #0]
   1f268:	01db      	lsls	r3, r3, #7
   1f26a:	18d3      	adds	r3, r2, r3
   1f26c:	e000      	b.n	1f270 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f26e:	2300      	movs	r3, #0
}
   1f270:	0018      	movs	r0, r3
   1f272:	46bd      	mov	sp, r7
   1f274:	b004      	add	sp, #16
   1f276:	bd80      	pop	{r7, pc}
   1f278:	41004400 	.word	0x41004400

0001f27c <system_interrupt_enable_global>:
{
   1f27c:	b580      	push	{r7, lr}
   1f27e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1f280:	4b04      	ldr	r3, [pc, #16]	; (1f294 <system_interrupt_enable_global+0x18>)
   1f282:	2201      	movs	r2, #1
   1f284:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1f286:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1f28a:	b662      	cpsie	i
}
   1f28c:	46c0      	nop			; (mov r8, r8)
   1f28e:	46bd      	mov	sp, r7
   1f290:	bd80      	pop	{r7, pc}
   1f292:	46c0      	nop			; (mov r8, r8)
   1f294:	20000116 	.word	0x20000116

0001f298 <port_get_group_from_gpio_pin>:
{
   1f298:	b580      	push	{r7, lr}
   1f29a:	b082      	sub	sp, #8
   1f29c:	af00      	add	r7, sp, #0
   1f29e:	0002      	movs	r2, r0
   1f2a0:	1dfb      	adds	r3, r7, #7
   1f2a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f2a4:	1dfb      	adds	r3, r7, #7
   1f2a6:	781b      	ldrb	r3, [r3, #0]
   1f2a8:	0018      	movs	r0, r3
   1f2aa:	4b03      	ldr	r3, [pc, #12]	; (1f2b8 <port_get_group_from_gpio_pin+0x20>)
   1f2ac:	4798      	blx	r3
   1f2ae:	0003      	movs	r3, r0
}
   1f2b0:	0018      	movs	r0, r3
   1f2b2:	46bd      	mov	sp, r7
   1f2b4:	b002      	add	sp, #8
   1f2b6:	bd80      	pop	{r7, pc}
   1f2b8:	0001f21d 	.word	0x0001f21d

0001f2bc <port_get_config_defaults>:
{
   1f2bc:	b580      	push	{r7, lr}
   1f2be:	b082      	sub	sp, #8
   1f2c0:	af00      	add	r7, sp, #0
   1f2c2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f2c4:	687b      	ldr	r3, [r7, #4]
   1f2c6:	2200      	movs	r2, #0
   1f2c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f2ca:	687b      	ldr	r3, [r7, #4]
   1f2cc:	2201      	movs	r2, #1
   1f2ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f2d0:	687b      	ldr	r3, [r7, #4]
   1f2d2:	2200      	movs	r2, #0
   1f2d4:	709a      	strb	r2, [r3, #2]
}
   1f2d6:	46c0      	nop			; (mov r8, r8)
   1f2d8:	46bd      	mov	sp, r7
   1f2da:	b002      	add	sp, #8
   1f2dc:	bd80      	pop	{r7, pc}
	...

0001f2e0 <port_pin_set_output_level>:
{
   1f2e0:	b580      	push	{r7, lr}
   1f2e2:	b084      	sub	sp, #16
   1f2e4:	af00      	add	r7, sp, #0
   1f2e6:	0002      	movs	r2, r0
   1f2e8:	1dfb      	adds	r3, r7, #7
   1f2ea:	701a      	strb	r2, [r3, #0]
   1f2ec:	1dbb      	adds	r3, r7, #6
   1f2ee:	1c0a      	adds	r2, r1, #0
   1f2f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f2f2:	1dfb      	adds	r3, r7, #7
   1f2f4:	781b      	ldrb	r3, [r3, #0]
   1f2f6:	0018      	movs	r0, r3
   1f2f8:	4b0d      	ldr	r3, [pc, #52]	; (1f330 <port_pin_set_output_level+0x50>)
   1f2fa:	4798      	blx	r3
   1f2fc:	0003      	movs	r3, r0
   1f2fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f300:	1dfb      	adds	r3, r7, #7
   1f302:	781b      	ldrb	r3, [r3, #0]
   1f304:	221f      	movs	r2, #31
   1f306:	4013      	ands	r3, r2
   1f308:	2201      	movs	r2, #1
   1f30a:	409a      	lsls	r2, r3
   1f30c:	0013      	movs	r3, r2
   1f30e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f310:	1dbb      	adds	r3, r7, #6
   1f312:	781b      	ldrb	r3, [r3, #0]
   1f314:	2b00      	cmp	r3, #0
   1f316:	d003      	beq.n	1f320 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f318:	68fb      	ldr	r3, [r7, #12]
   1f31a:	68ba      	ldr	r2, [r7, #8]
   1f31c:	619a      	str	r2, [r3, #24]
}
   1f31e:	e002      	b.n	1f326 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f320:	68fb      	ldr	r3, [r7, #12]
   1f322:	68ba      	ldr	r2, [r7, #8]
   1f324:	615a      	str	r2, [r3, #20]
}
   1f326:	46c0      	nop			; (mov r8, r8)
   1f328:	46bd      	mov	sp, r7
   1f32a:	b004      	add	sp, #16
   1f32c:	bd80      	pop	{r7, pc}
   1f32e:	46c0      	nop			; (mov r8, r8)
   1f330:	0001f299 	.word	0x0001f299

0001f334 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1f334:	b580      	push	{r7, lr}
   1f336:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1f338:	4b04      	ldr	r3, [pc, #16]	; (1f34c <chip_isr+0x18>)
   1f33a:	681b      	ldr	r3, [r3, #0]
   1f33c:	2b00      	cmp	r3, #0
   1f33e:	d002      	beq.n	1f346 <chip_isr+0x12>
		gpfIsr();
   1f340:	4b02      	ldr	r3, [pc, #8]	; (1f34c <chip_isr+0x18>)
   1f342:	681b      	ldr	r3, [r3, #0]
   1f344:	4798      	blx	r3
	}
}
   1f346:	46c0      	nop			; (mov r8, r8)
   1f348:	46bd      	mov	sp, r7
   1f34a:	bd80      	pop	{r7, pc}
   1f34c:	2000426c 	.word	0x2000426c

0001f350 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1f350:	b580      	push	{r7, lr}
   1f352:	b082      	sub	sp, #8
   1f354:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1f356:	1d3b      	adds	r3, r7, #4
   1f358:	0018      	movs	r0, r3
   1f35a:	4b10      	ldr	r3, [pc, #64]	; (1f39c <init_chip_pins+0x4c>)
   1f35c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1f35e:	1d3b      	adds	r3, r7, #4
   1f360:	2201      	movs	r2, #1
   1f362:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1f364:	1d3b      	adds	r3, r7, #4
   1f366:	0019      	movs	r1, r3
   1f368:	201b      	movs	r0, #27
   1f36a:	4b0d      	ldr	r3, [pc, #52]	; (1f3a0 <init_chip_pins+0x50>)
   1f36c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1f36e:	1d3b      	adds	r3, r7, #4
   1f370:	0019      	movs	r1, r3
   1f372:	201c      	movs	r0, #28
   1f374:	4b0a      	ldr	r3, [pc, #40]	; (1f3a0 <init_chip_pins+0x50>)
   1f376:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1f378:	1d3b      	adds	r3, r7, #4
   1f37a:	0019      	movs	r1, r3
   1f37c:	2028      	movs	r0, #40	; 0x28
   1f37e:	4b08      	ldr	r3, [pc, #32]	; (1f3a0 <init_chip_pins+0x50>)
   1f380:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f382:	2100      	movs	r1, #0
   1f384:	201c      	movs	r0, #28
   1f386:	4b07      	ldr	r3, [pc, #28]	; (1f3a4 <init_chip_pins+0x54>)
   1f388:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f38a:	2100      	movs	r1, #0
   1f38c:	201b      	movs	r0, #27
   1f38e:	4b05      	ldr	r3, [pc, #20]	; (1f3a4 <init_chip_pins+0x54>)
   1f390:	4798      	blx	r3
}
   1f392:	46c0      	nop			; (mov r8, r8)
   1f394:	46bd      	mov	sp, r7
   1f396:	b002      	add	sp, #8
   1f398:	bd80      	pop	{r7, pc}
   1f39a:	46c0      	nop			; (mov r8, r8)
   1f39c:	0001f2bd 	.word	0x0001f2bd
   1f3a0:	00025add 	.word	0x00025add
   1f3a4:	0001f2e1 	.word	0x0001f2e1

0001f3a8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1f3a8:	b580      	push	{r7, lr}
   1f3aa:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1f3ac:	4b0b      	ldr	r3, [pc, #44]	; (1f3dc <nm_bsp_init+0x34>)
   1f3ae:	2200      	movs	r2, #0
   1f3b0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1f3b2:	4b0b      	ldr	r3, [pc, #44]	; (1f3e0 <nm_bsp_init+0x38>)
   1f3b4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1f3b6:	4b0b      	ldr	r3, [pc, #44]	; (1f3e4 <nm_bsp_init+0x3c>)
   1f3b8:	681b      	ldr	r3, [r3, #0]
   1f3ba:	2201      	movs	r2, #1
   1f3bc:	4013      	ands	r3, r2
   1f3be:	d004      	beq.n	1f3ca <nm_bsp_init+0x22>
   1f3c0:	4b08      	ldr	r3, [pc, #32]	; (1f3e4 <nm_bsp_init+0x3c>)
   1f3c2:	681b      	ldr	r3, [r3, #0]
   1f3c4:	2202      	movs	r2, #2
   1f3c6:	4013      	ands	r3, r2
   1f3c8:	d101      	bne.n	1f3ce <nm_bsp_init+0x26>
	    delay_init();
   1f3ca:	4b07      	ldr	r3, [pc, #28]	; (1f3e8 <nm_bsp_init+0x40>)
   1f3cc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1f3ce:	4b07      	ldr	r3, [pc, #28]	; (1f3ec <nm_bsp_init+0x44>)
   1f3d0:	4798      	blx	r3

	return M2M_SUCCESS;
   1f3d2:	2300      	movs	r3, #0
}
   1f3d4:	0018      	movs	r0, r3
   1f3d6:	46bd      	mov	sp, r7
   1f3d8:	bd80      	pop	{r7, pc}
   1f3da:	46c0      	nop			; (mov r8, r8)
   1f3dc:	2000426c 	.word	0x2000426c
   1f3e0:	0001f351 	.word	0x0001f351
   1f3e4:	e000e010 	.word	0xe000e010
   1f3e8:	0001f195 	.word	0x0001f195
   1f3ec:	0001f27d 	.word	0x0001f27d

0001f3f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1f3f0:	b580      	push	{r7, lr}
   1f3f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f3f4:	2100      	movs	r1, #0
   1f3f6:	201c      	movs	r0, #28
   1f3f8:	4b0b      	ldr	r3, [pc, #44]	; (1f428 <nm_bsp_reset+0x38>)
   1f3fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f3fc:	2100      	movs	r1, #0
   1f3fe:	201b      	movs	r0, #27
   1f400:	4b09      	ldr	r3, [pc, #36]	; (1f428 <nm_bsp_reset+0x38>)
   1f402:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f404:	2001      	movs	r0, #1
   1f406:	4b09      	ldr	r3, [pc, #36]	; (1f42c <nm_bsp_reset+0x3c>)
   1f408:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1f40a:	2101      	movs	r1, #1
   1f40c:	201c      	movs	r0, #28
   1f40e:	4b06      	ldr	r3, [pc, #24]	; (1f428 <nm_bsp_reset+0x38>)
   1f410:	4798      	blx	r3
	nm_bsp_sleep(10);
   1f412:	200a      	movs	r0, #10
   1f414:	4b05      	ldr	r3, [pc, #20]	; (1f42c <nm_bsp_reset+0x3c>)
   1f416:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1f418:	2101      	movs	r1, #1
   1f41a:	201b      	movs	r0, #27
   1f41c:	4b02      	ldr	r3, [pc, #8]	; (1f428 <nm_bsp_reset+0x38>)
   1f41e:	4798      	blx	r3
}
   1f420:	46c0      	nop			; (mov r8, r8)
   1f422:	46bd      	mov	sp, r7
   1f424:	bd80      	pop	{r7, pc}
   1f426:	46c0      	nop			; (mov r8, r8)
   1f428:	0001f2e1 	.word	0x0001f2e1
   1f42c:	0001f431 	.word	0x0001f431

0001f430 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1f430:	b580      	push	{r7, lr}
   1f432:	b082      	sub	sp, #8
   1f434:	af00      	add	r7, sp, #0
   1f436:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1f438:	687b      	ldr	r3, [r7, #4]
   1f43a:	0018      	movs	r0, r3
   1f43c:	4b02      	ldr	r3, [pc, #8]	; (1f448 <nm_bsp_sleep+0x18>)
   1f43e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1f440:	46c0      	nop			; (mov r8, r8)
   1f442:	46bd      	mov	sp, r7
   1f444:	b002      	add	sp, #8
   1f446:	bd80      	pop	{r7, pc}
   1f448:	0001b1e1 	.word	0x0001b1e1

0001f44c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1f44c:	b580      	push	{r7, lr}
   1f44e:	b086      	sub	sp, #24
   1f450:	af00      	add	r7, sp, #0
   1f452:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1f454:	4b15      	ldr	r3, [pc, #84]	; (1f4ac <nm_bsp_register_isr+0x60>)
   1f456:	687a      	ldr	r2, [r7, #4]
   1f458:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1f45a:	230c      	movs	r3, #12
   1f45c:	18fb      	adds	r3, r7, r3
   1f45e:	0018      	movs	r0, r3
   1f460:	4b13      	ldr	r3, [pc, #76]	; (1f4b0 <nm_bsp_register_isr+0x64>)
   1f462:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1f464:	230c      	movs	r3, #12
   1f466:	18fb      	adds	r3, r7, r3
   1f468:	2229      	movs	r2, #41	; 0x29
   1f46a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1f46c:	230c      	movs	r3, #12
   1f46e:	18fb      	adds	r3, r7, r3
   1f470:	2200      	movs	r2, #0
   1f472:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1f474:	230c      	movs	r3, #12
   1f476:	18fb      	adds	r3, r7, r3
   1f478:	2201      	movs	r2, #1
   1f47a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1f47c:	230c      	movs	r3, #12
   1f47e:	18fb      	adds	r3, r7, r3
   1f480:	2202      	movs	r2, #2
   1f482:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1f484:	230c      	movs	r3, #12
   1f486:	18fb      	adds	r3, r7, r3
   1f488:	0019      	movs	r1, r3
   1f48a:	2009      	movs	r0, #9
   1f48c:	4b09      	ldr	r3, [pc, #36]	; (1f4b4 <nm_bsp_register_isr+0x68>)
   1f48e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1f490:	4b09      	ldr	r3, [pc, #36]	; (1f4b8 <nm_bsp_register_isr+0x6c>)
   1f492:	2200      	movs	r2, #0
   1f494:	2109      	movs	r1, #9
   1f496:	0018      	movs	r0, r3
   1f498:	4b08      	ldr	r3, [pc, #32]	; (1f4bc <nm_bsp_register_isr+0x70>)
   1f49a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f49c:	2100      	movs	r1, #0
   1f49e:	2009      	movs	r0, #9
   1f4a0:	4b07      	ldr	r3, [pc, #28]	; (1f4c0 <nm_bsp_register_isr+0x74>)
   1f4a2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1f4a4:	46c0      	nop			; (mov r8, r8)
   1f4a6:	46bd      	mov	sp, r7
   1f4a8:	b006      	add	sp, #24
   1f4aa:	bd80      	pop	{r7, pc}
   1f4ac:	2000426c 	.word	0x2000426c
   1f4b0:	00025985 	.word	0x00025985
   1f4b4:	000259b9 	.word	0x000259b9
   1f4b8:	0001f335 	.word	0x0001f335
   1f4bc:	00025585 	.word	0x00025585
   1f4c0:	000255e9 	.word	0x000255e9

0001f4c4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1f4c4:	b580      	push	{r7, lr}
   1f4c6:	b082      	sub	sp, #8
   1f4c8:	af00      	add	r7, sp, #0
   1f4ca:	0002      	movs	r2, r0
   1f4cc:	1dfb      	adds	r3, r7, #7
   1f4ce:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1f4d0:	1dfb      	adds	r3, r7, #7
   1f4d2:	781b      	ldrb	r3, [r3, #0]
   1f4d4:	2b00      	cmp	r3, #0
   1f4d6:	d004      	beq.n	1f4e2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f4d8:	2100      	movs	r1, #0
   1f4da:	2009      	movs	r0, #9
   1f4dc:	4b05      	ldr	r3, [pc, #20]	; (1f4f4 <nm_bsp_interrupt_ctrl+0x30>)
   1f4de:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1f4e0:	e003      	b.n	1f4ea <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1f4e2:	2100      	movs	r1, #0
   1f4e4:	2009      	movs	r0, #9
   1f4e6:	4b04      	ldr	r3, [pc, #16]	; (1f4f8 <nm_bsp_interrupt_ctrl+0x34>)
   1f4e8:	4798      	blx	r3
}
   1f4ea:	46c0      	nop			; (mov r8, r8)
   1f4ec:	46bd      	mov	sp, r7
   1f4ee:	b002      	add	sp, #8
   1f4f0:	bd80      	pop	{r7, pc}
   1f4f2:	46c0      	nop			; (mov r8, r8)
   1f4f4:	000255e9 	.word	0x000255e9
   1f4f8:	00025631 	.word	0x00025631

0001f4fc <system_pinmux_get_group_from_gpio_pin>:
{
   1f4fc:	b580      	push	{r7, lr}
   1f4fe:	b084      	sub	sp, #16
   1f500:	af00      	add	r7, sp, #0
   1f502:	0002      	movs	r2, r0
   1f504:	1dfb      	adds	r3, r7, #7
   1f506:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f508:	230f      	movs	r3, #15
   1f50a:	18fb      	adds	r3, r7, r3
   1f50c:	1dfa      	adds	r2, r7, #7
   1f50e:	7812      	ldrb	r2, [r2, #0]
   1f510:	09d2      	lsrs	r2, r2, #7
   1f512:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f514:	230e      	movs	r3, #14
   1f516:	18fb      	adds	r3, r7, r3
   1f518:	1dfa      	adds	r2, r7, #7
   1f51a:	7812      	ldrb	r2, [r2, #0]
   1f51c:	0952      	lsrs	r2, r2, #5
   1f51e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f520:	4b0d      	ldr	r3, [pc, #52]	; (1f558 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f522:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f524:	230f      	movs	r3, #15
   1f526:	18fb      	adds	r3, r7, r3
   1f528:	781b      	ldrb	r3, [r3, #0]
   1f52a:	2b00      	cmp	r3, #0
   1f52c:	d10f      	bne.n	1f54e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f52e:	230f      	movs	r3, #15
   1f530:	18fb      	adds	r3, r7, r3
   1f532:	781b      	ldrb	r3, [r3, #0]
   1f534:	009b      	lsls	r3, r3, #2
   1f536:	2210      	movs	r2, #16
   1f538:	4694      	mov	ip, r2
   1f53a:	44bc      	add	ip, r7
   1f53c:	4463      	add	r3, ip
   1f53e:	3b08      	subs	r3, #8
   1f540:	681a      	ldr	r2, [r3, #0]
   1f542:	230e      	movs	r3, #14
   1f544:	18fb      	adds	r3, r7, r3
   1f546:	781b      	ldrb	r3, [r3, #0]
   1f548:	01db      	lsls	r3, r3, #7
   1f54a:	18d3      	adds	r3, r2, r3
   1f54c:	e000      	b.n	1f550 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f54e:	2300      	movs	r3, #0
}
   1f550:	0018      	movs	r0, r3
   1f552:	46bd      	mov	sp, r7
   1f554:	b004      	add	sp, #16
   1f556:	bd80      	pop	{r7, pc}
   1f558:	41004400 	.word	0x41004400

0001f55c <system_interrupt_enable>:
{
   1f55c:	b580      	push	{r7, lr}
   1f55e:	b082      	sub	sp, #8
   1f560:	af00      	add	r7, sp, #0
   1f562:	0002      	movs	r2, r0
   1f564:	1dfb      	adds	r3, r7, #7
   1f566:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f568:	4b06      	ldr	r3, [pc, #24]	; (1f584 <system_interrupt_enable+0x28>)
   1f56a:	1dfa      	adds	r2, r7, #7
   1f56c:	7812      	ldrb	r2, [r2, #0]
   1f56e:	0011      	movs	r1, r2
   1f570:	221f      	movs	r2, #31
   1f572:	400a      	ands	r2, r1
   1f574:	2101      	movs	r1, #1
   1f576:	4091      	lsls	r1, r2
   1f578:	000a      	movs	r2, r1
   1f57a:	601a      	str	r2, [r3, #0]
}
   1f57c:	46c0      	nop			; (mov r8, r8)
   1f57e:	46bd      	mov	sp, r7
   1f580:	b002      	add	sp, #8
   1f582:	bd80      	pop	{r7, pc}
   1f584:	e000e100 	.word	0xe000e100

0001f588 <system_interrupt_disable>:
{
   1f588:	b580      	push	{r7, lr}
   1f58a:	b082      	sub	sp, #8
   1f58c:	af00      	add	r7, sp, #0
   1f58e:	0002      	movs	r2, r0
   1f590:	1dfb      	adds	r3, r7, #7
   1f592:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f594:	4a07      	ldr	r2, [pc, #28]	; (1f5b4 <system_interrupt_disable+0x2c>)
   1f596:	1dfb      	adds	r3, r7, #7
   1f598:	781b      	ldrb	r3, [r3, #0]
   1f59a:	0019      	movs	r1, r3
   1f59c:	231f      	movs	r3, #31
   1f59e:	400b      	ands	r3, r1
   1f5a0:	2101      	movs	r1, #1
   1f5a2:	4099      	lsls	r1, r3
   1f5a4:	000b      	movs	r3, r1
   1f5a6:	0019      	movs	r1, r3
   1f5a8:	2380      	movs	r3, #128	; 0x80
   1f5aa:	50d1      	str	r1, [r2, r3]
}
   1f5ac:	46c0      	nop			; (mov r8, r8)
   1f5ae:	46bd      	mov	sp, r7
   1f5b0:	b002      	add	sp, #8
   1f5b2:	bd80      	pop	{r7, pc}
   1f5b4:	e000e100 	.word	0xe000e100

0001f5b8 <port_get_group_from_gpio_pin>:
{
   1f5b8:	b580      	push	{r7, lr}
   1f5ba:	b082      	sub	sp, #8
   1f5bc:	af00      	add	r7, sp, #0
   1f5be:	0002      	movs	r2, r0
   1f5c0:	1dfb      	adds	r3, r7, #7
   1f5c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f5c4:	1dfb      	adds	r3, r7, #7
   1f5c6:	781b      	ldrb	r3, [r3, #0]
   1f5c8:	0018      	movs	r0, r3
   1f5ca:	4b03      	ldr	r3, [pc, #12]	; (1f5d8 <port_get_group_from_gpio_pin+0x20>)
   1f5cc:	4798      	blx	r3
   1f5ce:	0003      	movs	r3, r0
}
   1f5d0:	0018      	movs	r0, r3
   1f5d2:	46bd      	mov	sp, r7
   1f5d4:	b002      	add	sp, #8
   1f5d6:	bd80      	pop	{r7, pc}
   1f5d8:	0001f4fd 	.word	0x0001f4fd

0001f5dc <port_get_config_defaults>:
{
   1f5dc:	b580      	push	{r7, lr}
   1f5de:	b082      	sub	sp, #8
   1f5e0:	af00      	add	r7, sp, #0
   1f5e2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f5e4:	687b      	ldr	r3, [r7, #4]
   1f5e6:	2200      	movs	r2, #0
   1f5e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f5ea:	687b      	ldr	r3, [r7, #4]
   1f5ec:	2201      	movs	r2, #1
   1f5ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f5f0:	687b      	ldr	r3, [r7, #4]
   1f5f2:	2200      	movs	r2, #0
   1f5f4:	709a      	strb	r2, [r3, #2]
}
   1f5f6:	46c0      	nop			; (mov r8, r8)
   1f5f8:	46bd      	mov	sp, r7
   1f5fa:	b002      	add	sp, #8
   1f5fc:	bd80      	pop	{r7, pc}
	...

0001f600 <port_pin_set_output_level>:
{
   1f600:	b580      	push	{r7, lr}
   1f602:	b084      	sub	sp, #16
   1f604:	af00      	add	r7, sp, #0
   1f606:	0002      	movs	r2, r0
   1f608:	1dfb      	adds	r3, r7, #7
   1f60a:	701a      	strb	r2, [r3, #0]
   1f60c:	1dbb      	adds	r3, r7, #6
   1f60e:	1c0a      	adds	r2, r1, #0
   1f610:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f612:	1dfb      	adds	r3, r7, #7
   1f614:	781b      	ldrb	r3, [r3, #0]
   1f616:	0018      	movs	r0, r3
   1f618:	4b0d      	ldr	r3, [pc, #52]	; (1f650 <port_pin_set_output_level+0x50>)
   1f61a:	4798      	blx	r3
   1f61c:	0003      	movs	r3, r0
   1f61e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f620:	1dfb      	adds	r3, r7, #7
   1f622:	781b      	ldrb	r3, [r3, #0]
   1f624:	221f      	movs	r2, #31
   1f626:	4013      	ands	r3, r2
   1f628:	2201      	movs	r2, #1
   1f62a:	409a      	lsls	r2, r3
   1f62c:	0013      	movs	r3, r2
   1f62e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f630:	1dbb      	adds	r3, r7, #6
   1f632:	781b      	ldrb	r3, [r3, #0]
   1f634:	2b00      	cmp	r3, #0
   1f636:	d003      	beq.n	1f640 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f638:	68fb      	ldr	r3, [r7, #12]
   1f63a:	68ba      	ldr	r2, [r7, #8]
   1f63c:	619a      	str	r2, [r3, #24]
}
   1f63e:	e002      	b.n	1f646 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f640:	68fb      	ldr	r3, [r7, #12]
   1f642:	68ba      	ldr	r2, [r7, #8]
   1f644:	615a      	str	r2, [r3, #20]
}
   1f646:	46c0      	nop			; (mov r8, r8)
   1f648:	46bd      	mov	sp, r7
   1f64a:	b004      	add	sp, #16
   1f64c:	bd80      	pop	{r7, pc}
   1f64e:	46c0      	nop			; (mov r8, r8)
   1f650:	0001f5b9 	.word	0x0001f5b9

0001f654 <spi_is_syncing>:
{
   1f654:	b580      	push	{r7, lr}
   1f656:	b084      	sub	sp, #16
   1f658:	af00      	add	r7, sp, #0
   1f65a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f65c:	687b      	ldr	r3, [r7, #4]
   1f65e:	681b      	ldr	r3, [r3, #0]
   1f660:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1f662:	68fb      	ldr	r3, [r7, #12]
   1f664:	69db      	ldr	r3, [r3, #28]
   1f666:	1e5a      	subs	r2, r3, #1
   1f668:	4193      	sbcs	r3, r2
   1f66a:	b2db      	uxtb	r3, r3
}
   1f66c:	0018      	movs	r0, r3
   1f66e:	46bd      	mov	sp, r7
   1f670:	b004      	add	sp, #16
   1f672:	bd80      	pop	{r7, pc}

0001f674 <spi_get_config_defaults>:
{
   1f674:	b580      	push	{r7, lr}
   1f676:	b082      	sub	sp, #8
   1f678:	af00      	add	r7, sp, #0
   1f67a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1f67c:	687b      	ldr	r3, [r7, #4]
   1f67e:	2201      	movs	r2, #1
   1f680:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f682:	687b      	ldr	r3, [r7, #4]
   1f684:	2200      	movs	r2, #0
   1f686:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f688:	687b      	ldr	r3, [r7, #4]
   1f68a:	2200      	movs	r2, #0
   1f68c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f68e:	687b      	ldr	r3, [r7, #4]
   1f690:	22c0      	movs	r2, #192	; 0xc0
   1f692:	0392      	lsls	r2, r2, #14
   1f694:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f696:	687b      	ldr	r3, [r7, #4]
   1f698:	2200      	movs	r2, #0
   1f69a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f69c:	687b      	ldr	r3, [r7, #4]
   1f69e:	2200      	movs	r2, #0
   1f6a0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f6a2:	687b      	ldr	r3, [r7, #4]
   1f6a4:	2201      	movs	r2, #1
   1f6a6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1f6a8:	687b      	ldr	r3, [r7, #4]
   1f6aa:	2201      	movs	r2, #1
   1f6ac:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1f6ae:	687b      	ldr	r3, [r7, #4]
   1f6b0:	2200      	movs	r2, #0
   1f6b2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1f6b4:	687b      	ldr	r3, [r7, #4]
   1f6b6:	2224      	movs	r2, #36	; 0x24
   1f6b8:	2100      	movs	r1, #0
   1f6ba:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f6bc:	687b      	ldr	r3, [r7, #4]
   1f6be:	3318      	adds	r3, #24
   1f6c0:	220c      	movs	r2, #12
   1f6c2:	2100      	movs	r1, #0
   1f6c4:	0018      	movs	r0, r3
   1f6c6:	4b0a      	ldr	r3, [pc, #40]	; (1f6f0 <spi_get_config_defaults+0x7c>)
   1f6c8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1f6ca:	687b      	ldr	r3, [r7, #4]
   1f6cc:	4a09      	ldr	r2, [pc, #36]	; (1f6f4 <spi_get_config_defaults+0x80>)
   1f6ce:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f6d0:	687b      	ldr	r3, [r7, #4]
   1f6d2:	2200      	movs	r2, #0
   1f6d4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f6d6:	687b      	ldr	r3, [r7, #4]
   1f6d8:	2200      	movs	r2, #0
   1f6da:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f6dc:	687b      	ldr	r3, [r7, #4]
   1f6de:	2200      	movs	r2, #0
   1f6e0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f6e2:	687b      	ldr	r3, [r7, #4]
   1f6e4:	2200      	movs	r2, #0
   1f6e6:	635a      	str	r2, [r3, #52]	; 0x34
};
   1f6e8:	46c0      	nop			; (mov r8, r8)
   1f6ea:	46bd      	mov	sp, r7
   1f6ec:	b002      	add	sp, #8
   1f6ee:	bd80      	pop	{r7, pc}
   1f6f0:	0003460f 	.word	0x0003460f
   1f6f4:	000186a0 	.word	0x000186a0

0001f6f8 <spi_slave_inst_get_config_defaults>:
{
   1f6f8:	b580      	push	{r7, lr}
   1f6fa:	b082      	sub	sp, #8
   1f6fc:	af00      	add	r7, sp, #0
   1f6fe:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1f700:	687b      	ldr	r3, [r7, #4]
   1f702:	220a      	movs	r2, #10
   1f704:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f706:	687b      	ldr	r3, [r7, #4]
   1f708:	2200      	movs	r2, #0
   1f70a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f70c:	687b      	ldr	r3, [r7, #4]
   1f70e:	2200      	movs	r2, #0
   1f710:	709a      	strb	r2, [r3, #2]
}
   1f712:	46c0      	nop			; (mov r8, r8)
   1f714:	46bd      	mov	sp, r7
   1f716:	b002      	add	sp, #8
   1f718:	bd80      	pop	{r7, pc}
	...

0001f71c <spi_attach_slave>:
{
   1f71c:	b580      	push	{r7, lr}
   1f71e:	b084      	sub	sp, #16
   1f720:	af00      	add	r7, sp, #0
   1f722:	6078      	str	r0, [r7, #4]
   1f724:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1f726:	683b      	ldr	r3, [r7, #0]
   1f728:	781a      	ldrb	r2, [r3, #0]
   1f72a:	687b      	ldr	r3, [r7, #4]
   1f72c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f72e:	683b      	ldr	r3, [r7, #0]
   1f730:	785a      	ldrb	r2, [r3, #1]
   1f732:	687b      	ldr	r3, [r7, #4]
   1f734:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f736:	683b      	ldr	r3, [r7, #0]
   1f738:	789a      	ldrb	r2, [r3, #2]
   1f73a:	687b      	ldr	r3, [r7, #4]
   1f73c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1f73e:	230c      	movs	r3, #12
   1f740:	18fb      	adds	r3, r7, r3
   1f742:	0018      	movs	r0, r3
   1f744:	4b0b      	ldr	r3, [pc, #44]	; (1f774 <spi_attach_slave+0x58>)
   1f746:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f748:	230c      	movs	r3, #12
   1f74a:	18fb      	adds	r3, r7, r3
   1f74c:	2201      	movs	r2, #1
   1f74e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f750:	687b      	ldr	r3, [r7, #4]
   1f752:	781b      	ldrb	r3, [r3, #0]
   1f754:	220c      	movs	r2, #12
   1f756:	18ba      	adds	r2, r7, r2
   1f758:	0011      	movs	r1, r2
   1f75a:	0018      	movs	r0, r3
   1f75c:	4b06      	ldr	r3, [pc, #24]	; (1f778 <spi_attach_slave+0x5c>)
   1f75e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1f760:	687b      	ldr	r3, [r7, #4]
   1f762:	781b      	ldrb	r3, [r3, #0]
   1f764:	2101      	movs	r1, #1
   1f766:	0018      	movs	r0, r3
   1f768:	4b04      	ldr	r3, [pc, #16]	; (1f77c <spi_attach_slave+0x60>)
   1f76a:	4798      	blx	r3
}
   1f76c:	46c0      	nop			; (mov r8, r8)
   1f76e:	46bd      	mov	sp, r7
   1f770:	b004      	add	sp, #16
   1f772:	bd80      	pop	{r7, pc}
   1f774:	0001f5dd 	.word	0x0001f5dd
   1f778:	00025add 	.word	0x00025add
   1f77c:	0001f601 	.word	0x0001f601

0001f780 <spi_enable>:
{
   1f780:	b580      	push	{r7, lr}
   1f782:	b084      	sub	sp, #16
   1f784:	af00      	add	r7, sp, #0
   1f786:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f788:	687b      	ldr	r3, [r7, #4]
   1f78a:	681b      	ldr	r3, [r3, #0]
   1f78c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1f78e:	687b      	ldr	r3, [r7, #4]
   1f790:	681b      	ldr	r3, [r3, #0]
   1f792:	0018      	movs	r0, r3
   1f794:	4b0b      	ldr	r3, [pc, #44]	; (1f7c4 <spi_enable+0x44>)
   1f796:	4798      	blx	r3
   1f798:	0003      	movs	r3, r0
   1f79a:	0018      	movs	r0, r3
   1f79c:	4b0a      	ldr	r3, [pc, #40]	; (1f7c8 <spi_enable+0x48>)
   1f79e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1f7a0:	46c0      	nop			; (mov r8, r8)
   1f7a2:	687b      	ldr	r3, [r7, #4]
   1f7a4:	0018      	movs	r0, r3
   1f7a6:	4b09      	ldr	r3, [pc, #36]	; (1f7cc <spi_enable+0x4c>)
   1f7a8:	4798      	blx	r3
   1f7aa:	1e03      	subs	r3, r0, #0
   1f7ac:	d1f9      	bne.n	1f7a2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f7ae:	68fb      	ldr	r3, [r7, #12]
   1f7b0:	681b      	ldr	r3, [r3, #0]
   1f7b2:	2202      	movs	r2, #2
   1f7b4:	431a      	orrs	r2, r3
   1f7b6:	68fb      	ldr	r3, [r7, #12]
   1f7b8:	601a      	str	r2, [r3, #0]
}
   1f7ba:	46c0      	nop			; (mov r8, r8)
   1f7bc:	46bd      	mov	sp, r7
   1f7be:	b004      	add	sp, #16
   1f7c0:	bd80      	pop	{r7, pc}
   1f7c2:	46c0      	nop			; (mov r8, r8)
   1f7c4:	000267ad 	.word	0x000267ad
   1f7c8:	0001f55d 	.word	0x0001f55d
   1f7cc:	0001f655 	.word	0x0001f655

0001f7d0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1f7d0:	b580      	push	{r7, lr}
   1f7d2:	b084      	sub	sp, #16
   1f7d4:	af00      	add	r7, sp, #0
   1f7d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f7d8:	687b      	ldr	r3, [r7, #4]
   1f7da:	681b      	ldr	r3, [r3, #0]
   1f7dc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1f7de:	687b      	ldr	r3, [r7, #4]
   1f7e0:	681b      	ldr	r3, [r3, #0]
   1f7e2:	0018      	movs	r0, r3
   1f7e4:	4b0e      	ldr	r3, [pc, #56]	; (1f820 <spi_disable+0x50>)
   1f7e6:	4798      	blx	r3
   1f7e8:	0003      	movs	r3, r0
   1f7ea:	0018      	movs	r0, r3
   1f7ec:	4b0d      	ldr	r3, [pc, #52]	; (1f824 <spi_disable+0x54>)
   1f7ee:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f7f0:	46c0      	nop			; (mov r8, r8)
   1f7f2:	687b      	ldr	r3, [r7, #4]
   1f7f4:	0018      	movs	r0, r3
   1f7f6:	4b0c      	ldr	r3, [pc, #48]	; (1f828 <spi_disable+0x58>)
   1f7f8:	4798      	blx	r3
   1f7fa:	1e03      	subs	r3, r0, #0
   1f7fc:	d1f9      	bne.n	1f7f2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1f7fe:	68fb      	ldr	r3, [r7, #12]
   1f800:	228f      	movs	r2, #143	; 0x8f
   1f802:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1f804:	68fb      	ldr	r3, [r7, #12]
   1f806:	228f      	movs	r2, #143	; 0x8f
   1f808:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1f80a:	68fb      	ldr	r3, [r7, #12]
   1f80c:	681b      	ldr	r3, [r3, #0]
   1f80e:	2202      	movs	r2, #2
   1f810:	4393      	bics	r3, r2
   1f812:	001a      	movs	r2, r3
   1f814:	68fb      	ldr	r3, [r7, #12]
   1f816:	601a      	str	r2, [r3, #0]
}
   1f818:	46c0      	nop			; (mov r8, r8)
   1f81a:	46bd      	mov	sp, r7
   1f81c:	b004      	add	sp, #16
   1f81e:	bd80      	pop	{r7, pc}
   1f820:	000267ad 	.word	0x000267ad
   1f824:	0001f589 	.word	0x0001f589
   1f828:	0001f655 	.word	0x0001f655

0001f82c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1f82c:	b580      	push	{r7, lr}
   1f82e:	b084      	sub	sp, #16
   1f830:	af00      	add	r7, sp, #0
   1f832:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f834:	687b      	ldr	r3, [r7, #4]
   1f836:	681b      	ldr	r3, [r3, #0]
   1f838:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1f83a:	68fb      	ldr	r3, [r7, #12]
   1f83c:	7e1b      	ldrb	r3, [r3, #24]
   1f83e:	b2db      	uxtb	r3, r3
   1f840:	001a      	movs	r2, r3
   1f842:	2302      	movs	r3, #2
   1f844:	4013      	ands	r3, r2
   1f846:	1e5a      	subs	r2, r3, #1
   1f848:	4193      	sbcs	r3, r2
   1f84a:	b2db      	uxtb	r3, r3
}
   1f84c:	0018      	movs	r0, r3
   1f84e:	46bd      	mov	sp, r7
   1f850:	b004      	add	sp, #16
   1f852:	bd80      	pop	{r7, pc}

0001f854 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1f854:	b580      	push	{r7, lr}
   1f856:	b084      	sub	sp, #16
   1f858:	af00      	add	r7, sp, #0
   1f85a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f85c:	687b      	ldr	r3, [r7, #4]
   1f85e:	681b      	ldr	r3, [r3, #0]
   1f860:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1f862:	68fb      	ldr	r3, [r7, #12]
   1f864:	7e1b      	ldrb	r3, [r3, #24]
   1f866:	b2db      	uxtb	r3, r3
   1f868:	001a      	movs	r2, r3
   1f86a:	2301      	movs	r3, #1
   1f86c:	4013      	ands	r3, r2
   1f86e:	1e5a      	subs	r2, r3, #1
   1f870:	4193      	sbcs	r3, r2
   1f872:	b2db      	uxtb	r3, r3
}
   1f874:	0018      	movs	r0, r3
   1f876:	46bd      	mov	sp, r7
   1f878:	b004      	add	sp, #16
   1f87a:	bd80      	pop	{r7, pc}

0001f87c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1f87c:	b580      	push	{r7, lr}
   1f87e:	b084      	sub	sp, #16
   1f880:	af00      	add	r7, sp, #0
   1f882:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f884:	687b      	ldr	r3, [r7, #4]
   1f886:	681b      	ldr	r3, [r3, #0]
   1f888:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1f88a:	68fb      	ldr	r3, [r7, #12]
   1f88c:	7e1b      	ldrb	r3, [r3, #24]
   1f88e:	b2db      	uxtb	r3, r3
   1f890:	001a      	movs	r2, r3
   1f892:	2304      	movs	r3, #4
   1f894:	4013      	ands	r3, r2
   1f896:	1e5a      	subs	r2, r3, #1
   1f898:	4193      	sbcs	r3, r2
   1f89a:	b2db      	uxtb	r3, r3
}
   1f89c:	0018      	movs	r0, r3
   1f89e:	46bd      	mov	sp, r7
   1f8a0:	b004      	add	sp, #16
   1f8a2:	bd80      	pop	{r7, pc}

0001f8a4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1f8a4:	b580      	push	{r7, lr}
   1f8a6:	b084      	sub	sp, #16
   1f8a8:	af00      	add	r7, sp, #0
   1f8aa:	6078      	str	r0, [r7, #4]
   1f8ac:	000a      	movs	r2, r1
   1f8ae:	1cbb      	adds	r3, r7, #2
   1f8b0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f8b2:	687b      	ldr	r3, [r7, #4]
   1f8b4:	681b      	ldr	r3, [r3, #0]
   1f8b6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1f8b8:	687b      	ldr	r3, [r7, #4]
   1f8ba:	0018      	movs	r0, r3
   1f8bc:	4b0a      	ldr	r3, [pc, #40]	; (1f8e8 <spi_write+0x44>)
   1f8be:	4798      	blx	r3
   1f8c0:	0003      	movs	r3, r0
   1f8c2:	001a      	movs	r2, r3
   1f8c4:	2301      	movs	r3, #1
   1f8c6:	4053      	eors	r3, r2
   1f8c8:	b2db      	uxtb	r3, r3
   1f8ca:	2b00      	cmp	r3, #0
   1f8cc:	d001      	beq.n	1f8d2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1f8ce:	2305      	movs	r3, #5
   1f8d0:	e006      	b.n	1f8e0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1f8d2:	1cbb      	adds	r3, r7, #2
   1f8d4:	881b      	ldrh	r3, [r3, #0]
   1f8d6:	05db      	lsls	r3, r3, #23
   1f8d8:	0dda      	lsrs	r2, r3, #23
   1f8da:	68fb      	ldr	r3, [r7, #12]
   1f8dc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1f8de:	2300      	movs	r3, #0
}
   1f8e0:	0018      	movs	r0, r3
   1f8e2:	46bd      	mov	sp, r7
   1f8e4:	b004      	add	sp, #16
   1f8e6:	bd80      	pop	{r7, pc}
   1f8e8:	0001f855 	.word	0x0001f855

0001f8ec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1f8ec:	b580      	push	{r7, lr}
   1f8ee:	b084      	sub	sp, #16
   1f8f0:	af00      	add	r7, sp, #0
   1f8f2:	6078      	str	r0, [r7, #4]
   1f8f4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f8f6:	687b      	ldr	r3, [r7, #4]
   1f8f8:	681b      	ldr	r3, [r3, #0]
   1f8fa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1f8fc:	687b      	ldr	r3, [r7, #4]
   1f8fe:	0018      	movs	r0, r3
   1f900:	4b1b      	ldr	r3, [pc, #108]	; (1f970 <spi_read+0x84>)
   1f902:	4798      	blx	r3
   1f904:	0003      	movs	r3, r0
   1f906:	001a      	movs	r2, r3
   1f908:	2301      	movs	r3, #1
   1f90a:	4053      	eors	r3, r2
   1f90c:	b2db      	uxtb	r3, r3
   1f90e:	2b00      	cmp	r3, #0
   1f910:	d001      	beq.n	1f916 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1f912:	2310      	movs	r3, #16
   1f914:	e027      	b.n	1f966 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1f916:	230f      	movs	r3, #15
   1f918:	18fb      	adds	r3, r7, r3
   1f91a:	2200      	movs	r2, #0
   1f91c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1f91e:	68bb      	ldr	r3, [r7, #8]
   1f920:	8b5b      	ldrh	r3, [r3, #26]
   1f922:	b29b      	uxth	r3, r3
   1f924:	001a      	movs	r2, r3
   1f926:	2304      	movs	r3, #4
   1f928:	4013      	ands	r3, r2
   1f92a:	d006      	beq.n	1f93a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1f92c:	230f      	movs	r3, #15
   1f92e:	18fb      	adds	r3, r7, r3
   1f930:	221e      	movs	r2, #30
   1f932:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1f934:	68bb      	ldr	r3, [r7, #8]
   1f936:	2204      	movs	r2, #4
   1f938:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1f93a:	687b      	ldr	r3, [r7, #4]
   1f93c:	799b      	ldrb	r3, [r3, #6]
   1f93e:	2b01      	cmp	r3, #1
   1f940:	d108      	bne.n	1f954 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1f942:	68bb      	ldr	r3, [r7, #8]
   1f944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f946:	b29b      	uxth	r3, r3
   1f948:	05db      	lsls	r3, r3, #23
   1f94a:	0ddb      	lsrs	r3, r3, #23
   1f94c:	b29a      	uxth	r2, r3
   1f94e:	683b      	ldr	r3, [r7, #0]
   1f950:	801a      	strh	r2, [r3, #0]
   1f952:	e005      	b.n	1f960 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1f954:	68bb      	ldr	r3, [r7, #8]
   1f956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f958:	b2db      	uxtb	r3, r3
   1f95a:	b29a      	uxth	r2, r3
   1f95c:	683b      	ldr	r3, [r7, #0]
   1f95e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1f960:	230f      	movs	r3, #15
   1f962:	18fb      	adds	r3, r7, r3
   1f964:	781b      	ldrb	r3, [r3, #0]
}
   1f966:	0018      	movs	r0, r3
   1f968:	46bd      	mov	sp, r7
   1f96a:	b004      	add	sp, #16
   1f96c:	bd80      	pop	{r7, pc}
   1f96e:	46c0      	nop			; (mov r8, r8)
   1f970:	0001f87d 	.word	0x0001f87d

0001f974 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1f974:	b580      	push	{r7, lr}
   1f976:	b086      	sub	sp, #24
   1f978:	af00      	add	r7, sp, #0
   1f97a:	60f8      	str	r0, [r7, #12]
   1f97c:	60b9      	str	r1, [r7, #8]
   1f97e:	1dbb      	adds	r3, r7, #6
   1f980:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1f982:	2313      	movs	r3, #19
   1f984:	18fb      	adds	r3, r7, r3
   1f986:	22ff      	movs	r2, #255	; 0xff
   1f988:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1f98a:	2317      	movs	r3, #23
   1f98c:	18fb      	adds	r3, r7, r3
   1f98e:	2200      	movs	r2, #0
   1f990:	701a      	strb	r2, [r3, #0]
   1f992:	2316      	movs	r3, #22
   1f994:	18fb      	adds	r3, r7, r3
   1f996:	2200      	movs	r2, #0
   1f998:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1f99a:	2314      	movs	r3, #20
   1f99c:	18fb      	adds	r3, r7, r3
   1f99e:	2200      	movs	r2, #0
   1f9a0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1f9a2:	2310      	movs	r3, #16
   1f9a4:	18fb      	adds	r3, r7, r3
   1f9a6:	2200      	movs	r2, #0
   1f9a8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1f9aa:	68bb      	ldr	r3, [r7, #8]
   1f9ac:	2b00      	cmp	r3, #0
   1f9ae:	d102      	bne.n	1f9b6 <spi_rw+0x42>
   1f9b0:	68fb      	ldr	r3, [r7, #12]
   1f9b2:	2b00      	cmp	r3, #0
   1f9b4:	d003      	beq.n	1f9be <spi_rw+0x4a>
   1f9b6:	1dbb      	adds	r3, r7, #6
   1f9b8:	881b      	ldrh	r3, [r3, #0]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	d102      	bne.n	1f9c4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1f9be:	230f      	movs	r3, #15
   1f9c0:	425b      	negs	r3, r3
   1f9c2:	e07e      	b.n	1fac2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1f9c4:	68fb      	ldr	r3, [r7, #12]
   1f9c6:	2b00      	cmp	r3, #0
   1f9c8:	d106      	bne.n	1f9d8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1f9ca:	2313      	movs	r3, #19
   1f9cc:	18fb      	adds	r3, r7, r3
   1f9ce:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1f9d0:	2317      	movs	r3, #23
   1f9d2:	18fb      	adds	r3, r7, r3
   1f9d4:	2201      	movs	r2, #1
   1f9d6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1f9d8:	68bb      	ldr	r3, [r7, #8]
   1f9da:	2b00      	cmp	r3, #0
   1f9dc:	d106      	bne.n	1f9ec <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1f9de:	2313      	movs	r3, #19
   1f9e0:	18fb      	adds	r3, r7, r3
   1f9e2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1f9e4:	2316      	movs	r3, #22
   1f9e6:	18fb      	adds	r3, r7, r3
   1f9e8:	2201      	movs	r2, #1
   1f9ea:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1f9ec:	4937      	ldr	r1, [pc, #220]	; (1facc <spi_rw+0x158>)
   1f9ee:	4b38      	ldr	r3, [pc, #224]	; (1fad0 <spi_rw+0x15c>)
   1f9f0:	2201      	movs	r2, #1
   1f9f2:	0018      	movs	r0, r3
   1f9f4:	4b37      	ldr	r3, [pc, #220]	; (1fad4 <spi_rw+0x160>)
   1f9f6:	4798      	blx	r3

	while (u16Sz) {
   1f9f8:	e04c      	b.n	1fa94 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1f9fa:	68fb      	ldr	r3, [r7, #12]
   1f9fc:	781a      	ldrb	r2, [r3, #0]
   1f9fe:	2314      	movs	r3, #20
   1fa00:	18fb      	adds	r3, r7, r3
   1fa02:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1fa04:	46c0      	nop			; (mov r8, r8)
   1fa06:	4b32      	ldr	r3, [pc, #200]	; (1fad0 <spi_rw+0x15c>)
   1fa08:	0018      	movs	r0, r3
   1fa0a:	4b33      	ldr	r3, [pc, #204]	; (1fad8 <spi_rw+0x164>)
   1fa0c:	4798      	blx	r3
   1fa0e:	0003      	movs	r3, r0
   1fa10:	001a      	movs	r2, r3
   1fa12:	2301      	movs	r3, #1
   1fa14:	4053      	eors	r3, r2
   1fa16:	b2db      	uxtb	r3, r3
   1fa18:	2b00      	cmp	r3, #0
   1fa1a:	d1f4      	bne.n	1fa06 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1fa1c:	46c0      	nop			; (mov r8, r8)
   1fa1e:	2314      	movs	r3, #20
   1fa20:	18fb      	adds	r3, r7, r3
   1fa22:	881a      	ldrh	r2, [r3, #0]
   1fa24:	4b2a      	ldr	r3, [pc, #168]	; (1fad0 <spi_rw+0x15c>)
   1fa26:	0011      	movs	r1, r2
   1fa28:	0018      	movs	r0, r3
   1fa2a:	4b2c      	ldr	r3, [pc, #176]	; (1fadc <spi_rw+0x168>)
   1fa2c:	4798      	blx	r3
   1fa2e:	1e03      	subs	r3, r0, #0
   1fa30:	d1f5      	bne.n	1fa1e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1fa32:	46c0      	nop			; (mov r8, r8)
   1fa34:	4b26      	ldr	r3, [pc, #152]	; (1fad0 <spi_rw+0x15c>)
   1fa36:	0018      	movs	r0, r3
   1fa38:	4b29      	ldr	r3, [pc, #164]	; (1fae0 <spi_rw+0x16c>)
   1fa3a:	4798      	blx	r3
   1fa3c:	0003      	movs	r3, r0
   1fa3e:	001a      	movs	r2, r3
   1fa40:	2301      	movs	r3, #1
   1fa42:	4053      	eors	r3, r2
   1fa44:	b2db      	uxtb	r3, r3
   1fa46:	2b00      	cmp	r3, #0
   1fa48:	d1f4      	bne.n	1fa34 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1fa4a:	46c0      	nop			; (mov r8, r8)
   1fa4c:	2310      	movs	r3, #16
   1fa4e:	18fa      	adds	r2, r7, r3
   1fa50:	4b1f      	ldr	r3, [pc, #124]	; (1fad0 <spi_rw+0x15c>)
   1fa52:	0011      	movs	r1, r2
   1fa54:	0018      	movs	r0, r3
   1fa56:	4b23      	ldr	r3, [pc, #140]	; (1fae4 <spi_rw+0x170>)
   1fa58:	4798      	blx	r3
   1fa5a:	1e03      	subs	r3, r0, #0
   1fa5c:	d1f6      	bne.n	1fa4c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1fa5e:	2310      	movs	r3, #16
   1fa60:	18fb      	adds	r3, r7, r3
   1fa62:	881b      	ldrh	r3, [r3, #0]
   1fa64:	b2da      	uxtb	r2, r3
   1fa66:	68bb      	ldr	r3, [r7, #8]
   1fa68:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1fa6a:	1dbb      	adds	r3, r7, #6
   1fa6c:	881a      	ldrh	r2, [r3, #0]
   1fa6e:	1dbb      	adds	r3, r7, #6
   1fa70:	3a01      	subs	r2, #1
   1fa72:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1fa74:	2316      	movs	r3, #22
   1fa76:	18fb      	adds	r3, r7, r3
   1fa78:	781b      	ldrb	r3, [r3, #0]
   1fa7a:	2b00      	cmp	r3, #0
   1fa7c:	d102      	bne.n	1fa84 <spi_rw+0x110>
			pu8Miso++;
   1fa7e:	68bb      	ldr	r3, [r7, #8]
   1fa80:	3301      	adds	r3, #1
   1fa82:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1fa84:	2317      	movs	r3, #23
   1fa86:	18fb      	adds	r3, r7, r3
   1fa88:	781b      	ldrb	r3, [r3, #0]
   1fa8a:	2b00      	cmp	r3, #0
   1fa8c:	d102      	bne.n	1fa94 <spi_rw+0x120>
			pu8Mosi++;
   1fa8e:	68fb      	ldr	r3, [r7, #12]
   1fa90:	3301      	adds	r3, #1
   1fa92:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1fa94:	1dbb      	adds	r3, r7, #6
   1fa96:	881b      	ldrh	r3, [r3, #0]
   1fa98:	2b00      	cmp	r3, #0
   1fa9a:	d1ae      	bne.n	1f9fa <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1fa9c:	46c0      	nop			; (mov r8, r8)
   1fa9e:	4b0c      	ldr	r3, [pc, #48]	; (1fad0 <spi_rw+0x15c>)
   1faa0:	0018      	movs	r0, r3
   1faa2:	4b11      	ldr	r3, [pc, #68]	; (1fae8 <spi_rw+0x174>)
   1faa4:	4798      	blx	r3
   1faa6:	0003      	movs	r3, r0
   1faa8:	001a      	movs	r2, r3
   1faaa:	2301      	movs	r3, #1
   1faac:	4053      	eors	r3, r2
   1faae:	b2db      	uxtb	r3, r3
   1fab0:	2b00      	cmp	r3, #0
   1fab2:	d1f4      	bne.n	1fa9e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1fab4:	4905      	ldr	r1, [pc, #20]	; (1facc <spi_rw+0x158>)
   1fab6:	4b06      	ldr	r3, [pc, #24]	; (1fad0 <spi_rw+0x15c>)
   1fab8:	2200      	movs	r2, #0
   1faba:	0018      	movs	r0, r3
   1fabc:	4b05      	ldr	r3, [pc, #20]	; (1fad4 <spi_rw+0x160>)
   1fabe:	4798      	blx	r3

	return M2M_SUCCESS;
   1fac0:	2300      	movs	r3, #0
}
   1fac2:	0018      	movs	r0, r3
   1fac4:	46bd      	mov	sp, r7
   1fac6:	b006      	add	sp, #24
   1fac8:	bd80      	pop	{r7, pc}
   1faca:	46c0      	nop			; (mov r8, r8)
   1facc:	20005a58 	.word	0x20005a58
   1fad0:	20005a5c 	.word	0x20005a5c
   1fad4:	00027221 	.word	0x00027221
   1fad8:	0001f855 	.word	0x0001f855
   1fadc:	0001f8a5 	.word	0x0001f8a5
   1fae0:	0001f87d 	.word	0x0001f87d
   1fae4:	0001f8ed 	.word	0x0001f8ed
   1fae8:	0001f82d 	.word	0x0001f82d

0001faec <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1faec:	b580      	push	{r7, lr}
   1faee:	b092      	sub	sp, #72	; 0x48
   1faf0:	af00      	add	r7, sp, #0
   1faf2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1faf4:	2347      	movs	r3, #71	; 0x47
   1faf6:	18fb      	adds	r3, r7, r3
   1faf8:	2200      	movs	r2, #0
   1fafa:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1fafc:	2308      	movs	r3, #8
   1fafe:	18fb      	adds	r3, r7, r3
   1fb00:	0018      	movs	r0, r3
   1fb02:	4b26      	ldr	r3, [pc, #152]	; (1fb9c <nm_bus_init+0xb0>)
   1fb04:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1fb06:	2308      	movs	r3, #8
   1fb08:	18fb      	adds	r3, r7, r3
   1fb0a:	220e      	movs	r2, #14
   1fb0c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1fb0e:	2308      	movs	r3, #8
   1fb10:	18fa      	adds	r2, r7, r3
   1fb12:	4b23      	ldr	r3, [pc, #140]	; (1fba0 <nm_bus_init+0xb4>)
   1fb14:	0011      	movs	r1, r2
   1fb16:	0018      	movs	r0, r3
   1fb18:	4b22      	ldr	r3, [pc, #136]	; (1fba4 <nm_bus_init+0xb8>)
   1fb1a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1fb1c:	230c      	movs	r3, #12
   1fb1e:	18fb      	adds	r3, r7, r3
   1fb20:	0018      	movs	r0, r3
   1fb22:	4b21      	ldr	r3, [pc, #132]	; (1fba8 <nm_bus_init+0xbc>)
   1fb24:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1fb26:	230c      	movs	r3, #12
   1fb28:	18fb      	adds	r3, r7, r3
   1fb2a:	22c0      	movs	r2, #192	; 0xc0
   1fb2c:	0392      	lsls	r2, r2, #14
   1fb2e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1fb30:	230c      	movs	r3, #12
   1fb32:	18fb      	adds	r3, r7, r3
   1fb34:	4a1d      	ldr	r2, [pc, #116]	; (1fbac <nm_bus_init+0xc0>)
   1fb36:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1fb38:	230c      	movs	r3, #12
   1fb3a:	18fb      	adds	r3, r7, r3
   1fb3c:	4a1c      	ldr	r2, [pc, #112]	; (1fbb0 <nm_bus_init+0xc4>)
   1fb3e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1fb40:	230c      	movs	r3, #12
   1fb42:	18fb      	adds	r3, r7, r3
   1fb44:	2201      	movs	r2, #1
   1fb46:	4252      	negs	r2, r2
   1fb48:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1fb4a:	230c      	movs	r3, #12
   1fb4c:	18fb      	adds	r3, r7, r3
   1fb4e:	4a19      	ldr	r2, [pc, #100]	; (1fbb4 <nm_bus_init+0xc8>)
   1fb50:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1fb52:	230c      	movs	r3, #12
   1fb54:	18fb      	adds	r3, r7, r3
   1fb56:	2200      	movs	r2, #0
   1fb58:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1fb5a:	230c      	movs	r3, #12
   1fb5c:	18fb      	adds	r3, r7, r3
   1fb5e:	4a16      	ldr	r2, [pc, #88]	; (1fbb8 <nm_bus_init+0xcc>)
   1fb60:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1fb62:	230c      	movs	r3, #12
   1fb64:	18fa      	adds	r2, r7, r3
   1fb66:	4915      	ldr	r1, [pc, #84]	; (1fbbc <nm_bus_init+0xd0>)
   1fb68:	4b15      	ldr	r3, [pc, #84]	; (1fbc0 <nm_bus_init+0xd4>)
   1fb6a:	0018      	movs	r0, r3
   1fb6c:	4b15      	ldr	r3, [pc, #84]	; (1fbc4 <nm_bus_init+0xd8>)
   1fb6e:	4798      	blx	r3
   1fb70:	1e03      	subs	r3, r0, #0
   1fb72:	d002      	beq.n	1fb7a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1fb74:	2306      	movs	r3, #6
   1fb76:	425b      	negs	r3, r3
   1fb78:	e00c      	b.n	1fb94 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1fb7a:	4b11      	ldr	r3, [pc, #68]	; (1fbc0 <nm_bus_init+0xd4>)
   1fb7c:	0018      	movs	r0, r3
   1fb7e:	4b12      	ldr	r3, [pc, #72]	; (1fbc8 <nm_bus_init+0xdc>)
   1fb80:	4798      	blx	r3

	nm_bsp_reset();
   1fb82:	4b12      	ldr	r3, [pc, #72]	; (1fbcc <nm_bus_init+0xe0>)
   1fb84:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fb86:	2001      	movs	r0, #1
   1fb88:	4b11      	ldr	r3, [pc, #68]	; (1fbd0 <nm_bus_init+0xe4>)
   1fb8a:	4798      	blx	r3
#endif
	return result;
   1fb8c:	2347      	movs	r3, #71	; 0x47
   1fb8e:	18fb      	adds	r3, r7, r3
   1fb90:	781b      	ldrb	r3, [r3, #0]
   1fb92:	b25b      	sxtb	r3, r3
}
   1fb94:	0018      	movs	r0, r3
   1fb96:	46bd      	mov	sp, r7
   1fb98:	b012      	add	sp, #72	; 0x48
   1fb9a:	bd80      	pop	{r7, pc}
   1fb9c:	0001f6f9 	.word	0x0001f6f9
   1fba0:	20005a58 	.word	0x20005a58
   1fba4:	0001f71d 	.word	0x0001f71d
   1fba8:	0001f675 	.word	0x0001f675
   1fbac:	000c0002 	.word	0x000c0002
   1fbb0:	000d0002 	.word	0x000d0002
   1fbb4:	000f0002 	.word	0x000f0002
   1fbb8:	00124f80 	.word	0x00124f80
   1fbbc:	42001000 	.word	0x42001000
   1fbc0:	20005a5c 	.word	0x20005a5c
   1fbc4:	00026f5d 	.word	0x00026f5d
   1fbc8:	0001f781 	.word	0x0001f781
   1fbcc:	0001f3f1 	.word	0x0001f3f1
   1fbd0:	0001f431 	.word	0x0001f431

0001fbd4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1fbd4:	b590      	push	{r4, r7, lr}
   1fbd6:	b085      	sub	sp, #20
   1fbd8:	af00      	add	r7, sp, #0
   1fbda:	0002      	movs	r2, r0
   1fbdc:	6039      	str	r1, [r7, #0]
   1fbde:	1dfb      	adds	r3, r7, #7
   1fbe0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1fbe2:	230f      	movs	r3, #15
   1fbe4:	18fb      	adds	r3, r7, r3
   1fbe6:	2200      	movs	r2, #0
   1fbe8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1fbea:	1dfb      	adds	r3, r7, #7
   1fbec:	781b      	ldrb	r3, [r3, #0]
   1fbee:	2b03      	cmp	r3, #3
   1fbf0:	d10f      	bne.n	1fc12 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1fbf2:	683b      	ldr	r3, [r7, #0]
   1fbf4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1fbf6:	68bb      	ldr	r3, [r7, #8]
   1fbf8:	6818      	ldr	r0, [r3, #0]
   1fbfa:	68bb      	ldr	r3, [r7, #8]
   1fbfc:	6859      	ldr	r1, [r3, #4]
   1fbfe:	68bb      	ldr	r3, [r7, #8]
   1fc00:	891b      	ldrh	r3, [r3, #8]
   1fc02:	220f      	movs	r2, #15
   1fc04:	18bc      	adds	r4, r7, r2
   1fc06:	001a      	movs	r2, r3
   1fc08:	4b10      	ldr	r3, [pc, #64]	; (1fc4c <nm_bus_ioctl+0x78>)
   1fc0a:	4798      	blx	r3
   1fc0c:	0003      	movs	r3, r0
   1fc0e:	7023      	strb	r3, [r4, #0]
		}
		break;
   1fc10:	e013      	b.n	1fc3a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1fc12:	230f      	movs	r3, #15
   1fc14:	18fb      	adds	r3, r7, r3
   1fc16:	22ff      	movs	r2, #255	; 0xff
   1fc18:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1fc1a:	2383      	movs	r3, #131	; 0x83
   1fc1c:	005a      	lsls	r2, r3, #1
   1fc1e:	490c      	ldr	r1, [pc, #48]	; (1fc50 <nm_bus_ioctl+0x7c>)
   1fc20:	4b0c      	ldr	r3, [pc, #48]	; (1fc54 <nm_bus_ioctl+0x80>)
   1fc22:	0018      	movs	r0, r3
   1fc24:	4b0c      	ldr	r3, [pc, #48]	; (1fc58 <nm_bus_ioctl+0x84>)
   1fc26:	4798      	blx	r3
   1fc28:	4b0c      	ldr	r3, [pc, #48]	; (1fc5c <nm_bus_ioctl+0x88>)
   1fc2a:	0018      	movs	r0, r3
   1fc2c:	4b0a      	ldr	r3, [pc, #40]	; (1fc58 <nm_bus_ioctl+0x84>)
   1fc2e:	4798      	blx	r3
   1fc30:	4b0b      	ldr	r3, [pc, #44]	; (1fc60 <nm_bus_ioctl+0x8c>)
   1fc32:	0018      	movs	r0, r3
   1fc34:	4b08      	ldr	r3, [pc, #32]	; (1fc58 <nm_bus_ioctl+0x84>)
   1fc36:	4798      	blx	r3
			break;
   1fc38:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1fc3a:	230f      	movs	r3, #15
   1fc3c:	18fb      	adds	r3, r7, r3
   1fc3e:	781b      	ldrb	r3, [r3, #0]
   1fc40:	b25b      	sxtb	r3, r3
}
   1fc42:	0018      	movs	r0, r3
   1fc44:	46bd      	mov	sp, r7
   1fc46:	b005      	add	sp, #20
   1fc48:	bd90      	pop	{r4, r7, pc}
   1fc4a:	46c0      	nop			; (mov r8, r8)
   1fc4c:	0001f975 	.word	0x0001f975
   1fc50:	00037e1c 	.word	0x00037e1c
   1fc54:	00037df0 	.word	0x00037df0
   1fc58:	0001cf79 	.word	0x0001cf79
   1fc5c:	00037e04 	.word	0x00037e04
   1fc60:	00037e18 	.word	0x00037e18

0001fc64 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1fc64:	b580      	push	{r7, lr}
   1fc66:	b082      	sub	sp, #8
   1fc68:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1fc6a:	1dfb      	adds	r3, r7, #7
   1fc6c:	2200      	movs	r2, #0
   1fc6e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1fc70:	1d3b      	adds	r3, r7, #4
   1fc72:	0018      	movs	r0, r3
   1fc74:	4b13      	ldr	r3, [pc, #76]	; (1fcc4 <nm_bus_deinit+0x60>)
   1fc76:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1fc78:	1d3b      	adds	r3, r7, #4
   1fc7a:	2200      	movs	r2, #0
   1fc7c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1fc7e:	1d3b      	adds	r3, r7, #4
   1fc80:	2200      	movs	r2, #0
   1fc82:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1fc84:	4b10      	ldr	r3, [pc, #64]	; (1fcc8 <nm_bus_deinit+0x64>)
   1fc86:	0018      	movs	r0, r3
   1fc88:	4b10      	ldr	r3, [pc, #64]	; (1fccc <nm_bus_deinit+0x68>)
   1fc8a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1fc8c:	1d3b      	adds	r3, r7, #4
   1fc8e:	0019      	movs	r1, r3
   1fc90:	200c      	movs	r0, #12
   1fc92:	4b0f      	ldr	r3, [pc, #60]	; (1fcd0 <nm_bus_deinit+0x6c>)
   1fc94:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1fc96:	1d3b      	adds	r3, r7, #4
   1fc98:	0019      	movs	r1, r3
   1fc9a:	200f      	movs	r0, #15
   1fc9c:	4b0c      	ldr	r3, [pc, #48]	; (1fcd0 <nm_bus_deinit+0x6c>)
   1fc9e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1fca0:	1d3b      	adds	r3, r7, #4
   1fca2:	0019      	movs	r1, r3
   1fca4:	200d      	movs	r0, #13
   1fca6:	4b0a      	ldr	r3, [pc, #40]	; (1fcd0 <nm_bus_deinit+0x6c>)
   1fca8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1fcaa:	1d3b      	adds	r3, r7, #4
   1fcac:	0019      	movs	r1, r3
   1fcae:	200e      	movs	r0, #14
   1fcb0:	4b07      	ldr	r3, [pc, #28]	; (1fcd0 <nm_bus_deinit+0x6c>)
   1fcb2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1fcb4:	1dfb      	adds	r3, r7, #7
   1fcb6:	781b      	ldrb	r3, [r3, #0]
   1fcb8:	b25b      	sxtb	r3, r3
}
   1fcba:	0018      	movs	r0, r3
   1fcbc:	46bd      	mov	sp, r7
   1fcbe:	b002      	add	sp, #8
   1fcc0:	bd80      	pop	{r7, pc}
   1fcc2:	46c0      	nop			; (mov r8, r8)
   1fcc4:	0001f5dd 	.word	0x0001f5dd
   1fcc8:	20005a5c 	.word	0x20005a5c
   1fccc:	0001f7d1 	.word	0x0001f7d1
   1fcd0:	00025add 	.word	0x00025add

0001fcd4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1fcd4:	b580      	push	{r7, lr}
   1fcd6:	b084      	sub	sp, #16
   1fcd8:	af00      	add	r7, sp, #0
   1fcda:	60f8      	str	r0, [r7, #12]
   1fcdc:	60b9      	str	r1, [r7, #8]
   1fcde:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1fce0:	687b      	ldr	r3, [r7, #4]
   1fce2:	2b00      	cmp	r3, #0
   1fce4:	d010      	beq.n	1fd08 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1fce6:	68bb      	ldr	r3, [r7, #8]
   1fce8:	781a      	ldrb	r2, [r3, #0]
   1fcea:	68fb      	ldr	r3, [r7, #12]
   1fcec:	701a      	strb	r2, [r3, #0]
		pDst++;
   1fcee:	68fb      	ldr	r3, [r7, #12]
   1fcf0:	3301      	adds	r3, #1
   1fcf2:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1fcf4:	68bb      	ldr	r3, [r7, #8]
   1fcf6:	3301      	adds	r3, #1
   1fcf8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1fcfa:	687b      	ldr	r3, [r7, #4]
   1fcfc:	3b01      	subs	r3, #1
   1fcfe:	607b      	str	r3, [r7, #4]
   1fd00:	687b      	ldr	r3, [r7, #4]
   1fd02:	2b00      	cmp	r3, #0
   1fd04:	d1ef      	bne.n	1fce6 <m2m_memcpy+0x12>
   1fd06:	e000      	b.n	1fd0a <m2m_memcpy+0x36>
	if(sz == 0) return;
   1fd08:	46c0      	nop			; (mov r8, r8)
}
   1fd0a:	46bd      	mov	sp, r7
   1fd0c:	b004      	add	sp, #16
   1fd0e:	bd80      	pop	{r7, pc}

0001fd10 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1fd10:	b580      	push	{r7, lr}
   1fd12:	b084      	sub	sp, #16
   1fd14:	af00      	add	r7, sp, #0
   1fd16:	60f8      	str	r0, [r7, #12]
   1fd18:	607a      	str	r2, [r7, #4]
   1fd1a:	230b      	movs	r3, #11
   1fd1c:	18fb      	adds	r3, r7, r3
   1fd1e:	1c0a      	adds	r2, r1, #0
   1fd20:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1fd22:	687b      	ldr	r3, [r7, #4]
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d00e      	beq.n	1fd46 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1fd28:	68fb      	ldr	r3, [r7, #12]
   1fd2a:	220b      	movs	r2, #11
   1fd2c:	18ba      	adds	r2, r7, r2
   1fd2e:	7812      	ldrb	r2, [r2, #0]
   1fd30:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1fd32:	68fb      	ldr	r3, [r7, #12]
   1fd34:	3301      	adds	r3, #1
   1fd36:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1fd38:	687b      	ldr	r3, [r7, #4]
   1fd3a:	3b01      	subs	r3, #1
   1fd3c:	607b      	str	r3, [r7, #4]
   1fd3e:	687b      	ldr	r3, [r7, #4]
   1fd40:	2b00      	cmp	r3, #0
   1fd42:	d1f1      	bne.n	1fd28 <m2m_memset+0x18>
   1fd44:	e000      	b.n	1fd48 <m2m_memset+0x38>
	if(sz == 0) return;
   1fd46:	46c0      	nop			; (mov r8, r8)
}
   1fd48:	46bd      	mov	sp, r7
   1fd4a:	b004      	add	sp, #16
   1fd4c:	bd80      	pop	{r7, pc}

0001fd4e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1fd4e:	b580      	push	{r7, lr}
   1fd50:	b084      	sub	sp, #16
   1fd52:	af00      	add	r7, sp, #0
   1fd54:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1fd56:	230e      	movs	r3, #14
   1fd58:	18fb      	adds	r3, r7, r3
   1fd5a:	2200      	movs	r2, #0
   1fd5c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1fd5e:	e009      	b.n	1fd74 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1fd60:	230e      	movs	r3, #14
   1fd62:	18fb      	adds	r3, r7, r3
   1fd64:	881a      	ldrh	r2, [r3, #0]
   1fd66:	230e      	movs	r3, #14
   1fd68:	18fb      	adds	r3, r7, r3
   1fd6a:	3201      	adds	r2, #1
   1fd6c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1fd6e:	687b      	ldr	r3, [r7, #4]
   1fd70:	3301      	adds	r3, #1
   1fd72:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1fd74:	687b      	ldr	r3, [r7, #4]
   1fd76:	781b      	ldrb	r3, [r3, #0]
   1fd78:	2b00      	cmp	r3, #0
   1fd7a:	d1f1      	bne.n	1fd60 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1fd7c:	230e      	movs	r3, #14
   1fd7e:	18fb      	adds	r3, r7, r3
   1fd80:	881b      	ldrh	r3, [r3, #0]
}
   1fd82:	0018      	movs	r0, r3
   1fd84:	46bd      	mov	sp, r7
   1fd86:	b004      	add	sp, #16
   1fd88:	bd80      	pop	{r7, pc}
	...

0001fd8c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1fd8c:	b580      	push	{r7, lr}
   1fd8e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1fd90:	4b04      	ldr	r3, [pc, #16]	; (1fda4 <isr+0x18>)
   1fd92:	78db      	ldrb	r3, [r3, #3]
   1fd94:	b2db      	uxtb	r3, r3
   1fd96:	3301      	adds	r3, #1
   1fd98:	b2da      	uxtb	r2, r3
   1fd9a:	4b02      	ldr	r3, [pc, #8]	; (1fda4 <isr+0x18>)
   1fd9c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1fd9e:	46c0      	nop			; (mov r8, r8)
   1fda0:	46bd      	mov	sp, r7
   1fda2:	bd80      	pop	{r7, pc}
   1fda4:	20005a98 	.word	0x20005a98

0001fda8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1fda8:	b590      	push	{r4, r7, lr}
   1fdaa:	b083      	sub	sp, #12
   1fdac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1fdae:	1dfb      	adds	r3, r7, #7
   1fdb0:	2200      	movs	r2, #0
   1fdb2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1fdb4:	4b14      	ldr	r3, [pc, #80]	; (1fe08 <hif_set_rx_done+0x60>)
   1fdb6:	2200      	movs	r2, #0
   1fdb8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1fdba:	2001      	movs	r0, #1
   1fdbc:	4b13      	ldr	r3, [pc, #76]	; (1fe0c <hif_set_rx_done+0x64>)
   1fdbe:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1fdc0:	1dfc      	adds	r4, r7, #7
   1fdc2:	003b      	movs	r3, r7
   1fdc4:	4a12      	ldr	r2, [pc, #72]	; (1fe10 <hif_set_rx_done+0x68>)
   1fdc6:	0019      	movs	r1, r3
   1fdc8:	0010      	movs	r0, r2
   1fdca:	4b12      	ldr	r3, [pc, #72]	; (1fe14 <hif_set_rx_done+0x6c>)
   1fdcc:	4798      	blx	r3
   1fdce:	0003      	movs	r3, r0
   1fdd0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1fdd2:	1dfb      	adds	r3, r7, #7
   1fdd4:	781b      	ldrb	r3, [r3, #0]
   1fdd6:	b25b      	sxtb	r3, r3
   1fdd8:	2b00      	cmp	r3, #0
   1fdda:	d10d      	bne.n	1fdf8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1fddc:	683b      	ldr	r3, [r7, #0]
   1fdde:	2202      	movs	r2, #2
   1fde0:	4313      	orrs	r3, r2
   1fde2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1fde4:	683b      	ldr	r3, [r7, #0]
   1fde6:	1dfc      	adds	r4, r7, #7
   1fde8:	4a09      	ldr	r2, [pc, #36]	; (1fe10 <hif_set_rx_done+0x68>)
   1fdea:	0019      	movs	r1, r3
   1fdec:	0010      	movs	r0, r2
   1fdee:	4b0a      	ldr	r3, [pc, #40]	; (1fe18 <hif_set_rx_done+0x70>)
   1fdf0:	4798      	blx	r3
   1fdf2:	0003      	movs	r3, r0
   1fdf4:	7023      	strb	r3, [r4, #0]
   1fdf6:	e000      	b.n	1fdfa <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1fdf8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1fdfa:	1dfb      	adds	r3, r7, #7
   1fdfc:	781b      	ldrb	r3, [r3, #0]
   1fdfe:	b25b      	sxtb	r3, r3

}
   1fe00:	0018      	movs	r0, r3
   1fe02:	46bd      	mov	sp, r7
   1fe04:	b003      	add	sp, #12
   1fe06:	bd90      	pop	{r4, r7, pc}
   1fe08:	20005a98 	.word	0x20005a98
   1fe0c:	0001f4c5 	.word	0x0001f4c5
   1fe10:	00001070 	.word	0x00001070
   1fe14:	00021da1 	.word	0x00021da1
   1fe18:	00021dc5 	.word	0x00021dc5

0001fe1c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1fe1c:	b580      	push	{r7, lr}
   1fe1e:	b082      	sub	sp, #8
   1fe20:	af00      	add	r7, sp, #0
   1fe22:	603a      	str	r2, [r7, #0]
   1fe24:	1dfb      	adds	r3, r7, #7
   1fe26:	1c02      	adds	r2, r0, #0
   1fe28:	701a      	strb	r2, [r3, #0]
   1fe2a:	1d3b      	adds	r3, r7, #4
   1fe2c:	1c0a      	adds	r2, r1, #0
   1fe2e:	801a      	strh	r2, [r3, #0]


}
   1fe30:	46c0      	nop			; (mov r8, r8)
   1fe32:	46bd      	mov	sp, r7
   1fe34:	b002      	add	sp, #8
   1fe36:	bd80      	pop	{r7, pc}

0001fe38 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1fe38:	b590      	push	{r4, r7, lr}
   1fe3a:	b083      	sub	sp, #12
   1fe3c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1fe3e:	1dfb      	adds	r3, r7, #7
   1fe40:	2200      	movs	r2, #0
   1fe42:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1fe44:	4b16      	ldr	r3, [pc, #88]	; (1fea0 <hif_chip_wake+0x68>)
   1fe46:	789b      	ldrb	r3, [r3, #2]
   1fe48:	b2db      	uxtb	r3, r3
   1fe4a:	2b00      	cmp	r3, #0
   1fe4c:	d003      	beq.n	1fe56 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1fe4e:	1dfb      	adds	r3, r7, #7
   1fe50:	781b      	ldrb	r3, [r3, #0]
   1fe52:	b25b      	sxtb	r3, r3
   1fe54:	e01f      	b.n	1fe96 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1fe56:	4b12      	ldr	r3, [pc, #72]	; (1fea0 <hif_chip_wake+0x68>)
   1fe58:	785b      	ldrb	r3, [r3, #1]
   1fe5a:	b2db      	uxtb	r3, r3
   1fe5c:	2b00      	cmp	r3, #0
   1fe5e:	d10e      	bne.n	1fe7e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1fe60:	4b0f      	ldr	r3, [pc, #60]	; (1fea0 <hif_chip_wake+0x68>)
   1fe62:	781b      	ldrb	r3, [r3, #0]
   1fe64:	b2db      	uxtb	r3, r3
   1fe66:	2b00      	cmp	r3, #0
   1fe68:	d009      	beq.n	1fe7e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1fe6a:	1dfc      	adds	r4, r7, #7
   1fe6c:	4b0d      	ldr	r3, [pc, #52]	; (1fea4 <hif_chip_wake+0x6c>)
   1fe6e:	4798      	blx	r3
   1fe70:	0003      	movs	r3, r0
   1fe72:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1fe74:	1dfb      	adds	r3, r7, #7
   1fe76:	781b      	ldrb	r3, [r3, #0]
   1fe78:	b25b      	sxtb	r3, r3
   1fe7a:	2b00      	cmp	r3, #0
   1fe7c:	d107      	bne.n	1fe8e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1fe7e:	4b08      	ldr	r3, [pc, #32]	; (1fea0 <hif_chip_wake+0x68>)
   1fe80:	785b      	ldrb	r3, [r3, #1]
   1fe82:	b2db      	uxtb	r3, r3
   1fe84:	3301      	adds	r3, #1
   1fe86:	b2da      	uxtb	r2, r3
   1fe88:	4b05      	ldr	r3, [pc, #20]	; (1fea0 <hif_chip_wake+0x68>)
   1fe8a:	705a      	strb	r2, [r3, #1]
   1fe8c:	e000      	b.n	1fe90 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1fe8e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1fe90:	1dfb      	adds	r3, r7, #7
   1fe92:	781b      	ldrb	r3, [r3, #0]
   1fe94:	b25b      	sxtb	r3, r3
}
   1fe96:	0018      	movs	r0, r3
   1fe98:	46bd      	mov	sp, r7
   1fe9a:	b003      	add	sp, #12
   1fe9c:	bd90      	pop	{r4, r7, pc}
   1fe9e:	46c0      	nop			; (mov r8, r8)
   1fea0:	20005a98 	.word	0x20005a98
   1fea4:	00021871 	.word	0x00021871

0001fea8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1fea8:	b580      	push	{r7, lr}
   1feaa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1feac:	4b07      	ldr	r3, [pc, #28]	; (1fecc <hif_chip_sleep_sc+0x24>)
   1feae:	785b      	ldrb	r3, [r3, #1]
   1feb0:	b2db      	uxtb	r3, r3
   1feb2:	2b00      	cmp	r3, #0
   1feb4:	d006      	beq.n	1fec4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1feb6:	4b05      	ldr	r3, [pc, #20]	; (1fecc <hif_chip_sleep_sc+0x24>)
   1feb8:	785b      	ldrb	r3, [r3, #1]
   1feba:	b2db      	uxtb	r3, r3
   1febc:	3b01      	subs	r3, #1
   1febe:	b2da      	uxtb	r2, r3
   1fec0:	4b02      	ldr	r3, [pc, #8]	; (1fecc <hif_chip_sleep_sc+0x24>)
   1fec2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1fec4:	2300      	movs	r3, #0
}
   1fec6:	0018      	movs	r0, r3
   1fec8:	46bd      	mov	sp, r7
   1feca:	bd80      	pop	{r7, pc}
   1fecc:	20005a98 	.word	0x20005a98

0001fed0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1fed0:	b590      	push	{r4, r7, lr}
   1fed2:	b083      	sub	sp, #12
   1fed4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1fed6:	1dfb      	adds	r3, r7, #7
   1fed8:	2200      	movs	r2, #0
   1feda:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1fedc:	4b10      	ldr	r3, [pc, #64]	; (1ff20 <hif_chip_sleep+0x50>)
   1fede:	785b      	ldrb	r3, [r3, #1]
   1fee0:	b2db      	uxtb	r3, r3
   1fee2:	2b00      	cmp	r3, #0
   1fee4:	d006      	beq.n	1fef4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1fee6:	4b0e      	ldr	r3, [pc, #56]	; (1ff20 <hif_chip_sleep+0x50>)
   1fee8:	785b      	ldrb	r3, [r3, #1]
   1feea:	b2db      	uxtb	r3, r3
   1feec:	3b01      	subs	r3, #1
   1feee:	b2da      	uxtb	r2, r3
   1fef0:	4b0b      	ldr	r3, [pc, #44]	; (1ff20 <hif_chip_sleep+0x50>)
   1fef2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1fef4:	4b0a      	ldr	r3, [pc, #40]	; (1ff20 <hif_chip_sleep+0x50>)
   1fef6:	785b      	ldrb	r3, [r3, #1]
   1fef8:	b2db      	uxtb	r3, r3
   1fefa:	2b00      	cmp	r3, #0
   1fefc:	d109      	bne.n	1ff12 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1fefe:	4b08      	ldr	r3, [pc, #32]	; (1ff20 <hif_chip_sleep+0x50>)
   1ff00:	781b      	ldrb	r3, [r3, #0]
   1ff02:	b2db      	uxtb	r3, r3
   1ff04:	2b00      	cmp	r3, #0
   1ff06:	d004      	beq.n	1ff12 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1ff08:	1dfc      	adds	r4, r7, #7
   1ff0a:	4b06      	ldr	r3, [pc, #24]	; (1ff24 <hif_chip_sleep+0x54>)
   1ff0c:	4798      	blx	r3
   1ff0e:	0003      	movs	r3, r0
   1ff10:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1ff12:	1dfb      	adds	r3, r7, #7
   1ff14:	781b      	ldrb	r3, [r3, #0]
   1ff16:	b25b      	sxtb	r3, r3
}
   1ff18:	0018      	movs	r0, r3
   1ff1a:	46bd      	mov	sp, r7
   1ff1c:	b003      	add	sp, #12
   1ff1e:	bd90      	pop	{r4, r7, pc}
   1ff20:	20005a98 	.word	0x20005a98
   1ff24:	00021799 	.word	0x00021799

0001ff28 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1ff28:	b580      	push	{r7, lr}
   1ff2a:	b082      	sub	sp, #8
   1ff2c:	af00      	add	r7, sp, #0
   1ff2e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1ff30:	4b09      	ldr	r3, [pc, #36]	; (1ff58 <hif_init+0x30>)
   1ff32:	222c      	movs	r2, #44	; 0x2c
   1ff34:	2100      	movs	r1, #0
   1ff36:	0018      	movs	r0, r3
   1ff38:	4b08      	ldr	r3, [pc, #32]	; (1ff5c <hif_init+0x34>)
   1ff3a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1ff3c:	4b08      	ldr	r3, [pc, #32]	; (1ff60 <hif_init+0x38>)
   1ff3e:	0018      	movs	r0, r3
   1ff40:	4b08      	ldr	r3, [pc, #32]	; (1ff64 <hif_init+0x3c>)
   1ff42:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1ff44:	4b08      	ldr	r3, [pc, #32]	; (1ff68 <hif_init+0x40>)
   1ff46:	0019      	movs	r1, r3
   1ff48:	2003      	movs	r0, #3
   1ff4a:	4b08      	ldr	r3, [pc, #32]	; (1ff6c <hif_init+0x44>)
   1ff4c:	4798      	blx	r3
	return M2M_SUCCESS;
   1ff4e:	2300      	movs	r3, #0
}
   1ff50:	0018      	movs	r0, r3
   1ff52:	46bd      	mov	sp, r7
   1ff54:	b002      	add	sp, #8
   1ff56:	bd80      	pop	{r7, pc}
   1ff58:	20005a98 	.word	0x20005a98
   1ff5c:	0001fd11 	.word	0x0001fd11
   1ff60:	0001fd8d 	.word	0x0001fd8d
   1ff64:	0001f44d 	.word	0x0001f44d
   1ff68:	0001fe1d 	.word	0x0001fe1d
   1ff6c:	00020a0d 	.word	0x00020a0d

0001ff70 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1ff70:	b590      	push	{r4, r7, lr}
   1ff72:	b089      	sub	sp, #36	; 0x24
   1ff74:	af00      	add	r7, sp, #0
   1ff76:	0004      	movs	r4, r0
   1ff78:	0008      	movs	r0, r1
   1ff7a:	603a      	str	r2, [r7, #0]
   1ff7c:	0019      	movs	r1, r3
   1ff7e:	1dfb      	adds	r3, r7, #7
   1ff80:	1c22      	adds	r2, r4, #0
   1ff82:	701a      	strb	r2, [r3, #0]
   1ff84:	1dbb      	adds	r3, r7, #6
   1ff86:	1c02      	adds	r2, r0, #0
   1ff88:	701a      	strb	r2, [r3, #0]
   1ff8a:	1d3b      	adds	r3, r7, #4
   1ff8c:	1c0a      	adds	r2, r1, #0
   1ff8e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1ff90:	231f      	movs	r3, #31
   1ff92:	18fb      	adds	r3, r7, r3
   1ff94:	22ff      	movs	r2, #255	; 0xff
   1ff96:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1ff98:	1dbb      	adds	r3, r7, #6
   1ff9a:	781b      	ldrb	r3, [r3, #0]
   1ff9c:	227f      	movs	r2, #127	; 0x7f
   1ff9e:	4013      	ands	r3, r2
   1ffa0:	b2da      	uxtb	r2, r3
   1ffa2:	2318      	movs	r3, #24
   1ffa4:	18fb      	adds	r3, r7, r3
   1ffa6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1ffa8:	2318      	movs	r3, #24
   1ffaa:	18fb      	adds	r3, r7, r3
   1ffac:	1dfa      	adds	r2, r7, #7
   1ffae:	7812      	ldrb	r2, [r2, #0]
   1ffb0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1ffb2:	2318      	movs	r3, #24
   1ffb4:	18fb      	adds	r3, r7, r3
   1ffb6:	2208      	movs	r2, #8
   1ffb8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ffbc:	2b00      	cmp	r3, #0
   1ffbe:	d011      	beq.n	1ffe4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1ffc0:	2318      	movs	r3, #24
   1ffc2:	18fb      	adds	r3, r7, r3
   1ffc4:	885b      	ldrh	r3, [r3, #2]
   1ffc6:	b29a      	uxth	r2, r3
   1ffc8:	2338      	movs	r3, #56	; 0x38
   1ffca:	18f9      	adds	r1, r7, r3
   1ffcc:	2334      	movs	r3, #52	; 0x34
   1ffce:	18fb      	adds	r3, r7, r3
   1ffd0:	8809      	ldrh	r1, [r1, #0]
   1ffd2:	881b      	ldrh	r3, [r3, #0]
   1ffd4:	18cb      	adds	r3, r1, r3
   1ffd6:	b29b      	uxth	r3, r3
   1ffd8:	18d3      	adds	r3, r2, r3
   1ffda:	b29a      	uxth	r2, r3
   1ffdc:	2318      	movs	r3, #24
   1ffde:	18fb      	adds	r3, r7, r3
   1ffe0:	805a      	strh	r2, [r3, #2]
   1ffe2:	e00a      	b.n	1fffa <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1ffe4:	2318      	movs	r3, #24
   1ffe6:	18fb      	adds	r3, r7, r3
   1ffe8:	885b      	ldrh	r3, [r3, #2]
   1ffea:	b29a      	uxth	r2, r3
   1ffec:	1d3b      	adds	r3, r7, #4
   1ffee:	881b      	ldrh	r3, [r3, #0]
   1fff0:	18d3      	adds	r3, r2, r3
   1fff2:	b29a      	uxth	r2, r3
   1fff4:	2318      	movs	r3, #24
   1fff6:	18fb      	adds	r3, r7, r3
   1fff8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1fffa:	231f      	movs	r3, #31
   1fffc:	18fc      	adds	r4, r7, r3
   1fffe:	4bb2      	ldr	r3, [pc, #712]	; (202c8 <hif_send+0x358>)
   20000:	4798      	blx	r3
   20002:	0003      	movs	r3, r0
   20004:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20006:	231f      	movs	r3, #31
   20008:	18fb      	adds	r3, r7, r3
   2000a:	781b      	ldrb	r3, [r3, #0]
   2000c:	b25b      	sxtb	r3, r3
   2000e:	2b00      	cmp	r3, #0
   20010:	d000      	beq.n	20014 <hif_send+0xa4>
   20012:	e129      	b.n	20268 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20014:	2300      	movs	r3, #0
   20016:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20018:	230e      	movs	r3, #14
   2001a:	18fb      	adds	r3, r7, r3
   2001c:	2200      	movs	r2, #0
   2001e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20020:	2300      	movs	r3, #0
   20022:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20024:	1dfb      	adds	r3, r7, #7
   20026:	781a      	ldrb	r2, [r3, #0]
   20028:	697b      	ldr	r3, [r7, #20]
   2002a:	4313      	orrs	r3, r2
   2002c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   2002e:	1dbb      	adds	r3, r7, #6
   20030:	781b      	ldrb	r3, [r3, #0]
   20032:	021a      	lsls	r2, r3, #8
   20034:	697b      	ldr	r3, [r7, #20]
   20036:	4313      	orrs	r3, r2
   20038:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   2003a:	2318      	movs	r3, #24
   2003c:	18fb      	adds	r3, r7, r3
   2003e:	885b      	ldrh	r3, [r3, #2]
   20040:	b29b      	uxth	r3, r3
   20042:	041a      	lsls	r2, r3, #16
   20044:	697b      	ldr	r3, [r7, #20]
   20046:	4313      	orrs	r3, r2
   20048:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   2004a:	697b      	ldr	r3, [r7, #20]
   2004c:	221f      	movs	r2, #31
   2004e:	18bc      	adds	r4, r7, r2
   20050:	4a9e      	ldr	r2, [pc, #632]	; (202cc <hif_send+0x35c>)
   20052:	0019      	movs	r1, r3
   20054:	0010      	movs	r0, r2
   20056:	4b9e      	ldr	r3, [pc, #632]	; (202d0 <hif_send+0x360>)
   20058:	4798      	blx	r3
   2005a:	0003      	movs	r3, r0
   2005c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2005e:	231f      	movs	r3, #31
   20060:	18fb      	adds	r3, r7, r3
   20062:	781b      	ldrb	r3, [r3, #0]
   20064:	b25b      	sxtb	r3, r3
   20066:	2b00      	cmp	r3, #0
   20068:	d000      	beq.n	2006c <hif_send+0xfc>
   2006a:	e119      	b.n	202a0 <hif_send+0x330>

		reg = 0UL;
   2006c:	2300      	movs	r3, #0
   2006e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20070:	697b      	ldr	r3, [r7, #20]
   20072:	2202      	movs	r2, #2
   20074:	4313      	orrs	r3, r2
   20076:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20078:	697b      	ldr	r3, [r7, #20]
   2007a:	221f      	movs	r2, #31
   2007c:	18bc      	adds	r4, r7, r2
   2007e:	4a95      	ldr	r2, [pc, #596]	; (202d4 <hif_send+0x364>)
   20080:	0019      	movs	r1, r3
   20082:	0010      	movs	r0, r2
   20084:	4b92      	ldr	r3, [pc, #584]	; (202d0 <hif_send+0x360>)
   20086:	4798      	blx	r3
   20088:	0003      	movs	r3, r0
   2008a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2008c:	231f      	movs	r3, #31
   2008e:	18fb      	adds	r3, r7, r3
   20090:	781b      	ldrb	r3, [r3, #0]
   20092:	b25b      	sxtb	r3, r3
   20094:	2b00      	cmp	r3, #0
   20096:	d000      	beq.n	2009a <hif_send+0x12a>
   20098:	e104      	b.n	202a4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   2009a:	2300      	movs	r3, #0
   2009c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2009e:	230e      	movs	r3, #14
   200a0:	18fb      	adds	r3, r7, r3
   200a2:	2200      	movs	r2, #0
   200a4:	801a      	strh	r2, [r3, #0]
   200a6:	e050      	b.n	2014a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   200a8:	231f      	movs	r3, #31
   200aa:	18fc      	adds	r4, r7, r3
   200ac:	2314      	movs	r3, #20
   200ae:	18fb      	adds	r3, r7, r3
   200b0:	4a88      	ldr	r2, [pc, #544]	; (202d4 <hif_send+0x364>)
   200b2:	0019      	movs	r1, r3
   200b4:	0010      	movs	r0, r2
   200b6:	4b88      	ldr	r3, [pc, #544]	; (202d8 <hif_send+0x368>)
   200b8:	4798      	blx	r3
   200ba:	0003      	movs	r3, r0
   200bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   200be:	231f      	movs	r3, #31
   200c0:	18fb      	adds	r3, r7, r3
   200c2:	781b      	ldrb	r3, [r3, #0]
   200c4:	b25b      	sxtb	r3, r3
   200c6:	2b00      	cmp	r3, #0
   200c8:	d147      	bne.n	2015a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   200ca:	230e      	movs	r3, #14
   200cc:	18fb      	adds	r3, r7, r3
   200ce:	881b      	ldrh	r3, [r3, #0]
   200d0:	b29a      	uxth	r2, r3
   200d2:	23f4      	movs	r3, #244	; 0xf4
   200d4:	33ff      	adds	r3, #255	; 0xff
   200d6:	429a      	cmp	r2, r3
   200d8:	d916      	bls.n	20108 <hif_send+0x198>
				if(cnt < 501) {
   200da:	230e      	movs	r3, #14
   200dc:	18fb      	adds	r3, r7, r3
   200de:	881b      	ldrh	r3, [r3, #0]
   200e0:	b29a      	uxth	r2, r3
   200e2:	23fa      	movs	r3, #250	; 0xfa
   200e4:	005b      	lsls	r3, r3, #1
   200e6:	429a      	cmp	r2, r3
   200e8:	d80b      	bhi.n	20102 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   200ea:	4b7c      	ldr	r3, [pc, #496]	; (202dc <hif_send+0x36c>)
   200ec:	0018      	movs	r0, r3
   200ee:	4b7c      	ldr	r3, [pc, #496]	; (202e0 <hif_send+0x370>)
   200f0:	4798      	blx	r3
   200f2:	4b7c      	ldr	r3, [pc, #496]	; (202e4 <hif_send+0x374>)
   200f4:	0018      	movs	r0, r3
   200f6:	4b7a      	ldr	r3, [pc, #488]	; (202e0 <hif_send+0x370>)
   200f8:	4798      	blx	r3
   200fa:	4b7b      	ldr	r3, [pc, #492]	; (202e8 <hif_send+0x378>)
   200fc:	0018      	movs	r0, r3
   200fe:	4b78      	ldr	r3, [pc, #480]	; (202e0 <hif_send+0x370>)
   20100:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20102:	2001      	movs	r0, #1
   20104:	4b79      	ldr	r3, [pc, #484]	; (202ec <hif_send+0x37c>)
   20106:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20108:	697b      	ldr	r3, [r7, #20]
   2010a:	2202      	movs	r2, #2
   2010c:	4013      	ands	r3, r2
   2010e:	d113      	bne.n	20138 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20110:	231f      	movs	r3, #31
   20112:	18fc      	adds	r4, r7, r3
   20114:	2310      	movs	r3, #16
   20116:	18fb      	adds	r3, r7, r3
   20118:	4a75      	ldr	r2, [pc, #468]	; (202f0 <hif_send+0x380>)
   2011a:	0019      	movs	r1, r3
   2011c:	0010      	movs	r0, r2
   2011e:	4b6e      	ldr	r3, [pc, #440]	; (202d8 <hif_send+0x368>)
   20120:	4798      	blx	r3
   20122:	0003      	movs	r3, r0
   20124:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20126:	231f      	movs	r3, #31
   20128:	18fb      	adds	r3, r7, r3
   2012a:	781b      	ldrb	r3, [r3, #0]
   2012c:	b25b      	sxtb	r3, r3
   2012e:	2b00      	cmp	r3, #0
   20130:	d015      	beq.n	2015e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20132:	2300      	movs	r3, #0
   20134:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20136:	e0bc      	b.n	202b2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20138:	230e      	movs	r3, #14
   2013a:	18fb      	adds	r3, r7, r3
   2013c:	881b      	ldrh	r3, [r3, #0]
   2013e:	b29b      	uxth	r3, r3
   20140:	3301      	adds	r3, #1
   20142:	b29a      	uxth	r2, r3
   20144:	230e      	movs	r3, #14
   20146:	18fb      	adds	r3, r7, r3
   20148:	801a      	strh	r2, [r3, #0]
   2014a:	230e      	movs	r3, #14
   2014c:	18fb      	adds	r3, r7, r3
   2014e:	881b      	ldrh	r3, [r3, #0]
   20150:	b29b      	uxth	r3, r3
   20152:	4a68      	ldr	r2, [pc, #416]	; (202f4 <hif_send+0x384>)
   20154:	4293      	cmp	r3, r2
   20156:	d9a7      	bls.n	200a8 <hif_send+0x138>
   20158:	e002      	b.n	20160 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   2015a:	46c0      	nop			; (mov r8, r8)
   2015c:	e000      	b.n	20160 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   2015e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20160:	693b      	ldr	r3, [r7, #16]
   20162:	2b00      	cmp	r3, #0
   20164:	d100      	bne.n	20168 <hif_send+0x1f8>
   20166:	e074      	b.n	20252 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20168:	693b      	ldr	r3, [r7, #16]
   2016a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   2016c:	2318      	movs	r3, #24
   2016e:	18fb      	adds	r3, r7, r3
   20170:	885b      	ldrh	r3, [r3, #2]
   20172:	b29a      	uxth	r2, r3
   20174:	2318      	movs	r3, #24
   20176:	18fb      	adds	r3, r7, r3
   20178:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   2017a:	68bb      	ldr	r3, [r7, #8]
   2017c:	221f      	movs	r2, #31
   2017e:	18bc      	adds	r4, r7, r2
   20180:	2218      	movs	r2, #24
   20182:	18b9      	adds	r1, r7, r2
   20184:	2208      	movs	r2, #8
   20186:	0018      	movs	r0, r3
   20188:	4b5b      	ldr	r3, [pc, #364]	; (202f8 <hif_send+0x388>)
   2018a:	4798      	blx	r3
   2018c:	0003      	movs	r3, r0
   2018e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20190:	231f      	movs	r3, #31
   20192:	18fb      	adds	r3, r7, r3
   20194:	781b      	ldrb	r3, [r3, #0]
   20196:	b25b      	sxtb	r3, r3
   20198:	2b00      	cmp	r3, #0
   2019a:	d000      	beq.n	2019e <hif_send+0x22e>
   2019c:	e084      	b.n	202a8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2019e:	68bb      	ldr	r3, [r7, #8]
   201a0:	3308      	adds	r3, #8
   201a2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   201a4:	683b      	ldr	r3, [r7, #0]
   201a6:	2b00      	cmp	r3, #0
   201a8:	d016      	beq.n	201d8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   201aa:	68b8      	ldr	r0, [r7, #8]
   201ac:	1d3b      	adds	r3, r7, #4
   201ae:	881a      	ldrh	r2, [r3, #0]
   201b0:	231f      	movs	r3, #31
   201b2:	18fc      	adds	r4, r7, r3
   201b4:	683b      	ldr	r3, [r7, #0]
   201b6:	0019      	movs	r1, r3
   201b8:	4b4f      	ldr	r3, [pc, #316]	; (202f8 <hif_send+0x388>)
   201ba:	4798      	blx	r3
   201bc:	0003      	movs	r3, r0
   201be:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   201c0:	231f      	movs	r3, #31
   201c2:	18fb      	adds	r3, r7, r3
   201c4:	781b      	ldrb	r3, [r3, #0]
   201c6:	b25b      	sxtb	r3, r3
   201c8:	2b00      	cmp	r3, #0
   201ca:	d000      	beq.n	201ce <hif_send+0x25e>
   201cc:	e06e      	b.n	202ac <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   201ce:	1d3b      	adds	r3, r7, #4
   201d0:	881a      	ldrh	r2, [r3, #0]
   201d2:	68bb      	ldr	r3, [r7, #8]
   201d4:	18d3      	adds	r3, r2, r3
   201d6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   201d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   201da:	2b00      	cmp	r3, #0
   201dc:	d021      	beq.n	20222 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   201de:	2338      	movs	r3, #56	; 0x38
   201e0:	18fb      	adds	r3, r7, r3
   201e2:	881a      	ldrh	r2, [r3, #0]
   201e4:	1d3b      	adds	r3, r7, #4
   201e6:	881b      	ldrh	r3, [r3, #0]
   201e8:	1ad3      	subs	r3, r2, r3
   201ea:	001a      	movs	r2, r3
   201ec:	68bb      	ldr	r3, [r7, #8]
   201ee:	18d3      	adds	r3, r2, r3
   201f0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   201f2:	68b8      	ldr	r0, [r7, #8]
   201f4:	2334      	movs	r3, #52	; 0x34
   201f6:	18fb      	adds	r3, r7, r3
   201f8:	881a      	ldrh	r2, [r3, #0]
   201fa:	231f      	movs	r3, #31
   201fc:	18fc      	adds	r4, r7, r3
   201fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20200:	0019      	movs	r1, r3
   20202:	4b3d      	ldr	r3, [pc, #244]	; (202f8 <hif_send+0x388>)
   20204:	4798      	blx	r3
   20206:	0003      	movs	r3, r0
   20208:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2020a:	231f      	movs	r3, #31
   2020c:	18fb      	adds	r3, r7, r3
   2020e:	781b      	ldrb	r3, [r3, #0]
   20210:	b25b      	sxtb	r3, r3
   20212:	2b00      	cmp	r3, #0
   20214:	d14c      	bne.n	202b0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20216:	2334      	movs	r3, #52	; 0x34
   20218:	18fb      	adds	r3, r7, r3
   2021a:	881a      	ldrh	r2, [r3, #0]
   2021c:	68bb      	ldr	r3, [r7, #8]
   2021e:	18d3      	adds	r3, r2, r3
   20220:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20222:	693b      	ldr	r3, [r7, #16]
   20224:	009b      	lsls	r3, r3, #2
   20226:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20228:	697b      	ldr	r3, [r7, #20]
   2022a:	2202      	movs	r2, #2
   2022c:	4313      	orrs	r3, r2
   2022e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20230:	697b      	ldr	r3, [r7, #20]
   20232:	221f      	movs	r2, #31
   20234:	18bc      	adds	r4, r7, r2
   20236:	4a31      	ldr	r2, [pc, #196]	; (202fc <hif_send+0x38c>)
   20238:	0019      	movs	r1, r3
   2023a:	0010      	movs	r0, r2
   2023c:	4b24      	ldr	r3, [pc, #144]	; (202d0 <hif_send+0x360>)
   2023e:	4798      	blx	r3
   20240:	0003      	movs	r3, r0
   20242:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20244:	231f      	movs	r3, #31
   20246:	18fb      	adds	r3, r7, r3
   20248:	781b      	ldrb	r3, [r3, #0]
   2024a:	b25b      	sxtb	r3, r3
   2024c:	2b00      	cmp	r3, #0
   2024e:	d01c      	beq.n	2028a <hif_send+0x31a>
   20250:	e02f      	b.n	202b2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20252:	231f      	movs	r3, #31
   20254:	18fc      	adds	r4, r7, r3
   20256:	4b2a      	ldr	r3, [pc, #168]	; (20300 <hif_send+0x390>)
   20258:	4798      	blx	r3
   2025a:	0003      	movs	r3, r0
   2025c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   2025e:	231f      	movs	r3, #31
   20260:	18fb      	adds	r3, r7, r3
   20262:	22fd      	movs	r2, #253	; 0xfd
   20264:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20266:	e026      	b.n	202b6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20268:	2398      	movs	r3, #152	; 0x98
   2026a:	33ff      	adds	r3, #255	; 0xff
   2026c:	001a      	movs	r2, r3
   2026e:	4925      	ldr	r1, [pc, #148]	; (20304 <hif_send+0x394>)
   20270:	4b25      	ldr	r3, [pc, #148]	; (20308 <hif_send+0x398>)
   20272:	0018      	movs	r0, r3
   20274:	4b1a      	ldr	r3, [pc, #104]	; (202e0 <hif_send+0x370>)
   20276:	4798      	blx	r3
   20278:	4b24      	ldr	r3, [pc, #144]	; (2030c <hif_send+0x39c>)
   2027a:	0018      	movs	r0, r3
   2027c:	4b18      	ldr	r3, [pc, #96]	; (202e0 <hif_send+0x370>)
   2027e:	4798      	blx	r3
   20280:	4b19      	ldr	r3, [pc, #100]	; (202e8 <hif_send+0x378>)
   20282:	0018      	movs	r0, r3
   20284:	4b16      	ldr	r3, [pc, #88]	; (202e0 <hif_send+0x370>)
   20286:	4798      	blx	r3
		goto ERR2;
   20288:	e015      	b.n	202b6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2028a:	231f      	movs	r3, #31
   2028c:	18fc      	adds	r4, r7, r3
   2028e:	4b1c      	ldr	r3, [pc, #112]	; (20300 <hif_send+0x390>)
   20290:	4798      	blx	r3
   20292:	0003      	movs	r3, r0
   20294:	7023      	strb	r3, [r4, #0]
	return ret;
   20296:	231f      	movs	r3, #31
   20298:	18fb      	adds	r3, r7, r3
   2029a:	781b      	ldrb	r3, [r3, #0]
   2029c:	b25b      	sxtb	r3, r3
   2029e:	e00e      	b.n	202be <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   202a0:	46c0      	nop			; (mov r8, r8)
   202a2:	e006      	b.n	202b2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   202a4:	46c0      	nop			; (mov r8, r8)
   202a6:	e004      	b.n	202b2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   202a8:	46c0      	nop			; (mov r8, r8)
   202aa:	e002      	b.n	202b2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   202ac:	46c0      	nop			; (mov r8, r8)
   202ae:	e000      	b.n	202b2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   202b0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   202b2:	4b17      	ldr	r3, [pc, #92]	; (20310 <hif_send+0x3a0>)
   202b4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   202b6:	231f      	movs	r3, #31
   202b8:	18fb      	adds	r3, r7, r3
   202ba:	781b      	ldrb	r3, [r3, #0]
   202bc:	b25b      	sxtb	r3, r3
}
   202be:	0018      	movs	r0, r3
   202c0:	46bd      	mov	sp, r7
   202c2:	b009      	add	sp, #36	; 0x24
   202c4:	bd90      	pop	{r4, r7, pc}
   202c6:	46c0      	nop			; (mov r8, r8)
   202c8:	0001fe39 	.word	0x0001fe39
   202cc:	0000108c 	.word	0x0000108c
   202d0:	00021dc5 	.word	0x00021dc5
   202d4:	00001078 	.word	0x00001078
   202d8:	00021da1 	.word	0x00021da1
   202dc:	00037e2c 	.word	0x00037e2c
   202e0:	0001cf79 	.word	0x0001cf79
   202e4:	00037e38 	.word	0x00037e38
   202e8:	00037e4c 	.word	0x00037e4c
   202ec:	0001f431 	.word	0x0001f431
   202f0:	00150400 	.word	0x00150400
   202f4:	000003e7 	.word	0x000003e7
   202f8:	00021f0d 	.word	0x00021f0d
   202fc:	0000106c 	.word	0x0000106c
   20300:	0001fed1 	.word	0x0001fed1
   20304:	00038154 	.word	0x00038154
   20308:	00037e50 	.word	0x00037e50
   2030c:	00037e64 	.word	0x00037e64
   20310:	0001fea9 	.word	0x0001fea9

00020314 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20314:	b590      	push	{r4, r7, lr}
   20316:	b087      	sub	sp, #28
   20318:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   2031a:	230f      	movs	r3, #15
   2031c:	18fb      	adds	r3, r7, r3
   2031e:	2200      	movs	r2, #0
   20320:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20322:	230f      	movs	r3, #15
   20324:	18fc      	adds	r4, r7, r3
   20326:	2308      	movs	r3, #8
   20328:	18fb      	adds	r3, r7, r3
   2032a:	4adc      	ldr	r2, [pc, #880]	; (2069c <hif_isr+0x388>)
   2032c:	0019      	movs	r1, r3
   2032e:	0010      	movs	r0, r2
   20330:	4bdb      	ldr	r3, [pc, #876]	; (206a0 <hif_isr+0x38c>)
   20332:	4798      	blx	r3
   20334:	0003      	movs	r3, r0
   20336:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20338:	230f      	movs	r3, #15
   2033a:	18fb      	adds	r3, r7, r3
   2033c:	781b      	ldrb	r3, [r3, #0]
   2033e:	b25b      	sxtb	r3, r3
   20340:	2b00      	cmp	r3, #0
   20342:	d000      	beq.n	20346 <hif_isr+0x32>
   20344:	e21e      	b.n	20784 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20346:	68bb      	ldr	r3, [r7, #8]
   20348:	2201      	movs	r2, #1
   2034a:	4013      	ands	r3, r2
   2034c:	d100      	bne.n	20350 <hif_isr+0x3c>
   2034e:	e204      	b.n	2075a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20350:	2000      	movs	r0, #0
   20352:	4bd4      	ldr	r3, [pc, #848]	; (206a4 <hif_isr+0x390>)
   20354:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20356:	68bb      	ldr	r3, [r7, #8]
   20358:	2201      	movs	r2, #1
   2035a:	4393      	bics	r3, r2
   2035c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   2035e:	68bb      	ldr	r3, [r7, #8]
   20360:	220f      	movs	r2, #15
   20362:	18bc      	adds	r4, r7, r2
   20364:	4acd      	ldr	r2, [pc, #820]	; (2069c <hif_isr+0x388>)
   20366:	0019      	movs	r1, r3
   20368:	0010      	movs	r0, r2
   2036a:	4bcf      	ldr	r3, [pc, #828]	; (206a8 <hif_isr+0x394>)
   2036c:	4798      	blx	r3
   2036e:	0003      	movs	r3, r0
   20370:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20372:	230f      	movs	r3, #15
   20374:	18fb      	adds	r3, r7, r3
   20376:	781b      	ldrb	r3, [r3, #0]
   20378:	b25b      	sxtb	r3, r3
   2037a:	2b00      	cmp	r3, #0
   2037c:	d000      	beq.n	20380 <hif_isr+0x6c>
   2037e:	e210      	b.n	207a2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20380:	4bca      	ldr	r3, [pc, #808]	; (206ac <hif_isr+0x398>)
   20382:	2201      	movs	r2, #1
   20384:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20386:	68bb      	ldr	r3, [r7, #8]
   20388:	089b      	lsrs	r3, r3, #2
   2038a:	b29a      	uxth	r2, r3
   2038c:	230c      	movs	r3, #12
   2038e:	18fb      	adds	r3, r7, r3
   20390:	0512      	lsls	r2, r2, #20
   20392:	0d12      	lsrs	r2, r2, #20
   20394:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20396:	230c      	movs	r3, #12
   20398:	18fb      	adds	r3, r7, r3
   2039a:	881b      	ldrh	r3, [r3, #0]
   2039c:	2b00      	cmp	r3, #0
   2039e:	d100      	bne.n	203a2 <hif_isr+0x8e>
   203a0:	e1c8      	b.n	20734 <hif_isr+0x420>
				uint32 address = 0;
   203a2:	2300      	movs	r3, #0
   203a4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   203a6:	230f      	movs	r3, #15
   203a8:	18fc      	adds	r4, r7, r3
   203aa:	003b      	movs	r3, r7
   203ac:	4ac0      	ldr	r2, [pc, #768]	; (206b0 <hif_isr+0x39c>)
   203ae:	0019      	movs	r1, r3
   203b0:	0010      	movs	r0, r2
   203b2:	4bbb      	ldr	r3, [pc, #748]	; (206a0 <hif_isr+0x38c>)
   203b4:	4798      	blx	r3
   203b6:	0003      	movs	r3, r0
   203b8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   203ba:	230f      	movs	r3, #15
   203bc:	18fb      	adds	r3, r7, r3
   203be:	781b      	ldrb	r3, [r3, #0]
   203c0:	b25b      	sxtb	r3, r3
   203c2:	2b00      	cmp	r3, #0
   203c4:	d012      	beq.n	203ec <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   203c6:	23e4      	movs	r3, #228	; 0xe4
   203c8:	005a      	lsls	r2, r3, #1
   203ca:	49ba      	ldr	r1, [pc, #744]	; (206b4 <hif_isr+0x3a0>)
   203cc:	4bba      	ldr	r3, [pc, #744]	; (206b8 <hif_isr+0x3a4>)
   203ce:	0018      	movs	r0, r3
   203d0:	4bba      	ldr	r3, [pc, #744]	; (206bc <hif_isr+0x3a8>)
   203d2:	4798      	blx	r3
   203d4:	4bba      	ldr	r3, [pc, #744]	; (206c0 <hif_isr+0x3ac>)
   203d6:	0018      	movs	r0, r3
   203d8:	4bb8      	ldr	r3, [pc, #736]	; (206bc <hif_isr+0x3a8>)
   203da:	4798      	blx	r3
   203dc:	4bb9      	ldr	r3, [pc, #740]	; (206c4 <hif_isr+0x3b0>)
   203de:	0018      	movs	r0, r3
   203e0:	4bb6      	ldr	r3, [pc, #728]	; (206bc <hif_isr+0x3a8>)
   203e2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   203e4:	2001      	movs	r0, #1
   203e6:	4baf      	ldr	r3, [pc, #700]	; (206a4 <hif_isr+0x390>)
   203e8:	4798      	blx	r3
					goto ERR1;
   203ea:	e1db      	b.n	207a4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   203ec:	683a      	ldr	r2, [r7, #0]
   203ee:	4baf      	ldr	r3, [pc, #700]	; (206ac <hif_isr+0x398>)
   203f0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   203f2:	230c      	movs	r3, #12
   203f4:	18fb      	adds	r3, r7, r3
   203f6:	881a      	ldrh	r2, [r3, #0]
   203f8:	4bac      	ldr	r3, [pc, #688]	; (206ac <hif_isr+0x398>)
   203fa:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   203fc:	683b      	ldr	r3, [r7, #0]
   203fe:	220f      	movs	r2, #15
   20400:	18bc      	adds	r4, r7, r2
   20402:	1d39      	adds	r1, r7, #4
   20404:	2204      	movs	r2, #4
   20406:	0018      	movs	r0, r3
   20408:	4baf      	ldr	r3, [pc, #700]	; (206c8 <hif_isr+0x3b4>)
   2040a:	4798      	blx	r3
   2040c:	0003      	movs	r3, r0
   2040e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20410:	1d3b      	adds	r3, r7, #4
   20412:	885b      	ldrh	r3, [r3, #2]
   20414:	b29a      	uxth	r2, r3
   20416:	1d3b      	adds	r3, r7, #4
   20418:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   2041a:	230f      	movs	r3, #15
   2041c:	18fb      	adds	r3, r7, r3
   2041e:	781b      	ldrb	r3, [r3, #0]
   20420:	b25b      	sxtb	r3, r3
   20422:	2b00      	cmp	r3, #0
   20424:	d012      	beq.n	2044c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20426:	23e9      	movs	r3, #233	; 0xe9
   20428:	005a      	lsls	r2, r3, #1
   2042a:	49a2      	ldr	r1, [pc, #648]	; (206b4 <hif_isr+0x3a0>)
   2042c:	4ba2      	ldr	r3, [pc, #648]	; (206b8 <hif_isr+0x3a4>)
   2042e:	0018      	movs	r0, r3
   20430:	4ba2      	ldr	r3, [pc, #648]	; (206bc <hif_isr+0x3a8>)
   20432:	4798      	blx	r3
   20434:	4ba5      	ldr	r3, [pc, #660]	; (206cc <hif_isr+0x3b8>)
   20436:	0018      	movs	r0, r3
   20438:	4ba0      	ldr	r3, [pc, #640]	; (206bc <hif_isr+0x3a8>)
   2043a:	4798      	blx	r3
   2043c:	4ba1      	ldr	r3, [pc, #644]	; (206c4 <hif_isr+0x3b0>)
   2043e:	0018      	movs	r0, r3
   20440:	4b9e      	ldr	r3, [pc, #632]	; (206bc <hif_isr+0x3a8>)
   20442:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20444:	2001      	movs	r0, #1
   20446:	4b97      	ldr	r3, [pc, #604]	; (206a4 <hif_isr+0x390>)
   20448:	4798      	blx	r3
					goto ERR1;
   2044a:	e1ab      	b.n	207a4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   2044c:	1d3b      	adds	r3, r7, #4
   2044e:	885b      	ldrh	r3, [r3, #2]
   20450:	b29b      	uxth	r3, r3
   20452:	220c      	movs	r2, #12
   20454:	18ba      	adds	r2, r7, r2
   20456:	8812      	ldrh	r2, [r2, #0]
   20458:	429a      	cmp	r2, r3
   2045a:	d02f      	beq.n	204bc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   2045c:	230c      	movs	r3, #12
   2045e:	18fb      	adds	r3, r7, r3
   20460:	881b      	ldrh	r3, [r3, #0]
   20462:	1d3a      	adds	r2, r7, #4
   20464:	8852      	ldrh	r2, [r2, #2]
   20466:	b292      	uxth	r2, r2
   20468:	1a9b      	subs	r3, r3, r2
   2046a:	2b04      	cmp	r3, #4
   2046c:	dd26      	ble.n	204bc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2046e:	23dc      	movs	r3, #220	; 0xdc
   20470:	33ff      	adds	r3, #255	; 0xff
   20472:	001a      	movs	r2, r3
   20474:	498f      	ldr	r1, [pc, #572]	; (206b4 <hif_isr+0x3a0>)
   20476:	4b90      	ldr	r3, [pc, #576]	; (206b8 <hif_isr+0x3a4>)
   20478:	0018      	movs	r0, r3
   2047a:	4b90      	ldr	r3, [pc, #576]	; (206bc <hif_isr+0x3a8>)
   2047c:	4798      	blx	r3
   2047e:	230c      	movs	r3, #12
   20480:	18fb      	adds	r3, r7, r3
   20482:	8819      	ldrh	r1, [r3, #0]
   20484:	1d3b      	adds	r3, r7, #4
   20486:	885b      	ldrh	r3, [r3, #2]
   20488:	b29b      	uxth	r3, r3
   2048a:	001a      	movs	r2, r3
   2048c:	1d3b      	adds	r3, r7, #4
   2048e:	781b      	ldrb	r3, [r3, #0]
   20490:	b2db      	uxtb	r3, r3
   20492:	001c      	movs	r4, r3
   20494:	1d3b      	adds	r3, r7, #4
   20496:	785b      	ldrb	r3, [r3, #1]
   20498:	b2db      	uxtb	r3, r3
   2049a:	488d      	ldr	r0, [pc, #564]	; (206d0 <hif_isr+0x3bc>)
   2049c:	9300      	str	r3, [sp, #0]
   2049e:	0023      	movs	r3, r4
   204a0:	4c86      	ldr	r4, [pc, #536]	; (206bc <hif_isr+0x3a8>)
   204a2:	47a0      	blx	r4
   204a4:	4b87      	ldr	r3, [pc, #540]	; (206c4 <hif_isr+0x3b0>)
   204a6:	0018      	movs	r0, r3
   204a8:	4b84      	ldr	r3, [pc, #528]	; (206bc <hif_isr+0x3a8>)
   204aa:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   204ac:	2001      	movs	r0, #1
   204ae:	4b7d      	ldr	r3, [pc, #500]	; (206a4 <hif_isr+0x390>)
   204b0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   204b2:	230f      	movs	r3, #15
   204b4:	18fb      	adds	r3, r7, r3
   204b6:	22fa      	movs	r2, #250	; 0xfa
   204b8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   204ba:	e173      	b.n	207a4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   204bc:	1d3b      	adds	r3, r7, #4
   204be:	781b      	ldrb	r3, [r3, #0]
   204c0:	b2db      	uxtb	r3, r3
   204c2:	2b01      	cmp	r3, #1
   204c4:	d122      	bne.n	2050c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   204c6:	4b79      	ldr	r3, [pc, #484]	; (206ac <hif_isr+0x398>)
   204c8:	691b      	ldr	r3, [r3, #16]
   204ca:	2b00      	cmp	r3, #0
   204cc:	d00d      	beq.n	204ea <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   204ce:	4b77      	ldr	r3, [pc, #476]	; (206ac <hif_isr+0x398>)
   204d0:	691b      	ldr	r3, [r3, #16]
   204d2:	1d3a      	adds	r2, r7, #4
   204d4:	7852      	ldrb	r2, [r2, #1]
   204d6:	b2d0      	uxtb	r0, r2
   204d8:	1d3a      	adds	r2, r7, #4
   204da:	8852      	ldrh	r2, [r2, #2]
   204dc:	b292      	uxth	r2, r2
   204de:	3a08      	subs	r2, #8
   204e0:	b291      	uxth	r1, r2
   204e2:	683a      	ldr	r2, [r7, #0]
   204e4:	3208      	adds	r2, #8
   204e6:	4798      	blx	r3
   204e8:	e102      	b.n	206f0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   204ea:	23e8      	movs	r3, #232	; 0xe8
   204ec:	33ff      	adds	r3, #255	; 0xff
   204ee:	001a      	movs	r2, r3
   204f0:	4970      	ldr	r1, [pc, #448]	; (206b4 <hif_isr+0x3a0>)
   204f2:	4b71      	ldr	r3, [pc, #452]	; (206b8 <hif_isr+0x3a4>)
   204f4:	0018      	movs	r0, r3
   204f6:	4b71      	ldr	r3, [pc, #452]	; (206bc <hif_isr+0x3a8>)
   204f8:	4798      	blx	r3
   204fa:	4b76      	ldr	r3, [pc, #472]	; (206d4 <hif_isr+0x3c0>)
   204fc:	0018      	movs	r0, r3
   204fe:	4b6f      	ldr	r3, [pc, #444]	; (206bc <hif_isr+0x3a8>)
   20500:	4798      	blx	r3
   20502:	4b70      	ldr	r3, [pc, #448]	; (206c4 <hif_isr+0x3b0>)
   20504:	0018      	movs	r0, r3
   20506:	4b6d      	ldr	r3, [pc, #436]	; (206bc <hif_isr+0x3a8>)
   20508:	4798      	blx	r3
   2050a:	e0f1      	b.n	206f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   2050c:	1d3b      	adds	r3, r7, #4
   2050e:	781b      	ldrb	r3, [r3, #0]
   20510:	b2db      	uxtb	r3, r3
   20512:	2b02      	cmp	r3, #2
   20514:	d122      	bne.n	2055c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20516:	4b65      	ldr	r3, [pc, #404]	; (206ac <hif_isr+0x398>)
   20518:	695b      	ldr	r3, [r3, #20]
   2051a:	2b00      	cmp	r3, #0
   2051c:	d00d      	beq.n	2053a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2051e:	4b63      	ldr	r3, [pc, #396]	; (206ac <hif_isr+0x398>)
   20520:	695b      	ldr	r3, [r3, #20]
   20522:	1d3a      	adds	r2, r7, #4
   20524:	7852      	ldrb	r2, [r2, #1]
   20526:	b2d0      	uxtb	r0, r2
   20528:	1d3a      	adds	r2, r7, #4
   2052a:	8852      	ldrh	r2, [r2, #2]
   2052c:	b292      	uxth	r2, r2
   2052e:	3a08      	subs	r2, #8
   20530:	b291      	uxth	r1, r2
   20532:	683a      	ldr	r2, [r7, #0]
   20534:	3208      	adds	r2, #8
   20536:	4798      	blx	r3
   20538:	e0da      	b.n	206f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   2053a:	23f0      	movs	r3, #240	; 0xf0
   2053c:	33ff      	adds	r3, #255	; 0xff
   2053e:	001a      	movs	r2, r3
   20540:	495c      	ldr	r1, [pc, #368]	; (206b4 <hif_isr+0x3a0>)
   20542:	4b5d      	ldr	r3, [pc, #372]	; (206b8 <hif_isr+0x3a4>)
   20544:	0018      	movs	r0, r3
   20546:	4b5d      	ldr	r3, [pc, #372]	; (206bc <hif_isr+0x3a8>)
   20548:	4798      	blx	r3
   2054a:	4b63      	ldr	r3, [pc, #396]	; (206d8 <hif_isr+0x3c4>)
   2054c:	0018      	movs	r0, r3
   2054e:	4b5b      	ldr	r3, [pc, #364]	; (206bc <hif_isr+0x3a8>)
   20550:	4798      	blx	r3
   20552:	4b5c      	ldr	r3, [pc, #368]	; (206c4 <hif_isr+0x3b0>)
   20554:	0018      	movs	r0, r3
   20556:	4b59      	ldr	r3, [pc, #356]	; (206bc <hif_isr+0x3a8>)
   20558:	4798      	blx	r3
   2055a:	e0c9      	b.n	206f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   2055c:	1d3b      	adds	r3, r7, #4
   2055e:	781b      	ldrb	r3, [r3, #0]
   20560:	b2db      	uxtb	r3, r3
   20562:	2b04      	cmp	r3, #4
   20564:	d122      	bne.n	205ac <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20566:	4b51      	ldr	r3, [pc, #324]	; (206ac <hif_isr+0x398>)
   20568:	699b      	ldr	r3, [r3, #24]
   2056a:	2b00      	cmp	r3, #0
   2056c:	d00d      	beq.n	2058a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2056e:	4b4f      	ldr	r3, [pc, #316]	; (206ac <hif_isr+0x398>)
   20570:	699b      	ldr	r3, [r3, #24]
   20572:	1d3a      	adds	r2, r7, #4
   20574:	7852      	ldrb	r2, [r2, #1]
   20576:	b2d0      	uxtb	r0, r2
   20578:	1d3a      	adds	r2, r7, #4
   2057a:	8852      	ldrh	r2, [r2, #2]
   2057c:	b292      	uxth	r2, r2
   2057e:	3a08      	subs	r2, #8
   20580:	b291      	uxth	r1, r2
   20582:	683a      	ldr	r2, [r7, #0]
   20584:	3208      	adds	r2, #8
   20586:	4798      	blx	r3
   20588:	e0b2      	b.n	206f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2058a:	23f8      	movs	r3, #248	; 0xf8
   2058c:	33ff      	adds	r3, #255	; 0xff
   2058e:	001a      	movs	r2, r3
   20590:	4948      	ldr	r1, [pc, #288]	; (206b4 <hif_isr+0x3a0>)
   20592:	4b49      	ldr	r3, [pc, #292]	; (206b8 <hif_isr+0x3a4>)
   20594:	0018      	movs	r0, r3
   20596:	4b49      	ldr	r3, [pc, #292]	; (206bc <hif_isr+0x3a8>)
   20598:	4798      	blx	r3
   2059a:	4b50      	ldr	r3, [pc, #320]	; (206dc <hif_isr+0x3c8>)
   2059c:	0018      	movs	r0, r3
   2059e:	4b47      	ldr	r3, [pc, #284]	; (206bc <hif_isr+0x3a8>)
   205a0:	4798      	blx	r3
   205a2:	4b48      	ldr	r3, [pc, #288]	; (206c4 <hif_isr+0x3b0>)
   205a4:	0018      	movs	r0, r3
   205a6:	4b45      	ldr	r3, [pc, #276]	; (206bc <hif_isr+0x3a8>)
   205a8:	4798      	blx	r3
   205aa:	e0a1      	b.n	206f0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   205ac:	1d3b      	adds	r3, r7, #4
   205ae:	781b      	ldrb	r3, [r3, #0]
   205b0:	b2db      	uxtb	r3, r3
   205b2:	2b06      	cmp	r3, #6
   205b4:	d121      	bne.n	205fa <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   205b6:	4b3d      	ldr	r3, [pc, #244]	; (206ac <hif_isr+0x398>)
   205b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   205ba:	2b00      	cmp	r3, #0
   205bc:	d00d      	beq.n	205da <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   205be:	4b3b      	ldr	r3, [pc, #236]	; (206ac <hif_isr+0x398>)
   205c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   205c2:	1d3a      	adds	r2, r7, #4
   205c4:	7852      	ldrb	r2, [r2, #1]
   205c6:	b2d0      	uxtb	r0, r2
   205c8:	1d3a      	adds	r2, r7, #4
   205ca:	8852      	ldrh	r2, [r2, #2]
   205cc:	b292      	uxth	r2, r2
   205ce:	3a08      	subs	r2, #8
   205d0:	b291      	uxth	r1, r2
   205d2:	683a      	ldr	r2, [r7, #0]
   205d4:	3208      	adds	r2, #8
   205d6:	4798      	blx	r3
   205d8:	e08a      	b.n	206f0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   205da:	2380      	movs	r3, #128	; 0x80
   205dc:	009a      	lsls	r2, r3, #2
   205de:	4935      	ldr	r1, [pc, #212]	; (206b4 <hif_isr+0x3a0>)
   205e0:	4b35      	ldr	r3, [pc, #212]	; (206b8 <hif_isr+0x3a4>)
   205e2:	0018      	movs	r0, r3
   205e4:	4b35      	ldr	r3, [pc, #212]	; (206bc <hif_isr+0x3a8>)
   205e6:	4798      	blx	r3
   205e8:	4b3d      	ldr	r3, [pc, #244]	; (206e0 <hif_isr+0x3cc>)
   205ea:	0018      	movs	r0, r3
   205ec:	4b33      	ldr	r3, [pc, #204]	; (206bc <hif_isr+0x3a8>)
   205ee:	4798      	blx	r3
   205f0:	4b34      	ldr	r3, [pc, #208]	; (206c4 <hif_isr+0x3b0>)
   205f2:	0018      	movs	r0, r3
   205f4:	4b31      	ldr	r3, [pc, #196]	; (206bc <hif_isr+0x3a8>)
   205f6:	4798      	blx	r3
   205f8:	e07a      	b.n	206f0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   205fa:	1d3b      	adds	r3, r7, #4
   205fc:	781b      	ldrb	r3, [r3, #0]
   205fe:	b2db      	uxtb	r3, r3
   20600:	2b07      	cmp	r3, #7
   20602:	d120      	bne.n	20646 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20604:	4b29      	ldr	r3, [pc, #164]	; (206ac <hif_isr+0x398>)
   20606:	69db      	ldr	r3, [r3, #28]
   20608:	2b00      	cmp	r3, #0
   2060a:	d00d      	beq.n	20628 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2060c:	4b27      	ldr	r3, [pc, #156]	; (206ac <hif_isr+0x398>)
   2060e:	69db      	ldr	r3, [r3, #28]
   20610:	1d3a      	adds	r2, r7, #4
   20612:	7852      	ldrb	r2, [r2, #1]
   20614:	b2d0      	uxtb	r0, r2
   20616:	1d3a      	adds	r2, r7, #4
   20618:	8852      	ldrh	r2, [r2, #2]
   2061a:	b292      	uxth	r2, r2
   2061c:	3a08      	subs	r2, #8
   2061e:	b291      	uxth	r1, r2
   20620:	683a      	ldr	r2, [r7, #0]
   20622:	3208      	adds	r2, #8
   20624:	4798      	blx	r3
   20626:	e063      	b.n	206f0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20628:	4a2e      	ldr	r2, [pc, #184]	; (206e4 <hif_isr+0x3d0>)
   2062a:	4922      	ldr	r1, [pc, #136]	; (206b4 <hif_isr+0x3a0>)
   2062c:	4b22      	ldr	r3, [pc, #136]	; (206b8 <hif_isr+0x3a4>)
   2062e:	0018      	movs	r0, r3
   20630:	4b22      	ldr	r3, [pc, #136]	; (206bc <hif_isr+0x3a8>)
   20632:	4798      	blx	r3
   20634:	4b2c      	ldr	r3, [pc, #176]	; (206e8 <hif_isr+0x3d4>)
   20636:	0018      	movs	r0, r3
   20638:	4b20      	ldr	r3, [pc, #128]	; (206bc <hif_isr+0x3a8>)
   2063a:	4798      	blx	r3
   2063c:	4b21      	ldr	r3, [pc, #132]	; (206c4 <hif_isr+0x3b0>)
   2063e:	0018      	movs	r0, r3
   20640:	4b1e      	ldr	r3, [pc, #120]	; (206bc <hif_isr+0x3a8>)
   20642:	4798      	blx	r3
   20644:	e054      	b.n	206f0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20646:	1d3b      	adds	r3, r7, #4
   20648:	781b      	ldrb	r3, [r3, #0]
   2064a:	b2db      	uxtb	r3, r3
   2064c:	2b05      	cmp	r3, #5
   2064e:	d111      	bne.n	20674 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   20650:	4b16      	ldr	r3, [pc, #88]	; (206ac <hif_isr+0x398>)
   20652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20654:	2b00      	cmp	r3, #0
   20656:	d04b      	beq.n	206f0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20658:	4b14      	ldr	r3, [pc, #80]	; (206ac <hif_isr+0x398>)
   2065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2065c:	1d3a      	adds	r2, r7, #4
   2065e:	7852      	ldrb	r2, [r2, #1]
   20660:	b2d0      	uxtb	r0, r2
   20662:	1d3a      	adds	r2, r7, #4
   20664:	8852      	ldrh	r2, [r2, #2]
   20666:	b292      	uxth	r2, r2
   20668:	3a08      	subs	r2, #8
   2066a:	b291      	uxth	r1, r2
   2066c:	683a      	ldr	r2, [r7, #0]
   2066e:	3208      	adds	r2, #8
   20670:	4798      	blx	r3
   20672:	e03d      	b.n	206f0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20674:	2384      	movs	r3, #132	; 0x84
   20676:	009a      	lsls	r2, r3, #2
   20678:	490e      	ldr	r1, [pc, #56]	; (206b4 <hif_isr+0x3a0>)
   2067a:	4b0f      	ldr	r3, [pc, #60]	; (206b8 <hif_isr+0x3a4>)
   2067c:	0018      	movs	r0, r3
   2067e:	4b0f      	ldr	r3, [pc, #60]	; (206bc <hif_isr+0x3a8>)
   20680:	4798      	blx	r3
   20682:	4b1a      	ldr	r3, [pc, #104]	; (206ec <hif_isr+0x3d8>)
   20684:	0018      	movs	r0, r3
   20686:	4b0d      	ldr	r3, [pc, #52]	; (206bc <hif_isr+0x3a8>)
   20688:	4798      	blx	r3
   2068a:	4b0e      	ldr	r3, [pc, #56]	; (206c4 <hif_isr+0x3b0>)
   2068c:	0018      	movs	r0, r3
   2068e:	4b0b      	ldr	r3, [pc, #44]	; (206bc <hif_isr+0x3a8>)
   20690:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20692:	230f      	movs	r3, #15
   20694:	18fb      	adds	r3, r7, r3
   20696:	22fa      	movs	r2, #250	; 0xfa
   20698:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2069a:	e083      	b.n	207a4 <hif_isr+0x490>
   2069c:	00001070 	.word	0x00001070
   206a0:	00021da1 	.word	0x00021da1
   206a4:	0001f4c5 	.word	0x0001f4c5
   206a8:	00021dc5 	.word	0x00021dc5
   206ac:	20005a98 	.word	0x20005a98
   206b0:	00001084 	.word	0x00001084
   206b4:	00038160 	.word	0x00038160
   206b8:	00037e50 	.word	0x00037e50
   206bc:	0001cf79 	.word	0x0001cf79
   206c0:	00037e84 	.word	0x00037e84
   206c4:	00037e4c 	.word	0x00037e4c
   206c8:	00021e15 	.word	0x00021e15
   206cc:	00037eac 	.word	0x00037eac
   206d0:	00037ec4 	.word	0x00037ec4
   206d4:	00037f04 	.word	0x00037f04
   206d8:	00037f28 	.word	0x00037f28
   206dc:	00037f4c 	.word	0x00037f4c
   206e0:	00037f6c 	.word	0x00037f6c
   206e4:	00000207 	.word	0x00000207
   206e8:	00037f90 	.word	0x00037f90
   206ec:	00037fb4 	.word	0x00037fb4
				}
				if(gstrHifCxt.u8HifRXDone)
   206f0:	4b30      	ldr	r3, [pc, #192]	; (207b4 <hif_isr+0x4a0>)
   206f2:	789b      	ldrb	r3, [r3, #2]
   206f4:	b2db      	uxtb	r3, r3
   206f6:	2b00      	cmp	r3, #0
   206f8:	d054      	beq.n	207a4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   206fa:	4a2f      	ldr	r2, [pc, #188]	; (207b8 <hif_isr+0x4a4>)
   206fc:	492f      	ldr	r1, [pc, #188]	; (207bc <hif_isr+0x4a8>)
   206fe:	4b30      	ldr	r3, [pc, #192]	; (207c0 <hif_isr+0x4ac>)
   20700:	0018      	movs	r0, r3
   20702:	4b30      	ldr	r3, [pc, #192]	; (207c4 <hif_isr+0x4b0>)
   20704:	4798      	blx	r3
   20706:	1d3b      	adds	r3, r7, #4
   20708:	781b      	ldrb	r3, [r3, #0]
   2070a:	b2db      	uxtb	r3, r3
   2070c:	0019      	movs	r1, r3
   2070e:	1d3b      	adds	r3, r7, #4
   20710:	785b      	ldrb	r3, [r3, #1]
   20712:	b2db      	uxtb	r3, r3
   20714:	001a      	movs	r2, r3
   20716:	4b2c      	ldr	r3, [pc, #176]	; (207c8 <hif_isr+0x4b4>)
   20718:	0018      	movs	r0, r3
   2071a:	4b2a      	ldr	r3, [pc, #168]	; (207c4 <hif_isr+0x4b0>)
   2071c:	4798      	blx	r3
   2071e:	4b2b      	ldr	r3, [pc, #172]	; (207cc <hif_isr+0x4b8>)
   20720:	0018      	movs	r0, r3
   20722:	4b28      	ldr	r3, [pc, #160]	; (207c4 <hif_isr+0x4b0>)
   20724:	4798      	blx	r3
					ret = hif_set_rx_done();
   20726:	230f      	movs	r3, #15
   20728:	18fc      	adds	r4, r7, r3
   2072a:	4b29      	ldr	r3, [pc, #164]	; (207d0 <hif_isr+0x4bc>)
   2072c:	4798      	blx	r3
   2072e:	0003      	movs	r3, r0
   20730:	7023      	strb	r3, [r4, #0]
   20732:	e037      	b.n	207a4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   20734:	4a27      	ldr	r2, [pc, #156]	; (207d4 <hif_isr+0x4c0>)
   20736:	4921      	ldr	r1, [pc, #132]	; (207bc <hif_isr+0x4a8>)
   20738:	4b21      	ldr	r3, [pc, #132]	; (207c0 <hif_isr+0x4ac>)
   2073a:	0018      	movs	r0, r3
   2073c:	4b21      	ldr	r3, [pc, #132]	; (207c4 <hif_isr+0x4b0>)
   2073e:	4798      	blx	r3
   20740:	4b25      	ldr	r3, [pc, #148]	; (207d8 <hif_isr+0x4c4>)
   20742:	0018      	movs	r0, r3
   20744:	4b1f      	ldr	r3, [pc, #124]	; (207c4 <hif_isr+0x4b0>)
   20746:	4798      	blx	r3
   20748:	4b20      	ldr	r3, [pc, #128]	; (207cc <hif_isr+0x4b8>)
   2074a:	0018      	movs	r0, r3
   2074c:	4b1d      	ldr	r3, [pc, #116]	; (207c4 <hif_isr+0x4b0>)
   2074e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   20750:	230f      	movs	r3, #15
   20752:	18fb      	adds	r3, r7, r3
   20754:	22fe      	movs	r2, #254	; 0xfe
   20756:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   20758:	e024      	b.n	207a4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2075a:	4a20      	ldr	r2, [pc, #128]	; (207dc <hif_isr+0x4c8>)
   2075c:	4917      	ldr	r1, [pc, #92]	; (207bc <hif_isr+0x4a8>)
   2075e:	4b18      	ldr	r3, [pc, #96]	; (207c0 <hif_isr+0x4ac>)
   20760:	0018      	movs	r0, r3
   20762:	4b18      	ldr	r3, [pc, #96]	; (207c4 <hif_isr+0x4b0>)
   20764:	4798      	blx	r3
   20766:	68ba      	ldr	r2, [r7, #8]
   20768:	4b1d      	ldr	r3, [pc, #116]	; (207e0 <hif_isr+0x4cc>)
   2076a:	0011      	movs	r1, r2
   2076c:	0018      	movs	r0, r3
   2076e:	4b15      	ldr	r3, [pc, #84]	; (207c4 <hif_isr+0x4b0>)
   20770:	4798      	blx	r3
   20772:	4b16      	ldr	r3, [pc, #88]	; (207cc <hif_isr+0x4b8>)
   20774:	0018      	movs	r0, r3
   20776:	4b13      	ldr	r3, [pc, #76]	; (207c4 <hif_isr+0x4b0>)
   20778:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2077a:	230f      	movs	r3, #15
   2077c:	18fb      	adds	r3, r7, r3
   2077e:	22f4      	movs	r2, #244	; 0xf4
   20780:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20782:	e00f      	b.n	207a4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   20784:	4a17      	ldr	r2, [pc, #92]	; (207e4 <hif_isr+0x4d0>)
   20786:	490d      	ldr	r1, [pc, #52]	; (207bc <hif_isr+0x4a8>)
   20788:	4b0d      	ldr	r3, [pc, #52]	; (207c0 <hif_isr+0x4ac>)
   2078a:	0018      	movs	r0, r3
   2078c:	4b0d      	ldr	r3, [pc, #52]	; (207c4 <hif_isr+0x4b0>)
   2078e:	4798      	blx	r3
   20790:	4b15      	ldr	r3, [pc, #84]	; (207e8 <hif_isr+0x4d4>)
   20792:	0018      	movs	r0, r3
   20794:	4b0b      	ldr	r3, [pc, #44]	; (207c4 <hif_isr+0x4b0>)
   20796:	4798      	blx	r3
   20798:	4b0c      	ldr	r3, [pc, #48]	; (207cc <hif_isr+0x4b8>)
   2079a:	0018      	movs	r0, r3
   2079c:	4b09      	ldr	r3, [pc, #36]	; (207c4 <hif_isr+0x4b0>)
   2079e:	4798      	blx	r3
		goto ERR1;
   207a0:	e000      	b.n	207a4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   207a2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   207a4:	230f      	movs	r3, #15
   207a6:	18fb      	adds	r3, r7, r3
   207a8:	781b      	ldrb	r3, [r3, #0]
   207aa:	b25b      	sxtb	r3, r3
}
   207ac:	0018      	movs	r0, r3
   207ae:	46bd      	mov	sp, r7
   207b0:	b005      	add	sp, #20
   207b2:	bd90      	pop	{r4, r7, pc}
   207b4:	20005a98 	.word	0x20005a98
   207b8:	00000216 	.word	0x00000216
   207bc:	00038160 	.word	0x00038160
   207c0:	00037e50 	.word	0x00037e50
   207c4:	0001cf79 	.word	0x0001cf79
   207c8:	00037fcc 	.word	0x00037fcc
   207cc:	00037e4c 	.word	0x00037e4c
   207d0:	0001fda9 	.word	0x0001fda9
   207d4:	0000021d 	.word	0x0000021d
   207d8:	00037ff8 	.word	0x00037ff8
   207dc:	00000225 	.word	0x00000225
   207e0:	0003800c 	.word	0x0003800c
   207e4:	0000022e 	.word	0x0000022e
   207e8:	00038028 	.word	0x00038028

000207ec <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   207ec:	b590      	push	{r4, r7, lr}
   207ee:	b083      	sub	sp, #12
   207f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   207f2:	1dfb      	adds	r3, r7, #7
   207f4:	2200      	movs	r2, #0
   207f6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   207f8:	4b1c      	ldr	r3, [pc, #112]	; (2086c <hif_handle_isr+0x80>)
   207fa:	2200      	movs	r2, #0
   207fc:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   207fe:	e024      	b.n	2084a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   20800:	4b1a      	ldr	r3, [pc, #104]	; (2086c <hif_handle_isr+0x80>)
   20802:	78db      	ldrb	r3, [r3, #3]
   20804:	b2db      	uxtb	r3, r3
   20806:	3b01      	subs	r3, #1
   20808:	b2da      	uxtb	r2, r3
   2080a:	4b18      	ldr	r3, [pc, #96]	; (2086c <hif_handle_isr+0x80>)
   2080c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2080e:	1dfc      	adds	r4, r7, #7
   20810:	4b17      	ldr	r3, [pc, #92]	; (20870 <hif_handle_isr+0x84>)
   20812:	4798      	blx	r3
   20814:	0003      	movs	r3, r0
   20816:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20818:	1dfb      	adds	r3, r7, #7
   2081a:	781b      	ldrb	r3, [r3, #0]
   2081c:	b25b      	sxtb	r3, r3
   2081e:	2b00      	cmp	r3, #0
   20820:	d100      	bne.n	20824 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   20822:	e012      	b.n	2084a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   20824:	4a13      	ldr	r2, [pc, #76]	; (20874 <hif_handle_isr+0x88>)
   20826:	4914      	ldr	r1, [pc, #80]	; (20878 <hif_handle_isr+0x8c>)
   20828:	4b14      	ldr	r3, [pc, #80]	; (2087c <hif_handle_isr+0x90>)
   2082a:	0018      	movs	r0, r3
   2082c:	4b14      	ldr	r3, [pc, #80]	; (20880 <hif_handle_isr+0x94>)
   2082e:	4798      	blx	r3
   20830:	1dfb      	adds	r3, r7, #7
   20832:	2200      	movs	r2, #0
   20834:	569a      	ldrsb	r2, [r3, r2]
   20836:	4b13      	ldr	r3, [pc, #76]	; (20884 <hif_handle_isr+0x98>)
   20838:	0011      	movs	r1, r2
   2083a:	0018      	movs	r0, r3
   2083c:	4b10      	ldr	r3, [pc, #64]	; (20880 <hif_handle_isr+0x94>)
   2083e:	4798      	blx	r3
   20840:	4b11      	ldr	r3, [pc, #68]	; (20888 <hif_handle_isr+0x9c>)
   20842:	0018      	movs	r0, r3
   20844:	4b0e      	ldr	r3, [pc, #56]	; (20880 <hif_handle_isr+0x94>)
   20846:	4798      	blx	r3
			ret = hif_isr();
   20848:	e7e1      	b.n	2080e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2084a:	4b08      	ldr	r3, [pc, #32]	; (2086c <hif_handle_isr+0x80>)
   2084c:	78db      	ldrb	r3, [r3, #3]
   2084e:	b2db      	uxtb	r3, r3
   20850:	2b00      	cmp	r3, #0
   20852:	d004      	beq.n	2085e <hif_handle_isr+0x72>
   20854:	4b05      	ldr	r3, [pc, #20]	; (2086c <hif_handle_isr+0x80>)
   20856:	791b      	ldrb	r3, [r3, #4]
   20858:	b2db      	uxtb	r3, r3
   2085a:	2b00      	cmp	r3, #0
   2085c:	d0d0      	beq.n	20800 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2085e:	1dfb      	adds	r3, r7, #7
   20860:	781b      	ldrb	r3, [r3, #0]
   20862:	b25b      	sxtb	r3, r3
}
   20864:	0018      	movs	r0, r3
   20866:	46bd      	mov	sp, r7
   20868:	b003      	add	sp, #12
   2086a:	bd90      	pop	{r4, r7, pc}
   2086c:	20005a98 	.word	0x20005a98
   20870:	00020315 	.word	0x00020315
   20874:	00000257 	.word	0x00000257
   20878:	00038168 	.word	0x00038168
   2087c:	00037e50 	.word	0x00037e50
   20880:	0001cf79 	.word	0x0001cf79
   20884:	0003804c 	.word	0x0003804c
   20888:	00037e4c 	.word	0x00037e4c

0002088c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2088c:	b590      	push	{r4, r7, lr}
   2088e:	b087      	sub	sp, #28
   20890:	af00      	add	r7, sp, #0
   20892:	60f8      	str	r0, [r7, #12]
   20894:	60b9      	str	r1, [r7, #8]
   20896:	0019      	movs	r1, r3
   20898:	1dbb      	adds	r3, r7, #6
   2089a:	801a      	strh	r2, [r3, #0]
   2089c:	1d7b      	adds	r3, r7, #5
   2089e:	1c0a      	adds	r2, r1, #0
   208a0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   208a2:	2317      	movs	r3, #23
   208a4:	18fb      	adds	r3, r7, r3
   208a6:	2200      	movs	r2, #0
   208a8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   208aa:	68fb      	ldr	r3, [r7, #12]
   208ac:	2b00      	cmp	r3, #0
   208ae:	d006      	beq.n	208be <hif_receive+0x32>
   208b0:	68bb      	ldr	r3, [r7, #8]
   208b2:	2b00      	cmp	r3, #0
   208b4:	d003      	beq.n	208be <hif_receive+0x32>
   208b6:	1dbb      	adds	r3, r7, #6
   208b8:	881b      	ldrh	r3, [r3, #0]
   208ba:	2b00      	cmp	r3, #0
   208bc:	d11e      	bne.n	208fc <hif_receive+0x70>
	{
		if(isDone)
   208be:	1d7b      	adds	r3, r7, #5
   208c0:	781b      	ldrb	r3, [r3, #0]
   208c2:	2b00      	cmp	r3, #0
   208c4:	d006      	beq.n	208d4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   208c6:	2317      	movs	r3, #23
   208c8:	18fc      	adds	r4, r7, r3
   208ca:	4b45      	ldr	r3, [pc, #276]	; (209e0 <hif_receive+0x154>)
   208cc:	4798      	blx	r3
   208ce:	0003      	movs	r3, r0
   208d0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   208d2:	e07c      	b.n	209ce <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   208d4:	2317      	movs	r3, #23
   208d6:	18fb      	adds	r3, r7, r3
   208d8:	22f4      	movs	r2, #244	; 0xf4
   208da:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   208dc:	239e      	movs	r3, #158	; 0x9e
   208de:	009a      	lsls	r2, r3, #2
   208e0:	4940      	ldr	r1, [pc, #256]	; (209e4 <hif_receive+0x158>)
   208e2:	4b41      	ldr	r3, [pc, #260]	; (209e8 <hif_receive+0x15c>)
   208e4:	0018      	movs	r0, r3
   208e6:	4b41      	ldr	r3, [pc, #260]	; (209ec <hif_receive+0x160>)
   208e8:	4798      	blx	r3
   208ea:	4b41      	ldr	r3, [pc, #260]	; (209f0 <hif_receive+0x164>)
   208ec:	0018      	movs	r0, r3
   208ee:	4b3f      	ldr	r3, [pc, #252]	; (209ec <hif_receive+0x160>)
   208f0:	4798      	blx	r3
   208f2:	4b40      	ldr	r3, [pc, #256]	; (209f4 <hif_receive+0x168>)
   208f4:	0018      	movs	r0, r3
   208f6:	4b3d      	ldr	r3, [pc, #244]	; (209ec <hif_receive+0x160>)
   208f8:	4798      	blx	r3
		goto ERR1;
   208fa:	e068      	b.n	209ce <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   208fc:	1dbb      	adds	r3, r7, #6
   208fe:	881a      	ldrh	r2, [r3, #0]
   20900:	4b3d      	ldr	r3, [pc, #244]	; (209f8 <hif_receive+0x16c>)
   20902:	68db      	ldr	r3, [r3, #12]
   20904:	429a      	cmp	r2, r3
   20906:	d917      	bls.n	20938 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   20908:	2317      	movs	r3, #23
   2090a:	18fb      	adds	r3, r7, r3
   2090c:	22f4      	movs	r2, #244	; 0xf4
   2090e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   20910:	23a0      	movs	r3, #160	; 0xa0
   20912:	009a      	lsls	r2, r3, #2
   20914:	4933      	ldr	r1, [pc, #204]	; (209e4 <hif_receive+0x158>)
   20916:	4b34      	ldr	r3, [pc, #208]	; (209e8 <hif_receive+0x15c>)
   20918:	0018      	movs	r0, r3
   2091a:	4b34      	ldr	r3, [pc, #208]	; (209ec <hif_receive+0x160>)
   2091c:	4798      	blx	r3
   2091e:	1dbb      	adds	r3, r7, #6
   20920:	8819      	ldrh	r1, [r3, #0]
   20922:	4b35      	ldr	r3, [pc, #212]	; (209f8 <hif_receive+0x16c>)
   20924:	68da      	ldr	r2, [r3, #12]
   20926:	4b35      	ldr	r3, [pc, #212]	; (209fc <hif_receive+0x170>)
   20928:	0018      	movs	r0, r3
   2092a:	4b30      	ldr	r3, [pc, #192]	; (209ec <hif_receive+0x160>)
   2092c:	4798      	blx	r3
   2092e:	4b31      	ldr	r3, [pc, #196]	; (209f4 <hif_receive+0x168>)
   20930:	0018      	movs	r0, r3
   20932:	4b2e      	ldr	r3, [pc, #184]	; (209ec <hif_receive+0x160>)
   20934:	4798      	blx	r3
		goto ERR1;
   20936:	e04a      	b.n	209ce <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   20938:	4b2f      	ldr	r3, [pc, #188]	; (209f8 <hif_receive+0x16c>)
   2093a:	689a      	ldr	r2, [r3, #8]
   2093c:	68fb      	ldr	r3, [r7, #12]
   2093e:	429a      	cmp	r2, r3
   20940:	d80a      	bhi.n	20958 <hif_receive+0xcc>
   20942:	1dbb      	adds	r3, r7, #6
   20944:	881a      	ldrh	r2, [r3, #0]
   20946:	68fb      	ldr	r3, [r7, #12]
   20948:	18d2      	adds	r2, r2, r3
   2094a:	4b2b      	ldr	r3, [pc, #172]	; (209f8 <hif_receive+0x16c>)
   2094c:	6899      	ldr	r1, [r3, #8]
   2094e:	4b2a      	ldr	r3, [pc, #168]	; (209f8 <hif_receive+0x16c>)
   20950:	68db      	ldr	r3, [r3, #12]
   20952:	18cb      	adds	r3, r1, r3
   20954:	429a      	cmp	r2, r3
   20956:	d912      	bls.n	2097e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   20958:	2317      	movs	r3, #23
   2095a:	18fb      	adds	r3, r7, r3
   2095c:	22f4      	movs	r2, #244	; 0xf4
   2095e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   20960:	4a27      	ldr	r2, [pc, #156]	; (20a00 <hif_receive+0x174>)
   20962:	4920      	ldr	r1, [pc, #128]	; (209e4 <hif_receive+0x158>)
   20964:	4b20      	ldr	r3, [pc, #128]	; (209e8 <hif_receive+0x15c>)
   20966:	0018      	movs	r0, r3
   20968:	4b20      	ldr	r3, [pc, #128]	; (209ec <hif_receive+0x160>)
   2096a:	4798      	blx	r3
   2096c:	4b25      	ldr	r3, [pc, #148]	; (20a04 <hif_receive+0x178>)
   2096e:	0018      	movs	r0, r3
   20970:	4b1e      	ldr	r3, [pc, #120]	; (209ec <hif_receive+0x160>)
   20972:	4798      	blx	r3
   20974:	4b1f      	ldr	r3, [pc, #124]	; (209f4 <hif_receive+0x168>)
   20976:	0018      	movs	r0, r3
   20978:	4b1c      	ldr	r3, [pc, #112]	; (209ec <hif_receive+0x160>)
   2097a:	4798      	blx	r3
		goto ERR1;
   2097c:	e027      	b.n	209ce <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2097e:	1dbb      	adds	r3, r7, #6
   20980:	881a      	ldrh	r2, [r3, #0]
   20982:	2317      	movs	r3, #23
   20984:	18fc      	adds	r4, r7, r3
   20986:	68b9      	ldr	r1, [r7, #8]
   20988:	68fb      	ldr	r3, [r7, #12]
   2098a:	0018      	movs	r0, r3
   2098c:	4b1e      	ldr	r3, [pc, #120]	; (20a08 <hif_receive+0x17c>)
   2098e:	4798      	blx	r3
   20990:	0003      	movs	r3, r0
   20992:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20994:	2317      	movs	r3, #23
   20996:	18fb      	adds	r3, r7, r3
   20998:	781b      	ldrb	r3, [r3, #0]
   2099a:	b25b      	sxtb	r3, r3
   2099c:	2b00      	cmp	r3, #0
   2099e:	d115      	bne.n	209cc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   209a0:	4b15      	ldr	r3, [pc, #84]	; (209f8 <hif_receive+0x16c>)
   209a2:	689a      	ldr	r2, [r3, #8]
   209a4:	4b14      	ldr	r3, [pc, #80]	; (209f8 <hif_receive+0x16c>)
   209a6:	68db      	ldr	r3, [r3, #12]
   209a8:	18d2      	adds	r2, r2, r3
   209aa:	1dbb      	adds	r3, r7, #6
   209ac:	8819      	ldrh	r1, [r3, #0]
   209ae:	68fb      	ldr	r3, [r7, #12]
   209b0:	18cb      	adds	r3, r1, r3
   209b2:	429a      	cmp	r2, r3
   209b4:	d003      	beq.n	209be <hif_receive+0x132>
   209b6:	1d7b      	adds	r3, r7, #5
   209b8:	781b      	ldrb	r3, [r3, #0]
   209ba:	2b00      	cmp	r3, #0
   209bc:	d007      	beq.n	209ce <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   209be:	2317      	movs	r3, #23
   209c0:	18fc      	adds	r4, r7, r3
   209c2:	4b07      	ldr	r3, [pc, #28]	; (209e0 <hif_receive+0x154>)
   209c4:	4798      	blx	r3
   209c6:	0003      	movs	r3, r0
   209c8:	7023      	strb	r3, [r4, #0]
   209ca:	e000      	b.n	209ce <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   209cc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   209ce:	2317      	movs	r3, #23
   209d0:	18fb      	adds	r3, r7, r3
   209d2:	781b      	ldrb	r3, [r3, #0]
   209d4:	b25b      	sxtb	r3, r3
}
   209d6:	0018      	movs	r0, r3
   209d8:	46bd      	mov	sp, r7
   209da:	b007      	add	sp, #28
   209dc:	bd90      	pop	{r4, r7, pc}
   209de:	46c0      	nop			; (mov r8, r8)
   209e0:	0001fda9 	.word	0x0001fda9
   209e4:	00038178 	.word	0x00038178
   209e8:	00037e50 	.word	0x00037e50
   209ec:	0001cf79 	.word	0x0001cf79
   209f0:	0003807c 	.word	0x0003807c
   209f4:	00037e4c 	.word	0x00037e4c
   209f8:	20005a98 	.word	0x20005a98
   209fc:	0003809c 	.word	0x0003809c
   20a00:	00000286 	.word	0x00000286
   20a04:	000380e4 	.word	0x000380e4
   20a08:	00021e15 	.word	0x00021e15

00020a0c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   20a0c:	b580      	push	{r7, lr}
   20a0e:	b084      	sub	sp, #16
   20a10:	af00      	add	r7, sp, #0
   20a12:	0002      	movs	r2, r0
   20a14:	6039      	str	r1, [r7, #0]
   20a16:	1dfb      	adds	r3, r7, #7
   20a18:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20a1a:	230f      	movs	r3, #15
   20a1c:	18fb      	adds	r3, r7, r3
   20a1e:	2200      	movs	r2, #0
   20a20:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   20a22:	1dfb      	adds	r3, r7, #7
   20a24:	781b      	ldrb	r3, [r3, #0]
   20a26:	2b07      	cmp	r3, #7
   20a28:	d820      	bhi.n	20a6c <hif_register_cb+0x60>
   20a2a:	009a      	lsls	r2, r3, #2
   20a2c:	4b1e      	ldr	r3, [pc, #120]	; (20aa8 <hif_register_cb+0x9c>)
   20a2e:	18d3      	adds	r3, r2, r3
   20a30:	681b      	ldr	r3, [r3, #0]
   20a32:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   20a34:	4b1d      	ldr	r3, [pc, #116]	; (20aac <hif_register_cb+0xa0>)
   20a36:	683a      	ldr	r2, [r7, #0]
   20a38:	615a      	str	r2, [r3, #20]
			break;
   20a3a:	e02d      	b.n	20a98 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   20a3c:	4b1b      	ldr	r3, [pc, #108]	; (20aac <hif_register_cb+0xa0>)
   20a3e:	683a      	ldr	r2, [r7, #0]
   20a40:	611a      	str	r2, [r3, #16]
			break;
   20a42:	e029      	b.n	20a98 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   20a44:	4b19      	ldr	r3, [pc, #100]	; (20aac <hif_register_cb+0xa0>)
   20a46:	683a      	ldr	r2, [r7, #0]
   20a48:	619a      	str	r2, [r3, #24]
			break;
   20a4a:	e025      	b.n	20a98 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   20a4c:	4b17      	ldr	r3, [pc, #92]	; (20aac <hif_register_cb+0xa0>)
   20a4e:	683a      	ldr	r2, [r7, #0]
   20a50:	621a      	str	r2, [r3, #32]
			break;
   20a52:	e021      	b.n	20a98 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   20a54:	4b15      	ldr	r3, [pc, #84]	; (20aac <hif_register_cb+0xa0>)
   20a56:	683a      	ldr	r2, [r7, #0]
   20a58:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   20a5a:	e01d      	b.n	20a98 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   20a5c:	4b13      	ldr	r3, [pc, #76]	; (20aac <hif_register_cb+0xa0>)
   20a5e:	683a      	ldr	r2, [r7, #0]
   20a60:	61da      	str	r2, [r3, #28]
			break;
   20a62:	e019      	b.n	20a98 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   20a64:	4b11      	ldr	r3, [pc, #68]	; (20aac <hif_register_cb+0xa0>)
   20a66:	683a      	ldr	r2, [r7, #0]
   20a68:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   20a6a:	e015      	b.n	20a98 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   20a6c:	4a10      	ldr	r2, [pc, #64]	; (20ab0 <hif_register_cb+0xa4>)
   20a6e:	4911      	ldr	r1, [pc, #68]	; (20ab4 <hif_register_cb+0xa8>)
   20a70:	4b11      	ldr	r3, [pc, #68]	; (20ab8 <hif_register_cb+0xac>)
   20a72:	0018      	movs	r0, r3
   20a74:	4b11      	ldr	r3, [pc, #68]	; (20abc <hif_register_cb+0xb0>)
   20a76:	4798      	blx	r3
   20a78:	1dfb      	adds	r3, r7, #7
   20a7a:	781a      	ldrb	r2, [r3, #0]
   20a7c:	4b10      	ldr	r3, [pc, #64]	; (20ac0 <hif_register_cb+0xb4>)
   20a7e:	0011      	movs	r1, r2
   20a80:	0018      	movs	r0, r3
   20a82:	4b0e      	ldr	r3, [pc, #56]	; (20abc <hif_register_cb+0xb0>)
   20a84:	4798      	blx	r3
   20a86:	4b0f      	ldr	r3, [pc, #60]	; (20ac4 <hif_register_cb+0xb8>)
   20a88:	0018      	movs	r0, r3
   20a8a:	4b0c      	ldr	r3, [pc, #48]	; (20abc <hif_register_cb+0xb0>)
   20a8c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20a8e:	230f      	movs	r3, #15
   20a90:	18fb      	adds	r3, r7, r3
   20a92:	22f4      	movs	r2, #244	; 0xf4
   20a94:	701a      	strb	r2, [r3, #0]
			break;
   20a96:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   20a98:	230f      	movs	r3, #15
   20a9a:	18fb      	adds	r3, r7, r3
   20a9c:	781b      	ldrb	r3, [r3, #0]
   20a9e:	b25b      	sxtb	r3, r3
}
   20aa0:	0018      	movs	r0, r3
   20aa2:	46bd      	mov	sp, r7
   20aa4:	b004      	add	sp, #16
   20aa6:	bd80      	pop	{r7, pc}
   20aa8:	00038134 	.word	0x00038134
   20aac:	20005a98 	.word	0x20005a98
   20ab0:	000002be 	.word	0x000002be
   20ab4:	00038184 	.word	0x00038184
   20ab8:	00037e50 	.word	0x00037e50
   20abc:	0001cf79 	.word	0x0001cf79
   20ac0:	00038128 	.word	0x00038128
   20ac4:	00037e4c 	.word	0x00037e4c

00020ac8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20ac8:	b590      	push	{r4, r7, lr}
   20aca:	b0af      	sub	sp, #188	; 0xbc
   20acc:	af02      	add	r7, sp, #8
   20ace:	603a      	str	r2, [r7, #0]
   20ad0:	1dfb      	adds	r3, r7, #7
   20ad2:	1c02      	adds	r2, r0, #0
   20ad4:	701a      	strb	r2, [r3, #0]
   20ad6:	1d3b      	adds	r3, r7, #4
   20ad8:	1c0a      	adds	r2, r1, #0
   20ada:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   20adc:	1dfb      	adds	r3, r7, #7
   20ade:	781b      	ldrb	r3, [r3, #0]
   20ae0:	2b2c      	cmp	r3, #44	; 0x2c
   20ae2:	d116      	bne.n	20b12 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   20ae4:	23a4      	movs	r3, #164	; 0xa4
   20ae6:	18f9      	adds	r1, r7, r3
   20ae8:	6838      	ldr	r0, [r7, #0]
   20aea:	2300      	movs	r3, #0
   20aec:	2204      	movs	r2, #4
   20aee:	4cca      	ldr	r4, [pc, #808]	; (20e18 <m2m_wifi_cb+0x350>)
   20af0:	47a0      	blx	r4
   20af2:	1e03      	subs	r3, r0, #0
   20af4:	d000      	beq.n	20af8 <m2m_wifi_cb+0x30>
   20af6:	e1b4      	b.n	20e62 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   20af8:	4bc8      	ldr	r3, [pc, #800]	; (20e1c <m2m_wifi_cb+0x354>)
   20afa:	681b      	ldr	r3, [r3, #0]
   20afc:	2b00      	cmp	r3, #0
   20afe:	d100      	bne.n	20b02 <m2m_wifi_cb+0x3a>
   20b00:	e1af      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20b02:	4bc6      	ldr	r3, [pc, #792]	; (20e1c <m2m_wifi_cb+0x354>)
   20b04:	681b      	ldr	r3, [r3, #0]
   20b06:	22a4      	movs	r2, #164	; 0xa4
   20b08:	18ba      	adds	r2, r7, r2
   20b0a:	0011      	movs	r1, r2
   20b0c:	202c      	movs	r0, #44	; 0x2c
   20b0e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20b10:	e1a7      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20b12:	1dfb      	adds	r3, r7, #7
   20b14:	781b      	ldrb	r3, [r3, #0]
   20b16:	2b1b      	cmp	r3, #27
   20b18:	d116      	bne.n	20b48 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   20b1a:	239c      	movs	r3, #156	; 0x9c
   20b1c:	18f9      	adds	r1, r7, r3
   20b1e:	6838      	ldr	r0, [r7, #0]
   20b20:	2300      	movs	r3, #0
   20b22:	2208      	movs	r2, #8
   20b24:	4cbc      	ldr	r4, [pc, #752]	; (20e18 <m2m_wifi_cb+0x350>)
   20b26:	47a0      	blx	r4
   20b28:	1e03      	subs	r3, r0, #0
   20b2a:	d000      	beq.n	20b2e <m2m_wifi_cb+0x66>
   20b2c:	e199      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20b2e:	4bbb      	ldr	r3, [pc, #748]	; (20e1c <m2m_wifi_cb+0x354>)
   20b30:	681b      	ldr	r3, [r3, #0]
   20b32:	2b00      	cmp	r3, #0
   20b34:	d100      	bne.n	20b38 <m2m_wifi_cb+0x70>
   20b36:	e194      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   20b38:	4bb8      	ldr	r3, [pc, #736]	; (20e1c <m2m_wifi_cb+0x354>)
   20b3a:	681b      	ldr	r3, [r3, #0]
   20b3c:	229c      	movs	r2, #156	; 0x9c
   20b3e:	18ba      	adds	r2, r7, r2
   20b40:	0011      	movs	r1, r2
   20b42:	201b      	movs	r0, #27
   20b44:	4798      	blx	r3
}
   20b46:	e18c      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   20b48:	1dfb      	adds	r3, r7, #7
   20b4a:	781b      	ldrb	r3, [r3, #0]
   20b4c:	2b06      	cmp	r3, #6
   20b4e:	d116      	bne.n	20b7e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   20b50:	230c      	movs	r3, #12
   20b52:	18f9      	adds	r1, r7, r3
   20b54:	6838      	ldr	r0, [r7, #0]
   20b56:	2301      	movs	r3, #1
   20b58:	2230      	movs	r2, #48	; 0x30
   20b5a:	4caf      	ldr	r4, [pc, #700]	; (20e18 <m2m_wifi_cb+0x350>)
   20b5c:	47a0      	blx	r4
   20b5e:	1e03      	subs	r3, r0, #0
   20b60:	d000      	beq.n	20b64 <m2m_wifi_cb+0x9c>
   20b62:	e17e      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20b64:	4bad      	ldr	r3, [pc, #692]	; (20e1c <m2m_wifi_cb+0x354>)
   20b66:	681b      	ldr	r3, [r3, #0]
   20b68:	2b00      	cmp	r3, #0
   20b6a:	d100      	bne.n	20b6e <m2m_wifi_cb+0xa6>
   20b6c:	e179      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   20b6e:	4bab      	ldr	r3, [pc, #684]	; (20e1c <m2m_wifi_cb+0x354>)
   20b70:	681b      	ldr	r3, [r3, #0]
   20b72:	220c      	movs	r2, #12
   20b74:	18ba      	adds	r2, r7, r2
   20b76:	0011      	movs	r1, r2
   20b78:	2006      	movs	r0, #6
   20b7a:	4798      	blx	r3
}
   20b7c:	e171      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   20b7e:	1dfb      	adds	r3, r7, #7
   20b80:	781b      	ldrb	r3, [r3, #0]
   20b82:	2b0e      	cmp	r3, #14
   20b84:	d100      	bne.n	20b88 <m2m_wifi_cb+0xc0>
   20b86:	e16c      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   20b88:	1dfb      	adds	r3, r7, #7
   20b8a:	781b      	ldrb	r3, [r3, #0]
   20b8c:	2b32      	cmp	r3, #50	; 0x32
   20b8e:	d116      	bne.n	20bbe <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   20b90:	2384      	movs	r3, #132	; 0x84
   20b92:	18f9      	adds	r1, r7, r3
   20b94:	6838      	ldr	r0, [r7, #0]
   20b96:	2300      	movs	r3, #0
   20b98:	2218      	movs	r2, #24
   20b9a:	4c9f      	ldr	r4, [pc, #636]	; (20e18 <m2m_wifi_cb+0x350>)
   20b9c:	47a0      	blx	r4
   20b9e:	1e03      	subs	r3, r0, #0
   20ba0:	d000      	beq.n	20ba4 <m2m_wifi_cb+0xdc>
   20ba2:	e15e      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20ba4:	4b9d      	ldr	r3, [pc, #628]	; (20e1c <m2m_wifi_cb+0x354>)
   20ba6:	681b      	ldr	r3, [r3, #0]
   20ba8:	2b00      	cmp	r3, #0
   20baa:	d100      	bne.n	20bae <m2m_wifi_cb+0xe6>
   20bac:	e159      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   20bae:	4b9b      	ldr	r3, [pc, #620]	; (20e1c <m2m_wifi_cb+0x354>)
   20bb0:	681b      	ldr	r3, [r3, #0]
   20bb2:	2284      	movs	r2, #132	; 0x84
   20bb4:	18ba      	adds	r2, r7, r2
   20bb6:	0011      	movs	r1, r2
   20bb8:	2032      	movs	r0, #50	; 0x32
   20bba:	4798      	blx	r3
}
   20bbc:	e151      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   20bbe:	1dfb      	adds	r3, r7, #7
   20bc0:	781b      	ldrb	r3, [r3, #0]
   20bc2:	2b2f      	cmp	r3, #47	; 0x2f
   20bc4:	d11d      	bne.n	20c02 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   20bc6:	230c      	movs	r3, #12
   20bc8:	18fb      	adds	r3, r7, r3
   20bca:	2264      	movs	r2, #100	; 0x64
   20bcc:	2100      	movs	r1, #0
   20bce:	0018      	movs	r0, r3
   20bd0:	4b93      	ldr	r3, [pc, #588]	; (20e20 <m2m_wifi_cb+0x358>)
   20bd2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   20bd4:	230c      	movs	r3, #12
   20bd6:	18f9      	adds	r1, r7, r3
   20bd8:	6838      	ldr	r0, [r7, #0]
   20bda:	2300      	movs	r3, #0
   20bdc:	2264      	movs	r2, #100	; 0x64
   20bde:	4c8e      	ldr	r4, [pc, #568]	; (20e18 <m2m_wifi_cb+0x350>)
   20be0:	47a0      	blx	r4
   20be2:	1e03      	subs	r3, r0, #0
   20be4:	d000      	beq.n	20be8 <m2m_wifi_cb+0x120>
   20be6:	e13c      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20be8:	4b8c      	ldr	r3, [pc, #560]	; (20e1c <m2m_wifi_cb+0x354>)
   20bea:	681b      	ldr	r3, [r3, #0]
   20bec:	2b00      	cmp	r3, #0
   20bee:	d100      	bne.n	20bf2 <m2m_wifi_cb+0x12a>
   20bf0:	e137      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20bf2:	4b8a      	ldr	r3, [pc, #552]	; (20e1c <m2m_wifi_cb+0x354>)
   20bf4:	681b      	ldr	r3, [r3, #0]
   20bf6:	220c      	movs	r2, #12
   20bf8:	18ba      	adds	r2, r7, r2
   20bfa:	0011      	movs	r1, r2
   20bfc:	202f      	movs	r0, #47	; 0x2f
   20bfe:	4798      	blx	r3
}
   20c00:	e12f      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20c02:	1dfb      	adds	r3, r7, #7
   20c04:	781b      	ldrb	r3, [r3, #0]
   20c06:	2b34      	cmp	r3, #52	; 0x34
   20c08:	d137      	bne.n	20c7a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   20c0a:	2380      	movs	r3, #128	; 0x80
   20c0c:	18f9      	adds	r1, r7, r3
   20c0e:	6838      	ldr	r0, [r7, #0]
   20c10:	2300      	movs	r3, #0
   20c12:	2204      	movs	r2, #4
   20c14:	4c80      	ldr	r4, [pc, #512]	; (20e18 <m2m_wifi_cb+0x350>)
   20c16:	47a0      	blx	r4
   20c18:	1e03      	subs	r3, r0, #0
   20c1a:	d000      	beq.n	20c1e <m2m_wifi_cb+0x156>
   20c1c:	e121      	b.n	20e62 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   20c1e:	4b81      	ldr	r3, [pc, #516]	; (20e24 <m2m_wifi_cb+0x35c>)
   20c20:	0018      	movs	r0, r3
   20c22:	4b81      	ldr	r3, [pc, #516]	; (20e28 <m2m_wifi_cb+0x360>)
   20c24:	4798      	blx	r3
   20c26:	2380      	movs	r3, #128	; 0x80
   20c28:	18fb      	adds	r3, r7, r3
   20c2a:	681b      	ldr	r3, [r3, #0]
   20c2c:	0e1b      	lsrs	r3, r3, #24
   20c2e:	b2db      	uxtb	r3, r3
   20c30:	0019      	movs	r1, r3
   20c32:	2380      	movs	r3, #128	; 0x80
   20c34:	18fb      	adds	r3, r7, r3
   20c36:	681b      	ldr	r3, [r3, #0]
   20c38:	0c1b      	lsrs	r3, r3, #16
   20c3a:	b2db      	uxtb	r3, r3
   20c3c:	001a      	movs	r2, r3
   20c3e:	2380      	movs	r3, #128	; 0x80
   20c40:	18fb      	adds	r3, r7, r3
   20c42:	681b      	ldr	r3, [r3, #0]
   20c44:	0a1b      	lsrs	r3, r3, #8
   20c46:	b2db      	uxtb	r3, r3
   20c48:	001c      	movs	r4, r3
   20c4a:	2380      	movs	r3, #128	; 0x80
   20c4c:	18fb      	adds	r3, r7, r3
   20c4e:	681b      	ldr	r3, [r3, #0]
   20c50:	b2db      	uxtb	r3, r3
   20c52:	4876      	ldr	r0, [pc, #472]	; (20e2c <m2m_wifi_cb+0x364>)
   20c54:	9300      	str	r3, [sp, #0]
   20c56:	0023      	movs	r3, r4
   20c58:	4c73      	ldr	r4, [pc, #460]	; (20e28 <m2m_wifi_cb+0x360>)
   20c5a:	47a0      	blx	r4
   20c5c:	4b74      	ldr	r3, [pc, #464]	; (20e30 <m2m_wifi_cb+0x368>)
   20c5e:	0018      	movs	r0, r3
   20c60:	4b71      	ldr	r3, [pc, #452]	; (20e28 <m2m_wifi_cb+0x360>)
   20c62:	4798      	blx	r3
			if (gpfAppWifiCb)
   20c64:	4b6d      	ldr	r3, [pc, #436]	; (20e1c <m2m_wifi_cb+0x354>)
   20c66:	681b      	ldr	r3, [r3, #0]
   20c68:	2b00      	cmp	r3, #0
   20c6a:	d100      	bne.n	20c6e <m2m_wifi_cb+0x1a6>
   20c6c:	e0f9      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   20c6e:	4b6b      	ldr	r3, [pc, #428]	; (20e1c <m2m_wifi_cb+0x354>)
   20c70:	681b      	ldr	r3, [r3, #0]
   20c72:	2100      	movs	r1, #0
   20c74:	2034      	movs	r0, #52	; 0x34
   20c76:	4798      	blx	r3
}
   20c78:	e0f3      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   20c7a:	1dfb      	adds	r3, r7, #7
   20c7c:	781b      	ldrb	r3, [r3, #0]
   20c7e:	2b11      	cmp	r3, #17
   20c80:	d11e      	bne.n	20cc0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   20c82:	4b6c      	ldr	r3, [pc, #432]	; (20e34 <m2m_wifi_cb+0x36c>)
   20c84:	2200      	movs	r2, #0
   20c86:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   20c88:	237c      	movs	r3, #124	; 0x7c
   20c8a:	18f9      	adds	r1, r7, r3
   20c8c:	6838      	ldr	r0, [r7, #0]
   20c8e:	2300      	movs	r3, #0
   20c90:	2204      	movs	r2, #4
   20c92:	4c61      	ldr	r4, [pc, #388]	; (20e18 <m2m_wifi_cb+0x350>)
   20c94:	47a0      	blx	r4
   20c96:	1e03      	subs	r3, r0, #0
   20c98:	d000      	beq.n	20c9c <m2m_wifi_cb+0x1d4>
   20c9a:	e0e2      	b.n	20e62 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   20c9c:	237c      	movs	r3, #124	; 0x7c
   20c9e:	18fb      	adds	r3, r7, r3
   20ca0:	781a      	ldrb	r2, [r3, #0]
   20ca2:	4b65      	ldr	r3, [pc, #404]	; (20e38 <m2m_wifi_cb+0x370>)
   20ca4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   20ca6:	4b5d      	ldr	r3, [pc, #372]	; (20e1c <m2m_wifi_cb+0x354>)
   20ca8:	681b      	ldr	r3, [r3, #0]
   20caa:	2b00      	cmp	r3, #0
   20cac:	d100      	bne.n	20cb0 <m2m_wifi_cb+0x1e8>
   20cae:	e0d8      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   20cb0:	4b5a      	ldr	r3, [pc, #360]	; (20e1c <m2m_wifi_cb+0x354>)
   20cb2:	681b      	ldr	r3, [r3, #0]
   20cb4:	227c      	movs	r2, #124	; 0x7c
   20cb6:	18ba      	adds	r2, r7, r2
   20cb8:	0011      	movs	r1, r2
   20cba:	2011      	movs	r0, #17
   20cbc:	4798      	blx	r3
}
   20cbe:	e0d0      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   20cc0:	1dfb      	adds	r3, r7, #7
   20cc2:	781b      	ldrb	r3, [r3, #0]
   20cc4:	2b13      	cmp	r3, #19
   20cc6:	d116      	bne.n	20cf6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   20cc8:	230c      	movs	r3, #12
   20cca:	18f9      	adds	r1, r7, r3
   20ccc:	6838      	ldr	r0, [r7, #0]
   20cce:	2300      	movs	r3, #0
   20cd0:	222c      	movs	r2, #44	; 0x2c
   20cd2:	4c51      	ldr	r4, [pc, #324]	; (20e18 <m2m_wifi_cb+0x350>)
   20cd4:	47a0      	blx	r4
   20cd6:	1e03      	subs	r3, r0, #0
   20cd8:	d000      	beq.n	20cdc <m2m_wifi_cb+0x214>
   20cda:	e0c2      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20cdc:	4b4f      	ldr	r3, [pc, #316]	; (20e1c <m2m_wifi_cb+0x354>)
   20cde:	681b      	ldr	r3, [r3, #0]
   20ce0:	2b00      	cmp	r3, #0
   20ce2:	d100      	bne.n	20ce6 <m2m_wifi_cb+0x21e>
   20ce4:	e0bd      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   20ce6:	4b4d      	ldr	r3, [pc, #308]	; (20e1c <m2m_wifi_cb+0x354>)
   20ce8:	681b      	ldr	r3, [r3, #0]
   20cea:	220c      	movs	r2, #12
   20cec:	18ba      	adds	r2, r7, r2
   20cee:	0011      	movs	r1, r2
   20cf0:	2013      	movs	r0, #19
   20cf2:	4798      	blx	r3
}
   20cf4:	e0b5      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   20cf6:	1dfb      	adds	r3, r7, #7
   20cf8:	781b      	ldrb	r3, [r3, #0]
   20cfa:	2b04      	cmp	r3, #4
   20cfc:	d116      	bne.n	20d2c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20cfe:	23a8      	movs	r3, #168	; 0xa8
   20d00:	18f9      	adds	r1, r7, r3
   20d02:	6838      	ldr	r0, [r7, #0]
   20d04:	2300      	movs	r3, #0
   20d06:	2204      	movs	r2, #4
   20d08:	4c43      	ldr	r4, [pc, #268]	; (20e18 <m2m_wifi_cb+0x350>)
   20d0a:	47a0      	blx	r4
   20d0c:	1e03      	subs	r3, r0, #0
   20d0e:	d000      	beq.n	20d12 <m2m_wifi_cb+0x24a>
   20d10:	e0a7      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20d12:	4b42      	ldr	r3, [pc, #264]	; (20e1c <m2m_wifi_cb+0x354>)
   20d14:	681b      	ldr	r3, [r3, #0]
   20d16:	2b00      	cmp	r3, #0
   20d18:	d100      	bne.n	20d1c <m2m_wifi_cb+0x254>
   20d1a:	e0a2      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   20d1c:	4b3f      	ldr	r3, [pc, #252]	; (20e1c <m2m_wifi_cb+0x354>)
   20d1e:	681b      	ldr	r3, [r3, #0]
   20d20:	22a8      	movs	r2, #168	; 0xa8
   20d22:	18ba      	adds	r2, r7, r2
   20d24:	0011      	movs	r1, r2
   20d26:	2004      	movs	r0, #4
   20d28:	4798      	blx	r3
}
   20d2a:	e09a      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   20d2c:	1dfb      	adds	r3, r7, #7
   20d2e:	781b      	ldrb	r3, [r3, #0]
   20d30:	2b65      	cmp	r3, #101	; 0x65
   20d32:	d116      	bne.n	20d62 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20d34:	23a8      	movs	r3, #168	; 0xa8
   20d36:	18f9      	adds	r1, r7, r3
   20d38:	6838      	ldr	r0, [r7, #0]
   20d3a:	2300      	movs	r3, #0
   20d3c:	2204      	movs	r2, #4
   20d3e:	4c36      	ldr	r4, [pc, #216]	; (20e18 <m2m_wifi_cb+0x350>)
   20d40:	47a0      	blx	r4
   20d42:	1e03      	subs	r3, r0, #0
   20d44:	d000      	beq.n	20d48 <m2m_wifi_cb+0x280>
   20d46:	e08c      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20d48:	4b34      	ldr	r3, [pc, #208]	; (20e1c <m2m_wifi_cb+0x354>)
   20d4a:	681b      	ldr	r3, [r3, #0]
   20d4c:	2b00      	cmp	r3, #0
   20d4e:	d100      	bne.n	20d52 <m2m_wifi_cb+0x28a>
   20d50:	e087      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   20d52:	4b32      	ldr	r3, [pc, #200]	; (20e1c <m2m_wifi_cb+0x354>)
   20d54:	681b      	ldr	r3, [r3, #0]
   20d56:	22a8      	movs	r2, #168	; 0xa8
   20d58:	18ba      	adds	r2, r7, r2
   20d5a:	0011      	movs	r1, r2
   20d5c:	2065      	movs	r0, #101	; 0x65
   20d5e:	4798      	blx	r3
}
   20d60:	e07f      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   20d62:	1dfb      	adds	r3, r7, #7
   20d64:	781b      	ldrb	r3, [r3, #0]
   20d66:	2b09      	cmp	r3, #9
   20d68:	d116      	bne.n	20d98 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   20d6a:	230c      	movs	r3, #12
   20d6c:	18f9      	adds	r1, r7, r3
   20d6e:	6838      	ldr	r0, [r7, #0]
   20d70:	2301      	movs	r3, #1
   20d72:	2264      	movs	r2, #100	; 0x64
   20d74:	4c28      	ldr	r4, [pc, #160]	; (20e18 <m2m_wifi_cb+0x350>)
   20d76:	47a0      	blx	r4
   20d78:	1e03      	subs	r3, r0, #0
   20d7a:	d000      	beq.n	20d7e <m2m_wifi_cb+0x2b6>
   20d7c:	e071      	b.n	20e62 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20d7e:	4b27      	ldr	r3, [pc, #156]	; (20e1c <m2m_wifi_cb+0x354>)
   20d80:	681b      	ldr	r3, [r3, #0]
   20d82:	2b00      	cmp	r3, #0
   20d84:	d100      	bne.n	20d88 <m2m_wifi_cb+0x2c0>
   20d86:	e06c      	b.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   20d88:	4b24      	ldr	r3, [pc, #144]	; (20e1c <m2m_wifi_cb+0x354>)
   20d8a:	681b      	ldr	r3, [r3, #0]
   20d8c:	220c      	movs	r2, #12
   20d8e:	18ba      	adds	r2, r7, r2
   20d90:	0011      	movs	r1, r2
   20d92:	2009      	movs	r0, #9
   20d94:	4798      	blx	r3
}
   20d96:	e064      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   20d98:	1dfb      	adds	r3, r7, #7
   20d9a:	781b      	ldrb	r3, [r3, #0]
   20d9c:	2b2a      	cmp	r3, #42	; 0x2a
   20d9e:	d114      	bne.n	20dca <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   20da0:	2378      	movs	r3, #120	; 0x78
   20da2:	18f9      	adds	r1, r7, r3
   20da4:	6838      	ldr	r0, [r7, #0]
   20da6:	2301      	movs	r3, #1
   20da8:	2204      	movs	r2, #4
   20daa:	4c1b      	ldr	r4, [pc, #108]	; (20e18 <m2m_wifi_cb+0x350>)
   20dac:	47a0      	blx	r4
   20dae:	1e03      	subs	r3, r0, #0
   20db0:	d157      	bne.n	20e62 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20db2:	4b1a      	ldr	r3, [pc, #104]	; (20e1c <m2m_wifi_cb+0x354>)
   20db4:	681b      	ldr	r3, [r3, #0]
   20db6:	2b00      	cmp	r3, #0
   20db8:	d053      	beq.n	20e62 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   20dba:	4b18      	ldr	r3, [pc, #96]	; (20e1c <m2m_wifi_cb+0x354>)
   20dbc:	681b      	ldr	r3, [r3, #0]
   20dbe:	2278      	movs	r2, #120	; 0x78
   20dc0:	18ba      	adds	r2, r7, r2
   20dc2:	0011      	movs	r1, r2
   20dc4:	202a      	movs	r0, #42	; 0x2a
   20dc6:	4798      	blx	r3
}
   20dc8:	e04b      	b.n	20e62 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   20dca:	1dfb      	adds	r3, r7, #7
   20dcc:	781b      	ldrb	r3, [r3, #0]
   20dce:	2b20      	cmp	r3, #32
   20dd0:	d134      	bne.n	20e3c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   20dd2:	2370      	movs	r3, #112	; 0x70
   20dd4:	18f9      	adds	r1, r7, r3
   20dd6:	6838      	ldr	r0, [r7, #0]
   20dd8:	2300      	movs	r3, #0
   20dda:	2208      	movs	r2, #8
   20ddc:	4c0e      	ldr	r4, [pc, #56]	; (20e18 <m2m_wifi_cb+0x350>)
   20dde:	47a0      	blx	r4
   20de0:	1e03      	subs	r3, r0, #0
   20de2:	d13e      	bne.n	20e62 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   20de4:	683b      	ldr	r3, [r7, #0]
   20de6:	3308      	adds	r3, #8
   20de8:	0018      	movs	r0, r3
   20dea:	2370      	movs	r3, #112	; 0x70
   20dec:	18fb      	adds	r3, r7, r3
   20dee:	6819      	ldr	r1, [r3, #0]
   20df0:	2370      	movs	r3, #112	; 0x70
   20df2:	18fb      	adds	r3, r7, r3
   20df4:	889a      	ldrh	r2, [r3, #4]
   20df6:	2301      	movs	r3, #1
   20df8:	4c07      	ldr	r4, [pc, #28]	; (20e18 <m2m_wifi_cb+0x350>)
   20dfa:	47a0      	blx	r4
   20dfc:	1e03      	subs	r3, r0, #0
   20dfe:	d130      	bne.n	20e62 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   20e00:	4b06      	ldr	r3, [pc, #24]	; (20e1c <m2m_wifi_cb+0x354>)
   20e02:	681b      	ldr	r3, [r3, #0]
   20e04:	2b00      	cmp	r3, #0
   20e06:	d02c      	beq.n	20e62 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   20e08:	4b04      	ldr	r3, [pc, #16]	; (20e1c <m2m_wifi_cb+0x354>)
   20e0a:	681b      	ldr	r3, [r3, #0]
   20e0c:	2270      	movs	r2, #112	; 0x70
   20e0e:	18ba      	adds	r2, r7, r2
   20e10:	0011      	movs	r1, r2
   20e12:	2020      	movs	r0, #32
   20e14:	4798      	blx	r3
}
   20e16:	e024      	b.n	20e62 <m2m_wifi_cb+0x39a>
   20e18:	0002088d 	.word	0x0002088d
   20e1c:	20004274 	.word	0x20004274
   20e20:	0001fd11 	.word	0x0001fd11
   20e24:	00038194 	.word	0x00038194
   20e28:	0001cf79 	.word	0x0001cf79
   20e2c:	000381a0 	.word	0x000381a0
   20e30:	000381c0 	.word	0x000381c0
   20e34:	20004271 	.word	0x20004271
   20e38:	20004270 	.word	0x20004270
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   20e3c:	2324      	movs	r3, #36	; 0x24
   20e3e:	33ff      	adds	r3, #255	; 0xff
   20e40:	001a      	movs	r2, r3
   20e42:	490a      	ldr	r1, [pc, #40]	; (20e6c <m2m_wifi_cb+0x3a4>)
   20e44:	4b0a      	ldr	r3, [pc, #40]	; (20e70 <m2m_wifi_cb+0x3a8>)
   20e46:	0018      	movs	r0, r3
   20e48:	4b0a      	ldr	r3, [pc, #40]	; (20e74 <m2m_wifi_cb+0x3ac>)
   20e4a:	4798      	blx	r3
   20e4c:	1dfb      	adds	r3, r7, #7
   20e4e:	781a      	ldrb	r2, [r3, #0]
   20e50:	4b09      	ldr	r3, [pc, #36]	; (20e78 <m2m_wifi_cb+0x3b0>)
   20e52:	0011      	movs	r1, r2
   20e54:	0018      	movs	r0, r3
   20e56:	4b07      	ldr	r3, [pc, #28]	; (20e74 <m2m_wifi_cb+0x3ac>)
   20e58:	4798      	blx	r3
   20e5a:	4b08      	ldr	r3, [pc, #32]	; (20e7c <m2m_wifi_cb+0x3b4>)
   20e5c:	0018      	movs	r0, r3
   20e5e:	4b05      	ldr	r3, [pc, #20]	; (20e74 <m2m_wifi_cb+0x3ac>)
   20e60:	4798      	blx	r3
}
   20e62:	46c0      	nop			; (mov r8, r8)
   20e64:	46bd      	mov	sp, r7
   20e66:	b02d      	add	sp, #180	; 0xb4
   20e68:	bd90      	pop	{r4, r7, pc}
   20e6a:	46c0      	nop			; (mov r8, r8)
   20e6c:	00038560 	.word	0x00038560
   20e70:	000381c4 	.word	0x000381c4
   20e74:	0001cf79 	.word	0x0001cf79
   20e78:	000381d8 	.word	0x000381d8
   20e7c:	000381c0 	.word	0x000381c0

00020e80 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   20e80:	b590      	push	{r4, r7, lr}
   20e82:	b091      	sub	sp, #68	; 0x44
   20e84:	af02      	add	r7, sp, #8
   20e86:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   20e88:	2337      	movs	r3, #55	; 0x37
   20e8a:	18fb      	adds	r3, r7, r3
   20e8c:	2200      	movs	r2, #0
   20e8e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   20e90:	230b      	movs	r3, #11
   20e92:	18fb      	adds	r3, r7, r3
   20e94:	2201      	movs	r2, #1
   20e96:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   20e98:	687b      	ldr	r3, [r7, #4]
   20e9a:	2b00      	cmp	r3, #0
   20e9c:	d104      	bne.n	20ea8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   20e9e:	2337      	movs	r3, #55	; 0x37
   20ea0:	18fb      	adds	r3, r7, r3
   20ea2:	22f4      	movs	r2, #244	; 0xf4
   20ea4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   20ea6:	e0b3      	b.n	21010 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   20ea8:	687b      	ldr	r3, [r7, #4]
   20eaa:	681a      	ldr	r2, [r3, #0]
   20eac:	4b5c      	ldr	r3, [pc, #368]	; (21020 <m2m_wifi_init+0x1a0>)
   20eae:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   20eb0:	4b5c      	ldr	r3, [pc, #368]	; (21024 <m2m_wifi_init+0x1a4>)
   20eb2:	2200      	movs	r2, #0
   20eb4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   20eb6:	2337      	movs	r3, #55	; 0x37
   20eb8:	18fc      	adds	r4, r7, r3
   20eba:	230b      	movs	r3, #11
   20ebc:	18fb      	adds	r3, r7, r3
   20ebe:	0018      	movs	r0, r3
   20ec0:	4b59      	ldr	r3, [pc, #356]	; (21028 <m2m_wifi_init+0x1a8>)
   20ec2:	4798      	blx	r3
   20ec4:	0003      	movs	r3, r0
   20ec6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   20ec8:	2337      	movs	r3, #55	; 0x37
   20eca:	18fb      	adds	r3, r7, r3
   20ecc:	781b      	ldrb	r3, [r3, #0]
   20ece:	b25b      	sxtb	r3, r3
   20ed0:	2b00      	cmp	r3, #0
   20ed2:	d000      	beq.n	20ed6 <m2m_wifi_init+0x56>
   20ed4:	e099      	b.n	2100a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   20ed6:	2337      	movs	r3, #55	; 0x37
   20ed8:	18fc      	adds	r4, r7, r3
   20eda:	2000      	movs	r0, #0
   20edc:	4b53      	ldr	r3, [pc, #332]	; (2102c <m2m_wifi_init+0x1ac>)
   20ede:	4798      	blx	r3
   20ee0:	0003      	movs	r3, r0
   20ee2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20ee4:	2337      	movs	r3, #55	; 0x37
   20ee6:	18fb      	adds	r3, r7, r3
   20ee8:	781b      	ldrb	r3, [r3, #0]
   20eea:	b25b      	sxtb	r3, r3
   20eec:	2b00      	cmp	r3, #0
   20eee:	d000      	beq.n	20ef2 <m2m_wifi_init+0x72>
   20ef0:	e086      	b.n	21000 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   20ef2:	4b4f      	ldr	r3, [pc, #316]	; (21030 <m2m_wifi_init+0x1b0>)
   20ef4:	0019      	movs	r1, r3
   20ef6:	2001      	movs	r0, #1
   20ef8:	4b4e      	ldr	r3, [pc, #312]	; (21034 <m2m_wifi_init+0x1b4>)
   20efa:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   20efc:	2337      	movs	r3, #55	; 0x37
   20efe:	18fc      	adds	r4, r7, r3
   20f00:	230c      	movs	r3, #12
   20f02:	18fb      	adds	r3, r7, r3
   20f04:	0018      	movs	r0, r3
   20f06:	4b4c      	ldr	r3, [pc, #304]	; (21038 <m2m_wifi_init+0x1b8>)
   20f08:	4798      	blx	r3
   20f0a:	0003      	movs	r3, r0
   20f0c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   20f0e:	4b4b      	ldr	r3, [pc, #300]	; (2103c <m2m_wifi_init+0x1bc>)
   20f10:	0018      	movs	r0, r3
   20f12:	4b4b      	ldr	r3, [pc, #300]	; (21040 <m2m_wifi_init+0x1c0>)
   20f14:	4798      	blx	r3
   20f16:	230c      	movs	r3, #12
   20f18:	18fb      	adds	r3, r7, r3
   20f1a:	791b      	ldrb	r3, [r3, #4]
   20f1c:	0019      	movs	r1, r3
   20f1e:	230c      	movs	r3, #12
   20f20:	18fb      	adds	r3, r7, r3
   20f22:	795b      	ldrb	r3, [r3, #5]
   20f24:	001a      	movs	r2, r3
   20f26:	230c      	movs	r3, #12
   20f28:	18fb      	adds	r3, r7, r3
   20f2a:	799b      	ldrb	r3, [r3, #6]
   20f2c:	001c      	movs	r4, r3
   20f2e:	230c      	movs	r3, #12
   20f30:	18fb      	adds	r3, r7, r3
   20f32:	8c1b      	ldrh	r3, [r3, #32]
   20f34:	4843      	ldr	r0, [pc, #268]	; (21044 <m2m_wifi_init+0x1c4>)
   20f36:	9300      	str	r3, [sp, #0]
   20f38:	0023      	movs	r3, r4
   20f3a:	4c41      	ldr	r4, [pc, #260]	; (21040 <m2m_wifi_init+0x1c0>)
   20f3c:	47a0      	blx	r4
   20f3e:	4b42      	ldr	r3, [pc, #264]	; (21048 <m2m_wifi_init+0x1c8>)
   20f40:	0018      	movs	r0, r3
   20f42:	4b3f      	ldr	r3, [pc, #252]	; (21040 <m2m_wifi_init+0x1c0>)
   20f44:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   20f46:	4b3d      	ldr	r3, [pc, #244]	; (2103c <m2m_wifi_init+0x1bc>)
   20f48:	0018      	movs	r0, r3
   20f4a:	4b3d      	ldr	r3, [pc, #244]	; (21040 <m2m_wifi_init+0x1c0>)
   20f4c:	4798      	blx	r3
   20f4e:	230c      	movs	r3, #12
   20f50:	18fb      	adds	r3, r7, r3
   20f52:	3316      	adds	r3, #22
   20f54:	001a      	movs	r2, r3
   20f56:	230c      	movs	r3, #12
   20f58:	18fb      	adds	r3, r7, r3
   20f5a:	330a      	adds	r3, #10
   20f5c:	0019      	movs	r1, r3
   20f5e:	4b3b      	ldr	r3, [pc, #236]	; (2104c <m2m_wifi_init+0x1cc>)
   20f60:	0018      	movs	r0, r3
   20f62:	4b37      	ldr	r3, [pc, #220]	; (21040 <m2m_wifi_init+0x1c0>)
   20f64:	4798      	blx	r3
   20f66:	4b38      	ldr	r3, [pc, #224]	; (21048 <m2m_wifi_init+0x1c8>)
   20f68:	0018      	movs	r0, r3
   20f6a:	4b35      	ldr	r3, [pc, #212]	; (21040 <m2m_wifi_init+0x1c0>)
   20f6c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   20f6e:	4b33      	ldr	r3, [pc, #204]	; (2103c <m2m_wifi_init+0x1bc>)
   20f70:	0018      	movs	r0, r3
   20f72:	4b33      	ldr	r3, [pc, #204]	; (21040 <m2m_wifi_init+0x1c0>)
   20f74:	4798      	blx	r3
   20f76:	230c      	movs	r3, #12
   20f78:	18fb      	adds	r3, r7, r3
   20f7a:	79db      	ldrb	r3, [r3, #7]
   20f7c:	0019      	movs	r1, r3
   20f7e:	230c      	movs	r3, #12
   20f80:	18fb      	adds	r3, r7, r3
   20f82:	7a1b      	ldrb	r3, [r3, #8]
   20f84:	001a      	movs	r2, r3
   20f86:	230c      	movs	r3, #12
   20f88:	18fb      	adds	r3, r7, r3
   20f8a:	7a5b      	ldrb	r3, [r3, #9]
   20f8c:	4830      	ldr	r0, [pc, #192]	; (21050 <m2m_wifi_init+0x1d0>)
   20f8e:	4c2c      	ldr	r4, [pc, #176]	; (21040 <m2m_wifi_init+0x1c0>)
   20f90:	47a0      	blx	r4
   20f92:	4b2d      	ldr	r3, [pc, #180]	; (21048 <m2m_wifi_init+0x1c8>)
   20f94:	0018      	movs	r0, r3
   20f96:	4b2a      	ldr	r3, [pc, #168]	; (21040 <m2m_wifi_init+0x1c0>)
   20f98:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   20f9a:	4b28      	ldr	r3, [pc, #160]	; (2103c <m2m_wifi_init+0x1bc>)
   20f9c:	0018      	movs	r0, r3
   20f9e:	4b28      	ldr	r3, [pc, #160]	; (21040 <m2m_wifi_init+0x1c0>)
   20fa0:	4798      	blx	r3
   20fa2:	482c      	ldr	r0, [pc, #176]	; (21054 <m2m_wifi_init+0x1d4>)
   20fa4:	2304      	movs	r3, #4
   20fa6:	2205      	movs	r2, #5
   20fa8:	2113      	movs	r1, #19
   20faa:	4c25      	ldr	r4, [pc, #148]	; (21040 <m2m_wifi_init+0x1c0>)
   20fac:	47a0      	blx	r4
   20fae:	4b26      	ldr	r3, [pc, #152]	; (21048 <m2m_wifi_init+0x1c8>)
   20fb0:	0018      	movs	r0, r3
   20fb2:	4b23      	ldr	r3, [pc, #140]	; (21040 <m2m_wifi_init+0x1c0>)
   20fb4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   20fb6:	4b21      	ldr	r3, [pc, #132]	; (2103c <m2m_wifi_init+0x1bc>)
   20fb8:	0018      	movs	r0, r3
   20fba:	4b21      	ldr	r3, [pc, #132]	; (21040 <m2m_wifi_init+0x1c0>)
   20fbc:	4798      	blx	r3
   20fbe:	4a26      	ldr	r2, [pc, #152]	; (21058 <m2m_wifi_init+0x1d8>)
   20fc0:	4926      	ldr	r1, [pc, #152]	; (2105c <m2m_wifi_init+0x1dc>)
   20fc2:	4b27      	ldr	r3, [pc, #156]	; (21060 <m2m_wifi_init+0x1e0>)
   20fc4:	0018      	movs	r0, r3
   20fc6:	4b1e      	ldr	r3, [pc, #120]	; (21040 <m2m_wifi_init+0x1c0>)
   20fc8:	4798      	blx	r3
   20fca:	4b1f      	ldr	r3, [pc, #124]	; (21048 <m2m_wifi_init+0x1c8>)
   20fcc:	0018      	movs	r0, r3
   20fce:	4b1c      	ldr	r3, [pc, #112]	; (21040 <m2m_wifi_init+0x1c0>)
   20fd0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   20fd2:	2337      	movs	r3, #55	; 0x37
   20fd4:	18fb      	adds	r3, r7, r3
   20fd6:	781b      	ldrb	r3, [r3, #0]
   20fd8:	b25b      	sxtb	r3, r3
   20fda:	330d      	adds	r3, #13
   20fdc:	d117      	bne.n	2100e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   20fde:	23e8      	movs	r3, #232	; 0xe8
   20fe0:	33ff      	adds	r3, #255	; 0xff
   20fe2:	001a      	movs	r2, r3
   20fe4:	491f      	ldr	r1, [pc, #124]	; (21064 <m2m_wifi_init+0x1e4>)
   20fe6:	4b20      	ldr	r3, [pc, #128]	; (21068 <m2m_wifi_init+0x1e8>)
   20fe8:	0018      	movs	r0, r3
   20fea:	4b15      	ldr	r3, [pc, #84]	; (21040 <m2m_wifi_init+0x1c0>)
   20fec:	4798      	blx	r3
   20fee:	4b1f      	ldr	r3, [pc, #124]	; (2106c <m2m_wifi_init+0x1ec>)
   20ff0:	0018      	movs	r0, r3
   20ff2:	4b13      	ldr	r3, [pc, #76]	; (21040 <m2m_wifi_init+0x1c0>)
   20ff4:	4798      	blx	r3
   20ff6:	4b14      	ldr	r3, [pc, #80]	; (21048 <m2m_wifi_init+0x1c8>)
   20ff8:	0018      	movs	r0, r3
   20ffa:	4b11      	ldr	r3, [pc, #68]	; (21040 <m2m_wifi_init+0x1c0>)
   20ffc:	4798      	blx	r3
	}

	goto _EXIT0;
   20ffe:	e006      	b.n	2100e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21000:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21002:	2000      	movs	r0, #0
   21004:	4b1a      	ldr	r3, [pc, #104]	; (21070 <m2m_wifi_init+0x1f0>)
   21006:	4798      	blx	r3
   21008:	e002      	b.n	21010 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2100a:	46c0      	nop			; (mov r8, r8)
   2100c:	e000      	b.n	21010 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2100e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21010:	2337      	movs	r3, #55	; 0x37
   21012:	18fb      	adds	r3, r7, r3
   21014:	781b      	ldrb	r3, [r3, #0]
   21016:	b25b      	sxtb	r3, r3
}
   21018:	0018      	movs	r0, r3
   2101a:	46bd      	mov	sp, r7
   2101c:	b00f      	add	sp, #60	; 0x3c
   2101e:	bd90      	pop	{r4, r7, pc}
   21020:	20004274 	.word	0x20004274
   21024:	20004271 	.word	0x20004271
   21028:	000221a5 	.word	0x000221a5
   2102c:	0001ff29 	.word	0x0001ff29
   21030:	00020ac9 	.word	0x00020ac9
   21034:	00020a0d 	.word	0x00020a0d
   21038:	00021fd9 	.word	0x00021fd9
   2103c:	00038194 	.word	0x00038194
   21040:	0001cf79 	.word	0x0001cf79
   21044:	00038338 	.word	0x00038338
   21048:	000381c0 	.word	0x000381c0
   2104c:	00038360 	.word	0x00038360
   21050:	0003837c 	.word	0x0003837c
   21054:	000383a0 	.word	0x000383a0
   21058:	000383b8 	.word	0x000383b8
   2105c:	000383c4 	.word	0x000383c4
   21060:	000383d0 	.word	0x000383d0
   21064:	0003856c 	.word	0x0003856c
   21068:	000381c4 	.word	0x000381c4
   2106c:	000383e8 	.word	0x000383e8
   21070:	00022335 	.word	0x00022335

00021074 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21074:	b580      	push	{r7, lr}
   21076:	b082      	sub	sp, #8
   21078:	af00      	add	r7, sp, #0
   2107a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   2107c:	4b03      	ldr	r3, [pc, #12]	; (2108c <m2m_wifi_handle_events+0x18>)
   2107e:	4798      	blx	r3
   21080:	0003      	movs	r3, r0
}
   21082:	0018      	movs	r0, r3
   21084:	46bd      	mov	sp, r7
   21086:	b002      	add	sp, #8
   21088:	bd80      	pop	{r7, pc}
   2108a:	46c0      	nop			; (mov r8, r8)
   2108c:	000207ed 	.word	0x000207ed

00021090 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21090:	b590      	push	{r4, r7, lr}
   21092:	b087      	sub	sp, #28
   21094:	af02      	add	r7, sp, #8
   21096:	60f8      	str	r0, [r7, #12]
   21098:	0008      	movs	r0, r1
   2109a:	0011      	movs	r1, r2
   2109c:	607b      	str	r3, [r7, #4]
   2109e:	230b      	movs	r3, #11
   210a0:	18fb      	adds	r3, r7, r3
   210a2:	1c02      	adds	r2, r0, #0
   210a4:	701a      	strb	r2, [r3, #0]
   210a6:	230a      	movs	r3, #10
   210a8:	18fb      	adds	r3, r7, r3
   210aa:	1c0a      	adds	r2, r1, #0
   210ac:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   210ae:	687c      	ldr	r4, [r7, #4]
   210b0:	230a      	movs	r3, #10
   210b2:	18fb      	adds	r3, r7, r3
   210b4:	781a      	ldrb	r2, [r3, #0]
   210b6:	230b      	movs	r3, #11
   210b8:	18fb      	adds	r3, r7, r3
   210ba:	7819      	ldrb	r1, [r3, #0]
   210bc:	68f8      	ldr	r0, [r7, #12]
   210be:	2300      	movs	r3, #0
   210c0:	9301      	str	r3, [sp, #4]
   210c2:	2320      	movs	r3, #32
   210c4:	18fb      	adds	r3, r7, r3
   210c6:	881b      	ldrh	r3, [r3, #0]
   210c8:	9300      	str	r3, [sp, #0]
   210ca:	0023      	movs	r3, r4
   210cc:	4c03      	ldr	r4, [pc, #12]	; (210dc <m2m_wifi_connect+0x4c>)
   210ce:	47a0      	blx	r4
   210d0:	0003      	movs	r3, r0
}
   210d2:	0018      	movs	r0, r3
   210d4:	46bd      	mov	sp, r7
   210d6:	b005      	add	sp, #20
   210d8:	bd90      	pop	{r4, r7, pc}
   210da:	46c0      	nop			; (mov r8, r8)
   210dc:	000210e1 	.word	0x000210e1

000210e0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   210e0:	b5b0      	push	{r4, r5, r7, lr}
   210e2:	b0aa      	sub	sp, #168	; 0xa8
   210e4:	af04      	add	r7, sp, #16
   210e6:	60f8      	str	r0, [r7, #12]
   210e8:	0008      	movs	r0, r1
   210ea:	0011      	movs	r1, r2
   210ec:	607b      	str	r3, [r7, #4]
   210ee:	230b      	movs	r3, #11
   210f0:	18fb      	adds	r3, r7, r3
   210f2:	1c02      	adds	r2, r0, #0
   210f4:	701a      	strb	r2, [r3, #0]
   210f6:	230a      	movs	r3, #10
   210f8:	18fb      	adds	r3, r7, r3
   210fa:	1c0a      	adds	r2, r1, #0
   210fc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   210fe:	2397      	movs	r3, #151	; 0x97
   21100:	18fb      	adds	r3, r7, r3
   21102:	2200      	movs	r2, #0
   21104:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21106:	230a      	movs	r3, #10
   21108:	18fb      	adds	r3, r7, r3
   2110a:	781b      	ldrb	r3, [r3, #0]
   2110c:	2b01      	cmp	r3, #1
   2110e:	d100      	bne.n	21112 <m2m_wifi_connect_sc+0x32>
   21110:	e085      	b.n	2121e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21112:	687b      	ldr	r3, [r7, #4]
   21114:	2b00      	cmp	r3, #0
   21116:	d112      	bne.n	2113e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21118:	4ad8      	ldr	r2, [pc, #864]	; (2147c <m2m_wifi_connect_sc+0x39c>)
   2111a:	49d9      	ldr	r1, [pc, #868]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   2111c:	4bd9      	ldr	r3, [pc, #868]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   2111e:	0018      	movs	r0, r3
   21120:	4bd9      	ldr	r3, [pc, #868]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21122:	4798      	blx	r3
   21124:	4bd9      	ldr	r3, [pc, #868]	; (2148c <m2m_wifi_connect_sc+0x3ac>)
   21126:	0018      	movs	r0, r3
   21128:	4bd7      	ldr	r3, [pc, #860]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   2112a:	4798      	blx	r3
   2112c:	4bd8      	ldr	r3, [pc, #864]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   2112e:	0018      	movs	r0, r3
   21130:	4bd5      	ldr	r3, [pc, #852]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21132:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21134:	2397      	movs	r3, #151	; 0x97
   21136:	18fb      	adds	r3, r7, r3
   21138:	22f4      	movs	r2, #244	; 0xf4
   2113a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2113c:	e1f9      	b.n	21532 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   2113e:	230a      	movs	r3, #10
   21140:	18fb      	adds	r3, r7, r3
   21142:	781b      	ldrb	r3, [r3, #0]
   21144:	2b02      	cmp	r3, #2
   21146:	d16a      	bne.n	2121e <m2m_wifi_connect_sc+0x13e>
   21148:	687b      	ldr	r3, [r7, #4]
   2114a:	0018      	movs	r0, r3
   2114c:	4bd1      	ldr	r3, [pc, #836]	; (21494 <m2m_wifi_connect_sc+0x3b4>)
   2114e:	4798      	blx	r3
   21150:	0003      	movs	r3, r0
   21152:	2b40      	cmp	r3, #64	; 0x40
   21154:	d163      	bne.n	2121e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21156:	2396      	movs	r3, #150	; 0x96
   21158:	18fb      	adds	r3, r7, r3
   2115a:	2200      	movs	r2, #0
   2115c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   2115e:	687b      	ldr	r3, [r7, #4]
   21160:	2290      	movs	r2, #144	; 0x90
   21162:	18ba      	adds	r2, r7, r2
   21164:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21166:	e055      	b.n	21214 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21168:	2396      	movs	r3, #150	; 0x96
   2116a:	18fb      	adds	r3, r7, r3
   2116c:	781b      	ldrb	r3, [r3, #0]
   2116e:	2290      	movs	r2, #144	; 0x90
   21170:	18ba      	adds	r2, r7, r2
   21172:	6812      	ldr	r2, [r2, #0]
   21174:	18d3      	adds	r3, r2, r3
   21176:	781b      	ldrb	r3, [r3, #0]
   21178:	2b2f      	cmp	r3, #47	; 0x2f
   2117a:	d931      	bls.n	211e0 <m2m_wifi_connect_sc+0x100>
   2117c:	2396      	movs	r3, #150	; 0x96
   2117e:	18fb      	adds	r3, r7, r3
   21180:	781b      	ldrb	r3, [r3, #0]
   21182:	2290      	movs	r2, #144	; 0x90
   21184:	18ba      	adds	r2, r7, r2
   21186:	6812      	ldr	r2, [r2, #0]
   21188:	18d3      	adds	r3, r2, r3
   2118a:	781b      	ldrb	r3, [r3, #0]
   2118c:	2b39      	cmp	r3, #57	; 0x39
   2118e:	d909      	bls.n	211a4 <m2m_wifi_connect_sc+0xc4>
   21190:	2396      	movs	r3, #150	; 0x96
   21192:	18fb      	adds	r3, r7, r3
   21194:	781b      	ldrb	r3, [r3, #0]
   21196:	2290      	movs	r2, #144	; 0x90
   21198:	18ba      	adds	r2, r7, r2
   2119a:	6812      	ldr	r2, [r2, #0]
   2119c:	18d3      	adds	r3, r2, r3
   2119e:	781b      	ldrb	r3, [r3, #0]
   211a0:	2b40      	cmp	r3, #64	; 0x40
   211a2:	d91d      	bls.n	211e0 <m2m_wifi_connect_sc+0x100>
   211a4:	2396      	movs	r3, #150	; 0x96
   211a6:	18fb      	adds	r3, r7, r3
   211a8:	781b      	ldrb	r3, [r3, #0]
   211aa:	2290      	movs	r2, #144	; 0x90
   211ac:	18ba      	adds	r2, r7, r2
   211ae:	6812      	ldr	r2, [r2, #0]
   211b0:	18d3      	adds	r3, r2, r3
   211b2:	781b      	ldrb	r3, [r3, #0]
   211b4:	2b46      	cmp	r3, #70	; 0x46
   211b6:	d909      	bls.n	211cc <m2m_wifi_connect_sc+0xec>
   211b8:	2396      	movs	r3, #150	; 0x96
   211ba:	18fb      	adds	r3, r7, r3
   211bc:	781b      	ldrb	r3, [r3, #0]
   211be:	2290      	movs	r2, #144	; 0x90
   211c0:	18ba      	adds	r2, r7, r2
   211c2:	6812      	ldr	r2, [r2, #0]
   211c4:	18d3      	adds	r3, r2, r3
   211c6:	781b      	ldrb	r3, [r3, #0]
   211c8:	2b60      	cmp	r3, #96	; 0x60
   211ca:	d909      	bls.n	211e0 <m2m_wifi_connect_sc+0x100>
   211cc:	2396      	movs	r3, #150	; 0x96
   211ce:	18fb      	adds	r3, r7, r3
   211d0:	781b      	ldrb	r3, [r3, #0]
   211d2:	2290      	movs	r2, #144	; 0x90
   211d4:	18ba      	adds	r2, r7, r2
   211d6:	6812      	ldr	r2, [r2, #0]
   211d8:	18d3      	adds	r3, r2, r3
   211da:	781b      	ldrb	r3, [r3, #0]
   211dc:	2b66      	cmp	r3, #102	; 0x66
   211de:	d912      	bls.n	21206 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   211e0:	4aad      	ldr	r2, [pc, #692]	; (21498 <m2m_wifi_connect_sc+0x3b8>)
   211e2:	49a7      	ldr	r1, [pc, #668]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   211e4:	4ba7      	ldr	r3, [pc, #668]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   211e6:	0018      	movs	r0, r3
   211e8:	4ba7      	ldr	r3, [pc, #668]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   211ea:	4798      	blx	r3
   211ec:	4bab      	ldr	r3, [pc, #684]	; (2149c <m2m_wifi_connect_sc+0x3bc>)
   211ee:	0018      	movs	r0, r3
   211f0:	4ba5      	ldr	r3, [pc, #660]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   211f2:	4798      	blx	r3
   211f4:	4ba6      	ldr	r3, [pc, #664]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   211f6:	0018      	movs	r0, r3
   211f8:	4ba3      	ldr	r3, [pc, #652]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   211fa:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   211fc:	2397      	movs	r3, #151	; 0x97
   211fe:	18fb      	adds	r3, r7, r3
   21200:	22f4      	movs	r2, #244	; 0xf4
   21202:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21204:	e195      	b.n	21532 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21206:	2396      	movs	r3, #150	; 0x96
   21208:	18fb      	adds	r3, r7, r3
   2120a:	781a      	ldrb	r2, [r3, #0]
   2120c:	2396      	movs	r3, #150	; 0x96
   2120e:	18fb      	adds	r3, r7, r3
   21210:	3201      	adds	r2, #1
   21212:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21214:	2396      	movs	r3, #150	; 0x96
   21216:	18fb      	adds	r3, r7, r3
   21218:	781b      	ldrb	r3, [r3, #0]
   2121a:	2b3f      	cmp	r3, #63	; 0x3f
   2121c:	d9a4      	bls.n	21168 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   2121e:	230b      	movs	r3, #11
   21220:	18fb      	adds	r3, r7, r3
   21222:	781b      	ldrb	r3, [r3, #0]
   21224:	2b00      	cmp	r3, #0
   21226:	d004      	beq.n	21232 <m2m_wifi_connect_sc+0x152>
   21228:	230b      	movs	r3, #11
   2122a:	18fb      	adds	r3, r7, r3
   2122c:	781b      	ldrb	r3, [r3, #0]
   2122e:	2b20      	cmp	r3, #32
   21230:	d913      	bls.n	2125a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21232:	238c      	movs	r3, #140	; 0x8c
   21234:	009a      	lsls	r2, r3, #2
   21236:	4992      	ldr	r1, [pc, #584]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   21238:	4b92      	ldr	r3, [pc, #584]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   2123a:	0018      	movs	r0, r3
   2123c:	4b92      	ldr	r3, [pc, #584]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   2123e:	4798      	blx	r3
   21240:	4b97      	ldr	r3, [pc, #604]	; (214a0 <m2m_wifi_connect_sc+0x3c0>)
   21242:	0018      	movs	r0, r3
   21244:	4b90      	ldr	r3, [pc, #576]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21246:	4798      	blx	r3
   21248:	4b91      	ldr	r3, [pc, #580]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   2124a:	0018      	movs	r0, r3
   2124c:	4b8e      	ldr	r3, [pc, #568]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   2124e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21250:	2397      	movs	r3, #151	; 0x97
   21252:	18fb      	adds	r3, r7, r3
   21254:	22f4      	movs	r2, #244	; 0xf4
   21256:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21258:	e16b      	b.n	21532 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   2125a:	23a8      	movs	r3, #168	; 0xa8
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	881b      	ldrh	r3, [r3, #0]
   21260:	2b00      	cmp	r3, #0
   21262:	d004      	beq.n	2126e <m2m_wifi_connect_sc+0x18e>
   21264:	23a8      	movs	r3, #168	; 0xa8
   21266:	18fb      	adds	r3, r7, r3
   21268:	881b      	ldrh	r3, [r3, #0]
   2126a:	2b0e      	cmp	r3, #14
   2126c:	d917      	bls.n	2129e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   2126e:	23a8      	movs	r3, #168	; 0xa8
   21270:	18fb      	adds	r3, r7, r3
   21272:	881b      	ldrh	r3, [r3, #0]
   21274:	2bff      	cmp	r3, #255	; 0xff
   21276:	d012      	beq.n	2129e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21278:	4a8a      	ldr	r2, [pc, #552]	; (214a4 <m2m_wifi_connect_sc+0x3c4>)
   2127a:	4981      	ldr	r1, [pc, #516]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   2127c:	4b81      	ldr	r3, [pc, #516]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   2127e:	0018      	movs	r0, r3
   21280:	4b81      	ldr	r3, [pc, #516]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21282:	4798      	blx	r3
   21284:	4b88      	ldr	r3, [pc, #544]	; (214a8 <m2m_wifi_connect_sc+0x3c8>)
   21286:	0018      	movs	r0, r3
   21288:	4b7f      	ldr	r3, [pc, #508]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   2128a:	4798      	blx	r3
   2128c:	4b80      	ldr	r3, [pc, #512]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   2128e:	0018      	movs	r0, r3
   21290:	4b7d      	ldr	r3, [pc, #500]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21292:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21294:	2397      	movs	r3, #151	; 0x97
   21296:	18fb      	adds	r3, r7, r3
   21298:	22f4      	movs	r2, #244	; 0xf4
   2129a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2129c:	e149      	b.n	21532 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2129e:	230b      	movs	r3, #11
   212a0:	18fb      	adds	r3, r7, r3
   212a2:	781a      	ldrb	r2, [r3, #0]
   212a4:	68f9      	ldr	r1, [r7, #12]
   212a6:	2314      	movs	r3, #20
   212a8:	18fb      	adds	r3, r7, r3
   212aa:	3346      	adds	r3, #70	; 0x46
   212ac:	0018      	movs	r0, r3
   212ae:	4b7f      	ldr	r3, [pc, #508]	; (214ac <m2m_wifi_connect_sc+0x3cc>)
   212b0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   212b2:	230b      	movs	r3, #11
   212b4:	18fb      	adds	r3, r7, r3
   212b6:	781b      	ldrb	r3, [r3, #0]
   212b8:	2214      	movs	r2, #20
   212ba:	18ba      	adds	r2, r7, r2
   212bc:	2146      	movs	r1, #70	; 0x46
   212be:	18d3      	adds	r3, r2, r3
   212c0:	185b      	adds	r3, r3, r1
   212c2:	2200      	movs	r2, #0
   212c4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   212c6:	2314      	movs	r3, #20
   212c8:	18fb      	adds	r3, r7, r3
   212ca:	22a8      	movs	r2, #168	; 0xa8
   212cc:	18ba      	adds	r2, r7, r2
   212ce:	2144      	movs	r1, #68	; 0x44
   212d0:	8812      	ldrh	r2, [r2, #0]
   212d2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   212d4:	23ac      	movs	r3, #172	; 0xac
   212d6:	18fb      	adds	r3, r7, r3
   212d8:	781b      	ldrb	r3, [r3, #0]
   212da:	1e5a      	subs	r2, r3, #1
   212dc:	4193      	sbcs	r3, r2
   212de:	b2db      	uxtb	r3, r3
   212e0:	0019      	movs	r1, r3
   212e2:	2314      	movs	r3, #20
   212e4:	18fb      	adds	r3, r7, r3
   212e6:	2267      	movs	r2, #103	; 0x67
   212e8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   212ea:	2314      	movs	r3, #20
   212ec:	18fb      	adds	r3, r7, r3
   212ee:	228c      	movs	r2, #140	; 0x8c
   212f0:	18ba      	adds	r2, r7, r2
   212f2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   212f4:	238c      	movs	r3, #140	; 0x8c
   212f6:	18fb      	adds	r3, r7, r3
   212f8:	681b      	ldr	r3, [r3, #0]
   212fa:	220a      	movs	r2, #10
   212fc:	18ba      	adds	r2, r7, r2
   212fe:	2141      	movs	r1, #65	; 0x41
   21300:	7812      	ldrb	r2, [r2, #0]
   21302:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21304:	230a      	movs	r3, #10
   21306:	18fb      	adds	r3, r7, r3
   21308:	781b      	ldrb	r3, [r3, #0]
   2130a:	2b03      	cmp	r3, #3
   2130c:	d000      	beq.n	21310 <m2m_wifi_connect_sc+0x230>
   2130e:	e07d      	b.n	2140c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21310:	687b      	ldr	r3, [r7, #4]
   21312:	2288      	movs	r2, #136	; 0x88
   21314:	18ba      	adds	r2, r7, r2
   21316:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21318:	238c      	movs	r3, #140	; 0x8c
   2131a:	18fb      	adds	r3, r7, r3
   2131c:	681b      	ldr	r3, [r3, #0]
   2131e:	2284      	movs	r2, #132	; 0x84
   21320:	18ba      	adds	r2, r7, r2
   21322:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21324:	2388      	movs	r3, #136	; 0x88
   21326:	18fb      	adds	r3, r7, r3
   21328:	681b      	ldr	r3, [r3, #0]
   2132a:	781b      	ldrb	r3, [r3, #0]
   2132c:	3b01      	subs	r3, #1
   2132e:	b2da      	uxtb	r2, r3
   21330:	2384      	movs	r3, #132	; 0x84
   21332:	18fb      	adds	r3, r7, r3
   21334:	681b      	ldr	r3, [r3, #0]
   21336:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21338:	2384      	movs	r3, #132	; 0x84
   2133a:	18fb      	adds	r3, r7, r3
   2133c:	681b      	ldr	r3, [r3, #0]
   2133e:	781b      	ldrb	r3, [r3, #0]
   21340:	2b03      	cmp	r3, #3
   21342:	d919      	bls.n	21378 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21344:	2394      	movs	r3, #148	; 0x94
   21346:	009a      	lsls	r2, r3, #2
   21348:	494d      	ldr	r1, [pc, #308]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   2134a:	4b4e      	ldr	r3, [pc, #312]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   2134c:	0018      	movs	r0, r3
   2134e:	4b4e      	ldr	r3, [pc, #312]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21350:	4798      	blx	r3
   21352:	2384      	movs	r3, #132	; 0x84
   21354:	18fb      	adds	r3, r7, r3
   21356:	681b      	ldr	r3, [r3, #0]
   21358:	781b      	ldrb	r3, [r3, #0]
   2135a:	001a      	movs	r2, r3
   2135c:	4b54      	ldr	r3, [pc, #336]	; (214b0 <m2m_wifi_connect_sc+0x3d0>)
   2135e:	0011      	movs	r1, r2
   21360:	0018      	movs	r0, r3
   21362:	4b49      	ldr	r3, [pc, #292]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21364:	4798      	blx	r3
   21366:	4b4a      	ldr	r3, [pc, #296]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   21368:	0018      	movs	r0, r3
   2136a:	4b47      	ldr	r3, [pc, #284]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   2136c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2136e:	2397      	movs	r3, #151	; 0x97
   21370:	18fb      	adds	r3, r7, r3
   21372:	22f4      	movs	r2, #244	; 0xf4
   21374:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21376:	e0dc      	b.n	21532 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21378:	2388      	movs	r3, #136	; 0x88
   2137a:	18fb      	adds	r3, r7, r3
   2137c:	681b      	ldr	r3, [r3, #0]
   2137e:	785b      	ldrb	r3, [r3, #1]
   21380:	3b01      	subs	r3, #1
   21382:	b2da      	uxtb	r2, r3
   21384:	2384      	movs	r3, #132	; 0x84
   21386:	18fb      	adds	r3, r7, r3
   21388:	681b      	ldr	r3, [r3, #0]
   2138a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2138c:	2384      	movs	r3, #132	; 0x84
   2138e:	18fb      	adds	r3, r7, r3
   21390:	681b      	ldr	r3, [r3, #0]
   21392:	785b      	ldrb	r3, [r3, #1]
   21394:	2b0a      	cmp	r3, #10
   21396:	d01e      	beq.n	213d6 <m2m_wifi_connect_sc+0x2f6>
   21398:	2384      	movs	r3, #132	; 0x84
   2139a:	18fb      	adds	r3, r7, r3
   2139c:	681b      	ldr	r3, [r3, #0]
   2139e:	785b      	ldrb	r3, [r3, #1]
   213a0:	2b1a      	cmp	r3, #26
   213a2:	d018      	beq.n	213d6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   213a4:	4a43      	ldr	r2, [pc, #268]	; (214b4 <m2m_wifi_connect_sc+0x3d4>)
   213a6:	4936      	ldr	r1, [pc, #216]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   213a8:	4b36      	ldr	r3, [pc, #216]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   213aa:	0018      	movs	r0, r3
   213ac:	4b36      	ldr	r3, [pc, #216]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   213ae:	4798      	blx	r3
   213b0:	2384      	movs	r3, #132	; 0x84
   213b2:	18fb      	adds	r3, r7, r3
   213b4:	681b      	ldr	r3, [r3, #0]
   213b6:	785b      	ldrb	r3, [r3, #1]
   213b8:	001a      	movs	r2, r3
   213ba:	4b3f      	ldr	r3, [pc, #252]	; (214b8 <m2m_wifi_connect_sc+0x3d8>)
   213bc:	0011      	movs	r1, r2
   213be:	0018      	movs	r0, r3
   213c0:	4b31      	ldr	r3, [pc, #196]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   213c2:	4798      	blx	r3
   213c4:	4b32      	ldr	r3, [pc, #200]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   213c6:	0018      	movs	r0, r3
   213c8:	4b2f      	ldr	r3, [pc, #188]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   213ca:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   213cc:	2397      	movs	r3, #151	; 0x97
   213ce:	18fb      	adds	r3, r7, r3
   213d0:	22f4      	movs	r2, #244	; 0xf4
   213d2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   213d4:	e0ad      	b.n	21532 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   213d6:	2384      	movs	r3, #132	; 0x84
   213d8:	18fb      	adds	r3, r7, r3
   213da:	681b      	ldr	r3, [r3, #0]
   213dc:	1c98      	adds	r0, r3, #2
   213de:	2388      	movs	r3, #136	; 0x88
   213e0:	18fb      	adds	r3, r7, r3
   213e2:	681b      	ldr	r3, [r3, #0]
   213e4:	1c99      	adds	r1, r3, #2
   213e6:	2388      	movs	r3, #136	; 0x88
   213e8:	18fb      	adds	r3, r7, r3
   213ea:	681b      	ldr	r3, [r3, #0]
   213ec:	785b      	ldrb	r3, [r3, #1]
   213ee:	001a      	movs	r2, r3
   213f0:	4b2e      	ldr	r3, [pc, #184]	; (214ac <m2m_wifi_connect_sc+0x3cc>)
   213f2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   213f4:	2388      	movs	r3, #136	; 0x88
   213f6:	18fb      	adds	r3, r7, r3
   213f8:	681b      	ldr	r3, [r3, #0]
   213fa:	785b      	ldrb	r3, [r3, #1]
   213fc:	001a      	movs	r2, r3
   213fe:	2384      	movs	r3, #132	; 0x84
   21400:	18fb      	adds	r3, r7, r3
   21402:	681b      	ldr	r3, [r3, #0]
   21404:	189b      	adds	r3, r3, r2
   21406:	2200      	movs	r2, #0
   21408:	709a      	strb	r2, [r3, #2]
   2140a:	e081      	b.n	21510 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   2140c:	230a      	movs	r3, #10
   2140e:	18fb      	adds	r3, r7, r3
   21410:	781b      	ldrb	r3, [r3, #0]
   21412:	2b02      	cmp	r3, #2
   21414:	d156      	bne.n	214c4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21416:	2382      	movs	r3, #130	; 0x82
   21418:	18fc      	adds	r4, r7, r3
   2141a:	687b      	ldr	r3, [r7, #4]
   2141c:	0018      	movs	r0, r3
   2141e:	4b1d      	ldr	r3, [pc, #116]	; (21494 <m2m_wifi_connect_sc+0x3b4>)
   21420:	4798      	blx	r3
   21422:	0003      	movs	r3, r0
   21424:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21426:	2382      	movs	r3, #130	; 0x82
   21428:	18fb      	adds	r3, r7, r3
   2142a:	881b      	ldrh	r3, [r3, #0]
   2142c:	2b00      	cmp	r3, #0
   2142e:	d004      	beq.n	2143a <m2m_wifi_connect_sc+0x35a>
   21430:	2382      	movs	r3, #130	; 0x82
   21432:	18fb      	adds	r3, r7, r3
   21434:	881b      	ldrh	r3, [r3, #0]
   21436:	2b40      	cmp	r3, #64	; 0x40
   21438:	d912      	bls.n	21460 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   2143a:	4a20      	ldr	r2, [pc, #128]	; (214bc <m2m_wifi_connect_sc+0x3dc>)
   2143c:	4910      	ldr	r1, [pc, #64]	; (21480 <m2m_wifi_connect_sc+0x3a0>)
   2143e:	4b11      	ldr	r3, [pc, #68]	; (21484 <m2m_wifi_connect_sc+0x3a4>)
   21440:	0018      	movs	r0, r3
   21442:	4b11      	ldr	r3, [pc, #68]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21444:	4798      	blx	r3
   21446:	4b1e      	ldr	r3, [pc, #120]	; (214c0 <m2m_wifi_connect_sc+0x3e0>)
   21448:	0018      	movs	r0, r3
   2144a:	4b0f      	ldr	r3, [pc, #60]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   2144c:	4798      	blx	r3
   2144e:	4b10      	ldr	r3, [pc, #64]	; (21490 <m2m_wifi_connect_sc+0x3b0>)
   21450:	0018      	movs	r0, r3
   21452:	4b0d      	ldr	r3, [pc, #52]	; (21488 <m2m_wifi_connect_sc+0x3a8>)
   21454:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21456:	2397      	movs	r3, #151	; 0x97
   21458:	18fb      	adds	r3, r7, r3
   2145a:	22f4      	movs	r2, #244	; 0xf4
   2145c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2145e:	e068      	b.n	21532 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21460:	238c      	movs	r3, #140	; 0x8c
   21462:	18fb      	adds	r3, r7, r3
   21464:	6818      	ldr	r0, [r3, #0]
   21466:	2382      	movs	r3, #130	; 0x82
   21468:	18fb      	adds	r3, r7, r3
   2146a:	881b      	ldrh	r3, [r3, #0]
   2146c:	3301      	adds	r3, #1
   2146e:	001a      	movs	r2, r3
   21470:	687b      	ldr	r3, [r7, #4]
   21472:	0019      	movs	r1, r3
   21474:	4b0d      	ldr	r3, [pc, #52]	; (214ac <m2m_wifi_connect_sc+0x3cc>)
   21476:	4798      	blx	r3
   21478:	e04a      	b.n	21510 <m2m_wifi_connect_sc+0x430>
   2147a:	46c0      	nop			; (mov r8, r8)
   2147c:	0000021a 	.word	0x0000021a
   21480:	0003857c 	.word	0x0003857c
   21484:	000381c4 	.word	0x000381c4
   21488:	0001cf79 	.word	0x0001cf79
   2148c:	00038404 	.word	0x00038404
   21490:	000381c0 	.word	0x000381c0
   21494:	0001fd4f 	.word	0x0001fd4f
   21498:	00000226 	.word	0x00000226
   2149c:	00038418 	.word	0x00038418
   214a0:	00038428 	.word	0x00038428
   214a4:	00000239 	.word	0x00000239
   214a8:	0003843c 	.word	0x0003843c
   214ac:	0001fcd5 	.word	0x0001fcd5
   214b0:	00038448 	.word	0x00038448
   214b4:	00000257 	.word	0x00000257
   214b8:	00038464 	.word	0x00038464
   214bc:	00000266 	.word	0x00000266
   214c0:	00038480 	.word	0x00038480
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   214c4:	230a      	movs	r3, #10
   214c6:	18fb      	adds	r3, r7, r3
   214c8:	781b      	ldrb	r3, [r3, #0]
   214ca:	2b04      	cmp	r3, #4
   214cc:	d108      	bne.n	214e0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   214ce:	238c      	movs	r3, #140	; 0x8c
   214d0:	18fb      	adds	r3, r7, r3
   214d2:	681b      	ldr	r3, [r3, #0]
   214d4:	6879      	ldr	r1, [r7, #4]
   214d6:	223e      	movs	r2, #62	; 0x3e
   214d8:	0018      	movs	r0, r3
   214da:	4b1a      	ldr	r3, [pc, #104]	; (21544 <m2m_wifi_connect_sc+0x464>)
   214dc:	4798      	blx	r3
   214de:	e017      	b.n	21510 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   214e0:	230a      	movs	r3, #10
   214e2:	18fb      	adds	r3, r7, r3
   214e4:	781b      	ldrb	r3, [r3, #0]
   214e6:	2b01      	cmp	r3, #1
   214e8:	d012      	beq.n	21510 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   214ea:	4a17      	ldr	r2, [pc, #92]	; (21548 <m2m_wifi_connect_sc+0x468>)
   214ec:	4917      	ldr	r1, [pc, #92]	; (2154c <m2m_wifi_connect_sc+0x46c>)
   214ee:	4b18      	ldr	r3, [pc, #96]	; (21550 <m2m_wifi_connect_sc+0x470>)
   214f0:	0018      	movs	r0, r3
   214f2:	4b18      	ldr	r3, [pc, #96]	; (21554 <m2m_wifi_connect_sc+0x474>)
   214f4:	4798      	blx	r3
   214f6:	4b18      	ldr	r3, [pc, #96]	; (21558 <m2m_wifi_connect_sc+0x478>)
   214f8:	0018      	movs	r0, r3
   214fa:	4b16      	ldr	r3, [pc, #88]	; (21554 <m2m_wifi_connect_sc+0x474>)
   214fc:	4798      	blx	r3
   214fe:	4b17      	ldr	r3, [pc, #92]	; (2155c <m2m_wifi_connect_sc+0x47c>)
   21500:	0018      	movs	r0, r3
   21502:	4b14      	ldr	r3, [pc, #80]	; (21554 <m2m_wifi_connect_sc+0x474>)
   21504:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21506:	2397      	movs	r3, #151	; 0x97
   21508:	18fb      	adds	r3, r7, r3
   2150a:	22f4      	movs	r2, #244	; 0xf4
   2150c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2150e:	e010      	b.n	21532 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   21510:	2397      	movs	r3, #151	; 0x97
   21512:	18fc      	adds	r4, r7, r3
   21514:	2314      	movs	r3, #20
   21516:	18fa      	adds	r2, r7, r3
   21518:	2300      	movs	r3, #0
   2151a:	9302      	str	r3, [sp, #8]
   2151c:	2300      	movs	r3, #0
   2151e:	9301      	str	r3, [sp, #4]
   21520:	2300      	movs	r3, #0
   21522:	9300      	str	r3, [sp, #0]
   21524:	236c      	movs	r3, #108	; 0x6c
   21526:	2128      	movs	r1, #40	; 0x28
   21528:	2001      	movs	r0, #1
   2152a:	4d0d      	ldr	r5, [pc, #52]	; (21560 <m2m_wifi_connect_sc+0x480>)
   2152c:	47a8      	blx	r5
   2152e:	0003      	movs	r3, r0
   21530:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   21532:	2397      	movs	r3, #151	; 0x97
   21534:	18fb      	adds	r3, r7, r3
   21536:	781b      	ldrb	r3, [r3, #0]
   21538:	b25b      	sxtb	r3, r3
}
   2153a:	0018      	movs	r0, r3
   2153c:	46bd      	mov	sp, r7
   2153e:	b026      	add	sp, #152	; 0x98
   21540:	bdb0      	pop	{r4, r5, r7, pc}
   21542:	46c0      	nop			; (mov r8, r8)
   21544:	0001fcd5 	.word	0x0001fcd5
   21548:	00000276 	.word	0x00000276
   2154c:	0003857c 	.word	0x0003857c
   21550:	000381c4 	.word	0x000381c4
   21554:	0001cf79 	.word	0x0001cf79
   21558:	0003849c 	.word	0x0003849c
   2155c:	000381c0 	.word	0x000381c0
   21560:	0001ff71 	.word	0x0001ff71

00021564 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21564:	b580      	push	{r7, lr}
   21566:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21568:	2300      	movs	r3, #0
}
   2156a:	0018      	movs	r0, r3
   2156c:	46bd      	mov	sp, r7
   2156e:	bd80      	pop	{r7, pc}

00021570 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21570:	b590      	push	{r4, r7, lr}
   21572:	b087      	sub	sp, #28
   21574:	af00      	add	r7, sp, #0
   21576:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21578:	2317      	movs	r3, #23
   2157a:	18fb      	adds	r3, r7, r3
   2157c:	2200      	movs	r2, #0
   2157e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21580:	687b      	ldr	r3, [r7, #4]
   21582:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21584:	693b      	ldr	r3, [r7, #16]
   21586:	2280      	movs	r2, #128	; 0x80
   21588:	0052      	lsls	r2, r2, #1
   2158a:	4313      	orrs	r3, r2
   2158c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2158e:	693a      	ldr	r2, [r7, #16]
   21590:	23a5      	movs	r3, #165	; 0xa5
   21592:	015b      	lsls	r3, r3, #5
   21594:	0011      	movs	r1, r2
   21596:	0018      	movs	r0, r3
   21598:	4b12      	ldr	r3, [pc, #72]	; (215e4 <chip_apply_conf+0x74>)
   2159a:	4798      	blx	r3
		if(val32 != 0) {		
   2159c:	693b      	ldr	r3, [r7, #16]
   2159e:	2b00      	cmp	r3, #0
   215a0:	d018      	beq.n	215d4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   215a2:	2300      	movs	r3, #0
   215a4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   215a6:	2317      	movs	r3, #23
   215a8:	18fc      	adds	r4, r7, r3
   215aa:	230c      	movs	r3, #12
   215ac:	18fa      	adds	r2, r7, r3
   215ae:	23a5      	movs	r3, #165	; 0xa5
   215b0:	015b      	lsls	r3, r3, #5
   215b2:	0011      	movs	r1, r2
   215b4:	0018      	movs	r0, r3
   215b6:	4b0c      	ldr	r3, [pc, #48]	; (215e8 <chip_apply_conf+0x78>)
   215b8:	4798      	blx	r3
   215ba:	0003      	movs	r3, r0
   215bc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   215be:	2317      	movs	r3, #23
   215c0:	18fb      	adds	r3, r7, r3
   215c2:	781b      	ldrb	r3, [r3, #0]
   215c4:	b25b      	sxtb	r3, r3
   215c6:	2b00      	cmp	r3, #0
   215c8:	d1e1      	bne.n	2158e <chip_apply_conf+0x1e>
				if(reg == val32)
   215ca:	68fa      	ldr	r2, [r7, #12]
   215cc:	693b      	ldr	r3, [r7, #16]
   215ce:	429a      	cmp	r2, r3
   215d0:	d002      	beq.n	215d8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   215d2:	e7dc      	b.n	2158e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   215d4:	46c0      	nop			; (mov r8, r8)
   215d6:	e000      	b.n	215da <chip_apply_conf+0x6a>
					break;
   215d8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   215da:	2300      	movs	r3, #0
}
   215dc:	0018      	movs	r0, r3
   215de:	46bd      	mov	sp, r7
   215e0:	b007      	add	sp, #28
   215e2:	bd90      	pop	{r4, r7, pc}
   215e4:	00021dc5 	.word	0x00021dc5
   215e8:	00021da1 	.word	0x00021da1

000215ec <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   215ec:	b590      	push	{r4, r7, lr}
   215ee:	b083      	sub	sp, #12
   215f0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   215f2:	2300      	movs	r3, #0
   215f4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   215f6:	1dfb      	adds	r3, r7, #7
   215f8:	2200      	movs	r2, #0
   215fa:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   215fc:	1dfc      	adds	r4, r7, #7
   215fe:	003b      	movs	r3, r7
   21600:	4a24      	ldr	r2, [pc, #144]	; (21694 <enable_interrupts+0xa8>)
   21602:	0019      	movs	r1, r3
   21604:	0010      	movs	r0, r2
   21606:	4b24      	ldr	r3, [pc, #144]	; (21698 <enable_interrupts+0xac>)
   21608:	4798      	blx	r3
   2160a:	0003      	movs	r3, r0
   2160c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2160e:	1dfb      	adds	r3, r7, #7
   21610:	781b      	ldrb	r3, [r3, #0]
   21612:	b25b      	sxtb	r3, r3
   21614:	2b00      	cmp	r3, #0
   21616:	d131      	bne.n	2167c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21618:	683b      	ldr	r3, [r7, #0]
   2161a:	2280      	movs	r2, #128	; 0x80
   2161c:	0052      	lsls	r2, r2, #1
   2161e:	4313      	orrs	r3, r2
   21620:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   21622:	683b      	ldr	r3, [r7, #0]
   21624:	1dfc      	adds	r4, r7, #7
   21626:	4a1b      	ldr	r2, [pc, #108]	; (21694 <enable_interrupts+0xa8>)
   21628:	0019      	movs	r1, r3
   2162a:	0010      	movs	r0, r2
   2162c:	4b1b      	ldr	r3, [pc, #108]	; (2169c <enable_interrupts+0xb0>)
   2162e:	4798      	blx	r3
   21630:	0003      	movs	r3, r0
   21632:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21634:	1dfb      	adds	r3, r7, #7
   21636:	781b      	ldrb	r3, [r3, #0]
   21638:	b25b      	sxtb	r3, r3
   2163a:	2b00      	cmp	r3, #0
   2163c:	d120      	bne.n	21680 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2163e:	1dfc      	adds	r4, r7, #7
   21640:	003a      	movs	r2, r7
   21642:	23d0      	movs	r3, #208	; 0xd0
   21644:	015b      	lsls	r3, r3, #5
   21646:	0011      	movs	r1, r2
   21648:	0018      	movs	r0, r3
   2164a:	4b13      	ldr	r3, [pc, #76]	; (21698 <enable_interrupts+0xac>)
   2164c:	4798      	blx	r3
   2164e:	0003      	movs	r3, r0
   21650:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21652:	1dfb      	adds	r3, r7, #7
   21654:	781b      	ldrb	r3, [r3, #0]
   21656:	b25b      	sxtb	r3, r3
   21658:	2b00      	cmp	r3, #0
   2165a:	d113      	bne.n	21684 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   2165c:	683b      	ldr	r3, [r7, #0]
   2165e:	2280      	movs	r2, #128	; 0x80
   21660:	0252      	lsls	r2, r2, #9
   21662:	4313      	orrs	r3, r2
   21664:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21666:	683a      	ldr	r2, [r7, #0]
   21668:	1dfc      	adds	r4, r7, #7
   2166a:	23d0      	movs	r3, #208	; 0xd0
   2166c:	015b      	lsls	r3, r3, #5
   2166e:	0011      	movs	r1, r2
   21670:	0018      	movs	r0, r3
   21672:	4b0a      	ldr	r3, [pc, #40]	; (2169c <enable_interrupts+0xb0>)
   21674:	4798      	blx	r3
   21676:	0003      	movs	r3, r0
   21678:	7023      	strb	r3, [r4, #0]
   2167a:	e004      	b.n	21686 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2167c:	46c0      	nop			; (mov r8, r8)
   2167e:	e002      	b.n	21686 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21680:	46c0      	nop			; (mov r8, r8)
   21682:	e000      	b.n	21686 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21684:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21686:	1dfb      	adds	r3, r7, #7
   21688:	781b      	ldrb	r3, [r3, #0]
   2168a:	b25b      	sxtb	r3, r3
}
   2168c:	0018      	movs	r0, r3
   2168e:	46bd      	mov	sp, r7
   21690:	b003      	add	sp, #12
   21692:	bd90      	pop	{r4, r7, pc}
   21694:	00001408 	.word	0x00001408
   21698:	00021da1 	.word	0x00021da1
   2169c:	00021dc5 	.word	0x00021dc5

000216a0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   216a0:	b580      	push	{r7, lr}
   216a2:	b082      	sub	sp, #8
   216a4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   216a6:	4b32      	ldr	r3, [pc, #200]	; (21770 <nmi_get_chipid+0xd0>)
   216a8:	681b      	ldr	r3, [r3, #0]
   216aa:	2b00      	cmp	r3, #0
   216ac:	d159      	bne.n	21762 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   216ae:	4a30      	ldr	r2, [pc, #192]	; (21770 <nmi_get_chipid+0xd0>)
   216b0:	2380      	movs	r3, #128	; 0x80
   216b2:	015b      	lsls	r3, r3, #5
   216b4:	0011      	movs	r1, r2
   216b6:	0018      	movs	r0, r3
   216b8:	4b2e      	ldr	r3, [pc, #184]	; (21774 <nmi_get_chipid+0xd4>)
   216ba:	4798      	blx	r3
   216bc:	1e03      	subs	r3, r0, #0
   216be:	d004      	beq.n	216ca <nmi_get_chipid+0x2a>
			chipid = 0;
   216c0:	4b2b      	ldr	r3, [pc, #172]	; (21770 <nmi_get_chipid+0xd0>)
   216c2:	2200      	movs	r2, #0
   216c4:	601a      	str	r2, [r3, #0]
			return 0;
   216c6:	2300      	movs	r3, #0
   216c8:	e04d      	b.n	21766 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   216ca:	1d3b      	adds	r3, r7, #4
   216cc:	4a2a      	ldr	r2, [pc, #168]	; (21778 <nmi_get_chipid+0xd8>)
   216ce:	0019      	movs	r1, r3
   216d0:	0010      	movs	r0, r2
   216d2:	4b28      	ldr	r3, [pc, #160]	; (21774 <nmi_get_chipid+0xd4>)
   216d4:	4798      	blx	r3
   216d6:	1e03      	subs	r3, r0, #0
   216d8:	d004      	beq.n	216e4 <nmi_get_chipid+0x44>
			chipid = 0;
   216da:	4b25      	ldr	r3, [pc, #148]	; (21770 <nmi_get_chipid+0xd0>)
   216dc:	2200      	movs	r2, #0
   216de:	601a      	str	r2, [r3, #0]
			return 0;
   216e0:	2300      	movs	r3, #0
   216e2:	e040      	b.n	21766 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   216e4:	4b22      	ldr	r3, [pc, #136]	; (21770 <nmi_get_chipid+0xd0>)
   216e6:	681b      	ldr	r3, [r3, #0]
   216e8:	4a24      	ldr	r2, [pc, #144]	; (2177c <nmi_get_chipid+0xdc>)
   216ea:	4293      	cmp	r3, r2
   216ec:	d106      	bne.n	216fc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   216ee:	687b      	ldr	r3, [r7, #4]
   216f0:	2b01      	cmp	r3, #1
   216f2:	d029      	beq.n	21748 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   216f4:	4b1e      	ldr	r3, [pc, #120]	; (21770 <nmi_get_chipid+0xd0>)
   216f6:	4a22      	ldr	r2, [pc, #136]	; (21780 <nmi_get_chipid+0xe0>)
   216f8:	601a      	str	r2, [r3, #0]
   216fa:	e025      	b.n	21748 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   216fc:	4b1c      	ldr	r3, [pc, #112]	; (21770 <nmi_get_chipid+0xd0>)
   216fe:	681b      	ldr	r3, [r3, #0]
   21700:	4a20      	ldr	r2, [pc, #128]	; (21784 <nmi_get_chipid+0xe4>)
   21702:	4293      	cmp	r3, r2
   21704:	d10d      	bne.n	21722 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   21706:	687b      	ldr	r3, [r7, #4]
   21708:	2b03      	cmp	r3, #3
   2170a:	d01d      	beq.n	21748 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2170c:	687b      	ldr	r3, [r7, #4]
   2170e:	2b04      	cmp	r3, #4
   21710:	d103      	bne.n	2171a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   21712:	4b17      	ldr	r3, [pc, #92]	; (21770 <nmi_get_chipid+0xd0>)
   21714:	4a1c      	ldr	r2, [pc, #112]	; (21788 <nmi_get_chipid+0xe8>)
   21716:	601a      	str	r2, [r3, #0]
   21718:	e016      	b.n	21748 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2171a:	4b15      	ldr	r3, [pc, #84]	; (21770 <nmi_get_chipid+0xd0>)
   2171c:	4a1b      	ldr	r2, [pc, #108]	; (2178c <nmi_get_chipid+0xec>)
   2171e:	601a      	str	r2, [r3, #0]
   21720:	e012      	b.n	21748 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   21722:	4b13      	ldr	r3, [pc, #76]	; (21770 <nmi_get_chipid+0xd0>)
   21724:	681b      	ldr	r3, [r3, #0]
   21726:	4a1a      	ldr	r2, [pc, #104]	; (21790 <nmi_get_chipid+0xf0>)
   21728:	4293      	cmp	r3, r2
   2172a:	d10d      	bne.n	21748 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2172c:	4a10      	ldr	r2, [pc, #64]	; (21770 <nmi_get_chipid+0xd0>)
   2172e:	23ec      	movs	r3, #236	; 0xec
   21730:	039b      	lsls	r3, r3, #14
   21732:	0011      	movs	r1, r2
   21734:	0018      	movs	r0, r3
   21736:	4b0f      	ldr	r3, [pc, #60]	; (21774 <nmi_get_chipid+0xd4>)
   21738:	4798      	blx	r3
   2173a:	1e03      	subs	r3, r0, #0
   2173c:	d004      	beq.n	21748 <nmi_get_chipid+0xa8>
			chipid = 0;
   2173e:	4b0c      	ldr	r3, [pc, #48]	; (21770 <nmi_get_chipid+0xd0>)
   21740:	2200      	movs	r2, #0
   21742:	601a      	str	r2, [r3, #0]
			return 0;
   21744:	2300      	movs	r3, #0
   21746:	e00e      	b.n	21766 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   21748:	4b09      	ldr	r3, [pc, #36]	; (21770 <nmi_get_chipid+0xd0>)
   2174a:	681b      	ldr	r3, [r3, #0]
   2174c:	4a11      	ldr	r2, [pc, #68]	; (21794 <nmi_get_chipid+0xf4>)
   2174e:	401a      	ands	r2, r3
   21750:	4b07      	ldr	r3, [pc, #28]	; (21770 <nmi_get_chipid+0xd0>)
   21752:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   21754:	4b06      	ldr	r3, [pc, #24]	; (21770 <nmi_get_chipid+0xd0>)
   21756:	681b      	ldr	r3, [r3, #0]
   21758:	22a0      	movs	r2, #160	; 0xa0
   2175a:	02d2      	lsls	r2, r2, #11
   2175c:	431a      	orrs	r2, r3
   2175e:	4b04      	ldr	r3, [pc, #16]	; (21770 <nmi_get_chipid+0xd0>)
   21760:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   21762:	4b03      	ldr	r3, [pc, #12]	; (21770 <nmi_get_chipid+0xd0>)
   21764:	681b      	ldr	r3, [r3, #0]
}
   21766:	0018      	movs	r0, r3
   21768:	46bd      	mov	sp, r7
   2176a:	b002      	add	sp, #8
   2176c:	bd80      	pop	{r7, pc}
   2176e:	46c0      	nop			; (mov r8, r8)
   21770:	20004278 	.word	0x20004278
   21774:	00021da1 	.word	0x00021da1
   21778:	000013f4 	.word	0x000013f4
   2177c:	001002a0 	.word	0x001002a0
   21780:	001002a1 	.word	0x001002a1
   21784:	001002b0 	.word	0x001002b0
   21788:	001002b1 	.word	0x001002b1
   2178c:	001002b2 	.word	0x001002b2
   21790:	001000f0 	.word	0x001000f0
   21794:	fff0ffff 	.word	0xfff0ffff

00021798 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   21798:	b590      	push	{r4, r7, lr}
   2179a:	b083      	sub	sp, #12
   2179c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2179e:	1dfb      	adds	r3, r7, #7
   217a0:	2200      	movs	r2, #0
   217a2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   217a4:	1dfc      	adds	r4, r7, #7
   217a6:	003b      	movs	r3, r7
   217a8:	0019      	movs	r1, r3
   217aa:	2010      	movs	r0, #16
   217ac:	4b2e      	ldr	r3, [pc, #184]	; (21868 <chip_sleep+0xd0>)
   217ae:	4798      	blx	r3
   217b0:	0003      	movs	r3, r0
   217b2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   217b4:	1dfb      	adds	r3, r7, #7
   217b6:	781b      	ldrb	r3, [r3, #0]
   217b8:	b25b      	sxtb	r3, r3
   217ba:	2b00      	cmp	r3, #0
   217bc:	d145      	bne.n	2184a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   217be:	683b      	ldr	r3, [r7, #0]
   217c0:	2201      	movs	r2, #1
   217c2:	4013      	ands	r3, r2
   217c4:	d000      	beq.n	217c8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   217c6:	e7ed      	b.n	217a4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   217c8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   217ca:	1dfc      	adds	r4, r7, #7
   217cc:	003b      	movs	r3, r7
   217ce:	0019      	movs	r1, r3
   217d0:	2001      	movs	r0, #1
   217d2:	4b25      	ldr	r3, [pc, #148]	; (21868 <chip_sleep+0xd0>)
   217d4:	4798      	blx	r3
   217d6:	0003      	movs	r3, r0
   217d8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   217da:	1dfb      	adds	r3, r7, #7
   217dc:	781b      	ldrb	r3, [r3, #0]
   217de:	b25b      	sxtb	r3, r3
   217e0:	2b00      	cmp	r3, #0
   217e2:	d134      	bne.n	2184e <chip_sleep+0xb6>
	if(reg & NBIT1)
   217e4:	683b      	ldr	r3, [r7, #0]
   217e6:	2202      	movs	r2, #2
   217e8:	4013      	ands	r3, r2
   217ea:	d010      	beq.n	2180e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   217ec:	683b      	ldr	r3, [r7, #0]
   217ee:	2202      	movs	r2, #2
   217f0:	4393      	bics	r3, r2
   217f2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   217f4:	683b      	ldr	r3, [r7, #0]
   217f6:	1dfc      	adds	r4, r7, #7
   217f8:	0019      	movs	r1, r3
   217fa:	2001      	movs	r0, #1
   217fc:	4b1b      	ldr	r3, [pc, #108]	; (2186c <chip_sleep+0xd4>)
   217fe:	4798      	blx	r3
   21800:	0003      	movs	r3, r0
   21802:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   21804:	1dfb      	adds	r3, r7, #7
   21806:	781b      	ldrb	r3, [r3, #0]
   21808:	b25b      	sxtb	r3, r3
   2180a:	2b00      	cmp	r3, #0
   2180c:	d121      	bne.n	21852 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2180e:	1dfc      	adds	r4, r7, #7
   21810:	003b      	movs	r3, r7
   21812:	0019      	movs	r1, r3
   21814:	200b      	movs	r0, #11
   21816:	4b14      	ldr	r3, [pc, #80]	; (21868 <chip_sleep+0xd0>)
   21818:	4798      	blx	r3
   2181a:	0003      	movs	r3, r0
   2181c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2181e:	1dfb      	adds	r3, r7, #7
   21820:	781b      	ldrb	r3, [r3, #0]
   21822:	b25b      	sxtb	r3, r3
   21824:	2b00      	cmp	r3, #0
   21826:	d116      	bne.n	21856 <chip_sleep+0xbe>
	if(reg & NBIT0)
   21828:	683b      	ldr	r3, [r7, #0]
   2182a:	2201      	movs	r2, #1
   2182c:	4013      	ands	r3, r2
   2182e:	d013      	beq.n	21858 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   21830:	683b      	ldr	r3, [r7, #0]
   21832:	2201      	movs	r2, #1
   21834:	4393      	bics	r3, r2
   21836:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   21838:	683b      	ldr	r3, [r7, #0]
   2183a:	1dfc      	adds	r4, r7, #7
   2183c:	0019      	movs	r1, r3
   2183e:	200b      	movs	r0, #11
   21840:	4b0a      	ldr	r3, [pc, #40]	; (2186c <chip_sleep+0xd4>)
   21842:	4798      	blx	r3
   21844:	0003      	movs	r3, r0
   21846:	7023      	strb	r3, [r4, #0]
   21848:	e006      	b.n	21858 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2184a:	46c0      	nop			; (mov r8, r8)
   2184c:	e004      	b.n	21858 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2184e:	46c0      	nop			; (mov r8, r8)
   21850:	e002      	b.n	21858 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   21852:	46c0      	nop			; (mov r8, r8)
   21854:	e000      	b.n	21858 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   21856:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   21858:	1dfb      	adds	r3, r7, #7
   2185a:	781b      	ldrb	r3, [r3, #0]
   2185c:	b25b      	sxtb	r3, r3
}
   2185e:	0018      	movs	r0, r3
   21860:	46bd      	mov	sp, r7
   21862:	b003      	add	sp, #12
   21864:	bd90      	pop	{r4, r7, pc}
   21866:	46c0      	nop			; (mov r8, r8)
   21868:	00021da1 	.word	0x00021da1
   2186c:	00021dc5 	.word	0x00021dc5

00021870 <chip_wake>:
sint8 chip_wake(void)
{
   21870:	b590      	push	{r4, r7, lr}
   21872:	b085      	sub	sp, #20
   21874:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21876:	230f      	movs	r3, #15
   21878:	18fb      	adds	r3, r7, r3
   2187a:	2200      	movs	r2, #0
   2187c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2187e:	2300      	movs	r3, #0
   21880:	607b      	str	r3, [r7, #4]
   21882:	2300      	movs	r3, #0
   21884:	603b      	str	r3, [r7, #0]
   21886:	2300      	movs	r3, #0
   21888:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2188a:	230f      	movs	r3, #15
   2188c:	18fc      	adds	r4, r7, r3
   2188e:	1d3b      	adds	r3, r7, #4
   21890:	0019      	movs	r1, r3
   21892:	200b      	movs	r0, #11
   21894:	4b4e      	ldr	r3, [pc, #312]	; (219d0 <chip_wake+0x160>)
   21896:	4798      	blx	r3
   21898:	0003      	movs	r3, r0
   2189a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2189c:	230f      	movs	r3, #15
   2189e:	18fb      	adds	r3, r7, r3
   218a0:	781b      	ldrb	r3, [r3, #0]
   218a2:	b25b      	sxtb	r3, r3
   218a4:	2b00      	cmp	r3, #0
   218a6:	d000      	beq.n	218aa <chip_wake+0x3a>
   218a8:	e082      	b.n	219b0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   218aa:	687b      	ldr	r3, [r7, #4]
   218ac:	2201      	movs	r2, #1
   218ae:	4013      	ands	r3, r2
   218b0:	d111      	bne.n	218d6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   218b2:	687b      	ldr	r3, [r7, #4]
   218b4:	2201      	movs	r2, #1
   218b6:	4313      	orrs	r3, r2
   218b8:	220f      	movs	r2, #15
   218ba:	18bc      	adds	r4, r7, r2
   218bc:	0019      	movs	r1, r3
   218be:	200b      	movs	r0, #11
   218c0:	4b44      	ldr	r3, [pc, #272]	; (219d4 <chip_wake+0x164>)
   218c2:	4798      	blx	r3
   218c4:	0003      	movs	r3, r0
   218c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   218c8:	230f      	movs	r3, #15
   218ca:	18fb      	adds	r3, r7, r3
   218cc:	781b      	ldrb	r3, [r3, #0]
   218ce:	b25b      	sxtb	r3, r3
   218d0:	2b00      	cmp	r3, #0
   218d2:	d000      	beq.n	218d6 <chip_wake+0x66>
   218d4:	e06e      	b.n	219b4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   218d6:	230f      	movs	r3, #15
   218d8:	18fc      	adds	r4, r7, r3
   218da:	1d3b      	adds	r3, r7, #4
   218dc:	0019      	movs	r1, r3
   218de:	2001      	movs	r0, #1
   218e0:	4b3b      	ldr	r3, [pc, #236]	; (219d0 <chip_wake+0x160>)
   218e2:	4798      	blx	r3
   218e4:	0003      	movs	r3, r0
   218e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   218e8:	230f      	movs	r3, #15
   218ea:	18fb      	adds	r3, r7, r3
   218ec:	781b      	ldrb	r3, [r3, #0]
   218ee:	b25b      	sxtb	r3, r3
   218f0:	2b00      	cmp	r3, #0
   218f2:	d161      	bne.n	219b8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   218f4:	687b      	ldr	r3, [r7, #4]
   218f6:	2202      	movs	r2, #2
   218f8:	4013      	ands	r3, r2
   218fa:	d110      	bne.n	2191e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   218fc:	687b      	ldr	r3, [r7, #4]
   218fe:	2202      	movs	r2, #2
   21900:	4313      	orrs	r3, r2
   21902:	220f      	movs	r2, #15
   21904:	18bc      	adds	r4, r7, r2
   21906:	0019      	movs	r1, r3
   21908:	2001      	movs	r0, #1
   2190a:	4b32      	ldr	r3, [pc, #200]	; (219d4 <chip_wake+0x164>)
   2190c:	4798      	blx	r3
   2190e:	0003      	movs	r3, r0
   21910:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21912:	230f      	movs	r3, #15
   21914:	18fb      	adds	r3, r7, r3
   21916:	781b      	ldrb	r3, [r3, #0]
   21918:	b25b      	sxtb	r3, r3
   2191a:	2b00      	cmp	r3, #0
   2191c:	d14e      	bne.n	219bc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2191e:	230f      	movs	r3, #15
   21920:	18fc      	adds	r4, r7, r3
   21922:	003b      	movs	r3, r7
   21924:	0019      	movs	r1, r3
   21926:	200f      	movs	r0, #15
   21928:	4b29      	ldr	r3, [pc, #164]	; (219d0 <chip_wake+0x160>)
   2192a:	4798      	blx	r3
   2192c:	0003      	movs	r3, r0
   2192e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   21930:	230f      	movs	r3, #15
   21932:	18fb      	adds	r3, r7, r3
   21934:	781b      	ldrb	r3, [r3, #0]
   21936:	b25b      	sxtb	r3, r3
   21938:	2b00      	cmp	r3, #0
   2193a:	d014      	beq.n	21966 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2193c:	23a8      	movs	r3, #168	; 0xa8
   2193e:	005a      	lsls	r2, r3, #1
   21940:	4925      	ldr	r1, [pc, #148]	; (219d8 <chip_wake+0x168>)
   21942:	4b26      	ldr	r3, [pc, #152]	; (219dc <chip_wake+0x16c>)
   21944:	0018      	movs	r0, r3
   21946:	4b26      	ldr	r3, [pc, #152]	; (219e0 <chip_wake+0x170>)
   21948:	4798      	blx	r3
   2194a:	230f      	movs	r3, #15
   2194c:	18fb      	adds	r3, r7, r3
   2194e:	2100      	movs	r1, #0
   21950:	5659      	ldrsb	r1, [r3, r1]
   21952:	683a      	ldr	r2, [r7, #0]
   21954:	4b23      	ldr	r3, [pc, #140]	; (219e4 <chip_wake+0x174>)
   21956:	0018      	movs	r0, r3
   21958:	4b21      	ldr	r3, [pc, #132]	; (219e0 <chip_wake+0x170>)
   2195a:	4798      	blx	r3
   2195c:	4b22      	ldr	r3, [pc, #136]	; (219e8 <chip_wake+0x178>)
   2195e:	0018      	movs	r0, r3
   21960:	4b1f      	ldr	r3, [pc, #124]	; (219e0 <chip_wake+0x170>)
   21962:	4798      	blx	r3
			goto _WAKE_EXIT;
   21964:	e02b      	b.n	219be <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   21966:	683b      	ldr	r3, [r7, #0]
   21968:	2204      	movs	r2, #4
   2196a:	4013      	ands	r3, r2
   2196c:	d11c      	bne.n	219a8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2196e:	2002      	movs	r0, #2
   21970:	4b1e      	ldr	r3, [pc, #120]	; (219ec <chip_wake+0x17c>)
   21972:	4798      	blx	r3
		trials++;
   21974:	68bb      	ldr	r3, [r7, #8]
   21976:	3301      	adds	r3, #1
   21978:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2197a:	68bb      	ldr	r3, [r7, #8]
   2197c:	2b04      	cmp	r3, #4
   2197e:	d9ce      	bls.n	2191e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   21980:	23ad      	movs	r3, #173	; 0xad
   21982:	005a      	lsls	r2, r3, #1
   21984:	4914      	ldr	r1, [pc, #80]	; (219d8 <chip_wake+0x168>)
   21986:	4b15      	ldr	r3, [pc, #84]	; (219dc <chip_wake+0x16c>)
   21988:	0018      	movs	r0, r3
   2198a:	4b15      	ldr	r3, [pc, #84]	; (219e0 <chip_wake+0x170>)
   2198c:	4798      	blx	r3
   2198e:	4b18      	ldr	r3, [pc, #96]	; (219f0 <chip_wake+0x180>)
   21990:	0018      	movs	r0, r3
   21992:	4b13      	ldr	r3, [pc, #76]	; (219e0 <chip_wake+0x170>)
   21994:	4798      	blx	r3
   21996:	4b14      	ldr	r3, [pc, #80]	; (219e8 <chip_wake+0x178>)
   21998:	0018      	movs	r0, r3
   2199a:	4b11      	ldr	r3, [pc, #68]	; (219e0 <chip_wake+0x170>)
   2199c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2199e:	230f      	movs	r3, #15
   219a0:	18fb      	adds	r3, r7, r3
   219a2:	22fc      	movs	r2, #252	; 0xfc
   219a4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   219a6:	e00a      	b.n	219be <chip_wake+0x14e>
			break;
   219a8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   219aa:	4b12      	ldr	r3, [pc, #72]	; (219f4 <chip_wake+0x184>)
   219ac:	4798      	blx	r3
   219ae:	e006      	b.n	219be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   219b0:	46c0      	nop			; (mov r8, r8)
   219b2:	e004      	b.n	219be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   219b4:	46c0      	nop			; (mov r8, r8)
   219b6:	e002      	b.n	219be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   219b8:	46c0      	nop			; (mov r8, r8)
   219ba:	e000      	b.n	219be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   219bc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   219be:	230f      	movs	r3, #15
   219c0:	18fb      	adds	r3, r7, r3
   219c2:	781b      	ldrb	r3, [r3, #0]
   219c4:	b25b      	sxtb	r3, r3
}
   219c6:	0018      	movs	r0, r3
   219c8:	46bd      	mov	sp, r7
   219ca:	b005      	add	sp, #20
   219cc:	bd90      	pop	{r4, r7, pc}
   219ce:	46c0      	nop			; (mov r8, r8)
   219d0:	00021da1 	.word	0x00021da1
   219d4:	00021dc5 	.word	0x00021dc5
   219d8:	0003861c 	.word	0x0003861c
   219dc:	00038590 	.word	0x00038590
   219e0:	0001cf79 	.word	0x0001cf79
   219e4:	000385a4 	.word	0x000385a4
   219e8:	000385bc 	.word	0x000385bc
   219ec:	0001f431 	.word	0x0001f431
   219f0:	000385c0 	.word	0x000385c0
   219f4:	00021d61 	.word	0x00021d61

000219f8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   219f8:	b580      	push	{r7, lr}
   219fa:	b088      	sub	sp, #32
   219fc:	af00      	add	r7, sp, #0
   219fe:	0002      	movs	r2, r0
   21a00:	1dfb      	adds	r3, r7, #7
   21a02:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21a04:	2313      	movs	r3, #19
   21a06:	18fb      	adds	r3, r7, r3
   21a08:	2200      	movs	r2, #0
   21a0a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21a0c:	2300      	movs	r3, #0
   21a0e:	61fb      	str	r3, [r7, #28]
   21a10:	2300      	movs	r3, #0
   21a12:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   21a14:	2300      	movs	r3, #0
   21a16:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   21a18:	4b4a      	ldr	r3, [pc, #296]	; (21b44 <wait_for_bootrom+0x14c>)
   21a1a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   21a1c:	2300      	movs	r3, #0
   21a1e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21a20:	4b49      	ldr	r3, [pc, #292]	; (21b48 <wait_for_bootrom+0x150>)
   21a22:	0018      	movs	r0, r3
   21a24:	4b49      	ldr	r3, [pc, #292]	; (21b4c <wait_for_bootrom+0x154>)
   21a26:	4798      	blx	r3
   21a28:	0003      	movs	r3, r0
   21a2a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   21a2c:	69fb      	ldr	r3, [r7, #28]
   21a2e:	2b00      	cmp	r3, #0
   21a30:	db03      	blt.n	21a3a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   21a32:	2001      	movs	r0, #1
   21a34:	4b46      	ldr	r3, [pc, #280]	; (21b50 <wait_for_bootrom+0x158>)
   21a36:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21a38:	e7f2      	b.n	21a20 <wait_for_bootrom+0x28>
			break;
   21a3a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   21a3c:	4b45      	ldr	r3, [pc, #276]	; (21b54 <wait_for_bootrom+0x15c>)
   21a3e:	0018      	movs	r0, r3
   21a40:	4b42      	ldr	r3, [pc, #264]	; (21b4c <wait_for_bootrom+0x154>)
   21a42:	4798      	blx	r3
   21a44:	0003      	movs	r3, r0
   21a46:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   21a48:	69fb      	ldr	r3, [r7, #28]
   21a4a:	2201      	movs	r2, #1
   21a4c:	4013      	ands	r3, r2
   21a4e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   21a50:	69fb      	ldr	r3, [r7, #28]
   21a52:	2b00      	cmp	r3, #0
   21a54:	d112      	bne.n	21a7c <wait_for_bootrom+0x84>
	{
		reg = 0;
   21a56:	2300      	movs	r3, #0
   21a58:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   21a5a:	e00b      	b.n	21a74 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   21a5c:	2001      	movs	r0, #1
   21a5e:	4b3c      	ldr	r3, [pc, #240]	; (21b50 <wait_for_bootrom+0x158>)
   21a60:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   21a62:	4b3d      	ldr	r3, [pc, #244]	; (21b58 <wait_for_bootrom+0x160>)
   21a64:	0018      	movs	r0, r3
   21a66:	4b39      	ldr	r3, [pc, #228]	; (21b4c <wait_for_bootrom+0x154>)
   21a68:	4798      	blx	r3
   21a6a:	0003      	movs	r3, r0
   21a6c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   21a6e:	69bb      	ldr	r3, [r7, #24]
   21a70:	3301      	adds	r3, #1
   21a72:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   21a74:	69fb      	ldr	r3, [r7, #28]
   21a76:	4a39      	ldr	r2, [pc, #228]	; (21b5c <wait_for_bootrom+0x164>)
   21a78:	4293      	cmp	r3, r2
   21a7a:	d1ef      	bne.n	21a5c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   21a7c:	1dfb      	adds	r3, r7, #7
   21a7e:	781b      	ldrb	r3, [r3, #0]
   21a80:	2b02      	cmp	r3, #2
   21a82:	d10d      	bne.n	21aa0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21a84:	4a36      	ldr	r2, [pc, #216]	; (21b60 <wait_for_bootrom+0x168>)
   21a86:	4b37      	ldr	r3, [pc, #220]	; (21b64 <wait_for_bootrom+0x16c>)
   21a88:	0011      	movs	r1, r2
   21a8a:	0018      	movs	r0, r3
   21a8c:	4b36      	ldr	r3, [pc, #216]	; (21b68 <wait_for_bootrom+0x170>)
   21a8e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   21a90:	2380      	movs	r3, #128	; 0x80
   21a92:	035b      	lsls	r3, r3, #13
   21a94:	4a35      	ldr	r2, [pc, #212]	; (21b6c <wait_for_bootrom+0x174>)
   21a96:	0019      	movs	r1, r3
   21a98:	0010      	movs	r0, r2
   21a9a:	4b33      	ldr	r3, [pc, #204]	; (21b68 <wait_for_bootrom+0x170>)
   21a9c:	4798      	blx	r3
   21a9e:	e022      	b.n	21ae6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   21aa0:	1dfb      	adds	r3, r7, #7
   21aa2:	781b      	ldrb	r3, [r3, #0]
   21aa4:	2b03      	cmp	r3, #3
   21aa6:	d10b      	bne.n	21ac0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21aa8:	4a2d      	ldr	r2, [pc, #180]	; (21b60 <wait_for_bootrom+0x168>)
   21aaa:	4b2e      	ldr	r3, [pc, #184]	; (21b64 <wait_for_bootrom+0x16c>)
   21aac:	0011      	movs	r1, r2
   21aae:	0018      	movs	r0, r3
   21ab0:	4b2d      	ldr	r3, [pc, #180]	; (21b68 <wait_for_bootrom+0x170>)
   21ab2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   21ab4:	4b2d      	ldr	r3, [pc, #180]	; (21b6c <wait_for_bootrom+0x174>)
   21ab6:	2100      	movs	r1, #0
   21ab8:	0018      	movs	r0, r3
   21aba:	4b2b      	ldr	r3, [pc, #172]	; (21b68 <wait_for_bootrom+0x170>)
   21abc:	4798      	blx	r3
   21abe:	e012      	b.n	21ae6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   21ac0:	1dfb      	adds	r3, r7, #7
   21ac2:	781b      	ldrb	r3, [r3, #0]
   21ac4:	2b04      	cmp	r3, #4
   21ac6:	d108      	bne.n	21ada <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   21ac8:	2380      	movs	r3, #128	; 0x80
   21aca:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21acc:	68fb      	ldr	r3, [r7, #12]
   21ace:	4a27      	ldr	r2, [pc, #156]	; (21b6c <wait_for_bootrom+0x174>)
   21ad0:	0019      	movs	r1, r3
   21ad2:	0010      	movs	r0, r2
   21ad4:	4b24      	ldr	r3, [pc, #144]	; (21b68 <wait_for_bootrom+0x170>)
   21ad6:	4798      	blx	r3
   21ad8:	e005      	b.n	21ae6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21ada:	68fb      	ldr	r3, [r7, #12]
   21adc:	4a23      	ldr	r2, [pc, #140]	; (21b6c <wait_for_bootrom+0x174>)
   21ade:	0019      	movs	r1, r3
   21ae0:	0010      	movs	r0, r2
   21ae2:	4b21      	ldr	r3, [pc, #132]	; (21b68 <wait_for_bootrom+0x170>)
   21ae4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   21ae6:	4b22      	ldr	r3, [pc, #136]	; (21b70 <wait_for_bootrom+0x178>)
   21ae8:	4798      	blx	r3
   21aea:	0003      	movs	r3, r0
   21aec:	051b      	lsls	r3, r3, #20
   21aee:	0d1b      	lsrs	r3, r3, #20
   21af0:	4a20      	ldr	r2, [pc, #128]	; (21b74 <wait_for_bootrom+0x17c>)
   21af2:	4293      	cmp	r3, r2
   21af4:	d906      	bls.n	21b04 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   21af6:	697b      	ldr	r3, [r7, #20]
   21af8:	2202      	movs	r2, #2
   21afa:	4313      	orrs	r3, r2
   21afc:	0018      	movs	r0, r3
   21afe:	4b1e      	ldr	r3, [pc, #120]	; (21b78 <wait_for_bootrom+0x180>)
   21b00:	4798      	blx	r3
   21b02:	e003      	b.n	21b0c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21b04:	697b      	ldr	r3, [r7, #20]
   21b06:	0018      	movs	r0, r3
   21b08:	4b1b      	ldr	r3, [pc, #108]	; (21b78 <wait_for_bootrom+0x180>)
   21b0a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   21b0c:	4b1b      	ldr	r3, [pc, #108]	; (21b7c <wait_for_bootrom+0x184>)
   21b0e:	0018      	movs	r0, r3
   21b10:	4b1b      	ldr	r3, [pc, #108]	; (21b80 <wait_for_bootrom+0x188>)
   21b12:	4798      	blx	r3
   21b14:	68fa      	ldr	r2, [r7, #12]
   21b16:	4b1b      	ldr	r3, [pc, #108]	; (21b84 <wait_for_bootrom+0x18c>)
   21b18:	0011      	movs	r1, r2
   21b1a:	0018      	movs	r0, r3
   21b1c:	4b18      	ldr	r3, [pc, #96]	; (21b80 <wait_for_bootrom+0x188>)
   21b1e:	4798      	blx	r3
   21b20:	4b19      	ldr	r3, [pc, #100]	; (21b88 <wait_for_bootrom+0x190>)
   21b22:	0018      	movs	r0, r3
   21b24:	4b16      	ldr	r3, [pc, #88]	; (21b80 <wait_for_bootrom+0x188>)
   21b26:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   21b28:	4a18      	ldr	r2, [pc, #96]	; (21b8c <wait_for_bootrom+0x194>)
   21b2a:	4b0b      	ldr	r3, [pc, #44]	; (21b58 <wait_for_bootrom+0x160>)
   21b2c:	0011      	movs	r1, r2
   21b2e:	0018      	movs	r0, r3
   21b30:	4b0d      	ldr	r3, [pc, #52]	; (21b68 <wait_for_bootrom+0x170>)
   21b32:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21b34:	2313      	movs	r3, #19
   21b36:	18fb      	adds	r3, r7, r3
   21b38:	781b      	ldrb	r3, [r3, #0]
   21b3a:	b25b      	sxtb	r3, r3
}
   21b3c:	0018      	movs	r0, r3
   21b3e:	46bd      	mov	sp, r7
   21b40:	b008      	add	sp, #32
   21b42:	bd80      	pop	{r7, pc}
   21b44:	13301354 	.word	0x13301354
   21b48:	00001014 	.word	0x00001014
   21b4c:	00021d81 	.word	0x00021d81
   21b50:	0001f431 	.word	0x0001f431
   21b54:	000207bc 	.word	0x000207bc
   21b58:	000c000c 	.word	0x000c000c
   21b5c:	10add09e 	.word	0x10add09e
   21b60:	3c1cd57d 	.word	0x3c1cd57d
   21b64:	000207ac 	.word	0x000207ac
   21b68:	00021dc5 	.word	0x00021dc5
   21b6c:	0000108c 	.word	0x0000108c
   21b70:	000216a1 	.word	0x000216a1
   21b74:	0000039f 	.word	0x0000039f
   21b78:	00021571 	.word	0x00021571
   21b7c:	000385dc 	.word	0x000385dc
   21b80:	0001cf79 	.word	0x0001cf79
   21b84:	000385e8 	.word	0x000385e8
   21b88:	000385bc 	.word	0x000385bc
   21b8c:	ef522f61 	.word	0xef522f61

00021b90 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   21b90:	b580      	push	{r7, lr}
   21b92:	b088      	sub	sp, #32
   21b94:	af00      	add	r7, sp, #0
   21b96:	0002      	movs	r2, r0
   21b98:	1dfb      	adds	r3, r7, #7
   21b9a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21b9c:	231f      	movs	r3, #31
   21b9e:	18fb      	adds	r3, r7, r3
   21ba0:	2200      	movs	r2, #0
   21ba2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21ba4:	2300      	movs	r3, #0
   21ba6:	61bb      	str	r3, [r7, #24]
   21ba8:	2300      	movs	r3, #0
   21baa:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   21bac:	2301      	movs	r3, #1
   21bae:	425b      	negs	r3, r3
   21bb0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   21bb2:	4b1d      	ldr	r3, [pc, #116]	; (21c28 <wait_for_firmware_start+0x98>)
   21bb4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   21bb6:	4b1d      	ldr	r3, [pc, #116]	; (21c2c <wait_for_firmware_start+0x9c>)
   21bb8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   21bba:	1dfb      	adds	r3, r7, #7
   21bbc:	781b      	ldrb	r3, [r3, #0]
   21bbe:	2b02      	cmp	r3, #2
   21bc0:	d003      	beq.n	21bca <wait_for_firmware_start+0x3a>
   21bc2:	1dfb      	adds	r3, r7, #7
   21bc4:	781b      	ldrb	r3, [r3, #0]
   21bc6:	2b03      	cmp	r3, #3
   21bc8:	d119      	bne.n	21bfe <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   21bca:	4b19      	ldr	r3, [pc, #100]	; (21c30 <wait_for_firmware_start+0xa0>)
   21bcc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   21bce:	4b19      	ldr	r3, [pc, #100]	; (21c34 <wait_for_firmware_start+0xa4>)
   21bd0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   21bd2:	e014      	b.n	21bfe <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   21bd4:	2002      	movs	r0, #2
   21bd6:	4b18      	ldr	r3, [pc, #96]	; (21c38 <wait_for_firmware_start+0xa8>)
   21bd8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   21bda:	68fb      	ldr	r3, [r7, #12]
   21bdc:	0018      	movs	r0, r3
   21bde:	4b17      	ldr	r3, [pc, #92]	; (21c3c <wait_for_firmware_start+0xac>)
   21be0:	4798      	blx	r3
   21be2:	0003      	movs	r3, r0
   21be4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   21be6:	697b      	ldr	r3, [r7, #20]
   21be8:	3301      	adds	r3, #1
   21bea:	617b      	str	r3, [r7, #20]
   21bec:	697a      	ldr	r2, [r7, #20]
   21bee:	693b      	ldr	r3, [r7, #16]
   21bf0:	429a      	cmp	r2, r3
   21bf2:	d304      	bcc.n	21bfe <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21bf4:	231f      	movs	r3, #31
   21bf6:	18fb      	adds	r3, r7, r3
   21bf8:	22fb      	movs	r2, #251	; 0xfb
   21bfa:	701a      	strb	r2, [r3, #0]
			goto ERR;
   21bfc:	e00c      	b.n	21c18 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   21bfe:	68ba      	ldr	r2, [r7, #8]
   21c00:	69bb      	ldr	r3, [r7, #24]
   21c02:	429a      	cmp	r2, r3
   21c04:	d1e6      	bne.n	21bd4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   21c06:	68bb      	ldr	r3, [r7, #8]
   21c08:	4a08      	ldr	r2, [pc, #32]	; (21c2c <wait_for_firmware_start+0x9c>)
   21c0a:	4293      	cmp	r3, r2
   21c0c:	d104      	bne.n	21c18 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   21c0e:	4b06      	ldr	r3, [pc, #24]	; (21c28 <wait_for_firmware_start+0x98>)
   21c10:	2100      	movs	r1, #0
   21c12:	0018      	movs	r0, r3
   21c14:	4b0a      	ldr	r3, [pc, #40]	; (21c40 <wait_for_firmware_start+0xb0>)
   21c16:	4798      	blx	r3
	}
ERR:
	return ret;
   21c18:	231f      	movs	r3, #31
   21c1a:	18fb      	adds	r3, r7, r3
   21c1c:	781b      	ldrb	r3, [r3, #0]
   21c1e:	b25b      	sxtb	r3, r3
}
   21c20:	0018      	movs	r0, r3
   21c22:	46bd      	mov	sp, r7
   21c24:	b008      	add	sp, #32
   21c26:	bd80      	pop	{r7, pc}
   21c28:	0000108c 	.word	0x0000108c
   21c2c:	02532636 	.word	0x02532636
   21c30:	000207ac 	.word	0x000207ac
   21c34:	d75dc1c3 	.word	0xd75dc1c3
   21c38:	0001f431 	.word	0x0001f431
   21c3c:	00021d81 	.word	0x00021d81
   21c40:	00021dc5 	.word	0x00021dc5

00021c44 <chip_deinit>:

sint8 chip_deinit(void)
{
   21c44:	b590      	push	{r4, r7, lr}
   21c46:	b083      	sub	sp, #12
   21c48:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21c4a:	2300      	movs	r3, #0
   21c4c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   21c4e:	1dfc      	adds	r4, r7, #7
   21c50:	003a      	movs	r2, r7
   21c52:	23a0      	movs	r3, #160	; 0xa0
   21c54:	015b      	lsls	r3, r3, #5
   21c56:	0011      	movs	r1, r2
   21c58:	0018      	movs	r0, r3
   21c5a:	4b20      	ldr	r3, [pc, #128]	; (21cdc <chip_deinit+0x98>)
   21c5c:	4798      	blx	r3
   21c5e:	0003      	movs	r3, r0
   21c60:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21c62:	1dfb      	adds	r3, r7, #7
   21c64:	781b      	ldrb	r3, [r3, #0]
   21c66:	b25b      	sxtb	r3, r3
   21c68:	2b00      	cmp	r3, #0
   21c6a:	d00e      	beq.n	21c8a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   21c6c:	4a1c      	ldr	r2, [pc, #112]	; (21ce0 <chip_deinit+0x9c>)
   21c6e:	491d      	ldr	r1, [pc, #116]	; (21ce4 <chip_deinit+0xa0>)
   21c70:	4b1d      	ldr	r3, [pc, #116]	; (21ce8 <chip_deinit+0xa4>)
   21c72:	0018      	movs	r0, r3
   21c74:	4b1d      	ldr	r3, [pc, #116]	; (21cec <chip_deinit+0xa8>)
   21c76:	4798      	blx	r3
   21c78:	4b1d      	ldr	r3, [pc, #116]	; (21cf0 <chip_deinit+0xac>)
   21c7a:	0018      	movs	r0, r3
   21c7c:	4b1b      	ldr	r3, [pc, #108]	; (21cec <chip_deinit+0xa8>)
   21c7e:	4798      	blx	r3
   21c80:	4b1c      	ldr	r3, [pc, #112]	; (21cf4 <chip_deinit+0xb0>)
   21c82:	0018      	movs	r0, r3
   21c84:	4b19      	ldr	r3, [pc, #100]	; (21cec <chip_deinit+0xa8>)
   21c86:	4798      	blx	r3
		goto ERR1;
   21c88:	e021      	b.n	21cce <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   21c8a:	683b      	ldr	r3, [r7, #0]
   21c8c:	4a1a      	ldr	r2, [pc, #104]	; (21cf8 <chip_deinit+0xb4>)
   21c8e:	4013      	ands	r3, r2
   21c90:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   21c92:	683a      	ldr	r2, [r7, #0]
   21c94:	1dfc      	adds	r4, r7, #7
   21c96:	23a0      	movs	r3, #160	; 0xa0
   21c98:	015b      	lsls	r3, r3, #5
   21c9a:	0011      	movs	r1, r2
   21c9c:	0018      	movs	r0, r3
   21c9e:	4b17      	ldr	r3, [pc, #92]	; (21cfc <chip_deinit+0xb8>)
   21ca0:	4798      	blx	r3
   21ca2:	0003      	movs	r3, r0
   21ca4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21ca6:	1dfb      	adds	r3, r7, #7
   21ca8:	781b      	ldrb	r3, [r3, #0]
   21caa:	b25b      	sxtb	r3, r3
   21cac:	2b00      	cmp	r3, #0
   21cae:	d00e      	beq.n	21cce <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   21cb0:	4a13      	ldr	r2, [pc, #76]	; (21d00 <chip_deinit+0xbc>)
   21cb2:	490c      	ldr	r1, [pc, #48]	; (21ce4 <chip_deinit+0xa0>)
   21cb4:	4b0c      	ldr	r3, [pc, #48]	; (21ce8 <chip_deinit+0xa4>)
   21cb6:	0018      	movs	r0, r3
   21cb8:	4b0c      	ldr	r3, [pc, #48]	; (21cec <chip_deinit+0xa8>)
   21cba:	4798      	blx	r3
   21cbc:	4b0c      	ldr	r3, [pc, #48]	; (21cf0 <chip_deinit+0xac>)
   21cbe:	0018      	movs	r0, r3
   21cc0:	4b0a      	ldr	r3, [pc, #40]	; (21cec <chip_deinit+0xa8>)
   21cc2:	4798      	blx	r3
   21cc4:	4b0b      	ldr	r3, [pc, #44]	; (21cf4 <chip_deinit+0xb0>)
   21cc6:	0018      	movs	r0, r3
   21cc8:	4b08      	ldr	r3, [pc, #32]	; (21cec <chip_deinit+0xa8>)
   21cca:	4798      	blx	r3
		goto ERR1;
   21ccc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21cce:	1dfb      	adds	r3, r7, #7
   21cd0:	781b      	ldrb	r3, [r3, #0]
   21cd2:	b25b      	sxtb	r3, r3
}
   21cd4:	0018      	movs	r0, r3
   21cd6:	46bd      	mov	sp, r7
   21cd8:	b003      	add	sp, #12
   21cda:	bd90      	pop	{r4, r7, pc}
   21cdc:	00021da1 	.word	0x00021da1
   21ce0:	00000201 	.word	0x00000201
   21ce4:	00038628 	.word	0x00038628
   21ce8:	00038590 	.word	0x00038590
   21cec:	0001cf79 	.word	0x0001cf79
   21cf0:	00038600 	.word	0x00038600
   21cf4:	000385bc 	.word	0x000385bc
   21cf8:	fffffbff 	.word	0xfffffbff
   21cfc:	00021dc5 	.word	0x00021dc5
   21d00:	00000207 	.word	0x00000207

00021d04 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   21d04:	b590      	push	{r4, r7, lr}
   21d06:	b085      	sub	sp, #20
   21d08:	af00      	add	r7, sp, #0
   21d0a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21d0c:	230f      	movs	r3, #15
   21d0e:	18fb      	adds	r3, r7, r3
   21d10:	2200      	movs	r2, #0
   21d12:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   21d14:	230f      	movs	r3, #15
   21d16:	18fc      	adds	r4, r7, r3
   21d18:	687b      	ldr	r3, [r7, #4]
   21d1a:	0018      	movs	r0, r3
   21d1c:	4b05      	ldr	r3, [pc, #20]	; (21d34 <nm_bus_iface_init+0x30>)
   21d1e:	4798      	blx	r3
   21d20:	0003      	movs	r3, r0
   21d22:	7023      	strb	r3, [r4, #0]
	return ret;
   21d24:	230f      	movs	r3, #15
   21d26:	18fb      	adds	r3, r7, r3
   21d28:	781b      	ldrb	r3, [r3, #0]
   21d2a:	b25b      	sxtb	r3, r3
}
   21d2c:	0018      	movs	r0, r3
   21d2e:	46bd      	mov	sp, r7
   21d30:	b005      	add	sp, #20
   21d32:	bd90      	pop	{r4, r7, pc}
   21d34:	0001faed 	.word	0x0001faed

00021d38 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   21d38:	b590      	push	{r4, r7, lr}
   21d3a:	b083      	sub	sp, #12
   21d3c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21d3e:	1dfb      	adds	r3, r7, #7
   21d40:	2200      	movs	r2, #0
   21d42:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   21d44:	1dfc      	adds	r4, r7, #7
   21d46:	4b05      	ldr	r3, [pc, #20]	; (21d5c <nm_bus_iface_deinit+0x24>)
   21d48:	4798      	blx	r3
   21d4a:	0003      	movs	r3, r0
   21d4c:	7023      	strb	r3, [r4, #0]

	return ret;
   21d4e:	1dfb      	adds	r3, r7, #7
   21d50:	781b      	ldrb	r3, [r3, #0]
   21d52:	b25b      	sxtb	r3, r3
}
   21d54:	0018      	movs	r0, r3
   21d56:	46bd      	mov	sp, r7
   21d58:	b003      	add	sp, #12
   21d5a:	bd90      	pop	{r4, r7, pc}
   21d5c:	0001fc65 	.word	0x0001fc65

00021d60 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   21d60:	b580      	push	{r7, lr}
   21d62:	b082      	sub	sp, #8
   21d64:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21d66:	1dfb      	adds	r3, r7, #7
   21d68:	2200      	movs	r2, #0
   21d6a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   21d6c:	4b03      	ldr	r3, [pc, #12]	; (21d7c <nm_bus_reset+0x1c>)
   21d6e:	4798      	blx	r3
   21d70:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   21d72:	0018      	movs	r0, r3
   21d74:	46bd      	mov	sp, r7
   21d76:	b002      	add	sp, #8
   21d78:	bd80      	pop	{r7, pc}
   21d7a:	46c0      	nop			; (mov r8, r8)
   21d7c:	00023b8d 	.word	0x00023b8d

00021d80 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   21d80:	b580      	push	{r7, lr}
   21d82:	b082      	sub	sp, #8
   21d84:	af00      	add	r7, sp, #0
   21d86:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   21d88:	687b      	ldr	r3, [r7, #4]
   21d8a:	0018      	movs	r0, r3
   21d8c:	4b03      	ldr	r3, [pc, #12]	; (21d9c <nm_read_reg+0x1c>)
   21d8e:	4798      	blx	r3
   21d90:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   21d92:	0018      	movs	r0, r3
   21d94:	46bd      	mov	sp, r7
   21d96:	b002      	add	sp, #8
   21d98:	bd80      	pop	{r7, pc}
   21d9a:	46c0      	nop			; (mov r8, r8)
   21d9c:	00023d21 	.word	0x00023d21

00021da0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   21da0:	b580      	push	{r7, lr}
   21da2:	b082      	sub	sp, #8
   21da4:	af00      	add	r7, sp, #0
   21da6:	6078      	str	r0, [r7, #4]
   21da8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   21daa:	683a      	ldr	r2, [r7, #0]
   21dac:	687b      	ldr	r3, [r7, #4]
   21dae:	0011      	movs	r1, r2
   21db0:	0018      	movs	r0, r3
   21db2:	4b03      	ldr	r3, [pc, #12]	; (21dc0 <nm_read_reg_with_ret+0x20>)
   21db4:	4798      	blx	r3
   21db6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   21db8:	0018      	movs	r0, r3
   21dba:	46bd      	mov	sp, r7
   21dbc:	b002      	add	sp, #8
   21dbe:	bd80      	pop	{r7, pc}
   21dc0:	00023d45 	.word	0x00023d45

00021dc4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   21dc4:	b580      	push	{r7, lr}
   21dc6:	b082      	sub	sp, #8
   21dc8:	af00      	add	r7, sp, #0
   21dca:	6078      	str	r0, [r7, #4]
   21dcc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   21dce:	683a      	ldr	r2, [r7, #0]
   21dd0:	687b      	ldr	r3, [r7, #4]
   21dd2:	0011      	movs	r1, r2
   21dd4:	0018      	movs	r0, r3
   21dd6:	4b03      	ldr	r3, [pc, #12]	; (21de4 <nm_write_reg+0x20>)
   21dd8:	4798      	blx	r3
   21dda:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   21ddc:	0018      	movs	r0, r3
   21dde:	46bd      	mov	sp, r7
   21de0:	b002      	add	sp, #8
   21de2:	bd80      	pop	{r7, pc}
   21de4:	00023d95 	.word	0x00023d95

00021de8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21de8:	b580      	push	{r7, lr}
   21dea:	b084      	sub	sp, #16
   21dec:	af00      	add	r7, sp, #0
   21dee:	60f8      	str	r0, [r7, #12]
   21df0:	60b9      	str	r1, [r7, #8]
   21df2:	1dbb      	adds	r3, r7, #6
   21df4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   21df6:	1dbb      	adds	r3, r7, #6
   21df8:	881a      	ldrh	r2, [r3, #0]
   21dfa:	68b9      	ldr	r1, [r7, #8]
   21dfc:	68fb      	ldr	r3, [r7, #12]
   21dfe:	0018      	movs	r0, r3
   21e00:	4b03      	ldr	r3, [pc, #12]	; (21e10 <p_nm_read_block+0x28>)
   21e02:	4798      	blx	r3
   21e04:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21e06:	0018      	movs	r0, r3
   21e08:	46bd      	mov	sp, r7
   21e0a:	b004      	add	sp, #16
   21e0c:	bd80      	pop	{r7, pc}
   21e0e:	46c0      	nop			; (mov r8, r8)
   21e10:	00023de5 	.word	0x00023de5

00021e14 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21e14:	b580      	push	{r7, lr}
   21e16:	b086      	sub	sp, #24
   21e18:	af00      	add	r7, sp, #0
   21e1a:	60f8      	str	r0, [r7, #12]
   21e1c:	60b9      	str	r1, [r7, #8]
   21e1e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21e20:	4b2d      	ldr	r3, [pc, #180]	; (21ed8 <nm_read_block+0xc4>)
   21e22:	881a      	ldrh	r2, [r3, #0]
   21e24:	2310      	movs	r3, #16
   21e26:	18fb      	adds	r3, r7, r3
   21e28:	3a08      	subs	r2, #8
   21e2a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21e2c:	2300      	movs	r3, #0
   21e2e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21e30:	2313      	movs	r3, #19
   21e32:	18fb      	adds	r3, r7, r3
   21e34:	2200      	movs	r2, #0
   21e36:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21e38:	2310      	movs	r3, #16
   21e3a:	18fb      	adds	r3, r7, r3
   21e3c:	881a      	ldrh	r2, [r3, #0]
   21e3e:	687b      	ldr	r3, [r7, #4]
   21e40:	429a      	cmp	r2, r3
   21e42:	d313      	bcc.n	21e6c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21e44:	68ba      	ldr	r2, [r7, #8]
   21e46:	697b      	ldr	r3, [r7, #20]
   21e48:	18d1      	adds	r1, r2, r3
   21e4a:	687b      	ldr	r3, [r7, #4]
   21e4c:	b29a      	uxth	r2, r3
   21e4e:	68fb      	ldr	r3, [r7, #12]
   21e50:	0018      	movs	r0, r3
   21e52:	4b22      	ldr	r3, [pc, #136]	; (21edc <nm_read_block+0xc8>)
   21e54:	4798      	blx	r3
   21e56:	0003      	movs	r3, r0
   21e58:	b2da      	uxtb	r2, r3
   21e5a:	2313      	movs	r3, #19
   21e5c:	18fb      	adds	r3, r7, r3
   21e5e:	781b      	ldrb	r3, [r3, #0]
   21e60:	18d3      	adds	r3, r2, r3
   21e62:	b2da      	uxtb	r2, r3
   21e64:	2313      	movs	r3, #19
   21e66:	18fb      	adds	r3, r7, r3
   21e68:	701a      	strb	r2, [r3, #0]
			break;
   21e6a:	e02d      	b.n	21ec8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21e6c:	68ba      	ldr	r2, [r7, #8]
   21e6e:	697b      	ldr	r3, [r7, #20]
   21e70:	18d1      	adds	r1, r2, r3
   21e72:	2310      	movs	r3, #16
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	881a      	ldrh	r2, [r3, #0]
   21e78:	68fb      	ldr	r3, [r7, #12]
   21e7a:	0018      	movs	r0, r3
   21e7c:	4b17      	ldr	r3, [pc, #92]	; (21edc <nm_read_block+0xc8>)
   21e7e:	4798      	blx	r3
   21e80:	0003      	movs	r3, r0
   21e82:	b2da      	uxtb	r2, r3
   21e84:	2313      	movs	r3, #19
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	781b      	ldrb	r3, [r3, #0]
   21e8a:	18d3      	adds	r3, r2, r3
   21e8c:	b2da      	uxtb	r2, r3
   21e8e:	2313      	movs	r3, #19
   21e90:	18fb      	adds	r3, r7, r3
   21e92:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   21e94:	2313      	movs	r3, #19
   21e96:	18fb      	adds	r3, r7, r3
   21e98:	781b      	ldrb	r3, [r3, #0]
   21e9a:	b25b      	sxtb	r3, r3
   21e9c:	2b00      	cmp	r3, #0
   21e9e:	d112      	bne.n	21ec6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21ea0:	2310      	movs	r3, #16
   21ea2:	18fb      	adds	r3, r7, r3
   21ea4:	881b      	ldrh	r3, [r3, #0]
   21ea6:	687a      	ldr	r2, [r7, #4]
   21ea8:	1ad3      	subs	r3, r2, r3
   21eaa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21eac:	2310      	movs	r3, #16
   21eae:	18fb      	adds	r3, r7, r3
   21eb0:	881b      	ldrh	r3, [r3, #0]
   21eb2:	697a      	ldr	r2, [r7, #20]
   21eb4:	18d3      	adds	r3, r2, r3
   21eb6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21eb8:	2310      	movs	r3, #16
   21eba:	18fb      	adds	r3, r7, r3
   21ebc:	881b      	ldrh	r3, [r3, #0]
   21ebe:	68fa      	ldr	r2, [r7, #12]
   21ec0:	18d3      	adds	r3, r2, r3
   21ec2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21ec4:	e7b8      	b.n	21e38 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21ec6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21ec8:	2313      	movs	r3, #19
   21eca:	18fb      	adds	r3, r7, r3
   21ecc:	781b      	ldrb	r3, [r3, #0]
   21ece:	b25b      	sxtb	r3, r3
}
   21ed0:	0018      	movs	r0, r3
   21ed2:	46bd      	mov	sp, r7
   21ed4:	b006      	add	sp, #24
   21ed6:	bd80      	pop	{r7, pc}
   21ed8:	20000114 	.word	0x20000114
   21edc:	00021de9 	.word	0x00021de9

00021ee0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21ee0:	b580      	push	{r7, lr}
   21ee2:	b084      	sub	sp, #16
   21ee4:	af00      	add	r7, sp, #0
   21ee6:	60f8      	str	r0, [r7, #12]
   21ee8:	60b9      	str	r1, [r7, #8]
   21eea:	1dbb      	adds	r3, r7, #6
   21eec:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   21eee:	1dbb      	adds	r3, r7, #6
   21ef0:	881a      	ldrh	r2, [r3, #0]
   21ef2:	68b9      	ldr	r1, [r7, #8]
   21ef4:	68fb      	ldr	r3, [r7, #12]
   21ef6:	0018      	movs	r0, r3
   21ef8:	4b03      	ldr	r3, [pc, #12]	; (21f08 <p_nm_write_block+0x28>)
   21efa:	4798      	blx	r3
   21efc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21efe:	0018      	movs	r0, r3
   21f00:	46bd      	mov	sp, r7
   21f02:	b004      	add	sp, #16
   21f04:	bd80      	pop	{r7, pc}
   21f06:	46c0      	nop			; (mov r8, r8)
   21f08:	00023e3d 	.word	0x00023e3d

00021f0c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21f0c:	b580      	push	{r7, lr}
   21f0e:	b086      	sub	sp, #24
   21f10:	af00      	add	r7, sp, #0
   21f12:	60f8      	str	r0, [r7, #12]
   21f14:	60b9      	str	r1, [r7, #8]
   21f16:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21f18:	4b2d      	ldr	r3, [pc, #180]	; (21fd0 <nm_write_block+0xc4>)
   21f1a:	881a      	ldrh	r2, [r3, #0]
   21f1c:	2310      	movs	r3, #16
   21f1e:	18fb      	adds	r3, r7, r3
   21f20:	3a08      	subs	r2, #8
   21f22:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21f24:	2300      	movs	r3, #0
   21f26:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21f28:	2313      	movs	r3, #19
   21f2a:	18fb      	adds	r3, r7, r3
   21f2c:	2200      	movs	r2, #0
   21f2e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21f30:	2310      	movs	r3, #16
   21f32:	18fb      	adds	r3, r7, r3
   21f34:	881a      	ldrh	r2, [r3, #0]
   21f36:	687b      	ldr	r3, [r7, #4]
   21f38:	429a      	cmp	r2, r3
   21f3a:	d313      	bcc.n	21f64 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   21f3c:	68ba      	ldr	r2, [r7, #8]
   21f3e:	697b      	ldr	r3, [r7, #20]
   21f40:	18d1      	adds	r1, r2, r3
   21f42:	687b      	ldr	r3, [r7, #4]
   21f44:	b29a      	uxth	r2, r3
   21f46:	68fb      	ldr	r3, [r7, #12]
   21f48:	0018      	movs	r0, r3
   21f4a:	4b22      	ldr	r3, [pc, #136]	; (21fd4 <nm_write_block+0xc8>)
   21f4c:	4798      	blx	r3
   21f4e:	0003      	movs	r3, r0
   21f50:	b2da      	uxtb	r2, r3
   21f52:	2313      	movs	r3, #19
   21f54:	18fb      	adds	r3, r7, r3
   21f56:	781b      	ldrb	r3, [r3, #0]
   21f58:	18d3      	adds	r3, r2, r3
   21f5a:	b2da      	uxtb	r2, r3
   21f5c:	2313      	movs	r3, #19
   21f5e:	18fb      	adds	r3, r7, r3
   21f60:	701a      	strb	r2, [r3, #0]
			break;
   21f62:	e02d      	b.n	21fc0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   21f64:	68ba      	ldr	r2, [r7, #8]
   21f66:	697b      	ldr	r3, [r7, #20]
   21f68:	18d1      	adds	r1, r2, r3
   21f6a:	2310      	movs	r3, #16
   21f6c:	18fb      	adds	r3, r7, r3
   21f6e:	881a      	ldrh	r2, [r3, #0]
   21f70:	68fb      	ldr	r3, [r7, #12]
   21f72:	0018      	movs	r0, r3
   21f74:	4b17      	ldr	r3, [pc, #92]	; (21fd4 <nm_write_block+0xc8>)
   21f76:	4798      	blx	r3
   21f78:	0003      	movs	r3, r0
   21f7a:	b2da      	uxtb	r2, r3
   21f7c:	2313      	movs	r3, #19
   21f7e:	18fb      	adds	r3, r7, r3
   21f80:	781b      	ldrb	r3, [r3, #0]
   21f82:	18d3      	adds	r3, r2, r3
   21f84:	b2da      	uxtb	r2, r3
   21f86:	2313      	movs	r3, #19
   21f88:	18fb      	adds	r3, r7, r3
   21f8a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   21f8c:	2313      	movs	r3, #19
   21f8e:	18fb      	adds	r3, r7, r3
   21f90:	781b      	ldrb	r3, [r3, #0]
   21f92:	b25b      	sxtb	r3, r3
   21f94:	2b00      	cmp	r3, #0
   21f96:	d112      	bne.n	21fbe <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21f98:	2310      	movs	r3, #16
   21f9a:	18fb      	adds	r3, r7, r3
   21f9c:	881b      	ldrh	r3, [r3, #0]
   21f9e:	687a      	ldr	r2, [r7, #4]
   21fa0:	1ad3      	subs	r3, r2, r3
   21fa2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21fa4:	2310      	movs	r3, #16
   21fa6:	18fb      	adds	r3, r7, r3
   21fa8:	881b      	ldrh	r3, [r3, #0]
   21faa:	697a      	ldr	r2, [r7, #20]
   21fac:	18d3      	adds	r3, r2, r3
   21fae:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21fb0:	2310      	movs	r3, #16
   21fb2:	18fb      	adds	r3, r7, r3
   21fb4:	881b      	ldrh	r3, [r3, #0]
   21fb6:	68fa      	ldr	r2, [r7, #12]
   21fb8:	18d3      	adds	r3, r2, r3
   21fba:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21fbc:	e7b8      	b.n	21f30 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21fbe:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21fc0:	2313      	movs	r3, #19
   21fc2:	18fb      	adds	r3, r7, r3
   21fc4:	781b      	ldrb	r3, [r3, #0]
   21fc6:	b25b      	sxtb	r3, r3
}
   21fc8:	0018      	movs	r0, r3
   21fca:	46bd      	mov	sp, r7
   21fcc:	b006      	add	sp, #24
   21fce:	bd80      	pop	{r7, pc}
   21fd0:	20000114 	.word	0x20000114
   21fd4:	00021ee1 	.word	0x00021ee1

00021fd8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   21fd8:	b590      	push	{r4, r7, lr}
   21fda:	b089      	sub	sp, #36	; 0x24
   21fdc:	af00      	add	r7, sp, #0
   21fde:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   21fe0:	2300      	movs	r3, #0
   21fe2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   21fe4:	231f      	movs	r3, #31
   21fe6:	18fb      	adds	r3, r7, r3
   21fe8:	2200      	movs	r2, #0
   21fea:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   21fec:	230c      	movs	r3, #12
   21fee:	18fb      	adds	r3, r7, r3
   21ff0:	0018      	movs	r0, r3
   21ff2:	2308      	movs	r3, #8
   21ff4:	001a      	movs	r2, r3
   21ff6:	2100      	movs	r1, #0
   21ff8:	4b64      	ldr	r3, [pc, #400]	; (2218c <nm_get_firmware_full_info+0x1b4>)
   21ffa:	4798      	blx	r3
	if (pstrRev != NULL)
   21ffc:	687b      	ldr	r3, [r7, #4]
   21ffe:	2b00      	cmp	r3, #0
   22000:	d100      	bne.n	22004 <nm_get_firmware_full_info+0x2c>
   22002:	e0ba      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22004:	687b      	ldr	r3, [r7, #4]
   22006:	2228      	movs	r2, #40	; 0x28
   22008:	2100      	movs	r1, #0
   2200a:	0018      	movs	r0, r3
   2200c:	4b60      	ldr	r3, [pc, #384]	; (22190 <nm_get_firmware_full_info+0x1b8>)
   2200e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22010:	231f      	movs	r3, #31
   22012:	18fc      	adds	r4, r7, r3
   22014:	2314      	movs	r3, #20
   22016:	18fb      	adds	r3, r7, r3
   22018:	4a5e      	ldr	r2, [pc, #376]	; (22194 <nm_get_firmware_full_info+0x1bc>)
   2201a:	0019      	movs	r1, r3
   2201c:	0010      	movs	r0, r2
   2201e:	4b5e      	ldr	r3, [pc, #376]	; (22198 <nm_get_firmware_full_info+0x1c0>)
   22020:	4798      	blx	r3
   22022:	0003      	movs	r3, r0
   22024:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22026:	231f      	movs	r3, #31
   22028:	18fb      	adds	r3, r7, r3
   2202a:	781b      	ldrb	r3, [r3, #0]
   2202c:	b25b      	sxtb	r3, r3
   2202e:	2b00      	cmp	r3, #0
   22030:	d000      	beq.n	22034 <nm_get_firmware_full_info+0x5c>
   22032:	e0a2      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22034:	697b      	ldr	r3, [r7, #20]
   22036:	2b00      	cmp	r3, #0
   22038:	d100      	bne.n	2203c <nm_get_firmware_full_info+0x64>
   2203a:	e09a      	b.n	22172 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   2203c:	697b      	ldr	r3, [r7, #20]
   2203e:	22c0      	movs	r2, #192	; 0xc0
   22040:	0292      	lsls	r2, r2, #10
   22042:	4313      	orrs	r3, r2
   22044:	221f      	movs	r2, #31
   22046:	18bc      	adds	r4, r7, r2
   22048:	220c      	movs	r2, #12
   2204a:	18b9      	adds	r1, r7, r2
   2204c:	2208      	movs	r2, #8
   2204e:	0018      	movs	r0, r3
   22050:	4b52      	ldr	r3, [pc, #328]	; (2219c <nm_get_firmware_full_info+0x1c4>)
   22052:	4798      	blx	r3
   22054:	0003      	movs	r3, r0
   22056:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22058:	231f      	movs	r3, #31
   2205a:	18fb      	adds	r3, r7, r3
   2205c:	781b      	ldrb	r3, [r3, #0]
   2205e:	b25b      	sxtb	r3, r3
   22060:	2b00      	cmp	r3, #0
   22062:	d000      	beq.n	22066 <nm_get_firmware_full_info+0x8e>
   22064:	e089      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22066:	230c      	movs	r3, #12
   22068:	18fb      	adds	r3, r7, r3
   2206a:	685b      	ldr	r3, [r3, #4]
   2206c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2206e:	697b      	ldr	r3, [r7, #20]
   22070:	041b      	lsls	r3, r3, #16
   22072:	0c1b      	lsrs	r3, r3, #16
   22074:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22076:	697b      	ldr	r3, [r7, #20]
   22078:	2b00      	cmp	r3, #0
   2207a:	d100      	bne.n	2207e <nm_get_firmware_full_info+0xa6>
   2207c:	e074      	b.n	22168 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2207e:	697b      	ldr	r3, [r7, #20]
   22080:	22c0      	movs	r2, #192	; 0xc0
   22082:	0292      	lsls	r2, r2, #10
   22084:	4313      	orrs	r3, r2
   22086:	221f      	movs	r2, #31
   22088:	18bc      	adds	r4, r7, r2
   2208a:	6879      	ldr	r1, [r7, #4]
   2208c:	2228      	movs	r2, #40	; 0x28
   2208e:	0018      	movs	r0, r3
   22090:	4b42      	ldr	r3, [pc, #264]	; (2219c <nm_get_firmware_full_info+0x1c4>)
   22092:	4798      	blx	r3
   22094:	0003      	movs	r3, r0
   22096:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22098:	231f      	movs	r3, #31
   2209a:	18fb      	adds	r3, r7, r3
   2209c:	781b      	ldrb	r3, [r3, #0]
   2209e:	b25b      	sxtb	r3, r3
   220a0:	2b00      	cmp	r3, #0
   220a2:	d16a      	bne.n	2217a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   220a4:	687b      	ldr	r3, [r7, #4]
   220a6:	791b      	ldrb	r3, [r3, #4]
   220a8:	021b      	lsls	r3, r3, #8
   220aa:	b21a      	sxth	r2, r3
   220ac:	687b      	ldr	r3, [r7, #4]
   220ae:	795b      	ldrb	r3, [r3, #5]
   220b0:	011b      	lsls	r3, r3, #4
   220b2:	b21b      	sxth	r3, r3
   220b4:	21ff      	movs	r1, #255	; 0xff
   220b6:	400b      	ands	r3, r1
   220b8:	b21b      	sxth	r3, r3
   220ba:	4313      	orrs	r3, r2
   220bc:	b21a      	sxth	r2, r3
   220be:	687b      	ldr	r3, [r7, #4]
   220c0:	799b      	ldrb	r3, [r3, #6]
   220c2:	b21b      	sxth	r3, r3
   220c4:	210f      	movs	r1, #15
   220c6:	400b      	ands	r3, r1
   220c8:	b21b      	sxth	r3, r3
   220ca:	4313      	orrs	r3, r2
   220cc:	b21a      	sxth	r2, r3
   220ce:	231c      	movs	r3, #28
   220d0:	18fb      	adds	r3, r7, r3
   220d2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   220d4:	231a      	movs	r3, #26
   220d6:	18fb      	adds	r3, r7, r3
   220d8:	4a31      	ldr	r2, [pc, #196]	; (221a0 <nm_get_firmware_full_info+0x1c8>)
   220da:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   220dc:	687b      	ldr	r3, [r7, #4]
   220de:	79db      	ldrb	r3, [r3, #7]
   220e0:	021b      	lsls	r3, r3, #8
   220e2:	b21a      	sxth	r2, r3
   220e4:	687b      	ldr	r3, [r7, #4]
   220e6:	7a1b      	ldrb	r3, [r3, #8]
   220e8:	011b      	lsls	r3, r3, #4
   220ea:	b21b      	sxth	r3, r3
   220ec:	21ff      	movs	r1, #255	; 0xff
   220ee:	400b      	ands	r3, r1
   220f0:	b21b      	sxth	r3, r3
   220f2:	4313      	orrs	r3, r2
   220f4:	b21a      	sxth	r2, r3
   220f6:	687b      	ldr	r3, [r7, #4]
   220f8:	7a5b      	ldrb	r3, [r3, #9]
   220fa:	b21b      	sxth	r3, r3
   220fc:	210f      	movs	r1, #15
   220fe:	400b      	ands	r3, r1
   22100:	b21b      	sxth	r3, r3
   22102:	4313      	orrs	r3, r2
   22104:	b21a      	sxth	r2, r3
   22106:	2318      	movs	r3, #24
   22108:	18fb      	adds	r3, r7, r3
   2210a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   2210c:	231c      	movs	r3, #28
   2210e:	18fb      	adds	r3, r7, r3
   22110:	881b      	ldrh	r3, [r3, #0]
   22112:	2b00      	cmp	r3, #0
   22114:	d009      	beq.n	2212a <nm_get_firmware_full_info+0x152>
   22116:	2318      	movs	r3, #24
   22118:	18fb      	adds	r3, r7, r3
   2211a:	881b      	ldrh	r3, [r3, #0]
   2211c:	2b00      	cmp	r3, #0
   2211e:	d004      	beq.n	2212a <nm_get_firmware_full_info+0x152>
   22120:	2318      	movs	r3, #24
   22122:	18fb      	adds	r3, r7, r3
   22124:	881b      	ldrh	r3, [r3, #0]
   22126:	2b00      	cmp	r3, #0
   22128:	d104      	bne.n	22134 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   2212a:	231f      	movs	r3, #31
   2212c:	18fb      	adds	r3, r7, r3
   2212e:	22f4      	movs	r2, #244	; 0xf4
   22130:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22132:	e022      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22134:	231a      	movs	r3, #26
   22136:	18fa      	adds	r2, r7, r3
   22138:	2318      	movs	r3, #24
   2213a:	18fb      	adds	r3, r7, r3
   2213c:	8812      	ldrh	r2, [r2, #0]
   2213e:	881b      	ldrh	r3, [r3, #0]
   22140:	429a      	cmp	r2, r3
   22142:	d204      	bcs.n	2214e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22144:	231f      	movs	r3, #31
   22146:	18fb      	adds	r3, r7, r3
   22148:	22f3      	movs	r2, #243	; 0xf3
   2214a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2214c:	e015      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   2214e:	231a      	movs	r3, #26
   22150:	18fa      	adds	r2, r7, r3
   22152:	231c      	movs	r3, #28
   22154:	18fb      	adds	r3, r7, r3
   22156:	8812      	ldrh	r2, [r2, #0]
   22158:	881b      	ldrh	r3, [r3, #0]
   2215a:	429a      	cmp	r2, r3
   2215c:	d90d      	bls.n	2217a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   2215e:	231f      	movs	r3, #31
   22160:	18fb      	adds	r3, r7, r3
   22162:	22f3      	movs	r2, #243	; 0xf3
   22164:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22166:	e008      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22168:	231f      	movs	r3, #31
   2216a:	18fb      	adds	r3, r7, r3
   2216c:	22f4      	movs	r2, #244	; 0xf4
   2216e:	701a      	strb	r2, [r3, #0]
   22170:	e003      	b.n	2217a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22172:	231f      	movs	r3, #31
   22174:	18fb      	adds	r3, r7, r3
   22176:	22f4      	movs	r2, #244	; 0xf4
   22178:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2217a:	231f      	movs	r3, #31
   2217c:	18fb      	adds	r3, r7, r3
   2217e:	781b      	ldrb	r3, [r3, #0]
   22180:	b25b      	sxtb	r3, r3
}
   22182:	0018      	movs	r0, r3
   22184:	46bd      	mov	sp, r7
   22186:	b009      	add	sp, #36	; 0x24
   22188:	bd90      	pop	{r4, r7, pc}
   2218a:	46c0      	nop			; (mov r8, r8)
   2218c:	0003460f 	.word	0x0003460f
   22190:	0001fd11 	.word	0x0001fd11
   22194:	000c0008 	.word	0x000c0008
   22198:	00021da1 	.word	0x00021da1
   2219c:	00021e15 	.word	0x00021e15
   221a0:	00001354 	.word	0x00001354

000221a4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   221a4:	b590      	push	{r4, r7, lr}
   221a6:	b085      	sub	sp, #20
   221a8:	af00      	add	r7, sp, #0
   221aa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   221ac:	230f      	movs	r3, #15
   221ae:	18fb      	adds	r3, r7, r3
   221b0:	2200      	movs	r2, #0
   221b2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   221b4:	687b      	ldr	r3, [r7, #4]
   221b6:	2b00      	cmp	r3, #0
   221b8:	d013      	beq.n	221e2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   221ba:	230e      	movs	r3, #14
   221bc:	18fb      	adds	r3, r7, r3
   221be:	687a      	ldr	r2, [r7, #4]
   221c0:	7812      	ldrb	r2, [r2, #0]
   221c2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   221c4:	230e      	movs	r3, #14
   221c6:	18fb      	adds	r3, r7, r3
   221c8:	781b      	ldrb	r3, [r3, #0]
   221ca:	2b00      	cmp	r3, #0
   221cc:	d004      	beq.n	221d8 <nm_drv_init+0x34>
   221ce:	230e      	movs	r3, #14
   221d0:	18fb      	adds	r3, r7, r3
   221d2:	781b      	ldrb	r3, [r3, #0]
   221d4:	2b04      	cmp	r3, #4
   221d6:	d908      	bls.n	221ea <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   221d8:	230e      	movs	r3, #14
   221da:	18fb      	adds	r3, r7, r3
   221dc:	2201      	movs	r2, #1
   221de:	701a      	strb	r2, [r3, #0]
   221e0:	e003      	b.n	221ea <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   221e2:	230e      	movs	r3, #14
   221e4:	18fb      	adds	r3, r7, r3
   221e6:	2201      	movs	r2, #1
   221e8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   221ea:	230f      	movs	r3, #15
   221ec:	18fc      	adds	r4, r7, r3
   221ee:	2000      	movs	r0, #0
   221f0:	4b41      	ldr	r3, [pc, #260]	; (222f8 <nm_drv_init+0x154>)
   221f2:	4798      	blx	r3
   221f4:	0003      	movs	r3, r0
   221f6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   221f8:	230f      	movs	r3, #15
   221fa:	18fb      	adds	r3, r7, r3
   221fc:	781b      	ldrb	r3, [r3, #0]
   221fe:	b25b      	sxtb	r3, r3
   22200:	2b00      	cmp	r3, #0
   22202:	d00f      	beq.n	22224 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22204:	2390      	movs	r3, #144	; 0x90
   22206:	005a      	lsls	r2, r3, #1
   22208:	493c      	ldr	r1, [pc, #240]	; (222fc <nm_drv_init+0x158>)
   2220a:	4b3d      	ldr	r3, [pc, #244]	; (22300 <nm_drv_init+0x15c>)
   2220c:	0018      	movs	r0, r3
   2220e:	4b3d      	ldr	r3, [pc, #244]	; (22304 <nm_drv_init+0x160>)
   22210:	4798      	blx	r3
   22212:	4b3d      	ldr	r3, [pc, #244]	; (22308 <nm_drv_init+0x164>)
   22214:	0018      	movs	r0, r3
   22216:	4b3b      	ldr	r3, [pc, #236]	; (22304 <nm_drv_init+0x160>)
   22218:	4798      	blx	r3
   2221a:	4b3c      	ldr	r3, [pc, #240]	; (2230c <nm_drv_init+0x168>)
   2221c:	0018      	movs	r0, r3
   2221e:	4b39      	ldr	r3, [pc, #228]	; (22304 <nm_drv_init+0x160>)
   22220:	4798      	blx	r3
		goto ERR1;
   22222:	e061      	b.n	222e8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22224:	4b3a      	ldr	r3, [pc, #232]	; (22310 <nm_drv_init+0x16c>)
   22226:	0018      	movs	r0, r3
   22228:	4b36      	ldr	r3, [pc, #216]	; (22304 <nm_drv_init+0x160>)
   2222a:	4798      	blx	r3
   2222c:	4b39      	ldr	r3, [pc, #228]	; (22314 <nm_drv_init+0x170>)
   2222e:	4798      	blx	r3
   22230:	0002      	movs	r2, r0
   22232:	4b39      	ldr	r3, [pc, #228]	; (22318 <nm_drv_init+0x174>)
   22234:	0011      	movs	r1, r2
   22236:	0018      	movs	r0, r3
   22238:	4b32      	ldr	r3, [pc, #200]	; (22304 <nm_drv_init+0x160>)
   2223a:	4798      	blx	r3
   2223c:	4b33      	ldr	r3, [pc, #204]	; (2230c <nm_drv_init+0x168>)
   2223e:	0018      	movs	r0, r3
   22240:	4b30      	ldr	r3, [pc, #192]	; (22304 <nm_drv_init+0x160>)
   22242:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22244:	4b35      	ldr	r3, [pc, #212]	; (2231c <nm_drv_init+0x178>)
   22246:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22248:	230f      	movs	r3, #15
   2224a:	18fc      	adds	r4, r7, r3
   2224c:	230e      	movs	r3, #14
   2224e:	18fb      	adds	r3, r7, r3
   22250:	781b      	ldrb	r3, [r3, #0]
   22252:	0018      	movs	r0, r3
   22254:	4b32      	ldr	r3, [pc, #200]	; (22320 <nm_drv_init+0x17c>)
   22256:	4798      	blx	r3
   22258:	0003      	movs	r3, r0
   2225a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2225c:	230f      	movs	r3, #15
   2225e:	18fb      	adds	r3, r7, r3
   22260:	781b      	ldrb	r3, [r3, #0]
   22262:	b25b      	sxtb	r3, r3
   22264:	2b00      	cmp	r3, #0
   22266:	d13a      	bne.n	222de <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22268:	230f      	movs	r3, #15
   2226a:	18fc      	adds	r4, r7, r3
   2226c:	230e      	movs	r3, #14
   2226e:	18fb      	adds	r3, r7, r3
   22270:	781b      	ldrb	r3, [r3, #0]
   22272:	0018      	movs	r0, r3
   22274:	4b2b      	ldr	r3, [pc, #172]	; (22324 <nm_drv_init+0x180>)
   22276:	4798      	blx	r3
   22278:	0003      	movs	r3, r0
   2227a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2227c:	230f      	movs	r3, #15
   2227e:	18fb      	adds	r3, r7, r3
   22280:	781b      	ldrb	r3, [r3, #0]
   22282:	b25b      	sxtb	r3, r3
   22284:	2b00      	cmp	r3, #0
   22286:	d12c      	bne.n	222e2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22288:	230e      	movs	r3, #14
   2228a:	18fb      	adds	r3, r7, r3
   2228c:	781b      	ldrb	r3, [r3, #0]
   2228e:	2b02      	cmp	r3, #2
   22290:	d02a      	beq.n	222e8 <nm_drv_init+0x144>
   22292:	230e      	movs	r3, #14
   22294:	18fb      	adds	r3, r7, r3
   22296:	781b      	ldrb	r3, [r3, #0]
   22298:	2b03      	cmp	r3, #3
   2229a:	d025      	beq.n	222e8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2229c:	230f      	movs	r3, #15
   2229e:	18fc      	adds	r4, r7, r3
   222a0:	4b21      	ldr	r3, [pc, #132]	; (22328 <nm_drv_init+0x184>)
   222a2:	4798      	blx	r3
   222a4:	0003      	movs	r3, r0
   222a6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   222a8:	230f      	movs	r3, #15
   222aa:	18fb      	adds	r3, r7, r3
   222ac:	781b      	ldrb	r3, [r3, #0]
   222ae:	b25b      	sxtb	r3, r3
   222b0:	2b00      	cmp	r3, #0
   222b2:	d00f      	beq.n	222d4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   222b4:	23a7      	movs	r3, #167	; 0xa7
   222b6:	005a      	lsls	r2, r3, #1
   222b8:	4910      	ldr	r1, [pc, #64]	; (222fc <nm_drv_init+0x158>)
   222ba:	4b11      	ldr	r3, [pc, #68]	; (22300 <nm_drv_init+0x15c>)
   222bc:	0018      	movs	r0, r3
   222be:	4b11      	ldr	r3, [pc, #68]	; (22304 <nm_drv_init+0x160>)
   222c0:	4798      	blx	r3
   222c2:	4b1a      	ldr	r3, [pc, #104]	; (2232c <nm_drv_init+0x188>)
   222c4:	0018      	movs	r0, r3
   222c6:	4b0f      	ldr	r3, [pc, #60]	; (22304 <nm_drv_init+0x160>)
   222c8:	4798      	blx	r3
   222ca:	4b10      	ldr	r3, [pc, #64]	; (2230c <nm_drv_init+0x168>)
   222cc:	0018      	movs	r0, r3
   222ce:	4b0d      	ldr	r3, [pc, #52]	; (22304 <nm_drv_init+0x160>)
   222d0:	4798      	blx	r3
		goto ERR2;
   222d2:	e007      	b.n	222e4 <nm_drv_init+0x140>
	}
	return ret;
   222d4:	230f      	movs	r3, #15
   222d6:	18fb      	adds	r3, r7, r3
   222d8:	781b      	ldrb	r3, [r3, #0]
   222da:	b25b      	sxtb	r3, r3
   222dc:	e008      	b.n	222f0 <nm_drv_init+0x14c>
		goto ERR2;
   222de:	46c0      	nop			; (mov r8, r8)
   222e0:	e000      	b.n	222e4 <nm_drv_init+0x140>
		goto ERR2;
   222e2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   222e4:	4b12      	ldr	r3, [pc, #72]	; (22330 <nm_drv_init+0x18c>)
   222e6:	4798      	blx	r3
ERR1:
	return ret;
   222e8:	230f      	movs	r3, #15
   222ea:	18fb      	adds	r3, r7, r3
   222ec:	781b      	ldrb	r3, [r3, #0]
   222ee:	b25b      	sxtb	r3, r3
}
   222f0:	0018      	movs	r0, r3
   222f2:	46bd      	mov	sp, r7
   222f4:	b005      	add	sp, #20
   222f6:	bd90      	pop	{r4, r7, pc}
   222f8:	00021d05 	.word	0x00021d05
   222fc:	00038704 	.word	0x00038704
   22300:	00038634 	.word	0x00038634
   22304:	0001cf79 	.word	0x0001cf79
   22308:	00038648 	.word	0x00038648
   2230c:	00038664 	.word	0x00038664
   22310:	00038668 	.word	0x00038668
   22314:	000216a1 	.word	0x000216a1
   22318:	00038674 	.word	0x00038674
   2231c:	00023bbd 	.word	0x00023bbd
   22320:	000219f9 	.word	0x000219f9
   22324:	00021b91 	.word	0x00021b91
   22328:	000215ed 	.word	0x000215ed
   2232c:	00038684 	.word	0x00038684
   22330:	00021d39 	.word	0x00021d39

00022334 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22334:	b590      	push	{r4, r7, lr}
   22336:	b085      	sub	sp, #20
   22338:	af00      	add	r7, sp, #0
   2233a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   2233c:	230f      	movs	r3, #15
   2233e:	18fc      	adds	r4, r7, r3
   22340:	4b2e      	ldr	r3, [pc, #184]	; (223fc <nm_drv_deinit+0xc8>)
   22342:	4798      	blx	r3
   22344:	0003      	movs	r3, r0
   22346:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22348:	230f      	movs	r3, #15
   2234a:	18fb      	adds	r3, r7, r3
   2234c:	781b      	ldrb	r3, [r3, #0]
   2234e:	b25b      	sxtb	r3, r3
   22350:	2b00      	cmp	r3, #0
   22352:	d010      	beq.n	22376 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22354:	2366      	movs	r3, #102	; 0x66
   22356:	33ff      	adds	r3, #255	; 0xff
   22358:	001a      	movs	r2, r3
   2235a:	4929      	ldr	r1, [pc, #164]	; (22400 <nm_drv_deinit+0xcc>)
   2235c:	4b29      	ldr	r3, [pc, #164]	; (22404 <nm_drv_deinit+0xd0>)
   2235e:	0018      	movs	r0, r3
   22360:	4b29      	ldr	r3, [pc, #164]	; (22408 <nm_drv_deinit+0xd4>)
   22362:	4798      	blx	r3
   22364:	4b29      	ldr	r3, [pc, #164]	; (2240c <nm_drv_deinit+0xd8>)
   22366:	0018      	movs	r0, r3
   22368:	4b27      	ldr	r3, [pc, #156]	; (22408 <nm_drv_deinit+0xd4>)
   2236a:	4798      	blx	r3
   2236c:	4b28      	ldr	r3, [pc, #160]	; (22410 <nm_drv_deinit+0xdc>)
   2236e:	0018      	movs	r0, r3
   22370:	4b25      	ldr	r3, [pc, #148]	; (22408 <nm_drv_deinit+0xd4>)
   22372:	4798      	blx	r3
		goto ERR1;
   22374:	e03a      	b.n	223ec <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22376:	230f      	movs	r3, #15
   22378:	18fc      	adds	r4, r7, r3
   2237a:	2000      	movs	r0, #0
   2237c:	4b25      	ldr	r3, [pc, #148]	; (22414 <nm_drv_deinit+0xe0>)
   2237e:	4798      	blx	r3
   22380:	0003      	movs	r3, r0
   22382:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22384:	230f      	movs	r3, #15
   22386:	18fb      	adds	r3, r7, r3
   22388:	781b      	ldrb	r3, [r3, #0]
   2238a:	b25b      	sxtb	r3, r3
   2238c:	2b00      	cmp	r3, #0
   2238e:	d00f      	beq.n	223b0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22390:	23b6      	movs	r3, #182	; 0xb6
   22392:	005a      	lsls	r2, r3, #1
   22394:	491a      	ldr	r1, [pc, #104]	; (22400 <nm_drv_deinit+0xcc>)
   22396:	4b1b      	ldr	r3, [pc, #108]	; (22404 <nm_drv_deinit+0xd0>)
   22398:	0018      	movs	r0, r3
   2239a:	4b1b      	ldr	r3, [pc, #108]	; (22408 <nm_drv_deinit+0xd4>)
   2239c:	4798      	blx	r3
   2239e:	4b1e      	ldr	r3, [pc, #120]	; (22418 <nm_drv_deinit+0xe4>)
   223a0:	0018      	movs	r0, r3
   223a2:	4b19      	ldr	r3, [pc, #100]	; (22408 <nm_drv_deinit+0xd4>)
   223a4:	4798      	blx	r3
   223a6:	4b1a      	ldr	r3, [pc, #104]	; (22410 <nm_drv_deinit+0xdc>)
   223a8:	0018      	movs	r0, r3
   223aa:	4b17      	ldr	r3, [pc, #92]	; (22408 <nm_drv_deinit+0xd4>)
   223ac:	4798      	blx	r3
		goto ERR1;
   223ae:	e01d      	b.n	223ec <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   223b0:	230f      	movs	r3, #15
   223b2:	18fc      	adds	r4, r7, r3
   223b4:	4b19      	ldr	r3, [pc, #100]	; (2241c <nm_drv_deinit+0xe8>)
   223b6:	4798      	blx	r3
   223b8:	0003      	movs	r3, r0
   223ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   223bc:	230f      	movs	r3, #15
   223be:	18fb      	adds	r3, r7, r3
   223c0:	781b      	ldrb	r3, [r3, #0]
   223c2:	b25b      	sxtb	r3, r3
   223c4:	2b00      	cmp	r3, #0
   223c6:	d00f      	beq.n	223e8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   223c8:	23b9      	movs	r3, #185	; 0xb9
   223ca:	005a      	lsls	r2, r3, #1
   223cc:	490c      	ldr	r1, [pc, #48]	; (22400 <nm_drv_deinit+0xcc>)
   223ce:	4b0d      	ldr	r3, [pc, #52]	; (22404 <nm_drv_deinit+0xd0>)
   223d0:	0018      	movs	r0, r3
   223d2:	4b0d      	ldr	r3, [pc, #52]	; (22408 <nm_drv_deinit+0xd4>)
   223d4:	4798      	blx	r3
   223d6:	4b12      	ldr	r3, [pc, #72]	; (22420 <nm_drv_deinit+0xec>)
   223d8:	0018      	movs	r0, r3
   223da:	4b0b      	ldr	r3, [pc, #44]	; (22408 <nm_drv_deinit+0xd4>)
   223dc:	4798      	blx	r3
   223de:	4b0c      	ldr	r3, [pc, #48]	; (22410 <nm_drv_deinit+0xdc>)
   223e0:	0018      	movs	r0, r3
   223e2:	4b09      	ldr	r3, [pc, #36]	; (22408 <nm_drv_deinit+0xd4>)
   223e4:	4798      	blx	r3
		goto ERR1;
   223e6:	e001      	b.n	223ec <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   223e8:	4b0e      	ldr	r3, [pc, #56]	; (22424 <nm_drv_deinit+0xf0>)
   223ea:	4798      	blx	r3
#endif

ERR1:
	return ret;
   223ec:	230f      	movs	r3, #15
   223ee:	18fb      	adds	r3, r7, r3
   223f0:	781b      	ldrb	r3, [r3, #0]
   223f2:	b25b      	sxtb	r3, r3
}
   223f4:	0018      	movs	r0, r3
   223f6:	46bd      	mov	sp, r7
   223f8:	b005      	add	sp, #20
   223fa:	bd90      	pop	{r4, r7, pc}
   223fc:	00021c45 	.word	0x00021c45
   22400:	00038710 	.word	0x00038710
   22404:	00038634 	.word	0x00038634
   22408:	0001cf79 	.word	0x0001cf79
   2240c:	000386a4 	.word	0x000386a4
   22410:	00038664 	.word	0x00038664
   22414:	00025065 	.word	0x00025065
   22418:	000386c4 	.word	0x000386c4
   2241c:	00021d39 	.word	0x00021d39
   22420:	000386e8 	.word	0x000386e8
   22424:	00023d09 	.word	0x00023d09

00022428 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22428:	b580      	push	{r7, lr}
   2242a:	b086      	sub	sp, #24
   2242c:	af00      	add	r7, sp, #0
   2242e:	6078      	str	r0, [r7, #4]
   22430:	000a      	movs	r2, r1
   22432:	1cbb      	adds	r3, r7, #2
   22434:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22436:	230c      	movs	r3, #12
   22438:	18fb      	adds	r3, r7, r3
   2243a:	2200      	movs	r2, #0
   2243c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   2243e:	230c      	movs	r3, #12
   22440:	18fb      	adds	r3, r7, r3
   22442:	687a      	ldr	r2, [r7, #4]
   22444:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22446:	230c      	movs	r3, #12
   22448:	18fb      	adds	r3, r7, r3
   2244a:	1cba      	adds	r2, r7, #2
   2244c:	8812      	ldrh	r2, [r2, #0]
   2244e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22450:	230c      	movs	r3, #12
   22452:	18fb      	adds	r3, r7, r3
   22454:	0019      	movs	r1, r3
   22456:	2003      	movs	r0, #3
   22458:	4b03      	ldr	r3, [pc, #12]	; (22468 <nmi_spi_read+0x40>)
   2245a:	4798      	blx	r3
   2245c:	0003      	movs	r3, r0
}
   2245e:	0018      	movs	r0, r3
   22460:	46bd      	mov	sp, r7
   22462:	b006      	add	sp, #24
   22464:	bd80      	pop	{r7, pc}
   22466:	46c0      	nop			; (mov r8, r8)
   22468:	0001fbd5 	.word	0x0001fbd5

0002246c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   2246c:	b580      	push	{r7, lr}
   2246e:	b086      	sub	sp, #24
   22470:	af00      	add	r7, sp, #0
   22472:	6078      	str	r0, [r7, #4]
   22474:	000a      	movs	r2, r1
   22476:	1cbb      	adds	r3, r7, #2
   22478:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2247a:	230c      	movs	r3, #12
   2247c:	18fb      	adds	r3, r7, r3
   2247e:	687a      	ldr	r2, [r7, #4]
   22480:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22482:	230c      	movs	r3, #12
   22484:	18fb      	adds	r3, r7, r3
   22486:	2200      	movs	r2, #0
   22488:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2248a:	230c      	movs	r3, #12
   2248c:	18fb      	adds	r3, r7, r3
   2248e:	1cba      	adds	r2, r7, #2
   22490:	8812      	ldrh	r2, [r2, #0]
   22492:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22494:	230c      	movs	r3, #12
   22496:	18fb      	adds	r3, r7, r3
   22498:	0019      	movs	r1, r3
   2249a:	2003      	movs	r0, #3
   2249c:	4b03      	ldr	r3, [pc, #12]	; (224ac <nmi_spi_write+0x40>)
   2249e:	4798      	blx	r3
   224a0:	0003      	movs	r3, r0
}
   224a2:	0018      	movs	r0, r3
   224a4:	46bd      	mov	sp, r7
   224a6:	b006      	add	sp, #24
   224a8:	bd80      	pop	{r7, pc}
   224aa:	46c0      	nop			; (mov r8, r8)
   224ac:	0001fbd5 	.word	0x0001fbd5

000224b0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   224b0:	b580      	push	{r7, lr}
   224b2:	b088      	sub	sp, #32
   224b4:	af00      	add	r7, sp, #0
   224b6:	60f8      	str	r0, [r7, #12]
   224b8:	60b9      	str	r1, [r7, #8]
   224ba:	1dbb      	adds	r3, r7, #6
   224bc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   224be:	2314      	movs	r3, #20
   224c0:	18fb      	adds	r3, r7, r3
   224c2:	68fa      	ldr	r2, [r7, #12]
   224c4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   224c6:	2314      	movs	r3, #20
   224c8:	18fb      	adds	r3, r7, r3
   224ca:	68ba      	ldr	r2, [r7, #8]
   224cc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   224ce:	2314      	movs	r3, #20
   224d0:	18fb      	adds	r3, r7, r3
   224d2:	1dba      	adds	r2, r7, #6
   224d4:	8812      	ldrh	r2, [r2, #0]
   224d6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   224d8:	2314      	movs	r3, #20
   224da:	18fb      	adds	r3, r7, r3
   224dc:	0019      	movs	r1, r3
   224de:	2003      	movs	r0, #3
   224e0:	4b03      	ldr	r3, [pc, #12]	; (224f0 <nmi_spi_rw+0x40>)
   224e2:	4798      	blx	r3
   224e4:	0003      	movs	r3, r0
}
   224e6:	0018      	movs	r0, r3
   224e8:	46bd      	mov	sp, r7
   224ea:	b008      	add	sp, #32
   224ec:	bd80      	pop	{r7, pc}
   224ee:	46c0      	nop			; (mov r8, r8)
   224f0:	0001fbd5 	.word	0x0001fbd5

000224f4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   224f4:	b580      	push	{r7, lr}
   224f6:	b082      	sub	sp, #8
   224f8:	af00      	add	r7, sp, #0
   224fa:	0002      	movs	r2, r0
   224fc:	1dfb      	adds	r3, r7, #7
   224fe:	701a      	strb	r2, [r3, #0]
   22500:	1dbb      	adds	r3, r7, #6
   22502:	1c0a      	adds	r2, r1, #0
   22504:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22506:	1dfb      	adds	r3, r7, #7
   22508:	781b      	ldrb	r3, [r3, #0]
   2250a:	005a      	lsls	r2, r3, #1
   2250c:	1dbb      	adds	r3, r7, #6
   2250e:	781b      	ldrb	r3, [r3, #0]
   22510:	4053      	eors	r3, r2
   22512:	4a03      	ldr	r2, [pc, #12]	; (22520 <crc7_byte+0x2c>)
   22514:	5cd3      	ldrb	r3, [r2, r3]
}
   22516:	0018      	movs	r0, r3
   22518:	46bd      	mov	sp, r7
   2251a:	b002      	add	sp, #8
   2251c:	bd80      	pop	{r7, pc}
   2251e:	46c0      	nop			; (mov r8, r8)
   22520:	00038720 	.word	0x00038720

00022524 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22524:	b590      	push	{r4, r7, lr}
   22526:	b085      	sub	sp, #20
   22528:	af00      	add	r7, sp, #0
   2252a:	60b9      	str	r1, [r7, #8]
   2252c:	607a      	str	r2, [r7, #4]
   2252e:	230f      	movs	r3, #15
   22530:	18fb      	adds	r3, r7, r3
   22532:	1c02      	adds	r2, r0, #0
   22534:	701a      	strb	r2, [r3, #0]
	while (len--)
   22536:	e00e      	b.n	22556 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22538:	68bb      	ldr	r3, [r7, #8]
   2253a:	1c5a      	adds	r2, r3, #1
   2253c:	60ba      	str	r2, [r7, #8]
   2253e:	781a      	ldrb	r2, [r3, #0]
   22540:	230f      	movs	r3, #15
   22542:	18fc      	adds	r4, r7, r3
   22544:	230f      	movs	r3, #15
   22546:	18fb      	adds	r3, r7, r3
   22548:	781b      	ldrb	r3, [r3, #0]
   2254a:	0011      	movs	r1, r2
   2254c:	0018      	movs	r0, r3
   2254e:	4b08      	ldr	r3, [pc, #32]	; (22570 <crc7+0x4c>)
   22550:	4798      	blx	r3
   22552:	0003      	movs	r3, r0
   22554:	7023      	strb	r3, [r4, #0]
	while (len--)
   22556:	687b      	ldr	r3, [r7, #4]
   22558:	1e5a      	subs	r2, r3, #1
   2255a:	607a      	str	r2, [r7, #4]
   2255c:	2b00      	cmp	r3, #0
   2255e:	d1eb      	bne.n	22538 <crc7+0x14>
	return crc;
   22560:	230f      	movs	r3, #15
   22562:	18fb      	adds	r3, r7, r3
   22564:	781b      	ldrb	r3, [r3, #0]
}
   22566:	0018      	movs	r0, r3
   22568:	46bd      	mov	sp, r7
   2256a:	b005      	add	sp, #20
   2256c:	bd90      	pop	{r4, r7, pc}
   2256e:	46c0      	nop			; (mov r8, r8)
   22570:	000224f5 	.word	0x000224f5

00022574 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22574:	b590      	push	{r4, r7, lr}
   22576:	b089      	sub	sp, #36	; 0x24
   22578:	af00      	add	r7, sp, #0
   2257a:	60b9      	str	r1, [r7, #8]
   2257c:	607a      	str	r2, [r7, #4]
   2257e:	603b      	str	r3, [r7, #0]
   22580:	230f      	movs	r3, #15
   22582:	18fb      	adds	r3, r7, r3
   22584:	1c02      	adds	r2, r0, #0
   22586:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22588:	231f      	movs	r3, #31
   2258a:	18fb      	adds	r3, r7, r3
   2258c:	2205      	movs	r2, #5
   2258e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22590:	231e      	movs	r3, #30
   22592:	18fb      	adds	r3, r7, r3
   22594:	2201      	movs	r2, #1
   22596:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22598:	2314      	movs	r3, #20
   2259a:	18fb      	adds	r3, r7, r3
   2259c:	220f      	movs	r2, #15
   2259e:	18ba      	adds	r2, r7, r2
   225a0:	7812      	ldrb	r2, [r2, #0]
   225a2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   225a4:	230f      	movs	r3, #15
   225a6:	18fb      	adds	r3, r7, r3
   225a8:	781b      	ldrb	r3, [r3, #0]
   225aa:	3bc1      	subs	r3, #193	; 0xc1
   225ac:	2b0e      	cmp	r3, #14
   225ae:	d900      	bls.n	225b2 <spi_cmd+0x3e>
   225b0:	e11b      	b.n	227ea <spi_cmd+0x276>
   225b2:	009a      	lsls	r2, r3, #2
   225b4:	4bb6      	ldr	r3, [pc, #728]	; (22890 <spi_cmd+0x31c>)
   225b6:	18d3      	adds	r3, r2, r3
   225b8:	681b      	ldr	r3, [r3, #0]
   225ba:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   225bc:	68bb      	ldr	r3, [r7, #8]
   225be:	0c1b      	lsrs	r3, r3, #16
   225c0:	b2da      	uxtb	r2, r3
   225c2:	2314      	movs	r3, #20
   225c4:	18fb      	adds	r3, r7, r3
   225c6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   225c8:	68bb      	ldr	r3, [r7, #8]
   225ca:	0a1b      	lsrs	r3, r3, #8
   225cc:	b2da      	uxtb	r2, r3
   225ce:	2314      	movs	r3, #20
   225d0:	18fb      	adds	r3, r7, r3
   225d2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   225d4:	68bb      	ldr	r3, [r7, #8]
   225d6:	b2da      	uxtb	r2, r3
   225d8:	2314      	movs	r3, #20
   225da:	18fb      	adds	r3, r7, r3
   225dc:	70da      	strb	r2, [r3, #3]
		len = 5;
   225de:	231f      	movs	r3, #31
   225e0:	18fb      	adds	r3, r7, r3
   225e2:	2205      	movs	r2, #5
   225e4:	701a      	strb	r2, [r3, #0]
		break;
   225e6:	e105      	b.n	227f4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   225e8:	68bb      	ldr	r3, [r7, #8]
   225ea:	0a1b      	lsrs	r3, r3, #8
   225ec:	b2da      	uxtb	r2, r3
   225ee:	2314      	movs	r3, #20
   225f0:	18fb      	adds	r3, r7, r3
   225f2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   225f4:	2330      	movs	r3, #48	; 0x30
   225f6:	18fb      	adds	r3, r7, r3
   225f8:	781b      	ldrb	r3, [r3, #0]
   225fa:	2b00      	cmp	r3, #0
   225fc:	d009      	beq.n	22612 <spi_cmd+0x9e>
   225fe:	2314      	movs	r3, #20
   22600:	18fb      	adds	r3, r7, r3
   22602:	785b      	ldrb	r3, [r3, #1]
   22604:	2280      	movs	r2, #128	; 0x80
   22606:	4252      	negs	r2, r2
   22608:	4313      	orrs	r3, r2
   2260a:	b2da      	uxtb	r2, r3
   2260c:	2314      	movs	r3, #20
   2260e:	18fb      	adds	r3, r7, r3
   22610:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   22612:	68bb      	ldr	r3, [r7, #8]
   22614:	b2da      	uxtb	r2, r3
   22616:	2314      	movs	r3, #20
   22618:	18fb      	adds	r3, r7, r3
   2261a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2261c:	2314      	movs	r3, #20
   2261e:	18fb      	adds	r3, r7, r3
   22620:	2200      	movs	r2, #0
   22622:	70da      	strb	r2, [r3, #3]
		len = 5;
   22624:	231f      	movs	r3, #31
   22626:	18fb      	adds	r3, r7, r3
   22628:	2205      	movs	r2, #5
   2262a:	701a      	strb	r2, [r3, #0]
		break;
   2262c:	e0e2      	b.n	227f4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2262e:	2314      	movs	r3, #20
   22630:	18fb      	adds	r3, r7, r3
   22632:	2200      	movs	r2, #0
   22634:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22636:	2314      	movs	r3, #20
   22638:	18fb      	adds	r3, r7, r3
   2263a:	2200      	movs	r2, #0
   2263c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2263e:	2314      	movs	r3, #20
   22640:	18fb      	adds	r3, r7, r3
   22642:	2200      	movs	r2, #0
   22644:	70da      	strb	r2, [r3, #3]
		len = 5;
   22646:	231f      	movs	r3, #31
   22648:	18fb      	adds	r3, r7, r3
   2264a:	2205      	movs	r2, #5
   2264c:	701a      	strb	r2, [r3, #0]
		break;
   2264e:	e0d1      	b.n	227f4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   22650:	2314      	movs	r3, #20
   22652:	18fb      	adds	r3, r7, r3
   22654:	2200      	movs	r2, #0
   22656:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22658:	2314      	movs	r3, #20
   2265a:	18fb      	adds	r3, r7, r3
   2265c:	2200      	movs	r2, #0
   2265e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22660:	2314      	movs	r3, #20
   22662:	18fb      	adds	r3, r7, r3
   22664:	2200      	movs	r2, #0
   22666:	70da      	strb	r2, [r3, #3]
		len = 5;
   22668:	231f      	movs	r3, #31
   2266a:	18fb      	adds	r3, r7, r3
   2266c:	2205      	movs	r2, #5
   2266e:	701a      	strb	r2, [r3, #0]
		break;
   22670:	e0c0      	b.n	227f4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   22672:	2314      	movs	r3, #20
   22674:	18fb      	adds	r3, r7, r3
   22676:	22ff      	movs	r2, #255	; 0xff
   22678:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2267a:	2314      	movs	r3, #20
   2267c:	18fb      	adds	r3, r7, r3
   2267e:	22ff      	movs	r2, #255	; 0xff
   22680:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   22682:	2314      	movs	r3, #20
   22684:	18fb      	adds	r3, r7, r3
   22686:	22ff      	movs	r2, #255	; 0xff
   22688:	70da      	strb	r2, [r3, #3]
		len = 5;
   2268a:	231f      	movs	r3, #31
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	2205      	movs	r2, #5
   22690:	701a      	strb	r2, [r3, #0]
		break;
   22692:	e0af      	b.n	227f4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22694:	68bb      	ldr	r3, [r7, #8]
   22696:	0c1b      	lsrs	r3, r3, #16
   22698:	b2da      	uxtb	r2, r3
   2269a:	2314      	movs	r3, #20
   2269c:	18fb      	adds	r3, r7, r3
   2269e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   226a0:	68bb      	ldr	r3, [r7, #8]
   226a2:	0a1b      	lsrs	r3, r3, #8
   226a4:	b2da      	uxtb	r2, r3
   226a6:	2314      	movs	r3, #20
   226a8:	18fb      	adds	r3, r7, r3
   226aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   226ac:	68bb      	ldr	r3, [r7, #8]
   226ae:	b2da      	uxtb	r2, r3
   226b0:	2314      	movs	r3, #20
   226b2:	18fb      	adds	r3, r7, r3
   226b4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   226b6:	683b      	ldr	r3, [r7, #0]
   226b8:	0a1b      	lsrs	r3, r3, #8
   226ba:	b2da      	uxtb	r2, r3
   226bc:	2314      	movs	r3, #20
   226be:	18fb      	adds	r3, r7, r3
   226c0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   226c2:	683b      	ldr	r3, [r7, #0]
   226c4:	b2da      	uxtb	r2, r3
   226c6:	2314      	movs	r3, #20
   226c8:	18fb      	adds	r3, r7, r3
   226ca:	715a      	strb	r2, [r3, #5]
		len = 7;
   226cc:	231f      	movs	r3, #31
   226ce:	18fb      	adds	r3, r7, r3
   226d0:	2207      	movs	r2, #7
   226d2:	701a      	strb	r2, [r3, #0]
		break;
   226d4:	e08e      	b.n	227f4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   226d6:	68bb      	ldr	r3, [r7, #8]
   226d8:	0c1b      	lsrs	r3, r3, #16
   226da:	b2da      	uxtb	r2, r3
   226dc:	2314      	movs	r3, #20
   226de:	18fb      	adds	r3, r7, r3
   226e0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   226e2:	68bb      	ldr	r3, [r7, #8]
   226e4:	0a1b      	lsrs	r3, r3, #8
   226e6:	b2da      	uxtb	r2, r3
   226e8:	2314      	movs	r3, #20
   226ea:	18fb      	adds	r3, r7, r3
   226ec:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   226ee:	68bb      	ldr	r3, [r7, #8]
   226f0:	b2da      	uxtb	r2, r3
   226f2:	2314      	movs	r3, #20
   226f4:	18fb      	adds	r3, r7, r3
   226f6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   226f8:	683b      	ldr	r3, [r7, #0]
   226fa:	0c1b      	lsrs	r3, r3, #16
   226fc:	b2da      	uxtb	r2, r3
   226fe:	2314      	movs	r3, #20
   22700:	18fb      	adds	r3, r7, r3
   22702:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   22704:	683b      	ldr	r3, [r7, #0]
   22706:	0a1b      	lsrs	r3, r3, #8
   22708:	b2da      	uxtb	r2, r3
   2270a:	2314      	movs	r3, #20
   2270c:	18fb      	adds	r3, r7, r3
   2270e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   22710:	683b      	ldr	r3, [r7, #0]
   22712:	b2da      	uxtb	r2, r3
   22714:	2314      	movs	r3, #20
   22716:	18fb      	adds	r3, r7, r3
   22718:	719a      	strb	r2, [r3, #6]
		len = 8;
   2271a:	231f      	movs	r3, #31
   2271c:	18fb      	adds	r3, r7, r3
   2271e:	2208      	movs	r2, #8
   22720:	701a      	strb	r2, [r3, #0]
		break;
   22722:	e067      	b.n	227f4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   22724:	68bb      	ldr	r3, [r7, #8]
   22726:	0a1b      	lsrs	r3, r3, #8
   22728:	b2da      	uxtb	r2, r3
   2272a:	2314      	movs	r3, #20
   2272c:	18fb      	adds	r3, r7, r3
   2272e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22730:	2330      	movs	r3, #48	; 0x30
   22732:	18fb      	adds	r3, r7, r3
   22734:	781b      	ldrb	r3, [r3, #0]
   22736:	2b00      	cmp	r3, #0
   22738:	d009      	beq.n	2274e <spi_cmd+0x1da>
   2273a:	2314      	movs	r3, #20
   2273c:	18fb      	adds	r3, r7, r3
   2273e:	785b      	ldrb	r3, [r3, #1]
   22740:	2280      	movs	r2, #128	; 0x80
   22742:	4252      	negs	r2, r2
   22744:	4313      	orrs	r3, r2
   22746:	b2da      	uxtb	r2, r3
   22748:	2314      	movs	r3, #20
   2274a:	18fb      	adds	r3, r7, r3
   2274c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2274e:	68bb      	ldr	r3, [r7, #8]
   22750:	b2da      	uxtb	r2, r3
   22752:	2314      	movs	r3, #20
   22754:	18fb      	adds	r3, r7, r3
   22756:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   22758:	687b      	ldr	r3, [r7, #4]
   2275a:	0e1b      	lsrs	r3, r3, #24
   2275c:	b2da      	uxtb	r2, r3
   2275e:	2314      	movs	r3, #20
   22760:	18fb      	adds	r3, r7, r3
   22762:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   22764:	687b      	ldr	r3, [r7, #4]
   22766:	0c1b      	lsrs	r3, r3, #16
   22768:	b2da      	uxtb	r2, r3
   2276a:	2314      	movs	r3, #20
   2276c:	18fb      	adds	r3, r7, r3
   2276e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   22770:	687b      	ldr	r3, [r7, #4]
   22772:	0a1b      	lsrs	r3, r3, #8
   22774:	b2da      	uxtb	r2, r3
   22776:	2314      	movs	r3, #20
   22778:	18fb      	adds	r3, r7, r3
   2277a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2277c:	687b      	ldr	r3, [r7, #4]
   2277e:	b2da      	uxtb	r2, r3
   22780:	2314      	movs	r3, #20
   22782:	18fb      	adds	r3, r7, r3
   22784:	719a      	strb	r2, [r3, #6]
		len = 8;
   22786:	231f      	movs	r3, #31
   22788:	18fb      	adds	r3, r7, r3
   2278a:	2208      	movs	r2, #8
   2278c:	701a      	strb	r2, [r3, #0]
		break;
   2278e:	e031      	b.n	227f4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   22790:	68bb      	ldr	r3, [r7, #8]
   22792:	0c1b      	lsrs	r3, r3, #16
   22794:	b2da      	uxtb	r2, r3
   22796:	2314      	movs	r3, #20
   22798:	18fb      	adds	r3, r7, r3
   2279a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2279c:	68bb      	ldr	r3, [r7, #8]
   2279e:	0a1b      	lsrs	r3, r3, #8
   227a0:	b2da      	uxtb	r2, r3
   227a2:	2314      	movs	r3, #20
   227a4:	18fb      	adds	r3, r7, r3
   227a6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   227a8:	68bb      	ldr	r3, [r7, #8]
   227aa:	b2da      	uxtb	r2, r3
   227ac:	2314      	movs	r3, #20
   227ae:	18fb      	adds	r3, r7, r3
   227b0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   227b2:	687b      	ldr	r3, [r7, #4]
   227b4:	0e1b      	lsrs	r3, r3, #24
   227b6:	b2da      	uxtb	r2, r3
   227b8:	2314      	movs	r3, #20
   227ba:	18fb      	adds	r3, r7, r3
   227bc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   227be:	687b      	ldr	r3, [r7, #4]
   227c0:	0c1b      	lsrs	r3, r3, #16
   227c2:	b2da      	uxtb	r2, r3
   227c4:	2314      	movs	r3, #20
   227c6:	18fb      	adds	r3, r7, r3
   227c8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   227ca:	687b      	ldr	r3, [r7, #4]
   227cc:	0a1b      	lsrs	r3, r3, #8
   227ce:	b2da      	uxtb	r2, r3
   227d0:	2314      	movs	r3, #20
   227d2:	18fb      	adds	r3, r7, r3
   227d4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   227d6:	687b      	ldr	r3, [r7, #4]
   227d8:	b2da      	uxtb	r2, r3
   227da:	2314      	movs	r3, #20
   227dc:	18fb      	adds	r3, r7, r3
   227de:	71da      	strb	r2, [r3, #7]
		len = 9;
   227e0:	231f      	movs	r3, #31
   227e2:	18fb      	adds	r3, r7, r3
   227e4:	2209      	movs	r2, #9
   227e6:	701a      	strb	r2, [r3, #0]
		break;
   227e8:	e004      	b.n	227f4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   227ea:	231e      	movs	r3, #30
   227ec:	18fb      	adds	r3, r7, r3
   227ee:	2200      	movs	r2, #0
   227f0:	701a      	strb	r2, [r3, #0]
		break;
   227f2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   227f4:	231e      	movs	r3, #30
   227f6:	18fb      	adds	r3, r7, r3
   227f8:	781b      	ldrb	r3, [r3, #0]
   227fa:	b25b      	sxtb	r3, r3
   227fc:	2b00      	cmp	r3, #0
   227fe:	d03f      	beq.n	22880 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   22800:	4b24      	ldr	r3, [pc, #144]	; (22894 <spi_cmd+0x320>)
   22802:	781b      	ldrb	r3, [r3, #0]
   22804:	2b00      	cmp	r3, #0
   22806:	d115      	bne.n	22834 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   22808:	231f      	movs	r3, #31
   2280a:	18fb      	adds	r3, r7, r3
   2280c:	781b      	ldrb	r3, [r3, #0]
   2280e:	1e5c      	subs	r4, r3, #1
   22810:	231f      	movs	r3, #31
   22812:	18fb      	adds	r3, r7, r3
   22814:	781b      	ldrb	r3, [r3, #0]
   22816:	3b01      	subs	r3, #1
   22818:	001a      	movs	r2, r3
   2281a:	2314      	movs	r3, #20
   2281c:	18fb      	adds	r3, r7, r3
   2281e:	0019      	movs	r1, r3
   22820:	207f      	movs	r0, #127	; 0x7f
   22822:	4b1d      	ldr	r3, [pc, #116]	; (22898 <spi_cmd+0x324>)
   22824:	4798      	blx	r3
   22826:	0003      	movs	r3, r0
   22828:	18db      	adds	r3, r3, r3
   2282a:	b2da      	uxtb	r2, r3
   2282c:	2314      	movs	r3, #20
   2282e:	18fb      	adds	r3, r7, r3
   22830:	551a      	strb	r2, [r3, r4]
   22832:	e006      	b.n	22842 <spi_cmd+0x2ce>
		else
			len-=1;
   22834:	231f      	movs	r3, #31
   22836:	18fb      	adds	r3, r7, r3
   22838:	221f      	movs	r2, #31
   2283a:	18ba      	adds	r2, r7, r2
   2283c:	7812      	ldrb	r2, [r2, #0]
   2283e:	3a01      	subs	r2, #1
   22840:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   22842:	231f      	movs	r3, #31
   22844:	18fb      	adds	r3, r7, r3
   22846:	781b      	ldrb	r3, [r3, #0]
   22848:	b29a      	uxth	r2, r3
   2284a:	2314      	movs	r3, #20
   2284c:	18fb      	adds	r3, r7, r3
   2284e:	0011      	movs	r1, r2
   22850:	0018      	movs	r0, r3
   22852:	4b12      	ldr	r3, [pc, #72]	; (2289c <spi_cmd+0x328>)
   22854:	4798      	blx	r3
   22856:	1e03      	subs	r3, r0, #0
   22858:	d012      	beq.n	22880 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2285a:	2390      	movs	r3, #144	; 0x90
   2285c:	005a      	lsls	r2, r3, #1
   2285e:	4910      	ldr	r1, [pc, #64]	; (228a0 <spi_cmd+0x32c>)
   22860:	4b10      	ldr	r3, [pc, #64]	; (228a4 <spi_cmd+0x330>)
   22862:	0018      	movs	r0, r3
   22864:	4b10      	ldr	r3, [pc, #64]	; (228a8 <spi_cmd+0x334>)
   22866:	4798      	blx	r3
   22868:	4b10      	ldr	r3, [pc, #64]	; (228ac <spi_cmd+0x338>)
   2286a:	0018      	movs	r0, r3
   2286c:	4b0e      	ldr	r3, [pc, #56]	; (228a8 <spi_cmd+0x334>)
   2286e:	4798      	blx	r3
   22870:	4b0f      	ldr	r3, [pc, #60]	; (228b0 <spi_cmd+0x33c>)
   22872:	0018      	movs	r0, r3
   22874:	4b0c      	ldr	r3, [pc, #48]	; (228a8 <spi_cmd+0x334>)
   22876:	4798      	blx	r3
			result = N_FAIL;
   22878:	231e      	movs	r3, #30
   2287a:	18fb      	adds	r3, r7, r3
   2287c:	2200      	movs	r2, #0
   2287e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   22880:	231e      	movs	r3, #30
   22882:	18fb      	adds	r3, r7, r3
   22884:	781b      	ldrb	r3, [r3, #0]
   22886:	b25b      	sxtb	r3, r3
}
   22888:	0018      	movs	r0, r3
   2288a:	46bd      	mov	sp, r7
   2288c:	b009      	add	sp, #36	; 0x24
   2288e:	bd90      	pop	{r4, r7, pc}
   22890:	00038d98 	.word	0x00038d98
   22894:	2000427c 	.word	0x2000427c
   22898:	00022525 	.word	0x00022525
   2289c:	0002246d 	.word	0x0002246d
   228a0:	00038e10 	.word	0x00038e10
   228a4:	00038820 	.word	0x00038820
   228a8:	0001cf79 	.word	0x0001cf79
   228ac:	00038834 	.word	0x00038834
   228b0:	00038860 	.word	0x00038860

000228b4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   228b4:	b590      	push	{r4, r7, lr}
   228b6:	b085      	sub	sp, #20
   228b8:	af00      	add	r7, sp, #0
   228ba:	0002      	movs	r2, r0
   228bc:	1dfb      	adds	r3, r7, #7
   228be:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   228c0:	230e      	movs	r3, #14
   228c2:	18fb      	adds	r3, r7, r3
   228c4:	2201      	movs	r2, #1
   228c6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   228c8:	4b32      	ldr	r3, [pc, #200]	; (22994 <spi_data_rsp+0xe0>)
   228ca:	781b      	ldrb	r3, [r3, #0]
   228cc:	2b00      	cmp	r3, #0
   228ce:	d104      	bne.n	228da <spi_data_rsp+0x26>
		len = 2;
   228d0:	230f      	movs	r3, #15
   228d2:	18fb      	adds	r3, r7, r3
   228d4:	2202      	movs	r2, #2
   228d6:	701a      	strb	r2, [r3, #0]
   228d8:	e003      	b.n	228e2 <spi_data_rsp+0x2e>
	else
		len = 3;
   228da:	230f      	movs	r3, #15
   228dc:	18fb      	adds	r3, r7, r3
   228de:	2203      	movs	r2, #3
   228e0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   228e2:	230f      	movs	r3, #15
   228e4:	18fb      	adds	r3, r7, r3
   228e6:	781b      	ldrb	r3, [r3, #0]
   228e8:	b29a      	uxth	r2, r3
   228ea:	2308      	movs	r3, #8
   228ec:	18fb      	adds	r3, r7, r3
   228ee:	0011      	movs	r1, r2
   228f0:	0018      	movs	r0, r3
   228f2:	4b29      	ldr	r3, [pc, #164]	; (22998 <spi_data_rsp+0xe4>)
   228f4:	4798      	blx	r3
   228f6:	1e03      	subs	r3, r0, #0
   228f8:	d013      	beq.n	22922 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   228fa:	239a      	movs	r3, #154	; 0x9a
   228fc:	005a      	lsls	r2, r3, #1
   228fe:	4927      	ldr	r1, [pc, #156]	; (2299c <spi_data_rsp+0xe8>)
   22900:	4b27      	ldr	r3, [pc, #156]	; (229a0 <spi_data_rsp+0xec>)
   22902:	0018      	movs	r0, r3
   22904:	4b27      	ldr	r3, [pc, #156]	; (229a4 <spi_data_rsp+0xf0>)
   22906:	4798      	blx	r3
   22908:	4b27      	ldr	r3, [pc, #156]	; (229a8 <spi_data_rsp+0xf4>)
   2290a:	0018      	movs	r0, r3
   2290c:	4b25      	ldr	r3, [pc, #148]	; (229a4 <spi_data_rsp+0xf0>)
   2290e:	4798      	blx	r3
   22910:	4b26      	ldr	r3, [pc, #152]	; (229ac <spi_data_rsp+0xf8>)
   22912:	0018      	movs	r0, r3
   22914:	4b23      	ldr	r3, [pc, #140]	; (229a4 <spi_data_rsp+0xf0>)
   22916:	4798      	blx	r3
		result = N_FAIL;
   22918:	230e      	movs	r3, #14
   2291a:	18fb      	adds	r3, r7, r3
   2291c:	2200      	movs	r2, #0
   2291e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22920:	e030      	b.n	22984 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   22922:	230f      	movs	r3, #15
   22924:	18fb      	adds	r3, r7, r3
   22926:	781b      	ldrb	r3, [r3, #0]
   22928:	3b01      	subs	r3, #1
   2292a:	2208      	movs	r2, #8
   2292c:	18ba      	adds	r2, r7, r2
   2292e:	5cd3      	ldrb	r3, [r2, r3]
   22930:	2b00      	cmp	r3, #0
   22932:	d108      	bne.n	22946 <spi_data_rsp+0x92>
   22934:	230f      	movs	r3, #15
   22936:	18fb      	adds	r3, r7, r3
   22938:	781b      	ldrb	r3, [r3, #0]
   2293a:	3b02      	subs	r3, #2
   2293c:	2208      	movs	r2, #8
   2293e:	18ba      	adds	r2, r7, r2
   22940:	5cd3      	ldrb	r3, [r2, r3]
   22942:	2bc3      	cmp	r3, #195	; 0xc3
   22944:	d01e      	beq.n	22984 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   22946:	233c      	movs	r3, #60	; 0x3c
   22948:	33ff      	adds	r3, #255	; 0xff
   2294a:	001a      	movs	r2, r3
   2294c:	4913      	ldr	r1, [pc, #76]	; (2299c <spi_data_rsp+0xe8>)
   2294e:	4b14      	ldr	r3, [pc, #80]	; (229a0 <spi_data_rsp+0xec>)
   22950:	0018      	movs	r0, r3
   22952:	4b14      	ldr	r3, [pc, #80]	; (229a4 <spi_data_rsp+0xf0>)
   22954:	4798      	blx	r3
   22956:	2308      	movs	r3, #8
   22958:	18fb      	adds	r3, r7, r3
   2295a:	781b      	ldrb	r3, [r3, #0]
   2295c:	0019      	movs	r1, r3
   2295e:	2308      	movs	r3, #8
   22960:	18fb      	adds	r3, r7, r3
   22962:	785b      	ldrb	r3, [r3, #1]
   22964:	001a      	movs	r2, r3
   22966:	2308      	movs	r3, #8
   22968:	18fb      	adds	r3, r7, r3
   2296a:	789b      	ldrb	r3, [r3, #2]
   2296c:	4810      	ldr	r0, [pc, #64]	; (229b0 <spi_data_rsp+0xfc>)
   2296e:	4c0d      	ldr	r4, [pc, #52]	; (229a4 <spi_data_rsp+0xf0>)
   22970:	47a0      	blx	r4
   22972:	4b0e      	ldr	r3, [pc, #56]	; (229ac <spi_data_rsp+0xf8>)
   22974:	0018      	movs	r0, r3
   22976:	4b0b      	ldr	r3, [pc, #44]	; (229a4 <spi_data_rsp+0xf0>)
   22978:	4798      	blx	r3
		result = N_FAIL;
   2297a:	230e      	movs	r3, #14
   2297c:	18fb      	adds	r3, r7, r3
   2297e:	2200      	movs	r2, #0
   22980:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22982:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   22984:	230e      	movs	r3, #14
   22986:	18fb      	adds	r3, r7, r3
   22988:	781b      	ldrb	r3, [r3, #0]
   2298a:	b25b      	sxtb	r3, r3
}
   2298c:	0018      	movs	r0, r3
   2298e:	46bd      	mov	sp, r7
   22990:	b005      	add	sp, #20
   22992:	bd90      	pop	{r4, r7, pc}
   22994:	2000427c 	.word	0x2000427c
   22998:	00022429 	.word	0x00022429
   2299c:	00038e18 	.word	0x00038e18
   229a0:	00038820 	.word	0x00038820
   229a4:	0001cf79 	.word	0x0001cf79
   229a8:	00038864 	.word	0x00038864
   229ac:	00038860 	.word	0x00038860
   229b0:	00038884 	.word	0x00038884

000229b4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   229b4:	b580      	push	{r7, lr}
   229b6:	b084      	sub	sp, #16
   229b8:	af00      	add	r7, sp, #0
   229ba:	0002      	movs	r2, r0
   229bc:	1dfb      	adds	r3, r7, #7
   229be:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   229c0:	230f      	movs	r3, #15
   229c2:	18fb      	adds	r3, r7, r3
   229c4:	2201      	movs	r2, #1
   229c6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   229c8:	1dfb      	adds	r3, r7, #7
   229ca:	781b      	ldrb	r3, [r3, #0]
   229cc:	2bcf      	cmp	r3, #207	; 0xcf
   229ce:	d007      	beq.n	229e0 <spi_cmd_rsp+0x2c>
   229d0:	1dfb      	adds	r3, r7, #7
   229d2:	781b      	ldrb	r3, [r3, #0]
   229d4:	2bc5      	cmp	r3, #197	; 0xc5
   229d6:	d003      	beq.n	229e0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   229d8:	1dfb      	adds	r3, r7, #7
   229da:	781b      	ldrb	r3, [r3, #0]
   229dc:	2bc6      	cmp	r3, #198	; 0xc6
   229de:	d10c      	bne.n	229fa <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   229e0:	230d      	movs	r3, #13
   229e2:	18fb      	adds	r3, r7, r3
   229e4:	2101      	movs	r1, #1
   229e6:	0018      	movs	r0, r3
   229e8:	4b3b      	ldr	r3, [pc, #236]	; (22ad8 <spi_cmd_rsp+0x124>)
   229ea:	4798      	blx	r3
   229ec:	1e03      	subs	r3, r0, #0
   229ee:	d004      	beq.n	229fa <spi_cmd_rsp+0x46>
			result = N_FAIL;
   229f0:	230f      	movs	r3, #15
   229f2:	18fb      	adds	r3, r7, r3
   229f4:	2200      	movs	r2, #0
   229f6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   229f8:	e065      	b.n	22ac6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   229fa:	230e      	movs	r3, #14
   229fc:	18fb      	adds	r3, r7, r3
   229fe:	220a      	movs	r2, #10
   22a00:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22a02:	230d      	movs	r3, #13
   22a04:	18fb      	adds	r3, r7, r3
   22a06:	2101      	movs	r1, #1
   22a08:	0018      	movs	r0, r3
   22a0a:	4b33      	ldr	r3, [pc, #204]	; (22ad8 <spi_cmd_rsp+0x124>)
   22a0c:	4798      	blx	r3
   22a0e:	1e03      	subs	r3, r0, #0
   22a10:	d014      	beq.n	22a3c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22a12:	235c      	movs	r3, #92	; 0x5c
   22a14:	33ff      	adds	r3, #255	; 0xff
   22a16:	001a      	movs	r2, r3
   22a18:	4930      	ldr	r1, [pc, #192]	; (22adc <spi_cmd_rsp+0x128>)
   22a1a:	4b31      	ldr	r3, [pc, #196]	; (22ae0 <spi_cmd_rsp+0x12c>)
   22a1c:	0018      	movs	r0, r3
   22a1e:	4b31      	ldr	r3, [pc, #196]	; (22ae4 <spi_cmd_rsp+0x130>)
   22a20:	4798      	blx	r3
   22a22:	4b31      	ldr	r3, [pc, #196]	; (22ae8 <spi_cmd_rsp+0x134>)
   22a24:	0018      	movs	r0, r3
   22a26:	4b2f      	ldr	r3, [pc, #188]	; (22ae4 <spi_cmd_rsp+0x130>)
   22a28:	4798      	blx	r3
   22a2a:	4b30      	ldr	r3, [pc, #192]	; (22aec <spi_cmd_rsp+0x138>)
   22a2c:	0018      	movs	r0, r3
   22a2e:	4b2d      	ldr	r3, [pc, #180]	; (22ae4 <spi_cmd_rsp+0x130>)
   22a30:	4798      	blx	r3
			result = N_FAIL;
   22a32:	230f      	movs	r3, #15
   22a34:	18fb      	adds	r3, r7, r3
   22a36:	2200      	movs	r2, #0
   22a38:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22a3a:	e044      	b.n	22ac6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   22a3c:	230d      	movs	r3, #13
   22a3e:	18fb      	adds	r3, r7, r3
   22a40:	781b      	ldrb	r3, [r3, #0]
   22a42:	1dfa      	adds	r2, r7, #7
   22a44:	7812      	ldrb	r2, [r2, #0]
   22a46:	429a      	cmp	r2, r3
   22a48:	d00b      	beq.n	22a62 <spi_cmd_rsp+0xae>
   22a4a:	230e      	movs	r3, #14
   22a4c:	18fb      	adds	r3, r7, r3
   22a4e:	781b      	ldrb	r3, [r3, #0]
   22a50:	b25b      	sxtb	r3, r3
   22a52:	b2da      	uxtb	r2, r3
   22a54:	3a01      	subs	r2, #1
   22a56:	b2d1      	uxtb	r1, r2
   22a58:	220e      	movs	r2, #14
   22a5a:	18ba      	adds	r2, r7, r2
   22a5c:	7011      	strb	r1, [r2, #0]
   22a5e:	2b00      	cmp	r3, #0
   22a60:	dccf      	bgt.n	22a02 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22a62:	230e      	movs	r3, #14
   22a64:	18fb      	adds	r3, r7, r3
   22a66:	220a      	movs	r2, #10
   22a68:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22a6a:	230d      	movs	r3, #13
   22a6c:	18fb      	adds	r3, r7, r3
   22a6e:	2101      	movs	r1, #1
   22a70:	0018      	movs	r0, r3
   22a72:	4b19      	ldr	r3, [pc, #100]	; (22ad8 <spi_cmd_rsp+0x124>)
   22a74:	4798      	blx	r3
   22a76:	1e03      	subs	r3, r0, #0
   22a78:	d014      	beq.n	22aa4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22a7a:	236a      	movs	r3, #106	; 0x6a
   22a7c:	33ff      	adds	r3, #255	; 0xff
   22a7e:	001a      	movs	r2, r3
   22a80:	4916      	ldr	r1, [pc, #88]	; (22adc <spi_cmd_rsp+0x128>)
   22a82:	4b17      	ldr	r3, [pc, #92]	; (22ae0 <spi_cmd_rsp+0x12c>)
   22a84:	0018      	movs	r0, r3
   22a86:	4b17      	ldr	r3, [pc, #92]	; (22ae4 <spi_cmd_rsp+0x130>)
   22a88:	4798      	blx	r3
   22a8a:	4b17      	ldr	r3, [pc, #92]	; (22ae8 <spi_cmd_rsp+0x134>)
   22a8c:	0018      	movs	r0, r3
   22a8e:	4b15      	ldr	r3, [pc, #84]	; (22ae4 <spi_cmd_rsp+0x130>)
   22a90:	4798      	blx	r3
   22a92:	4b16      	ldr	r3, [pc, #88]	; (22aec <spi_cmd_rsp+0x138>)
   22a94:	0018      	movs	r0, r3
   22a96:	4b13      	ldr	r3, [pc, #76]	; (22ae4 <spi_cmd_rsp+0x130>)
   22a98:	4798      	blx	r3
			result = N_FAIL;
   22a9a:	230f      	movs	r3, #15
   22a9c:	18fb      	adds	r3, r7, r3
   22a9e:	2200      	movs	r2, #0
   22aa0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22aa2:	e010      	b.n	22ac6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   22aa4:	230d      	movs	r3, #13
   22aa6:	18fb      	adds	r3, r7, r3
   22aa8:	781b      	ldrb	r3, [r3, #0]
   22aaa:	2b00      	cmp	r3, #0
   22aac:	d00b      	beq.n	22ac6 <spi_cmd_rsp+0x112>
   22aae:	230e      	movs	r3, #14
   22ab0:	18fb      	adds	r3, r7, r3
   22ab2:	781b      	ldrb	r3, [r3, #0]
   22ab4:	b25b      	sxtb	r3, r3
   22ab6:	b2da      	uxtb	r2, r3
   22ab8:	3a01      	subs	r2, #1
   22aba:	b2d1      	uxtb	r1, r2
   22abc:	220e      	movs	r2, #14
   22abe:	18ba      	adds	r2, r7, r2
   22ac0:	7011      	strb	r1, [r2, #0]
   22ac2:	2b00      	cmp	r3, #0
   22ac4:	dcd1      	bgt.n	22a6a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   22ac6:	230f      	movs	r3, #15
   22ac8:	18fb      	adds	r3, r7, r3
   22aca:	781b      	ldrb	r3, [r3, #0]
   22acc:	b25b      	sxtb	r3, r3
}
   22ace:	0018      	movs	r0, r3
   22ad0:	46bd      	mov	sp, r7
   22ad2:	b004      	add	sp, #16
   22ad4:	bd80      	pop	{r7, pc}
   22ad6:	46c0      	nop			; (mov r8, r8)
   22ad8:	00022429 	.word	0x00022429
   22adc:	00038e28 	.word	0x00038e28
   22ae0:	00038820 	.word	0x00038820
   22ae4:	0001cf79 	.word	0x0001cf79
   22ae8:	000388b4 	.word	0x000388b4
   22aec:	00038860 	.word	0x00038860

00022af0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22af0:	b590      	push	{r4, r7, lr}
   22af2:	b09f      	sub	sp, #124	; 0x7c
   22af4:	af00      	add	r7, sp, #0
   22af6:	60b9      	str	r1, [r7, #8]
   22af8:	607a      	str	r2, [r7, #4]
   22afa:	603b      	str	r3, [r7, #0]
   22afc:	230f      	movs	r3, #15
   22afe:	18fb      	adds	r3, r7, r3
   22b00:	1c02      	adds	r2, r0, #0
   22b02:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22b04:	2300      	movs	r3, #0
   22b06:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   22b08:	2301      	movs	r3, #1
   22b0a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   22b0c:	2338      	movs	r3, #56	; 0x38
   22b0e:	18fb      	adds	r3, r7, r3
   22b10:	220f      	movs	r2, #15
   22b12:	18ba      	adds	r2, r7, r2
   22b14:	7812      	ldrb	r2, [r2, #0]
   22b16:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22b18:	230f      	movs	r3, #15
   22b1a:	18fb      	adds	r3, r7, r3
   22b1c:	781b      	ldrb	r3, [r3, #0]
   22b1e:	3bc1      	subs	r3, #193	; 0xc1
   22b20:	2b0e      	cmp	r3, #14
   22b22:	d900      	bls.n	22b26 <spi_cmd_complete+0x36>
   22b24:	e103      	b.n	22d2e <spi_cmd_complete+0x23e>
   22b26:	009a      	lsls	r2, r3, #2
   22b28:	4bd1      	ldr	r3, [pc, #836]	; (22e70 <spi_cmd_complete+0x380>)
   22b2a:	18d3      	adds	r3, r2, r3
   22b2c:	681b      	ldr	r3, [r3, #0]
   22b2e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22b30:	68bb      	ldr	r3, [r7, #8]
   22b32:	0c1b      	lsrs	r3, r3, #16
   22b34:	b2da      	uxtb	r2, r3
   22b36:	2338      	movs	r3, #56	; 0x38
   22b38:	18fb      	adds	r3, r7, r3
   22b3a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22b3c:	68bb      	ldr	r3, [r7, #8]
   22b3e:	0a1b      	lsrs	r3, r3, #8
   22b40:	b2da      	uxtb	r2, r3
   22b42:	2338      	movs	r3, #56	; 0x38
   22b44:	18fb      	adds	r3, r7, r3
   22b46:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22b48:	68bb      	ldr	r3, [r7, #8]
   22b4a:	b2da      	uxtb	r2, r3
   22b4c:	2338      	movs	r3, #56	; 0x38
   22b4e:	18fb      	adds	r3, r7, r3
   22b50:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b52:	2305      	movs	r3, #5
   22b54:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   22b56:	e0ed      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   22b58:	68bb      	ldr	r3, [r7, #8]
   22b5a:	0a1b      	lsrs	r3, r3, #8
   22b5c:	b2da      	uxtb	r2, r3
   22b5e:	2338      	movs	r3, #56	; 0x38
   22b60:	18fb      	adds	r3, r7, r3
   22b62:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22b64:	2388      	movs	r3, #136	; 0x88
   22b66:	18fb      	adds	r3, r7, r3
   22b68:	781b      	ldrb	r3, [r3, #0]
   22b6a:	2b01      	cmp	r3, #1
   22b6c:	d109      	bne.n	22b82 <spi_cmd_complete+0x92>
   22b6e:	2338      	movs	r3, #56	; 0x38
   22b70:	18fb      	adds	r3, r7, r3
   22b72:	785b      	ldrb	r3, [r3, #1]
   22b74:	2280      	movs	r2, #128	; 0x80
   22b76:	4252      	negs	r2, r2
   22b78:	4313      	orrs	r3, r2
   22b7a:	b2da      	uxtb	r2, r3
   22b7c:	2338      	movs	r3, #56	; 0x38
   22b7e:	18fb      	adds	r3, r7, r3
   22b80:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   22b82:	68bb      	ldr	r3, [r7, #8]
   22b84:	b2da      	uxtb	r2, r3
   22b86:	2338      	movs	r3, #56	; 0x38
   22b88:	18fb      	adds	r3, r7, r3
   22b8a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22b8c:	2338      	movs	r3, #56	; 0x38
   22b8e:	18fb      	adds	r3, r7, r3
   22b90:	2200      	movs	r2, #0
   22b92:	70da      	strb	r2, [r3, #3]
		len = 5;
   22b94:	2305      	movs	r3, #5
   22b96:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22b98:	e0cc      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   22b9a:	2338      	movs	r3, #56	; 0x38
   22b9c:	18fb      	adds	r3, r7, r3
   22b9e:	2200      	movs	r2, #0
   22ba0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22ba2:	2338      	movs	r3, #56	; 0x38
   22ba4:	18fb      	adds	r3, r7, r3
   22ba6:	2200      	movs	r2, #0
   22ba8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22baa:	2338      	movs	r3, #56	; 0x38
   22bac:	18fb      	adds	r3, r7, r3
   22bae:	2200      	movs	r2, #0
   22bb0:	70da      	strb	r2, [r3, #3]
		len = 5;
   22bb2:	2305      	movs	r3, #5
   22bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22bb6:	e0bd      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   22bb8:	2338      	movs	r3, #56	; 0x38
   22bba:	18fb      	adds	r3, r7, r3
   22bbc:	2200      	movs	r2, #0
   22bbe:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22bc0:	2338      	movs	r3, #56	; 0x38
   22bc2:	18fb      	adds	r3, r7, r3
   22bc4:	2200      	movs	r2, #0
   22bc6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22bc8:	2338      	movs	r3, #56	; 0x38
   22bca:	18fb      	adds	r3, r7, r3
   22bcc:	2200      	movs	r2, #0
   22bce:	70da      	strb	r2, [r3, #3]
		len = 5;
   22bd0:	2305      	movs	r3, #5
   22bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22bd4:	e0ae      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   22bd6:	2338      	movs	r3, #56	; 0x38
   22bd8:	18fb      	adds	r3, r7, r3
   22bda:	22ff      	movs	r2, #255	; 0xff
   22bdc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   22bde:	2338      	movs	r3, #56	; 0x38
   22be0:	18fb      	adds	r3, r7, r3
   22be2:	22ff      	movs	r2, #255	; 0xff
   22be4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   22be6:	2338      	movs	r3, #56	; 0x38
   22be8:	18fb      	adds	r3, r7, r3
   22bea:	22ff      	movs	r2, #255	; 0xff
   22bec:	70da      	strb	r2, [r3, #3]
		len = 5;
   22bee:	2305      	movs	r3, #5
   22bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22bf2:	e09f      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22bf4:	68bb      	ldr	r3, [r7, #8]
   22bf6:	0c1b      	lsrs	r3, r3, #16
   22bf8:	b2da      	uxtb	r2, r3
   22bfa:	2338      	movs	r3, #56	; 0x38
   22bfc:	18fb      	adds	r3, r7, r3
   22bfe:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22c00:	68bb      	ldr	r3, [r7, #8]
   22c02:	0a1b      	lsrs	r3, r3, #8
   22c04:	b2da      	uxtb	r2, r3
   22c06:	2338      	movs	r3, #56	; 0x38
   22c08:	18fb      	adds	r3, r7, r3
   22c0a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22c0c:	68bb      	ldr	r3, [r7, #8]
   22c0e:	b2da      	uxtb	r2, r3
   22c10:	2338      	movs	r3, #56	; 0x38
   22c12:	18fb      	adds	r3, r7, r3
   22c14:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   22c16:	683b      	ldr	r3, [r7, #0]
   22c18:	0a1b      	lsrs	r3, r3, #8
   22c1a:	b2da      	uxtb	r2, r3
   22c1c:	2338      	movs	r3, #56	; 0x38
   22c1e:	18fb      	adds	r3, r7, r3
   22c20:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22c22:	683b      	ldr	r3, [r7, #0]
   22c24:	b2da      	uxtb	r2, r3
   22c26:	2338      	movs	r3, #56	; 0x38
   22c28:	18fb      	adds	r3, r7, r3
   22c2a:	715a      	strb	r2, [r3, #5]
		len = 7;
   22c2c:	2307      	movs	r3, #7
   22c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22c30:	e080      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22c32:	68bb      	ldr	r3, [r7, #8]
   22c34:	0c1b      	lsrs	r3, r3, #16
   22c36:	b2da      	uxtb	r2, r3
   22c38:	2338      	movs	r3, #56	; 0x38
   22c3a:	18fb      	adds	r3, r7, r3
   22c3c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22c3e:	68bb      	ldr	r3, [r7, #8]
   22c40:	0a1b      	lsrs	r3, r3, #8
   22c42:	b2da      	uxtb	r2, r3
   22c44:	2338      	movs	r3, #56	; 0x38
   22c46:	18fb      	adds	r3, r7, r3
   22c48:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22c4a:	68bb      	ldr	r3, [r7, #8]
   22c4c:	b2da      	uxtb	r2, r3
   22c4e:	2338      	movs	r3, #56	; 0x38
   22c50:	18fb      	adds	r3, r7, r3
   22c52:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   22c54:	683b      	ldr	r3, [r7, #0]
   22c56:	0c1b      	lsrs	r3, r3, #16
   22c58:	b2da      	uxtb	r2, r3
   22c5a:	2338      	movs	r3, #56	; 0x38
   22c5c:	18fb      	adds	r3, r7, r3
   22c5e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   22c60:	683b      	ldr	r3, [r7, #0]
   22c62:	0a1b      	lsrs	r3, r3, #8
   22c64:	b2da      	uxtb	r2, r3
   22c66:	2338      	movs	r3, #56	; 0x38
   22c68:	18fb      	adds	r3, r7, r3
   22c6a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   22c6c:	683b      	ldr	r3, [r7, #0]
   22c6e:	b2da      	uxtb	r2, r3
   22c70:	2338      	movs	r3, #56	; 0x38
   22c72:	18fb      	adds	r3, r7, r3
   22c74:	719a      	strb	r2, [r3, #6]
		len = 8;
   22c76:	2308      	movs	r3, #8
   22c78:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22c7a:	e05b      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   22c7c:	68bb      	ldr	r3, [r7, #8]
   22c7e:	0a1b      	lsrs	r3, r3, #8
   22c80:	b2da      	uxtb	r2, r3
   22c82:	2338      	movs	r3, #56	; 0x38
   22c84:	18fb      	adds	r3, r7, r3
   22c86:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22c88:	2388      	movs	r3, #136	; 0x88
   22c8a:	18fb      	adds	r3, r7, r3
   22c8c:	781b      	ldrb	r3, [r3, #0]
   22c8e:	2b01      	cmp	r3, #1
   22c90:	d109      	bne.n	22ca6 <spi_cmd_complete+0x1b6>
   22c92:	2338      	movs	r3, #56	; 0x38
   22c94:	18fb      	adds	r3, r7, r3
   22c96:	785b      	ldrb	r3, [r3, #1]
   22c98:	2280      	movs	r2, #128	; 0x80
   22c9a:	4252      	negs	r2, r2
   22c9c:	4313      	orrs	r3, r2
   22c9e:	b2da      	uxtb	r2, r3
   22ca0:	2338      	movs	r3, #56	; 0x38
   22ca2:	18fb      	adds	r3, r7, r3
   22ca4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   22ca6:	68bb      	ldr	r3, [r7, #8]
   22ca8:	b2da      	uxtb	r2, r3
   22caa:	2338      	movs	r3, #56	; 0x38
   22cac:	18fb      	adds	r3, r7, r3
   22cae:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   22cb0:	687b      	ldr	r3, [r7, #4]
   22cb2:	78da      	ldrb	r2, [r3, #3]
   22cb4:	2338      	movs	r3, #56	; 0x38
   22cb6:	18fb      	adds	r3, r7, r3
   22cb8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   22cba:	687b      	ldr	r3, [r7, #4]
   22cbc:	789a      	ldrb	r2, [r3, #2]
   22cbe:	2338      	movs	r3, #56	; 0x38
   22cc0:	18fb      	adds	r3, r7, r3
   22cc2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   22cc4:	687b      	ldr	r3, [r7, #4]
   22cc6:	785a      	ldrb	r2, [r3, #1]
   22cc8:	2338      	movs	r3, #56	; 0x38
   22cca:	18fb      	adds	r3, r7, r3
   22ccc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   22cce:	687b      	ldr	r3, [r7, #4]
   22cd0:	781a      	ldrb	r2, [r3, #0]
   22cd2:	2338      	movs	r3, #56	; 0x38
   22cd4:	18fb      	adds	r3, r7, r3
   22cd6:	719a      	strb	r2, [r3, #6]
		len = 8;
   22cd8:	2308      	movs	r3, #8
   22cda:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22cdc:	e02a      	b.n	22d34 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   22cde:	68bb      	ldr	r3, [r7, #8]
   22ce0:	0c1b      	lsrs	r3, r3, #16
   22ce2:	b2da      	uxtb	r2, r3
   22ce4:	2338      	movs	r3, #56	; 0x38
   22ce6:	18fb      	adds	r3, r7, r3
   22ce8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22cea:	68bb      	ldr	r3, [r7, #8]
   22cec:	0a1b      	lsrs	r3, r3, #8
   22cee:	b2da      	uxtb	r2, r3
   22cf0:	2338      	movs	r3, #56	; 0x38
   22cf2:	18fb      	adds	r3, r7, r3
   22cf4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   22cf6:	68bb      	ldr	r3, [r7, #8]
   22cf8:	b2da      	uxtb	r2, r3
   22cfa:	2338      	movs	r3, #56	; 0x38
   22cfc:	18fb      	adds	r3, r7, r3
   22cfe:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   22d00:	687b      	ldr	r3, [r7, #4]
   22d02:	78da      	ldrb	r2, [r3, #3]
   22d04:	2338      	movs	r3, #56	; 0x38
   22d06:	18fb      	adds	r3, r7, r3
   22d08:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   22d0a:	687b      	ldr	r3, [r7, #4]
   22d0c:	789a      	ldrb	r2, [r3, #2]
   22d0e:	2338      	movs	r3, #56	; 0x38
   22d10:	18fb      	adds	r3, r7, r3
   22d12:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   22d14:	687b      	ldr	r3, [r7, #4]
   22d16:	785a      	ldrb	r2, [r3, #1]
   22d18:	2338      	movs	r3, #56	; 0x38
   22d1a:	18fb      	adds	r3, r7, r3
   22d1c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   22d1e:	687b      	ldr	r3, [r7, #4]
   22d20:	781a      	ldrb	r2, [r3, #0]
   22d22:	2338      	movs	r3, #56	; 0x38
   22d24:	18fb      	adds	r3, r7, r3
   22d26:	71da      	strb	r2, [r3, #7]
		len = 9;
   22d28:	2309      	movs	r3, #9
   22d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22d2c:	e002      	b.n	22d34 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   22d2e:	2300      	movs	r3, #0
   22d30:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   22d32:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   22d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22d36:	2b01      	cmp	r3, #1
   22d38:	d001      	beq.n	22d3e <spi_cmd_complete+0x24e>
		return result;
   22d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22d3c:	e33a      	b.n	233b4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   22d3e:	4b4d      	ldr	r3, [pc, #308]	; (22e74 <spi_cmd_complete+0x384>)
   22d40:	781b      	ldrb	r3, [r3, #0]
   22d42:	2b00      	cmp	r3, #0
   22d44:	d111      	bne.n	22d6a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   22d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d48:	1e5c      	subs	r4, r3, #1
   22d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d4c:	3b01      	subs	r3, #1
   22d4e:	001a      	movs	r2, r3
   22d50:	2338      	movs	r3, #56	; 0x38
   22d52:	18fb      	adds	r3, r7, r3
   22d54:	0019      	movs	r1, r3
   22d56:	207f      	movs	r0, #127	; 0x7f
   22d58:	4b47      	ldr	r3, [pc, #284]	; (22e78 <spi_cmd_complete+0x388>)
   22d5a:	4798      	blx	r3
   22d5c:	0003      	movs	r3, r0
   22d5e:	18db      	adds	r3, r3, r3
   22d60:	b2da      	uxtb	r2, r3
   22d62:	2338      	movs	r3, #56	; 0x38
   22d64:	18fb      	adds	r3, r7, r3
   22d66:	551a      	strb	r2, [r3, r4]
   22d68:	e002      	b.n	22d70 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   22d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d6c:	3b01      	subs	r3, #1
   22d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   22d70:	230f      	movs	r3, #15
   22d72:	18fb      	adds	r3, r7, r3
   22d74:	781b      	ldrb	r3, [r3, #0]
   22d76:	2bcf      	cmp	r3, #207	; 0xcf
   22d78:	d009      	beq.n	22d8e <spi_cmd_complete+0x29e>
   22d7a:	230f      	movs	r3, #15
   22d7c:	18fb      	adds	r3, r7, r3
   22d7e:	781b      	ldrb	r3, [r3, #0]
   22d80:	2bc5      	cmp	r3, #197	; 0xc5
   22d82:	d004      	beq.n	22d8e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   22d84:	230f      	movs	r3, #15
   22d86:	18fb      	adds	r3, r7, r3
   22d88:	781b      	ldrb	r3, [r3, #0]
   22d8a:	2bc6      	cmp	r3, #198	; 0xc6
   22d8c:	d103      	bne.n	22d96 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22d90:	3306      	adds	r3, #6
   22d92:	673b      	str	r3, [r7, #112]	; 0x70
   22d94:	e018      	b.n	22dc8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   22d96:	230f      	movs	r3, #15
   22d98:	18fb      	adds	r3, r7, r3
   22d9a:	781b      	ldrb	r3, [r3, #0]
   22d9c:	2bc4      	cmp	r3, #196	; 0xc4
   22d9e:	d004      	beq.n	22daa <spi_cmd_complete+0x2ba>
   22da0:	230f      	movs	r3, #15
   22da2:	18fb      	adds	r3, r7, r3
   22da4:	781b      	ldrb	r3, [r3, #0]
   22da6:	2bca      	cmp	r3, #202	; 0xca
   22da8:	d10b      	bne.n	22dc2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   22daa:	4b32      	ldr	r3, [pc, #200]	; (22e74 <spi_cmd_complete+0x384>)
   22dac:	781b      	ldrb	r3, [r3, #0]
   22dae:	2b00      	cmp	r3, #0
   22db0:	d103      	bne.n	22dba <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22db4:	330c      	adds	r3, #12
   22db6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22db8:	e006      	b.n	22dc8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22dbc:	330a      	adds	r3, #10
   22dbe:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22dc0:	e002      	b.n	22dc8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22dc4:	3305      	adds	r3, #5
   22dc6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   22dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22dca:	2b20      	cmp	r3, #32
   22dcc:	d914      	bls.n	22df8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   22dce:	23f7      	movs	r3, #247	; 0xf7
   22dd0:	005a      	lsls	r2, r3, #1
   22dd2:	492a      	ldr	r1, [pc, #168]	; (22e7c <spi_cmd_complete+0x38c>)
   22dd4:	4b2a      	ldr	r3, [pc, #168]	; (22e80 <spi_cmd_complete+0x390>)
   22dd6:	0018      	movs	r0, r3
   22dd8:	4b2a      	ldr	r3, [pc, #168]	; (22e84 <spi_cmd_complete+0x394>)
   22dda:	4798      	blx	r3
   22ddc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   22dde:	4b2a      	ldr	r3, [pc, #168]	; (22e88 <spi_cmd_complete+0x398>)
   22de0:	2220      	movs	r2, #32
   22de2:	0018      	movs	r0, r3
   22de4:	4b27      	ldr	r3, [pc, #156]	; (22e84 <spi_cmd_complete+0x394>)
   22de6:	4798      	blx	r3
   22de8:	4b28      	ldr	r3, [pc, #160]	; (22e8c <spi_cmd_complete+0x39c>)
   22dea:	0018      	movs	r0, r3
   22dec:	4b25      	ldr	r3, [pc, #148]	; (22e84 <spi_cmd_complete+0x394>)
   22dee:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   22df0:	2300      	movs	r3, #0
   22df2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22df6:	e2dd      	b.n	233b4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   22df8:	2377      	movs	r3, #119	; 0x77
   22dfa:	18fb      	adds	r3, r7, r3
   22dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22dfe:	701a      	strb	r2, [r3, #0]
   22e00:	e00d      	b.n	22e1e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   22e02:	2377      	movs	r3, #119	; 0x77
   22e04:	18fb      	adds	r3, r7, r3
   22e06:	781b      	ldrb	r3, [r3, #0]
   22e08:	2238      	movs	r2, #56	; 0x38
   22e0a:	18ba      	adds	r2, r7, r2
   22e0c:	2100      	movs	r1, #0
   22e0e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   22e10:	2377      	movs	r3, #119	; 0x77
   22e12:	18fb      	adds	r3, r7, r3
   22e14:	781a      	ldrb	r2, [r3, #0]
   22e16:	2377      	movs	r3, #119	; 0x77
   22e18:	18fb      	adds	r3, r7, r3
   22e1a:	3201      	adds	r2, #1
   22e1c:	701a      	strb	r2, [r3, #0]
   22e1e:	2377      	movs	r3, #119	; 0x77
   22e20:	18fb      	adds	r3, r7, r3
   22e22:	781a      	ldrb	r2, [r3, #0]
   22e24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22e26:	429a      	cmp	r2, r3
   22e28:	d3eb      	bcc.n	22e02 <spi_cmd_complete+0x312>
	}
	rix = len;
   22e2a:	2376      	movs	r3, #118	; 0x76
   22e2c:	18fb      	adds	r3, r7, r3
   22e2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22e30:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   22e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22e34:	b29a      	uxth	r2, r3
   22e36:	2318      	movs	r3, #24
   22e38:	18f9      	adds	r1, r7, r3
   22e3a:	2338      	movs	r3, #56	; 0x38
   22e3c:	18fb      	adds	r3, r7, r3
   22e3e:	0018      	movs	r0, r3
   22e40:	4b13      	ldr	r3, [pc, #76]	; (22e90 <spi_cmd_complete+0x3a0>)
   22e42:	4798      	blx	r3
   22e44:	1e03      	subs	r3, r0, #0
   22e46:	d027      	beq.n	22e98 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   22e48:	23fa      	movs	r3, #250	; 0xfa
   22e4a:	33ff      	adds	r3, #255	; 0xff
   22e4c:	001a      	movs	r2, r3
   22e4e:	490b      	ldr	r1, [pc, #44]	; (22e7c <spi_cmd_complete+0x38c>)
   22e50:	4b0b      	ldr	r3, [pc, #44]	; (22e80 <spi_cmd_complete+0x390>)
   22e52:	0018      	movs	r0, r3
   22e54:	4b0b      	ldr	r3, [pc, #44]	; (22e84 <spi_cmd_complete+0x394>)
   22e56:	4798      	blx	r3
   22e58:	4b0e      	ldr	r3, [pc, #56]	; (22e94 <spi_cmd_complete+0x3a4>)
   22e5a:	0018      	movs	r0, r3
   22e5c:	4b09      	ldr	r3, [pc, #36]	; (22e84 <spi_cmd_complete+0x394>)
   22e5e:	4798      	blx	r3
   22e60:	4b0a      	ldr	r3, [pc, #40]	; (22e8c <spi_cmd_complete+0x39c>)
   22e62:	0018      	movs	r0, r3
   22e64:	4b07      	ldr	r3, [pc, #28]	; (22e84 <spi_cmd_complete+0x394>)
   22e66:	4798      	blx	r3
		result = N_FAIL;
   22e68:	2300      	movs	r3, #0
   22e6a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22e6e:	e2a1      	b.n	233b4 <spi_cmd_complete+0x8c4>
   22e70:	00038dd4 	.word	0x00038dd4
   22e74:	2000427c 	.word	0x2000427c
   22e78:	00022525 	.word	0x00022525
   22e7c:	00038e34 	.word	0x00038e34
   22e80:	00038820 	.word	0x00038820
   22e84:	0001cf79 	.word	0x0001cf79
   22e88:	000388e8 	.word	0x000388e8
   22e8c:	00038860 	.word	0x00038860
   22e90:	000224b1 	.word	0x000224b1
   22e94:	00038834 	.word	0x00038834
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22e98:	230f      	movs	r3, #15
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	781b      	ldrb	r3, [r3, #0]
   22e9e:	2bcf      	cmp	r3, #207	; 0xcf
   22ea0:	d009      	beq.n	22eb6 <spi_cmd_complete+0x3c6>
   22ea2:	230f      	movs	r3, #15
   22ea4:	18fb      	adds	r3, r7, r3
   22ea6:	781b      	ldrb	r3, [r3, #0]
   22ea8:	2bc5      	cmp	r3, #197	; 0xc5
   22eaa:	d004      	beq.n	22eb6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   22eac:	230f      	movs	r3, #15
   22eae:	18fb      	adds	r3, r7, r3
   22eb0:	781b      	ldrb	r3, [r3, #0]
   22eb2:	2bc6      	cmp	r3, #198	; 0xc6
   22eb4:	d106      	bne.n	22ec4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   22eb6:	2376      	movs	r3, #118	; 0x76
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	781a      	ldrb	r2, [r3, #0]
   22ebc:	2376      	movs	r3, #118	; 0x76
   22ebe:	18fb      	adds	r3, r7, r3
   22ec0:	3201      	adds	r2, #1
   22ec2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   22ec4:	2376      	movs	r3, #118	; 0x76
   22ec6:	18fb      	adds	r3, r7, r3
   22ec8:	781b      	ldrb	r3, [r3, #0]
   22eca:	2276      	movs	r2, #118	; 0x76
   22ecc:	18ba      	adds	r2, r7, r2
   22ece:	1c59      	adds	r1, r3, #1
   22ed0:	7011      	strb	r1, [r2, #0]
   22ed2:	001a      	movs	r2, r3
   22ed4:	2318      	movs	r3, #24
   22ed6:	18fb      	adds	r3, r7, r3
   22ed8:	5c9a      	ldrb	r2, [r3, r2]
   22eda:	2317      	movs	r3, #23
   22edc:	18fb      	adds	r3, r7, r3
   22ede:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   22ee0:	2317      	movs	r3, #23
   22ee2:	18fb      	adds	r3, r7, r3
   22ee4:	781b      	ldrb	r3, [r3, #0]
   22ee6:	220f      	movs	r2, #15
   22ee8:	18ba      	adds	r2, r7, r2
   22eea:	7812      	ldrb	r2, [r2, #0]
   22eec:	429a      	cmp	r2, r3
   22eee:	d018      	beq.n	22f22 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   22ef0:	4add      	ldr	r2, [pc, #884]	; (23268 <spi_cmd_complete+0x778>)
   22ef2:	49de      	ldr	r1, [pc, #888]	; (2326c <spi_cmd_complete+0x77c>)
   22ef4:	4bde      	ldr	r3, [pc, #888]	; (23270 <spi_cmd_complete+0x780>)
   22ef6:	0018      	movs	r0, r3
   22ef8:	4bde      	ldr	r3, [pc, #888]	; (23274 <spi_cmd_complete+0x784>)
   22efa:	4798      	blx	r3
   22efc:	230f      	movs	r3, #15
   22efe:	18fb      	adds	r3, r7, r3
   22f00:	7819      	ldrb	r1, [r3, #0]
   22f02:	2317      	movs	r3, #23
   22f04:	18fb      	adds	r3, r7, r3
   22f06:	781b      	ldrb	r3, [r3, #0]
   22f08:	001a      	movs	r2, r3
   22f0a:	4bdb      	ldr	r3, [pc, #876]	; (23278 <spi_cmd_complete+0x788>)
   22f0c:	0018      	movs	r0, r3
   22f0e:	4bd9      	ldr	r3, [pc, #868]	; (23274 <spi_cmd_complete+0x784>)
   22f10:	4798      	blx	r3
   22f12:	4bda      	ldr	r3, [pc, #872]	; (2327c <spi_cmd_complete+0x78c>)
   22f14:	0018      	movs	r0, r3
   22f16:	4bd7      	ldr	r3, [pc, #860]	; (23274 <spi_cmd_complete+0x784>)
   22f18:	4798      	blx	r3
		result = N_FAIL;
   22f1a:	2300      	movs	r3, #0
   22f1c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22f20:	e248      	b.n	233b4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   22f22:	2376      	movs	r3, #118	; 0x76
   22f24:	18fb      	adds	r3, r7, r3
   22f26:	781b      	ldrb	r3, [r3, #0]
   22f28:	2276      	movs	r2, #118	; 0x76
   22f2a:	18ba      	adds	r2, r7, r2
   22f2c:	1c59      	adds	r1, r3, #1
   22f2e:	7011      	strb	r1, [r2, #0]
   22f30:	001a      	movs	r2, r3
   22f32:	2318      	movs	r3, #24
   22f34:	18fb      	adds	r3, r7, r3
   22f36:	5c9a      	ldrb	r2, [r3, r2]
   22f38:	2317      	movs	r3, #23
   22f3a:	18fb      	adds	r3, r7, r3
   22f3c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   22f3e:	2317      	movs	r3, #23
   22f40:	18fb      	adds	r3, r7, r3
   22f42:	781b      	ldrb	r3, [r3, #0]
   22f44:	2b00      	cmp	r3, #0
   22f46:	d016      	beq.n	22f76 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   22f48:	4acd      	ldr	r2, [pc, #820]	; (23280 <spi_cmd_complete+0x790>)
   22f4a:	49c8      	ldr	r1, [pc, #800]	; (2326c <spi_cmd_complete+0x77c>)
   22f4c:	4bc8      	ldr	r3, [pc, #800]	; (23270 <spi_cmd_complete+0x780>)
   22f4e:	0018      	movs	r0, r3
   22f50:	4bc8      	ldr	r3, [pc, #800]	; (23274 <spi_cmd_complete+0x784>)
   22f52:	4798      	blx	r3
   22f54:	2317      	movs	r3, #23
   22f56:	18fb      	adds	r3, r7, r3
   22f58:	781b      	ldrb	r3, [r3, #0]
   22f5a:	001a      	movs	r2, r3
   22f5c:	4bc9      	ldr	r3, [pc, #804]	; (23284 <spi_cmd_complete+0x794>)
   22f5e:	0011      	movs	r1, r2
   22f60:	0018      	movs	r0, r3
   22f62:	4bc4      	ldr	r3, [pc, #784]	; (23274 <spi_cmd_complete+0x784>)
   22f64:	4798      	blx	r3
   22f66:	4bc5      	ldr	r3, [pc, #788]	; (2327c <spi_cmd_complete+0x78c>)
   22f68:	0018      	movs	r0, r3
   22f6a:	4bc2      	ldr	r3, [pc, #776]	; (23274 <spi_cmd_complete+0x784>)
   22f6c:	4798      	blx	r3
		result = N_FAIL;
   22f6e:	2300      	movs	r3, #0
   22f70:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22f74:	e21e      	b.n	233b4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   22f76:	230f      	movs	r3, #15
   22f78:	18fb      	adds	r3, r7, r3
   22f7a:	781b      	ldrb	r3, [r3, #0]
   22f7c:	2bc4      	cmp	r3, #196	; 0xc4
   22f7e:	d00f      	beq.n	22fa0 <spi_cmd_complete+0x4b0>
   22f80:	230f      	movs	r3, #15
   22f82:	18fb      	adds	r3, r7, r3
   22f84:	781b      	ldrb	r3, [r3, #0]
   22f86:	2bca      	cmp	r3, #202	; 0xca
   22f88:	d00a      	beq.n	22fa0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   22f8a:	230f      	movs	r3, #15
   22f8c:	18fb      	adds	r3, r7, r3
   22f8e:	781b      	ldrb	r3, [r3, #0]
   22f90:	2bc2      	cmp	r3, #194	; 0xc2
   22f92:	d005      	beq.n	22fa0 <spi_cmd_complete+0x4b0>
   22f94:	230f      	movs	r3, #15
   22f96:	18fb      	adds	r3, r7, r3
   22f98:	781b      	ldrb	r3, [r3, #0]
   22f9a:	2bc8      	cmp	r3, #200	; 0xc8
   22f9c:	d000      	beq.n	22fa0 <spi_cmd_complete+0x4b0>
   22f9e:	e208      	b.n	233b2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   22fa0:	230a      	movs	r3, #10
   22fa2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   22fa4:	2376      	movs	r3, #118	; 0x76
   22fa6:	18fb      	adds	r3, r7, r3
   22fa8:	781a      	ldrb	r2, [r3, #0]
   22faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22fac:	429a      	cmp	r2, r3
   22fae:	d218      	bcs.n	22fe2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   22fb0:	2376      	movs	r3, #118	; 0x76
   22fb2:	18fb      	adds	r3, r7, r3
   22fb4:	781b      	ldrb	r3, [r3, #0]
   22fb6:	2276      	movs	r2, #118	; 0x76
   22fb8:	18ba      	adds	r2, r7, r2
   22fba:	1c59      	adds	r1, r3, #1
   22fbc:	7011      	strb	r1, [r2, #0]
   22fbe:	001a      	movs	r2, r3
   22fc0:	2318      	movs	r3, #24
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	5c9a      	ldrb	r2, [r3, r2]
   22fc6:	2317      	movs	r3, #23
   22fc8:	18fb      	adds	r3, r7, r3
   22fca:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   22fcc:	2317      	movs	r3, #23
   22fce:	18fb      	adds	r3, r7, r3
   22fd0:	781b      	ldrb	r3, [r3, #0]
   22fd2:	091b      	lsrs	r3, r3, #4
   22fd4:	b2db      	uxtb	r3, r3
   22fd6:	001a      	movs	r2, r3
   22fd8:	230f      	movs	r3, #15
   22fda:	4013      	ands	r3, r2
   22fdc:	2b0f      	cmp	r3, #15
   22fde:	d103      	bne.n	22fe8 <spi_cmd_complete+0x4f8>
					break;
   22fe0:	e007      	b.n	22ff2 <spi_cmd_complete+0x502>
					retry = 0;
   22fe2:	2300      	movs	r3, #0
   22fe4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   22fe6:	e004      	b.n	22ff2 <spi_cmd_complete+0x502>
			} while (retry--);
   22fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22fea:	1e5a      	subs	r2, r3, #1
   22fec:	667a      	str	r2, [r7, #100]	; 0x64
   22fee:	2b00      	cmp	r3, #0
   22ff0:	d1d8      	bne.n	22fa4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   22ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22ff4:	2b00      	cmp	r3, #0
   22ff6:	dc18      	bgt.n	2302a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   22ff8:	2395      	movs	r3, #149	; 0x95
   22ffa:	009a      	lsls	r2, r3, #2
   22ffc:	499b      	ldr	r1, [pc, #620]	; (2326c <spi_cmd_complete+0x77c>)
   22ffe:	4b9c      	ldr	r3, [pc, #624]	; (23270 <spi_cmd_complete+0x780>)
   23000:	0018      	movs	r0, r3
   23002:	4b9c      	ldr	r3, [pc, #624]	; (23274 <spi_cmd_complete+0x784>)
   23004:	4798      	blx	r3
   23006:	2317      	movs	r3, #23
   23008:	18fb      	adds	r3, r7, r3
   2300a:	781b      	ldrb	r3, [r3, #0]
   2300c:	001a      	movs	r2, r3
   2300e:	4b9e      	ldr	r3, [pc, #632]	; (23288 <spi_cmd_complete+0x798>)
   23010:	0011      	movs	r1, r2
   23012:	0018      	movs	r0, r3
   23014:	4b97      	ldr	r3, [pc, #604]	; (23274 <spi_cmd_complete+0x784>)
   23016:	4798      	blx	r3
   23018:	4b98      	ldr	r3, [pc, #608]	; (2327c <spi_cmd_complete+0x78c>)
   2301a:	0018      	movs	r0, r3
   2301c:	4b95      	ldr	r3, [pc, #596]	; (23274 <spi_cmd_complete+0x784>)
   2301e:	4798      	blx	r3
				result = N_RESET;
   23020:	2301      	movs	r3, #1
   23022:	425b      	negs	r3, r3
   23024:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23028:	e1c4      	b.n	233b4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2302a:	230f      	movs	r3, #15
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	781b      	ldrb	r3, [r3, #0]
   23030:	2bc4      	cmp	r3, #196	; 0xc4
   23032:	d005      	beq.n	23040 <spi_cmd_complete+0x550>
   23034:	230f      	movs	r3, #15
   23036:	18fb      	adds	r3, r7, r3
   23038:	781b      	ldrb	r3, [r3, #0]
   2303a:	2bca      	cmp	r3, #202	; 0xca
   2303c:	d000      	beq.n	23040 <spi_cmd_complete+0x550>
   2303e:	e08e      	b.n	2315e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23040:	2376      	movs	r3, #118	; 0x76
   23042:	18fb      	adds	r3, r7, r3
   23044:	781b      	ldrb	r3, [r3, #0]
   23046:	3303      	adds	r3, #3
   23048:	001a      	movs	r2, r3
   2304a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2304c:	429a      	cmp	r2, r3
   2304e:	d23c      	bcs.n	230ca <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23050:	2376      	movs	r3, #118	; 0x76
   23052:	18fb      	adds	r3, r7, r3
   23054:	781b      	ldrb	r3, [r3, #0]
   23056:	2276      	movs	r2, #118	; 0x76
   23058:	18ba      	adds	r2, r7, r2
   2305a:	1c59      	adds	r1, r3, #1
   2305c:	7011      	strb	r1, [r2, #0]
   2305e:	001a      	movs	r2, r3
   23060:	2318      	movs	r3, #24
   23062:	18fb      	adds	r3, r7, r3
   23064:	5c9a      	ldrb	r2, [r3, r2]
   23066:	687b      	ldr	r3, [r7, #4]
   23068:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2306a:	687b      	ldr	r3, [r7, #4]
   2306c:	1c5a      	adds	r2, r3, #1
   2306e:	2376      	movs	r3, #118	; 0x76
   23070:	18fb      	adds	r3, r7, r3
   23072:	781b      	ldrb	r3, [r3, #0]
   23074:	2176      	movs	r1, #118	; 0x76
   23076:	1879      	adds	r1, r7, r1
   23078:	1c58      	adds	r0, r3, #1
   2307a:	7008      	strb	r0, [r1, #0]
   2307c:	0019      	movs	r1, r3
   2307e:	2318      	movs	r3, #24
   23080:	18fb      	adds	r3, r7, r3
   23082:	5c5b      	ldrb	r3, [r3, r1]
   23084:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23086:	687b      	ldr	r3, [r7, #4]
   23088:	1c9a      	adds	r2, r3, #2
   2308a:	2376      	movs	r3, #118	; 0x76
   2308c:	18fb      	adds	r3, r7, r3
   2308e:	781b      	ldrb	r3, [r3, #0]
   23090:	2176      	movs	r1, #118	; 0x76
   23092:	1879      	adds	r1, r7, r1
   23094:	1c58      	adds	r0, r3, #1
   23096:	7008      	strb	r0, [r1, #0]
   23098:	0019      	movs	r1, r3
   2309a:	2318      	movs	r3, #24
   2309c:	18fb      	adds	r3, r7, r3
   2309e:	5c5b      	ldrb	r3, [r3, r1]
   230a0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   230a2:	687b      	ldr	r3, [r7, #4]
   230a4:	1cda      	adds	r2, r3, #3
   230a6:	2376      	movs	r3, #118	; 0x76
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	781b      	ldrb	r3, [r3, #0]
   230ac:	2176      	movs	r1, #118	; 0x76
   230ae:	1879      	adds	r1, r7, r1
   230b0:	1c58      	adds	r0, r3, #1
   230b2:	7008      	strb	r0, [r1, #0]
   230b4:	0019      	movs	r1, r3
   230b6:	2318      	movs	r3, #24
   230b8:	18fb      	adds	r3, r7, r3
   230ba:	5c5b      	ldrb	r3, [r3, r1]
   230bc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   230be:	4b73      	ldr	r3, [pc, #460]	; (2328c <spi_cmd_complete+0x79c>)
   230c0:	781b      	ldrb	r3, [r3, #0]
   230c2:	2b00      	cmp	r3, #0
   230c4:	d000      	beq.n	230c8 <spi_cmd_complete+0x5d8>
   230c6:	e174      	b.n	233b2 <spi_cmd_complete+0x8c2>
   230c8:	e011      	b.n	230ee <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   230ca:	4a71      	ldr	r2, [pc, #452]	; (23290 <spi_cmd_complete+0x7a0>)
   230cc:	4967      	ldr	r1, [pc, #412]	; (2326c <spi_cmd_complete+0x77c>)
   230ce:	4b68      	ldr	r3, [pc, #416]	; (23270 <spi_cmd_complete+0x780>)
   230d0:	0018      	movs	r0, r3
   230d2:	4b68      	ldr	r3, [pc, #416]	; (23274 <spi_cmd_complete+0x784>)
   230d4:	4798      	blx	r3
   230d6:	4b6f      	ldr	r3, [pc, #444]	; (23294 <spi_cmd_complete+0x7a4>)
   230d8:	0018      	movs	r0, r3
   230da:	4b66      	ldr	r3, [pc, #408]	; (23274 <spi_cmd_complete+0x784>)
   230dc:	4798      	blx	r3
   230de:	4b67      	ldr	r3, [pc, #412]	; (2327c <spi_cmd_complete+0x78c>)
   230e0:	0018      	movs	r0, r3
   230e2:	4b64      	ldr	r3, [pc, #400]	; (23274 <spi_cmd_complete+0x784>)
   230e4:	4798      	blx	r3
					result = N_FAIL;
   230e6:	2300      	movs	r3, #0
   230e8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   230ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   230ec:	e162      	b.n	233b4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   230ee:	2376      	movs	r3, #118	; 0x76
   230f0:	18fb      	adds	r3, r7, r3
   230f2:	781b      	ldrb	r3, [r3, #0]
   230f4:	3301      	adds	r3, #1
   230f6:	001a      	movs	r2, r3
   230f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   230fa:	429a      	cmp	r2, r3
   230fc:	d21c      	bcs.n	23138 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   230fe:	2376      	movs	r3, #118	; 0x76
   23100:	18fb      	adds	r3, r7, r3
   23102:	781b      	ldrb	r3, [r3, #0]
   23104:	2276      	movs	r2, #118	; 0x76
   23106:	18ba      	adds	r2, r7, r2
   23108:	1c59      	adds	r1, r3, #1
   2310a:	7011      	strb	r1, [r2, #0]
   2310c:	001a      	movs	r2, r3
   2310e:	2318      	movs	r3, #24
   23110:	18fb      	adds	r3, r7, r3
   23112:	5c9a      	ldrb	r2, [r3, r2]
   23114:	2314      	movs	r3, #20
   23116:	18fb      	adds	r3, r7, r3
   23118:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2311a:	2376      	movs	r3, #118	; 0x76
   2311c:	18fb      	adds	r3, r7, r3
   2311e:	781b      	ldrb	r3, [r3, #0]
   23120:	2276      	movs	r2, #118	; 0x76
   23122:	18ba      	adds	r2, r7, r2
   23124:	1c59      	adds	r1, r3, #1
   23126:	7011      	strb	r1, [r2, #0]
   23128:	001a      	movs	r2, r3
   2312a:	2318      	movs	r3, #24
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	5c9a      	ldrb	r2, [r3, r2]
   23130:	2314      	movs	r3, #20
   23132:	18fb      	adds	r3, r7, r3
   23134:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23136:	e13c      	b.n	233b2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23138:	239c      	movs	r3, #156	; 0x9c
   2313a:	009a      	lsls	r2, r3, #2
   2313c:	494b      	ldr	r1, [pc, #300]	; (2326c <spi_cmd_complete+0x77c>)
   2313e:	4b4c      	ldr	r3, [pc, #304]	; (23270 <spi_cmd_complete+0x780>)
   23140:	0018      	movs	r0, r3
   23142:	4b4c      	ldr	r3, [pc, #304]	; (23274 <spi_cmd_complete+0x784>)
   23144:	4798      	blx	r3
   23146:	4b54      	ldr	r3, [pc, #336]	; (23298 <spi_cmd_complete+0x7a8>)
   23148:	0018      	movs	r0, r3
   2314a:	4b4a      	ldr	r3, [pc, #296]	; (23274 <spi_cmd_complete+0x784>)
   2314c:	4798      	blx	r3
   2314e:	4b4b      	ldr	r3, [pc, #300]	; (2327c <spi_cmd_complete+0x78c>)
   23150:	0018      	movs	r0, r3
   23152:	4b48      	ldr	r3, [pc, #288]	; (23274 <spi_cmd_complete+0x784>)
   23154:	4798      	blx	r3
						result = N_FAIL;
   23156:	2300      	movs	r3, #0
   23158:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   2315a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2315c:	e12a      	b.n	233b4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2315e:	230f      	movs	r3, #15
   23160:	18fb      	adds	r3, r7, r3
   23162:	781b      	ldrb	r3, [r3, #0]
   23164:	2bc2      	cmp	r3, #194	; 0xc2
   23166:	d005      	beq.n	23174 <spi_cmd_complete+0x684>
   23168:	230f      	movs	r3, #15
   2316a:	18fb      	adds	r3, r7, r3
   2316c:	781b      	ldrb	r3, [r3, #0]
   2316e:	2bc8      	cmp	r3, #200	; 0xc8
   23170:	d000      	beq.n	23174 <spi_cmd_complete+0x684>
   23172:	e11e      	b.n	233b2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23174:	2300      	movs	r3, #0
   23176:	663b      	str	r3, [r7, #96]	; 0x60
   23178:	e011      	b.n	2319e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2317a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2317c:	1c5a      	adds	r2, r3, #1
   2317e:	663a      	str	r2, [r7, #96]	; 0x60
   23180:	001a      	movs	r2, r3
   23182:	687b      	ldr	r3, [r7, #4]
   23184:	189a      	adds	r2, r3, r2
   23186:	2376      	movs	r3, #118	; 0x76
   23188:	18fb      	adds	r3, r7, r3
   2318a:	781b      	ldrb	r3, [r3, #0]
   2318c:	2176      	movs	r1, #118	; 0x76
   2318e:	1879      	adds	r1, r7, r1
   23190:	1c58      	adds	r0, r3, #1
   23192:	7008      	strb	r0, [r1, #0]
   23194:	0019      	movs	r1, r3
   23196:	2318      	movs	r3, #24
   23198:	18fb      	adds	r3, r7, r3
   2319a:	5c5b      	ldrb	r3, [r3, r1]
   2319c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2319e:	2376      	movs	r3, #118	; 0x76
   231a0:	18fb      	adds	r3, r7, r3
   231a2:	781a      	ldrb	r2, [r3, #0]
   231a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   231a6:	429a      	cmp	r2, r3
   231a8:	d203      	bcs.n	231b2 <spi_cmd_complete+0x6c2>
   231aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   231ac:	683b      	ldr	r3, [r7, #0]
   231ae:	429a      	cmp	r2, r3
   231b0:	d3e3      	bcc.n	2317a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   231b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   231b4:	683a      	ldr	r2, [r7, #0]
   231b6:	1ad3      	subs	r3, r2, r3
   231b8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   231ba:	683b      	ldr	r3, [r7, #0]
   231bc:	2b00      	cmp	r3, #0
   231be:	d100      	bne.n	231c2 <spi_cmd_complete+0x6d2>
   231c0:	e0f1      	b.n	233a6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   231c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   231c4:	2280      	movs	r2, #128	; 0x80
   231c6:	0192      	lsls	r2, r2, #6
   231c8:	1ad3      	subs	r3, r2, r3
   231ca:	001a      	movs	r2, r3
   231cc:	683b      	ldr	r3, [r7, #0]
   231ce:	429a      	cmp	r2, r3
   231d0:	d302      	bcc.n	231d8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   231d2:	683b      	ldr	r3, [r7, #0]
   231d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   231d6:	e004      	b.n	231e2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   231d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   231da:	2280      	movs	r2, #128	; 0x80
   231dc:	0192      	lsls	r2, r2, #6
   231de:	1ad3      	subs	r3, r2, r3
   231e0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   231e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   231e4:	687a      	ldr	r2, [r7, #4]
   231e6:	18d3      	adds	r3, r2, r3
   231e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   231ea:	b292      	uxth	r2, r2
   231ec:	0011      	movs	r1, r2
   231ee:	0018      	movs	r0, r3
   231f0:	4b2a      	ldr	r3, [pc, #168]	; (2329c <spi_cmd_complete+0x7ac>)
   231f2:	4798      	blx	r3
   231f4:	1e03      	subs	r3, r0, #0
   231f6:	d010      	beq.n	2321a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   231f8:	4a29      	ldr	r2, [pc, #164]	; (232a0 <spi_cmd_complete+0x7b0>)
   231fa:	491c      	ldr	r1, [pc, #112]	; (2326c <spi_cmd_complete+0x77c>)
   231fc:	4b1c      	ldr	r3, [pc, #112]	; (23270 <spi_cmd_complete+0x780>)
   231fe:	0018      	movs	r0, r3
   23200:	4b1c      	ldr	r3, [pc, #112]	; (23274 <spi_cmd_complete+0x784>)
   23202:	4798      	blx	r3
   23204:	4b27      	ldr	r3, [pc, #156]	; (232a4 <spi_cmd_complete+0x7b4>)
   23206:	0018      	movs	r0, r3
   23208:	4b1a      	ldr	r3, [pc, #104]	; (23274 <spi_cmd_complete+0x784>)
   2320a:	4798      	blx	r3
   2320c:	4b1b      	ldr	r3, [pc, #108]	; (2327c <spi_cmd_complete+0x78c>)
   2320e:	0018      	movs	r0, r3
   23210:	4b18      	ldr	r3, [pc, #96]	; (23274 <spi_cmd_complete+0x784>)
   23212:	4798      	blx	r3
						result = N_FAIL;
   23214:	2300      	movs	r3, #0
   23216:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23218:	e0cb      	b.n	233b2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2321a:	4b1c      	ldr	r3, [pc, #112]	; (2328c <spi_cmd_complete+0x79c>)
   2321c:	781b      	ldrb	r3, [r3, #0]
   2321e:	2b00      	cmp	r3, #0
   23220:	d119      	bne.n	23256 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23222:	2314      	movs	r3, #20
   23224:	18fb      	adds	r3, r7, r3
   23226:	2102      	movs	r1, #2
   23228:	0018      	movs	r0, r3
   2322a:	4b1c      	ldr	r3, [pc, #112]	; (2329c <spi_cmd_complete+0x7ac>)
   2322c:	4798      	blx	r3
   2322e:	1e03      	subs	r3, r0, #0
   23230:	d011      	beq.n	23256 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23232:	23a6      	movs	r3, #166	; 0xa6
   23234:	009a      	lsls	r2, r3, #2
   23236:	490d      	ldr	r1, [pc, #52]	; (2326c <spi_cmd_complete+0x77c>)
   23238:	4b0d      	ldr	r3, [pc, #52]	; (23270 <spi_cmd_complete+0x780>)
   2323a:	0018      	movs	r0, r3
   2323c:	4b0d      	ldr	r3, [pc, #52]	; (23274 <spi_cmd_complete+0x784>)
   2323e:	4798      	blx	r3
   23240:	4b19      	ldr	r3, [pc, #100]	; (232a8 <spi_cmd_complete+0x7b8>)
   23242:	0018      	movs	r0, r3
   23244:	4b0b      	ldr	r3, [pc, #44]	; (23274 <spi_cmd_complete+0x784>)
   23246:	4798      	blx	r3
   23248:	4b0c      	ldr	r3, [pc, #48]	; (2327c <spi_cmd_complete+0x78c>)
   2324a:	0018      	movs	r0, r3
   2324c:	4b09      	ldr	r3, [pc, #36]	; (23274 <spi_cmd_complete+0x784>)
   2324e:	4798      	blx	r3
							result = N_FAIL;
   23250:	2300      	movs	r3, #0
   23252:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23254:	e0ad      	b.n	233b2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23256:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2325a:	18d3      	adds	r3, r2, r3
   2325c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2325e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23260:	683a      	ldr	r2, [r7, #0]
   23262:	1ad3      	subs	r3, r2, r3
   23264:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23266:	e09e      	b.n	233a6 <spi_cmd_complete+0x8b6>
   23268:	0000022f 	.word	0x0000022f
   2326c:	00038e34 	.word	0x00038e34
   23270:	00038820 	.word	0x00038820
   23274:	0001cf79 	.word	0x0001cf79
   23278:	00038918 	.word	0x00038918
   2327c:	00038860 	.word	0x00038860
   23280:	00000239 	.word	0x00000239
   23284:	00038954 	.word	0x00038954
   23288:	00038988 	.word	0x00038988
   2328c:	2000427c 	.word	0x2000427c
   23290:	00000263 	.word	0x00000263
   23294:	000389b8 	.word	0x000389b8
   23298:	000389e8 	.word	0x000389e8
   2329c:	00022429 	.word	0x00022429
   232a0:	0000028e 	.word	0x0000028e
   232a4:	00038a18 	.word	0x00038a18
   232a8:	00038a4c 	.word	0x00038a4c
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   232ac:	683a      	ldr	r2, [r7, #0]
   232ae:	2380      	movs	r3, #128	; 0x80
   232b0:	019b      	lsls	r3, r3, #6
   232b2:	429a      	cmp	r2, r3
   232b4:	d802      	bhi.n	232bc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   232b6:	683b      	ldr	r3, [r7, #0]
   232b8:	65bb      	str	r3, [r7, #88]	; 0x58
   232ba:	e002      	b.n	232c2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   232bc:	2380      	movs	r3, #128	; 0x80
   232be:	019b      	lsls	r3, r3, #6
   232c0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   232c2:	230a      	movs	r3, #10
   232c4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   232c6:	2317      	movs	r3, #23
   232c8:	18fb      	adds	r3, r7, r3
   232ca:	2101      	movs	r1, #1
   232cc:	0018      	movs	r0, r3
   232ce:	4b3b      	ldr	r3, [pc, #236]	; (233bc <spi_cmd_complete+0x8cc>)
   232d0:	4798      	blx	r3
   232d2:	1e03      	subs	r3, r0, #0
   232d4:	d011      	beq.n	232fa <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   232d6:	23ae      	movs	r3, #174	; 0xae
   232d8:	009a      	lsls	r2, r3, #2
   232da:	4939      	ldr	r1, [pc, #228]	; (233c0 <spi_cmd_complete+0x8d0>)
   232dc:	4b39      	ldr	r3, [pc, #228]	; (233c4 <spi_cmd_complete+0x8d4>)
   232de:	0018      	movs	r0, r3
   232e0:	4b39      	ldr	r3, [pc, #228]	; (233c8 <spi_cmd_complete+0x8d8>)
   232e2:	4798      	blx	r3
   232e4:	4b39      	ldr	r3, [pc, #228]	; (233cc <spi_cmd_complete+0x8dc>)
   232e6:	0018      	movs	r0, r3
   232e8:	4b37      	ldr	r3, [pc, #220]	; (233c8 <spi_cmd_complete+0x8d8>)
   232ea:	4798      	blx	r3
   232ec:	4b38      	ldr	r3, [pc, #224]	; (233d0 <spi_cmd_complete+0x8e0>)
   232ee:	0018      	movs	r0, r3
   232f0:	4b35      	ldr	r3, [pc, #212]	; (233c8 <spi_cmd_complete+0x8d8>)
   232f2:	4798      	blx	r3
							result = N_FAIL;
   232f4:	2300      	movs	r3, #0
   232f6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   232f8:	e010      	b.n	2331c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   232fa:	2317      	movs	r3, #23
   232fc:	18fb      	adds	r3, r7, r3
   232fe:	781b      	ldrb	r3, [r3, #0]
   23300:	091b      	lsrs	r3, r3, #4
   23302:	b2db      	uxtb	r3, r3
   23304:	001a      	movs	r2, r3
   23306:	230f      	movs	r3, #15
   23308:	4013      	ands	r3, r2
   2330a:	2b0f      	cmp	r3, #15
   2330c:	d005      	beq.n	2331a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2330e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23310:	1e5a      	subs	r2, r3, #1
   23312:	667a      	str	r2, [r7, #100]	; 0x64
   23314:	2b00      	cmp	r3, #0
   23316:	d1d6      	bne.n	232c6 <spi_cmd_complete+0x7d6>
   23318:	e000      	b.n	2331c <spi_cmd_complete+0x82c>
							break;
   2331a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   2331c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2331e:	2b00      	cmp	r3, #0
   23320:	d046      	beq.n	233b0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23324:	687a      	ldr	r2, [r7, #4]
   23326:	18d3      	adds	r3, r2, r3
   23328:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2332a:	b292      	uxth	r2, r2
   2332c:	0011      	movs	r1, r2
   2332e:	0018      	movs	r0, r3
   23330:	4b22      	ldr	r3, [pc, #136]	; (233bc <spi_cmd_complete+0x8cc>)
   23332:	4798      	blx	r3
   23334:	1e03      	subs	r3, r0, #0
   23336:	d011      	beq.n	2335c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23338:	23b2      	movs	r3, #178	; 0xb2
   2333a:	009a      	lsls	r2, r3, #2
   2333c:	4920      	ldr	r1, [pc, #128]	; (233c0 <spi_cmd_complete+0x8d0>)
   2333e:	4b21      	ldr	r3, [pc, #132]	; (233c4 <spi_cmd_complete+0x8d4>)
   23340:	0018      	movs	r0, r3
   23342:	4b21      	ldr	r3, [pc, #132]	; (233c8 <spi_cmd_complete+0x8d8>)
   23344:	4798      	blx	r3
   23346:	4b23      	ldr	r3, [pc, #140]	; (233d4 <spi_cmd_complete+0x8e4>)
   23348:	0018      	movs	r0, r3
   2334a:	4b1f      	ldr	r3, [pc, #124]	; (233c8 <spi_cmd_complete+0x8d8>)
   2334c:	4798      	blx	r3
   2334e:	4b20      	ldr	r3, [pc, #128]	; (233d0 <spi_cmd_complete+0x8e0>)
   23350:	0018      	movs	r0, r3
   23352:	4b1d      	ldr	r3, [pc, #116]	; (233c8 <spi_cmd_complete+0x8d8>)
   23354:	4798      	blx	r3
						result = N_FAIL;
   23356:	2300      	movs	r3, #0
   23358:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   2335a:	e02a      	b.n	233b2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   2335c:	4b1e      	ldr	r3, [pc, #120]	; (233d8 <spi_cmd_complete+0x8e8>)
   2335e:	781b      	ldrb	r3, [r3, #0]
   23360:	2b00      	cmp	r3, #0
   23362:	d118      	bne.n	23396 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23364:	2314      	movs	r3, #20
   23366:	18fb      	adds	r3, r7, r3
   23368:	2102      	movs	r1, #2
   2336a:	0018      	movs	r0, r3
   2336c:	4b13      	ldr	r3, [pc, #76]	; (233bc <spi_cmd_complete+0x8cc>)
   2336e:	4798      	blx	r3
   23370:	1e03      	subs	r3, r0, #0
   23372:	d010      	beq.n	23396 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23374:	4a19      	ldr	r2, [pc, #100]	; (233dc <spi_cmd_complete+0x8ec>)
   23376:	4912      	ldr	r1, [pc, #72]	; (233c0 <spi_cmd_complete+0x8d0>)
   23378:	4b12      	ldr	r3, [pc, #72]	; (233c4 <spi_cmd_complete+0x8d4>)
   2337a:	0018      	movs	r0, r3
   2337c:	4b12      	ldr	r3, [pc, #72]	; (233c8 <spi_cmd_complete+0x8d8>)
   2337e:	4798      	blx	r3
   23380:	4b17      	ldr	r3, [pc, #92]	; (233e0 <spi_cmd_complete+0x8f0>)
   23382:	0018      	movs	r0, r3
   23384:	4b10      	ldr	r3, [pc, #64]	; (233c8 <spi_cmd_complete+0x8d8>)
   23386:	4798      	blx	r3
   23388:	4b11      	ldr	r3, [pc, #68]	; (233d0 <spi_cmd_complete+0x8e0>)
   2338a:	0018      	movs	r0, r3
   2338c:	4b0e      	ldr	r3, [pc, #56]	; (233c8 <spi_cmd_complete+0x8d8>)
   2338e:	4798      	blx	r3
							result = N_FAIL;
   23390:	2300      	movs	r3, #0
   23392:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23394:	e00d      	b.n	233b2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2339a:	18d3      	adds	r3, r2, r3
   2339c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2339e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   233a0:	683a      	ldr	r2, [r7, #0]
   233a2:	1ad3      	subs	r3, r2, r3
   233a4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   233a6:	683b      	ldr	r3, [r7, #0]
   233a8:	2b00      	cmp	r3, #0
   233aa:	d000      	beq.n	233ae <spi_cmd_complete+0x8be>
   233ac:	e77e      	b.n	232ac <spi_cmd_complete+0x7bc>
   233ae:	e000      	b.n	233b2 <spi_cmd_complete+0x8c2>
						break;
   233b0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   233b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   233b4:	0018      	movs	r0, r3
   233b6:	46bd      	mov	sp, r7
   233b8:	b01f      	add	sp, #124	; 0x7c
   233ba:	bd90      	pop	{r4, r7, pc}
   233bc:	00022429 	.word	0x00022429
   233c0:	00038e34 	.word	0x00038e34
   233c4:	00038820 	.word	0x00038820
   233c8:	0001cf79 	.word	0x0001cf79
   233cc:	00038a84 	.word	0x00038a84
   233d0:	00038860 	.word	0x00038860
   233d4:	00038a18 	.word	0x00038a18
   233d8:	2000427c 	.word	0x2000427c
   233dc:	000002d2 	.word	0x000002d2
   233e0:	00038a4c 	.word	0x00038a4c

000233e4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   233e4:	b580      	push	{r7, lr}
   233e6:	b086      	sub	sp, #24
   233e8:	af00      	add	r7, sp, #0
   233ea:	6078      	str	r0, [r7, #4]
   233ec:	000a      	movs	r2, r1
   233ee:	1cbb      	adds	r3, r7, #2
   233f0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   233f2:	2313      	movs	r3, #19
   233f4:	18fb      	adds	r3, r7, r3
   233f6:	2201      	movs	r2, #1
   233f8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   233fa:	230c      	movs	r3, #12
   233fc:	18fb      	adds	r3, r7, r3
   233fe:	2200      	movs	r2, #0
   23400:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23402:	2316      	movs	r3, #22
   23404:	18fb      	adds	r3, r7, r3
   23406:	2200      	movs	r2, #0
   23408:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2340a:	1cbb      	adds	r3, r7, #2
   2340c:	881a      	ldrh	r2, [r3, #0]
   2340e:	2380      	movs	r3, #128	; 0x80
   23410:	019b      	lsls	r3, r3, #6
   23412:	429a      	cmp	r2, r3
   23414:	d805      	bhi.n	23422 <spi_data_write+0x3e>
			nbytes = sz;
   23416:	2314      	movs	r3, #20
   23418:	18fb      	adds	r3, r7, r3
   2341a:	1cba      	adds	r2, r7, #2
   2341c:	8812      	ldrh	r2, [r2, #0]
   2341e:	801a      	strh	r2, [r3, #0]
   23420:	e004      	b.n	2342c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23422:	2314      	movs	r3, #20
   23424:	18fb      	adds	r3, r7, r3
   23426:	2280      	movs	r2, #128	; 0x80
   23428:	0192      	lsls	r2, r2, #6
   2342a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   2342c:	2311      	movs	r3, #17
   2342e:	18fb      	adds	r3, r7, r3
   23430:	22f0      	movs	r2, #240	; 0xf0
   23432:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23434:	2316      	movs	r3, #22
   23436:	18fb      	adds	r3, r7, r3
   23438:	2200      	movs	r2, #0
   2343a:	5e9b      	ldrsh	r3, [r3, r2]
   2343c:	2b00      	cmp	r3, #0
   2343e:	d10f      	bne.n	23460 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23440:	1cbb      	adds	r3, r7, #2
   23442:	881a      	ldrh	r2, [r3, #0]
   23444:	2380      	movs	r3, #128	; 0x80
   23446:	019b      	lsls	r3, r3, #6
   23448:	429a      	cmp	r2, r3
   2344a:	d804      	bhi.n	23456 <spi_data_write+0x72>
				order = 0x3;
   2344c:	2312      	movs	r3, #18
   2344e:	18fb      	adds	r3, r7, r3
   23450:	2203      	movs	r2, #3
   23452:	701a      	strb	r2, [r3, #0]
   23454:	e013      	b.n	2347e <spi_data_write+0x9a>
			else
				order = 0x1;
   23456:	2312      	movs	r3, #18
   23458:	18fb      	adds	r3, r7, r3
   2345a:	2201      	movs	r2, #1
   2345c:	701a      	strb	r2, [r3, #0]
   2345e:	e00e      	b.n	2347e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23460:	1cbb      	adds	r3, r7, #2
   23462:	881a      	ldrh	r2, [r3, #0]
   23464:	2380      	movs	r3, #128	; 0x80
   23466:	019b      	lsls	r3, r3, #6
   23468:	429a      	cmp	r2, r3
   2346a:	d804      	bhi.n	23476 <spi_data_write+0x92>
				order = 0x3;
   2346c:	2312      	movs	r3, #18
   2346e:	18fb      	adds	r3, r7, r3
   23470:	2203      	movs	r2, #3
   23472:	701a      	strb	r2, [r3, #0]
   23474:	e003      	b.n	2347e <spi_data_write+0x9a>
			else
				order = 0x2;
   23476:	2312      	movs	r3, #18
   23478:	18fb      	adds	r3, r7, r3
   2347a:	2202      	movs	r2, #2
   2347c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2347e:	2311      	movs	r3, #17
   23480:	18fb      	adds	r3, r7, r3
   23482:	781a      	ldrb	r2, [r3, #0]
   23484:	2312      	movs	r3, #18
   23486:	18fb      	adds	r3, r7, r3
   23488:	781b      	ldrb	r3, [r3, #0]
   2348a:	4313      	orrs	r3, r2
   2348c:	b2da      	uxtb	r2, r3
   2348e:	2311      	movs	r3, #17
   23490:	18fb      	adds	r3, r7, r3
   23492:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23494:	2311      	movs	r3, #17
   23496:	18fb      	adds	r3, r7, r3
   23498:	2101      	movs	r1, #1
   2349a:	0018      	movs	r0, r3
   2349c:	4b3c      	ldr	r3, [pc, #240]	; (23590 <spi_data_write+0x1ac>)
   2349e:	4798      	blx	r3
   234a0:	1e03      	subs	r3, r0, #0
   234a2:	d012      	beq.n	234ca <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   234a4:	4a3b      	ldr	r2, [pc, #236]	; (23594 <spi_data_write+0x1b0>)
   234a6:	493c      	ldr	r1, [pc, #240]	; (23598 <spi_data_write+0x1b4>)
   234a8:	4b3c      	ldr	r3, [pc, #240]	; (2359c <spi_data_write+0x1b8>)
   234aa:	0018      	movs	r0, r3
   234ac:	4b3c      	ldr	r3, [pc, #240]	; (235a0 <spi_data_write+0x1bc>)
   234ae:	4798      	blx	r3
   234b0:	4b3c      	ldr	r3, [pc, #240]	; (235a4 <spi_data_write+0x1c0>)
   234b2:	0018      	movs	r0, r3
   234b4:	4b3a      	ldr	r3, [pc, #232]	; (235a0 <spi_data_write+0x1bc>)
   234b6:	4798      	blx	r3
   234b8:	4b3b      	ldr	r3, [pc, #236]	; (235a8 <spi_data_write+0x1c4>)
   234ba:	0018      	movs	r0, r3
   234bc:	4b38      	ldr	r3, [pc, #224]	; (235a0 <spi_data_write+0x1bc>)
   234be:	4798      	blx	r3
			result = N_FAIL;
   234c0:	2313      	movs	r3, #19
   234c2:	18fb      	adds	r3, r7, r3
   234c4:	2200      	movs	r2, #0
   234c6:	701a      	strb	r2, [r3, #0]
			break;
   234c8:	e059      	b.n	2357e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   234ca:	2316      	movs	r3, #22
   234cc:	18fb      	adds	r3, r7, r3
   234ce:	2200      	movs	r2, #0
   234d0:	5e9b      	ldrsh	r3, [r3, r2]
   234d2:	687a      	ldr	r2, [r7, #4]
   234d4:	18d2      	adds	r2, r2, r3
   234d6:	2314      	movs	r3, #20
   234d8:	18fb      	adds	r3, r7, r3
   234da:	881b      	ldrh	r3, [r3, #0]
   234dc:	0019      	movs	r1, r3
   234de:	0010      	movs	r0, r2
   234e0:	4b2b      	ldr	r3, [pc, #172]	; (23590 <spi_data_write+0x1ac>)
   234e2:	4798      	blx	r3
   234e4:	1e03      	subs	r3, r0, #0
   234e6:	d012      	beq.n	2350e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   234e8:	4a30      	ldr	r2, [pc, #192]	; (235ac <spi_data_write+0x1c8>)
   234ea:	492b      	ldr	r1, [pc, #172]	; (23598 <spi_data_write+0x1b4>)
   234ec:	4b2b      	ldr	r3, [pc, #172]	; (2359c <spi_data_write+0x1b8>)
   234ee:	0018      	movs	r0, r3
   234f0:	4b2b      	ldr	r3, [pc, #172]	; (235a0 <spi_data_write+0x1bc>)
   234f2:	4798      	blx	r3
   234f4:	4b2e      	ldr	r3, [pc, #184]	; (235b0 <spi_data_write+0x1cc>)
   234f6:	0018      	movs	r0, r3
   234f8:	4b29      	ldr	r3, [pc, #164]	; (235a0 <spi_data_write+0x1bc>)
   234fa:	4798      	blx	r3
   234fc:	4b2a      	ldr	r3, [pc, #168]	; (235a8 <spi_data_write+0x1c4>)
   234fe:	0018      	movs	r0, r3
   23500:	4b27      	ldr	r3, [pc, #156]	; (235a0 <spi_data_write+0x1bc>)
   23502:	4798      	blx	r3
			result = N_FAIL;
   23504:	2313      	movs	r3, #19
   23506:	18fb      	adds	r3, r7, r3
   23508:	2200      	movs	r2, #0
   2350a:	701a      	strb	r2, [r3, #0]
			break;
   2350c:	e037      	b.n	2357e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2350e:	4b29      	ldr	r3, [pc, #164]	; (235b4 <spi_data_write+0x1d0>)
   23510:	781b      	ldrb	r3, [r3, #0]
   23512:	2b00      	cmp	r3, #0
   23514:	d11b      	bne.n	2354e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23516:	230c      	movs	r3, #12
   23518:	18fb      	adds	r3, r7, r3
   2351a:	2102      	movs	r1, #2
   2351c:	0018      	movs	r0, r3
   2351e:	4b1c      	ldr	r3, [pc, #112]	; (23590 <spi_data_write+0x1ac>)
   23520:	4798      	blx	r3
   23522:	1e03      	subs	r3, r0, #0
   23524:	d013      	beq.n	2354e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23526:	23d7      	movs	r3, #215	; 0xd7
   23528:	009a      	lsls	r2, r3, #2
   2352a:	491b      	ldr	r1, [pc, #108]	; (23598 <spi_data_write+0x1b4>)
   2352c:	4b1b      	ldr	r3, [pc, #108]	; (2359c <spi_data_write+0x1b8>)
   2352e:	0018      	movs	r0, r3
   23530:	4b1b      	ldr	r3, [pc, #108]	; (235a0 <spi_data_write+0x1bc>)
   23532:	4798      	blx	r3
   23534:	4b20      	ldr	r3, [pc, #128]	; (235b8 <spi_data_write+0x1d4>)
   23536:	0018      	movs	r0, r3
   23538:	4b19      	ldr	r3, [pc, #100]	; (235a0 <spi_data_write+0x1bc>)
   2353a:	4798      	blx	r3
   2353c:	4b1a      	ldr	r3, [pc, #104]	; (235a8 <spi_data_write+0x1c4>)
   2353e:	0018      	movs	r0, r3
   23540:	4b17      	ldr	r3, [pc, #92]	; (235a0 <spi_data_write+0x1bc>)
   23542:	4798      	blx	r3
				result = N_FAIL;
   23544:	2313      	movs	r3, #19
   23546:	18fb      	adds	r3, r7, r3
   23548:	2200      	movs	r2, #0
   2354a:	701a      	strb	r2, [r3, #0]
				break;
   2354c:	e017      	b.n	2357e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2354e:	2316      	movs	r3, #22
   23550:	18fb      	adds	r3, r7, r3
   23552:	881a      	ldrh	r2, [r3, #0]
   23554:	2314      	movs	r3, #20
   23556:	18fb      	adds	r3, r7, r3
   23558:	881b      	ldrh	r3, [r3, #0]
   2355a:	18d3      	adds	r3, r2, r3
   2355c:	b29a      	uxth	r2, r3
   2355e:	2316      	movs	r3, #22
   23560:	18fb      	adds	r3, r7, r3
   23562:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23564:	1cbb      	adds	r3, r7, #2
   23566:	1cb9      	adds	r1, r7, #2
   23568:	2214      	movs	r2, #20
   2356a:	18ba      	adds	r2, r7, r2
   2356c:	8809      	ldrh	r1, [r1, #0]
   2356e:	8812      	ldrh	r2, [r2, #0]
   23570:	1a8a      	subs	r2, r1, r2
   23572:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23574:	1cbb      	adds	r3, r7, #2
   23576:	881b      	ldrh	r3, [r3, #0]
   23578:	2b00      	cmp	r3, #0
   2357a:	d000      	beq.n	2357e <spi_data_write+0x19a>
   2357c:	e745      	b.n	2340a <spi_data_write+0x26>


	return result;
   2357e:	2313      	movs	r3, #19
   23580:	18fb      	adds	r3, r7, r3
   23582:	781b      	ldrb	r3, [r3, #0]
   23584:	b25b      	sxtb	r3, r3
}
   23586:	0018      	movs	r0, r3
   23588:	46bd      	mov	sp, r7
   2358a:	b006      	add	sp, #24
   2358c:	bd80      	pop	{r7, pc}
   2358e:	46c0      	nop			; (mov r8, r8)
   23590:	0002246d 	.word	0x0002246d
   23594:	00000349 	.word	0x00000349
   23598:	00038e48 	.word	0x00038e48
   2359c:	00038820 	.word	0x00038820
   235a0:	0001cf79 	.word	0x0001cf79
   235a4:	00038ae8 	.word	0x00038ae8
   235a8:	00038860 	.word	0x00038860
   235ac:	00000352 	.word	0x00000352
   235b0:	00038b20 	.word	0x00038b20
   235b4:	2000427c 	.word	0x2000427c
   235b8:	00038b54 	.word	0x00038b54

000235bc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   235bc:	b590      	push	{r4, r7, lr}
   235be:	b087      	sub	sp, #28
   235c0:	af02      	add	r7, sp, #8
   235c2:	6078      	str	r0, [r7, #4]
   235c4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   235c6:	230f      	movs	r3, #15
   235c8:	18fb      	adds	r3, r7, r3
   235ca:	220a      	movs	r2, #10
   235cc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   235ce:	230c      	movs	r3, #12
   235d0:	18fb      	adds	r3, r7, r3
   235d2:	2201      	movs	r2, #1
   235d4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   235d6:	230e      	movs	r3, #14
   235d8:	18fb      	adds	r3, r7, r3
   235da:	22c9      	movs	r2, #201	; 0xc9
   235dc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   235de:	230d      	movs	r3, #13
   235e0:	18fb      	adds	r3, r7, r3
   235e2:	2200      	movs	r2, #0
   235e4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   235e6:	687b      	ldr	r3, [r7, #4]
   235e8:	2b30      	cmp	r3, #48	; 0x30
   235ea:	d808      	bhi.n	235fe <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   235ec:	230e      	movs	r3, #14
   235ee:	18fb      	adds	r3, r7, r3
   235f0:	22c3      	movs	r2, #195	; 0xc3
   235f2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   235f4:	230d      	movs	r3, #13
   235f6:	18fb      	adds	r3, r7, r3
   235f8:	2201      	movs	r2, #1
   235fa:	701a      	strb	r2, [r3, #0]
   235fc:	e007      	b.n	2360e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   235fe:	230e      	movs	r3, #14
   23600:	18fb      	adds	r3, r7, r3
   23602:	22c9      	movs	r2, #201	; 0xc9
   23604:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23606:	230d      	movs	r3, #13
   23608:	18fb      	adds	r3, r7, r3
   2360a:	2200      	movs	r2, #0
   2360c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2360e:	003a      	movs	r2, r7
   23610:	6879      	ldr	r1, [r7, #4]
   23612:	230e      	movs	r3, #14
   23614:	18fb      	adds	r3, r7, r3
   23616:	7818      	ldrb	r0, [r3, #0]
   23618:	230d      	movs	r3, #13
   2361a:	18fb      	adds	r3, r7, r3
   2361c:	781b      	ldrb	r3, [r3, #0]
   2361e:	9300      	str	r3, [sp, #0]
   23620:	2304      	movs	r3, #4
   23622:	4c2e      	ldr	r4, [pc, #184]	; (236dc <spi_write_reg+0x120>)
   23624:	47a0      	blx	r4
   23626:	0002      	movs	r2, r0
   23628:	230c      	movs	r3, #12
   2362a:	18fb      	adds	r3, r7, r3
   2362c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2362e:	230c      	movs	r3, #12
   23630:	18fb      	adds	r3, r7, r3
   23632:	781b      	ldrb	r3, [r3, #0]
   23634:	b25b      	sxtb	r3, r3
   23636:	2b01      	cmp	r3, #1
   23638:	d010      	beq.n	2365c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2363a:	4a29      	ldr	r2, [pc, #164]	; (236e0 <spi_write_reg+0x124>)
   2363c:	4929      	ldr	r1, [pc, #164]	; (236e4 <spi_write_reg+0x128>)
   2363e:	4b2a      	ldr	r3, [pc, #168]	; (236e8 <spi_write_reg+0x12c>)
   23640:	0018      	movs	r0, r3
   23642:	4b2a      	ldr	r3, [pc, #168]	; (236ec <spi_write_reg+0x130>)
   23644:	4798      	blx	r3
   23646:	687a      	ldr	r2, [r7, #4]
   23648:	4b29      	ldr	r3, [pc, #164]	; (236f0 <spi_write_reg+0x134>)
   2364a:	0011      	movs	r1, r2
   2364c:	0018      	movs	r0, r3
   2364e:	4b27      	ldr	r3, [pc, #156]	; (236ec <spi_write_reg+0x130>)
   23650:	4798      	blx	r3
   23652:	4b28      	ldr	r3, [pc, #160]	; (236f4 <spi_write_reg+0x138>)
   23654:	0018      	movs	r0, r3
   23656:	4b25      	ldr	r3, [pc, #148]	; (236ec <spi_write_reg+0x130>)
   23658:	4798      	blx	r3
		goto _FAIL_;
   2365a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   2365c:	230c      	movs	r3, #12
   2365e:	18fb      	adds	r3, r7, r3
   23660:	781b      	ldrb	r3, [r3, #0]
   23662:	b25b      	sxtb	r3, r3
   23664:	2b01      	cmp	r3, #1
   23666:	d030      	beq.n	236ca <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23668:	2001      	movs	r0, #1
   2366a:	4b23      	ldr	r3, [pc, #140]	; (236f8 <spi_write_reg+0x13c>)
   2366c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2366e:	2300      	movs	r3, #0
   23670:	9300      	str	r3, [sp, #0]
   23672:	2300      	movs	r3, #0
   23674:	2200      	movs	r2, #0
   23676:	2100      	movs	r1, #0
   23678:	20cf      	movs	r0, #207	; 0xcf
   2367a:	4c20      	ldr	r4, [pc, #128]	; (236fc <spi_write_reg+0x140>)
   2367c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2367e:	20cf      	movs	r0, #207	; 0xcf
   23680:	4b1f      	ldr	r3, [pc, #124]	; (23700 <spi_write_reg+0x144>)
   23682:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23684:	23ea      	movs	r3, #234	; 0xea
   23686:	009a      	lsls	r2, r3, #2
   23688:	4916      	ldr	r1, [pc, #88]	; (236e4 <spi_write_reg+0x128>)
   2368a:	4b17      	ldr	r3, [pc, #92]	; (236e8 <spi_write_reg+0x12c>)
   2368c:	0018      	movs	r0, r3
   2368e:	4b17      	ldr	r3, [pc, #92]	; (236ec <spi_write_reg+0x130>)
   23690:	4798      	blx	r3
   23692:	230f      	movs	r3, #15
   23694:	18fb      	adds	r3, r7, r3
   23696:	7819      	ldrb	r1, [r3, #0]
   23698:	683b      	ldr	r3, [r7, #0]
   2369a:	687a      	ldr	r2, [r7, #4]
   2369c:	4819      	ldr	r0, [pc, #100]	; (23704 <spi_write_reg+0x148>)
   2369e:	4c13      	ldr	r4, [pc, #76]	; (236ec <spi_write_reg+0x130>)
   236a0:	47a0      	blx	r4
   236a2:	4b14      	ldr	r3, [pc, #80]	; (236f4 <spi_write_reg+0x138>)
   236a4:	0018      	movs	r0, r3
   236a6:	4b11      	ldr	r3, [pc, #68]	; (236ec <spi_write_reg+0x130>)
   236a8:	4798      	blx	r3
		nm_bsp_sleep(1);
   236aa:	2001      	movs	r0, #1
   236ac:	4b12      	ldr	r3, [pc, #72]	; (236f8 <spi_write_reg+0x13c>)
   236ae:	4798      	blx	r3
		retry--;
   236b0:	230f      	movs	r3, #15
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	781a      	ldrb	r2, [r3, #0]
   236b6:	230f      	movs	r3, #15
   236b8:	18fb      	adds	r3, r7, r3
   236ba:	3a01      	subs	r2, #1
   236bc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   236be:	230f      	movs	r3, #15
   236c0:	18fb      	adds	r3, r7, r3
   236c2:	781b      	ldrb	r3, [r3, #0]
   236c4:	2b00      	cmp	r3, #0
   236c6:	d000      	beq.n	236ca <spi_write_reg+0x10e>
   236c8:	e78d      	b.n	235e6 <spi_write_reg+0x2a>
	}

	return result;
   236ca:	230c      	movs	r3, #12
   236cc:	18fb      	adds	r3, r7, r3
   236ce:	781b      	ldrb	r3, [r3, #0]
   236d0:	b25b      	sxtb	r3, r3
}
   236d2:	0018      	movs	r0, r3
   236d4:	46bd      	mov	sp, r7
   236d6:	b005      	add	sp, #20
   236d8:	bd90      	pop	{r4, r7, pc}
   236da:	46c0      	nop			; (mov r8, r8)
   236dc:	00022af1 	.word	0x00022af1
   236e0:	0000039d 	.word	0x0000039d
   236e4:	00038e58 	.word	0x00038e58
   236e8:	00038820 	.word	0x00038820
   236ec:	0001cf79 	.word	0x0001cf79
   236f0:	00038b8c 	.word	0x00038b8c
   236f4:	00038860 	.word	0x00038860
   236f8:	0001f431 	.word	0x0001f431
   236fc:	00022575 	.word	0x00022575
   23700:	000229b5 	.word	0x000229b5
   23704:	00038bb8 	.word	0x00038bb8

00023708 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   23708:	b590      	push	{r4, r7, lr}
   2370a:	b089      	sub	sp, #36	; 0x24
   2370c:	af02      	add	r7, sp, #8
   2370e:	60f8      	str	r0, [r7, #12]
   23710:	60b9      	str	r1, [r7, #8]
   23712:	1dbb      	adds	r3, r7, #6
   23714:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23716:	2316      	movs	r3, #22
   23718:	18fb      	adds	r3, r7, r3
   2371a:	220a      	movs	r2, #10
   2371c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2371e:	2315      	movs	r3, #21
   23720:	18fb      	adds	r3, r7, r3
   23722:	22c7      	movs	r2, #199	; 0xc7
   23724:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   23726:	1dbb      	adds	r3, r7, #6
   23728:	881a      	ldrh	r2, [r3, #0]
   2372a:	68f9      	ldr	r1, [r7, #12]
   2372c:	2315      	movs	r3, #21
   2372e:	18fb      	adds	r3, r7, r3
   23730:	7818      	ldrb	r0, [r3, #0]
   23732:	2300      	movs	r3, #0
   23734:	9300      	str	r3, [sp, #0]
   23736:	0013      	movs	r3, r2
   23738:	2200      	movs	r2, #0
   2373a:	4c4d      	ldr	r4, [pc, #308]	; (23870 <nm_spi_write+0x168>)
   2373c:	47a0      	blx	r4
   2373e:	0002      	movs	r2, r0
   23740:	2317      	movs	r3, #23
   23742:	18fb      	adds	r3, r7, r3
   23744:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23746:	2317      	movs	r3, #23
   23748:	18fb      	adds	r3, r7, r3
   2374a:	781b      	ldrb	r3, [r3, #0]
   2374c:	b25b      	sxtb	r3, r3
   2374e:	2b01      	cmp	r3, #1
   23750:	d010      	beq.n	23774 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   23752:	4a48      	ldr	r2, [pc, #288]	; (23874 <nm_spi_write+0x16c>)
   23754:	4948      	ldr	r1, [pc, #288]	; (23878 <nm_spi_write+0x170>)
   23756:	4b49      	ldr	r3, [pc, #292]	; (2387c <nm_spi_write+0x174>)
   23758:	0018      	movs	r0, r3
   2375a:	4b49      	ldr	r3, [pc, #292]	; (23880 <nm_spi_write+0x178>)
   2375c:	4798      	blx	r3
   2375e:	68fa      	ldr	r2, [r7, #12]
   23760:	4b48      	ldr	r3, [pc, #288]	; (23884 <nm_spi_write+0x17c>)
   23762:	0011      	movs	r1, r2
   23764:	0018      	movs	r0, r3
   23766:	4b46      	ldr	r3, [pc, #280]	; (23880 <nm_spi_write+0x178>)
   23768:	4798      	blx	r3
   2376a:	4b47      	ldr	r3, [pc, #284]	; (23888 <nm_spi_write+0x180>)
   2376c:	0018      	movs	r0, r3
   2376e:	4b44      	ldr	r3, [pc, #272]	; (23880 <nm_spi_write+0x178>)
   23770:	4798      	blx	r3
		goto _FAIL_;
   23772:	e03e      	b.n	237f2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   23774:	2317      	movs	r3, #23
   23776:	18fc      	adds	r4, r7, r3
   23778:	1dbb      	adds	r3, r7, #6
   2377a:	881a      	ldrh	r2, [r3, #0]
   2377c:	68bb      	ldr	r3, [r7, #8]
   2377e:	0011      	movs	r1, r2
   23780:	0018      	movs	r0, r3
   23782:	4b42      	ldr	r3, [pc, #264]	; (2388c <nm_spi_write+0x184>)
   23784:	4798      	blx	r3
   23786:	0003      	movs	r3, r0
   23788:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2378a:	2317      	movs	r3, #23
   2378c:	18fb      	adds	r3, r7, r3
   2378e:	781b      	ldrb	r3, [r3, #0]
   23790:	b25b      	sxtb	r3, r3
   23792:	2b01      	cmp	r3, #1
   23794:	d00e      	beq.n	237b4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23796:	4a3e      	ldr	r2, [pc, #248]	; (23890 <nm_spi_write+0x188>)
   23798:	4937      	ldr	r1, [pc, #220]	; (23878 <nm_spi_write+0x170>)
   2379a:	4b38      	ldr	r3, [pc, #224]	; (2387c <nm_spi_write+0x174>)
   2379c:	0018      	movs	r0, r3
   2379e:	4b38      	ldr	r3, [pc, #224]	; (23880 <nm_spi_write+0x178>)
   237a0:	4798      	blx	r3
   237a2:	4b3c      	ldr	r3, [pc, #240]	; (23894 <nm_spi_write+0x18c>)
   237a4:	0018      	movs	r0, r3
   237a6:	4b36      	ldr	r3, [pc, #216]	; (23880 <nm_spi_write+0x178>)
   237a8:	4798      	blx	r3
   237aa:	4b37      	ldr	r3, [pc, #220]	; (23888 <nm_spi_write+0x180>)
   237ac:	0018      	movs	r0, r3
   237ae:	4b34      	ldr	r3, [pc, #208]	; (23880 <nm_spi_write+0x178>)
   237b0:	4798      	blx	r3
		goto _FAIL_;
   237b2:	e01e      	b.n	237f2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   237b4:	2317      	movs	r3, #23
   237b6:	18fc      	adds	r4, r7, r3
   237b8:	2315      	movs	r3, #21
   237ba:	18fb      	adds	r3, r7, r3
   237bc:	781b      	ldrb	r3, [r3, #0]
   237be:	0018      	movs	r0, r3
   237c0:	4b35      	ldr	r3, [pc, #212]	; (23898 <nm_spi_write+0x190>)
   237c2:	4798      	blx	r3
   237c4:	0003      	movs	r3, r0
   237c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   237c8:	2317      	movs	r3, #23
   237ca:	18fb      	adds	r3, r7, r3
   237cc:	781b      	ldrb	r3, [r3, #0]
   237ce:	b25b      	sxtb	r3, r3
   237d0:	2b01      	cmp	r3, #1
   237d2:	d00e      	beq.n	237f2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   237d4:	4a31      	ldr	r2, [pc, #196]	; (2389c <nm_spi_write+0x194>)
   237d6:	4928      	ldr	r1, [pc, #160]	; (23878 <nm_spi_write+0x170>)
   237d8:	4b28      	ldr	r3, [pc, #160]	; (2387c <nm_spi_write+0x174>)
   237da:	0018      	movs	r0, r3
   237dc:	4b28      	ldr	r3, [pc, #160]	; (23880 <nm_spi_write+0x178>)
   237de:	4798      	blx	r3
   237e0:	4b2c      	ldr	r3, [pc, #176]	; (23894 <nm_spi_write+0x18c>)
   237e2:	0018      	movs	r0, r3
   237e4:	4b26      	ldr	r3, [pc, #152]	; (23880 <nm_spi_write+0x178>)
   237e6:	4798      	blx	r3
   237e8:	4b27      	ldr	r3, [pc, #156]	; (23888 <nm_spi_write+0x180>)
   237ea:	0018      	movs	r0, r3
   237ec:	4b24      	ldr	r3, [pc, #144]	; (23880 <nm_spi_write+0x178>)
   237ee:	4798      	blx	r3
		goto _FAIL_;
   237f0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   237f2:	2317      	movs	r3, #23
   237f4:	18fb      	adds	r3, r7, r3
   237f6:	781b      	ldrb	r3, [r3, #0]
   237f8:	b25b      	sxtb	r3, r3
   237fa:	2b01      	cmp	r3, #1
   237fc:	d030      	beq.n	23860 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   237fe:	2001      	movs	r0, #1
   23800:	4b27      	ldr	r3, [pc, #156]	; (238a0 <nm_spi_write+0x198>)
   23802:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23804:	2300      	movs	r3, #0
   23806:	9300      	str	r3, [sp, #0]
   23808:	2300      	movs	r3, #0
   2380a:	2200      	movs	r2, #0
   2380c:	2100      	movs	r1, #0
   2380e:	20cf      	movs	r0, #207	; 0xcf
   23810:	4c24      	ldr	r4, [pc, #144]	; (238a4 <nm_spi_write+0x19c>)
   23812:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23814:	20cf      	movs	r0, #207	; 0xcf
   23816:	4b24      	ldr	r3, [pc, #144]	; (238a8 <nm_spi_write+0x1a0>)
   23818:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2381a:	4a24      	ldr	r2, [pc, #144]	; (238ac <nm_spi_write+0x1a4>)
   2381c:	4916      	ldr	r1, [pc, #88]	; (23878 <nm_spi_write+0x170>)
   2381e:	4b17      	ldr	r3, [pc, #92]	; (2387c <nm_spi_write+0x174>)
   23820:	0018      	movs	r0, r3
   23822:	4b17      	ldr	r3, [pc, #92]	; (23880 <nm_spi_write+0x178>)
   23824:	4798      	blx	r3
   23826:	2316      	movs	r3, #22
   23828:	18fb      	adds	r3, r7, r3
   2382a:	7819      	ldrb	r1, [r3, #0]
   2382c:	1dbb      	adds	r3, r7, #6
   2382e:	881b      	ldrh	r3, [r3, #0]
   23830:	68fa      	ldr	r2, [r7, #12]
   23832:	481f      	ldr	r0, [pc, #124]	; (238b0 <nm_spi_write+0x1a8>)
   23834:	4c12      	ldr	r4, [pc, #72]	; (23880 <nm_spi_write+0x178>)
   23836:	47a0      	blx	r4
   23838:	4b13      	ldr	r3, [pc, #76]	; (23888 <nm_spi_write+0x180>)
   2383a:	0018      	movs	r0, r3
   2383c:	4b10      	ldr	r3, [pc, #64]	; (23880 <nm_spi_write+0x178>)
   2383e:	4798      	blx	r3
		nm_bsp_sleep(1);
   23840:	2001      	movs	r0, #1
   23842:	4b17      	ldr	r3, [pc, #92]	; (238a0 <nm_spi_write+0x198>)
   23844:	4798      	blx	r3
		retry--;
   23846:	2316      	movs	r3, #22
   23848:	18fb      	adds	r3, r7, r3
   2384a:	781a      	ldrb	r2, [r3, #0]
   2384c:	2316      	movs	r3, #22
   2384e:	18fb      	adds	r3, r7, r3
   23850:	3a01      	subs	r2, #1
   23852:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23854:	2316      	movs	r3, #22
   23856:	18fb      	adds	r3, r7, r3
   23858:	781b      	ldrb	r3, [r3, #0]
   2385a:	2b00      	cmp	r3, #0
   2385c:	d000      	beq.n	23860 <nm_spi_write+0x158>
   2385e:	e762      	b.n	23726 <nm_spi_write+0x1e>
	}


	return result;
   23860:	2317      	movs	r3, #23
   23862:	18fb      	adds	r3, r7, r3
   23864:	781b      	ldrb	r3, [r3, #0]
   23866:	b25b      	sxtb	r3, r3
}
   23868:	0018      	movs	r0, r3
   2386a:	46bd      	mov	sp, r7
   2386c:	b007      	add	sp, #28
   2386e:	bd90      	pop	{r4, r7, pc}
   23870:	00022af1 	.word	0x00022af1
   23874:	000003cf 	.word	0x000003cf
   23878:	00038e68 	.word	0x00038e68
   2387c:	00038820 	.word	0x00038820
   23880:	0001cf79 	.word	0x0001cf79
   23884:	00038bd4 	.word	0x00038bd4
   23888:	00038860 	.word	0x00038860
   2388c:	000233e5 	.word	0x000233e5
   23890:	000003d9 	.word	0x000003d9
   23894:	00038c04 	.word	0x00038c04
   23898:	000228b5 	.word	0x000228b5
   2389c:	000003e1 	.word	0x000003e1
   238a0:	0001f431 	.word	0x0001f431
   238a4:	00022575 	.word	0x00022575
   238a8:	000229b5 	.word	0x000229b5
   238ac:	000003eb 	.word	0x000003eb
   238b0:	00038c2c 	.word	0x00038c2c

000238b4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   238b4:	b590      	push	{r4, r7, lr}
   238b6:	b087      	sub	sp, #28
   238b8:	af02      	add	r7, sp, #8
   238ba:	6078      	str	r0, [r7, #4]
   238bc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   238be:	230f      	movs	r3, #15
   238c0:	18fb      	adds	r3, r7, r3
   238c2:	220a      	movs	r2, #10
   238c4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   238c6:	230c      	movs	r3, #12
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	2201      	movs	r2, #1
   238cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   238ce:	230e      	movs	r3, #14
   238d0:	18fb      	adds	r3, r7, r3
   238d2:	22ca      	movs	r2, #202	; 0xca
   238d4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   238d6:	230d      	movs	r3, #13
   238d8:	18fb      	adds	r3, r7, r3
   238da:	2200      	movs	r2, #0
   238dc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   238de:	687b      	ldr	r3, [r7, #4]
   238e0:	2bff      	cmp	r3, #255	; 0xff
   238e2:	d808      	bhi.n	238f6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   238e4:	230e      	movs	r3, #14
   238e6:	18fb      	adds	r3, r7, r3
   238e8:	22c4      	movs	r2, #196	; 0xc4
   238ea:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   238ec:	230d      	movs	r3, #13
   238ee:	18fb      	adds	r3, r7, r3
   238f0:	2201      	movs	r2, #1
   238f2:	701a      	strb	r2, [r3, #0]
   238f4:	e007      	b.n	23906 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   238f6:	230e      	movs	r3, #14
   238f8:	18fb      	adds	r3, r7, r3
   238fa:	22ca      	movs	r2, #202	; 0xca
   238fc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   238fe:	230d      	movs	r3, #13
   23900:	18fb      	adds	r3, r7, r3
   23902:	2200      	movs	r2, #0
   23904:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   23906:	2308      	movs	r3, #8
   23908:	18fa      	adds	r2, r7, r3
   2390a:	6879      	ldr	r1, [r7, #4]
   2390c:	230e      	movs	r3, #14
   2390e:	18fb      	adds	r3, r7, r3
   23910:	7818      	ldrb	r0, [r3, #0]
   23912:	230d      	movs	r3, #13
   23914:	18fb      	adds	r3, r7, r3
   23916:	781b      	ldrb	r3, [r3, #0]
   23918:	9300      	str	r3, [sp, #0]
   2391a:	2304      	movs	r3, #4
   2391c:	4c37      	ldr	r4, [pc, #220]	; (239fc <spi_read_reg+0x148>)
   2391e:	47a0      	blx	r4
   23920:	0002      	movs	r2, r0
   23922:	230c      	movs	r3, #12
   23924:	18fb      	adds	r3, r7, r3
   23926:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23928:	230c      	movs	r3, #12
   2392a:	18fb      	adds	r3, r7, r3
   2392c:	781b      	ldrb	r3, [r3, #0]
   2392e:	b25b      	sxtb	r3, r3
   23930:	2b01      	cmp	r3, #1
   23932:	d010      	beq.n	23956 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   23934:	4a32      	ldr	r2, [pc, #200]	; (23a00 <spi_read_reg+0x14c>)
   23936:	4933      	ldr	r1, [pc, #204]	; (23a04 <spi_read_reg+0x150>)
   23938:	4b33      	ldr	r3, [pc, #204]	; (23a08 <spi_read_reg+0x154>)
   2393a:	0018      	movs	r0, r3
   2393c:	4b33      	ldr	r3, [pc, #204]	; (23a0c <spi_read_reg+0x158>)
   2393e:	4798      	blx	r3
   23940:	687a      	ldr	r2, [r7, #4]
   23942:	4b33      	ldr	r3, [pc, #204]	; (23a10 <spi_read_reg+0x15c>)
   23944:	0011      	movs	r1, r2
   23946:	0018      	movs	r0, r3
   23948:	4b30      	ldr	r3, [pc, #192]	; (23a0c <spi_read_reg+0x158>)
   2394a:	4798      	blx	r3
   2394c:	4b31      	ldr	r3, [pc, #196]	; (23a14 <spi_read_reg+0x160>)
   2394e:	0018      	movs	r0, r3
   23950:	4b2e      	ldr	r3, [pc, #184]	; (23a0c <spi_read_reg+0x158>)
   23952:	4798      	blx	r3
		goto _FAIL_;
   23954:	e014      	b.n	23980 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   23956:	2308      	movs	r3, #8
   23958:	18fb      	adds	r3, r7, r3
   2395a:	781b      	ldrb	r3, [r3, #0]
   2395c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2395e:	2308      	movs	r3, #8
   23960:	18fb      	adds	r3, r7, r3
   23962:	785b      	ldrb	r3, [r3, #1]
   23964:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   23966:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   23968:	2308      	movs	r3, #8
   2396a:	18fb      	adds	r3, r7, r3
   2396c:	789b      	ldrb	r3, [r3, #2]
   2396e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   23970:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   23972:	2308      	movs	r3, #8
   23974:	18fb      	adds	r3, r7, r3
   23976:	78db      	ldrb	r3, [r3, #3]
   23978:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2397a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2397c:	683b      	ldr	r3, [r7, #0]
   2397e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   23980:	230c      	movs	r3, #12
   23982:	18fb      	adds	r3, r7, r3
   23984:	781b      	ldrb	r3, [r3, #0]
   23986:	b25b      	sxtb	r3, r3
   23988:	2b01      	cmp	r3, #1
   2398a:	d02f      	beq.n	239ec <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2398c:	2001      	movs	r0, #1
   2398e:	4b22      	ldr	r3, [pc, #136]	; (23a18 <spi_read_reg+0x164>)
   23990:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23992:	2300      	movs	r3, #0
   23994:	9300      	str	r3, [sp, #0]
   23996:	2300      	movs	r3, #0
   23998:	2200      	movs	r2, #0
   2399a:	2100      	movs	r1, #0
   2399c:	20cf      	movs	r0, #207	; 0xcf
   2399e:	4c1f      	ldr	r4, [pc, #124]	; (23a1c <spi_read_reg+0x168>)
   239a0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   239a2:	20cf      	movs	r0, #207	; 0xcf
   239a4:	4b1e      	ldr	r3, [pc, #120]	; (23a20 <spi_read_reg+0x16c>)
   239a6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   239a8:	4a1e      	ldr	r2, [pc, #120]	; (23a24 <spi_read_reg+0x170>)
   239aa:	4916      	ldr	r1, [pc, #88]	; (23a04 <spi_read_reg+0x150>)
   239ac:	4b16      	ldr	r3, [pc, #88]	; (23a08 <spi_read_reg+0x154>)
   239ae:	0018      	movs	r0, r3
   239b0:	4b16      	ldr	r3, [pc, #88]	; (23a0c <spi_read_reg+0x158>)
   239b2:	4798      	blx	r3
   239b4:	230f      	movs	r3, #15
   239b6:	18fb      	adds	r3, r7, r3
   239b8:	7819      	ldrb	r1, [r3, #0]
   239ba:	687a      	ldr	r2, [r7, #4]
   239bc:	4b1a      	ldr	r3, [pc, #104]	; (23a28 <spi_read_reg+0x174>)
   239be:	0018      	movs	r0, r3
   239c0:	4b12      	ldr	r3, [pc, #72]	; (23a0c <spi_read_reg+0x158>)
   239c2:	4798      	blx	r3
   239c4:	4b13      	ldr	r3, [pc, #76]	; (23a14 <spi_read_reg+0x160>)
   239c6:	0018      	movs	r0, r3
   239c8:	4b10      	ldr	r3, [pc, #64]	; (23a0c <spi_read_reg+0x158>)
   239ca:	4798      	blx	r3
		nm_bsp_sleep(1);
   239cc:	2001      	movs	r0, #1
   239ce:	4b12      	ldr	r3, [pc, #72]	; (23a18 <spi_read_reg+0x164>)
   239d0:	4798      	blx	r3
		retry--;
   239d2:	230f      	movs	r3, #15
   239d4:	18fb      	adds	r3, r7, r3
   239d6:	781a      	ldrb	r2, [r3, #0]
   239d8:	230f      	movs	r3, #15
   239da:	18fb      	adds	r3, r7, r3
   239dc:	3a01      	subs	r2, #1
   239de:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   239e0:	230f      	movs	r3, #15
   239e2:	18fb      	adds	r3, r7, r3
   239e4:	781b      	ldrb	r3, [r3, #0]
   239e6:	2b00      	cmp	r3, #0
   239e8:	d000      	beq.n	239ec <spi_read_reg+0x138>
   239ea:	e778      	b.n	238de <spi_read_reg+0x2a>
	}
		
	return result;
   239ec:	230c      	movs	r3, #12
   239ee:	18fb      	adds	r3, r7, r3
   239f0:	781b      	ldrb	r3, [r3, #0]
   239f2:	b25b      	sxtb	r3, r3
}
   239f4:	0018      	movs	r0, r3
   239f6:	46bd      	mov	sp, r7
   239f8:	b005      	add	sp, #20
   239fa:	bd90      	pop	{r4, r7, pc}
   239fc:	00022af1 	.word	0x00022af1
   23a00:	00000423 	.word	0x00000423
   23a04:	00038e78 	.word	0x00038e78
   23a08:	00038820 	.word	0x00038820
   23a0c:	0001cf79 	.word	0x0001cf79
   23a10:	00038c48 	.word	0x00038c48
   23a14:	00038860 	.word	0x00038860
   23a18:	0001f431 	.word	0x0001f431
   23a1c:	00022575 	.word	0x00022575
   23a20:	000229b5 	.word	0x000229b5
   23a24:	00000435 	.word	0x00000435
   23a28:	00038c74 	.word	0x00038c74

00023a2c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   23a2c:	b590      	push	{r4, r7, lr}
   23a2e:	b089      	sub	sp, #36	; 0x24
   23a30:	af02      	add	r7, sp, #8
   23a32:	60f8      	str	r0, [r7, #12]
   23a34:	60b9      	str	r1, [r7, #8]
   23a36:	1dbb      	adds	r3, r7, #6
   23a38:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   23a3a:	2316      	movs	r3, #22
   23a3c:	18fb      	adds	r3, r7, r3
   23a3e:	22c8      	movs	r2, #200	; 0xc8
   23a40:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23a42:	2317      	movs	r3, #23
   23a44:	18fb      	adds	r3, r7, r3
   23a46:	220a      	movs	r2, #10
   23a48:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   23a4a:	1dbb      	adds	r3, r7, #6
   23a4c:	881c      	ldrh	r4, [r3, #0]
   23a4e:	68ba      	ldr	r2, [r7, #8]
   23a50:	68f9      	ldr	r1, [r7, #12]
   23a52:	2316      	movs	r3, #22
   23a54:	18fb      	adds	r3, r7, r3
   23a56:	7818      	ldrb	r0, [r3, #0]
   23a58:	2300      	movs	r3, #0
   23a5a:	9300      	str	r3, [sp, #0]
   23a5c:	0023      	movs	r3, r4
   23a5e:	4c2e      	ldr	r4, [pc, #184]	; (23b18 <nm_spi_read+0xec>)
   23a60:	47a0      	blx	r4
   23a62:	0002      	movs	r2, r0
   23a64:	2315      	movs	r3, #21
   23a66:	18fb      	adds	r3, r7, r3
   23a68:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23a6a:	2315      	movs	r3, #21
   23a6c:	18fb      	adds	r3, r7, r3
   23a6e:	781b      	ldrb	r3, [r3, #0]
   23a70:	b25b      	sxtb	r3, r3
   23a72:	2b01      	cmp	r3, #1
   23a74:	d010      	beq.n	23a98 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   23a76:	4a29      	ldr	r2, [pc, #164]	; (23b1c <nm_spi_read+0xf0>)
   23a78:	4929      	ldr	r1, [pc, #164]	; (23b20 <nm_spi_read+0xf4>)
   23a7a:	4b2a      	ldr	r3, [pc, #168]	; (23b24 <nm_spi_read+0xf8>)
   23a7c:	0018      	movs	r0, r3
   23a7e:	4b2a      	ldr	r3, [pc, #168]	; (23b28 <nm_spi_read+0xfc>)
   23a80:	4798      	blx	r3
   23a82:	68fa      	ldr	r2, [r7, #12]
   23a84:	4b29      	ldr	r3, [pc, #164]	; (23b2c <nm_spi_read+0x100>)
   23a86:	0011      	movs	r1, r2
   23a88:	0018      	movs	r0, r3
   23a8a:	4b27      	ldr	r3, [pc, #156]	; (23b28 <nm_spi_read+0xfc>)
   23a8c:	4798      	blx	r3
   23a8e:	4b28      	ldr	r3, [pc, #160]	; (23b30 <nm_spi_read+0x104>)
   23a90:	0018      	movs	r0, r3
   23a92:	4b25      	ldr	r3, [pc, #148]	; (23b28 <nm_spi_read+0xfc>)
   23a94:	4798      	blx	r3
		goto _FAIL_;
   23a96:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   23a98:	2315      	movs	r3, #21
   23a9a:	18fb      	adds	r3, r7, r3
   23a9c:	781b      	ldrb	r3, [r3, #0]
   23a9e:	b25b      	sxtb	r3, r3
   23aa0:	2b01      	cmp	r3, #1
   23aa2:	d030      	beq.n	23b06 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   23aa4:	2001      	movs	r0, #1
   23aa6:	4b23      	ldr	r3, [pc, #140]	; (23b34 <nm_spi_read+0x108>)
   23aa8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23aaa:	2300      	movs	r3, #0
   23aac:	9300      	str	r3, [sp, #0]
   23aae:	2300      	movs	r3, #0
   23ab0:	2200      	movs	r2, #0
   23ab2:	2100      	movs	r1, #0
   23ab4:	20cf      	movs	r0, #207	; 0xcf
   23ab6:	4c20      	ldr	r4, [pc, #128]	; (23b38 <nm_spi_read+0x10c>)
   23ab8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23aba:	20cf      	movs	r0, #207	; 0xcf
   23abc:	4b1f      	ldr	r3, [pc, #124]	; (23b3c <nm_spi_read+0x110>)
   23abe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23ac0:	4a1f      	ldr	r2, [pc, #124]	; (23b40 <nm_spi_read+0x114>)
   23ac2:	4917      	ldr	r1, [pc, #92]	; (23b20 <nm_spi_read+0xf4>)
   23ac4:	4b17      	ldr	r3, [pc, #92]	; (23b24 <nm_spi_read+0xf8>)
   23ac6:	0018      	movs	r0, r3
   23ac8:	4b17      	ldr	r3, [pc, #92]	; (23b28 <nm_spi_read+0xfc>)
   23aca:	4798      	blx	r3
   23acc:	2317      	movs	r3, #23
   23ace:	18fb      	adds	r3, r7, r3
   23ad0:	7819      	ldrb	r1, [r3, #0]
   23ad2:	1dbb      	adds	r3, r7, #6
   23ad4:	881b      	ldrh	r3, [r3, #0]
   23ad6:	68fa      	ldr	r2, [r7, #12]
   23ad8:	481a      	ldr	r0, [pc, #104]	; (23b44 <nm_spi_read+0x118>)
   23ada:	4c13      	ldr	r4, [pc, #76]	; (23b28 <nm_spi_read+0xfc>)
   23adc:	47a0      	blx	r4
   23ade:	4b14      	ldr	r3, [pc, #80]	; (23b30 <nm_spi_read+0x104>)
   23ae0:	0018      	movs	r0, r3
   23ae2:	4b11      	ldr	r3, [pc, #68]	; (23b28 <nm_spi_read+0xfc>)
   23ae4:	4798      	blx	r3
		nm_bsp_sleep(1);
   23ae6:	2001      	movs	r0, #1
   23ae8:	4b12      	ldr	r3, [pc, #72]	; (23b34 <nm_spi_read+0x108>)
   23aea:	4798      	blx	r3
		retry--;
   23aec:	2317      	movs	r3, #23
   23aee:	18fb      	adds	r3, r7, r3
   23af0:	781a      	ldrb	r2, [r3, #0]
   23af2:	2317      	movs	r3, #23
   23af4:	18fb      	adds	r3, r7, r3
   23af6:	3a01      	subs	r2, #1
   23af8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23afa:	2317      	movs	r3, #23
   23afc:	18fb      	adds	r3, r7, r3
   23afe:	781b      	ldrb	r3, [r3, #0]
   23b00:	2b00      	cmp	r3, #0
   23b02:	d000      	beq.n	23b06 <nm_spi_read+0xda>
   23b04:	e7a1      	b.n	23a4a <nm_spi_read+0x1e>
	}

	return result;
   23b06:	2315      	movs	r3, #21
   23b08:	18fb      	adds	r3, r7, r3
   23b0a:	781b      	ldrb	r3, [r3, #0]
   23b0c:	b25b      	sxtb	r3, r3
}
   23b0e:	0018      	movs	r0, r3
   23b10:	46bd      	mov	sp, r7
   23b12:	b007      	add	sp, #28
   23b14:	bd90      	pop	{r4, r7, pc}
   23b16:	46c0      	nop			; (mov r8, r8)
   23b18:	00022af1 	.word	0x00022af1
   23b1c:	00000472 	.word	0x00000472
   23b20:	00038e88 	.word	0x00038e88
   23b24:	00038820 	.word	0x00038820
   23b28:	0001cf79 	.word	0x0001cf79
   23b2c:	00038c8c 	.word	0x00038c8c
   23b30:	00038860 	.word	0x00038860
   23b34:	0001f431 	.word	0x0001f431
   23b38:	00022575 	.word	0x00022575
   23b3c:	000229b5 	.word	0x000229b5
   23b40:	0000047d 	.word	0x0000047d
   23b44:	00038c2c 	.word	0x00038c2c

00023b48 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   23b48:	b580      	push	{r7, lr}
   23b4a:	b082      	sub	sp, #8
   23b4c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   23b4e:	4b0c      	ldr	r3, [pc, #48]	; (23b80 <spi_init_pkt_sz+0x38>)
   23b50:	0018      	movs	r0, r3
   23b52:	4b0c      	ldr	r3, [pc, #48]	; (23b84 <spi_init_pkt_sz+0x3c>)
   23b54:	4798      	blx	r3
   23b56:	0003      	movs	r3, r0
   23b58:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   23b5a:	687b      	ldr	r3, [r7, #4]
   23b5c:	2270      	movs	r2, #112	; 0x70
   23b5e:	4393      	bics	r3, r2
   23b60:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   23b62:	687b      	ldr	r3, [r7, #4]
   23b64:	2250      	movs	r2, #80	; 0x50
   23b66:	4313      	orrs	r3, r2
   23b68:	607b      	str	r3, [r7, #4]
   23b6a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   23b6c:	687b      	ldr	r3, [r7, #4]
   23b6e:	4a04      	ldr	r2, [pc, #16]	; (23b80 <spi_init_pkt_sz+0x38>)
   23b70:	0019      	movs	r1, r3
   23b72:	0010      	movs	r0, r2
   23b74:	4b04      	ldr	r3, [pc, #16]	; (23b88 <spi_init_pkt_sz+0x40>)
   23b76:	4798      	blx	r3
}
   23b78:	46c0      	nop			; (mov r8, r8)
   23b7a:	46bd      	mov	sp, r7
   23b7c:	b002      	add	sp, #8
   23b7e:	bd80      	pop	{r7, pc}
   23b80:	0000e824 	.word	0x0000e824
   23b84:	00023d21 	.word	0x00023d21
   23b88:	00023d95 	.word	0x00023d95

00023b8c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   23b8c:	b590      	push	{r4, r7, lr}
   23b8e:	b083      	sub	sp, #12
   23b90:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23b92:	2300      	movs	r3, #0
   23b94:	9300      	str	r3, [sp, #0]
   23b96:	2300      	movs	r3, #0
   23b98:	2200      	movs	r2, #0
   23b9a:	2100      	movs	r1, #0
   23b9c:	20cf      	movs	r0, #207	; 0xcf
   23b9e:	4c05      	ldr	r4, [pc, #20]	; (23bb4 <nm_spi_reset+0x28>)
   23ba0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   23ba2:	20cf      	movs	r0, #207	; 0xcf
   23ba4:	4b04      	ldr	r3, [pc, #16]	; (23bb8 <nm_spi_reset+0x2c>)
   23ba6:	4798      	blx	r3
	return M2M_SUCCESS;
   23ba8:	2300      	movs	r3, #0
}
   23baa:	0018      	movs	r0, r3
   23bac:	46bd      	mov	sp, r7
   23bae:	b001      	add	sp, #4
   23bb0:	bd90      	pop	{r4, r7, pc}
   23bb2:	46c0      	nop			; (mov r8, r8)
   23bb4:	00022575 	.word	0x00022575
   23bb8:	000229b5 	.word	0x000229b5

00023bbc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   23bbc:	b580      	push	{r7, lr}
   23bbe:	b082      	sub	sp, #8
   23bc0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   23bc2:	2300      	movs	r3, #0
   23bc4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   23bc6:	4b40      	ldr	r3, [pc, #256]	; (23cc8 <nm_spi_init+0x10c>)
   23bc8:	2200      	movs	r2, #0
   23bca:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   23bcc:	003b      	movs	r3, r7
   23bce:	4a3f      	ldr	r2, [pc, #252]	; (23ccc <nm_spi_init+0x110>)
   23bd0:	0019      	movs	r1, r3
   23bd2:	0010      	movs	r0, r2
   23bd4:	4b3e      	ldr	r3, [pc, #248]	; (23cd0 <nm_spi_init+0x114>)
   23bd6:	4798      	blx	r3
   23bd8:	1e03      	subs	r3, r0, #0
   23bda:	d129      	bne.n	23c30 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   23bdc:	4b3a      	ldr	r3, [pc, #232]	; (23cc8 <nm_spi_init+0x10c>)
   23bde:	2201      	movs	r2, #1
   23be0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   23be2:	2398      	movs	r3, #152	; 0x98
   23be4:	00da      	lsls	r2, r3, #3
   23be6:	493b      	ldr	r1, [pc, #236]	; (23cd4 <nm_spi_init+0x118>)
   23be8:	4b3b      	ldr	r3, [pc, #236]	; (23cd8 <nm_spi_init+0x11c>)
   23bea:	0018      	movs	r0, r3
   23bec:	4b3b      	ldr	r3, [pc, #236]	; (23cdc <nm_spi_init+0x120>)
   23bee:	4798      	blx	r3
   23bf0:	4b3b      	ldr	r3, [pc, #236]	; (23ce0 <nm_spi_init+0x124>)
   23bf2:	0018      	movs	r0, r3
   23bf4:	4b39      	ldr	r3, [pc, #228]	; (23cdc <nm_spi_init+0x120>)
   23bf6:	4798      	blx	r3
   23bf8:	4b3a      	ldr	r3, [pc, #232]	; (23ce4 <nm_spi_init+0x128>)
   23bfa:	0018      	movs	r0, r3
   23bfc:	4b37      	ldr	r3, [pc, #220]	; (23cdc <nm_spi_init+0x120>)
   23bfe:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23c00:	003b      	movs	r3, r7
   23c02:	4a32      	ldr	r2, [pc, #200]	; (23ccc <nm_spi_init+0x110>)
   23c04:	0019      	movs	r1, r3
   23c06:	0010      	movs	r0, r2
   23c08:	4b31      	ldr	r3, [pc, #196]	; (23cd0 <nm_spi_init+0x114>)
   23c0a:	4798      	blx	r3
   23c0c:	1e03      	subs	r3, r0, #0
   23c0e:	d10f      	bne.n	23c30 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23c10:	4a35      	ldr	r2, [pc, #212]	; (23ce8 <nm_spi_init+0x12c>)
   23c12:	4930      	ldr	r1, [pc, #192]	; (23cd4 <nm_spi_init+0x118>)
   23c14:	4b30      	ldr	r3, [pc, #192]	; (23cd8 <nm_spi_init+0x11c>)
   23c16:	0018      	movs	r0, r3
   23c18:	4b30      	ldr	r3, [pc, #192]	; (23cdc <nm_spi_init+0x120>)
   23c1a:	4798      	blx	r3
   23c1c:	4b33      	ldr	r3, [pc, #204]	; (23cec <nm_spi_init+0x130>)
   23c1e:	0018      	movs	r0, r3
   23c20:	4b2e      	ldr	r3, [pc, #184]	; (23cdc <nm_spi_init+0x120>)
   23c22:	4798      	blx	r3
   23c24:	4b2f      	ldr	r3, [pc, #188]	; (23ce4 <nm_spi_init+0x128>)
   23c26:	0018      	movs	r0, r3
   23c28:	4b2c      	ldr	r3, [pc, #176]	; (23cdc <nm_spi_init+0x120>)
   23c2a:	4798      	blx	r3
			return 0;
   23c2c:	2300      	movs	r3, #0
   23c2e:	e047      	b.n	23cc0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23c30:	4b25      	ldr	r3, [pc, #148]	; (23cc8 <nm_spi_init+0x10c>)
   23c32:	781b      	ldrb	r3, [r3, #0]
   23c34:	2b00      	cmp	r3, #0
   23c36:	d126      	bne.n	23c86 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   23c38:	683b      	ldr	r3, [r7, #0]
   23c3a:	220c      	movs	r2, #12
   23c3c:	4393      	bics	r3, r2
   23c3e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   23c40:	683b      	ldr	r3, [r7, #0]
   23c42:	2270      	movs	r2, #112	; 0x70
   23c44:	4393      	bics	r3, r2
   23c46:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   23c48:	683b      	ldr	r3, [r7, #0]
   23c4a:	2250      	movs	r2, #80	; 0x50
   23c4c:	4313      	orrs	r3, r2
   23c4e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   23c50:	683b      	ldr	r3, [r7, #0]
   23c52:	4a1e      	ldr	r2, [pc, #120]	; (23ccc <nm_spi_init+0x110>)
   23c54:	0019      	movs	r1, r3
   23c56:	0010      	movs	r0, r2
   23c58:	4b25      	ldr	r3, [pc, #148]	; (23cf0 <nm_spi_init+0x134>)
   23c5a:	4798      	blx	r3
   23c5c:	1e03      	subs	r3, r0, #0
   23c5e:	d10f      	bne.n	23c80 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   23c60:	4a24      	ldr	r2, [pc, #144]	; (23cf4 <nm_spi_init+0x138>)
   23c62:	491c      	ldr	r1, [pc, #112]	; (23cd4 <nm_spi_init+0x118>)
   23c64:	4b1c      	ldr	r3, [pc, #112]	; (23cd8 <nm_spi_init+0x11c>)
   23c66:	0018      	movs	r0, r3
   23c68:	4b1c      	ldr	r3, [pc, #112]	; (23cdc <nm_spi_init+0x120>)
   23c6a:	4798      	blx	r3
   23c6c:	4b22      	ldr	r3, [pc, #136]	; (23cf8 <nm_spi_init+0x13c>)
   23c6e:	0018      	movs	r0, r3
   23c70:	4b1a      	ldr	r3, [pc, #104]	; (23cdc <nm_spi_init+0x120>)
   23c72:	4798      	blx	r3
   23c74:	4b1b      	ldr	r3, [pc, #108]	; (23ce4 <nm_spi_init+0x128>)
   23c76:	0018      	movs	r0, r3
   23c78:	4b18      	ldr	r3, [pc, #96]	; (23cdc <nm_spi_init+0x120>)
   23c7a:	4798      	blx	r3
			return 0;
   23c7c:	2300      	movs	r3, #0
   23c7e:	e01f      	b.n	23cc0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   23c80:	4b11      	ldr	r3, [pc, #68]	; (23cc8 <nm_spi_init+0x10c>)
   23c82:	2201      	movs	r2, #1
   23c84:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   23c86:	1d3a      	adds	r2, r7, #4
   23c88:	2380      	movs	r3, #128	; 0x80
   23c8a:	015b      	lsls	r3, r3, #5
   23c8c:	0011      	movs	r1, r2
   23c8e:	0018      	movs	r0, r3
   23c90:	4b0f      	ldr	r3, [pc, #60]	; (23cd0 <nm_spi_init+0x114>)
   23c92:	4798      	blx	r3
   23c94:	1e03      	subs	r3, r0, #0
   23c96:	d110      	bne.n	23cba <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   23c98:	4a18      	ldr	r2, [pc, #96]	; (23cfc <nm_spi_init+0x140>)
   23c9a:	490e      	ldr	r1, [pc, #56]	; (23cd4 <nm_spi_init+0x118>)
   23c9c:	4b0e      	ldr	r3, [pc, #56]	; (23cd8 <nm_spi_init+0x11c>)
   23c9e:	0018      	movs	r0, r3
   23ca0:	4b0e      	ldr	r3, [pc, #56]	; (23cdc <nm_spi_init+0x120>)
   23ca2:	4798      	blx	r3
   23ca4:	4b16      	ldr	r3, [pc, #88]	; (23d00 <nm_spi_init+0x144>)
   23ca6:	0018      	movs	r0, r3
   23ca8:	4b0c      	ldr	r3, [pc, #48]	; (23cdc <nm_spi_init+0x120>)
   23caa:	4798      	blx	r3
   23cac:	4b0d      	ldr	r3, [pc, #52]	; (23ce4 <nm_spi_init+0x128>)
   23cae:	0018      	movs	r0, r3
   23cb0:	4b0a      	ldr	r3, [pc, #40]	; (23cdc <nm_spi_init+0x120>)
   23cb2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   23cb4:	2306      	movs	r3, #6
   23cb6:	425b      	negs	r3, r3
   23cb8:	e002      	b.n	23cc0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   23cba:	4b12      	ldr	r3, [pc, #72]	; (23d04 <nm_spi_init+0x148>)
   23cbc:	4798      	blx	r3


	return M2M_SUCCESS;
   23cbe:	2300      	movs	r3, #0
}
   23cc0:	0018      	movs	r0, r3
   23cc2:	46bd      	mov	sp, r7
   23cc4:	b002      	add	sp, #8
   23cc6:	bd80      	pop	{r7, pc}
   23cc8:	2000427c 	.word	0x2000427c
   23ccc:	0000e824 	.word	0x0000e824
   23cd0:	000238b5 	.word	0x000238b5
   23cd4:	00038e94 	.word	0x00038e94
   23cd8:	00038820 	.word	0x00038820
   23cdc:	0001cf79 	.word	0x0001cf79
   23ce0:	00038cbc 	.word	0x00038cbc
   23ce4:	00038860 	.word	0x00038860
   23ce8:	000004c3 	.word	0x000004c3
   23cec:	00038d0c 	.word	0x00038d0c
   23cf0:	000235bd 	.word	0x000235bd
   23cf4:	000004cd 	.word	0x000004cd
   23cf8:	00038d3c 	.word	0x00038d3c
   23cfc:	000004d7 	.word	0x000004d7
   23d00:	00038d70 	.word	0x00038d70
   23d04:	00023b49 	.word	0x00023b49

00023d08 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   23d08:	b580      	push	{r7, lr}
   23d0a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   23d0c:	4b03      	ldr	r3, [pc, #12]	; (23d1c <nm_spi_deinit+0x14>)
   23d0e:	2200      	movs	r2, #0
   23d10:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   23d12:	2300      	movs	r3, #0
}
   23d14:	0018      	movs	r0, r3
   23d16:	46bd      	mov	sp, r7
   23d18:	bd80      	pop	{r7, pc}
   23d1a:	46c0      	nop			; (mov r8, r8)
   23d1c:	2000427c 	.word	0x2000427c

00023d20 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   23d20:	b580      	push	{r7, lr}
   23d22:	b084      	sub	sp, #16
   23d24:	af00      	add	r7, sp, #0
   23d26:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   23d28:	230c      	movs	r3, #12
   23d2a:	18fa      	adds	r2, r7, r3
   23d2c:	687b      	ldr	r3, [r7, #4]
   23d2e:	0011      	movs	r1, r2
   23d30:	0018      	movs	r0, r3
   23d32:	4b03      	ldr	r3, [pc, #12]	; (23d40 <nm_spi_read_reg+0x20>)
   23d34:	4798      	blx	r3

	return u32Val;
   23d36:	68fb      	ldr	r3, [r7, #12]
}
   23d38:	0018      	movs	r0, r3
   23d3a:	46bd      	mov	sp, r7
   23d3c:	b004      	add	sp, #16
   23d3e:	bd80      	pop	{r7, pc}
   23d40:	000238b5 	.word	0x000238b5

00023d44 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23d44:	b590      	push	{r4, r7, lr}
   23d46:	b085      	sub	sp, #20
   23d48:	af00      	add	r7, sp, #0
   23d4a:	6078      	str	r0, [r7, #4]
   23d4c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   23d4e:	230f      	movs	r3, #15
   23d50:	18fc      	adds	r4, r7, r3
   23d52:	683a      	ldr	r2, [r7, #0]
   23d54:	687b      	ldr	r3, [r7, #4]
   23d56:	0011      	movs	r1, r2
   23d58:	0018      	movs	r0, r3
   23d5a:	4b0d      	ldr	r3, [pc, #52]	; (23d90 <nm_spi_read_reg_with_ret+0x4c>)
   23d5c:	4798      	blx	r3
   23d5e:	0003      	movs	r3, r0
   23d60:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23d62:	230f      	movs	r3, #15
   23d64:	18fb      	adds	r3, r7, r3
   23d66:	781b      	ldrb	r3, [r3, #0]
   23d68:	b25b      	sxtb	r3, r3
   23d6a:	2b01      	cmp	r3, #1
   23d6c:	d104      	bne.n	23d78 <nm_spi_read_reg_with_ret+0x34>
   23d6e:	230f      	movs	r3, #15
   23d70:	18fb      	adds	r3, r7, r3
   23d72:	2200      	movs	r2, #0
   23d74:	701a      	strb	r2, [r3, #0]
   23d76:	e003      	b.n	23d80 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23d78:	230f      	movs	r3, #15
   23d7a:	18fb      	adds	r3, r7, r3
   23d7c:	22fa      	movs	r2, #250	; 0xfa
   23d7e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23d80:	230f      	movs	r3, #15
   23d82:	18fb      	adds	r3, r7, r3
   23d84:	781b      	ldrb	r3, [r3, #0]
   23d86:	b25b      	sxtb	r3, r3
}
   23d88:	0018      	movs	r0, r3
   23d8a:	46bd      	mov	sp, r7
   23d8c:	b005      	add	sp, #20
   23d8e:	bd90      	pop	{r4, r7, pc}
   23d90:	000238b5 	.word	0x000238b5

00023d94 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23d94:	b590      	push	{r4, r7, lr}
   23d96:	b085      	sub	sp, #20
   23d98:	af00      	add	r7, sp, #0
   23d9a:	6078      	str	r0, [r7, #4]
   23d9c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   23d9e:	230f      	movs	r3, #15
   23da0:	18fc      	adds	r4, r7, r3
   23da2:	683a      	ldr	r2, [r7, #0]
   23da4:	687b      	ldr	r3, [r7, #4]
   23da6:	0011      	movs	r1, r2
   23da8:	0018      	movs	r0, r3
   23daa:	4b0d      	ldr	r3, [pc, #52]	; (23de0 <nm_spi_write_reg+0x4c>)
   23dac:	4798      	blx	r3
   23dae:	0003      	movs	r3, r0
   23db0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23db2:	230f      	movs	r3, #15
   23db4:	18fb      	adds	r3, r7, r3
   23db6:	781b      	ldrb	r3, [r3, #0]
   23db8:	b25b      	sxtb	r3, r3
   23dba:	2b01      	cmp	r3, #1
   23dbc:	d104      	bne.n	23dc8 <nm_spi_write_reg+0x34>
   23dbe:	230f      	movs	r3, #15
   23dc0:	18fb      	adds	r3, r7, r3
   23dc2:	2200      	movs	r2, #0
   23dc4:	701a      	strb	r2, [r3, #0]
   23dc6:	e003      	b.n	23dd0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23dc8:	230f      	movs	r3, #15
   23dca:	18fb      	adds	r3, r7, r3
   23dcc:	22fa      	movs	r2, #250	; 0xfa
   23dce:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23dd0:	230f      	movs	r3, #15
   23dd2:	18fb      	adds	r3, r7, r3
   23dd4:	781b      	ldrb	r3, [r3, #0]
   23dd6:	b25b      	sxtb	r3, r3
}
   23dd8:	0018      	movs	r0, r3
   23dda:	46bd      	mov	sp, r7
   23ddc:	b005      	add	sp, #20
   23dde:	bd90      	pop	{r4, r7, pc}
   23de0:	000235bd 	.word	0x000235bd

00023de4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23de4:	b590      	push	{r4, r7, lr}
   23de6:	b087      	sub	sp, #28
   23de8:	af00      	add	r7, sp, #0
   23dea:	60f8      	str	r0, [r7, #12]
   23dec:	60b9      	str	r1, [r7, #8]
   23dee:	1dbb      	adds	r3, r7, #6
   23df0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   23df2:	2317      	movs	r3, #23
   23df4:	18fc      	adds	r4, r7, r3
   23df6:	1dbb      	adds	r3, r7, #6
   23df8:	881a      	ldrh	r2, [r3, #0]
   23dfa:	68b9      	ldr	r1, [r7, #8]
   23dfc:	68fb      	ldr	r3, [r7, #12]
   23dfe:	0018      	movs	r0, r3
   23e00:	4b0d      	ldr	r3, [pc, #52]	; (23e38 <nm_spi_read_block+0x54>)
   23e02:	4798      	blx	r3
   23e04:	0003      	movs	r3, r0
   23e06:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23e08:	2317      	movs	r3, #23
   23e0a:	18fb      	adds	r3, r7, r3
   23e0c:	781b      	ldrb	r3, [r3, #0]
   23e0e:	b25b      	sxtb	r3, r3
   23e10:	2b01      	cmp	r3, #1
   23e12:	d104      	bne.n	23e1e <nm_spi_read_block+0x3a>
   23e14:	2317      	movs	r3, #23
   23e16:	18fb      	adds	r3, r7, r3
   23e18:	2200      	movs	r2, #0
   23e1a:	701a      	strb	r2, [r3, #0]
   23e1c:	e003      	b.n	23e26 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23e1e:	2317      	movs	r3, #23
   23e20:	18fb      	adds	r3, r7, r3
   23e22:	22fa      	movs	r2, #250	; 0xfa
   23e24:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23e26:	2317      	movs	r3, #23
   23e28:	18fb      	adds	r3, r7, r3
   23e2a:	781b      	ldrb	r3, [r3, #0]
   23e2c:	b25b      	sxtb	r3, r3
}
   23e2e:	0018      	movs	r0, r3
   23e30:	46bd      	mov	sp, r7
   23e32:	b007      	add	sp, #28
   23e34:	bd90      	pop	{r4, r7, pc}
   23e36:	46c0      	nop			; (mov r8, r8)
   23e38:	00023a2d 	.word	0x00023a2d

00023e3c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23e3c:	b590      	push	{r4, r7, lr}
   23e3e:	b087      	sub	sp, #28
   23e40:	af00      	add	r7, sp, #0
   23e42:	60f8      	str	r0, [r7, #12]
   23e44:	60b9      	str	r1, [r7, #8]
   23e46:	1dbb      	adds	r3, r7, #6
   23e48:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   23e4a:	2317      	movs	r3, #23
   23e4c:	18fc      	adds	r4, r7, r3
   23e4e:	1dbb      	adds	r3, r7, #6
   23e50:	881a      	ldrh	r2, [r3, #0]
   23e52:	68b9      	ldr	r1, [r7, #8]
   23e54:	68fb      	ldr	r3, [r7, #12]
   23e56:	0018      	movs	r0, r3
   23e58:	4b0d      	ldr	r3, [pc, #52]	; (23e90 <nm_spi_write_block+0x54>)
   23e5a:	4798      	blx	r3
   23e5c:	0003      	movs	r3, r0
   23e5e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23e60:	2317      	movs	r3, #23
   23e62:	18fb      	adds	r3, r7, r3
   23e64:	781b      	ldrb	r3, [r3, #0]
   23e66:	b25b      	sxtb	r3, r3
   23e68:	2b01      	cmp	r3, #1
   23e6a:	d104      	bne.n	23e76 <nm_spi_write_block+0x3a>
   23e6c:	2317      	movs	r3, #23
   23e6e:	18fb      	adds	r3, r7, r3
   23e70:	2200      	movs	r2, #0
   23e72:	701a      	strb	r2, [r3, #0]
   23e74:	e003      	b.n	23e7e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23e76:	2317      	movs	r3, #23
   23e78:	18fb      	adds	r3, r7, r3
   23e7a:	22fa      	movs	r2, #250	; 0xfa
   23e7c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23e7e:	2317      	movs	r3, #23
   23e80:	18fb      	adds	r3, r7, r3
   23e82:	781b      	ldrb	r3, [r3, #0]
   23e84:	b25b      	sxtb	r3, r3
}
   23e86:	0018      	movs	r0, r3
   23e88:	46bd      	mov	sp, r7
   23e8a:	b007      	add	sp, #28
   23e8c:	bd90      	pop	{r4, r7, pc}
   23e8e:	46c0      	nop			; (mov r8, r8)
   23e90:	00023709 	.word	0x00023709

00023e94 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   23e94:	b590      	push	{r4, r7, lr}
   23e96:	b089      	sub	sp, #36	; 0x24
   23e98:	af00      	add	r7, sp, #0
   23e9a:	60b9      	str	r1, [r7, #8]
   23e9c:	0011      	movs	r1, r2
   23e9e:	607b      	str	r3, [r7, #4]
   23ea0:	230f      	movs	r3, #15
   23ea2:	18fb      	adds	r3, r7, r3
   23ea4:	1c02      	adds	r2, r0, #0
   23ea6:	701a      	strb	r2, [r3, #0]
   23ea8:	230e      	movs	r3, #14
   23eaa:	18fb      	adds	r3, r7, r3
   23eac:	1c0a      	adds	r2, r1, #0
   23eae:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   23eb0:	2330      	movs	r3, #48	; 0x30
   23eb2:	18fb      	adds	r3, r7, r3
   23eb4:	881b      	ldrh	r3, [r3, #0]
   23eb6:	2b00      	cmp	r3, #0
   23eb8:	d100      	bne.n	23ebc <Socket_ReadSocketData+0x28>
   23eba:	e0d7      	b.n	2406c <Socket_ReadSocketData+0x1d8>
   23ebc:	230f      	movs	r3, #15
   23ebe:	18fb      	adds	r3, r7, r3
   23ec0:	2200      	movs	r2, #0
   23ec2:	569a      	ldrsb	r2, [r3, r2]
   23ec4:	4b6b      	ldr	r3, [pc, #428]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23ec6:	0112      	lsls	r2, r2, #4
   23ec8:	58d3      	ldr	r3, [r2, r3]
   23eca:	2b00      	cmp	r3, #0
   23ecc:	d100      	bne.n	23ed0 <Socket_ReadSocketData+0x3c>
   23ece:	e0cd      	b.n	2406c <Socket_ReadSocketData+0x1d8>
   23ed0:	230f      	movs	r3, #15
   23ed2:	18fb      	adds	r3, r7, r3
   23ed4:	781b      	ldrb	r3, [r3, #0]
   23ed6:	b25b      	sxtb	r3, r3
   23ed8:	4a66      	ldr	r2, [pc, #408]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23eda:	011b      	lsls	r3, r3, #4
   23edc:	18d3      	adds	r3, r2, r3
   23ede:	3304      	adds	r3, #4
   23ee0:	881b      	ldrh	r3, [r3, #0]
   23ee2:	b29b      	uxth	r3, r3
   23ee4:	2b00      	cmp	r3, #0
   23ee6:	d100      	bne.n	23eea <Socket_ReadSocketData+0x56>
   23ee8:	e0c0      	b.n	2406c <Socket_ReadSocketData+0x1d8>
   23eea:	230f      	movs	r3, #15
   23eec:	18fb      	adds	r3, r7, r3
   23eee:	781b      	ldrb	r3, [r3, #0]
   23ef0:	b25b      	sxtb	r3, r3
   23ef2:	4a60      	ldr	r2, [pc, #384]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23ef4:	011b      	lsls	r3, r3, #4
   23ef6:	18d3      	adds	r3, r2, r3
   23ef8:	330a      	adds	r3, #10
   23efa:	781b      	ldrb	r3, [r3, #0]
   23efc:	b2db      	uxtb	r3, r3
   23efe:	2b01      	cmp	r3, #1
   23f00:	d000      	beq.n	23f04 <Socket_ReadSocketData+0x70>
   23f02:	e0b3      	b.n	2406c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   23f04:	687b      	ldr	r3, [r7, #4]
   23f06:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   23f08:	68bb      	ldr	r3, [r7, #8]
   23f0a:	2230      	movs	r2, #48	; 0x30
   23f0c:	18ba      	adds	r2, r7, r2
   23f0e:	8812      	ldrh	r2, [r2, #0]
   23f10:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   23f12:	2319      	movs	r3, #25
   23f14:	18fb      	adds	r3, r7, r3
   23f16:	2201      	movs	r2, #1
   23f18:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   23f1a:	231a      	movs	r3, #26
   23f1c:	18fb      	adds	r3, r7, r3
   23f1e:	2230      	movs	r2, #48	; 0x30
   23f20:	18ba      	adds	r2, r7, r2
   23f22:	8812      	ldrh	r2, [r2, #0]
   23f24:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   23f26:	230f      	movs	r3, #15
   23f28:	18fb      	adds	r3, r7, r3
   23f2a:	781b      	ldrb	r3, [r3, #0]
   23f2c:	b25b      	sxtb	r3, r3
   23f2e:	4a51      	ldr	r2, [pc, #324]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23f30:	011b      	lsls	r3, r3, #4
   23f32:	18d3      	adds	r3, r2, r3
   23f34:	3304      	adds	r3, #4
   23f36:	881b      	ldrh	r3, [r3, #0]
   23f38:	b29b      	uxth	r3, r3
   23f3a:	221a      	movs	r2, #26
   23f3c:	18ba      	adds	r2, r7, r2
   23f3e:	8812      	ldrh	r2, [r2, #0]
   23f40:	1ad3      	subs	r3, r2, r3
   23f42:	b29a      	uxth	r2, r3
   23f44:	2316      	movs	r3, #22
   23f46:	18fb      	adds	r3, r7, r3
   23f48:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   23f4a:	2316      	movs	r3, #22
   23f4c:	18fb      	adds	r3, r7, r3
   23f4e:	2200      	movs	r2, #0
   23f50:	5e9b      	ldrsh	r3, [r3, r2]
   23f52:	2b00      	cmp	r3, #0
   23f54:	dd0f      	ble.n	23f76 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   23f56:	2319      	movs	r3, #25
   23f58:	18fb      	adds	r3, r7, r3
   23f5a:	2200      	movs	r2, #0
   23f5c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   23f5e:	230f      	movs	r3, #15
   23f60:	18fb      	adds	r3, r7, r3
   23f62:	2200      	movs	r2, #0
   23f64:	569a      	ldrsb	r2, [r3, r2]
   23f66:	231a      	movs	r3, #26
   23f68:	18fb      	adds	r3, r7, r3
   23f6a:	4942      	ldr	r1, [pc, #264]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23f6c:	0112      	lsls	r2, r2, #4
   23f6e:	188a      	adds	r2, r1, r2
   23f70:	3204      	adds	r2, #4
   23f72:	8812      	ldrh	r2, [r2, #0]
   23f74:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   23f76:	230f      	movs	r3, #15
   23f78:	18fb      	adds	r3, r7, r3
   23f7a:	2200      	movs	r2, #0
   23f7c:	569a      	ldrsb	r2, [r3, r2]
   23f7e:	4b3d      	ldr	r3, [pc, #244]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23f80:	0112      	lsls	r2, r2, #4
   23f82:	58d1      	ldr	r1, [r2, r3]
   23f84:	2319      	movs	r3, #25
   23f86:	18fb      	adds	r3, r7, r3
   23f88:	781c      	ldrb	r4, [r3, #0]
   23f8a:	231a      	movs	r3, #26
   23f8c:	18fb      	adds	r3, r7, r3
   23f8e:	881a      	ldrh	r2, [r3, #0]
   23f90:	69f8      	ldr	r0, [r7, #28]
   23f92:	0023      	movs	r3, r4
   23f94:	4c38      	ldr	r4, [pc, #224]	; (24078 <Socket_ReadSocketData+0x1e4>)
   23f96:	47a0      	blx	r4
   23f98:	1e03      	subs	r3, r0, #0
   23f9a:	d14f      	bne.n	2403c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   23f9c:	230f      	movs	r3, #15
   23f9e:	18fb      	adds	r3, r7, r3
   23fa0:	2200      	movs	r2, #0
   23fa2:	569a      	ldrsb	r2, [r3, r2]
   23fa4:	4b33      	ldr	r3, [pc, #204]	; (24074 <Socket_ReadSocketData+0x1e0>)
   23fa6:	0112      	lsls	r2, r2, #4
   23fa8:	58d2      	ldr	r2, [r2, r3]
   23faa:	68bb      	ldr	r3, [r7, #8]
   23fac:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   23fae:	231a      	movs	r3, #26
   23fb0:	18fb      	adds	r3, r7, r3
   23fb2:	2200      	movs	r2, #0
   23fb4:	5e9a      	ldrsh	r2, [r3, r2]
   23fb6:	68bb      	ldr	r3, [r7, #8]
   23fb8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   23fba:	68bb      	ldr	r3, [r7, #8]
   23fbc:	88da      	ldrh	r2, [r3, #6]
   23fbe:	231a      	movs	r3, #26
   23fc0:	18fb      	adds	r3, r7, r3
   23fc2:	881b      	ldrh	r3, [r3, #0]
   23fc4:	1ad3      	subs	r3, r2, r3
   23fc6:	b29a      	uxth	r2, r3
   23fc8:	68bb      	ldr	r3, [r7, #8]
   23fca:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   23fcc:	4b2b      	ldr	r3, [pc, #172]	; (2407c <Socket_ReadSocketData+0x1e8>)
   23fce:	681b      	ldr	r3, [r3, #0]
   23fd0:	2b00      	cmp	r3, #0
   23fd2:	d00b      	beq.n	23fec <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   23fd4:	4b29      	ldr	r3, [pc, #164]	; (2407c <Socket_ReadSocketData+0x1e8>)
   23fd6:	681b      	ldr	r3, [r3, #0]
   23fd8:	68bc      	ldr	r4, [r7, #8]
   23fda:	220e      	movs	r2, #14
   23fdc:	18ba      	adds	r2, r7, r2
   23fde:	7811      	ldrb	r1, [r2, #0]
   23fe0:	220f      	movs	r2, #15
   23fe2:	18ba      	adds	r2, r7, r2
   23fe4:	2000      	movs	r0, #0
   23fe6:	5610      	ldrsb	r0, [r2, r0]
   23fe8:	0022      	movs	r2, r4
   23fea:	4798      	blx	r3

				u16ReadCount -= u16Read;
   23fec:	2330      	movs	r3, #48	; 0x30
   23fee:	18f9      	adds	r1, r7, r3
   23ff0:	2330      	movs	r3, #48	; 0x30
   23ff2:	18fa      	adds	r2, r7, r3
   23ff4:	231a      	movs	r3, #26
   23ff6:	18fb      	adds	r3, r7, r3
   23ff8:	8812      	ldrh	r2, [r2, #0]
   23ffa:	881b      	ldrh	r3, [r3, #0]
   23ffc:	1ad3      	subs	r3, r2, r3
   23ffe:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24000:	231a      	movs	r3, #26
   24002:	18fb      	adds	r3, r7, r3
   24004:	881b      	ldrh	r3, [r3, #0]
   24006:	69fa      	ldr	r2, [r7, #28]
   24008:	18d3      	adds	r3, r2, r3
   2400a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2400c:	230f      	movs	r3, #15
   2400e:	18fb      	adds	r3, r7, r3
   24010:	781b      	ldrb	r3, [r3, #0]
   24012:	b25b      	sxtb	r3, r3
   24014:	4a17      	ldr	r2, [pc, #92]	; (24074 <Socket_ReadSocketData+0x1e0>)
   24016:	011b      	lsls	r3, r3, #4
   24018:	18d3      	adds	r3, r2, r3
   2401a:	330a      	adds	r3, #10
   2401c:	781b      	ldrb	r3, [r3, #0]
   2401e:	b2db      	uxtb	r3, r3
   24020:	2b00      	cmp	r3, #0
   24022:	d11c      	bne.n	2405e <Socket_ReadSocketData+0x1ca>
   24024:	2330      	movs	r3, #48	; 0x30
   24026:	18fb      	adds	r3, r7, r3
   24028:	881b      	ldrh	r3, [r3, #0]
   2402a:	2b00      	cmp	r3, #0
   2402c:	d017      	beq.n	2405e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2402e:	2301      	movs	r3, #1
   24030:	2200      	movs	r2, #0
   24032:	2100      	movs	r1, #0
   24034:	2000      	movs	r0, #0
   24036:	4c10      	ldr	r4, [pc, #64]	; (24078 <Socket_ReadSocketData+0x1e4>)
   24038:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2403a:	e017      	b.n	2406c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2403c:	4b10      	ldr	r3, [pc, #64]	; (24080 <Socket_ReadSocketData+0x1ec>)
   2403e:	0018      	movs	r0, r3
   24040:	4b10      	ldr	r3, [pc, #64]	; (24084 <Socket_ReadSocketData+0x1f0>)
   24042:	4798      	blx	r3
   24044:	2330      	movs	r3, #48	; 0x30
   24046:	18fb      	adds	r3, r7, r3
   24048:	881a      	ldrh	r2, [r3, #0]
   2404a:	4b0f      	ldr	r3, [pc, #60]	; (24088 <Socket_ReadSocketData+0x1f4>)
   2404c:	0011      	movs	r1, r2
   2404e:	0018      	movs	r0, r3
   24050:	4b0c      	ldr	r3, [pc, #48]	; (24084 <Socket_ReadSocketData+0x1f0>)
   24052:	4798      	blx	r3
   24054:	4b0d      	ldr	r3, [pc, #52]	; (2408c <Socket_ReadSocketData+0x1f8>)
   24056:	0018      	movs	r0, r3
   24058:	4b0a      	ldr	r3, [pc, #40]	; (24084 <Socket_ReadSocketData+0x1f0>)
   2405a:	4798      	blx	r3
				break;
   2405c:	e006      	b.n	2406c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2405e:	2330      	movs	r3, #48	; 0x30
   24060:	18fb      	adds	r3, r7, r3
   24062:	881b      	ldrh	r3, [r3, #0]
   24064:	2b00      	cmp	r3, #0
   24066:	d000      	beq.n	2406a <Socket_ReadSocketData+0x1d6>
   24068:	e753      	b.n	23f12 <Socket_ReadSocketData+0x7e>
	}
}
   2406a:	e7ff      	b.n	2406c <Socket_ReadSocketData+0x1d8>
   2406c:	46c0      	nop			; (mov r8, r8)
   2406e:	46bd      	mov	sp, r7
   24070:	b009      	add	sp, #36	; 0x24
   24072:	bd90      	pop	{r4, r7, pc}
   24074:	20005ac8 	.word	0x20005ac8
   24078:	0002088d 	.word	0x0002088d
   2407c:	20005b78 	.word	0x20005b78
   24080:	00038ea0 	.word	0x00038ea0
   24084:	0001cf79 	.word	0x0001cf79
   24088:	00038eac 	.word	0x00038eac
   2408c:	00038ec0 	.word	0x00038ec0

00024090 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24090:	b590      	push	{r4, r7, lr}
   24092:	b0bb      	sub	sp, #236	; 0xec
   24094:	af02      	add	r7, sp, #8
   24096:	603a      	str	r2, [r7, #0]
   24098:	1dfb      	adds	r3, r7, #7
   2409a:	1c02      	adds	r2, r0, #0
   2409c:	701a      	strb	r2, [r3, #0]
   2409e:	1d3b      	adds	r3, r7, #4
   240a0:	1c0a      	adds	r2, r1, #0
   240a2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   240a4:	1dfb      	adds	r3, r7, #7
   240a6:	781b      	ldrb	r3, [r3, #0]
   240a8:	2b41      	cmp	r3, #65	; 0x41
   240aa:	d003      	beq.n	240b4 <m2m_ip_cb+0x24>
   240ac:	1dfb      	adds	r3, r7, #7
   240ae:	781b      	ldrb	r3, [r3, #0]
   240b0:	2b54      	cmp	r3, #84	; 0x54
   240b2:	d120      	bne.n	240f6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   240b4:	23cc      	movs	r3, #204	; 0xcc
   240b6:	18f9      	adds	r1, r7, r3
   240b8:	6838      	ldr	r0, [r7, #0]
   240ba:	2300      	movs	r3, #0
   240bc:	2204      	movs	r2, #4
   240be:	4c98      	ldr	r4, [pc, #608]	; (24320 <m2m_ip_cb+0x290>)
   240c0:	47a0      	blx	r4
   240c2:	1e03      	subs	r3, r0, #0
   240c4:	d000      	beq.n	240c8 <m2m_ip_cb+0x38>
   240c6:	e275      	b.n	245b4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   240c8:	23cc      	movs	r3, #204	; 0xcc
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	2201      	movs	r2, #1
   240ce:	569a      	ldrsb	r2, [r3, r2]
   240d0:	23c8      	movs	r3, #200	; 0xc8
   240d2:	18fb      	adds	r3, r7, r3
   240d4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   240d6:	4b93      	ldr	r3, [pc, #588]	; (24324 <m2m_ip_cb+0x294>)
   240d8:	681b      	ldr	r3, [r3, #0]
   240da:	2b00      	cmp	r3, #0
   240dc:	d100      	bne.n	240e0 <m2m_ip_cb+0x50>
   240de:	e269      	b.n	245b4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   240e0:	4b90      	ldr	r3, [pc, #576]	; (24324 <m2m_ip_cb+0x294>)
   240e2:	681b      	ldr	r3, [r3, #0]
   240e4:	22cc      	movs	r2, #204	; 0xcc
   240e6:	18ba      	adds	r2, r7, r2
   240e8:	2000      	movs	r0, #0
   240ea:	5610      	ldrsb	r0, [r2, r0]
   240ec:	22c8      	movs	r2, #200	; 0xc8
   240ee:	18ba      	adds	r2, r7, r2
   240f0:	2101      	movs	r1, #1
   240f2:	4798      	blx	r3
	{
   240f4:	e25e      	b.n	245b4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   240f6:	1dfb      	adds	r3, r7, #7
   240f8:	781b      	ldrb	r3, [r3, #0]
   240fa:	2b42      	cmp	r3, #66	; 0x42
   240fc:	d120      	bne.n	24140 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   240fe:	23c4      	movs	r3, #196	; 0xc4
   24100:	18f9      	adds	r1, r7, r3
   24102:	6838      	ldr	r0, [r7, #0]
   24104:	2300      	movs	r3, #0
   24106:	2204      	movs	r2, #4
   24108:	4c85      	ldr	r4, [pc, #532]	; (24320 <m2m_ip_cb+0x290>)
   2410a:	47a0      	blx	r4
   2410c:	1e03      	subs	r3, r0, #0
   2410e:	d000      	beq.n	24112 <m2m_ip_cb+0x82>
   24110:	e257      	b.n	245c2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24112:	23c4      	movs	r3, #196	; 0xc4
   24114:	18fb      	adds	r3, r7, r3
   24116:	2201      	movs	r2, #1
   24118:	569a      	ldrsb	r2, [r3, r2]
   2411a:	23c0      	movs	r3, #192	; 0xc0
   2411c:	18fb      	adds	r3, r7, r3
   2411e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24120:	4b80      	ldr	r3, [pc, #512]	; (24324 <m2m_ip_cb+0x294>)
   24122:	681b      	ldr	r3, [r3, #0]
   24124:	2b00      	cmp	r3, #0
   24126:	d100      	bne.n	2412a <m2m_ip_cb+0x9a>
   24128:	e24b      	b.n	245c2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   2412a:	4b7e      	ldr	r3, [pc, #504]	; (24324 <m2m_ip_cb+0x294>)
   2412c:	681b      	ldr	r3, [r3, #0]
   2412e:	22c4      	movs	r2, #196	; 0xc4
   24130:	18ba      	adds	r2, r7, r2
   24132:	2000      	movs	r0, #0
   24134:	5610      	ldrsb	r0, [r2, r0]
   24136:	22c0      	movs	r2, #192	; 0xc0
   24138:	18ba      	adds	r2, r7, r2
   2413a:	2102      	movs	r1, #2
   2413c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   2413e:	e240      	b.n	245c2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24140:	1dfb      	adds	r3, r7, #7
   24142:	781b      	ldrb	r3, [r3, #0]
   24144:	2b43      	cmp	r3, #67	; 0x43
   24146:	d000      	beq.n	2414a <m2m_ip_cb+0xba>
   24148:	e086      	b.n	24258 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   2414a:	23b4      	movs	r3, #180	; 0xb4
   2414c:	18f9      	adds	r1, r7, r3
   2414e:	6838      	ldr	r0, [r7, #0]
   24150:	2300      	movs	r3, #0
   24152:	220c      	movs	r2, #12
   24154:	4c72      	ldr	r4, [pc, #456]	; (24320 <m2m_ip_cb+0x290>)
   24156:	47a0      	blx	r4
   24158:	1e03      	subs	r3, r0, #0
   2415a:	d000      	beq.n	2415e <m2m_ip_cb+0xce>
   2415c:	e231      	b.n	245c2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   2415e:	23b4      	movs	r3, #180	; 0xb4
   24160:	18fb      	adds	r3, r7, r3
   24162:	7a5b      	ldrb	r3, [r3, #9]
   24164:	b25b      	sxtb	r3, r3
   24166:	2b00      	cmp	r3, #0
   24168:	db4f      	blt.n	2420a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2416a:	23b4      	movs	r3, #180	; 0xb4
   2416c:	18fb      	adds	r3, r7, r3
   2416e:	7a5b      	ldrb	r3, [r3, #9]
   24170:	b25b      	sxtb	r3, r3
   24172:	0018      	movs	r0, r3
   24174:	23b4      	movs	r3, #180	; 0xb4
   24176:	18fb      	adds	r3, r7, r3
   24178:	7a1b      	ldrb	r3, [r3, #8]
   2417a:	b25b      	sxtb	r3, r3
   2417c:	4a6a      	ldr	r2, [pc, #424]	; (24328 <m2m_ip_cb+0x298>)
   2417e:	011b      	lsls	r3, r3, #4
   24180:	18d3      	adds	r3, r2, r3
   24182:	330b      	adds	r3, #11
   24184:	781b      	ldrb	r3, [r3, #0]
   24186:	b2d9      	uxtb	r1, r3
   24188:	4a67      	ldr	r2, [pc, #412]	; (24328 <m2m_ip_cb+0x298>)
   2418a:	0103      	lsls	r3, r0, #4
   2418c:	18d3      	adds	r3, r2, r3
   2418e:	330b      	adds	r3, #11
   24190:	1c0a      	adds	r2, r1, #0
   24192:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24194:	23b4      	movs	r3, #180	; 0xb4
   24196:	18fb      	adds	r3, r7, r3
   24198:	7a5b      	ldrb	r3, [r3, #9]
   2419a:	b25b      	sxtb	r3, r3
   2419c:	4a62      	ldr	r2, [pc, #392]	; (24328 <m2m_ip_cb+0x298>)
   2419e:	011b      	lsls	r3, r3, #4
   241a0:	18d3      	adds	r3, r2, r3
   241a2:	330a      	adds	r3, #10
   241a4:	2201      	movs	r2, #1
   241a6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   241a8:	23b4      	movs	r3, #180	; 0xb4
   241aa:	18fb      	adds	r3, r7, r3
   241ac:	7a5b      	ldrb	r3, [r3, #9]
   241ae:	b25b      	sxtb	r3, r3
   241b0:	0018      	movs	r0, r3
   241b2:	23b4      	movs	r3, #180	; 0xb4
   241b4:	18fb      	adds	r3, r7, r3
   241b6:	895b      	ldrh	r3, [r3, #10]
   241b8:	3b08      	subs	r3, #8
   241ba:	b299      	uxth	r1, r3
   241bc:	4a5a      	ldr	r2, [pc, #360]	; (24328 <m2m_ip_cb+0x298>)
   241be:	0103      	lsls	r3, r0, #4
   241c0:	18d3      	adds	r3, r2, r3
   241c2:	3308      	adds	r3, #8
   241c4:	1c0a      	adds	r2, r1, #0
   241c6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   241c8:	4b58      	ldr	r3, [pc, #352]	; (2432c <m2m_ip_cb+0x29c>)
   241ca:	881b      	ldrh	r3, [r3, #0]
   241cc:	b29b      	uxth	r3, r3
   241ce:	3301      	adds	r3, #1
   241d0:	b29a      	uxth	r2, r3
   241d2:	4b56      	ldr	r3, [pc, #344]	; (2432c <m2m_ip_cb+0x29c>)
   241d4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   241d6:	4b55      	ldr	r3, [pc, #340]	; (2432c <m2m_ip_cb+0x29c>)
   241d8:	881b      	ldrh	r3, [r3, #0]
   241da:	b29b      	uxth	r3, r3
   241dc:	2b00      	cmp	r3, #0
   241de:	d106      	bne.n	241ee <m2m_ip_cb+0x15e>
					++gu16SessionID;
   241e0:	4b52      	ldr	r3, [pc, #328]	; (2432c <m2m_ip_cb+0x29c>)
   241e2:	881b      	ldrh	r3, [r3, #0]
   241e4:	b29b      	uxth	r3, r3
   241e6:	3301      	adds	r3, #1
   241e8:	b29a      	uxth	r2, r3
   241ea:	4b50      	ldr	r3, [pc, #320]	; (2432c <m2m_ip_cb+0x29c>)
   241ec:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   241ee:	23b4      	movs	r3, #180	; 0xb4
   241f0:	18fb      	adds	r3, r7, r3
   241f2:	7a5b      	ldrb	r3, [r3, #9]
   241f4:	b25b      	sxtb	r3, r3
   241f6:	0018      	movs	r0, r3
   241f8:	4b4c      	ldr	r3, [pc, #304]	; (2432c <m2m_ip_cb+0x29c>)
   241fa:	881b      	ldrh	r3, [r3, #0]
   241fc:	b299      	uxth	r1, r3
   241fe:	4a4a      	ldr	r2, [pc, #296]	; (24328 <m2m_ip_cb+0x298>)
   24200:	0103      	lsls	r3, r0, #4
   24202:	18d3      	adds	r3, r2, r3
   24204:	3306      	adds	r3, #6
   24206:	1c0a      	adds	r2, r1, #0
   24208:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   2420a:	23b4      	movs	r3, #180	; 0xb4
   2420c:	18fb      	adds	r3, r7, r3
   2420e:	2209      	movs	r2, #9
   24210:	569a      	ldrsb	r2, [r3, r2]
   24212:	23a0      	movs	r3, #160	; 0xa0
   24214:	18fb      	adds	r3, r7, r3
   24216:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24218:	23a0      	movs	r3, #160	; 0xa0
   2421a:	18fb      	adds	r3, r7, r3
   2421c:	2202      	movs	r2, #2
   2421e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24220:	23b4      	movs	r3, #180	; 0xb4
   24222:	18fb      	adds	r3, r7, r3
   24224:	885a      	ldrh	r2, [r3, #2]
   24226:	23a0      	movs	r3, #160	; 0xa0
   24228:	18fb      	adds	r3, r7, r3
   2422a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   2422c:	23b4      	movs	r3, #180	; 0xb4
   2422e:	18fb      	adds	r3, r7, r3
   24230:	685a      	ldr	r2, [r3, #4]
   24232:	23a0      	movs	r3, #160	; 0xa0
   24234:	18fb      	adds	r3, r7, r3
   24236:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24238:	4b3a      	ldr	r3, [pc, #232]	; (24324 <m2m_ip_cb+0x294>)
   2423a:	681b      	ldr	r3, [r3, #0]
   2423c:	2b00      	cmp	r3, #0
   2423e:	d100      	bne.n	24242 <m2m_ip_cb+0x1b2>
   24240:	e1bf      	b.n	245c2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24242:	4b38      	ldr	r3, [pc, #224]	; (24324 <m2m_ip_cb+0x294>)
   24244:	681b      	ldr	r3, [r3, #0]
   24246:	22b4      	movs	r2, #180	; 0xb4
   24248:	18ba      	adds	r2, r7, r2
   2424a:	2008      	movs	r0, #8
   2424c:	5610      	ldrsb	r0, [r2, r0]
   2424e:	22a0      	movs	r2, #160	; 0xa0
   24250:	18ba      	adds	r2, r7, r2
   24252:	2104      	movs	r1, #4
   24254:	4798      	blx	r3
}
   24256:	e1b4      	b.n	245c2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24258:	1dfb      	adds	r3, r7, #7
   2425a:	781b      	ldrb	r3, [r3, #0]
   2425c:	2b44      	cmp	r3, #68	; 0x44
   2425e:	d003      	beq.n	24268 <m2m_ip_cb+0x1d8>
   24260:	1dfb      	adds	r3, r7, #7
   24262:	781b      	ldrb	r3, [r3, #0]
   24264:	2b4b      	cmp	r3, #75	; 0x4b
   24266:	d13d      	bne.n	242e4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24268:	239c      	movs	r3, #156	; 0x9c
   2426a:	18f9      	adds	r1, r7, r3
   2426c:	6838      	ldr	r0, [r7, #0]
   2426e:	2300      	movs	r3, #0
   24270:	2204      	movs	r2, #4
   24272:	4c2b      	ldr	r4, [pc, #172]	; (24320 <m2m_ip_cb+0x290>)
   24274:	47a0      	blx	r4
   24276:	1e03      	subs	r3, r0, #0
   24278:	d000      	beq.n	2427c <m2m_ip_cb+0x1ec>
   2427a:	e19d      	b.n	245b8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   2427c:	239c      	movs	r3, #156	; 0x9c
   2427e:	18fb      	adds	r3, r7, r3
   24280:	2200      	movs	r2, #0
   24282:	569a      	ldrsb	r2, [r3, r2]
   24284:	2398      	movs	r3, #152	; 0x98
   24286:	18fb      	adds	r3, r7, r3
   24288:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2428a:	239c      	movs	r3, #156	; 0x9c
   2428c:	18fb      	adds	r3, r7, r3
   2428e:	2201      	movs	r2, #1
   24290:	569a      	ldrsb	r2, [r3, r2]
   24292:	2398      	movs	r3, #152	; 0x98
   24294:	18fb      	adds	r3, r7, r3
   24296:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24298:	239c      	movs	r3, #156	; 0x9c
   2429a:	18fb      	adds	r3, r7, r3
   2429c:	785b      	ldrb	r3, [r3, #1]
   2429e:	b25b      	sxtb	r3, r3
   242a0:	2b00      	cmp	r3, #0
   242a2:	d10f      	bne.n	242c4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   242a4:	239c      	movs	r3, #156	; 0x9c
   242a6:	18fb      	adds	r3, r7, r3
   242a8:	781b      	ldrb	r3, [r3, #0]
   242aa:	b25b      	sxtb	r3, r3
   242ac:	0018      	movs	r0, r3
   242ae:	239c      	movs	r3, #156	; 0x9c
   242b0:	18fb      	adds	r3, r7, r3
   242b2:	885b      	ldrh	r3, [r3, #2]
   242b4:	3b08      	subs	r3, #8
   242b6:	b299      	uxth	r1, r3
   242b8:	4a1b      	ldr	r2, [pc, #108]	; (24328 <m2m_ip_cb+0x298>)
   242ba:	0103      	lsls	r3, r0, #4
   242bc:	18d3      	adds	r3, r2, r3
   242be:	3308      	adds	r3, #8
   242c0:	1c0a      	adds	r2, r1, #0
   242c2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   242c4:	4b17      	ldr	r3, [pc, #92]	; (24324 <m2m_ip_cb+0x294>)
   242c6:	681b      	ldr	r3, [r3, #0]
   242c8:	2b00      	cmp	r3, #0
   242ca:	d100      	bne.n	242ce <m2m_ip_cb+0x23e>
   242cc:	e174      	b.n	245b8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   242ce:	4b15      	ldr	r3, [pc, #84]	; (24324 <m2m_ip_cb+0x294>)
   242d0:	681b      	ldr	r3, [r3, #0]
   242d2:	229c      	movs	r2, #156	; 0x9c
   242d4:	18ba      	adds	r2, r7, r2
   242d6:	2000      	movs	r0, #0
   242d8:	5610      	ldrsb	r0, [r2, r0]
   242da:	2298      	movs	r2, #152	; 0x98
   242dc:	18ba      	adds	r2, r7, r2
   242de:	2105      	movs	r1, #5
   242e0:	4798      	blx	r3
	{
   242e2:	e169      	b.n	245b8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   242e4:	1dfb      	adds	r3, r7, #7
   242e6:	781b      	ldrb	r3, [r3, #0]
   242e8:	2b4a      	cmp	r3, #74	; 0x4a
   242ea:	d123      	bne.n	24334 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   242ec:	230c      	movs	r3, #12
   242ee:	18f9      	adds	r1, r7, r3
   242f0:	6838      	ldr	r0, [r7, #0]
   242f2:	2300      	movs	r3, #0
   242f4:	2244      	movs	r2, #68	; 0x44
   242f6:	4c0a      	ldr	r4, [pc, #40]	; (24320 <m2m_ip_cb+0x290>)
   242f8:	47a0      	blx	r4
   242fa:	1e03      	subs	r3, r0, #0
   242fc:	d000      	beq.n	24300 <m2m_ip_cb+0x270>
   242fe:	e160      	b.n	245c2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24300:	4b0b      	ldr	r3, [pc, #44]	; (24330 <m2m_ip_cb+0x2a0>)
   24302:	681b      	ldr	r3, [r3, #0]
   24304:	2b00      	cmp	r3, #0
   24306:	d100      	bne.n	2430a <m2m_ip_cb+0x27a>
   24308:	e15b      	b.n	245c2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   2430a:	4b09      	ldr	r3, [pc, #36]	; (24330 <m2m_ip_cb+0x2a0>)
   2430c:	681a      	ldr	r2, [r3, #0]
   2430e:	230c      	movs	r3, #12
   24310:	18fb      	adds	r3, r7, r3
   24312:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24314:	230c      	movs	r3, #12
   24316:	18fb      	adds	r3, r7, r3
   24318:	0018      	movs	r0, r3
   2431a:	4790      	blx	r2
}
   2431c:	e151      	b.n	245c2 <m2m_ip_cb+0x532>
   2431e:	46c0      	nop			; (mov r8, r8)
   24320:	0002088d 	.word	0x0002088d
   24324:	20005b78 	.word	0x20005b78
   24328:	20005ac8 	.word	0x20005ac8
   2432c:	2000427e 	.word	0x2000427e
   24330:	20005b80 	.word	0x20005b80
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24334:	1dfb      	adds	r3, r7, #7
   24336:	781b      	ldrb	r3, [r3, #0]
   24338:	2b46      	cmp	r3, #70	; 0x46
   2433a:	d008      	beq.n	2434e <m2m_ip_cb+0x2be>
   2433c:	1dfb      	adds	r3, r7, #7
   2433e:	781b      	ldrb	r3, [r3, #0]
   24340:	2b48      	cmp	r3, #72	; 0x48
   24342:	d004      	beq.n	2434e <m2m_ip_cb+0x2be>
   24344:	1dfb      	adds	r3, r7, #7
   24346:	781b      	ldrb	r3, [r3, #0]
   24348:	2b4d      	cmp	r3, #77	; 0x4d
   2434a:	d000      	beq.n	2434e <m2m_ip_cb+0x2be>
   2434c:	e0b4      	b.n	244b8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   2434e:	23df      	movs	r3, #223	; 0xdf
   24350:	18fb      	adds	r3, r7, r3
   24352:	2206      	movs	r2, #6
   24354:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24356:	1dfb      	adds	r3, r7, #7
   24358:	781b      	ldrb	r3, [r3, #0]
   2435a:	2b48      	cmp	r3, #72	; 0x48
   2435c:	d103      	bne.n	24366 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   2435e:	23df      	movs	r3, #223	; 0xdf
   24360:	18fb      	adds	r3, r7, r3
   24362:	2209      	movs	r2, #9
   24364:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24366:	23d8      	movs	r3, #216	; 0xd8
   24368:	18fb      	adds	r3, r7, r3
   2436a:	2210      	movs	r2, #16
   2436c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   2436e:	23d8      	movs	r3, #216	; 0xd8
   24370:	18fb      	adds	r3, r7, r3
   24372:	881a      	ldrh	r2, [r3, #0]
   24374:	2388      	movs	r3, #136	; 0x88
   24376:	18f9      	adds	r1, r7, r3
   24378:	6838      	ldr	r0, [r7, #0]
   2437a:	2300      	movs	r3, #0
   2437c:	4c93      	ldr	r4, [pc, #588]	; (245cc <m2m_ip_cb+0x53c>)
   2437e:	47a0      	blx	r4
   24380:	1e03      	subs	r3, r0, #0
   24382:	d000      	beq.n	24386 <m2m_ip_cb+0x2f6>
   24384:	e11a      	b.n	245bc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24386:	23d6      	movs	r3, #214	; 0xd6
   24388:	18fb      	adds	r3, r7, r3
   2438a:	2200      	movs	r2, #0
   2438c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2438e:	23d5      	movs	r3, #213	; 0xd5
   24390:	18fb      	adds	r3, r7, r3
   24392:	2288      	movs	r2, #136	; 0x88
   24394:	18ba      	adds	r2, r7, r2
   24396:	7b12      	ldrb	r2, [r2, #12]
   24398:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2439a:	23d6      	movs	r3, #214	; 0xd6
   2439c:	18fb      	adds	r3, r7, r3
   2439e:	2288      	movs	r2, #136	; 0x88
   243a0:	18ba      	adds	r2, r7, r2
   243a2:	89d2      	ldrh	r2, [r2, #14]
   243a4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   243a6:	23d5      	movs	r3, #213	; 0xd5
   243a8:	18fb      	adds	r3, r7, r3
   243aa:	781b      	ldrb	r3, [r3, #0]
   243ac:	b25b      	sxtb	r3, r3
   243ae:	4a88      	ldr	r2, [pc, #544]	; (245d0 <m2m_ip_cb+0x540>)
   243b0:	011b      	lsls	r3, r3, #4
   243b2:	18d3      	adds	r3, r2, r3
   243b4:	330c      	adds	r3, #12
   243b6:	2200      	movs	r2, #0
   243b8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   243ba:	23d2      	movs	r3, #210	; 0xd2
   243bc:	18fb      	adds	r3, r7, r3
   243be:	2288      	movs	r2, #136	; 0x88
   243c0:	18ba      	adds	r2, r7, r2
   243c2:	8912      	ldrh	r2, [r2, #8]
   243c4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   243c6:	23d0      	movs	r3, #208	; 0xd0
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	2288      	movs	r2, #136	; 0x88
   243cc:	18ba      	adds	r2, r7, r2
   243ce:	8952      	ldrh	r2, [r2, #10]
   243d0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   243d2:	2388      	movs	r3, #136	; 0x88
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	885a      	ldrh	r2, [r3, #2]
   243d8:	2370      	movs	r3, #112	; 0x70
   243da:	18fb      	adds	r3, r7, r3
   243dc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   243de:	2388      	movs	r3, #136	; 0x88
   243e0:	18fb      	adds	r3, r7, r3
   243e2:	685a      	ldr	r2, [r3, #4]
   243e4:	2370      	movs	r3, #112	; 0x70
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   243ea:	23d5      	movs	r3, #213	; 0xd5
   243ec:	18fb      	adds	r3, r7, r3
   243ee:	781b      	ldrb	r3, [r3, #0]
   243f0:	b25b      	sxtb	r3, r3
   243f2:	4a77      	ldr	r2, [pc, #476]	; (245d0 <m2m_ip_cb+0x540>)
   243f4:	011b      	lsls	r3, r3, #4
   243f6:	18d3      	adds	r3, r2, r3
   243f8:	3306      	adds	r3, #6
   243fa:	881b      	ldrh	r3, [r3, #0]
   243fc:	b29b      	uxth	r3, r3
   243fe:	22d6      	movs	r2, #214	; 0xd6
   24400:	18ba      	adds	r2, r7, r2
   24402:	8812      	ldrh	r2, [r2, #0]
   24404:	429a      	cmp	r2, r3
   24406:	d148      	bne.n	2449a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24408:	23d2      	movs	r3, #210	; 0xd2
   2440a:	18fb      	adds	r3, r7, r3
   2440c:	2200      	movs	r2, #0
   2440e:	5e9b      	ldrsh	r3, [r3, r2]
   24410:	2b00      	cmp	r3, #0
   24412:	dd25      	ble.n	24460 <m2m_ip_cb+0x3d0>
   24414:	23d2      	movs	r3, #210	; 0xd2
   24416:	18fb      	adds	r3, r7, r3
   24418:	2200      	movs	r2, #0
   2441a:	5e9a      	ldrsh	r2, [r3, r2]
   2441c:	1d3b      	adds	r3, r7, #4
   2441e:	881b      	ldrh	r3, [r3, #0]
   24420:	429a      	cmp	r2, r3
   24422:	da1d      	bge.n	24460 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24424:	23d0      	movs	r3, #208	; 0xd0
   24426:	18fb      	adds	r3, r7, r3
   24428:	881b      	ldrh	r3, [r3, #0]
   2442a:	683a      	ldr	r2, [r7, #0]
   2442c:	18d3      	adds	r3, r2, r3
   2442e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24430:	23d8      	movs	r3, #216	; 0xd8
   24432:	18fb      	adds	r3, r7, r3
   24434:	22d2      	movs	r2, #210	; 0xd2
   24436:	18ba      	adds	r2, r7, r2
   24438:	8812      	ldrh	r2, [r2, #0]
   2443a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   2443c:	683c      	ldr	r4, [r7, #0]
   2443e:	23df      	movs	r3, #223	; 0xdf
   24440:	18fb      	adds	r3, r7, r3
   24442:	781a      	ldrb	r2, [r3, #0]
   24444:	2370      	movs	r3, #112	; 0x70
   24446:	18f9      	adds	r1, r7, r3
   24448:	23d5      	movs	r3, #213	; 0xd5
   2444a:	18fb      	adds	r3, r7, r3
   2444c:	2000      	movs	r0, #0
   2444e:	5618      	ldrsb	r0, [r3, r0]
   24450:	23d8      	movs	r3, #216	; 0xd8
   24452:	18fb      	adds	r3, r7, r3
   24454:	881b      	ldrh	r3, [r3, #0]
   24456:	9300      	str	r3, [sp, #0]
   24458:	0023      	movs	r3, r4
   2445a:	4c5e      	ldr	r4, [pc, #376]	; (245d4 <m2m_ip_cb+0x544>)
   2445c:	47a0      	blx	r4
	{
   2445e:	e0ad      	b.n	245bc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24460:	2370      	movs	r3, #112	; 0x70
   24462:	18fb      	adds	r3, r7, r3
   24464:	22d2      	movs	r2, #210	; 0xd2
   24466:	18ba      	adds	r2, r7, r2
   24468:	8812      	ldrh	r2, [r2, #0]
   2446a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   2446c:	2370      	movs	r3, #112	; 0x70
   2446e:	18fb      	adds	r3, r7, r3
   24470:	2200      	movs	r2, #0
   24472:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24474:	4b58      	ldr	r3, [pc, #352]	; (245d8 <m2m_ip_cb+0x548>)
   24476:	681b      	ldr	r3, [r3, #0]
   24478:	2b00      	cmp	r3, #0
   2447a:	d100      	bne.n	2447e <m2m_ip_cb+0x3ee>
   2447c:	e09e      	b.n	245bc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2447e:	4b56      	ldr	r3, [pc, #344]	; (245d8 <m2m_ip_cb+0x548>)
   24480:	681b      	ldr	r3, [r3, #0]
   24482:	2270      	movs	r2, #112	; 0x70
   24484:	18bc      	adds	r4, r7, r2
   24486:	22df      	movs	r2, #223	; 0xdf
   24488:	18ba      	adds	r2, r7, r2
   2448a:	7811      	ldrb	r1, [r2, #0]
   2448c:	22d5      	movs	r2, #213	; 0xd5
   2448e:	18ba      	adds	r2, r7, r2
   24490:	2000      	movs	r0, #0
   24492:	5610      	ldrsb	r0, [r2, r0]
   24494:	0022      	movs	r2, r4
   24496:	4798      	blx	r3
	{
   24498:	e090      	b.n	245bc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2449a:	23d8      	movs	r3, #216	; 0xd8
   2449c:	18fa      	adds	r2, r7, r3
   2449e:	1d3b      	adds	r3, r7, #4
   244a0:	8812      	ldrh	r2, [r2, #0]
   244a2:	881b      	ldrh	r3, [r3, #0]
   244a4:	429a      	cmp	r2, r3
   244a6:	d300      	bcc.n	244aa <m2m_ip_cb+0x41a>
   244a8:	e088      	b.n	245bc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   244aa:	2301      	movs	r3, #1
   244ac:	2200      	movs	r2, #0
   244ae:	2100      	movs	r1, #0
   244b0:	2000      	movs	r0, #0
   244b2:	4c46      	ldr	r4, [pc, #280]	; (245cc <m2m_ip_cb+0x53c>)
   244b4:	47a0      	blx	r4
	{
   244b6:	e081      	b.n	245bc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   244b8:	1dfb      	adds	r3, r7, #7
   244ba:	781b      	ldrb	r3, [r3, #0]
   244bc:	2b45      	cmp	r3, #69	; 0x45
   244be:	d007      	beq.n	244d0 <m2m_ip_cb+0x440>
   244c0:	1dfb      	adds	r3, r7, #7
   244c2:	781b      	ldrb	r3, [r3, #0]
   244c4:	2b47      	cmp	r3, #71	; 0x47
   244c6:	d003      	beq.n	244d0 <m2m_ip_cb+0x440>
   244c8:	1dfb      	adds	r3, r7, #7
   244ca:	781b      	ldrb	r3, [r3, #0]
   244cc:	2b4c      	cmp	r3, #76	; 0x4c
   244ce:	d14c      	bne.n	2456a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   244d0:	23de      	movs	r3, #222	; 0xde
   244d2:	18fb      	adds	r3, r7, r3
   244d4:	2207      	movs	r2, #7
   244d6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   244d8:	1dfb      	adds	r3, r7, #7
   244da:	781b      	ldrb	r3, [r3, #0]
   244dc:	2b47      	cmp	r3, #71	; 0x47
   244de:	d103      	bne.n	244e8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   244e0:	23de      	movs	r3, #222	; 0xde
   244e2:	18fb      	adds	r3, r7, r3
   244e4:	2208      	movs	r2, #8
   244e6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   244e8:	2364      	movs	r3, #100	; 0x64
   244ea:	18f9      	adds	r1, r7, r3
   244ec:	6838      	ldr	r0, [r7, #0]
   244ee:	2300      	movs	r3, #0
   244f0:	2208      	movs	r2, #8
   244f2:	4c36      	ldr	r4, [pc, #216]	; (245cc <m2m_ip_cb+0x53c>)
   244f4:	47a0      	blx	r4
   244f6:	1e03      	subs	r3, r0, #0
   244f8:	d162      	bne.n	245c0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   244fa:	23dc      	movs	r3, #220	; 0xdc
   244fc:	18fb      	adds	r3, r7, r3
   244fe:	2200      	movs	r2, #0
   24500:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   24502:	23db      	movs	r3, #219	; 0xdb
   24504:	18fb      	adds	r3, r7, r3
   24506:	2264      	movs	r2, #100	; 0x64
   24508:	18ba      	adds	r2, r7, r2
   2450a:	7812      	ldrb	r2, [r2, #0]
   2450c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2450e:	23dc      	movs	r3, #220	; 0xdc
   24510:	18fb      	adds	r3, r7, r3
   24512:	2264      	movs	r2, #100	; 0x64
   24514:	18ba      	adds	r2, r7, r2
   24516:	8892      	ldrh	r2, [r2, #4]
   24518:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2451a:	2364      	movs	r3, #100	; 0x64
   2451c:	18fb      	adds	r3, r7, r3
   2451e:	2202      	movs	r2, #2
   24520:	5e9a      	ldrsh	r2, [r3, r2]
   24522:	236e      	movs	r3, #110	; 0x6e
   24524:	18fb      	adds	r3, r7, r3
   24526:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24528:	23db      	movs	r3, #219	; 0xdb
   2452a:	18fb      	adds	r3, r7, r3
   2452c:	781b      	ldrb	r3, [r3, #0]
   2452e:	b25b      	sxtb	r3, r3
   24530:	4a27      	ldr	r2, [pc, #156]	; (245d0 <m2m_ip_cb+0x540>)
   24532:	011b      	lsls	r3, r3, #4
   24534:	18d3      	adds	r3, r2, r3
   24536:	3306      	adds	r3, #6
   24538:	881b      	ldrh	r3, [r3, #0]
   2453a:	b29b      	uxth	r3, r3
   2453c:	22dc      	movs	r2, #220	; 0xdc
   2453e:	18ba      	adds	r2, r7, r2
   24540:	8812      	ldrh	r2, [r2, #0]
   24542:	429a      	cmp	r2, r3
   24544:	d13c      	bne.n	245c0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24546:	4b24      	ldr	r3, [pc, #144]	; (245d8 <m2m_ip_cb+0x548>)
   24548:	681b      	ldr	r3, [r3, #0]
   2454a:	2b00      	cmp	r3, #0
   2454c:	d038      	beq.n	245c0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2454e:	4b22      	ldr	r3, [pc, #136]	; (245d8 <m2m_ip_cb+0x548>)
   24550:	681b      	ldr	r3, [r3, #0]
   24552:	226e      	movs	r2, #110	; 0x6e
   24554:	18bc      	adds	r4, r7, r2
   24556:	22de      	movs	r2, #222	; 0xde
   24558:	18ba      	adds	r2, r7, r2
   2455a:	7811      	ldrb	r1, [r2, #0]
   2455c:	22db      	movs	r2, #219	; 0xdb
   2455e:	18ba      	adds	r2, r7, r2
   24560:	2000      	movs	r0, #0
   24562:	5610      	ldrsb	r0, [r2, r0]
   24564:	0022      	movs	r2, r4
   24566:	4798      	blx	r3
	{
   24568:	e02a      	b.n	245c0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2456a:	1dfb      	adds	r3, r7, #7
   2456c:	781b      	ldrb	r3, [r3, #0]
   2456e:	2b52      	cmp	r3, #82	; 0x52
   24570:	d127      	bne.n	245c2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   24572:	2350      	movs	r3, #80	; 0x50
   24574:	18f9      	adds	r1, r7, r3
   24576:	6838      	ldr	r0, [r7, #0]
   24578:	2301      	movs	r3, #1
   2457a:	2214      	movs	r2, #20
   2457c:	4c13      	ldr	r4, [pc, #76]	; (245cc <m2m_ip_cb+0x53c>)
   2457e:	47a0      	blx	r4
   24580:	1e03      	subs	r3, r0, #0
   24582:	d11e      	bne.n	245c2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24584:	2350      	movs	r3, #80	; 0x50
   24586:	18fb      	adds	r3, r7, r3
   24588:	685b      	ldr	r3, [r3, #4]
   2458a:	001a      	movs	r2, r3
   2458c:	4b13      	ldr	r3, [pc, #76]	; (245dc <m2m_ip_cb+0x54c>)
   2458e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24590:	4b12      	ldr	r3, [pc, #72]	; (245dc <m2m_ip_cb+0x54c>)
   24592:	681b      	ldr	r3, [r3, #0]
   24594:	2b00      	cmp	r3, #0
   24596:	d014      	beq.n	245c2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24598:	4b10      	ldr	r3, [pc, #64]	; (245dc <m2m_ip_cb+0x54c>)
   2459a:	681c      	ldr	r4, [r3, #0]
   2459c:	2350      	movs	r3, #80	; 0x50
   2459e:	18fb      	adds	r3, r7, r3
   245a0:	6818      	ldr	r0, [r3, #0]
   245a2:	2350      	movs	r3, #80	; 0x50
   245a4:	18fb      	adds	r3, r7, r3
   245a6:	6899      	ldr	r1, [r3, #8]
   245a8:	2350      	movs	r3, #80	; 0x50
   245aa:	18fb      	adds	r3, r7, r3
   245ac:	7c1b      	ldrb	r3, [r3, #16]
   245ae:	001a      	movs	r2, r3
   245b0:	47a0      	blx	r4
}
   245b2:	e006      	b.n	245c2 <m2m_ip_cb+0x532>
	{
   245b4:	46c0      	nop			; (mov r8, r8)
   245b6:	e004      	b.n	245c2 <m2m_ip_cb+0x532>
	{
   245b8:	46c0      	nop			; (mov r8, r8)
   245ba:	e002      	b.n	245c2 <m2m_ip_cb+0x532>
	{
   245bc:	46c0      	nop			; (mov r8, r8)
   245be:	e000      	b.n	245c2 <m2m_ip_cb+0x532>
	{
   245c0:	46c0      	nop			; (mov r8, r8)
}
   245c2:	46c0      	nop			; (mov r8, r8)
   245c4:	46bd      	mov	sp, r7
   245c6:	b039      	add	sp, #228	; 0xe4
   245c8:	bd90      	pop	{r4, r7, pc}
   245ca:	46c0      	nop			; (mov r8, r8)
   245cc:	0002088d 	.word	0x0002088d
   245d0:	20005ac8 	.word	0x20005ac8
   245d4:	00023e95 	.word	0x00023e95
   245d8:	20005b78 	.word	0x20005b78
   245dc:	20005b7c 	.word	0x20005b7c

000245e0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   245e0:	b580      	push	{r7, lr}
   245e2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   245e4:	4b0c      	ldr	r3, [pc, #48]	; (24618 <socketInit+0x38>)
   245e6:	781b      	ldrb	r3, [r3, #0]
   245e8:	b2db      	uxtb	r3, r3
   245ea:	2b00      	cmp	r3, #0
   245ec:	d110      	bne.n	24610 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   245ee:	4b0b      	ldr	r3, [pc, #44]	; (2461c <socketInit+0x3c>)
   245f0:	22b0      	movs	r2, #176	; 0xb0
   245f2:	2100      	movs	r1, #0
   245f4:	0018      	movs	r0, r3
   245f6:	4b0a      	ldr	r3, [pc, #40]	; (24620 <socketInit+0x40>)
   245f8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   245fa:	4b0a      	ldr	r3, [pc, #40]	; (24624 <socketInit+0x44>)
   245fc:	0019      	movs	r1, r3
   245fe:	2002      	movs	r0, #2
   24600:	4b09      	ldr	r3, [pc, #36]	; (24628 <socketInit+0x48>)
   24602:	4798      	blx	r3
		gbSocketInit	= 1;
   24604:	4b04      	ldr	r3, [pc, #16]	; (24618 <socketInit+0x38>)
   24606:	2201      	movs	r2, #1
   24608:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2460a:	4b08      	ldr	r3, [pc, #32]	; (2462c <socketInit+0x4c>)
   2460c:	2200      	movs	r2, #0
   2460e:	801a      	strh	r2, [r3, #0]
	}
}
   24610:	46c0      	nop			; (mov r8, r8)
   24612:	46bd      	mov	sp, r7
   24614:	bd80      	pop	{r7, pc}
   24616:	46c0      	nop			; (mov r8, r8)
   24618:	20004280 	.word	0x20004280
   2461c:	20005ac8 	.word	0x20005ac8
   24620:	0001fd11 	.word	0x0001fd11
   24624:	00024091 	.word	0x00024091
   24628:	00020a0d 	.word	0x00020a0d
   2462c:	2000427e 	.word	0x2000427e

00024630 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   24630:	b580      	push	{r7, lr}
   24632:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24634:	4b0a      	ldr	r3, [pc, #40]	; (24660 <socketDeinit+0x30>)
   24636:	22b0      	movs	r2, #176	; 0xb0
   24638:	2100      	movs	r1, #0
   2463a:	0018      	movs	r0, r3
   2463c:	4b09      	ldr	r3, [pc, #36]	; (24664 <socketDeinit+0x34>)
   2463e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   24640:	2100      	movs	r1, #0
   24642:	2002      	movs	r0, #2
   24644:	4b08      	ldr	r3, [pc, #32]	; (24668 <socketDeinit+0x38>)
   24646:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24648:	4b08      	ldr	r3, [pc, #32]	; (2466c <socketDeinit+0x3c>)
   2464a:	2200      	movs	r2, #0
   2464c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2464e:	4b08      	ldr	r3, [pc, #32]	; (24670 <socketDeinit+0x40>)
   24650:	2200      	movs	r2, #0
   24652:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24654:	4b07      	ldr	r3, [pc, #28]	; (24674 <socketDeinit+0x44>)
   24656:	2200      	movs	r2, #0
   24658:	701a      	strb	r2, [r3, #0]
}
   2465a:	46c0      	nop			; (mov r8, r8)
   2465c:	46bd      	mov	sp, r7
   2465e:	bd80      	pop	{r7, pc}
   24660:	20005ac8 	.word	0x20005ac8
   24664:	0001fd11 	.word	0x0001fd11
   24668:	00020a0d 	.word	0x00020a0d
   2466c:	20005b78 	.word	0x20005b78
   24670:	20005b80 	.word	0x20005b80
   24674:	20004280 	.word	0x20004280

00024678 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24678:	b580      	push	{r7, lr}
   2467a:	b082      	sub	sp, #8
   2467c:	af00      	add	r7, sp, #0
   2467e:	6078      	str	r0, [r7, #4]
   24680:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   24682:	4b05      	ldr	r3, [pc, #20]	; (24698 <registerSocketCallback+0x20>)
   24684:	687a      	ldr	r2, [r7, #4]
   24686:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24688:	4b04      	ldr	r3, [pc, #16]	; (2469c <registerSocketCallback+0x24>)
   2468a:	683a      	ldr	r2, [r7, #0]
   2468c:	601a      	str	r2, [r3, #0]
}
   2468e:	46c0      	nop			; (mov r8, r8)
   24690:	46bd      	mov	sp, r7
   24692:	b002      	add	sp, #8
   24694:	bd80      	pop	{r7, pc}
   24696:	46c0      	nop			; (mov r8, r8)
   24698:	20005b78 	.word	0x20005b78
   2469c:	20005b80 	.word	0x20005b80

000246a0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   246a0:	b590      	push	{r4, r7, lr}
   246a2:	b08d      	sub	sp, #52	; 0x34
   246a4:	af04      	add	r7, sp, #16
   246a6:	0004      	movs	r4, r0
   246a8:	0008      	movs	r0, r1
   246aa:	0011      	movs	r1, r2
   246ac:	1dbb      	adds	r3, r7, #6
   246ae:	1c22      	adds	r2, r4, #0
   246b0:	801a      	strh	r2, [r3, #0]
   246b2:	1d7b      	adds	r3, r7, #5
   246b4:	1c02      	adds	r2, r0, #0
   246b6:	701a      	strb	r2, [r3, #0]
   246b8:	1d3b      	adds	r3, r7, #4
   246ba:	1c0a      	adds	r2, r1, #0
   246bc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   246be:	231f      	movs	r3, #31
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	22ff      	movs	r2, #255	; 0xff
   246c4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   246c6:	1dbb      	adds	r3, r7, #6
   246c8:	881b      	ldrh	r3, [r3, #0]
   246ca:	2b02      	cmp	r3, #2
   246cc:	d000      	beq.n	246d0 <socket+0x30>
   246ce:	e0ce      	b.n	2486e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   246d0:	1d7b      	adds	r3, r7, #5
   246d2:	781b      	ldrb	r3, [r3, #0]
   246d4:	2b01      	cmp	r3, #1
   246d6:	d135      	bne.n	24744 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   246d8:	231e      	movs	r3, #30
   246da:	18fb      	adds	r3, r7, r3
   246dc:	2200      	movs	r2, #0
   246de:	701a      	strb	r2, [r3, #0]
   246e0:	e02a      	b.n	24738 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   246e2:	2317      	movs	r3, #23
   246e4:	18fb      	adds	r3, r7, r3
   246e6:	4a66      	ldr	r2, [pc, #408]	; (24880 <socket+0x1e0>)
   246e8:	7812      	ldrb	r2, [r2, #0]
   246ea:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   246ec:	4b64      	ldr	r3, [pc, #400]	; (24880 <socket+0x1e0>)
   246ee:	781b      	ldrb	r3, [r3, #0]
   246f0:	b2db      	uxtb	r3, r3
   246f2:	011a      	lsls	r2, r3, #4
   246f4:	4b63      	ldr	r3, [pc, #396]	; (24884 <socket+0x1e4>)
   246f6:	18d3      	adds	r3, r2, r3
   246f8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   246fa:	4b61      	ldr	r3, [pc, #388]	; (24880 <socket+0x1e0>)
   246fc:	781b      	ldrb	r3, [r3, #0]
   246fe:	b2db      	uxtb	r3, r3
   24700:	1c5a      	adds	r2, r3, #1
   24702:	4b61      	ldr	r3, [pc, #388]	; (24888 <socket+0x1e8>)
   24704:	2107      	movs	r1, #7
   24706:	0010      	movs	r0, r2
   24708:	4798      	blx	r3
   2470a:	000b      	movs	r3, r1
   2470c:	b2da      	uxtb	r2, r3
   2470e:	4b5c      	ldr	r3, [pc, #368]	; (24880 <socket+0x1e0>)
   24710:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24712:	69bb      	ldr	r3, [r7, #24]
   24714:	7a9b      	ldrb	r3, [r3, #10]
   24716:	b2db      	uxtb	r3, r3
   24718:	2b00      	cmp	r3, #0
   2471a:	d106      	bne.n	2472a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2471c:	231f      	movs	r3, #31
   2471e:	18fb      	adds	r3, r7, r3
   24720:	2217      	movs	r2, #23
   24722:	18ba      	adds	r2, r7, r2
   24724:	7812      	ldrb	r2, [r2, #0]
   24726:	701a      	strb	r2, [r3, #0]
					break;
   24728:	e04c      	b.n	247c4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2472a:	231e      	movs	r3, #30
   2472c:	18fb      	adds	r3, r7, r3
   2472e:	781a      	ldrb	r2, [r3, #0]
   24730:	231e      	movs	r3, #30
   24732:	18fb      	adds	r3, r7, r3
   24734:	3201      	adds	r2, #1
   24736:	701a      	strb	r2, [r3, #0]
   24738:	231e      	movs	r3, #30
   2473a:	18fb      	adds	r3, r7, r3
   2473c:	781b      	ldrb	r3, [r3, #0]
   2473e:	2b06      	cmp	r3, #6
   24740:	d9cf      	bls.n	246e2 <socket+0x42>
   24742:	e03f      	b.n	247c4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   24744:	1d7b      	adds	r3, r7, #5
   24746:	781b      	ldrb	r3, [r3, #0]
   24748:	2b02      	cmp	r3, #2
   2474a:	d13b      	bne.n	247c4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2474c:	4b4f      	ldr	r3, [pc, #316]	; (2488c <socket+0x1ec>)
   2474e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24750:	231e      	movs	r3, #30
   24752:	18fb      	adds	r3, r7, r3
   24754:	2200      	movs	r2, #0
   24756:	701a      	strb	r2, [r3, #0]
   24758:	e02f      	b.n	247ba <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2475a:	2317      	movs	r3, #23
   2475c:	18fb      	adds	r3, r7, r3
   2475e:	4a4c      	ldr	r2, [pc, #304]	; (24890 <socket+0x1f0>)
   24760:	7812      	ldrb	r2, [r2, #0]
   24762:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   24764:	4b4a      	ldr	r3, [pc, #296]	; (24890 <socket+0x1f0>)
   24766:	781b      	ldrb	r3, [r3, #0]
   24768:	b2db      	uxtb	r3, r3
   2476a:	011b      	lsls	r3, r3, #4
   2476c:	693a      	ldr	r2, [r7, #16]
   2476e:	18d3      	adds	r3, r2, r3
   24770:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   24772:	4b47      	ldr	r3, [pc, #284]	; (24890 <socket+0x1f0>)
   24774:	781b      	ldrb	r3, [r3, #0]
   24776:	b2db      	uxtb	r3, r3
   24778:	3301      	adds	r3, #1
   2477a:	4a46      	ldr	r2, [pc, #280]	; (24894 <socket+0x1f4>)
   2477c:	4013      	ands	r3, r2
   2477e:	d504      	bpl.n	2478a <socket+0xea>
   24780:	3b01      	subs	r3, #1
   24782:	2204      	movs	r2, #4
   24784:	4252      	negs	r2, r2
   24786:	4313      	orrs	r3, r2
   24788:	3301      	adds	r3, #1
   2478a:	b2da      	uxtb	r2, r3
   2478c:	4b40      	ldr	r3, [pc, #256]	; (24890 <socket+0x1f0>)
   2478e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24790:	69bb      	ldr	r3, [r7, #24]
   24792:	7a9b      	ldrb	r3, [r3, #10]
   24794:	b2db      	uxtb	r3, r3
   24796:	2b00      	cmp	r3, #0
   24798:	d108      	bne.n	247ac <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2479a:	2317      	movs	r3, #23
   2479c:	18fb      	adds	r3, r7, r3
   2479e:	781b      	ldrb	r3, [r3, #0]
   247a0:	3307      	adds	r3, #7
   247a2:	b2da      	uxtb	r2, r3
   247a4:	231f      	movs	r3, #31
   247a6:	18fb      	adds	r3, r7, r3
   247a8:	701a      	strb	r2, [r3, #0]
					break;
   247aa:	e00b      	b.n	247c4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   247ac:	231e      	movs	r3, #30
   247ae:	18fb      	adds	r3, r7, r3
   247b0:	781a      	ldrb	r2, [r3, #0]
   247b2:	231e      	movs	r3, #30
   247b4:	18fb      	adds	r3, r7, r3
   247b6:	3201      	adds	r2, #1
   247b8:	701a      	strb	r2, [r3, #0]
   247ba:	231e      	movs	r3, #30
   247bc:	18fb      	adds	r3, r7, r3
   247be:	781b      	ldrb	r3, [r3, #0]
   247c0:	2b03      	cmp	r3, #3
   247c2:	d9ca      	bls.n	2475a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   247c4:	231f      	movs	r3, #31
   247c6:	18fb      	adds	r3, r7, r3
   247c8:	781b      	ldrb	r3, [r3, #0]
   247ca:	2b7f      	cmp	r3, #127	; 0x7f
   247cc:	d84f      	bhi.n	2486e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   247ce:	69bb      	ldr	r3, [r7, #24]
   247d0:	2210      	movs	r2, #16
   247d2:	2100      	movs	r1, #0
   247d4:	0018      	movs	r0, r3
   247d6:	4b30      	ldr	r3, [pc, #192]	; (24898 <socket+0x1f8>)
   247d8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   247da:	69bb      	ldr	r3, [r7, #24]
   247dc:	2201      	movs	r2, #1
   247de:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   247e0:	4b2e      	ldr	r3, [pc, #184]	; (2489c <socket+0x1fc>)
   247e2:	881b      	ldrh	r3, [r3, #0]
   247e4:	b29b      	uxth	r3, r3
   247e6:	3301      	adds	r3, #1
   247e8:	b29a      	uxth	r2, r3
   247ea:	4b2c      	ldr	r3, [pc, #176]	; (2489c <socket+0x1fc>)
   247ec:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   247ee:	4b2b      	ldr	r3, [pc, #172]	; (2489c <socket+0x1fc>)
   247f0:	881b      	ldrh	r3, [r3, #0]
   247f2:	b29b      	uxth	r3, r3
   247f4:	2b00      	cmp	r3, #0
   247f6:	d106      	bne.n	24806 <socket+0x166>
				++gu16SessionID;
   247f8:	4b28      	ldr	r3, [pc, #160]	; (2489c <socket+0x1fc>)
   247fa:	881b      	ldrh	r3, [r3, #0]
   247fc:	b29b      	uxth	r3, r3
   247fe:	3301      	adds	r3, #1
   24800:	b29a      	uxth	r2, r3
   24802:	4b26      	ldr	r3, [pc, #152]	; (2489c <socket+0x1fc>)
   24804:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   24806:	4b25      	ldr	r3, [pc, #148]	; (2489c <socket+0x1fc>)
   24808:	881b      	ldrh	r3, [r3, #0]
   2480a:	b29a      	uxth	r2, r3
   2480c:	69bb      	ldr	r3, [r7, #24]
   2480e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   24810:	4b23      	ldr	r3, [pc, #140]	; (248a0 <socket+0x200>)
   24812:	0018      	movs	r0, r3
   24814:	4b23      	ldr	r3, [pc, #140]	; (248a4 <socket+0x204>)
   24816:	4798      	blx	r3
   24818:	231f      	movs	r3, #31
   2481a:	18fb      	adds	r3, r7, r3
   2481c:	2100      	movs	r1, #0
   2481e:	5659      	ldrsb	r1, [r3, r1]
   24820:	4b1e      	ldr	r3, [pc, #120]	; (2489c <socket+0x1fc>)
   24822:	881b      	ldrh	r3, [r3, #0]
   24824:	b29b      	uxth	r3, r3
   24826:	001a      	movs	r2, r3
   24828:	4b1f      	ldr	r3, [pc, #124]	; (248a8 <socket+0x208>)
   2482a:	0018      	movs	r0, r3
   2482c:	4b1d      	ldr	r3, [pc, #116]	; (248a4 <socket+0x204>)
   2482e:	4798      	blx	r3
   24830:	4b1e      	ldr	r3, [pc, #120]	; (248ac <socket+0x20c>)
   24832:	0018      	movs	r0, r3
   24834:	4b1b      	ldr	r3, [pc, #108]	; (248a4 <socket+0x204>)
   24836:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   24838:	1d3b      	adds	r3, r7, #4
   2483a:	781b      	ldrb	r3, [r3, #0]
   2483c:	2201      	movs	r2, #1
   2483e:	4013      	ands	r3, r2
   24840:	d015      	beq.n	2486e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   24842:	230c      	movs	r3, #12
   24844:	18fb      	adds	r3, r7, r3
   24846:	221f      	movs	r2, #31
   24848:	18ba      	adds	r2, r7, r2
   2484a:	7812      	ldrb	r2, [r2, #0]
   2484c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2484e:	69bb      	ldr	r3, [r7, #24]
   24850:	2221      	movs	r2, #33	; 0x21
   24852:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   24854:	230c      	movs	r3, #12
   24856:	18fa      	adds	r2, r7, r3
   24858:	2300      	movs	r3, #0
   2485a:	9302      	str	r3, [sp, #8]
   2485c:	2300      	movs	r3, #0
   2485e:	9301      	str	r3, [sp, #4]
   24860:	2300      	movs	r3, #0
   24862:	9300      	str	r3, [sp, #0]
   24864:	2304      	movs	r3, #4
   24866:	2150      	movs	r1, #80	; 0x50
   24868:	2002      	movs	r0, #2
   2486a:	4c11      	ldr	r4, [pc, #68]	; (248b0 <socket+0x210>)
   2486c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2486e:	231f      	movs	r3, #31
   24870:	18fb      	adds	r3, r7, r3
   24872:	781b      	ldrb	r3, [r3, #0]
   24874:	b25b      	sxtb	r3, r3
}
   24876:	0018      	movs	r0, r3
   24878:	46bd      	mov	sp, r7
   2487a:	b009      	add	sp, #36	; 0x24
   2487c:	bd90      	pop	{r4, r7, pc}
   2487e:	46c0      	nop			; (mov r8, r8)
   24880:	20004281 	.word	0x20004281
   24884:	20005ac8 	.word	0x20005ac8
   24888:	00031e35 	.word	0x00031e35
   2488c:	20005b38 	.word	0x20005b38
   24890:	20004282 	.word	0x20004282
   24894:	80000003 	.word	0x80000003
   24898:	0001fd11 	.word	0x0001fd11
   2489c:	2000427e 	.word	0x2000427e
   248a0:	00038ea0 	.word	0x00038ea0
   248a4:	0001cf79 	.word	0x0001cf79
   248a8:	00038ec4 	.word	0x00038ec4
   248ac:	00038ec0 	.word	0x00038ec0
   248b0:	0001ff71 	.word	0x0001ff71

000248b4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   248b4:	b5b0      	push	{r4, r5, r7, lr}
   248b6:	b08a      	sub	sp, #40	; 0x28
   248b8:	af04      	add	r7, sp, #16
   248ba:	6039      	str	r1, [r7, #0]
   248bc:	0011      	movs	r1, r2
   248be:	1dfb      	adds	r3, r7, #7
   248c0:	1c02      	adds	r2, r0, #0
   248c2:	701a      	strb	r2, [r3, #0]
   248c4:	1dbb      	adds	r3, r7, #6
   248c6:	1c0a      	adds	r2, r1, #0
   248c8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   248ca:	2317      	movs	r3, #23
   248cc:	18fb      	adds	r3, r7, r3
   248ce:	22fa      	movs	r2, #250	; 0xfa
   248d0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   248d2:	1dfb      	adds	r3, r7, #7
   248d4:	781b      	ldrb	r3, [r3, #0]
   248d6:	2b7f      	cmp	r3, #127	; 0x7f
   248d8:	d867      	bhi.n	249aa <connect+0xf6>
   248da:	683b      	ldr	r3, [r7, #0]
   248dc:	2b00      	cmp	r3, #0
   248de:	d064      	beq.n	249aa <connect+0xf6>
   248e0:	1dfb      	adds	r3, r7, #7
   248e2:	781b      	ldrb	r3, [r3, #0]
   248e4:	b25b      	sxtb	r3, r3
   248e6:	4a35      	ldr	r2, [pc, #212]	; (249bc <connect+0x108>)
   248e8:	011b      	lsls	r3, r3, #4
   248ea:	18d3      	adds	r3, r2, r3
   248ec:	330a      	adds	r3, #10
   248ee:	781b      	ldrb	r3, [r3, #0]
   248f0:	b2db      	uxtb	r3, r3
   248f2:	2b01      	cmp	r3, #1
   248f4:	d159      	bne.n	249aa <connect+0xf6>
   248f6:	1dbb      	adds	r3, r7, #6
   248f8:	781b      	ldrb	r3, [r3, #0]
   248fa:	2b00      	cmp	r3, #0
   248fc:	d055      	beq.n	249aa <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   248fe:	2316      	movs	r3, #22
   24900:	18fb      	adds	r3, r7, r3
   24902:	2244      	movs	r2, #68	; 0x44
   24904:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   24906:	1dfb      	adds	r3, r7, #7
   24908:	781b      	ldrb	r3, [r3, #0]
   2490a:	b25b      	sxtb	r3, r3
   2490c:	4a2b      	ldr	r2, [pc, #172]	; (249bc <connect+0x108>)
   2490e:	011b      	lsls	r3, r3, #4
   24910:	18d3      	adds	r3, r2, r3
   24912:	330b      	adds	r3, #11
   24914:	781b      	ldrb	r3, [r3, #0]
   24916:	b2db      	uxtb	r3, r3
   24918:	001a      	movs	r2, r3
   2491a:	2301      	movs	r3, #1
   2491c:	4013      	ands	r3, r2
   2491e:	d00f      	beq.n	24940 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   24920:	2316      	movs	r3, #22
   24922:	18fb      	adds	r3, r7, r3
   24924:	224b      	movs	r2, #75	; 0x4b
   24926:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   24928:	1dfb      	adds	r3, r7, #7
   2492a:	781b      	ldrb	r3, [r3, #0]
   2492c:	b25b      	sxtb	r3, r3
   2492e:	4a23      	ldr	r2, [pc, #140]	; (249bc <connect+0x108>)
   24930:	011b      	lsls	r3, r3, #4
   24932:	18d3      	adds	r3, r2, r3
   24934:	330b      	adds	r3, #11
   24936:	781b      	ldrb	r3, [r3, #0]
   24938:	b2da      	uxtb	r2, r3
   2493a:	2308      	movs	r3, #8
   2493c:	18fb      	adds	r3, r7, r3
   2493e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   24940:	2308      	movs	r3, #8
   24942:	18fb      	adds	r3, r7, r3
   24944:	1dfa      	adds	r2, r7, #7
   24946:	7812      	ldrb	r2, [r2, #0]
   24948:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2494a:	6839      	ldr	r1, [r7, #0]
   2494c:	2308      	movs	r3, #8
   2494e:	18fb      	adds	r3, r7, r3
   24950:	2208      	movs	r2, #8
   24952:	0018      	movs	r0, r3
   24954:	4b1a      	ldr	r3, [pc, #104]	; (249c0 <connect+0x10c>)
   24956:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   24958:	1dfb      	adds	r3, r7, #7
   2495a:	781b      	ldrb	r3, [r3, #0]
   2495c:	b25b      	sxtb	r3, r3
   2495e:	4a17      	ldr	r2, [pc, #92]	; (249bc <connect+0x108>)
   24960:	011b      	lsls	r3, r3, #4
   24962:	18d3      	adds	r3, r2, r3
   24964:	3306      	adds	r3, #6
   24966:	881b      	ldrh	r3, [r3, #0]
   24968:	b29a      	uxth	r2, r3
   2496a:	2308      	movs	r3, #8
   2496c:	18fb      	adds	r3, r7, r3
   2496e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   24970:	2317      	movs	r3, #23
   24972:	18fc      	adds	r4, r7, r3
   24974:	2308      	movs	r3, #8
   24976:	18fa      	adds	r2, r7, r3
   24978:	2316      	movs	r3, #22
   2497a:	18fb      	adds	r3, r7, r3
   2497c:	7819      	ldrb	r1, [r3, #0]
   2497e:	2300      	movs	r3, #0
   24980:	9302      	str	r3, [sp, #8]
   24982:	2300      	movs	r3, #0
   24984:	9301      	str	r3, [sp, #4]
   24986:	2300      	movs	r3, #0
   24988:	9300      	str	r3, [sp, #0]
   2498a:	230c      	movs	r3, #12
   2498c:	2002      	movs	r0, #2
   2498e:	4d0d      	ldr	r5, [pc, #52]	; (249c4 <connect+0x110>)
   24990:	47a8      	blx	r5
   24992:	0003      	movs	r3, r0
   24994:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24996:	2317      	movs	r3, #23
   24998:	18fb      	adds	r3, r7, r3
   2499a:	781b      	ldrb	r3, [r3, #0]
   2499c:	b25b      	sxtb	r3, r3
   2499e:	2b00      	cmp	r3, #0
   249a0:	d003      	beq.n	249aa <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   249a2:	2317      	movs	r3, #23
   249a4:	18fb      	adds	r3, r7, r3
   249a6:	22f7      	movs	r2, #247	; 0xf7
   249a8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   249aa:	2317      	movs	r3, #23
   249ac:	18fb      	adds	r3, r7, r3
   249ae:	781b      	ldrb	r3, [r3, #0]
   249b0:	b25b      	sxtb	r3, r3
}
   249b2:	0018      	movs	r0, r3
   249b4:	46bd      	mov	sp, r7
   249b6:	b006      	add	sp, #24
   249b8:	bdb0      	pop	{r4, r5, r7, pc}
   249ba:	46c0      	nop			; (mov r8, r8)
   249bc:	20005ac8 	.word	0x20005ac8
   249c0:	0001fcd5 	.word	0x0001fcd5
   249c4:	0001ff71 	.word	0x0001ff71

000249c8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   249c8:	b590      	push	{r4, r7, lr}
   249ca:	b08f      	sub	sp, #60	; 0x3c
   249cc:	af04      	add	r7, sp, #16
   249ce:	0004      	movs	r4, r0
   249d0:	60b9      	str	r1, [r7, #8]
   249d2:	0010      	movs	r0, r2
   249d4:	0019      	movs	r1, r3
   249d6:	230f      	movs	r3, #15
   249d8:	18fb      	adds	r3, r7, r3
   249da:	1c22      	adds	r2, r4, #0
   249dc:	701a      	strb	r2, [r3, #0]
   249de:	230c      	movs	r3, #12
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	1c02      	adds	r2, r0, #0
   249e4:	801a      	strh	r2, [r3, #0]
   249e6:	1dbb      	adds	r3, r7, #6
   249e8:	1c0a      	adds	r2, r1, #0
   249ea:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   249ec:	2326      	movs	r3, #38	; 0x26
   249ee:	18fb      	adds	r3, r7, r3
   249f0:	2206      	movs	r2, #6
   249f2:	4252      	negs	r2, r2
   249f4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   249f6:	230f      	movs	r3, #15
   249f8:	18fb      	adds	r3, r7, r3
   249fa:	781b      	ldrb	r3, [r3, #0]
   249fc:	2b7f      	cmp	r3, #127	; 0x7f
   249fe:	d900      	bls.n	24a02 <send+0x3a>
   24a00:	e087      	b.n	24b12 <send+0x14a>
   24a02:	68bb      	ldr	r3, [r7, #8]
   24a04:	2b00      	cmp	r3, #0
   24a06:	d100      	bne.n	24a0a <send+0x42>
   24a08:	e083      	b.n	24b12 <send+0x14a>
   24a0a:	230c      	movs	r3, #12
   24a0c:	18fb      	adds	r3, r7, r3
   24a0e:	881a      	ldrh	r2, [r3, #0]
   24a10:	23af      	movs	r3, #175	; 0xaf
   24a12:	00db      	lsls	r3, r3, #3
   24a14:	429a      	cmp	r2, r3
   24a16:	d900      	bls.n	24a1a <send+0x52>
   24a18:	e07b      	b.n	24b12 <send+0x14a>
   24a1a:	230f      	movs	r3, #15
   24a1c:	18fb      	adds	r3, r7, r3
   24a1e:	781b      	ldrb	r3, [r3, #0]
   24a20:	b25b      	sxtb	r3, r3
   24a22:	4a40      	ldr	r2, [pc, #256]	; (24b24 <send+0x15c>)
   24a24:	011b      	lsls	r3, r3, #4
   24a26:	18d3      	adds	r3, r2, r3
   24a28:	330a      	adds	r3, #10
   24a2a:	781b      	ldrb	r3, [r3, #0]
   24a2c:	b2db      	uxtb	r3, r3
   24a2e:	2b01      	cmp	r3, #1
   24a30:	d16f      	bne.n	24b12 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   24a32:	2323      	movs	r3, #35	; 0x23
   24a34:	18fb      	adds	r3, r7, r3
   24a36:	2245      	movs	r2, #69	; 0x45
   24a38:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   24a3a:	2324      	movs	r3, #36	; 0x24
   24a3c:	18fb      	adds	r3, r7, r3
   24a3e:	2250      	movs	r2, #80	; 0x50
   24a40:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   24a42:	2310      	movs	r3, #16
   24a44:	18fb      	adds	r3, r7, r3
   24a46:	220f      	movs	r2, #15
   24a48:	18ba      	adds	r2, r7, r2
   24a4a:	7812      	ldrb	r2, [r2, #0]
   24a4c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   24a4e:	2310      	movs	r3, #16
   24a50:	18fb      	adds	r3, r7, r3
   24a52:	220c      	movs	r2, #12
   24a54:	18ba      	adds	r2, r7, r2
   24a56:	8812      	ldrh	r2, [r2, #0]
   24a58:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   24a5a:	230f      	movs	r3, #15
   24a5c:	18fb      	adds	r3, r7, r3
   24a5e:	781b      	ldrb	r3, [r3, #0]
   24a60:	b25b      	sxtb	r3, r3
   24a62:	4a30      	ldr	r2, [pc, #192]	; (24b24 <send+0x15c>)
   24a64:	011b      	lsls	r3, r3, #4
   24a66:	18d3      	adds	r3, r2, r3
   24a68:	3306      	adds	r3, #6
   24a6a:	881b      	ldrh	r3, [r3, #0]
   24a6c:	b29a      	uxth	r2, r3
   24a6e:	2310      	movs	r3, #16
   24a70:	18fb      	adds	r3, r7, r3
   24a72:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   24a74:	230f      	movs	r3, #15
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	781b      	ldrb	r3, [r3, #0]
   24a7a:	b25b      	sxtb	r3, r3
   24a7c:	2b06      	cmp	r3, #6
   24a7e:	dd03      	ble.n	24a88 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   24a80:	2324      	movs	r3, #36	; 0x24
   24a82:	18fb      	adds	r3, r7, r3
   24a84:	2244      	movs	r2, #68	; 0x44
   24a86:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24a88:	230f      	movs	r3, #15
   24a8a:	18fb      	adds	r3, r7, r3
   24a8c:	781b      	ldrb	r3, [r3, #0]
   24a8e:	b25b      	sxtb	r3, r3
   24a90:	4a24      	ldr	r2, [pc, #144]	; (24b24 <send+0x15c>)
   24a92:	011b      	lsls	r3, r3, #4
   24a94:	18d3      	adds	r3, r2, r3
   24a96:	330b      	adds	r3, #11
   24a98:	781b      	ldrb	r3, [r3, #0]
   24a9a:	b2db      	uxtb	r3, r3
   24a9c:	001a      	movs	r2, r3
   24a9e:	2301      	movs	r3, #1
   24aa0:	4013      	ands	r3, r2
   24aa2:	d00f      	beq.n	24ac4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   24aa4:	2323      	movs	r3, #35	; 0x23
   24aa6:	18fb      	adds	r3, r7, r3
   24aa8:	224c      	movs	r2, #76	; 0x4c
   24aaa:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   24aac:	230f      	movs	r3, #15
   24aae:	18fb      	adds	r3, r7, r3
   24ab0:	2200      	movs	r2, #0
   24ab2:	569a      	ldrsb	r2, [r3, r2]
   24ab4:	2324      	movs	r3, #36	; 0x24
   24ab6:	18fb      	adds	r3, r7, r3
   24ab8:	491a      	ldr	r1, [pc, #104]	; (24b24 <send+0x15c>)
   24aba:	0112      	lsls	r2, r2, #4
   24abc:	188a      	adds	r2, r1, r2
   24abe:	3208      	adds	r2, #8
   24ac0:	8812      	ldrh	r2, [r2, #0]
   24ac2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   24ac4:	2323      	movs	r3, #35	; 0x23
   24ac6:	18fb      	adds	r3, r7, r3
   24ac8:	781b      	ldrb	r3, [r3, #0]
   24aca:	2280      	movs	r2, #128	; 0x80
   24acc:	4252      	negs	r2, r2
   24ace:	4313      	orrs	r3, r2
   24ad0:	b2d9      	uxtb	r1, r3
   24ad2:	2310      	movs	r3, #16
   24ad4:	18fa      	adds	r2, r7, r3
   24ad6:	2324      	movs	r3, #36	; 0x24
   24ad8:	18fb      	adds	r3, r7, r3
   24ada:	881b      	ldrh	r3, [r3, #0]
   24adc:	9302      	str	r3, [sp, #8]
   24ade:	230c      	movs	r3, #12
   24ae0:	18fb      	adds	r3, r7, r3
   24ae2:	881b      	ldrh	r3, [r3, #0]
   24ae4:	9301      	str	r3, [sp, #4]
   24ae6:	68bb      	ldr	r3, [r7, #8]
   24ae8:	9300      	str	r3, [sp, #0]
   24aea:	2310      	movs	r3, #16
   24aec:	2002      	movs	r0, #2
   24aee:	4c0e      	ldr	r4, [pc, #56]	; (24b28 <send+0x160>)
   24af0:	47a0      	blx	r4
   24af2:	0003      	movs	r3, r0
   24af4:	001a      	movs	r2, r3
   24af6:	2326      	movs	r3, #38	; 0x26
   24af8:	18fb      	adds	r3, r7, r3
   24afa:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   24afc:	2326      	movs	r3, #38	; 0x26
   24afe:	18fb      	adds	r3, r7, r3
   24b00:	2200      	movs	r2, #0
   24b02:	5e9b      	ldrsh	r3, [r3, r2]
   24b04:	2b00      	cmp	r3, #0
   24b06:	d004      	beq.n	24b12 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   24b08:	2326      	movs	r3, #38	; 0x26
   24b0a:	18fb      	adds	r3, r7, r3
   24b0c:	220e      	movs	r2, #14
   24b0e:	4252      	negs	r2, r2
   24b10:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24b12:	2326      	movs	r3, #38	; 0x26
   24b14:	18fb      	adds	r3, r7, r3
   24b16:	2200      	movs	r2, #0
   24b18:	5e9b      	ldrsh	r3, [r3, r2]
}
   24b1a:	0018      	movs	r0, r3
   24b1c:	46bd      	mov	sp, r7
   24b1e:	b00b      	add	sp, #44	; 0x2c
   24b20:	bd90      	pop	{r4, r7, pc}
   24b22:	46c0      	nop			; (mov r8, r8)
   24b24:	20005ac8 	.word	0x20005ac8
   24b28:	0001ff71 	.word	0x0001ff71

00024b2c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   24b2c:	b590      	push	{r4, r7, lr}
   24b2e:	b08d      	sub	sp, #52	; 0x34
   24b30:	af04      	add	r7, sp, #16
   24b32:	60b9      	str	r1, [r7, #8]
   24b34:	0011      	movs	r1, r2
   24b36:	607b      	str	r3, [r7, #4]
   24b38:	230f      	movs	r3, #15
   24b3a:	18fb      	adds	r3, r7, r3
   24b3c:	1c02      	adds	r2, r0, #0
   24b3e:	701a      	strb	r2, [r3, #0]
   24b40:	230c      	movs	r3, #12
   24b42:	18fb      	adds	r3, r7, r3
   24b44:	1c0a      	adds	r2, r1, #0
   24b46:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24b48:	231e      	movs	r3, #30
   24b4a:	18fb      	adds	r3, r7, r3
   24b4c:	2206      	movs	r2, #6
   24b4e:	4252      	negs	r2, r2
   24b50:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   24b52:	230f      	movs	r3, #15
   24b54:	18fb      	adds	r3, r7, r3
   24b56:	781b      	ldrb	r3, [r3, #0]
   24b58:	2b7f      	cmp	r3, #127	; 0x7f
   24b5a:	d900      	bls.n	24b5e <recv+0x32>
   24b5c:	e099      	b.n	24c92 <recv+0x166>
   24b5e:	68bb      	ldr	r3, [r7, #8]
   24b60:	2b00      	cmp	r3, #0
   24b62:	d100      	bne.n	24b66 <recv+0x3a>
   24b64:	e095      	b.n	24c92 <recv+0x166>
   24b66:	230c      	movs	r3, #12
   24b68:	18fb      	adds	r3, r7, r3
   24b6a:	881b      	ldrh	r3, [r3, #0]
   24b6c:	2b00      	cmp	r3, #0
   24b6e:	d100      	bne.n	24b72 <recv+0x46>
   24b70:	e08f      	b.n	24c92 <recv+0x166>
   24b72:	230f      	movs	r3, #15
   24b74:	18fb      	adds	r3, r7, r3
   24b76:	781b      	ldrb	r3, [r3, #0]
   24b78:	b25b      	sxtb	r3, r3
   24b7a:	4a4a      	ldr	r2, [pc, #296]	; (24ca4 <recv+0x178>)
   24b7c:	011b      	lsls	r3, r3, #4
   24b7e:	18d3      	adds	r3, r2, r3
   24b80:	330a      	adds	r3, #10
   24b82:	781b      	ldrb	r3, [r3, #0]
   24b84:	b2db      	uxtb	r3, r3
   24b86:	2b01      	cmp	r3, #1
   24b88:	d000      	beq.n	24b8c <recv+0x60>
   24b8a:	e082      	b.n	24c92 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   24b8c:	231e      	movs	r3, #30
   24b8e:	18fb      	adds	r3, r7, r3
   24b90:	2200      	movs	r2, #0
   24b92:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   24b94:	230f      	movs	r3, #15
   24b96:	18fb      	adds	r3, r7, r3
   24b98:	2200      	movs	r2, #0
   24b9a:	569a      	ldrsb	r2, [r3, r2]
   24b9c:	4b41      	ldr	r3, [pc, #260]	; (24ca4 <recv+0x178>)
   24b9e:	0112      	lsls	r2, r2, #4
   24ba0:	68b9      	ldr	r1, [r7, #8]
   24ba2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   24ba4:	230f      	movs	r3, #15
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	781b      	ldrb	r3, [r3, #0]
   24baa:	b25b      	sxtb	r3, r3
   24bac:	4a3d      	ldr	r2, [pc, #244]	; (24ca4 <recv+0x178>)
   24bae:	011b      	lsls	r3, r3, #4
   24bb0:	18d3      	adds	r3, r2, r3
   24bb2:	3304      	adds	r3, #4
   24bb4:	220c      	movs	r2, #12
   24bb6:	18ba      	adds	r2, r7, r2
   24bb8:	8812      	ldrh	r2, [r2, #0]
   24bba:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   24bbc:	230f      	movs	r3, #15
   24bbe:	18fb      	adds	r3, r7, r3
   24bc0:	781b      	ldrb	r3, [r3, #0]
   24bc2:	b25b      	sxtb	r3, r3
   24bc4:	4a37      	ldr	r2, [pc, #220]	; (24ca4 <recv+0x178>)
   24bc6:	011b      	lsls	r3, r3, #4
   24bc8:	18d3      	adds	r3, r2, r3
   24bca:	330c      	adds	r3, #12
   24bcc:	781b      	ldrb	r3, [r3, #0]
   24bce:	b2db      	uxtb	r3, r3
   24bd0:	2b00      	cmp	r3, #0
   24bd2:	d15e      	bne.n	24c92 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   24bd4:	231d      	movs	r3, #29
   24bd6:	18fb      	adds	r3, r7, r3
   24bd8:	2246      	movs	r2, #70	; 0x46
   24bda:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   24bdc:	230f      	movs	r3, #15
   24bde:	18fb      	adds	r3, r7, r3
   24be0:	781b      	ldrb	r3, [r3, #0]
   24be2:	b25b      	sxtb	r3, r3
   24be4:	4a2f      	ldr	r2, [pc, #188]	; (24ca4 <recv+0x178>)
   24be6:	011b      	lsls	r3, r3, #4
   24be8:	18d3      	adds	r3, r2, r3
   24bea:	330c      	adds	r3, #12
   24bec:	2201      	movs	r2, #1
   24bee:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24bf0:	230f      	movs	r3, #15
   24bf2:	18fb      	adds	r3, r7, r3
   24bf4:	781b      	ldrb	r3, [r3, #0]
   24bf6:	b25b      	sxtb	r3, r3
   24bf8:	4a2a      	ldr	r2, [pc, #168]	; (24ca4 <recv+0x178>)
   24bfa:	011b      	lsls	r3, r3, #4
   24bfc:	18d3      	adds	r3, r2, r3
   24bfe:	330b      	adds	r3, #11
   24c00:	781b      	ldrb	r3, [r3, #0]
   24c02:	b2db      	uxtb	r3, r3
   24c04:	001a      	movs	r2, r3
   24c06:	2301      	movs	r3, #1
   24c08:	4013      	ands	r3, r2
   24c0a:	d003      	beq.n	24c14 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   24c0c:	231d      	movs	r3, #29
   24c0e:	18fb      	adds	r3, r7, r3
   24c10:	224d      	movs	r2, #77	; 0x4d
   24c12:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24c14:	687b      	ldr	r3, [r7, #4]
   24c16:	2b00      	cmp	r3, #0
   24c18:	d105      	bne.n	24c26 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   24c1a:	2314      	movs	r3, #20
   24c1c:	18fb      	adds	r3, r7, r3
   24c1e:	2201      	movs	r2, #1
   24c20:	4252      	negs	r2, r2
   24c22:	601a      	str	r2, [r3, #0]
   24c24:	e003      	b.n	24c2e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   24c26:	2314      	movs	r3, #20
   24c28:	18fb      	adds	r3, r7, r3
   24c2a:	687a      	ldr	r2, [r7, #4]
   24c2c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   24c2e:	2314      	movs	r3, #20
   24c30:	18fb      	adds	r3, r7, r3
   24c32:	220f      	movs	r2, #15
   24c34:	18ba      	adds	r2, r7, r2
   24c36:	7812      	ldrb	r2, [r2, #0]
   24c38:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   24c3a:	230f      	movs	r3, #15
   24c3c:	18fb      	adds	r3, r7, r3
   24c3e:	781b      	ldrb	r3, [r3, #0]
   24c40:	b25b      	sxtb	r3, r3
   24c42:	4a18      	ldr	r2, [pc, #96]	; (24ca4 <recv+0x178>)
   24c44:	011b      	lsls	r3, r3, #4
   24c46:	18d3      	adds	r3, r2, r3
   24c48:	3306      	adds	r3, #6
   24c4a:	881b      	ldrh	r3, [r3, #0]
   24c4c:	b29a      	uxth	r2, r3
   24c4e:	2314      	movs	r3, #20
   24c50:	18fb      	adds	r3, r7, r3
   24c52:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   24c54:	2314      	movs	r3, #20
   24c56:	18fa      	adds	r2, r7, r3
   24c58:	231d      	movs	r3, #29
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	7819      	ldrb	r1, [r3, #0]
   24c5e:	2300      	movs	r3, #0
   24c60:	9302      	str	r3, [sp, #8]
   24c62:	2300      	movs	r3, #0
   24c64:	9301      	str	r3, [sp, #4]
   24c66:	2300      	movs	r3, #0
   24c68:	9300      	str	r3, [sp, #0]
   24c6a:	2308      	movs	r3, #8
   24c6c:	2002      	movs	r0, #2
   24c6e:	4c0e      	ldr	r4, [pc, #56]	; (24ca8 <recv+0x17c>)
   24c70:	47a0      	blx	r4
   24c72:	0003      	movs	r3, r0
   24c74:	001a      	movs	r2, r3
   24c76:	231e      	movs	r3, #30
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   24c7c:	231e      	movs	r3, #30
   24c7e:	18fb      	adds	r3, r7, r3
   24c80:	2200      	movs	r2, #0
   24c82:	5e9b      	ldrsh	r3, [r3, r2]
   24c84:	2b00      	cmp	r3, #0
   24c86:	d004      	beq.n	24c92 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   24c88:	231e      	movs	r3, #30
   24c8a:	18fb      	adds	r3, r7, r3
   24c8c:	220e      	movs	r2, #14
   24c8e:	4252      	negs	r2, r2
   24c90:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   24c92:	231e      	movs	r3, #30
   24c94:	18fb      	adds	r3, r7, r3
   24c96:	2200      	movs	r2, #0
   24c98:	5e9b      	ldrsh	r3, [r3, r2]
}
   24c9a:	0018      	movs	r0, r3
   24c9c:	46bd      	mov	sp, r7
   24c9e:	b009      	add	sp, #36	; 0x24
   24ca0:	bd90      	pop	{r4, r7, pc}
   24ca2:	46c0      	nop			; (mov r8, r8)
   24ca4:	20005ac8 	.word	0x20005ac8
   24ca8:	0001ff71 	.word	0x0001ff71

00024cac <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   24cac:	b5b0      	push	{r4, r5, r7, lr}
   24cae:	b088      	sub	sp, #32
   24cb0:	af04      	add	r7, sp, #16
   24cb2:	0002      	movs	r2, r0
   24cb4:	1dfb      	adds	r3, r7, #7
   24cb6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24cb8:	230f      	movs	r3, #15
   24cba:	18fb      	adds	r3, r7, r3
   24cbc:	22fa      	movs	r2, #250	; 0xfa
   24cbe:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   24cc0:	4b43      	ldr	r3, [pc, #268]	; (24dd0 <close+0x124>)
   24cc2:	0018      	movs	r0, r3
   24cc4:	4b43      	ldr	r3, [pc, #268]	; (24dd4 <close+0x128>)
   24cc6:	4798      	blx	r3
   24cc8:	1dfb      	adds	r3, r7, #7
   24cca:	2200      	movs	r2, #0
   24ccc:	569a      	ldrsb	r2, [r3, r2]
   24cce:	4b42      	ldr	r3, [pc, #264]	; (24dd8 <close+0x12c>)
   24cd0:	0011      	movs	r1, r2
   24cd2:	0018      	movs	r0, r3
   24cd4:	4b3f      	ldr	r3, [pc, #252]	; (24dd4 <close+0x128>)
   24cd6:	4798      	blx	r3
   24cd8:	4b40      	ldr	r3, [pc, #256]	; (24ddc <close+0x130>)
   24cda:	0018      	movs	r0, r3
   24cdc:	4b3d      	ldr	r3, [pc, #244]	; (24dd4 <close+0x128>)
   24cde:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   24ce0:	1dfb      	adds	r3, r7, #7
   24ce2:	781b      	ldrb	r3, [r3, #0]
   24ce4:	2b7f      	cmp	r3, #127	; 0x7f
   24ce6:	d86a      	bhi.n	24dbe <close+0x112>
   24ce8:	1dfb      	adds	r3, r7, #7
   24cea:	781b      	ldrb	r3, [r3, #0]
   24cec:	b25b      	sxtb	r3, r3
   24cee:	4a3c      	ldr	r2, [pc, #240]	; (24de0 <close+0x134>)
   24cf0:	011b      	lsls	r3, r3, #4
   24cf2:	18d3      	adds	r3, r2, r3
   24cf4:	330a      	adds	r3, #10
   24cf6:	781b      	ldrb	r3, [r3, #0]
   24cf8:	b2db      	uxtb	r3, r3
   24cfa:	2b01      	cmp	r3, #1
   24cfc:	d15f      	bne.n	24dbe <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   24cfe:	230e      	movs	r3, #14
   24d00:	18fb      	adds	r3, r7, r3
   24d02:	2249      	movs	r2, #73	; 0x49
   24d04:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   24d06:	2308      	movs	r3, #8
   24d08:	18fb      	adds	r3, r7, r3
   24d0a:	1dfa      	adds	r2, r7, #7
   24d0c:	7812      	ldrb	r2, [r2, #0]
   24d0e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   24d10:	1dfb      	adds	r3, r7, #7
   24d12:	781b      	ldrb	r3, [r3, #0]
   24d14:	b25b      	sxtb	r3, r3
   24d16:	4a32      	ldr	r2, [pc, #200]	; (24de0 <close+0x134>)
   24d18:	011b      	lsls	r3, r3, #4
   24d1a:	18d3      	adds	r3, r2, r3
   24d1c:	3306      	adds	r3, #6
   24d1e:	881b      	ldrh	r3, [r3, #0]
   24d20:	b29a      	uxth	r2, r3
   24d22:	2308      	movs	r3, #8
   24d24:	18fb      	adds	r3, r7, r3
   24d26:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   24d28:	1dfb      	adds	r3, r7, #7
   24d2a:	781b      	ldrb	r3, [r3, #0]
   24d2c:	b25b      	sxtb	r3, r3
   24d2e:	4a2c      	ldr	r2, [pc, #176]	; (24de0 <close+0x134>)
   24d30:	011b      	lsls	r3, r3, #4
   24d32:	18d3      	adds	r3, r2, r3
   24d34:	330a      	adds	r3, #10
   24d36:	2200      	movs	r2, #0
   24d38:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   24d3a:	1dfb      	adds	r3, r7, #7
   24d3c:	781b      	ldrb	r3, [r3, #0]
   24d3e:	b25b      	sxtb	r3, r3
   24d40:	4a27      	ldr	r2, [pc, #156]	; (24de0 <close+0x134>)
   24d42:	011b      	lsls	r3, r3, #4
   24d44:	18d3      	adds	r3, r2, r3
   24d46:	3306      	adds	r3, #6
   24d48:	2200      	movs	r2, #0
   24d4a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24d4c:	1dfb      	adds	r3, r7, #7
   24d4e:	781b      	ldrb	r3, [r3, #0]
   24d50:	b25b      	sxtb	r3, r3
   24d52:	4a23      	ldr	r2, [pc, #140]	; (24de0 <close+0x134>)
   24d54:	011b      	lsls	r3, r3, #4
   24d56:	18d3      	adds	r3, r2, r3
   24d58:	330b      	adds	r3, #11
   24d5a:	781b      	ldrb	r3, [r3, #0]
   24d5c:	b2db      	uxtb	r3, r3
   24d5e:	001a      	movs	r2, r3
   24d60:	2301      	movs	r3, #1
   24d62:	4013      	ands	r3, r2
   24d64:	d003      	beq.n	24d6e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   24d66:	230e      	movs	r3, #14
   24d68:	18fb      	adds	r3, r7, r3
   24d6a:	224e      	movs	r2, #78	; 0x4e
   24d6c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   24d6e:	230f      	movs	r3, #15
   24d70:	18fc      	adds	r4, r7, r3
   24d72:	2308      	movs	r3, #8
   24d74:	18fa      	adds	r2, r7, r3
   24d76:	230e      	movs	r3, #14
   24d78:	18fb      	adds	r3, r7, r3
   24d7a:	7819      	ldrb	r1, [r3, #0]
   24d7c:	2300      	movs	r3, #0
   24d7e:	9302      	str	r3, [sp, #8]
   24d80:	2300      	movs	r3, #0
   24d82:	9301      	str	r3, [sp, #4]
   24d84:	2300      	movs	r3, #0
   24d86:	9300      	str	r3, [sp, #0]
   24d88:	2304      	movs	r3, #4
   24d8a:	2002      	movs	r0, #2
   24d8c:	4d15      	ldr	r5, [pc, #84]	; (24de4 <close+0x138>)
   24d8e:	47a8      	blx	r5
   24d90:	0003      	movs	r3, r0
   24d92:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24d94:	230f      	movs	r3, #15
   24d96:	18fb      	adds	r3, r7, r3
   24d98:	781b      	ldrb	r3, [r3, #0]
   24d9a:	b25b      	sxtb	r3, r3
   24d9c:	2b00      	cmp	r3, #0
   24d9e:	d003      	beq.n	24da8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   24da0:	230f      	movs	r3, #15
   24da2:	18fb      	adds	r3, r7, r3
   24da4:	22f7      	movs	r2, #247	; 0xf7
   24da6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   24da8:	1dfb      	adds	r3, r7, #7
   24daa:	781b      	ldrb	r3, [r3, #0]
   24dac:	b25b      	sxtb	r3, r3
   24dae:	011a      	lsls	r2, r3, #4
   24db0:	4b0b      	ldr	r3, [pc, #44]	; (24de0 <close+0x134>)
   24db2:	18d3      	adds	r3, r2, r3
   24db4:	2210      	movs	r2, #16
   24db6:	2100      	movs	r1, #0
   24db8:	0018      	movs	r0, r3
   24dba:	4b0b      	ldr	r3, [pc, #44]	; (24de8 <close+0x13c>)
   24dbc:	4798      	blx	r3
	}
	return s8Ret;
   24dbe:	230f      	movs	r3, #15
   24dc0:	18fb      	adds	r3, r7, r3
   24dc2:	781b      	ldrb	r3, [r3, #0]
   24dc4:	b25b      	sxtb	r3, r3
}
   24dc6:	0018      	movs	r0, r3
   24dc8:	46bd      	mov	sp, r7
   24dca:	b004      	add	sp, #16
   24dcc:	bdb0      	pop	{r4, r5, r7, pc}
   24dce:	46c0      	nop			; (mov r8, r8)
   24dd0:	00038ea0 	.word	0x00038ea0
   24dd4:	0001cf79 	.word	0x0001cf79
   24dd8:	00038ee0 	.word	0x00038ee0
   24ddc:	00038ec0 	.word	0x00038ec0
   24de0:	20005ac8 	.word	0x20005ac8
   24de4:	0001ff71 	.word	0x0001ff71
   24de8:	0001fd11 	.word	0x0001fd11

00024dec <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   24dec:	b580      	push	{r7, lr}
   24dee:	b086      	sub	sp, #24
   24df0:	af00      	add	r7, sp, #0
   24df2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   24df4:	2300      	movs	r3, #0
   24df6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   24df8:	2317      	movs	r3, #23
   24dfa:	18fb      	adds	r3, r7, r3
   24dfc:	2200      	movs	r2, #0
   24dfe:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   24e00:	2316      	movs	r3, #22
   24e02:	18fb      	adds	r3, r7, r3
   24e04:	2200      	movs	r2, #0
   24e06:	701a      	strb	r2, [r3, #0]
   24e08:	e060      	b.n	24ecc <nmi_inet_addr+0xe0>
	{
		j = 0;
   24e0a:	2315      	movs	r3, #21
   24e0c:	18fb      	adds	r3, r7, r3
   24e0e:	2200      	movs	r2, #0
   24e10:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   24e12:	2314      	movs	r3, #20
   24e14:	18fb      	adds	r3, r7, r3
   24e16:	687a      	ldr	r2, [r7, #4]
   24e18:	7812      	ldrb	r2, [r2, #0]
   24e1a:	701a      	strb	r2, [r3, #0]
			++j;
   24e1c:	2315      	movs	r3, #21
   24e1e:	18fb      	adds	r3, r7, r3
   24e20:	2215      	movs	r2, #21
   24e22:	18ba      	adds	r2, r7, r2
   24e24:	7812      	ldrb	r2, [r2, #0]
   24e26:	3201      	adds	r2, #1
   24e28:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   24e2a:	2315      	movs	r3, #21
   24e2c:	18fb      	adds	r3, r7, r3
   24e2e:	781b      	ldrb	r3, [r3, #0]
   24e30:	2b04      	cmp	r3, #4
   24e32:	d901      	bls.n	24e38 <nmi_inet_addr+0x4c>
			{
				return 0;
   24e34:	2300      	movs	r3, #0
   24e36:	e057      	b.n	24ee8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   24e38:	2314      	movs	r3, #20
   24e3a:	18fb      	adds	r3, r7, r3
   24e3c:	781b      	ldrb	r3, [r3, #0]
   24e3e:	2b2e      	cmp	r3, #46	; 0x2e
   24e40:	d004      	beq.n	24e4c <nmi_inet_addr+0x60>
   24e42:	2314      	movs	r3, #20
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	781b      	ldrb	r3, [r3, #0]
   24e48:	2b00      	cmp	r3, #0
   24e4a:	d10d      	bne.n	24e68 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   24e4c:	2316      	movs	r3, #22
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	781b      	ldrb	r3, [r3, #0]
   24e52:	220c      	movs	r2, #12
   24e54:	18ba      	adds	r2, r7, r2
   24e56:	2117      	movs	r1, #23
   24e58:	1879      	adds	r1, r7, r1
   24e5a:	7809      	ldrb	r1, [r1, #0]
   24e5c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   24e5e:	2317      	movs	r3, #23
   24e60:	18fb      	adds	r3, r7, r3
   24e62:	2200      	movs	r2, #0
   24e64:	701a      	strb	r2, [r3, #0]
   24e66:	e01d      	b.n	24ea4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   24e68:	2314      	movs	r3, #20
   24e6a:	18fb      	adds	r3, r7, r3
   24e6c:	781b      	ldrb	r3, [r3, #0]
   24e6e:	2b2f      	cmp	r3, #47	; 0x2f
   24e70:	d916      	bls.n	24ea0 <nmi_inet_addr+0xb4>
   24e72:	2314      	movs	r3, #20
   24e74:	18fb      	adds	r3, r7, r3
   24e76:	781b      	ldrb	r3, [r3, #0]
   24e78:	2b39      	cmp	r3, #57	; 0x39
   24e7a:	d811      	bhi.n	24ea0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   24e7c:	2317      	movs	r3, #23
   24e7e:	18fb      	adds	r3, r7, r3
   24e80:	781b      	ldrb	r3, [r3, #0]
   24e82:	1c1a      	adds	r2, r3, #0
   24e84:	0092      	lsls	r2, r2, #2
   24e86:	18d3      	adds	r3, r2, r3
   24e88:	18db      	adds	r3, r3, r3
   24e8a:	b2da      	uxtb	r2, r3
   24e8c:	2314      	movs	r3, #20
   24e8e:	18fb      	adds	r3, r7, r3
   24e90:	781b      	ldrb	r3, [r3, #0]
   24e92:	18d3      	adds	r3, r2, r3
   24e94:	b2da      	uxtb	r2, r3
   24e96:	2317      	movs	r3, #23
   24e98:	18fb      	adds	r3, r7, r3
   24e9a:	3a30      	subs	r2, #48	; 0x30
   24e9c:	701a      	strb	r2, [r3, #0]
   24e9e:	e001      	b.n	24ea4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   24ea0:	2300      	movs	r3, #0
   24ea2:	e021      	b.n	24ee8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   24ea4:	687b      	ldr	r3, [r7, #4]
   24ea6:	3301      	adds	r3, #1
   24ea8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   24eaa:	2314      	movs	r3, #20
   24eac:	18fb      	adds	r3, r7, r3
   24eae:	781b      	ldrb	r3, [r3, #0]
   24eb0:	2b2e      	cmp	r3, #46	; 0x2e
   24eb2:	d004      	beq.n	24ebe <nmi_inet_addr+0xd2>
   24eb4:	2314      	movs	r3, #20
   24eb6:	18fb      	adds	r3, r7, r3
   24eb8:	781b      	ldrb	r3, [r3, #0]
   24eba:	2b00      	cmp	r3, #0
   24ebc:	d1a9      	bne.n	24e12 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   24ebe:	2316      	movs	r3, #22
   24ec0:	18fb      	adds	r3, r7, r3
   24ec2:	2216      	movs	r2, #22
   24ec4:	18ba      	adds	r2, r7, r2
   24ec6:	7812      	ldrb	r2, [r2, #0]
   24ec8:	3201      	adds	r2, #1
   24eca:	701a      	strb	r2, [r3, #0]
   24ecc:	2316      	movs	r3, #22
   24ece:	18fb      	adds	r3, r7, r3
   24ed0:	781b      	ldrb	r3, [r3, #0]
   24ed2:	2b03      	cmp	r3, #3
   24ed4:	d999      	bls.n	24e0a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   24ed6:	230c      	movs	r3, #12
   24ed8:	18f9      	adds	r1, r7, r3
   24eda:	2310      	movs	r3, #16
   24edc:	18fb      	adds	r3, r7, r3
   24ede:	2204      	movs	r2, #4
   24ee0:	0018      	movs	r0, r3
   24ee2:	4b03      	ldr	r3, [pc, #12]	; (24ef0 <nmi_inet_addr+0x104>)
   24ee4:	4798      	blx	r3
	return u32IP;
   24ee6:	693b      	ldr	r3, [r7, #16]
}
   24ee8:	0018      	movs	r0, r3
   24eea:	46bd      	mov	sp, r7
   24eec:	b006      	add	sp, #24
   24eee:	bd80      	pop	{r7, pc}
   24ef0:	0001fcd5 	.word	0x0001fcd5

00024ef4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   24ef4:	b5b0      	push	{r4, r5, r7, lr}
   24ef6:	b088      	sub	sp, #32
   24ef8:	af04      	add	r7, sp, #16
   24efa:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   24efc:	230f      	movs	r3, #15
   24efe:	18fb      	adds	r3, r7, r3
   24f00:	22fa      	movs	r2, #250	; 0xfa
   24f02:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   24f04:	687b      	ldr	r3, [r7, #4]
   24f06:	0018      	movs	r0, r3
   24f08:	4b14      	ldr	r3, [pc, #80]	; (24f5c <gethostbyname+0x68>)
   24f0a:	4798      	blx	r3
   24f0c:	0003      	movs	r3, r0
   24f0e:	001a      	movs	r2, r3
   24f10:	230e      	movs	r3, #14
   24f12:	18fb      	adds	r3, r7, r3
   24f14:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   24f16:	230e      	movs	r3, #14
   24f18:	18fb      	adds	r3, r7, r3
   24f1a:	781b      	ldrb	r3, [r3, #0]
   24f1c:	2b40      	cmp	r3, #64	; 0x40
   24f1e:	d815      	bhi.n	24f4c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   24f20:	230e      	movs	r3, #14
   24f22:	18fb      	adds	r3, r7, r3
   24f24:	781b      	ldrb	r3, [r3, #0]
   24f26:	b29b      	uxth	r3, r3
   24f28:	3301      	adds	r3, #1
   24f2a:	b299      	uxth	r1, r3
   24f2c:	230f      	movs	r3, #15
   24f2e:	18fc      	adds	r4, r7, r3
   24f30:	687a      	ldr	r2, [r7, #4]
   24f32:	2300      	movs	r3, #0
   24f34:	9302      	str	r3, [sp, #8]
   24f36:	2300      	movs	r3, #0
   24f38:	9301      	str	r3, [sp, #4]
   24f3a:	2300      	movs	r3, #0
   24f3c:	9300      	str	r3, [sp, #0]
   24f3e:	000b      	movs	r3, r1
   24f40:	214a      	movs	r1, #74	; 0x4a
   24f42:	2002      	movs	r0, #2
   24f44:	4d06      	ldr	r5, [pc, #24]	; (24f60 <gethostbyname+0x6c>)
   24f46:	47a8      	blx	r5
   24f48:	0003      	movs	r3, r0
   24f4a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   24f4c:	230f      	movs	r3, #15
   24f4e:	18fb      	adds	r3, r7, r3
   24f50:	781b      	ldrb	r3, [r3, #0]
   24f52:	b25b      	sxtb	r3, r3
}
   24f54:	0018      	movs	r0, r3
   24f56:	46bd      	mov	sp, r7
   24f58:	b004      	add	sp, #16
   24f5a:	bdb0      	pop	{r4, r5, r7, pc}
   24f5c:	0001fd4f 	.word	0x0001fd4f
   24f60:	0001ff71 	.word	0x0001ff71

00024f64 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   24f64:	b580      	push	{r7, lr}
   24f66:	b082      	sub	sp, #8
   24f68:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   24f6a:	003b      	movs	r3, r7
   24f6c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   24f6e:	687b      	ldr	r3, [r7, #4]
   24f70:	22b9      	movs	r2, #185	; 0xb9
   24f72:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24f74:	4b13      	ldr	r3, [pc, #76]	; (24fc4 <spi_flash_enter_low_power_mode+0x60>)
   24f76:	2100      	movs	r1, #0
   24f78:	0018      	movs	r0, r3
   24f7a:	4b13      	ldr	r3, [pc, #76]	; (24fc8 <spi_flash_enter_low_power_mode+0x64>)
   24f7c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24f7e:	687b      	ldr	r3, [r7, #4]
   24f80:	781b      	ldrb	r3, [r3, #0]
   24f82:	001a      	movs	r2, r3
   24f84:	4b11      	ldr	r3, [pc, #68]	; (24fcc <spi_flash_enter_low_power_mode+0x68>)
   24f86:	0011      	movs	r1, r2
   24f88:	0018      	movs	r0, r3
   24f8a:	4b0f      	ldr	r3, [pc, #60]	; (24fc8 <spi_flash_enter_low_power_mode+0x64>)
   24f8c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   24f8e:	4b10      	ldr	r3, [pc, #64]	; (24fd0 <spi_flash_enter_low_power_mode+0x6c>)
   24f90:	2101      	movs	r1, #1
   24f92:	0018      	movs	r0, r3
   24f94:	4b0c      	ldr	r3, [pc, #48]	; (24fc8 <spi_flash_enter_low_power_mode+0x64>)
   24f96:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   24f98:	4b0e      	ldr	r3, [pc, #56]	; (24fd4 <spi_flash_enter_low_power_mode+0x70>)
   24f9a:	2100      	movs	r1, #0
   24f9c:	0018      	movs	r0, r3
   24f9e:	4b0a      	ldr	r3, [pc, #40]	; (24fc8 <spi_flash_enter_low_power_mode+0x64>)
   24fa0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   24fa2:	4b0d      	ldr	r3, [pc, #52]	; (24fd8 <spi_flash_enter_low_power_mode+0x74>)
   24fa4:	2181      	movs	r1, #129	; 0x81
   24fa6:	0018      	movs	r0, r3
   24fa8:	4b07      	ldr	r3, [pc, #28]	; (24fc8 <spi_flash_enter_low_power_mode+0x64>)
   24faa:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   24fac:	46c0      	nop			; (mov r8, r8)
   24fae:	4b0b      	ldr	r3, [pc, #44]	; (24fdc <spi_flash_enter_low_power_mode+0x78>)
   24fb0:	0018      	movs	r0, r3
   24fb2:	4b0b      	ldr	r3, [pc, #44]	; (24fe0 <spi_flash_enter_low_power_mode+0x7c>)
   24fb4:	4798      	blx	r3
   24fb6:	0003      	movs	r3, r0
   24fb8:	2b01      	cmp	r3, #1
   24fba:	d1f8      	bne.n	24fae <spi_flash_enter_low_power_mode+0x4a>
}
   24fbc:	46c0      	nop			; (mov r8, r8)
   24fbe:	46bd      	mov	sp, r7
   24fc0:	b002      	add	sp, #8
   24fc2:	bd80      	pop	{r7, pc}
   24fc4:	00010208 	.word	0x00010208
   24fc8:	00021dc5 	.word	0x00021dc5
   24fcc:	0001020c 	.word	0x0001020c
   24fd0:	00010214 	.word	0x00010214
   24fd4:	0001021c 	.word	0x0001021c
   24fd8:	00010204 	.word	0x00010204
   24fdc:	00010218 	.word	0x00010218
   24fe0:	00021d81 	.word	0x00021d81

00024fe4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   24fe4:	b580      	push	{r7, lr}
   24fe6:	b082      	sub	sp, #8
   24fe8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   24fea:	003b      	movs	r3, r7
   24fec:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   24fee:	687b      	ldr	r3, [r7, #4]
   24ff0:	22ab      	movs	r2, #171	; 0xab
   24ff2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24ff4:	4b13      	ldr	r3, [pc, #76]	; (25044 <spi_flash_leave_low_power_mode+0x60>)
   24ff6:	2100      	movs	r1, #0
   24ff8:	0018      	movs	r0, r3
   24ffa:	4b13      	ldr	r3, [pc, #76]	; (25048 <spi_flash_leave_low_power_mode+0x64>)
   24ffc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   24ffe:	687b      	ldr	r3, [r7, #4]
   25000:	781b      	ldrb	r3, [r3, #0]
   25002:	001a      	movs	r2, r3
   25004:	4b11      	ldr	r3, [pc, #68]	; (2504c <spi_flash_leave_low_power_mode+0x68>)
   25006:	0011      	movs	r1, r2
   25008:	0018      	movs	r0, r3
   2500a:	4b0f      	ldr	r3, [pc, #60]	; (25048 <spi_flash_leave_low_power_mode+0x64>)
   2500c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2500e:	4b10      	ldr	r3, [pc, #64]	; (25050 <spi_flash_leave_low_power_mode+0x6c>)
   25010:	2101      	movs	r1, #1
   25012:	0018      	movs	r0, r3
   25014:	4b0c      	ldr	r3, [pc, #48]	; (25048 <spi_flash_leave_low_power_mode+0x64>)
   25016:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25018:	4b0e      	ldr	r3, [pc, #56]	; (25054 <spi_flash_leave_low_power_mode+0x70>)
   2501a:	2100      	movs	r1, #0
   2501c:	0018      	movs	r0, r3
   2501e:	4b0a      	ldr	r3, [pc, #40]	; (25048 <spi_flash_leave_low_power_mode+0x64>)
   25020:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25022:	4b0d      	ldr	r3, [pc, #52]	; (25058 <spi_flash_leave_low_power_mode+0x74>)
   25024:	2181      	movs	r1, #129	; 0x81
   25026:	0018      	movs	r0, r3
   25028:	4b07      	ldr	r3, [pc, #28]	; (25048 <spi_flash_leave_low_power_mode+0x64>)
   2502a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2502c:	46c0      	nop			; (mov r8, r8)
   2502e:	4b0b      	ldr	r3, [pc, #44]	; (2505c <spi_flash_leave_low_power_mode+0x78>)
   25030:	0018      	movs	r0, r3
   25032:	4b0b      	ldr	r3, [pc, #44]	; (25060 <spi_flash_leave_low_power_mode+0x7c>)
   25034:	4798      	blx	r3
   25036:	0003      	movs	r3, r0
   25038:	2b01      	cmp	r3, #1
   2503a:	d1f8      	bne.n	2502e <spi_flash_leave_low_power_mode+0x4a>
}
   2503c:	46c0      	nop			; (mov r8, r8)
   2503e:	46bd      	mov	sp, r7
   25040:	b002      	add	sp, #8
   25042:	bd80      	pop	{r7, pc}
   25044:	00010208 	.word	0x00010208
   25048:	00021dc5 	.word	0x00021dc5
   2504c:	0001020c 	.word	0x0001020c
   25050:	00010214 	.word	0x00010214
   25054:	0001021c 	.word	0x0001021c
   25058:	00010204 	.word	0x00010204
   2505c:	00010218 	.word	0x00010218
   25060:	00021d81 	.word	0x00021d81

00025064 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25064:	b590      	push	{r4, r7, lr}
   25066:	b085      	sub	sp, #20
   25068:	af00      	add	r7, sp, #0
   2506a:	0002      	movs	r2, r0
   2506c:	1dfb      	adds	r3, r7, #7
   2506e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25070:	230f      	movs	r3, #15
   25072:	18fb      	adds	r3, r7, r3
   25074:	2200      	movs	r2, #0
   25076:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25078:	4b24      	ldr	r3, [pc, #144]	; (2510c <spi_flash_enable+0xa8>)
   2507a:	4798      	blx	r3
   2507c:	0003      	movs	r3, r0
   2507e:	051b      	lsls	r3, r3, #20
   25080:	0d1b      	lsrs	r3, r3, #20
   25082:	4a23      	ldr	r2, [pc, #140]	; (25110 <spi_flash_enable+0xac>)
   25084:	4293      	cmp	r3, r2
   25086:	d938      	bls.n	250fa <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25088:	230f      	movs	r3, #15
   2508a:	18fc      	adds	r4, r7, r3
   2508c:	2308      	movs	r3, #8
   2508e:	18fb      	adds	r3, r7, r3
   25090:	4a20      	ldr	r2, [pc, #128]	; (25114 <spi_flash_enable+0xb0>)
   25092:	0019      	movs	r1, r3
   25094:	0010      	movs	r0, r2
   25096:	4b20      	ldr	r3, [pc, #128]	; (25118 <spi_flash_enable+0xb4>)
   25098:	4798      	blx	r3
   2509a:	0003      	movs	r3, r0
   2509c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2509e:	230f      	movs	r3, #15
   250a0:	18fb      	adds	r3, r7, r3
   250a2:	781b      	ldrb	r3, [r3, #0]
   250a4:	b25b      	sxtb	r3, r3
   250a6:	2b00      	cmp	r3, #0
   250a8:	d126      	bne.n	250f8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   250aa:	68bb      	ldr	r3, [r7, #8]
   250ac:	4a1b      	ldr	r2, [pc, #108]	; (2511c <spi_flash_enable+0xb8>)
   250ae:	4013      	ands	r3, r2
   250b0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   250b2:	68bb      	ldr	r3, [r7, #8]
   250b4:	4a1a      	ldr	r2, [pc, #104]	; (25120 <spi_flash_enable+0xbc>)
   250b6:	4313      	orrs	r3, r2
   250b8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   250ba:	68bb      	ldr	r3, [r7, #8]
   250bc:	4a15      	ldr	r2, [pc, #84]	; (25114 <spi_flash_enable+0xb0>)
   250be:	0019      	movs	r1, r3
   250c0:	0010      	movs	r0, r2
   250c2:	4b18      	ldr	r3, [pc, #96]	; (25124 <spi_flash_enable+0xc0>)
   250c4:	4798      	blx	r3
		if(enable) {
   250c6:	1dfb      	adds	r3, r7, #7
   250c8:	781b      	ldrb	r3, [r3, #0]
   250ca:	2b00      	cmp	r3, #0
   250cc:	d002      	beq.n	250d4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   250ce:	4b16      	ldr	r3, [pc, #88]	; (25128 <spi_flash_enable+0xc4>)
   250d0:	4798      	blx	r3
   250d2:	e001      	b.n	250d8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   250d4:	4b15      	ldr	r3, [pc, #84]	; (2512c <spi_flash_enable+0xc8>)
   250d6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   250d8:	68bb      	ldr	r3, [r7, #8]
   250da:	4a10      	ldr	r2, [pc, #64]	; (2511c <spi_flash_enable+0xb8>)
   250dc:	4013      	ands	r3, r2
   250de:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   250e0:	68bb      	ldr	r3, [r7, #8]
   250e2:	2280      	movs	r2, #128	; 0x80
   250e4:	0252      	lsls	r2, r2, #9
   250e6:	4313      	orrs	r3, r2
   250e8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   250ea:	68bb      	ldr	r3, [r7, #8]
   250ec:	4a09      	ldr	r2, [pc, #36]	; (25114 <spi_flash_enable+0xb0>)
   250ee:	0019      	movs	r1, r3
   250f0:	0010      	movs	r0, r2
   250f2:	4b0c      	ldr	r3, [pc, #48]	; (25124 <spi_flash_enable+0xc0>)
   250f4:	4798      	blx	r3
   250f6:	e000      	b.n	250fa <spi_flash_enable+0x96>
			goto ERR1;
   250f8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   250fa:	230f      	movs	r3, #15
   250fc:	18fb      	adds	r3, r7, r3
   250fe:	781b      	ldrb	r3, [r3, #0]
   25100:	b25b      	sxtb	r3, r3
}
   25102:	0018      	movs	r0, r3
   25104:	46bd      	mov	sp, r7
   25106:	b005      	add	sp, #20
   25108:	bd90      	pop	{r4, r7, pc}
   2510a:	46c0      	nop			; (mov r8, r8)
   2510c:	000216a1 	.word	0x000216a1
   25110:	0000039f 	.word	0x0000039f
   25114:	00001410 	.word	0x00001410
   25118:	00021da1 	.word	0x00021da1
   2511c:	f8888fff 	.word	0xf8888fff
   25120:	01111000 	.word	0x01111000
   25124:	00021dc5 	.word	0x00021dc5
   25128:	00024fe5 	.word	0x00024fe5
   2512c:	00024f65 	.word	0x00024f65

00025130 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25130:	b580      	push	{r7, lr}
   25132:	b084      	sub	sp, #16
   25134:	af00      	add	r7, sp, #0
   25136:	0002      	movs	r2, r0
   25138:	1dfb      	adds	r3, r7, #7
   2513a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   2513c:	1dfb      	adds	r3, r7, #7
   2513e:	781b      	ldrb	r3, [r3, #0]
   25140:	2b00      	cmp	r3, #0
   25142:	d108      	bne.n	25156 <mem_test_unit_ready+0x26>
   25144:	1dfb      	adds	r3, r7, #7
   25146:	781a      	ldrb	r2, [r3, #0]
   25148:	4b08      	ldr	r3, [pc, #32]	; (2516c <mem_test_unit_ready+0x3c>)
   2514a:	0152      	lsls	r2, r2, #5
   2514c:	58d3      	ldr	r3, [r2, r3]
   2514e:	4798      	blx	r3
   25150:	0003      	movs	r3, r0
   25152:	001a      	movs	r2, r3
   25154:	e000      	b.n	25158 <mem_test_unit_ready+0x28>
   25156:	2201      	movs	r2, #1
  status =
   25158:	230f      	movs	r3, #15
   2515a:	18fb      	adds	r3, r7, r3
   2515c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2515e:	230f      	movs	r3, #15
   25160:	18fb      	adds	r3, r7, r3
   25162:	781b      	ldrb	r3, [r3, #0]
}
   25164:	0018      	movs	r0, r3
   25166:	46bd      	mov	sp, r7
   25168:	b004      	add	sp, #16
   2516a:	bd80      	pop	{r7, pc}
   2516c:	00038f6c 	.word	0x00038f6c

00025170 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25170:	b580      	push	{r7, lr}
   25172:	b084      	sub	sp, #16
   25174:	af00      	add	r7, sp, #0
   25176:	0002      	movs	r2, r0
   25178:	6039      	str	r1, [r7, #0]
   2517a:	1dfb      	adds	r3, r7, #7
   2517c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2517e:	1dfb      	adds	r3, r7, #7
   25180:	781b      	ldrb	r3, [r3, #0]
   25182:	2b00      	cmp	r3, #0
   25184:	d10c      	bne.n	251a0 <mem_read_capacity+0x30>
   25186:	1dfb      	adds	r3, r7, #7
   25188:	781b      	ldrb	r3, [r3, #0]
   2518a:	4a0b      	ldr	r2, [pc, #44]	; (251b8 <mem_read_capacity+0x48>)
   2518c:	015b      	lsls	r3, r3, #5
   2518e:	18d3      	adds	r3, r2, r3
   25190:	3304      	adds	r3, #4
   25192:	681b      	ldr	r3, [r3, #0]
   25194:	683a      	ldr	r2, [r7, #0]
   25196:	0010      	movs	r0, r2
   25198:	4798      	blx	r3
   2519a:	0003      	movs	r3, r0
   2519c:	001a      	movs	r2, r3
   2519e:	e000      	b.n	251a2 <mem_read_capacity+0x32>
   251a0:	2201      	movs	r2, #1
  status =
   251a2:	230f      	movs	r3, #15
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   251a8:	230f      	movs	r3, #15
   251aa:	18fb      	adds	r3, r7, r3
   251ac:	781b      	ldrb	r3, [r3, #0]
}
   251ae:	0018      	movs	r0, r3
   251b0:	46bd      	mov	sp, r7
   251b2:	b004      	add	sp, #16
   251b4:	bd80      	pop	{r7, pc}
   251b6:	46c0      	nop			; (mov r8, r8)
   251b8:	00038f6c 	.word	0x00038f6c

000251bc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   251bc:	b580      	push	{r7, lr}
   251be:	b084      	sub	sp, #16
   251c0:	af00      	add	r7, sp, #0
   251c2:	0002      	movs	r2, r0
   251c4:	1dfb      	adds	r3, r7, #7
   251c6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   251c8:	1dfb      	adds	r3, r7, #7
   251ca:	781b      	ldrb	r3, [r3, #0]
   251cc:	425a      	negs	r2, r3
   251ce:	4153      	adcs	r3, r2
   251d0:	b2da      	uxtb	r2, r3
  sector_size =
   251d2:	230f      	movs	r3, #15
   251d4:	18fb      	adds	r3, r7, r3
   251d6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   251d8:	230f      	movs	r3, #15
   251da:	18fb      	adds	r3, r7, r3
   251dc:	781b      	ldrb	r3, [r3, #0]
}
   251de:	0018      	movs	r0, r3
   251e0:	46bd      	mov	sp, r7
   251e2:	b004      	add	sp, #16
   251e4:	bd80      	pop	{r7, pc}
	...

000251e8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   251e8:	b580      	push	{r7, lr}
   251ea:	b084      	sub	sp, #16
   251ec:	af00      	add	r7, sp, #0
   251ee:	0002      	movs	r2, r0
   251f0:	1dfb      	adds	r3, r7, #7
   251f2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   251f4:	1dfb      	adds	r3, r7, #7
   251f6:	781b      	ldrb	r3, [r3, #0]
   251f8:	2b00      	cmp	r3, #0
   251fa:	d109      	bne.n	25210 <mem_wr_protect+0x28>
   251fc:	1dfb      	adds	r3, r7, #7
   251fe:	781b      	ldrb	r3, [r3, #0]
   25200:	4a0a      	ldr	r2, [pc, #40]	; (2522c <mem_wr_protect+0x44>)
   25202:	015b      	lsls	r3, r3, #5
   25204:	18d3      	adds	r3, r2, r3
   25206:	330c      	adds	r3, #12
   25208:	681b      	ldr	r3, [r3, #0]
   2520a:	4798      	blx	r3
   2520c:	1e03      	subs	r3, r0, #0
   2520e:	d001      	beq.n	25214 <mem_wr_protect+0x2c>
   25210:	2201      	movs	r2, #1
   25212:	e000      	b.n	25216 <mem_wr_protect+0x2e>
   25214:	2200      	movs	r2, #0
  wr_protect =
   25216:	230f      	movs	r3, #15
   25218:	18fb      	adds	r3, r7, r3
   2521a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   2521c:	230f      	movs	r3, #15
   2521e:	18fb      	adds	r3, r7, r3
   25220:	781b      	ldrb	r3, [r3, #0]
}
   25222:	0018      	movs	r0, r3
   25224:	46bd      	mov	sp, r7
   25226:	b004      	add	sp, #16
   25228:	bd80      	pop	{r7, pc}
   2522a:	46c0      	nop			; (mov r8, r8)
   2522c:	00038f6c 	.word	0x00038f6c

00025230 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25230:	b580      	push	{r7, lr}
   25232:	b086      	sub	sp, #24
   25234:	af00      	add	r7, sp, #0
   25236:	60b9      	str	r1, [r7, #8]
   25238:	607a      	str	r2, [r7, #4]
   2523a:	230f      	movs	r3, #15
   2523c:	18fb      	adds	r3, r7, r3
   2523e:	1c02      	adds	r2, r0, #0
   25240:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25242:	230f      	movs	r3, #15
   25244:	18fb      	adds	r3, r7, r3
   25246:	781b      	ldrb	r3, [r3, #0]
   25248:	2b00      	cmp	r3, #0
   2524a:	d10e      	bne.n	2526a <memory_2_ram+0x3a>
   2524c:	230f      	movs	r3, #15
   2524e:	18fb      	adds	r3, r7, r3
   25250:	781b      	ldrb	r3, [r3, #0]
   25252:	4a0b      	ldr	r2, [pc, #44]	; (25280 <memory_2_ram+0x50>)
   25254:	015b      	lsls	r3, r3, #5
   25256:	18d3      	adds	r3, r2, r3
   25258:	3314      	adds	r3, #20
   2525a:	681b      	ldr	r3, [r3, #0]
   2525c:	6879      	ldr	r1, [r7, #4]
   2525e:	68ba      	ldr	r2, [r7, #8]
   25260:	0010      	movs	r0, r2
   25262:	4798      	blx	r3
   25264:	0003      	movs	r3, r0
   25266:	001a      	movs	r2, r3
   25268:	e000      	b.n	2526c <memory_2_ram+0x3c>
   2526a:	2201      	movs	r2, #1
  status =
   2526c:	2317      	movs	r3, #23
   2526e:	18fb      	adds	r3, r7, r3
   25270:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25272:	2317      	movs	r3, #23
   25274:	18fb      	adds	r3, r7, r3
   25276:	781b      	ldrb	r3, [r3, #0]
}
   25278:	0018      	movs	r0, r3
   2527a:	46bd      	mov	sp, r7
   2527c:	b006      	add	sp, #24
   2527e:	bd80      	pop	{r7, pc}
   25280:	00038f6c 	.word	0x00038f6c

00025284 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25284:	b580      	push	{r7, lr}
   25286:	b086      	sub	sp, #24
   25288:	af00      	add	r7, sp, #0
   2528a:	60b9      	str	r1, [r7, #8]
   2528c:	607a      	str	r2, [r7, #4]
   2528e:	230f      	movs	r3, #15
   25290:	18fb      	adds	r3, r7, r3
   25292:	1c02      	adds	r2, r0, #0
   25294:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25296:	230f      	movs	r3, #15
   25298:	18fb      	adds	r3, r7, r3
   2529a:	781b      	ldrb	r3, [r3, #0]
   2529c:	2b00      	cmp	r3, #0
   2529e:	d10e      	bne.n	252be <ram_2_memory+0x3a>
   252a0:	230f      	movs	r3, #15
   252a2:	18fb      	adds	r3, r7, r3
   252a4:	781b      	ldrb	r3, [r3, #0]
   252a6:	4a0b      	ldr	r2, [pc, #44]	; (252d4 <ram_2_memory+0x50>)
   252a8:	015b      	lsls	r3, r3, #5
   252aa:	18d3      	adds	r3, r2, r3
   252ac:	3318      	adds	r3, #24
   252ae:	681b      	ldr	r3, [r3, #0]
   252b0:	6879      	ldr	r1, [r7, #4]
   252b2:	68ba      	ldr	r2, [r7, #8]
   252b4:	0010      	movs	r0, r2
   252b6:	4798      	blx	r3
   252b8:	0003      	movs	r3, r0
   252ba:	001a      	movs	r2, r3
   252bc:	e000      	b.n	252c0 <ram_2_memory+0x3c>
   252be:	2201      	movs	r2, #1
  status =
   252c0:	2317      	movs	r3, #23
   252c2:	18fb      	adds	r3, r7, r3
   252c4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   252c6:	2317      	movs	r3, #23
   252c8:	18fb      	adds	r3, r7, r3
   252ca:	781b      	ldrb	r3, [r3, #0]
}
   252cc:	0018      	movs	r0, r3
   252ce:	46bd      	mov	sp, r7
   252d0:	b006      	add	sp, #24
   252d2:	bd80      	pop	{r7, pc}
   252d4:	00038f6c 	.word	0x00038f6c

000252d8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   252d8:	b580      	push	{r7, lr}
   252da:	b082      	sub	sp, #8
   252dc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   252de:	4b10      	ldr	r3, [pc, #64]	; (25320 <cpu_irq_enter_critical+0x48>)
   252e0:	681b      	ldr	r3, [r3, #0]
   252e2:	2b00      	cmp	r3, #0
   252e4:	d112      	bne.n	2530c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   252e6:	f3ef 8310 	mrs	r3, PRIMASK
   252ea:	607b      	str	r3, [r7, #4]
  return(result);
   252ec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   252ee:	2b00      	cmp	r3, #0
   252f0:	d109      	bne.n	25306 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   252f2:	b672      	cpsid	i
   252f4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   252f8:	4b0a      	ldr	r3, [pc, #40]	; (25324 <cpu_irq_enter_critical+0x4c>)
   252fa:	2200      	movs	r2, #0
   252fc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   252fe:	4b0a      	ldr	r3, [pc, #40]	; (25328 <cpu_irq_enter_critical+0x50>)
   25300:	2201      	movs	r2, #1
   25302:	701a      	strb	r2, [r3, #0]
   25304:	e002      	b.n	2530c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25306:	4b08      	ldr	r3, [pc, #32]	; (25328 <cpu_irq_enter_critical+0x50>)
   25308:	2200      	movs	r2, #0
   2530a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   2530c:	4b04      	ldr	r3, [pc, #16]	; (25320 <cpu_irq_enter_critical+0x48>)
   2530e:	681b      	ldr	r3, [r3, #0]
   25310:	1c5a      	adds	r2, r3, #1
   25312:	4b03      	ldr	r3, [pc, #12]	; (25320 <cpu_irq_enter_critical+0x48>)
   25314:	601a      	str	r2, [r3, #0]
}
   25316:	46c0      	nop			; (mov r8, r8)
   25318:	46bd      	mov	sp, r7
   2531a:	b002      	add	sp, #8
   2531c:	bd80      	pop	{r7, pc}
   2531e:	46c0      	nop			; (mov r8, r8)
   25320:	20004284 	.word	0x20004284
   25324:	20000116 	.word	0x20000116
   25328:	20004288 	.word	0x20004288

0002532c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   2532c:	b580      	push	{r7, lr}
   2532e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25330:	4b0b      	ldr	r3, [pc, #44]	; (25360 <cpu_irq_leave_critical+0x34>)
   25332:	681b      	ldr	r3, [r3, #0]
   25334:	1e5a      	subs	r2, r3, #1
   25336:	4b0a      	ldr	r3, [pc, #40]	; (25360 <cpu_irq_leave_critical+0x34>)
   25338:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   2533a:	4b09      	ldr	r3, [pc, #36]	; (25360 <cpu_irq_leave_critical+0x34>)
   2533c:	681b      	ldr	r3, [r3, #0]
   2533e:	2b00      	cmp	r3, #0
   25340:	d10a      	bne.n	25358 <cpu_irq_leave_critical+0x2c>
   25342:	4b08      	ldr	r3, [pc, #32]	; (25364 <cpu_irq_leave_critical+0x38>)
   25344:	781b      	ldrb	r3, [r3, #0]
   25346:	b2db      	uxtb	r3, r3
   25348:	2b00      	cmp	r3, #0
   2534a:	d005      	beq.n	25358 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   2534c:	4b06      	ldr	r3, [pc, #24]	; (25368 <cpu_irq_leave_critical+0x3c>)
   2534e:	2201      	movs	r2, #1
   25350:	701a      	strb	r2, [r3, #0]
   25352:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25356:	b662      	cpsie	i
	}
}
   25358:	46c0      	nop			; (mov r8, r8)
   2535a:	46bd      	mov	sp, r7
   2535c:	bd80      	pop	{r7, pc}
   2535e:	46c0      	nop			; (mov r8, r8)
   25360:	20004284 	.word	0x20004284
   25364:	20004288 	.word	0x20004288
   25368:	20000116 	.word	0x20000116

0002536c <system_pinmux_get_group_from_gpio_pin>:
{
   2536c:	b580      	push	{r7, lr}
   2536e:	b084      	sub	sp, #16
   25370:	af00      	add	r7, sp, #0
   25372:	0002      	movs	r2, r0
   25374:	1dfb      	adds	r3, r7, #7
   25376:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25378:	230f      	movs	r3, #15
   2537a:	18fb      	adds	r3, r7, r3
   2537c:	1dfa      	adds	r2, r7, #7
   2537e:	7812      	ldrb	r2, [r2, #0]
   25380:	09d2      	lsrs	r2, r2, #7
   25382:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25384:	230e      	movs	r3, #14
   25386:	18fb      	adds	r3, r7, r3
   25388:	1dfa      	adds	r2, r7, #7
   2538a:	7812      	ldrb	r2, [r2, #0]
   2538c:	0952      	lsrs	r2, r2, #5
   2538e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25390:	4b0d      	ldr	r3, [pc, #52]	; (253c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25392:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25394:	230f      	movs	r3, #15
   25396:	18fb      	adds	r3, r7, r3
   25398:	781b      	ldrb	r3, [r3, #0]
   2539a:	2b00      	cmp	r3, #0
   2539c:	d10f      	bne.n	253be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2539e:	230f      	movs	r3, #15
   253a0:	18fb      	adds	r3, r7, r3
   253a2:	781b      	ldrb	r3, [r3, #0]
   253a4:	009b      	lsls	r3, r3, #2
   253a6:	2210      	movs	r2, #16
   253a8:	4694      	mov	ip, r2
   253aa:	44bc      	add	ip, r7
   253ac:	4463      	add	r3, ip
   253ae:	3b08      	subs	r3, #8
   253b0:	681a      	ldr	r2, [r3, #0]
   253b2:	230e      	movs	r3, #14
   253b4:	18fb      	adds	r3, r7, r3
   253b6:	781b      	ldrb	r3, [r3, #0]
   253b8:	01db      	lsls	r3, r3, #7
   253ba:	18d3      	adds	r3, r2, r3
   253bc:	e000      	b.n	253c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   253be:	2300      	movs	r3, #0
}
   253c0:	0018      	movs	r0, r3
   253c2:	46bd      	mov	sp, r7
   253c4:	b004      	add	sp, #16
   253c6:	bd80      	pop	{r7, pc}
   253c8:	41004400 	.word	0x41004400

000253cc <port_get_group_from_gpio_pin>:
{
   253cc:	b580      	push	{r7, lr}
   253ce:	b082      	sub	sp, #8
   253d0:	af00      	add	r7, sp, #0
   253d2:	0002      	movs	r2, r0
   253d4:	1dfb      	adds	r3, r7, #7
   253d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   253d8:	1dfb      	adds	r3, r7, #7
   253da:	781b      	ldrb	r3, [r3, #0]
   253dc:	0018      	movs	r0, r3
   253de:	4b03      	ldr	r3, [pc, #12]	; (253ec <port_get_group_from_gpio_pin+0x20>)
   253e0:	4798      	blx	r3
   253e2:	0003      	movs	r3, r0
}
   253e4:	0018      	movs	r0, r3
   253e6:	46bd      	mov	sp, r7
   253e8:	b002      	add	sp, #8
   253ea:	bd80      	pop	{r7, pc}
   253ec:	0002536d 	.word	0x0002536d

000253f0 <port_get_config_defaults>:
{
   253f0:	b580      	push	{r7, lr}
   253f2:	b082      	sub	sp, #8
   253f4:	af00      	add	r7, sp, #0
   253f6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   253f8:	687b      	ldr	r3, [r7, #4]
   253fa:	2200      	movs	r2, #0
   253fc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   253fe:	687b      	ldr	r3, [r7, #4]
   25400:	2201      	movs	r2, #1
   25402:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25404:	687b      	ldr	r3, [r7, #4]
   25406:	2200      	movs	r2, #0
   25408:	709a      	strb	r2, [r3, #2]
}
   2540a:	46c0      	nop			; (mov r8, r8)
   2540c:	46bd      	mov	sp, r7
   2540e:	b002      	add	sp, #8
   25410:	bd80      	pop	{r7, pc}
	...

00025414 <port_pin_set_output_level>:
{
   25414:	b580      	push	{r7, lr}
   25416:	b084      	sub	sp, #16
   25418:	af00      	add	r7, sp, #0
   2541a:	0002      	movs	r2, r0
   2541c:	1dfb      	adds	r3, r7, #7
   2541e:	701a      	strb	r2, [r3, #0]
   25420:	1dbb      	adds	r3, r7, #6
   25422:	1c0a      	adds	r2, r1, #0
   25424:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25426:	1dfb      	adds	r3, r7, #7
   25428:	781b      	ldrb	r3, [r3, #0]
   2542a:	0018      	movs	r0, r3
   2542c:	4b0d      	ldr	r3, [pc, #52]	; (25464 <port_pin_set_output_level+0x50>)
   2542e:	4798      	blx	r3
   25430:	0003      	movs	r3, r0
   25432:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25434:	1dfb      	adds	r3, r7, #7
   25436:	781b      	ldrb	r3, [r3, #0]
   25438:	221f      	movs	r2, #31
   2543a:	4013      	ands	r3, r2
   2543c:	2201      	movs	r2, #1
   2543e:	409a      	lsls	r2, r3
   25440:	0013      	movs	r3, r2
   25442:	60bb      	str	r3, [r7, #8]
	if (level) {
   25444:	1dbb      	adds	r3, r7, #6
   25446:	781b      	ldrb	r3, [r3, #0]
   25448:	2b00      	cmp	r3, #0
   2544a:	d003      	beq.n	25454 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2544c:	68fb      	ldr	r3, [r7, #12]
   2544e:	68ba      	ldr	r2, [r7, #8]
   25450:	619a      	str	r2, [r3, #24]
}
   25452:	e002      	b.n	2545a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25454:	68fb      	ldr	r3, [r7, #12]
   25456:	68ba      	ldr	r2, [r7, #8]
   25458:	615a      	str	r2, [r3, #20]
}
   2545a:	46c0      	nop			; (mov r8, r8)
   2545c:	46bd      	mov	sp, r7
   2545e:	b004      	add	sp, #16
   25460:	bd80      	pop	{r7, pc}
   25462:	46c0      	nop			; (mov r8, r8)
   25464:	000253cd 	.word	0x000253cd

00025468 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25468:	b580      	push	{r7, lr}
   2546a:	b082      	sub	sp, #8
   2546c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2546e:	1d3b      	adds	r3, r7, #4
   25470:	0018      	movs	r0, r3
   25472:	4b0e      	ldr	r3, [pc, #56]	; (254ac <system_board_init+0x44>)
   25474:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25476:	1d3b      	adds	r3, r7, #4
   25478:	2201      	movs	r2, #1
   2547a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   2547c:	1d3b      	adds	r3, r7, #4
   2547e:	0019      	movs	r1, r3
   25480:	2017      	movs	r0, #23
   25482:	4b0b      	ldr	r3, [pc, #44]	; (254b0 <system_board_init+0x48>)
   25484:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25486:	2101      	movs	r1, #1
   25488:	2017      	movs	r0, #23
   2548a:	4b0a      	ldr	r3, [pc, #40]	; (254b4 <system_board_init+0x4c>)
   2548c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2548e:	1d3b      	adds	r3, r7, #4
   25490:	2200      	movs	r2, #0
   25492:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25494:	1d3b      	adds	r3, r7, #4
   25496:	2201      	movs	r2, #1
   25498:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2549a:	1d3b      	adds	r3, r7, #4
   2549c:	0019      	movs	r1, r3
   2549e:	2037      	movs	r0, #55	; 0x37
   254a0:	4b03      	ldr	r3, [pc, #12]	; (254b0 <system_board_init+0x48>)
   254a2:	4798      	blx	r3
}
   254a4:	46c0      	nop			; (mov r8, r8)
   254a6:	46bd      	mov	sp, r7
   254a8:	b002      	add	sp, #8
   254aa:	bd80      	pop	{r7, pc}
   254ac:	000253f1 	.word	0x000253f1
   254b0:	00025add 	.word	0x00025add
   254b4:	00025415 	.word	0x00025415

000254b8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   254b8:	b580      	push	{r7, lr}
   254ba:	b084      	sub	sp, #16
   254bc:	af00      	add	r7, sp, #0
   254be:	0002      	movs	r2, r0
   254c0:	1dfb      	adds	r3, r7, #7
   254c2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   254c4:	230f      	movs	r3, #15
   254c6:	18fb      	adds	r3, r7, r3
   254c8:	1dfa      	adds	r2, r7, #7
   254ca:	7812      	ldrb	r2, [r2, #0]
   254cc:	0952      	lsrs	r2, r2, #5
   254ce:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   254d0:	230f      	movs	r3, #15
   254d2:	18fb      	adds	r3, r7, r3
   254d4:	781b      	ldrb	r3, [r3, #0]
   254d6:	2b00      	cmp	r3, #0
   254d8:	d10c      	bne.n	254f4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   254da:	4b09      	ldr	r3, [pc, #36]	; (25500 <_extint_get_eic_from_channel+0x48>)
   254dc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   254de:	230f      	movs	r3, #15
   254e0:	18fb      	adds	r3, r7, r3
   254e2:	781b      	ldrb	r3, [r3, #0]
   254e4:	009b      	lsls	r3, r3, #2
   254e6:	2210      	movs	r2, #16
   254e8:	4694      	mov	ip, r2
   254ea:	44bc      	add	ip, r7
   254ec:	4463      	add	r3, ip
   254ee:	3b08      	subs	r3, #8
   254f0:	681b      	ldr	r3, [r3, #0]
   254f2:	e000      	b.n	254f6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   254f4:	2300      	movs	r3, #0
	}
}
   254f6:	0018      	movs	r0, r3
   254f8:	46bd      	mov	sp, r7
   254fa:	b004      	add	sp, #16
   254fc:	bd80      	pop	{r7, pc}
   254fe:	46c0      	nop			; (mov r8, r8)
   25500:	40001800 	.word	0x40001800

00025504 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25504:	b580      	push	{r7, lr}
   25506:	b084      	sub	sp, #16
   25508:	af00      	add	r7, sp, #0
   2550a:	0002      	movs	r2, r0
   2550c:	1dfb      	adds	r3, r7, #7
   2550e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25510:	1dfb      	adds	r3, r7, #7
   25512:	781b      	ldrb	r3, [r3, #0]
   25514:	0018      	movs	r0, r3
   25516:	4b0b      	ldr	r3, [pc, #44]	; (25544 <extint_chan_is_detected+0x40>)
   25518:	4798      	blx	r3
   2551a:	0003      	movs	r3, r0
   2551c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2551e:	1dfb      	adds	r3, r7, #7
   25520:	781b      	ldrb	r3, [r3, #0]
   25522:	221f      	movs	r2, #31
   25524:	4013      	ands	r3, r2
   25526:	2201      	movs	r2, #1
   25528:	409a      	lsls	r2, r3
   2552a:	0013      	movs	r3, r2
   2552c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2552e:	68fb      	ldr	r3, [r7, #12]
   25530:	691b      	ldr	r3, [r3, #16]
   25532:	68ba      	ldr	r2, [r7, #8]
   25534:	4013      	ands	r3, r2
   25536:	1e5a      	subs	r2, r3, #1
   25538:	4193      	sbcs	r3, r2
   2553a:	b2db      	uxtb	r3, r3
}
   2553c:	0018      	movs	r0, r3
   2553e:	46bd      	mov	sp, r7
   25540:	b004      	add	sp, #16
   25542:	bd80      	pop	{r7, pc}
   25544:	000254b9 	.word	0x000254b9

00025548 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25548:	b580      	push	{r7, lr}
   2554a:	b084      	sub	sp, #16
   2554c:	af00      	add	r7, sp, #0
   2554e:	0002      	movs	r2, r0
   25550:	1dfb      	adds	r3, r7, #7
   25552:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25554:	1dfb      	adds	r3, r7, #7
   25556:	781b      	ldrb	r3, [r3, #0]
   25558:	0018      	movs	r0, r3
   2555a:	4b09      	ldr	r3, [pc, #36]	; (25580 <extint_chan_clear_detected+0x38>)
   2555c:	4798      	blx	r3
   2555e:	0003      	movs	r3, r0
   25560:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25562:	1dfb      	adds	r3, r7, #7
   25564:	781b      	ldrb	r3, [r3, #0]
   25566:	221f      	movs	r2, #31
   25568:	4013      	ands	r3, r2
   2556a:	2201      	movs	r2, #1
   2556c:	409a      	lsls	r2, r3
   2556e:	0013      	movs	r3, r2
   25570:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   25572:	68fb      	ldr	r3, [r7, #12]
   25574:	68ba      	ldr	r2, [r7, #8]
   25576:	611a      	str	r2, [r3, #16]
}
   25578:	46c0      	nop			; (mov r8, r8)
   2557a:	46bd      	mov	sp, r7
   2557c:	b004      	add	sp, #16
   2557e:	bd80      	pop	{r7, pc}
   25580:	000254b9 	.word	0x000254b9

00025584 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25584:	b580      	push	{r7, lr}
   25586:	b082      	sub	sp, #8
   25588:	af00      	add	r7, sp, #0
   2558a:	6078      	str	r0, [r7, #4]
   2558c:	0008      	movs	r0, r1
   2558e:	0011      	movs	r1, r2
   25590:	1cfb      	adds	r3, r7, #3
   25592:	1c02      	adds	r2, r0, #0
   25594:	701a      	strb	r2, [r3, #0]
   25596:	1cbb      	adds	r3, r7, #2
   25598:	1c0a      	adds	r2, r1, #0
   2559a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2559c:	1cbb      	adds	r3, r7, #2
   2559e:	781b      	ldrb	r3, [r3, #0]
   255a0:	2b00      	cmp	r3, #0
   255a2:	d001      	beq.n	255a8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   255a4:	2317      	movs	r3, #23
   255a6:	e019      	b.n	255dc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   255a8:	1cfb      	adds	r3, r7, #3
   255aa:	781a      	ldrb	r2, [r3, #0]
   255ac:	4b0d      	ldr	r3, [pc, #52]	; (255e4 <extint_register_callback+0x60>)
   255ae:	0092      	lsls	r2, r2, #2
   255b0:	58d3      	ldr	r3, [r2, r3]
   255b2:	2b00      	cmp	r3, #0
   255b4:	d107      	bne.n	255c6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   255b6:	1cfb      	adds	r3, r7, #3
   255b8:	781a      	ldrb	r2, [r3, #0]
   255ba:	4b0a      	ldr	r3, [pc, #40]	; (255e4 <extint_register_callback+0x60>)
   255bc:	0092      	lsls	r2, r2, #2
   255be:	6879      	ldr	r1, [r7, #4]
   255c0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   255c2:	2300      	movs	r3, #0
   255c4:	e00a      	b.n	255dc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   255c6:	1cfb      	adds	r3, r7, #3
   255c8:	781a      	ldrb	r2, [r3, #0]
   255ca:	4b06      	ldr	r3, [pc, #24]	; (255e4 <extint_register_callback+0x60>)
   255cc:	0092      	lsls	r2, r2, #2
   255ce:	58d2      	ldr	r2, [r2, r3]
   255d0:	687b      	ldr	r3, [r7, #4]
   255d2:	429a      	cmp	r2, r3
   255d4:	d101      	bne.n	255da <extint_register_callback+0x56>
		return STATUS_OK;
   255d6:	2300      	movs	r3, #0
   255d8:	e000      	b.n	255dc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   255da:	231d      	movs	r3, #29
}
   255dc:	0018      	movs	r0, r3
   255de:	46bd      	mov	sp, r7
   255e0:	b002      	add	sp, #8
   255e2:	bd80      	pop	{r7, pc}
   255e4:	20005b88 	.word	0x20005b88

000255e8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   255e8:	b580      	push	{r7, lr}
   255ea:	b084      	sub	sp, #16
   255ec:	af00      	add	r7, sp, #0
   255ee:	0002      	movs	r2, r0
   255f0:	1dfb      	adds	r3, r7, #7
   255f2:	701a      	strb	r2, [r3, #0]
   255f4:	1dbb      	adds	r3, r7, #6
   255f6:	1c0a      	adds	r2, r1, #0
   255f8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   255fa:	1dbb      	adds	r3, r7, #6
   255fc:	781b      	ldrb	r3, [r3, #0]
   255fe:	2b00      	cmp	r3, #0
   25600:	d10e      	bne.n	25620 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25602:	1dfb      	adds	r3, r7, #7
   25604:	781b      	ldrb	r3, [r3, #0]
   25606:	0018      	movs	r0, r3
   25608:	4b08      	ldr	r3, [pc, #32]	; (2562c <extint_chan_enable_callback+0x44>)
   2560a:	4798      	blx	r3
   2560c:	0003      	movs	r3, r0
   2560e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   25610:	1dfb      	adds	r3, r7, #7
   25612:	781b      	ldrb	r3, [r3, #0]
   25614:	2201      	movs	r2, #1
   25616:	409a      	lsls	r2, r3
   25618:	68fb      	ldr	r3, [r7, #12]
   2561a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2561c:	2300      	movs	r3, #0
   2561e:	e000      	b.n	25622 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25620:	2317      	movs	r3, #23
}
   25622:	0018      	movs	r0, r3
   25624:	46bd      	mov	sp, r7
   25626:	b004      	add	sp, #16
   25628:	bd80      	pop	{r7, pc}
   2562a:	46c0      	nop			; (mov r8, r8)
   2562c:	000254b9 	.word	0x000254b9

00025630 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25630:	b580      	push	{r7, lr}
   25632:	b084      	sub	sp, #16
   25634:	af00      	add	r7, sp, #0
   25636:	0002      	movs	r2, r0
   25638:	1dfb      	adds	r3, r7, #7
   2563a:	701a      	strb	r2, [r3, #0]
   2563c:	1dbb      	adds	r3, r7, #6
   2563e:	1c0a      	adds	r2, r1, #0
   25640:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25642:	1dbb      	adds	r3, r7, #6
   25644:	781b      	ldrb	r3, [r3, #0]
   25646:	2b00      	cmp	r3, #0
   25648:	d10e      	bne.n	25668 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2564a:	1dfb      	adds	r3, r7, #7
   2564c:	781b      	ldrb	r3, [r3, #0]
   2564e:	0018      	movs	r0, r3
   25650:	4b08      	ldr	r3, [pc, #32]	; (25674 <extint_chan_disable_callback+0x44>)
   25652:	4798      	blx	r3
   25654:	0003      	movs	r3, r0
   25656:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25658:	1dfb      	adds	r3, r7, #7
   2565a:	781b      	ldrb	r3, [r3, #0]
   2565c:	2201      	movs	r2, #1
   2565e:	409a      	lsls	r2, r3
   25660:	68fb      	ldr	r3, [r7, #12]
   25662:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25664:	2300      	movs	r3, #0
   25666:	e000      	b.n	2566a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25668:	2317      	movs	r3, #23
}
   2566a:	0018      	movs	r0, r3
   2566c:	46bd      	mov	sp, r7
   2566e:	b004      	add	sp, #16
   25670:	bd80      	pop	{r7, pc}
   25672:	46c0      	nop			; (mov r8, r8)
   25674:	000254b9 	.word	0x000254b9

00025678 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25678:	b580      	push	{r7, lr}
   2567a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2567c:	4b15      	ldr	r3, [pc, #84]	; (256d4 <EIC_Handler+0x5c>)
   2567e:	2200      	movs	r2, #0
   25680:	701a      	strb	r2, [r3, #0]
   25682:	e020      	b.n	256c6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25684:	4b13      	ldr	r3, [pc, #76]	; (256d4 <EIC_Handler+0x5c>)
   25686:	781b      	ldrb	r3, [r3, #0]
   25688:	0018      	movs	r0, r3
   2568a:	4b13      	ldr	r3, [pc, #76]	; (256d8 <EIC_Handler+0x60>)
   2568c:	4798      	blx	r3
   2568e:	1e03      	subs	r3, r0, #0
   25690:	d013      	beq.n	256ba <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25692:	4b10      	ldr	r3, [pc, #64]	; (256d4 <EIC_Handler+0x5c>)
   25694:	781b      	ldrb	r3, [r3, #0]
   25696:	0018      	movs	r0, r3
   25698:	4b10      	ldr	r3, [pc, #64]	; (256dc <EIC_Handler+0x64>)
   2569a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2569c:	4b0d      	ldr	r3, [pc, #52]	; (256d4 <EIC_Handler+0x5c>)
   2569e:	781b      	ldrb	r3, [r3, #0]
   256a0:	001a      	movs	r2, r3
   256a2:	4b0f      	ldr	r3, [pc, #60]	; (256e0 <EIC_Handler+0x68>)
   256a4:	0092      	lsls	r2, r2, #2
   256a6:	58d3      	ldr	r3, [r2, r3]
   256a8:	2b00      	cmp	r3, #0
   256aa:	d006      	beq.n	256ba <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   256ac:	4b09      	ldr	r3, [pc, #36]	; (256d4 <EIC_Handler+0x5c>)
   256ae:	781b      	ldrb	r3, [r3, #0]
   256b0:	001a      	movs	r2, r3
   256b2:	4b0b      	ldr	r3, [pc, #44]	; (256e0 <EIC_Handler+0x68>)
   256b4:	0092      	lsls	r2, r2, #2
   256b6:	58d3      	ldr	r3, [r2, r3]
   256b8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   256ba:	4b06      	ldr	r3, [pc, #24]	; (256d4 <EIC_Handler+0x5c>)
   256bc:	781b      	ldrb	r3, [r3, #0]
   256be:	3301      	adds	r3, #1
   256c0:	b2da      	uxtb	r2, r3
   256c2:	4b04      	ldr	r3, [pc, #16]	; (256d4 <EIC_Handler+0x5c>)
   256c4:	701a      	strb	r2, [r3, #0]
   256c6:	4b03      	ldr	r3, [pc, #12]	; (256d4 <EIC_Handler+0x5c>)
   256c8:	781b      	ldrb	r3, [r3, #0]
   256ca:	2b0f      	cmp	r3, #15
   256cc:	d9da      	bls.n	25684 <EIC_Handler+0xc>
			}
		}
	}
}
   256ce:	46c0      	nop			; (mov r8, r8)
   256d0:	46bd      	mov	sp, r7
   256d2:	bd80      	pop	{r7, pc}
   256d4:	20005b84 	.word	0x20005b84
   256d8:	00025505 	.word	0x00025505
   256dc:	00025549 	.word	0x00025549
   256e0:	20005b88 	.word	0x20005b88

000256e4 <system_gclk_chan_get_config_defaults>:
{
   256e4:	b580      	push	{r7, lr}
   256e6:	b082      	sub	sp, #8
   256e8:	af00      	add	r7, sp, #0
   256ea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   256ec:	687b      	ldr	r3, [r7, #4]
   256ee:	2200      	movs	r2, #0
   256f0:	701a      	strb	r2, [r3, #0]
}
   256f2:	46c0      	nop			; (mov r8, r8)
   256f4:	46bd      	mov	sp, r7
   256f6:	b002      	add	sp, #8
   256f8:	bd80      	pop	{r7, pc}
	...

000256fc <system_apb_clock_set_mask>:
{
   256fc:	b580      	push	{r7, lr}
   256fe:	b082      	sub	sp, #8
   25700:	af00      	add	r7, sp, #0
   25702:	0002      	movs	r2, r0
   25704:	6039      	str	r1, [r7, #0]
   25706:	1dfb      	adds	r3, r7, #7
   25708:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2570a:	1dfb      	adds	r3, r7, #7
   2570c:	781b      	ldrb	r3, [r3, #0]
   2570e:	2b01      	cmp	r3, #1
   25710:	d00a      	beq.n	25728 <system_apb_clock_set_mask+0x2c>
   25712:	2b02      	cmp	r3, #2
   25714:	d00f      	beq.n	25736 <system_apb_clock_set_mask+0x3a>
   25716:	2b00      	cmp	r3, #0
   25718:	d114      	bne.n	25744 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2571a:	4b0e      	ldr	r3, [pc, #56]	; (25754 <system_apb_clock_set_mask+0x58>)
   2571c:	4a0d      	ldr	r2, [pc, #52]	; (25754 <system_apb_clock_set_mask+0x58>)
   2571e:	6991      	ldr	r1, [r2, #24]
   25720:	683a      	ldr	r2, [r7, #0]
   25722:	430a      	orrs	r2, r1
   25724:	619a      	str	r2, [r3, #24]
			break;
   25726:	e00f      	b.n	25748 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25728:	4b0a      	ldr	r3, [pc, #40]	; (25754 <system_apb_clock_set_mask+0x58>)
   2572a:	4a0a      	ldr	r2, [pc, #40]	; (25754 <system_apb_clock_set_mask+0x58>)
   2572c:	69d1      	ldr	r1, [r2, #28]
   2572e:	683a      	ldr	r2, [r7, #0]
   25730:	430a      	orrs	r2, r1
   25732:	61da      	str	r2, [r3, #28]
			break;
   25734:	e008      	b.n	25748 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25736:	4b07      	ldr	r3, [pc, #28]	; (25754 <system_apb_clock_set_mask+0x58>)
   25738:	4a06      	ldr	r2, [pc, #24]	; (25754 <system_apb_clock_set_mask+0x58>)
   2573a:	6a11      	ldr	r1, [r2, #32]
   2573c:	683a      	ldr	r2, [r7, #0]
   2573e:	430a      	orrs	r2, r1
   25740:	621a      	str	r2, [r3, #32]
			break;
   25742:	e001      	b.n	25748 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25744:	2317      	movs	r3, #23
   25746:	e000      	b.n	2574a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25748:	2300      	movs	r3, #0
}
   2574a:	0018      	movs	r0, r3
   2574c:	46bd      	mov	sp, r7
   2574e:	b002      	add	sp, #8
   25750:	bd80      	pop	{r7, pc}
   25752:	46c0      	nop			; (mov r8, r8)
   25754:	40000400 	.word	0x40000400

00025758 <system_pinmux_get_config_defaults>:
{
   25758:	b580      	push	{r7, lr}
   2575a:	b082      	sub	sp, #8
   2575c:	af00      	add	r7, sp, #0
   2575e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25760:	687b      	ldr	r3, [r7, #4]
   25762:	2280      	movs	r2, #128	; 0x80
   25764:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25766:	687b      	ldr	r3, [r7, #4]
   25768:	2200      	movs	r2, #0
   2576a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2576c:	687b      	ldr	r3, [r7, #4]
   2576e:	2201      	movs	r2, #1
   25770:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25772:	687b      	ldr	r3, [r7, #4]
   25774:	2200      	movs	r2, #0
   25776:	70da      	strb	r2, [r3, #3]
}
   25778:	46c0      	nop			; (mov r8, r8)
   2577a:	46bd      	mov	sp, r7
   2577c:	b002      	add	sp, #8
   2577e:	bd80      	pop	{r7, pc}

00025780 <system_interrupt_enable>:
{
   25780:	b580      	push	{r7, lr}
   25782:	b082      	sub	sp, #8
   25784:	af00      	add	r7, sp, #0
   25786:	0002      	movs	r2, r0
   25788:	1dfb      	adds	r3, r7, #7
   2578a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2578c:	4b06      	ldr	r3, [pc, #24]	; (257a8 <system_interrupt_enable+0x28>)
   2578e:	1dfa      	adds	r2, r7, #7
   25790:	7812      	ldrb	r2, [r2, #0]
   25792:	0011      	movs	r1, r2
   25794:	221f      	movs	r2, #31
   25796:	400a      	ands	r2, r1
   25798:	2101      	movs	r1, #1
   2579a:	4091      	lsls	r1, r2
   2579c:	000a      	movs	r2, r1
   2579e:	601a      	str	r2, [r3, #0]
}
   257a0:	46c0      	nop			; (mov r8, r8)
   257a2:	46bd      	mov	sp, r7
   257a4:	b002      	add	sp, #8
   257a6:	bd80      	pop	{r7, pc}
   257a8:	e000e100 	.word	0xe000e100

000257ac <_extint_get_eic_from_channel>:
{
   257ac:	b580      	push	{r7, lr}
   257ae:	b084      	sub	sp, #16
   257b0:	af00      	add	r7, sp, #0
   257b2:	0002      	movs	r2, r0
   257b4:	1dfb      	adds	r3, r7, #7
   257b6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   257b8:	230f      	movs	r3, #15
   257ba:	18fb      	adds	r3, r7, r3
   257bc:	1dfa      	adds	r2, r7, #7
   257be:	7812      	ldrb	r2, [r2, #0]
   257c0:	0952      	lsrs	r2, r2, #5
   257c2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   257c4:	230f      	movs	r3, #15
   257c6:	18fb      	adds	r3, r7, r3
   257c8:	781b      	ldrb	r3, [r3, #0]
   257ca:	2b00      	cmp	r3, #0
   257cc:	d10c      	bne.n	257e8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   257ce:	4b09      	ldr	r3, [pc, #36]	; (257f4 <_extint_get_eic_from_channel+0x48>)
   257d0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   257d2:	230f      	movs	r3, #15
   257d4:	18fb      	adds	r3, r7, r3
   257d6:	781b      	ldrb	r3, [r3, #0]
   257d8:	009b      	lsls	r3, r3, #2
   257da:	2210      	movs	r2, #16
   257dc:	4694      	mov	ip, r2
   257de:	44bc      	add	ip, r7
   257e0:	4463      	add	r3, ip
   257e2:	3b08      	subs	r3, #8
   257e4:	681b      	ldr	r3, [r3, #0]
   257e6:	e000      	b.n	257ea <_extint_get_eic_from_channel+0x3e>
		return NULL;
   257e8:	2300      	movs	r3, #0
}
   257ea:	0018      	movs	r0, r3
   257ec:	46bd      	mov	sp, r7
   257ee:	b004      	add	sp, #16
   257f0:	bd80      	pop	{r7, pc}
   257f2:	46c0      	nop			; (mov r8, r8)
   257f4:	40001800 	.word	0x40001800

000257f8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   257f8:	b580      	push	{r7, lr}
   257fa:	b082      	sub	sp, #8
   257fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   257fe:	4b0f      	ldr	r3, [pc, #60]	; (2583c <extint_is_syncing+0x44>)
   25800:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25802:	2300      	movs	r3, #0
   25804:	607b      	str	r3, [r7, #4]
   25806:	e011      	b.n	2582c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   25808:	687b      	ldr	r3, [r7, #4]
   2580a:	009b      	lsls	r3, r3, #2
   2580c:	2208      	movs	r2, #8
   2580e:	4694      	mov	ip, r2
   25810:	44bc      	add	ip, r7
   25812:	4463      	add	r3, ip
   25814:	3b08      	subs	r3, #8
   25816:	681b      	ldr	r3, [r3, #0]
   25818:	785b      	ldrb	r3, [r3, #1]
   2581a:	b2db      	uxtb	r3, r3
   2581c:	b25b      	sxtb	r3, r3
   2581e:	2b00      	cmp	r3, #0
   25820:	da01      	bge.n	25826 <extint_is_syncing+0x2e>
			return true;
   25822:	2301      	movs	r3, #1
   25824:	e006      	b.n	25834 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25826:	687b      	ldr	r3, [r7, #4]
   25828:	3301      	adds	r3, #1
   2582a:	607b      	str	r3, [r7, #4]
   2582c:	687b      	ldr	r3, [r7, #4]
   2582e:	2b00      	cmp	r3, #0
   25830:	d0ea      	beq.n	25808 <extint_is_syncing+0x10>
		}
	}
	return false;
   25832:	2300      	movs	r3, #0
}
   25834:	0018      	movs	r0, r3
   25836:	46bd      	mov	sp, r7
   25838:	b002      	add	sp, #8
   2583a:	bd80      	pop	{r7, pc}
   2583c:	40001800 	.word	0x40001800

00025840 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   25840:	b580      	push	{r7, lr}
   25842:	b084      	sub	sp, #16
   25844:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25846:	4b2d      	ldr	r3, [pc, #180]	; (258fc <_system_extint_init+0xbc>)
   25848:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2584a:	2140      	movs	r1, #64	; 0x40
   2584c:	2000      	movs	r0, #0
   2584e:	4b2c      	ldr	r3, [pc, #176]	; (25900 <_system_extint_init+0xc0>)
   25850:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25852:	003b      	movs	r3, r7
   25854:	0018      	movs	r0, r3
   25856:	4b2b      	ldr	r3, [pc, #172]	; (25904 <_system_extint_init+0xc4>)
   25858:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2585a:	003b      	movs	r3, r7
   2585c:	2200      	movs	r2, #0
   2585e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   25860:	003b      	movs	r3, r7
   25862:	0019      	movs	r1, r3
   25864:	2005      	movs	r0, #5
   25866:	4b28      	ldr	r3, [pc, #160]	; (25908 <_system_extint_init+0xc8>)
   25868:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2586a:	2005      	movs	r0, #5
   2586c:	4b27      	ldr	r3, [pc, #156]	; (2590c <_system_extint_init+0xcc>)
   2586e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25870:	2300      	movs	r3, #0
   25872:	60fb      	str	r3, [r7, #12]
   25874:	e018      	b.n	258a8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   25876:	68fb      	ldr	r3, [r7, #12]
   25878:	009b      	lsls	r3, r3, #2
   2587a:	2210      	movs	r2, #16
   2587c:	4694      	mov	ip, r2
   2587e:	44bc      	add	ip, r7
   25880:	4463      	add	r3, ip
   25882:	3b0c      	subs	r3, #12
   25884:	681a      	ldr	r2, [r3, #0]
   25886:	68fb      	ldr	r3, [r7, #12]
   25888:	009b      	lsls	r3, r3, #2
   2588a:	2110      	movs	r1, #16
   2588c:	468c      	mov	ip, r1
   2588e:	44bc      	add	ip, r7
   25890:	4463      	add	r3, ip
   25892:	3b0c      	subs	r3, #12
   25894:	681b      	ldr	r3, [r3, #0]
   25896:	781b      	ldrb	r3, [r3, #0]
   25898:	b2db      	uxtb	r3, r3
   2589a:	2101      	movs	r1, #1
   2589c:	430b      	orrs	r3, r1
   2589e:	b2db      	uxtb	r3, r3
   258a0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   258a2:	68fb      	ldr	r3, [r7, #12]
   258a4:	3301      	adds	r3, #1
   258a6:	60fb      	str	r3, [r7, #12]
   258a8:	68fb      	ldr	r3, [r7, #12]
   258aa:	2b00      	cmp	r3, #0
   258ac:	d0e3      	beq.n	25876 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   258ae:	46c0      	nop			; (mov r8, r8)
   258b0:	4b17      	ldr	r3, [pc, #92]	; (25910 <_system_extint_init+0xd0>)
   258b2:	4798      	blx	r3
   258b4:	1e03      	subs	r3, r0, #0
   258b6:	d1fb      	bne.n	258b0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   258b8:	230b      	movs	r3, #11
   258ba:	18fb      	adds	r3, r7, r3
   258bc:	2200      	movs	r2, #0
   258be:	701a      	strb	r2, [r3, #0]
   258c0:	e00d      	b.n	258de <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   258c2:	230b      	movs	r3, #11
   258c4:	18fb      	adds	r3, r7, r3
   258c6:	781a      	ldrb	r2, [r3, #0]
   258c8:	4b12      	ldr	r3, [pc, #72]	; (25914 <_system_extint_init+0xd4>)
   258ca:	0092      	lsls	r2, r2, #2
   258cc:	2100      	movs	r1, #0
   258ce:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   258d0:	230b      	movs	r3, #11
   258d2:	18fb      	adds	r3, r7, r3
   258d4:	781a      	ldrb	r2, [r3, #0]
   258d6:	230b      	movs	r3, #11
   258d8:	18fb      	adds	r3, r7, r3
   258da:	3201      	adds	r2, #1
   258dc:	701a      	strb	r2, [r3, #0]
   258de:	230b      	movs	r3, #11
   258e0:	18fb      	adds	r3, r7, r3
   258e2:	781b      	ldrb	r3, [r3, #0]
   258e4:	2b0f      	cmp	r3, #15
   258e6:	d9ec      	bls.n	258c2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   258e8:	2004      	movs	r0, #4
   258ea:	4b0b      	ldr	r3, [pc, #44]	; (25918 <_system_extint_init+0xd8>)
   258ec:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   258ee:	4b0b      	ldr	r3, [pc, #44]	; (2591c <_system_extint_init+0xdc>)
   258f0:	4798      	blx	r3
}
   258f2:	46c0      	nop			; (mov r8, r8)
   258f4:	46bd      	mov	sp, r7
   258f6:	b004      	add	sp, #16
   258f8:	bd80      	pop	{r7, pc}
   258fa:	46c0      	nop			; (mov r8, r8)
   258fc:	40001800 	.word	0x40001800
   25900:	000256fd 	.word	0x000256fd
   25904:	000256e5 	.word	0x000256e5
   25908:	00028f6d 	.word	0x00028f6d
   2590c:	00028fb1 	.word	0x00028fb1
   25910:	000257f9 	.word	0x000257f9
   25914:	20005b88 	.word	0x20005b88
   25918:	00025781 	.word	0x00025781
   2591c:	00025921 	.word	0x00025921

00025920 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   25920:	b580      	push	{r7, lr}
   25922:	b082      	sub	sp, #8
   25924:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25926:	4b15      	ldr	r3, [pc, #84]	; (2597c <_extint_enable+0x5c>)
   25928:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2592a:	2300      	movs	r3, #0
   2592c:	607b      	str	r3, [r7, #4]
   2592e:	e018      	b.n	25962 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   25930:	687b      	ldr	r3, [r7, #4]
   25932:	009b      	lsls	r3, r3, #2
   25934:	2208      	movs	r2, #8
   25936:	4694      	mov	ip, r2
   25938:	44bc      	add	ip, r7
   2593a:	4463      	add	r3, ip
   2593c:	3b08      	subs	r3, #8
   2593e:	681a      	ldr	r2, [r3, #0]
   25940:	687b      	ldr	r3, [r7, #4]
   25942:	009b      	lsls	r3, r3, #2
   25944:	2108      	movs	r1, #8
   25946:	468c      	mov	ip, r1
   25948:	44bc      	add	ip, r7
   2594a:	4463      	add	r3, ip
   2594c:	3b08      	subs	r3, #8
   2594e:	681b      	ldr	r3, [r3, #0]
   25950:	781b      	ldrb	r3, [r3, #0]
   25952:	b2db      	uxtb	r3, r3
   25954:	2102      	movs	r1, #2
   25956:	430b      	orrs	r3, r1
   25958:	b2db      	uxtb	r3, r3
   2595a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2595c:	687b      	ldr	r3, [r7, #4]
   2595e:	3301      	adds	r3, #1
   25960:	607b      	str	r3, [r7, #4]
   25962:	687b      	ldr	r3, [r7, #4]
   25964:	2b00      	cmp	r3, #0
   25966:	d0e3      	beq.n	25930 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   25968:	46c0      	nop			; (mov r8, r8)
   2596a:	4b05      	ldr	r3, [pc, #20]	; (25980 <_extint_enable+0x60>)
   2596c:	4798      	blx	r3
   2596e:	1e03      	subs	r3, r0, #0
   25970:	d1fb      	bne.n	2596a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   25972:	46c0      	nop			; (mov r8, r8)
   25974:	46bd      	mov	sp, r7
   25976:	b002      	add	sp, #8
   25978:	bd80      	pop	{r7, pc}
   2597a:	46c0      	nop			; (mov r8, r8)
   2597c:	40001800 	.word	0x40001800
   25980:	000257f9 	.word	0x000257f9

00025984 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   25984:	b580      	push	{r7, lr}
   25986:	b082      	sub	sp, #8
   25988:	af00      	add	r7, sp, #0
   2598a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2598c:	687b      	ldr	r3, [r7, #4]
   2598e:	2200      	movs	r2, #0
   25990:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   25992:	687b      	ldr	r3, [r7, #4]
   25994:	2200      	movs	r2, #0
   25996:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   25998:	687b      	ldr	r3, [r7, #4]
   2599a:	2201      	movs	r2, #1
   2599c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2599e:	687b      	ldr	r3, [r7, #4]
   259a0:	2201      	movs	r2, #1
   259a2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   259a4:	687b      	ldr	r3, [r7, #4]
   259a6:	2200      	movs	r2, #0
   259a8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   259aa:	687b      	ldr	r3, [r7, #4]
   259ac:	2202      	movs	r2, #2
   259ae:	72da      	strb	r2, [r3, #11]
}
   259b0:	46c0      	nop			; (mov r8, r8)
   259b2:	46bd      	mov	sp, r7
   259b4:	b002      	add	sp, #8
   259b6:	bd80      	pop	{r7, pc}

000259b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   259b8:	b580      	push	{r7, lr}
   259ba:	b086      	sub	sp, #24
   259bc:	af00      	add	r7, sp, #0
   259be:	0002      	movs	r2, r0
   259c0:	6039      	str	r1, [r7, #0]
   259c2:	1dfb      	adds	r3, r7, #7
   259c4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   259c6:	2308      	movs	r3, #8
   259c8:	18fb      	adds	r3, r7, r3
   259ca:	0018      	movs	r0, r3
   259cc:	4b36      	ldr	r3, [pc, #216]	; (25aa8 <extint_chan_set_config+0xf0>)
   259ce:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   259d0:	683b      	ldr	r3, [r7, #0]
   259d2:	685b      	ldr	r3, [r3, #4]
   259d4:	b2da      	uxtb	r2, r3
   259d6:	2308      	movs	r3, #8
   259d8:	18fb      	adds	r3, r7, r3
   259da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   259dc:	2308      	movs	r3, #8
   259de:	18fb      	adds	r3, r7, r3
   259e0:	2200      	movs	r2, #0
   259e2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   259e4:	683b      	ldr	r3, [r7, #0]
   259e6:	7a1a      	ldrb	r2, [r3, #8]
   259e8:	2308      	movs	r3, #8
   259ea:	18fb      	adds	r3, r7, r3
   259ec:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   259ee:	683b      	ldr	r3, [r7, #0]
   259f0:	681b      	ldr	r3, [r3, #0]
   259f2:	b2db      	uxtb	r3, r3
   259f4:	2208      	movs	r2, #8
   259f6:	18ba      	adds	r2, r7, r2
   259f8:	0011      	movs	r1, r2
   259fa:	0018      	movs	r0, r3
   259fc:	4b2b      	ldr	r3, [pc, #172]	; (25aac <extint_chan_set_config+0xf4>)
   259fe:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   25a00:	1dfb      	adds	r3, r7, #7
   25a02:	781b      	ldrb	r3, [r3, #0]
   25a04:	0018      	movs	r0, r3
   25a06:	4b2a      	ldr	r3, [pc, #168]	; (25ab0 <extint_chan_set_config+0xf8>)
   25a08:	4798      	blx	r3
   25a0a:	0003      	movs	r3, r0
   25a0c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   25a0e:	1dfb      	adds	r3, r7, #7
   25a10:	781b      	ldrb	r3, [r3, #0]
   25a12:	2207      	movs	r2, #7
   25a14:	4013      	ands	r3, r2
   25a16:	009b      	lsls	r3, r3, #2
   25a18:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   25a1a:	683b      	ldr	r3, [r7, #0]
   25a1c:	7adb      	ldrb	r3, [r3, #11]
   25a1e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   25a20:	683b      	ldr	r3, [r7, #0]
   25a22:	7a9b      	ldrb	r3, [r3, #10]
   25a24:	2b00      	cmp	r3, #0
   25a26:	d003      	beq.n	25a30 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   25a28:	697b      	ldr	r3, [r7, #20]
   25a2a:	2208      	movs	r2, #8
   25a2c:	4313      	orrs	r3, r2
   25a2e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   25a30:	1dfb      	adds	r3, r7, #7
   25a32:	781b      	ldrb	r3, [r3, #0]
   25a34:	08db      	lsrs	r3, r3, #3
   25a36:	b2db      	uxtb	r3, r3
   25a38:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   25a3a:	1dfb      	adds	r3, r7, #7
   25a3c:	781b      	ldrb	r3, [r3, #0]
   25a3e:	08db      	lsrs	r3, r3, #3
   25a40:	b2db      	uxtb	r3, r3
   25a42:	001a      	movs	r2, r3
   25a44:	693b      	ldr	r3, [r7, #16]
   25a46:	3206      	adds	r2, #6
   25a48:	0092      	lsls	r2, r2, #2
   25a4a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25a4c:	210f      	movs	r1, #15
   25a4e:	68fa      	ldr	r2, [r7, #12]
   25a50:	4091      	lsls	r1, r2
   25a52:	000a      	movs	r2, r1
   25a54:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25a56:	401a      	ands	r2, r3
			(new_config << config_pos);
   25a58:	6979      	ldr	r1, [r7, #20]
   25a5a:	68fb      	ldr	r3, [r7, #12]
   25a5c:	4099      	lsls	r1, r3
   25a5e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25a60:	431a      	orrs	r2, r3
   25a62:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25a64:	693b      	ldr	r3, [r7, #16]
   25a66:	1d82      	adds	r2, r0, #6
   25a68:	0092      	lsls	r2, r2, #2
   25a6a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   25a6c:	683b      	ldr	r3, [r7, #0]
   25a6e:	7a5b      	ldrb	r3, [r3, #9]
   25a70:	2b00      	cmp	r3, #0
   25a72:	d00a      	beq.n	25a8a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   25a74:	693b      	ldr	r3, [r7, #16]
   25a76:	695a      	ldr	r2, [r3, #20]
   25a78:	1dfb      	adds	r3, r7, #7
   25a7a:	781b      	ldrb	r3, [r3, #0]
   25a7c:	2101      	movs	r1, #1
   25a7e:	4099      	lsls	r1, r3
   25a80:	000b      	movs	r3, r1
   25a82:	431a      	orrs	r2, r3
   25a84:	693b      	ldr	r3, [r7, #16]
   25a86:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   25a88:	e00a      	b.n	25aa0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   25a8a:	693b      	ldr	r3, [r7, #16]
   25a8c:	695b      	ldr	r3, [r3, #20]
   25a8e:	1dfa      	adds	r2, r7, #7
   25a90:	7812      	ldrb	r2, [r2, #0]
   25a92:	2101      	movs	r1, #1
   25a94:	4091      	lsls	r1, r2
   25a96:	000a      	movs	r2, r1
   25a98:	43d2      	mvns	r2, r2
   25a9a:	401a      	ands	r2, r3
   25a9c:	693b      	ldr	r3, [r7, #16]
   25a9e:	615a      	str	r2, [r3, #20]
}
   25aa0:	46c0      	nop			; (mov r8, r8)
   25aa2:	46bd      	mov	sp, r7
   25aa4:	b006      	add	sp, #24
   25aa6:	bd80      	pop	{r7, pc}
   25aa8:	00025759 	.word	0x00025759
   25aac:	000292cd 	.word	0x000292cd
   25ab0:	000257ad 	.word	0x000257ad

00025ab4 <system_pinmux_get_config_defaults>:
{
   25ab4:	b580      	push	{r7, lr}
   25ab6:	b082      	sub	sp, #8
   25ab8:	af00      	add	r7, sp, #0
   25aba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25abc:	687b      	ldr	r3, [r7, #4]
   25abe:	2280      	movs	r2, #128	; 0x80
   25ac0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25ac2:	687b      	ldr	r3, [r7, #4]
   25ac4:	2200      	movs	r2, #0
   25ac6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25ac8:	687b      	ldr	r3, [r7, #4]
   25aca:	2201      	movs	r2, #1
   25acc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25ace:	687b      	ldr	r3, [r7, #4]
   25ad0:	2200      	movs	r2, #0
   25ad2:	70da      	strb	r2, [r3, #3]
}
   25ad4:	46c0      	nop			; (mov r8, r8)
   25ad6:	46bd      	mov	sp, r7
   25ad8:	b002      	add	sp, #8
   25ada:	bd80      	pop	{r7, pc}

00025adc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   25adc:	b580      	push	{r7, lr}
   25ade:	b084      	sub	sp, #16
   25ae0:	af00      	add	r7, sp, #0
   25ae2:	0002      	movs	r2, r0
   25ae4:	6039      	str	r1, [r7, #0]
   25ae6:	1dfb      	adds	r3, r7, #7
   25ae8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25aea:	230c      	movs	r3, #12
   25aec:	18fb      	adds	r3, r7, r3
   25aee:	0018      	movs	r0, r3
   25af0:	4b10      	ldr	r3, [pc, #64]	; (25b34 <port_pin_set_config+0x58>)
   25af2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25af4:	230c      	movs	r3, #12
   25af6:	18fb      	adds	r3, r7, r3
   25af8:	2280      	movs	r2, #128	; 0x80
   25afa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   25afc:	683b      	ldr	r3, [r7, #0]
   25afe:	781a      	ldrb	r2, [r3, #0]
   25b00:	230c      	movs	r3, #12
   25b02:	18fb      	adds	r3, r7, r3
   25b04:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   25b06:	683b      	ldr	r3, [r7, #0]
   25b08:	785a      	ldrb	r2, [r3, #1]
   25b0a:	230c      	movs	r3, #12
   25b0c:	18fb      	adds	r3, r7, r3
   25b0e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25b10:	683b      	ldr	r3, [r7, #0]
   25b12:	789a      	ldrb	r2, [r3, #2]
   25b14:	230c      	movs	r3, #12
   25b16:	18fb      	adds	r3, r7, r3
   25b18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   25b1a:	230c      	movs	r3, #12
   25b1c:	18fa      	adds	r2, r7, r3
   25b1e:	1dfb      	adds	r3, r7, #7
   25b20:	781b      	ldrb	r3, [r3, #0]
   25b22:	0011      	movs	r1, r2
   25b24:	0018      	movs	r0, r3
   25b26:	4b04      	ldr	r3, [pc, #16]	; (25b38 <port_pin_set_config+0x5c>)
   25b28:	4798      	blx	r3
}
   25b2a:	46c0      	nop			; (mov r8, r8)
   25b2c:	46bd      	mov	sp, r7
   25b2e:	b004      	add	sp, #16
   25b30:	bd80      	pop	{r7, pc}
   25b32:	46c0      	nop			; (mov r8, r8)
   25b34:	00025ab5 	.word	0x00025ab5
   25b38:	000292cd 	.word	0x000292cd

00025b3c <system_gclk_chan_get_config_defaults>:
{
   25b3c:	b580      	push	{r7, lr}
   25b3e:	b082      	sub	sp, #8
   25b40:	af00      	add	r7, sp, #0
   25b42:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25b44:	687b      	ldr	r3, [r7, #4]
   25b46:	2200      	movs	r2, #0
   25b48:	701a      	strb	r2, [r3, #0]
}
   25b4a:	46c0      	nop			; (mov r8, r8)
   25b4c:	46bd      	mov	sp, r7
   25b4e:	b002      	add	sp, #8
   25b50:	bd80      	pop	{r7, pc}
	...

00025b54 <system_apb_clock_set_mask>:
{
   25b54:	b580      	push	{r7, lr}
   25b56:	b082      	sub	sp, #8
   25b58:	af00      	add	r7, sp, #0
   25b5a:	0002      	movs	r2, r0
   25b5c:	6039      	str	r1, [r7, #0]
   25b5e:	1dfb      	adds	r3, r7, #7
   25b60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25b62:	1dfb      	adds	r3, r7, #7
   25b64:	781b      	ldrb	r3, [r3, #0]
   25b66:	2b01      	cmp	r3, #1
   25b68:	d00a      	beq.n	25b80 <system_apb_clock_set_mask+0x2c>
   25b6a:	2b02      	cmp	r3, #2
   25b6c:	d00f      	beq.n	25b8e <system_apb_clock_set_mask+0x3a>
   25b6e:	2b00      	cmp	r3, #0
   25b70:	d114      	bne.n	25b9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25b72:	4b0e      	ldr	r3, [pc, #56]	; (25bac <system_apb_clock_set_mask+0x58>)
   25b74:	4a0d      	ldr	r2, [pc, #52]	; (25bac <system_apb_clock_set_mask+0x58>)
   25b76:	6991      	ldr	r1, [r2, #24]
   25b78:	683a      	ldr	r2, [r7, #0]
   25b7a:	430a      	orrs	r2, r1
   25b7c:	619a      	str	r2, [r3, #24]
			break;
   25b7e:	e00f      	b.n	25ba0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25b80:	4b0a      	ldr	r3, [pc, #40]	; (25bac <system_apb_clock_set_mask+0x58>)
   25b82:	4a0a      	ldr	r2, [pc, #40]	; (25bac <system_apb_clock_set_mask+0x58>)
   25b84:	69d1      	ldr	r1, [r2, #28]
   25b86:	683a      	ldr	r2, [r7, #0]
   25b88:	430a      	orrs	r2, r1
   25b8a:	61da      	str	r2, [r3, #28]
			break;
   25b8c:	e008      	b.n	25ba0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25b8e:	4b07      	ldr	r3, [pc, #28]	; (25bac <system_apb_clock_set_mask+0x58>)
   25b90:	4a06      	ldr	r2, [pc, #24]	; (25bac <system_apb_clock_set_mask+0x58>)
   25b92:	6a11      	ldr	r1, [r2, #32]
   25b94:	683a      	ldr	r2, [r7, #0]
   25b96:	430a      	orrs	r2, r1
   25b98:	621a      	str	r2, [r3, #32]
			break;
   25b9a:	e001      	b.n	25ba0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25b9c:	2317      	movs	r3, #23
   25b9e:	e000      	b.n	25ba2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25ba0:	2300      	movs	r3, #0
}
   25ba2:	0018      	movs	r0, r3
   25ba4:	46bd      	mov	sp, r7
   25ba6:	b002      	add	sp, #8
   25ba8:	bd80      	pop	{r7, pc}
   25baa:	46c0      	nop			; (mov r8, r8)
   25bac:	40000400 	.word	0x40000400

00025bb0 <system_interrupt_enable>:
{
   25bb0:	b580      	push	{r7, lr}
   25bb2:	b082      	sub	sp, #8
   25bb4:	af00      	add	r7, sp, #0
   25bb6:	0002      	movs	r2, r0
   25bb8:	1dfb      	adds	r3, r7, #7
   25bba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25bbc:	4b06      	ldr	r3, [pc, #24]	; (25bd8 <system_interrupt_enable+0x28>)
   25bbe:	1dfa      	adds	r2, r7, #7
   25bc0:	7812      	ldrb	r2, [r2, #0]
   25bc2:	0011      	movs	r1, r2
   25bc4:	221f      	movs	r2, #31
   25bc6:	400a      	ands	r2, r1
   25bc8:	2101      	movs	r1, #1
   25bca:	4091      	lsls	r1, r2
   25bcc:	000a      	movs	r2, r1
   25bce:	601a      	str	r2, [r3, #0]
}
   25bd0:	46c0      	nop			; (mov r8, r8)
   25bd2:	46bd      	mov	sp, r7
   25bd4:	b002      	add	sp, #8
   25bd6:	bd80      	pop	{r7, pc}
   25bd8:	e000e100 	.word	0xe000e100

00025bdc <system_interrupt_disable>:
{
   25bdc:	b580      	push	{r7, lr}
   25bde:	b082      	sub	sp, #8
   25be0:	af00      	add	r7, sp, #0
   25be2:	0002      	movs	r2, r0
   25be4:	1dfb      	adds	r3, r7, #7
   25be6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25be8:	4a07      	ldr	r2, [pc, #28]	; (25c08 <system_interrupt_disable+0x2c>)
   25bea:	1dfb      	adds	r3, r7, #7
   25bec:	781b      	ldrb	r3, [r3, #0]
   25bee:	0019      	movs	r1, r3
   25bf0:	231f      	movs	r3, #31
   25bf2:	400b      	ands	r3, r1
   25bf4:	2101      	movs	r1, #1
   25bf6:	4099      	lsls	r1, r3
   25bf8:	000b      	movs	r3, r1
   25bfa:	0019      	movs	r1, r3
   25bfc:	2380      	movs	r3, #128	; 0x80
   25bfe:	50d1      	str	r1, [r2, r3]
}
   25c00:	46c0      	nop			; (mov r8, r8)
   25c02:	46bd      	mov	sp, r7
   25c04:	b002      	add	sp, #8
   25c06:	bd80      	pop	{r7, pc}
   25c08:	e000e100 	.word	0xe000e100

00025c0c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   25c0c:	b580      	push	{r7, lr}
   25c0e:	b084      	sub	sp, #16
   25c10:	af00      	add	r7, sp, #0
   25c12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25c14:	687b      	ldr	r3, [r7, #4]
   25c16:	681b      	ldr	r3, [r3, #0]
   25c18:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   25c1a:	68fb      	ldr	r3, [r7, #12]
   25c1c:	7a9b      	ldrb	r3, [r3, #10]
   25c1e:	b2db      	uxtb	r3, r3
   25c20:	b25b      	sxtb	r3, r3
   25c22:	2b00      	cmp	r3, #0
   25c24:	da01      	bge.n	25c2a <rtc_calendar_is_syncing+0x1e>
                return true;
   25c26:	2301      	movs	r3, #1
   25c28:	e000      	b.n	25c2c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   25c2a:	2300      	movs	r3, #0
}
   25c2c:	0018      	movs	r0, r3
   25c2e:	46bd      	mov	sp, r7
   25c30:	b004      	add	sp, #16
   25c32:	bd80      	pop	{r7, pc}

00025c34 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25c34:	b580      	push	{r7, lr}
   25c36:	b084      	sub	sp, #16
   25c38:	af00      	add	r7, sp, #0
   25c3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25c3c:	687b      	ldr	r3, [r7, #4]
   25c3e:	681b      	ldr	r3, [r3, #0]
   25c40:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   25c42:	2003      	movs	r0, #3
   25c44:	4b0a      	ldr	r3, [pc, #40]	; (25c70 <rtc_calendar_enable+0x3c>)
   25c46:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25c48:	46c0      	nop			; (mov r8, r8)
   25c4a:	687b      	ldr	r3, [r7, #4]
   25c4c:	0018      	movs	r0, r3
   25c4e:	4b09      	ldr	r3, [pc, #36]	; (25c74 <rtc_calendar_enable+0x40>)
   25c50:	4798      	blx	r3
   25c52:	1e03      	subs	r3, r0, #0
   25c54:	d1f9      	bne.n	25c4a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   25c56:	68fb      	ldr	r3, [r7, #12]
   25c58:	881b      	ldrh	r3, [r3, #0]
   25c5a:	b29b      	uxth	r3, r3
   25c5c:	2202      	movs	r2, #2
   25c5e:	4313      	orrs	r3, r2
   25c60:	b29a      	uxth	r2, r3
   25c62:	68fb      	ldr	r3, [r7, #12]
   25c64:	801a      	strh	r2, [r3, #0]
}
   25c66:	46c0      	nop			; (mov r8, r8)
   25c68:	46bd      	mov	sp, r7
   25c6a:	b004      	add	sp, #16
   25c6c:	bd80      	pop	{r7, pc}
   25c6e:	46c0      	nop			; (mov r8, r8)
   25c70:	00025bb1 	.word	0x00025bb1
   25c74:	00025c0d 	.word	0x00025c0d

00025c78 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   25c78:	b580      	push	{r7, lr}
   25c7a:	b084      	sub	sp, #16
   25c7c:	af00      	add	r7, sp, #0
   25c7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25c80:	687b      	ldr	r3, [r7, #4]
   25c82:	681b      	ldr	r3, [r3, #0]
   25c84:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   25c86:	2003      	movs	r0, #3
   25c88:	4b0d      	ldr	r3, [pc, #52]	; (25cc0 <rtc_calendar_disable+0x48>)
   25c8a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25c8c:	46c0      	nop			; (mov r8, r8)
   25c8e:	687b      	ldr	r3, [r7, #4]
   25c90:	0018      	movs	r0, r3
   25c92:	4b0c      	ldr	r3, [pc, #48]	; (25cc4 <rtc_calendar_disable+0x4c>)
   25c94:	4798      	blx	r3
   25c96:	1e03      	subs	r3, r0, #0
   25c98:	d1f9      	bne.n	25c8e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   25c9a:	68fb      	ldr	r3, [r7, #12]
   25c9c:	22c1      	movs	r2, #193	; 0xc1
   25c9e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   25ca0:	68fb      	ldr	r3, [r7, #12]
   25ca2:	22c1      	movs	r2, #193	; 0xc1
   25ca4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   25ca6:	68fb      	ldr	r3, [r7, #12]
   25ca8:	881b      	ldrh	r3, [r3, #0]
   25caa:	b29b      	uxth	r3, r3
   25cac:	2202      	movs	r2, #2
   25cae:	4393      	bics	r3, r2
   25cb0:	b29a      	uxth	r2, r3
   25cb2:	68fb      	ldr	r3, [r7, #12]
   25cb4:	801a      	strh	r2, [r3, #0]
}
   25cb6:	46c0      	nop			; (mov r8, r8)
   25cb8:	46bd      	mov	sp, r7
   25cba:	b004      	add	sp, #16
   25cbc:	bd80      	pop	{r7, pc}
   25cbe:	46c0      	nop			; (mov r8, r8)
   25cc0:	00025bdd 	.word	0x00025bdd
   25cc4:	00025c0d 	.word	0x00025c0d

00025cc8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   25cc8:	b580      	push	{r7, lr}
   25cca:	b084      	sub	sp, #16
   25ccc:	af00      	add	r7, sp, #0
   25cce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25cd0:	687b      	ldr	r3, [r7, #4]
   25cd2:	681b      	ldr	r3, [r3, #0]
   25cd4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   25cd6:	687b      	ldr	r3, [r7, #4]
   25cd8:	0018      	movs	r0, r3
   25cda:	4b0d      	ldr	r3, [pc, #52]	; (25d10 <rtc_calendar_reset+0x48>)
   25cdc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   25cde:	687b      	ldr	r3, [r7, #4]
   25ce0:	2200      	movs	r2, #0
   25ce2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   25ce4:	687b      	ldr	r3, [r7, #4]
   25ce6:	2200      	movs	r2, #0
   25ce8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   25cea:	46c0      	nop			; (mov r8, r8)
   25cec:	687b      	ldr	r3, [r7, #4]
   25cee:	0018      	movs	r0, r3
   25cf0:	4b08      	ldr	r3, [pc, #32]	; (25d14 <rtc_calendar_reset+0x4c>)
   25cf2:	4798      	blx	r3
   25cf4:	1e03      	subs	r3, r0, #0
   25cf6:	d1f9      	bne.n	25cec <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   25cf8:	68fb      	ldr	r3, [r7, #12]
   25cfa:	881b      	ldrh	r3, [r3, #0]
   25cfc:	b29b      	uxth	r3, r3
   25cfe:	2201      	movs	r2, #1
   25d00:	4313      	orrs	r3, r2
   25d02:	b29a      	uxth	r2, r3
   25d04:	68fb      	ldr	r3, [r7, #12]
   25d06:	801a      	strh	r2, [r3, #0]
}
   25d08:	46c0      	nop			; (mov r8, r8)
   25d0a:	46bd      	mov	sp, r7
   25d0c:	b004      	add	sp, #16
   25d0e:	bd80      	pop	{r7, pc}
   25d10:	00025c79 	.word	0x00025c79
   25d14:	00025c0d 	.word	0x00025c0d

00025d18 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   25d18:	b580      	push	{r7, lr}
   25d1a:	b084      	sub	sp, #16
   25d1c:	af00      	add	r7, sp, #0
   25d1e:	6078      	str	r0, [r7, #4]
   25d20:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   25d22:	683b      	ldr	r3, [r7, #0]
   25d24:	88db      	ldrh	r3, [r3, #6]
   25d26:	001a      	movs	r2, r3
   25d28:	687b      	ldr	r3, [r7, #4]
   25d2a:	88db      	ldrh	r3, [r3, #6]
   25d2c:	1ad3      	subs	r3, r2, r3
   25d2e:	069b      	lsls	r3, r3, #26
   25d30:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   25d32:	683b      	ldr	r3, [r7, #0]
   25d34:	795b      	ldrb	r3, [r3, #5]
   25d36:	059b      	lsls	r3, r3, #22
   25d38:	001a      	movs	r2, r3
   25d3a:	68fb      	ldr	r3, [r7, #12]
   25d3c:	4313      	orrs	r3, r2
   25d3e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   25d40:	683b      	ldr	r3, [r7, #0]
   25d42:	791b      	ldrb	r3, [r3, #4]
   25d44:	045b      	lsls	r3, r3, #17
   25d46:	001a      	movs	r2, r3
   25d48:	68fb      	ldr	r3, [r7, #12]
   25d4a:	4313      	orrs	r3, r2
   25d4c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   25d4e:	683b      	ldr	r3, [r7, #0]
   25d50:	789b      	ldrb	r3, [r3, #2]
   25d52:	031b      	lsls	r3, r3, #12
   25d54:	001a      	movs	r2, r3
   25d56:	68fb      	ldr	r3, [r7, #12]
   25d58:	4313      	orrs	r3, r2
   25d5a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   25d5c:	687b      	ldr	r3, [r7, #4]
   25d5e:	791b      	ldrb	r3, [r3, #4]
   25d60:	2201      	movs	r2, #1
   25d62:	4053      	eors	r3, r2
   25d64:	b2db      	uxtb	r3, r3
   25d66:	2b00      	cmp	r3, #0
   25d68:	d008      	beq.n	25d7c <rtc_calendar_time_to_register_value+0x64>
   25d6a:	683b      	ldr	r3, [r7, #0]
   25d6c:	78db      	ldrb	r3, [r3, #3]
   25d6e:	2b00      	cmp	r3, #0
   25d70:	d004      	beq.n	25d7c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   25d72:	68fb      	ldr	r3, [r7, #12]
   25d74:	2280      	movs	r2, #128	; 0x80
   25d76:	0252      	lsls	r2, r2, #9
   25d78:	4313      	orrs	r3, r2
   25d7a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   25d7c:	683b      	ldr	r3, [r7, #0]
   25d7e:	785b      	ldrb	r3, [r3, #1]
   25d80:	019b      	lsls	r3, r3, #6
   25d82:	001a      	movs	r2, r3
   25d84:	68fb      	ldr	r3, [r7, #12]
   25d86:	4313      	orrs	r3, r2
   25d88:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   25d8a:	683b      	ldr	r3, [r7, #0]
   25d8c:	781b      	ldrb	r3, [r3, #0]
   25d8e:	001a      	movs	r2, r3
   25d90:	68fb      	ldr	r3, [r7, #12]
   25d92:	4313      	orrs	r3, r2
   25d94:	60fb      	str	r3, [r7, #12]

	return register_value;
   25d96:	68fb      	ldr	r3, [r7, #12]
}
   25d98:	0018      	movs	r0, r3
   25d9a:	46bd      	mov	sp, r7
   25d9c:	b004      	add	sp, #16
   25d9e:	bd80      	pop	{r7, pc}

00025da0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   25da0:	b580      	push	{r7, lr}
   25da2:	b084      	sub	sp, #16
   25da4:	af00      	add	r7, sp, #0
   25da6:	60f8      	str	r0, [r7, #12]
   25da8:	60b9      	str	r1, [r7, #8]
   25daa:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   25dac:	68bb      	ldr	r3, [r7, #8]
   25dae:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   25db0:	b29a      	uxth	r2, r3
   25db2:	68fb      	ldr	r3, [r7, #12]
   25db4:	88db      	ldrh	r3, [r3, #6]
   25db6:	18d3      	adds	r3, r2, r3
   25db8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   25dba:	687b      	ldr	r3, [r7, #4]
   25dbc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   25dbe:	68bb      	ldr	r3, [r7, #8]
   25dc0:	0d9b      	lsrs	r3, r3, #22
   25dc2:	b2db      	uxtb	r3, r3
   25dc4:	220f      	movs	r2, #15
   25dc6:	4013      	ands	r3, r2
   25dc8:	b2da      	uxtb	r2, r3
   25dca:	687b      	ldr	r3, [r7, #4]
   25dcc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   25dce:	68bb      	ldr	r3, [r7, #8]
   25dd0:	0c5b      	lsrs	r3, r3, #17
   25dd2:	b2db      	uxtb	r3, r3
   25dd4:	221f      	movs	r2, #31
   25dd6:	4013      	ands	r3, r2
   25dd8:	b2da      	uxtb	r2, r3
   25dda:	687b      	ldr	r3, [r7, #4]
   25ddc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   25dde:	68fb      	ldr	r3, [r7, #12]
   25de0:	791b      	ldrb	r3, [r3, #4]
   25de2:	2b00      	cmp	r3, #0
   25de4:	d008      	beq.n	25df8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   25de6:	68bb      	ldr	r3, [r7, #8]
   25de8:	0b1b      	lsrs	r3, r3, #12
   25dea:	b2db      	uxtb	r3, r3
   25dec:	221f      	movs	r2, #31
   25dee:	4013      	ands	r3, r2
   25df0:	b2da      	uxtb	r2, r3
   25df2:	687b      	ldr	r3, [r7, #4]
   25df4:	709a      	strb	r2, [r3, #2]
   25df6:	e010      	b.n	25e1a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   25df8:	68bb      	ldr	r3, [r7, #8]
   25dfa:	0b1b      	lsrs	r3, r3, #12
   25dfc:	b2db      	uxtb	r3, r3
   25dfe:	220f      	movs	r2, #15
   25e00:	4013      	ands	r3, r2
   25e02:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   25e04:	687b      	ldr	r3, [r7, #4]
   25e06:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   25e08:	68ba      	ldr	r2, [r7, #8]
   25e0a:	2380      	movs	r3, #128	; 0x80
   25e0c:	025b      	lsls	r3, r3, #9
   25e0e:	4013      	ands	r3, r2
   25e10:	1e5a      	subs	r2, r3, #1
   25e12:	4193      	sbcs	r3, r2
   25e14:	b2da      	uxtb	r2, r3
   25e16:	687b      	ldr	r3, [r7, #4]
   25e18:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   25e1a:	68bb      	ldr	r3, [r7, #8]
   25e1c:	099b      	lsrs	r3, r3, #6
   25e1e:	b2db      	uxtb	r3, r3
   25e20:	223f      	movs	r2, #63	; 0x3f
   25e22:	4013      	ands	r3, r2
   25e24:	b2da      	uxtb	r2, r3
   25e26:	687b      	ldr	r3, [r7, #4]
   25e28:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   25e2a:	68bb      	ldr	r3, [r7, #8]
   25e2c:	b2db      	uxtb	r3, r3
   25e2e:	223f      	movs	r2, #63	; 0x3f
   25e30:	4013      	ands	r3, r2
   25e32:	b2da      	uxtb	r2, r3
   25e34:	687b      	ldr	r3, [r7, #4]
   25e36:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   25e38:	46c0      	nop			; (mov r8, r8)
   25e3a:	46bd      	mov	sp, r7
   25e3c:	b004      	add	sp, #16
   25e3e:	bd80      	pop	{r7, pc}

00025e40 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   25e40:	b580      	push	{r7, lr}
   25e42:	b084      	sub	sp, #16
   25e44:	af00      	add	r7, sp, #0
   25e46:	6078      	str	r0, [r7, #4]
   25e48:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25e4a:	687b      	ldr	r3, [r7, #4]
   25e4c:	681b      	ldr	r3, [r3, #0]
   25e4e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   25e50:	683b      	ldr	r3, [r7, #0]
   25e52:	881a      	ldrh	r2, [r3, #0]
   25e54:	230e      	movs	r3, #14
   25e56:	18fb      	adds	r3, r7, r3
   25e58:	2108      	movs	r1, #8
   25e5a:	430a      	orrs	r2, r1
   25e5c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   25e5e:	683b      	ldr	r3, [r7, #0]
   25e60:	791b      	ldrb	r3, [r3, #4]
   25e62:	2201      	movs	r2, #1
   25e64:	4053      	eors	r3, r2
   25e66:	b2db      	uxtb	r3, r3
   25e68:	2b00      	cmp	r3, #0
   25e6a:	d007      	beq.n	25e7c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   25e6c:	230e      	movs	r3, #14
   25e6e:	18fb      	adds	r3, r7, r3
   25e70:	220e      	movs	r2, #14
   25e72:	18ba      	adds	r2, r7, r2
   25e74:	8812      	ldrh	r2, [r2, #0]
   25e76:	2140      	movs	r1, #64	; 0x40
   25e78:	430a      	orrs	r2, r1
   25e7a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   25e7c:	683b      	ldr	r3, [r7, #0]
   25e7e:	789b      	ldrb	r3, [r3, #2]
   25e80:	2b00      	cmp	r3, #0
   25e82:	d007      	beq.n	25e94 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   25e84:	230e      	movs	r3, #14
   25e86:	18fb      	adds	r3, r7, r3
   25e88:	220e      	movs	r2, #14
   25e8a:	18ba      	adds	r2, r7, r2
   25e8c:	8812      	ldrh	r2, [r2, #0]
   25e8e:	2180      	movs	r1, #128	; 0x80
   25e90:	430a      	orrs	r2, r1
   25e92:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   25e94:	68bb      	ldr	r3, [r7, #8]
   25e96:	220e      	movs	r2, #14
   25e98:	18ba      	adds	r2, r7, r2
   25e9a:	8812      	ldrh	r2, [r2, #0]
   25e9c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   25e9e:	683b      	ldr	r3, [r7, #0]
   25ea0:	78db      	ldrb	r3, [r3, #3]
   25ea2:	2b00      	cmp	r3, #0
   25ea4:	d008      	beq.n	25eb8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   25ea6:	68bb      	ldr	r3, [r7, #8]
   25ea8:	885b      	ldrh	r3, [r3, #2]
   25eaa:	b29b      	uxth	r3, r3
   25eac:	2280      	movs	r2, #128	; 0x80
   25eae:	01d2      	lsls	r2, r2, #7
   25eb0:	4313      	orrs	r3, r2
   25eb2:	b29a      	uxth	r2, r3
   25eb4:	68bb      	ldr	r3, [r7, #8]
   25eb6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25eb8:	230d      	movs	r3, #13
   25eba:	18fb      	adds	r3, r7, r3
   25ebc:	2200      	movs	r2, #0
   25ebe:	701a      	strb	r2, [r3, #0]
   25ec0:	e017      	b.n	25ef2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   25ec2:	230d      	movs	r3, #13
   25ec4:	18fb      	adds	r3, r7, r3
   25ec6:	781a      	ldrb	r2, [r3, #0]
   25ec8:	0013      	movs	r3, r2
   25eca:	009b      	lsls	r3, r3, #2
   25ecc:	189b      	adds	r3, r3, r2
   25ece:	005b      	lsls	r3, r3, #1
   25ed0:	3308      	adds	r3, #8
   25ed2:	683a      	ldr	r2, [r7, #0]
   25ed4:	18d1      	adds	r1, r2, r3
   25ed6:	230d      	movs	r3, #13
   25ed8:	18fb      	adds	r3, r7, r3
   25eda:	781a      	ldrb	r2, [r3, #0]
   25edc:	687b      	ldr	r3, [r7, #4]
   25ede:	0018      	movs	r0, r3
   25ee0:	4b08      	ldr	r3, [pc, #32]	; (25f04 <_rtc_calendar_set_config+0xc4>)
   25ee2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25ee4:	230d      	movs	r3, #13
   25ee6:	18fb      	adds	r3, r7, r3
   25ee8:	781a      	ldrb	r2, [r3, #0]
   25eea:	230d      	movs	r3, #13
   25eec:	18fb      	adds	r3, r7, r3
   25eee:	3201      	adds	r2, #1
   25ef0:	701a      	strb	r2, [r3, #0]
   25ef2:	230d      	movs	r3, #13
   25ef4:	18fb      	adds	r3, r7, r3
   25ef6:	781b      	ldrb	r3, [r3, #0]
   25ef8:	2b00      	cmp	r3, #0
   25efa:	d0e2      	beq.n	25ec2 <_rtc_calendar_set_config+0x82>
	}
}
   25efc:	46c0      	nop			; (mov r8, r8)
   25efe:	46bd      	mov	sp, r7
   25f00:	b004      	add	sp, #16
   25f02:	bd80      	pop	{r7, pc}
   25f04:	00026029 	.word	0x00026029

00025f08 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   25f08:	b580      	push	{r7, lr}
   25f0a:	b086      	sub	sp, #24
   25f0c:	af00      	add	r7, sp, #0
   25f0e:	60f8      	str	r0, [r7, #12]
   25f10:	60b9      	str	r1, [r7, #8]
   25f12:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   25f14:	68fb      	ldr	r3, [r7, #12]
   25f16:	68ba      	ldr	r2, [r7, #8]
   25f18:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   25f1a:	2120      	movs	r1, #32
   25f1c:	2000      	movs	r0, #0
   25f1e:	4b18      	ldr	r3, [pc, #96]	; (25f80 <rtc_calendar_init+0x78>)
   25f20:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25f22:	2314      	movs	r3, #20
   25f24:	18fb      	adds	r3, r7, r3
   25f26:	0018      	movs	r0, r3
   25f28:	4b16      	ldr	r3, [pc, #88]	; (25f84 <rtc_calendar_init+0x7c>)
   25f2a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   25f2c:	2314      	movs	r3, #20
   25f2e:	18fb      	adds	r3, r7, r3
   25f30:	2202      	movs	r2, #2
   25f32:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   25f34:	2314      	movs	r3, #20
   25f36:	18fb      	adds	r3, r7, r3
   25f38:	0019      	movs	r1, r3
   25f3a:	2004      	movs	r0, #4
   25f3c:	4b12      	ldr	r3, [pc, #72]	; (25f88 <rtc_calendar_init+0x80>)
   25f3e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   25f40:	2004      	movs	r0, #4
   25f42:	4b12      	ldr	r3, [pc, #72]	; (25f8c <rtc_calendar_init+0x84>)
   25f44:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   25f46:	68fb      	ldr	r3, [r7, #12]
   25f48:	0018      	movs	r0, r3
   25f4a:	4b11      	ldr	r3, [pc, #68]	; (25f90 <rtc_calendar_init+0x88>)
   25f4c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   25f4e:	687b      	ldr	r3, [r7, #4]
   25f50:	791a      	ldrb	r2, [r3, #4]
   25f52:	68fb      	ldr	r3, [r7, #12]
   25f54:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   25f56:	687b      	ldr	r3, [r7, #4]
   25f58:	78da      	ldrb	r2, [r3, #3]
   25f5a:	68fb      	ldr	r3, [r7, #12]
   25f5c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   25f5e:	687b      	ldr	r3, [r7, #4]
   25f60:	88da      	ldrh	r2, [r3, #6]
   25f62:	68fb      	ldr	r3, [r7, #12]
   25f64:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   25f66:	4b0b      	ldr	r3, [pc, #44]	; (25f94 <rtc_calendar_init+0x8c>)
   25f68:	68fa      	ldr	r2, [r7, #12]
   25f6a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   25f6c:	687a      	ldr	r2, [r7, #4]
   25f6e:	68fb      	ldr	r3, [r7, #12]
   25f70:	0011      	movs	r1, r2
   25f72:	0018      	movs	r0, r3
   25f74:	4b08      	ldr	r3, [pc, #32]	; (25f98 <rtc_calendar_init+0x90>)
   25f76:	4798      	blx	r3
}
   25f78:	46c0      	nop			; (mov r8, r8)
   25f7a:	46bd      	mov	sp, r7
   25f7c:	b006      	add	sp, #24
   25f7e:	bd80      	pop	{r7, pc}
   25f80:	00025b55 	.word	0x00025b55
   25f84:	00025b3d 	.word	0x00025b3d
   25f88:	00028f6d 	.word	0x00028f6d
   25f8c:	00028fb1 	.word	0x00028fb1
   25f90:	00025cc9 	.word	0x00025cc9
   25f94:	20005bc8 	.word	0x20005bc8
   25f98:	00025e41 	.word	0x00025e41

00025f9c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   25f9c:	b580      	push	{r7, lr}
   25f9e:	b084      	sub	sp, #16
   25fa0:	af00      	add	r7, sp, #0
   25fa2:	6078      	str	r0, [r7, #4]
   25fa4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25fa6:	687b      	ldr	r3, [r7, #4]
   25fa8:	681b      	ldr	r3, [r3, #0]
   25faa:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   25fac:	687b      	ldr	r3, [r7, #4]
   25fae:	795b      	ldrb	r3, [r3, #5]
   25fb0:	2201      	movs	r2, #1
   25fb2:	4053      	eors	r3, r2
   25fb4:	b2db      	uxtb	r3, r3
   25fb6:	2b00      	cmp	r3, #0
   25fb8:	d00a      	beq.n	25fd0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   25fba:	68fb      	ldr	r3, [r7, #12]
   25fbc:	4a16      	ldr	r2, [pc, #88]	; (26018 <rtc_calendar_get_time+0x7c>)
   25fbe:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   25fc0:	46c0      	nop			; (mov r8, r8)
   25fc2:	687b      	ldr	r3, [r7, #4]
   25fc4:	0018      	movs	r0, r3
   25fc6:	4b15      	ldr	r3, [pc, #84]	; (2601c <rtc_calendar_get_time+0x80>)
   25fc8:	4798      	blx	r3
   25fca:	1e03      	subs	r3, r0, #0
   25fcc:	d1f9      	bne.n	25fc2 <rtc_calendar_get_time+0x26>
   25fce:	e016      	b.n	25ffe <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   25fd0:	68fb      	ldr	r3, [r7, #12]
   25fd2:	885b      	ldrh	r3, [r3, #2]
   25fd4:	b29b      	uxth	r3, r3
   25fd6:	001a      	movs	r2, r3
   25fd8:	2380      	movs	r3, #128	; 0x80
   25fda:	01db      	lsls	r3, r3, #7
   25fdc:	4013      	ands	r3, r2
   25fde:	d10e      	bne.n	25ffe <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   25fe0:	68fb      	ldr	r3, [r7, #12]
   25fe2:	885b      	ldrh	r3, [r3, #2]
   25fe4:	b29b      	uxth	r3, r3
   25fe6:	4a0e      	ldr	r2, [pc, #56]	; (26020 <rtc_calendar_get_time+0x84>)
   25fe8:	4313      	orrs	r3, r2
   25fea:	b29a      	uxth	r2, r3
   25fec:	68fb      	ldr	r3, [r7, #12]
   25fee:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   25ff0:	46c0      	nop			; (mov r8, r8)
   25ff2:	687b      	ldr	r3, [r7, #4]
   25ff4:	0018      	movs	r0, r3
   25ff6:	4b09      	ldr	r3, [pc, #36]	; (2601c <rtc_calendar_get_time+0x80>)
   25ff8:	4798      	blx	r3
   25ffa:	1e03      	subs	r3, r0, #0
   25ffc:	d1f9      	bne.n	25ff2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   25ffe:	68fb      	ldr	r3, [r7, #12]
   26000:	691b      	ldr	r3, [r3, #16]
   26002:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26004:	683a      	ldr	r2, [r7, #0]
   26006:	68b9      	ldr	r1, [r7, #8]
   26008:	687b      	ldr	r3, [r7, #4]
   2600a:	0018      	movs	r0, r3
   2600c:	4b05      	ldr	r3, [pc, #20]	; (26024 <rtc_calendar_get_time+0x88>)
   2600e:	4798      	blx	r3
}
   26010:	46c0      	nop			; (mov r8, r8)
   26012:	46bd      	mov	sp, r7
   26014:	b004      	add	sp, #16
   26016:	bd80      	pop	{r7, pc}
   26018:	ffff8000 	.word	0xffff8000
   2601c:	00025c0d 	.word	0x00025c0d
   26020:	ffffc000 	.word	0xffffc000
   26024:	00025da1 	.word	0x00025da1

00026028 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26028:	b580      	push	{r7, lr}
   2602a:	b086      	sub	sp, #24
   2602c:	af00      	add	r7, sp, #0
   2602e:	60f8      	str	r0, [r7, #12]
   26030:	60b9      	str	r1, [r7, #8]
   26032:	1dfb      	adds	r3, r7, #7
   26034:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26036:	68fb      	ldr	r3, [r7, #12]
   26038:	681b      	ldr	r3, [r3, #0]
   2603a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2603c:	1dfb      	adds	r3, r7, #7
   2603e:	781b      	ldrb	r3, [r3, #0]
   26040:	2b01      	cmp	r3, #1
   26042:	d901      	bls.n	26048 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26044:	2317      	movs	r3, #23
   26046:	e021      	b.n	2608c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26048:	68ba      	ldr	r2, [r7, #8]
   2604a:	68fb      	ldr	r3, [r7, #12]
   2604c:	0011      	movs	r1, r2
   2604e:	0018      	movs	r0, r3
   26050:	4b10      	ldr	r3, [pc, #64]	; (26094 <rtc_calendar_set_alarm+0x6c>)
   26052:	4798      	blx	r3
   26054:	0003      	movs	r3, r0
   26056:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26058:	46c0      	nop			; (mov r8, r8)
   2605a:	68fb      	ldr	r3, [r7, #12]
   2605c:	0018      	movs	r0, r3
   2605e:	4b0e      	ldr	r3, [pc, #56]	; (26098 <rtc_calendar_set_alarm+0x70>)
   26060:	4798      	blx	r3
   26062:	1e03      	subs	r3, r0, #0
   26064:	d1f9      	bne.n	2605a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26066:	1dfb      	adds	r3, r7, #7
   26068:	781a      	ldrb	r2, [r3, #0]
   2606a:	697b      	ldr	r3, [r7, #20]
   2606c:	3203      	adds	r2, #3
   2606e:	00d2      	lsls	r2, r2, #3
   26070:	6939      	ldr	r1, [r7, #16]
   26072:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26074:	1dfb      	adds	r3, r7, #7
   26076:	781b      	ldrb	r3, [r3, #0]
   26078:	68ba      	ldr	r2, [r7, #8]
   2607a:	7a11      	ldrb	r1, [r2, #8]
   2607c:	697a      	ldr	r2, [r7, #20]
   2607e:	3303      	adds	r3, #3
   26080:	00db      	lsls	r3, r3, #3
   26082:	18d3      	adds	r3, r2, r3
   26084:	3304      	adds	r3, #4
   26086:	1c0a      	adds	r2, r1, #0
   26088:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2608a:	2300      	movs	r3, #0
}
   2608c:	0018      	movs	r0, r3
   2608e:	46bd      	mov	sp, r7
   26090:	b006      	add	sp, #24
   26092:	bd80      	pop	{r7, pc}
   26094:	00025d19 	.word	0x00025d19
   26098:	00025c0d 	.word	0x00025c0d

0002609c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   2609c:	b580      	push	{r7, lr}
   2609e:	b086      	sub	sp, #24
   260a0:	af00      	add	r7, sp, #0
   260a2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   260a4:	4b28      	ldr	r3, [pc, #160]	; (26148 <_rtc_interrupt_handler+0xac>)
   260a6:	687a      	ldr	r2, [r7, #4]
   260a8:	0092      	lsls	r2, r2, #2
   260aa:	58d3      	ldr	r3, [r2, r3]
   260ac:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   260ae:	697b      	ldr	r3, [r7, #20]
   260b0:	681b      	ldr	r3, [r3, #0]
   260b2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   260b4:	230e      	movs	r3, #14
   260b6:	18fb      	adds	r3, r7, r3
   260b8:	697a      	ldr	r2, [r7, #20]
   260ba:	8a52      	ldrh	r2, [r2, #18]
   260bc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   260be:	697b      	ldr	r3, [r7, #20]
   260c0:	8a1b      	ldrh	r3, [r3, #16]
   260c2:	b29a      	uxth	r2, r3
   260c4:	230e      	movs	r3, #14
   260c6:	18fb      	adds	r3, r7, r3
   260c8:	210e      	movs	r1, #14
   260ca:	1879      	adds	r1, r7, r1
   260cc:	8809      	ldrh	r1, [r1, #0]
   260ce:	400a      	ands	r2, r1
   260d0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   260d2:	693b      	ldr	r3, [r7, #16]
   260d4:	7a1b      	ldrb	r3, [r3, #8]
   260d6:	b2da      	uxtb	r2, r3
   260d8:	230c      	movs	r3, #12
   260da:	18fb      	adds	r3, r7, r3
   260dc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   260de:	693b      	ldr	r3, [r7, #16]
   260e0:	79db      	ldrb	r3, [r3, #7]
   260e2:	b2db      	uxtb	r3, r3
   260e4:	b29a      	uxth	r2, r3
   260e6:	230c      	movs	r3, #12
   260e8:	18fb      	adds	r3, r7, r3
   260ea:	210c      	movs	r1, #12
   260ec:	1879      	adds	r1, r7, r1
   260ee:	8809      	ldrh	r1, [r1, #0]
   260f0:	400a      	ands	r2, r1
   260f2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   260f4:	230c      	movs	r3, #12
   260f6:	18fb      	adds	r3, r7, r3
   260f8:	881b      	ldrh	r3, [r3, #0]
   260fa:	2280      	movs	r2, #128	; 0x80
   260fc:	4013      	ands	r3, r2
   260fe:	d00c      	beq.n	2611a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26100:	230e      	movs	r3, #14
   26102:	18fb      	adds	r3, r7, r3
   26104:	881b      	ldrh	r3, [r3, #0]
   26106:	2202      	movs	r2, #2
   26108:	4013      	ands	r3, r2
   2610a:	d002      	beq.n	26112 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   2610c:	697b      	ldr	r3, [r7, #20]
   2610e:	68db      	ldr	r3, [r3, #12]
   26110:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26112:	693b      	ldr	r3, [r7, #16]
   26114:	2280      	movs	r2, #128	; 0x80
   26116:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26118:	e011      	b.n	2613e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2611a:	230c      	movs	r3, #12
   2611c:	18fb      	adds	r3, r7, r3
   2611e:	881b      	ldrh	r3, [r3, #0]
   26120:	2201      	movs	r2, #1
   26122:	4013      	ands	r3, r2
   26124:	d00b      	beq.n	2613e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26126:	230e      	movs	r3, #14
   26128:	18fb      	adds	r3, r7, r3
   2612a:	881b      	ldrh	r3, [r3, #0]
   2612c:	2201      	movs	r2, #1
   2612e:	4013      	ands	r3, r2
   26130:	d002      	beq.n	26138 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26132:	697b      	ldr	r3, [r7, #20]
   26134:	689b      	ldr	r3, [r3, #8]
   26136:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26138:	693b      	ldr	r3, [r7, #16]
   2613a:	2201      	movs	r2, #1
   2613c:	721a      	strb	r2, [r3, #8]
}
   2613e:	46c0      	nop			; (mov r8, r8)
   26140:	46bd      	mov	sp, r7
   26142:	b006      	add	sp, #24
   26144:	bd80      	pop	{r7, pc}
   26146:	46c0      	nop			; (mov r8, r8)
   26148:	20005bc8 	.word	0x20005bc8

0002614c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   2614c:	b580      	push	{r7, lr}
   2614e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26150:	2000      	movs	r0, #0
   26152:	4b02      	ldr	r3, [pc, #8]	; (2615c <RTC_Handler+0x10>)
   26154:	4798      	blx	r3
}
   26156:	46c0      	nop			; (mov r8, r8)
   26158:	46bd      	mov	sp, r7
   2615a:	bd80      	pop	{r7, pc}
   2615c:	0002609d 	.word	0x0002609d

00026160 <system_gclk_chan_get_config_defaults>:
{
   26160:	b580      	push	{r7, lr}
   26162:	b082      	sub	sp, #8
   26164:	af00      	add	r7, sp, #0
   26166:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26168:	687b      	ldr	r3, [r7, #4]
   2616a:	2200      	movs	r2, #0
   2616c:	701a      	strb	r2, [r3, #0]
}
   2616e:	46c0      	nop			; (mov r8, r8)
   26170:	46bd      	mov	sp, r7
   26172:	b002      	add	sp, #8
   26174:	bd80      	pop	{r7, pc}

00026176 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26176:	b5f0      	push	{r4, r5, r6, r7, lr}
   26178:	b08d      	sub	sp, #52	; 0x34
   2617a:	af00      	add	r7, sp, #0
   2617c:	60b8      	str	r0, [r7, #8]
   2617e:	60f9      	str	r1, [r7, #12]
   26180:	603a      	str	r2, [r7, #0]
   26182:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26184:	2300      	movs	r3, #0
   26186:	2400      	movs	r4, #0
   26188:	623b      	str	r3, [r7, #32]
   2618a:	627c      	str	r4, [r7, #36]	; 0x24
   2618c:	2300      	movs	r3, #0
   2618e:	2400      	movs	r4, #0
   26190:	61bb      	str	r3, [r7, #24]
   26192:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26194:	233f      	movs	r3, #63	; 0x3f
   26196:	62fb      	str	r3, [r7, #44]	; 0x2c
   26198:	e053      	b.n	26242 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2619c:	3b20      	subs	r3, #32
   2619e:	2b00      	cmp	r3, #0
   261a0:	db04      	blt.n	261ac <long_division+0x36>
   261a2:	2201      	movs	r2, #1
   261a4:	409a      	lsls	r2, r3
   261a6:	0013      	movs	r3, r2
   261a8:	617b      	str	r3, [r7, #20]
   261aa:	e00b      	b.n	261c4 <long_division+0x4e>
   261ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   261ae:	2220      	movs	r2, #32
   261b0:	1ad3      	subs	r3, r2, r3
   261b2:	2201      	movs	r2, #1
   261b4:	40da      	lsrs	r2, r3
   261b6:	0013      	movs	r3, r2
   261b8:	2100      	movs	r1, #0
   261ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   261bc:	4091      	lsls	r1, r2
   261be:	000a      	movs	r2, r1
   261c0:	4313      	orrs	r3, r2
   261c2:	617b      	str	r3, [r7, #20]
   261c4:	2201      	movs	r2, #1
   261c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   261c8:	409a      	lsls	r2, r3
   261ca:	0013      	movs	r3, r2
   261cc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   261ce:	69bb      	ldr	r3, [r7, #24]
   261d0:	69fc      	ldr	r4, [r7, #28]
   261d2:	18db      	adds	r3, r3, r3
   261d4:	4164      	adcs	r4, r4
   261d6:	61bb      	str	r3, [r7, #24]
   261d8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   261da:	68bb      	ldr	r3, [r7, #8]
   261dc:	693a      	ldr	r2, [r7, #16]
   261de:	401a      	ands	r2, r3
   261e0:	0015      	movs	r5, r2
   261e2:	68fb      	ldr	r3, [r7, #12]
   261e4:	697a      	ldr	r2, [r7, #20]
   261e6:	401a      	ands	r2, r3
   261e8:	0016      	movs	r6, r2
   261ea:	002b      	movs	r3, r5
   261ec:	4333      	orrs	r3, r6
   261ee:	d007      	beq.n	26200 <long_division+0x8a>
			r |= 0x01;
   261f0:	69bb      	ldr	r3, [r7, #24]
   261f2:	2201      	movs	r2, #1
   261f4:	4313      	orrs	r3, r2
   261f6:	61bb      	str	r3, [r7, #24]
   261f8:	69fb      	ldr	r3, [r7, #28]
   261fa:	2200      	movs	r2, #0
   261fc:	4313      	orrs	r3, r2
   261fe:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26200:	687a      	ldr	r2, [r7, #4]
   26202:	69fb      	ldr	r3, [r7, #28]
   26204:	429a      	cmp	r2, r3
   26206:	d819      	bhi.n	2623c <long_division+0xc6>
   26208:	687a      	ldr	r2, [r7, #4]
   2620a:	69fb      	ldr	r3, [r7, #28]
   2620c:	429a      	cmp	r2, r3
   2620e:	d103      	bne.n	26218 <long_division+0xa2>
   26210:	683a      	ldr	r2, [r7, #0]
   26212:	69bb      	ldr	r3, [r7, #24]
   26214:	429a      	cmp	r2, r3
   26216:	d811      	bhi.n	2623c <long_division+0xc6>
			r = r - d;
   26218:	69b9      	ldr	r1, [r7, #24]
   2621a:	69fa      	ldr	r2, [r7, #28]
   2621c:	683b      	ldr	r3, [r7, #0]
   2621e:	687c      	ldr	r4, [r7, #4]
   26220:	1ac9      	subs	r1, r1, r3
   26222:	41a2      	sbcs	r2, r4
   26224:	000b      	movs	r3, r1
   26226:	0014      	movs	r4, r2
   26228:	61bb      	str	r3, [r7, #24]
   2622a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   2622c:	6a3a      	ldr	r2, [r7, #32]
   2622e:	693b      	ldr	r3, [r7, #16]
   26230:	4313      	orrs	r3, r2
   26232:	623b      	str	r3, [r7, #32]
   26234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26236:	697b      	ldr	r3, [r7, #20]
   26238:	4313      	orrs	r3, r2
   2623a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   2623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2623e:	3b01      	subs	r3, #1
   26240:	62fb      	str	r3, [r7, #44]	; 0x2c
   26242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26244:	2b00      	cmp	r3, #0
   26246:	daa8      	bge.n	2619a <long_division+0x24>
		}
	}

	return q;
   26248:	6a3b      	ldr	r3, [r7, #32]
   2624a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   2624c:	0018      	movs	r0, r3
   2624e:	0021      	movs	r1, r4
   26250:	46bd      	mov	sp, r7
   26252:	b00d      	add	sp, #52	; 0x34
   26254:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026256 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26256:	b580      	push	{r7, lr}
   26258:	b086      	sub	sp, #24
   2625a:	af00      	add	r7, sp, #0
   2625c:	60f8      	str	r0, [r7, #12]
   2625e:	60b9      	str	r1, [r7, #8]
   26260:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26262:	2316      	movs	r3, #22
   26264:	18fb      	adds	r3, r7, r3
   26266:	2200      	movs	r2, #0
   26268:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2626a:	68bb      	ldr	r3, [r7, #8]
   2626c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   2626e:	68bb      	ldr	r3, [r7, #8]
   26270:	085a      	lsrs	r2, r3, #1
   26272:	68fb      	ldr	r3, [r7, #12]
   26274:	429a      	cmp	r2, r3
   26276:	d201      	bcs.n	2627c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26278:	2340      	movs	r3, #64	; 0x40
   2627a:	e026      	b.n	262ca <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   2627c:	68bb      	ldr	r3, [r7, #8]
   2627e:	085b      	lsrs	r3, r3, #1
   26280:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26282:	e00a      	b.n	2629a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26284:	693a      	ldr	r2, [r7, #16]
   26286:	68fb      	ldr	r3, [r7, #12]
   26288:	1ad3      	subs	r3, r2, r3
   2628a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2628c:	2316      	movs	r3, #22
   2628e:	18fb      	adds	r3, r7, r3
   26290:	881a      	ldrh	r2, [r3, #0]
   26292:	2316      	movs	r3, #22
   26294:	18fb      	adds	r3, r7, r3
   26296:	3201      	adds	r2, #1
   26298:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2629a:	693a      	ldr	r2, [r7, #16]
   2629c:	68fb      	ldr	r3, [r7, #12]
   2629e:	429a      	cmp	r2, r3
   262a0:	d2f0      	bcs.n	26284 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   262a2:	2316      	movs	r3, #22
   262a4:	18fb      	adds	r3, r7, r3
   262a6:	2216      	movs	r2, #22
   262a8:	18ba      	adds	r2, r7, r2
   262aa:	8812      	ldrh	r2, [r2, #0]
   262ac:	3a01      	subs	r2, #1
   262ae:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   262b0:	2316      	movs	r3, #22
   262b2:	18fb      	adds	r3, r7, r3
   262b4:	881b      	ldrh	r3, [r3, #0]
   262b6:	2bff      	cmp	r3, #255	; 0xff
   262b8:	d901      	bls.n	262be <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   262ba:	2340      	movs	r3, #64	; 0x40
   262bc:	e005      	b.n	262ca <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   262be:	687b      	ldr	r3, [r7, #4]
   262c0:	2216      	movs	r2, #22
   262c2:	18ba      	adds	r2, r7, r2
   262c4:	8812      	ldrh	r2, [r2, #0]
   262c6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   262c8:	2300      	movs	r3, #0
	}
}
   262ca:	0018      	movs	r0, r3
   262cc:	46bd      	mov	sp, r7
   262ce:	b006      	add	sp, #24
   262d0:	bd80      	pop	{r7, pc}
	...

000262d4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   262d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   262d6:	b0a1      	sub	sp, #132	; 0x84
   262d8:	af00      	add	r7, sp, #0
   262da:	64f8      	str	r0, [r7, #76]	; 0x4c
   262dc:	64b9      	str	r1, [r7, #72]	; 0x48
   262de:	647a      	str	r2, [r7, #68]	; 0x44
   262e0:	2243      	movs	r2, #67	; 0x43
   262e2:	18ba      	adds	r2, r7, r2
   262e4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   262e6:	2300      	movs	r3, #0
   262e8:	2400      	movs	r4, #0
   262ea:	673b      	str	r3, [r7, #112]	; 0x70
   262ec:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   262ee:	2300      	movs	r3, #0
   262f0:	2400      	movs	r4, #0
   262f2:	66bb      	str	r3, [r7, #104]	; 0x68
   262f4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   262f6:	2300      	movs	r3, #0
   262f8:	2400      	movs	r4, #0
   262fa:	67bb      	str	r3, [r7, #120]	; 0x78
   262fc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   262fe:	2300      	movs	r3, #0
   26300:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26302:	2358      	movs	r3, #88	; 0x58
   26304:	2240      	movs	r2, #64	; 0x40
   26306:	4694      	mov	ip, r2
   26308:	44bc      	add	ip, r7
   2630a:	4463      	add	r3, ip
   2630c:	781a      	ldrb	r2, [r3, #0]
   2630e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26310:	435a      	muls	r2, r3
   26312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26314:	429a      	cmp	r2, r3
   26316:	d901      	bls.n	2631c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26318:	2340      	movs	r3, #64	; 0x40
   2631a:	e0b3      	b.n	26484 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   2631c:	2343      	movs	r3, #67	; 0x43
   2631e:	18fb      	adds	r3, r7, r3
   26320:	781b      	ldrb	r3, [r3, #0]
   26322:	2b00      	cmp	r3, #0
   26324:	d13d      	bne.n	263a2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26326:	2358      	movs	r3, #88	; 0x58
   26328:	2240      	movs	r2, #64	; 0x40
   2632a:	4694      	mov	ip, r2
   2632c:	44bc      	add	ip, r7
   2632e:	4463      	add	r3, ip
   26330:	781b      	ldrb	r3, [r3, #0]
   26332:	b2db      	uxtb	r3, r3
   26334:	613b      	str	r3, [r7, #16]
   26336:	2300      	movs	r3, #0
   26338:	617b      	str	r3, [r7, #20]
   2633a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2633c:	60bb      	str	r3, [r7, #8]
   2633e:	2300      	movs	r3, #0
   26340:	60fb      	str	r3, [r7, #12]
   26342:	4c52      	ldr	r4, [pc, #328]	; (2648c <_sercom_get_async_baud_val+0x1b8>)
   26344:	68ba      	ldr	r2, [r7, #8]
   26346:	68fb      	ldr	r3, [r7, #12]
   26348:	6938      	ldr	r0, [r7, #16]
   2634a:	6979      	ldr	r1, [r7, #20]
   2634c:	47a0      	blx	r4
   2634e:	0003      	movs	r3, r0
   26350:	000c      	movs	r4, r1
   26352:	001b      	movs	r3, r3
   26354:	65fb      	str	r3, [r7, #92]	; 0x5c
   26356:	2300      	movs	r3, #0
   26358:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   2635a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2635c:	603b      	str	r3, [r7, #0]
   2635e:	2300      	movs	r3, #0
   26360:	607b      	str	r3, [r7, #4]
   26362:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26364:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26366:	683a      	ldr	r2, [r7, #0]
   26368:	687b      	ldr	r3, [r7, #4]
   2636a:	4c49      	ldr	r4, [pc, #292]	; (26490 <_sercom_get_async_baud_val+0x1bc>)
   2636c:	47a0      	blx	r4
   2636e:	0003      	movs	r3, r0
   26370:	000c      	movs	r4, r1
   26372:	673b      	str	r3, [r7, #112]	; 0x70
   26374:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26376:	2100      	movs	r1, #0
   26378:	2201      	movs	r2, #1
   2637a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2637c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2637e:	1ac9      	subs	r1, r1, r3
   26380:	41a2      	sbcs	r2, r4
   26382:	000b      	movs	r3, r1
   26384:	0014      	movs	r4, r2
   26386:	66bb      	str	r3, [r7, #104]	; 0x68
   26388:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2638a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2638c:	0c1b      	lsrs	r3, r3, #16
   2638e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26390:	0416      	lsls	r6, r2, #16
   26392:	431e      	orrs	r6, r3
   26394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26396:	041d      	lsls	r5, r3, #16
   26398:	0033      	movs	r3, r6
   2639a:	67bb      	str	r3, [r7, #120]	; 0x78
   2639c:	2300      	movs	r3, #0
   2639e:	67fb      	str	r3, [r7, #124]	; 0x7c
   263a0:	e06a      	b.n	26478 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   263a2:	2343      	movs	r3, #67	; 0x43
   263a4:	18fb      	adds	r3, r7, r3
   263a6:	781b      	ldrb	r3, [r3, #0]
   263a8:	2b01      	cmp	r3, #1
   263aa:	d165      	bne.n	26478 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   263ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   263ae:	633b      	str	r3, [r7, #48]	; 0x30
   263b0:	2300      	movs	r3, #0
   263b2:	637b      	str	r3, [r7, #52]	; 0x34
   263b4:	2358      	movs	r3, #88	; 0x58
   263b6:	2240      	movs	r2, #64	; 0x40
   263b8:	4694      	mov	ip, r2
   263ba:	44bc      	add	ip, r7
   263bc:	4463      	add	r3, ip
   263be:	781b      	ldrb	r3, [r3, #0]
   263c0:	b2db      	uxtb	r3, r3
   263c2:	62bb      	str	r3, [r7, #40]	; 0x28
   263c4:	2300      	movs	r3, #0
   263c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   263c8:	4c30      	ldr	r4, [pc, #192]	; (2648c <_sercom_get_async_baud_val+0x1b8>)
   263ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   263cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   263ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
   263d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   263d2:	47a0      	blx	r4
   263d4:	0003      	movs	r3, r0
   263d6:	000c      	movs	r4, r1
   263d8:	65bb      	str	r3, [r7, #88]	; 0x58
   263da:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   263dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   263de:	623b      	str	r3, [r7, #32]
   263e0:	2300      	movs	r3, #0
   263e2:	627b      	str	r3, [r7, #36]	; 0x24
   263e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   263e6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   263e8:	001a      	movs	r2, r3
   263ea:	0023      	movs	r3, r4
   263ec:	6a38      	ldr	r0, [r7, #32]
   263ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
   263f0:	4c27      	ldr	r4, [pc, #156]	; (26490 <_sercom_get_async_baud_val+0x1bc>)
   263f2:	47a0      	blx	r4
   263f4:	0003      	movs	r3, r0
   263f6:	000c      	movs	r4, r1
   263f8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   263fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   263fc:	2380      	movs	r3, #128	; 0x80
   263fe:	019b      	lsls	r3, r3, #6
   26400:	429a      	cmp	r2, r3
   26402:	d901      	bls.n	26408 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26404:	2340      	movs	r3, #64	; 0x40
   26406:	e03d      	b.n	26484 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2640a:	61bb      	str	r3, [r7, #24]
   2640c:	2300      	movs	r3, #0
   2640e:	61fb      	str	r3, [r7, #28]
   26410:	69b9      	ldr	r1, [r7, #24]
   26412:	69fa      	ldr	r2, [r7, #28]
   26414:	000b      	movs	r3, r1
   26416:	0f5b      	lsrs	r3, r3, #29
   26418:	0010      	movs	r0, r2
   2641a:	00c0      	lsls	r0, r0, #3
   2641c:	63f8      	str	r0, [r7, #60]	; 0x3c
   2641e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26420:	4318      	orrs	r0, r3
   26422:	63f8      	str	r0, [r7, #60]	; 0x3c
   26424:	000b      	movs	r3, r1
   26426:	00db      	lsls	r3, r3, #3
   26428:	63bb      	str	r3, [r7, #56]	; 0x38
   2642a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2642c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2642e:	001a      	movs	r2, r3
   26430:	0023      	movs	r3, r4
   26432:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26436:	4c16      	ldr	r4, [pc, #88]	; (26490 <_sercom_get_async_baud_val+0x1bc>)
   26438:	47a0      	blx	r4
   2643a:	0003      	movs	r3, r0
   2643c:	000c      	movs	r4, r1
   2643e:	65bb      	str	r3, [r7, #88]	; 0x58
   26440:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26444:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26446:	b2d9      	uxtb	r1, r3
   26448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2644a:	b2db      	uxtb	r3, r3
   2644c:	00db      	lsls	r3, r3, #3
   2644e:	b2da      	uxtb	r2, r3
   26450:	2317      	movs	r3, #23
   26452:	2040      	movs	r0, #64	; 0x40
   26454:	4684      	mov	ip, r0
   26456:	44bc      	add	ip, r7
   26458:	4463      	add	r3, ip
   2645a:	1a8a      	subs	r2, r1, r2
   2645c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   2645e:	2317      	movs	r3, #23
   26460:	2240      	movs	r2, #64	; 0x40
   26462:	4694      	mov	ip, r2
   26464:	44bc      	add	ip, r7
   26466:	4463      	add	r3, ip
   26468:	781b      	ldrb	r3, [r3, #0]
   2646a:	035b      	lsls	r3, r3, #13
   2646c:	001a      	movs	r2, r3
   2646e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26470:	4313      	orrs	r3, r2
   26472:	67bb      	str	r3, [r7, #120]	; 0x78
   26474:	2300      	movs	r3, #0
   26476:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2647a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   2647c:	b29a      	uxth	r2, r3
   2647e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26480:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26482:	2300      	movs	r3, #0
}
   26484:	0018      	movs	r0, r3
   26486:	46bd      	mov	sp, r7
   26488:	b021      	add	sp, #132	; 0x84
   2648a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2648c:	00031e41 	.word	0x00031e41
   26490:	00026177 	.word	0x00026177

00026494 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26494:	b580      	push	{r7, lr}
   26496:	b084      	sub	sp, #16
   26498:	af00      	add	r7, sp, #0
   2649a:	0002      	movs	r2, r0
   2649c:	1dfb      	adds	r3, r7, #7
   2649e:	701a      	strb	r2, [r3, #0]
   264a0:	1dbb      	adds	r3, r7, #6
   264a2:	1c0a      	adds	r2, r1, #0
   264a4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   264a6:	4b1a      	ldr	r3, [pc, #104]	; (26510 <sercom_set_gclk_generator+0x7c>)
   264a8:	781b      	ldrb	r3, [r3, #0]
   264aa:	2201      	movs	r2, #1
   264ac:	4053      	eors	r3, r2
   264ae:	b2db      	uxtb	r3, r3
   264b0:	2b00      	cmp	r3, #0
   264b2:	d103      	bne.n	264bc <sercom_set_gclk_generator+0x28>
   264b4:	1dbb      	adds	r3, r7, #6
   264b6:	781b      	ldrb	r3, [r3, #0]
   264b8:	2b00      	cmp	r3, #0
   264ba:	d01b      	beq.n	264f4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   264bc:	230c      	movs	r3, #12
   264be:	18fb      	adds	r3, r7, r3
   264c0:	0018      	movs	r0, r3
   264c2:	4b14      	ldr	r3, [pc, #80]	; (26514 <sercom_set_gclk_generator+0x80>)
   264c4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   264c6:	230c      	movs	r3, #12
   264c8:	18fb      	adds	r3, r7, r3
   264ca:	1dfa      	adds	r2, r7, #7
   264cc:	7812      	ldrb	r2, [r2, #0]
   264ce:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   264d0:	230c      	movs	r3, #12
   264d2:	18fb      	adds	r3, r7, r3
   264d4:	0019      	movs	r1, r3
   264d6:	2013      	movs	r0, #19
   264d8:	4b0f      	ldr	r3, [pc, #60]	; (26518 <sercom_set_gclk_generator+0x84>)
   264da:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   264dc:	2013      	movs	r0, #19
   264de:	4b0f      	ldr	r3, [pc, #60]	; (2651c <sercom_set_gclk_generator+0x88>)
   264e0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   264e2:	4b0b      	ldr	r3, [pc, #44]	; (26510 <sercom_set_gclk_generator+0x7c>)
   264e4:	1dfa      	adds	r2, r7, #7
   264e6:	7812      	ldrb	r2, [r2, #0]
   264e8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   264ea:	4b09      	ldr	r3, [pc, #36]	; (26510 <sercom_set_gclk_generator+0x7c>)
   264ec:	2201      	movs	r2, #1
   264ee:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   264f0:	2300      	movs	r3, #0
   264f2:	e008      	b.n	26506 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   264f4:	4b06      	ldr	r3, [pc, #24]	; (26510 <sercom_set_gclk_generator+0x7c>)
   264f6:	785b      	ldrb	r3, [r3, #1]
   264f8:	1dfa      	adds	r2, r7, #7
   264fa:	7812      	ldrb	r2, [r2, #0]
   264fc:	429a      	cmp	r2, r3
   264fe:	d101      	bne.n	26504 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   26500:	2300      	movs	r3, #0
   26502:	e000      	b.n	26506 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26504:	231d      	movs	r3, #29
}
   26506:	0018      	movs	r0, r3
   26508:	46bd      	mov	sp, r7
   2650a:	b004      	add	sp, #16
   2650c:	bd80      	pop	{r7, pc}
   2650e:	46c0      	nop			; (mov r8, r8)
   26510:	2000428c 	.word	0x2000428c
   26514:	00026161 	.word	0x00026161
   26518:	00028f6d 	.word	0x00028f6d
   2651c:	00028fb1 	.word	0x00028fb1

00026520 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   26520:	b580      	push	{r7, lr}
   26522:	b082      	sub	sp, #8
   26524:	af00      	add	r7, sp, #0
   26526:	6078      	str	r0, [r7, #4]
   26528:	000a      	movs	r2, r1
   2652a:	1cfb      	adds	r3, r7, #3
   2652c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2652e:	687b      	ldr	r3, [r7, #4]
   26530:	4a4d      	ldr	r2, [pc, #308]	; (26668 <_sercom_get_default_pad+0x148>)
   26532:	4293      	cmp	r3, r2
   26534:	d03f      	beq.n	265b6 <_sercom_get_default_pad+0x96>
   26536:	4a4c      	ldr	r2, [pc, #304]	; (26668 <_sercom_get_default_pad+0x148>)
   26538:	4293      	cmp	r3, r2
   2653a:	d806      	bhi.n	2654a <_sercom_get_default_pad+0x2a>
   2653c:	4a4b      	ldr	r2, [pc, #300]	; (2666c <_sercom_get_default_pad+0x14c>)
   2653e:	4293      	cmp	r3, r2
   26540:	d00f      	beq.n	26562 <_sercom_get_default_pad+0x42>
   26542:	4a4b      	ldr	r2, [pc, #300]	; (26670 <_sercom_get_default_pad+0x150>)
   26544:	4293      	cmp	r3, r2
   26546:	d021      	beq.n	2658c <_sercom_get_default_pad+0x6c>
   26548:	e089      	b.n	2665e <_sercom_get_default_pad+0x13e>
   2654a:	4a4a      	ldr	r2, [pc, #296]	; (26674 <_sercom_get_default_pad+0x154>)
   2654c:	4293      	cmp	r3, r2
   2654e:	d100      	bne.n	26552 <_sercom_get_default_pad+0x32>
   26550:	e05b      	b.n	2660a <_sercom_get_default_pad+0xea>
   26552:	4a49      	ldr	r2, [pc, #292]	; (26678 <_sercom_get_default_pad+0x158>)
   26554:	4293      	cmp	r3, r2
   26556:	d100      	bne.n	2655a <_sercom_get_default_pad+0x3a>
   26558:	e06c      	b.n	26634 <_sercom_get_default_pad+0x114>
   2655a:	4a48      	ldr	r2, [pc, #288]	; (2667c <_sercom_get_default_pad+0x15c>)
   2655c:	4293      	cmp	r3, r2
   2655e:	d03f      	beq.n	265e0 <_sercom_get_default_pad+0xc0>
   26560:	e07d      	b.n	2665e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   26562:	1cfb      	adds	r3, r7, #3
   26564:	781b      	ldrb	r3, [r3, #0]
   26566:	2b01      	cmp	r3, #1
   26568:	d00a      	beq.n	26580 <_sercom_get_default_pad+0x60>
   2656a:	dc02      	bgt.n	26572 <_sercom_get_default_pad+0x52>
   2656c:	2b00      	cmp	r3, #0
   2656e:	d005      	beq.n	2657c <_sercom_get_default_pad+0x5c>
   26570:	e075      	b.n	2665e <_sercom_get_default_pad+0x13e>
   26572:	2b02      	cmp	r3, #2
   26574:	d006      	beq.n	26584 <_sercom_get_default_pad+0x64>
   26576:	2b03      	cmp	r3, #3
   26578:	d006      	beq.n	26588 <_sercom_get_default_pad+0x68>
   2657a:	e070      	b.n	2665e <_sercom_get_default_pad+0x13e>
   2657c:	4b40      	ldr	r3, [pc, #256]	; (26680 <_sercom_get_default_pad+0x160>)
   2657e:	e06f      	b.n	26660 <_sercom_get_default_pad+0x140>
   26580:	4b40      	ldr	r3, [pc, #256]	; (26684 <_sercom_get_default_pad+0x164>)
   26582:	e06d      	b.n	26660 <_sercom_get_default_pad+0x140>
   26584:	4b40      	ldr	r3, [pc, #256]	; (26688 <_sercom_get_default_pad+0x168>)
   26586:	e06b      	b.n	26660 <_sercom_get_default_pad+0x140>
   26588:	4b40      	ldr	r3, [pc, #256]	; (2668c <_sercom_get_default_pad+0x16c>)
   2658a:	e069      	b.n	26660 <_sercom_get_default_pad+0x140>
   2658c:	1cfb      	adds	r3, r7, #3
   2658e:	781b      	ldrb	r3, [r3, #0]
   26590:	2b01      	cmp	r3, #1
   26592:	d00a      	beq.n	265aa <_sercom_get_default_pad+0x8a>
   26594:	dc02      	bgt.n	2659c <_sercom_get_default_pad+0x7c>
   26596:	2b00      	cmp	r3, #0
   26598:	d005      	beq.n	265a6 <_sercom_get_default_pad+0x86>
   2659a:	e060      	b.n	2665e <_sercom_get_default_pad+0x13e>
   2659c:	2b02      	cmp	r3, #2
   2659e:	d006      	beq.n	265ae <_sercom_get_default_pad+0x8e>
   265a0:	2b03      	cmp	r3, #3
   265a2:	d006      	beq.n	265b2 <_sercom_get_default_pad+0x92>
   265a4:	e05b      	b.n	2665e <_sercom_get_default_pad+0x13e>
   265a6:	2303      	movs	r3, #3
   265a8:	e05a      	b.n	26660 <_sercom_get_default_pad+0x140>
   265aa:	4b39      	ldr	r3, [pc, #228]	; (26690 <_sercom_get_default_pad+0x170>)
   265ac:	e058      	b.n	26660 <_sercom_get_default_pad+0x140>
   265ae:	4b39      	ldr	r3, [pc, #228]	; (26694 <_sercom_get_default_pad+0x174>)
   265b0:	e056      	b.n	26660 <_sercom_get_default_pad+0x140>
   265b2:	4b39      	ldr	r3, [pc, #228]	; (26698 <_sercom_get_default_pad+0x178>)
   265b4:	e054      	b.n	26660 <_sercom_get_default_pad+0x140>
   265b6:	1cfb      	adds	r3, r7, #3
   265b8:	781b      	ldrb	r3, [r3, #0]
   265ba:	2b01      	cmp	r3, #1
   265bc:	d00a      	beq.n	265d4 <_sercom_get_default_pad+0xb4>
   265be:	dc02      	bgt.n	265c6 <_sercom_get_default_pad+0xa6>
   265c0:	2b00      	cmp	r3, #0
   265c2:	d005      	beq.n	265d0 <_sercom_get_default_pad+0xb0>
   265c4:	e04b      	b.n	2665e <_sercom_get_default_pad+0x13e>
   265c6:	2b02      	cmp	r3, #2
   265c8:	d006      	beq.n	265d8 <_sercom_get_default_pad+0xb8>
   265ca:	2b03      	cmp	r3, #3
   265cc:	d006      	beq.n	265dc <_sercom_get_default_pad+0xbc>
   265ce:	e046      	b.n	2665e <_sercom_get_default_pad+0x13e>
   265d0:	4b32      	ldr	r3, [pc, #200]	; (2669c <_sercom_get_default_pad+0x17c>)
   265d2:	e045      	b.n	26660 <_sercom_get_default_pad+0x140>
   265d4:	4b32      	ldr	r3, [pc, #200]	; (266a0 <_sercom_get_default_pad+0x180>)
   265d6:	e043      	b.n	26660 <_sercom_get_default_pad+0x140>
   265d8:	4b32      	ldr	r3, [pc, #200]	; (266a4 <_sercom_get_default_pad+0x184>)
   265da:	e041      	b.n	26660 <_sercom_get_default_pad+0x140>
   265dc:	4b32      	ldr	r3, [pc, #200]	; (266a8 <_sercom_get_default_pad+0x188>)
   265de:	e03f      	b.n	26660 <_sercom_get_default_pad+0x140>
   265e0:	1cfb      	adds	r3, r7, #3
   265e2:	781b      	ldrb	r3, [r3, #0]
   265e4:	2b01      	cmp	r3, #1
   265e6:	d00a      	beq.n	265fe <_sercom_get_default_pad+0xde>
   265e8:	dc02      	bgt.n	265f0 <_sercom_get_default_pad+0xd0>
   265ea:	2b00      	cmp	r3, #0
   265ec:	d005      	beq.n	265fa <_sercom_get_default_pad+0xda>
   265ee:	e036      	b.n	2665e <_sercom_get_default_pad+0x13e>
   265f0:	2b02      	cmp	r3, #2
   265f2:	d006      	beq.n	26602 <_sercom_get_default_pad+0xe2>
   265f4:	2b03      	cmp	r3, #3
   265f6:	d006      	beq.n	26606 <_sercom_get_default_pad+0xe6>
   265f8:	e031      	b.n	2665e <_sercom_get_default_pad+0x13e>
   265fa:	4b2c      	ldr	r3, [pc, #176]	; (266ac <_sercom_get_default_pad+0x18c>)
   265fc:	e030      	b.n	26660 <_sercom_get_default_pad+0x140>
   265fe:	4b2c      	ldr	r3, [pc, #176]	; (266b0 <_sercom_get_default_pad+0x190>)
   26600:	e02e      	b.n	26660 <_sercom_get_default_pad+0x140>
   26602:	4b2c      	ldr	r3, [pc, #176]	; (266b4 <_sercom_get_default_pad+0x194>)
   26604:	e02c      	b.n	26660 <_sercom_get_default_pad+0x140>
   26606:	4b2c      	ldr	r3, [pc, #176]	; (266b8 <_sercom_get_default_pad+0x198>)
   26608:	e02a      	b.n	26660 <_sercom_get_default_pad+0x140>
   2660a:	1cfb      	adds	r3, r7, #3
   2660c:	781b      	ldrb	r3, [r3, #0]
   2660e:	2b01      	cmp	r3, #1
   26610:	d00a      	beq.n	26628 <_sercom_get_default_pad+0x108>
   26612:	dc02      	bgt.n	2661a <_sercom_get_default_pad+0xfa>
   26614:	2b00      	cmp	r3, #0
   26616:	d005      	beq.n	26624 <_sercom_get_default_pad+0x104>
   26618:	e021      	b.n	2665e <_sercom_get_default_pad+0x13e>
   2661a:	2b02      	cmp	r3, #2
   2661c:	d006      	beq.n	2662c <_sercom_get_default_pad+0x10c>
   2661e:	2b03      	cmp	r3, #3
   26620:	d006      	beq.n	26630 <_sercom_get_default_pad+0x110>
   26622:	e01c      	b.n	2665e <_sercom_get_default_pad+0x13e>
   26624:	4b25      	ldr	r3, [pc, #148]	; (266bc <_sercom_get_default_pad+0x19c>)
   26626:	e01b      	b.n	26660 <_sercom_get_default_pad+0x140>
   26628:	4b25      	ldr	r3, [pc, #148]	; (266c0 <_sercom_get_default_pad+0x1a0>)
   2662a:	e019      	b.n	26660 <_sercom_get_default_pad+0x140>
   2662c:	4b25      	ldr	r3, [pc, #148]	; (266c4 <_sercom_get_default_pad+0x1a4>)
   2662e:	e017      	b.n	26660 <_sercom_get_default_pad+0x140>
   26630:	4b25      	ldr	r3, [pc, #148]	; (266c8 <_sercom_get_default_pad+0x1a8>)
   26632:	e015      	b.n	26660 <_sercom_get_default_pad+0x140>
   26634:	1cfb      	adds	r3, r7, #3
   26636:	781b      	ldrb	r3, [r3, #0]
   26638:	2b01      	cmp	r3, #1
   2663a:	d00a      	beq.n	26652 <_sercom_get_default_pad+0x132>
   2663c:	dc02      	bgt.n	26644 <_sercom_get_default_pad+0x124>
   2663e:	2b00      	cmp	r3, #0
   26640:	d005      	beq.n	2664e <_sercom_get_default_pad+0x12e>
   26642:	e00c      	b.n	2665e <_sercom_get_default_pad+0x13e>
   26644:	2b02      	cmp	r3, #2
   26646:	d006      	beq.n	26656 <_sercom_get_default_pad+0x136>
   26648:	2b03      	cmp	r3, #3
   2664a:	d006      	beq.n	2665a <_sercom_get_default_pad+0x13a>
   2664c:	e007      	b.n	2665e <_sercom_get_default_pad+0x13e>
   2664e:	4b1f      	ldr	r3, [pc, #124]	; (266cc <_sercom_get_default_pad+0x1ac>)
   26650:	e006      	b.n	26660 <_sercom_get_default_pad+0x140>
   26652:	4b1f      	ldr	r3, [pc, #124]	; (266d0 <_sercom_get_default_pad+0x1b0>)
   26654:	e004      	b.n	26660 <_sercom_get_default_pad+0x140>
   26656:	4b1f      	ldr	r3, [pc, #124]	; (266d4 <_sercom_get_default_pad+0x1b4>)
   26658:	e002      	b.n	26660 <_sercom_get_default_pad+0x140>
   2665a:	4b1f      	ldr	r3, [pc, #124]	; (266d8 <_sercom_get_default_pad+0x1b8>)
   2665c:	e000      	b.n	26660 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2665e:	2300      	movs	r3, #0
}
   26660:	0018      	movs	r0, r3
   26662:	46bd      	mov	sp, r7
   26664:	b002      	add	sp, #8
   26666:	bd80      	pop	{r7, pc}
   26668:	42001000 	.word	0x42001000
   2666c:	42000800 	.word	0x42000800
   26670:	42000c00 	.word	0x42000c00
   26674:	42001800 	.word	0x42001800
   26678:	42001c00 	.word	0x42001c00
   2667c:	42001400 	.word	0x42001400
   26680:	00040003 	.word	0x00040003
   26684:	00050003 	.word	0x00050003
   26688:	00060003 	.word	0x00060003
   2668c:	00070003 	.word	0x00070003
   26690:	00010003 	.word	0x00010003
   26694:	001e0003 	.word	0x001e0003
   26698:	001f0003 	.word	0x001f0003
   2669c:	00080003 	.word	0x00080003
   266a0:	00090003 	.word	0x00090003
   266a4:	000a0003 	.word	0x000a0003
   266a8:	000b0003 	.word	0x000b0003
   266ac:	00100003 	.word	0x00100003
   266b0:	00110003 	.word	0x00110003
   266b4:	00120003 	.word	0x00120003
   266b8:	00130003 	.word	0x00130003
   266bc:	000c0003 	.word	0x000c0003
   266c0:	000d0003 	.word	0x000d0003
   266c4:	000e0003 	.word	0x000e0003
   266c8:	000f0003 	.word	0x000f0003
   266cc:	00160003 	.word	0x00160003
   266d0:	00170003 	.word	0x00170003
   266d4:	00180003 	.word	0x00180003
   266d8:	00190003 	.word	0x00190003

000266dc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   266dc:	b590      	push	{r4, r7, lr}
   266de:	b08b      	sub	sp, #44	; 0x2c
   266e0:	af00      	add	r7, sp, #0
   266e2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   266e4:	230c      	movs	r3, #12
   266e6:	18fb      	adds	r3, r7, r3
   266e8:	4a0f      	ldr	r2, [pc, #60]	; (26728 <_sercom_get_sercom_inst_index+0x4c>)
   266ea:	ca13      	ldmia	r2!, {r0, r1, r4}
   266ec:	c313      	stmia	r3!, {r0, r1, r4}
   266ee:	ca13      	ldmia	r2!, {r0, r1, r4}
   266f0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   266f2:	2300      	movs	r3, #0
   266f4:	627b      	str	r3, [r7, #36]	; 0x24
   266f6:	e00e      	b.n	26716 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   266f8:	230c      	movs	r3, #12
   266fa:	18fb      	adds	r3, r7, r3
   266fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   266fe:	0092      	lsls	r2, r2, #2
   26700:	58d3      	ldr	r3, [r2, r3]
   26702:	001a      	movs	r2, r3
   26704:	687b      	ldr	r3, [r7, #4]
   26706:	429a      	cmp	r2, r3
   26708:	d102      	bne.n	26710 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2670c:	b2db      	uxtb	r3, r3
   2670e:	e006      	b.n	2671e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26712:	3301      	adds	r3, #1
   26714:	627b      	str	r3, [r7, #36]	; 0x24
   26716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26718:	2b05      	cmp	r3, #5
   2671a:	d9ed      	bls.n	266f8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2671c:	2300      	movs	r3, #0
}
   2671e:	0018      	movs	r0, r3
   26720:	46bd      	mov	sp, r7
   26722:	b00b      	add	sp, #44	; 0x2c
   26724:	bd90      	pop	{r4, r7, pc}
   26726:	46c0      	nop			; (mov r8, r8)
   26728:	00038f8c 	.word	0x00038f8c

0002672c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2672c:	b580      	push	{r7, lr}
   2672e:	b082      	sub	sp, #8
   26730:	af00      	add	r7, sp, #0
   26732:	0002      	movs	r2, r0
   26734:	1dfb      	adds	r3, r7, #7
   26736:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   26738:	46c0      	nop			; (mov r8, r8)
   2673a:	46bd      	mov	sp, r7
   2673c:	b002      	add	sp, #8
   2673e:	bd80      	pop	{r7, pc}

00026740 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   26740:	b580      	push	{r7, lr}
   26742:	b084      	sub	sp, #16
   26744:	af00      	add	r7, sp, #0
   26746:	0002      	movs	r2, r0
   26748:	6039      	str	r1, [r7, #0]
   2674a:	1dfb      	adds	r3, r7, #7
   2674c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2674e:	4b13      	ldr	r3, [pc, #76]	; (2679c <_sercom_set_handler+0x5c>)
   26750:	781b      	ldrb	r3, [r3, #0]
   26752:	2201      	movs	r2, #1
   26754:	4053      	eors	r3, r2
   26756:	b2db      	uxtb	r3, r3
   26758:	2b00      	cmp	r3, #0
   2675a:	d015      	beq.n	26788 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2675c:	2300      	movs	r3, #0
   2675e:	60fb      	str	r3, [r7, #12]
   26760:	e00c      	b.n	2677c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   26762:	4b0f      	ldr	r3, [pc, #60]	; (267a0 <_sercom_set_handler+0x60>)
   26764:	68fa      	ldr	r2, [r7, #12]
   26766:	0092      	lsls	r2, r2, #2
   26768:	490e      	ldr	r1, [pc, #56]	; (267a4 <_sercom_set_handler+0x64>)
   2676a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2676c:	4b0e      	ldr	r3, [pc, #56]	; (267a8 <_sercom_set_handler+0x68>)
   2676e:	68fa      	ldr	r2, [r7, #12]
   26770:	0092      	lsls	r2, r2, #2
   26772:	2100      	movs	r1, #0
   26774:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26776:	68fb      	ldr	r3, [r7, #12]
   26778:	3301      	adds	r3, #1
   2677a:	60fb      	str	r3, [r7, #12]
   2677c:	68fb      	ldr	r3, [r7, #12]
   2677e:	2b05      	cmp	r3, #5
   26780:	d9ef      	bls.n	26762 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   26782:	4b06      	ldr	r3, [pc, #24]	; (2679c <_sercom_set_handler+0x5c>)
   26784:	2201      	movs	r2, #1
   26786:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   26788:	1dfb      	adds	r3, r7, #7
   2678a:	781a      	ldrb	r2, [r3, #0]
   2678c:	4b04      	ldr	r3, [pc, #16]	; (267a0 <_sercom_set_handler+0x60>)
   2678e:	0092      	lsls	r2, r2, #2
   26790:	6839      	ldr	r1, [r7, #0]
   26792:	50d1      	str	r1, [r2, r3]
}
   26794:	46c0      	nop			; (mov r8, r8)
   26796:	46bd      	mov	sp, r7
   26798:	b004      	add	sp, #16
   2679a:	bd80      	pop	{r7, pc}
   2679c:	2000428e 	.word	0x2000428e
   267a0:	20004290 	.word	0x20004290
   267a4:	0002672d 	.word	0x0002672d
   267a8:	20005bcc 	.word	0x20005bcc

000267ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   267ac:	b590      	push	{r4, r7, lr}
   267ae:	b085      	sub	sp, #20
   267b0:	af00      	add	r7, sp, #0
   267b2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   267b4:	2308      	movs	r3, #8
   267b6:	18fb      	adds	r3, r7, r3
   267b8:	4a0b      	ldr	r2, [pc, #44]	; (267e8 <_sercom_get_interrupt_vector+0x3c>)
   267ba:	6811      	ldr	r1, [r2, #0]
   267bc:	6019      	str	r1, [r3, #0]
   267be:	8892      	ldrh	r2, [r2, #4]
   267c0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   267c2:	230f      	movs	r3, #15
   267c4:	18fc      	adds	r4, r7, r3
   267c6:	687b      	ldr	r3, [r7, #4]
   267c8:	0018      	movs	r0, r3
   267ca:	4b08      	ldr	r3, [pc, #32]	; (267ec <_sercom_get_interrupt_vector+0x40>)
   267cc:	4798      	blx	r3
   267ce:	0003      	movs	r3, r0
   267d0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   267d2:	230f      	movs	r3, #15
   267d4:	18fb      	adds	r3, r7, r3
   267d6:	781b      	ldrb	r3, [r3, #0]
   267d8:	2208      	movs	r2, #8
   267da:	18ba      	adds	r2, r7, r2
   267dc:	5cd3      	ldrb	r3, [r2, r3]
   267de:	b25b      	sxtb	r3, r3
}
   267e0:	0018      	movs	r0, r3
   267e2:	46bd      	mov	sp, r7
   267e4:	b005      	add	sp, #20
   267e6:	bd90      	pop	{r4, r7, pc}
   267e8:	00038fa4 	.word	0x00038fa4
   267ec:	000266dd 	.word	0x000266dd

000267f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   267f0:	b580      	push	{r7, lr}
   267f2:	af00      	add	r7, sp, #0
   267f4:	4b03      	ldr	r3, [pc, #12]	; (26804 <SERCOM0_Handler+0x14>)
   267f6:	681b      	ldr	r3, [r3, #0]
   267f8:	2000      	movs	r0, #0
   267fa:	4798      	blx	r3
   267fc:	46c0      	nop			; (mov r8, r8)
   267fe:	46bd      	mov	sp, r7
   26800:	bd80      	pop	{r7, pc}
   26802:	46c0      	nop			; (mov r8, r8)
   26804:	20004290 	.word	0x20004290

00026808 <SERCOM1_Handler>:
   26808:	b580      	push	{r7, lr}
   2680a:	af00      	add	r7, sp, #0
   2680c:	4b03      	ldr	r3, [pc, #12]	; (2681c <SERCOM1_Handler+0x14>)
   2680e:	685b      	ldr	r3, [r3, #4]
   26810:	2001      	movs	r0, #1
   26812:	4798      	blx	r3
   26814:	46c0      	nop			; (mov r8, r8)
   26816:	46bd      	mov	sp, r7
   26818:	bd80      	pop	{r7, pc}
   2681a:	46c0      	nop			; (mov r8, r8)
   2681c:	20004290 	.word	0x20004290

00026820 <SERCOM2_Handler>:
   26820:	b580      	push	{r7, lr}
   26822:	af00      	add	r7, sp, #0
   26824:	4b03      	ldr	r3, [pc, #12]	; (26834 <SERCOM2_Handler+0x14>)
   26826:	689b      	ldr	r3, [r3, #8]
   26828:	2002      	movs	r0, #2
   2682a:	4798      	blx	r3
   2682c:	46c0      	nop			; (mov r8, r8)
   2682e:	46bd      	mov	sp, r7
   26830:	bd80      	pop	{r7, pc}
   26832:	46c0      	nop			; (mov r8, r8)
   26834:	20004290 	.word	0x20004290

00026838 <SERCOM3_Handler>:
   26838:	b580      	push	{r7, lr}
   2683a:	af00      	add	r7, sp, #0
   2683c:	4b03      	ldr	r3, [pc, #12]	; (2684c <SERCOM3_Handler+0x14>)
   2683e:	68db      	ldr	r3, [r3, #12]
   26840:	2003      	movs	r0, #3
   26842:	4798      	blx	r3
   26844:	46c0      	nop			; (mov r8, r8)
   26846:	46bd      	mov	sp, r7
   26848:	bd80      	pop	{r7, pc}
   2684a:	46c0      	nop			; (mov r8, r8)
   2684c:	20004290 	.word	0x20004290

00026850 <SERCOM4_Handler>:
   26850:	b580      	push	{r7, lr}
   26852:	af00      	add	r7, sp, #0
   26854:	4b03      	ldr	r3, [pc, #12]	; (26864 <SERCOM4_Handler+0x14>)
   26856:	691b      	ldr	r3, [r3, #16]
   26858:	2004      	movs	r0, #4
   2685a:	4798      	blx	r3
   2685c:	46c0      	nop			; (mov r8, r8)
   2685e:	46bd      	mov	sp, r7
   26860:	bd80      	pop	{r7, pc}
   26862:	46c0      	nop			; (mov r8, r8)
   26864:	20004290 	.word	0x20004290

00026868 <SERCOM5_Handler>:
   26868:	b580      	push	{r7, lr}
   2686a:	af00      	add	r7, sp, #0
   2686c:	4b03      	ldr	r3, [pc, #12]	; (2687c <SERCOM5_Handler+0x14>)
   2686e:	695b      	ldr	r3, [r3, #20]
   26870:	2005      	movs	r0, #5
   26872:	4798      	blx	r3
   26874:	46c0      	nop			; (mov r8, r8)
   26876:	46bd      	mov	sp, r7
   26878:	bd80      	pop	{r7, pc}
   2687a:	46c0      	nop			; (mov r8, r8)
   2687c:	20004290 	.word	0x20004290

00026880 <system_pinmux_get_config_defaults>:
{
   26880:	b580      	push	{r7, lr}
   26882:	b082      	sub	sp, #8
   26884:	af00      	add	r7, sp, #0
   26886:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26888:	687b      	ldr	r3, [r7, #4]
   2688a:	2280      	movs	r2, #128	; 0x80
   2688c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2688e:	687b      	ldr	r3, [r7, #4]
   26890:	2200      	movs	r2, #0
   26892:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26894:	687b      	ldr	r3, [r7, #4]
   26896:	2201      	movs	r2, #1
   26898:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2689a:	687b      	ldr	r3, [r7, #4]
   2689c:	2200      	movs	r2, #0
   2689e:	70da      	strb	r2, [r3, #3]
}
   268a0:	46c0      	nop			; (mov r8, r8)
   268a2:	46bd      	mov	sp, r7
   268a4:	b002      	add	sp, #8
   268a6:	bd80      	pop	{r7, pc}

000268a8 <system_pinmux_get_group_from_gpio_pin>:
{
   268a8:	b580      	push	{r7, lr}
   268aa:	b084      	sub	sp, #16
   268ac:	af00      	add	r7, sp, #0
   268ae:	0002      	movs	r2, r0
   268b0:	1dfb      	adds	r3, r7, #7
   268b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   268b4:	230f      	movs	r3, #15
   268b6:	18fb      	adds	r3, r7, r3
   268b8:	1dfa      	adds	r2, r7, #7
   268ba:	7812      	ldrb	r2, [r2, #0]
   268bc:	09d2      	lsrs	r2, r2, #7
   268be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   268c0:	230e      	movs	r3, #14
   268c2:	18fb      	adds	r3, r7, r3
   268c4:	1dfa      	adds	r2, r7, #7
   268c6:	7812      	ldrb	r2, [r2, #0]
   268c8:	0952      	lsrs	r2, r2, #5
   268ca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   268cc:	4b0d      	ldr	r3, [pc, #52]	; (26904 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   268ce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   268d0:	230f      	movs	r3, #15
   268d2:	18fb      	adds	r3, r7, r3
   268d4:	781b      	ldrb	r3, [r3, #0]
   268d6:	2b00      	cmp	r3, #0
   268d8:	d10f      	bne.n	268fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   268da:	230f      	movs	r3, #15
   268dc:	18fb      	adds	r3, r7, r3
   268de:	781b      	ldrb	r3, [r3, #0]
   268e0:	009b      	lsls	r3, r3, #2
   268e2:	2210      	movs	r2, #16
   268e4:	4694      	mov	ip, r2
   268e6:	44bc      	add	ip, r7
   268e8:	4463      	add	r3, ip
   268ea:	3b08      	subs	r3, #8
   268ec:	681a      	ldr	r2, [r3, #0]
   268ee:	230e      	movs	r3, #14
   268f0:	18fb      	adds	r3, r7, r3
   268f2:	781b      	ldrb	r3, [r3, #0]
   268f4:	01db      	lsls	r3, r3, #7
   268f6:	18d3      	adds	r3, r2, r3
   268f8:	e000      	b.n	268fc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   268fa:	2300      	movs	r3, #0
}
   268fc:	0018      	movs	r0, r3
   268fe:	46bd      	mov	sp, r7
   26900:	b004      	add	sp, #16
   26902:	bd80      	pop	{r7, pc}
   26904:	41004400 	.word	0x41004400

00026908 <port_get_group_from_gpio_pin>:
{
   26908:	b580      	push	{r7, lr}
   2690a:	b082      	sub	sp, #8
   2690c:	af00      	add	r7, sp, #0
   2690e:	0002      	movs	r2, r0
   26910:	1dfb      	adds	r3, r7, #7
   26912:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26914:	1dfb      	adds	r3, r7, #7
   26916:	781b      	ldrb	r3, [r3, #0]
   26918:	0018      	movs	r0, r3
   2691a:	4b03      	ldr	r3, [pc, #12]	; (26928 <port_get_group_from_gpio_pin+0x20>)
   2691c:	4798      	blx	r3
   2691e:	0003      	movs	r3, r0
}
   26920:	0018      	movs	r0, r3
   26922:	46bd      	mov	sp, r7
   26924:	b002      	add	sp, #8
   26926:	bd80      	pop	{r7, pc}
   26928:	000268a9 	.word	0x000268a9

0002692c <port_pin_set_output_level>:
{
   2692c:	b580      	push	{r7, lr}
   2692e:	b084      	sub	sp, #16
   26930:	af00      	add	r7, sp, #0
   26932:	0002      	movs	r2, r0
   26934:	1dfb      	adds	r3, r7, #7
   26936:	701a      	strb	r2, [r3, #0]
   26938:	1dbb      	adds	r3, r7, #6
   2693a:	1c0a      	adds	r2, r1, #0
   2693c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2693e:	1dfb      	adds	r3, r7, #7
   26940:	781b      	ldrb	r3, [r3, #0]
   26942:	0018      	movs	r0, r3
   26944:	4b0d      	ldr	r3, [pc, #52]	; (2697c <port_pin_set_output_level+0x50>)
   26946:	4798      	blx	r3
   26948:	0003      	movs	r3, r0
   2694a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2694c:	1dfb      	adds	r3, r7, #7
   2694e:	781b      	ldrb	r3, [r3, #0]
   26950:	221f      	movs	r2, #31
   26952:	4013      	ands	r3, r2
   26954:	2201      	movs	r2, #1
   26956:	409a      	lsls	r2, r3
   26958:	0013      	movs	r3, r2
   2695a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2695c:	1dbb      	adds	r3, r7, #6
   2695e:	781b      	ldrb	r3, [r3, #0]
   26960:	2b00      	cmp	r3, #0
   26962:	d003      	beq.n	2696c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26964:	68fb      	ldr	r3, [r7, #12]
   26966:	68ba      	ldr	r2, [r7, #8]
   26968:	619a      	str	r2, [r3, #24]
}
   2696a:	e002      	b.n	26972 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2696c:	68fb      	ldr	r3, [r7, #12]
   2696e:	68ba      	ldr	r2, [r7, #8]
   26970:	615a      	str	r2, [r3, #20]
}
   26972:	46c0      	nop			; (mov r8, r8)
   26974:	46bd      	mov	sp, r7
   26976:	b004      	add	sp, #16
   26978:	bd80      	pop	{r7, pc}
   2697a:	46c0      	nop			; (mov r8, r8)
   2697c:	00026909 	.word	0x00026909

00026980 <system_gclk_chan_get_config_defaults>:
{
   26980:	b580      	push	{r7, lr}
   26982:	b082      	sub	sp, #8
   26984:	af00      	add	r7, sp, #0
   26986:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26988:	687b      	ldr	r3, [r7, #4]
   2698a:	2200      	movs	r2, #0
   2698c:	701a      	strb	r2, [r3, #0]
}
   2698e:	46c0      	nop			; (mov r8, r8)
   26990:	46bd      	mov	sp, r7
   26992:	b002      	add	sp, #8
   26994:	bd80      	pop	{r7, pc}
	...

00026998 <system_apb_clock_set_mask>:
{
   26998:	b580      	push	{r7, lr}
   2699a:	b082      	sub	sp, #8
   2699c:	af00      	add	r7, sp, #0
   2699e:	0002      	movs	r2, r0
   269a0:	6039      	str	r1, [r7, #0]
   269a2:	1dfb      	adds	r3, r7, #7
   269a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   269a6:	1dfb      	adds	r3, r7, #7
   269a8:	781b      	ldrb	r3, [r3, #0]
   269aa:	2b01      	cmp	r3, #1
   269ac:	d00a      	beq.n	269c4 <system_apb_clock_set_mask+0x2c>
   269ae:	2b02      	cmp	r3, #2
   269b0:	d00f      	beq.n	269d2 <system_apb_clock_set_mask+0x3a>
   269b2:	2b00      	cmp	r3, #0
   269b4:	d114      	bne.n	269e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   269b6:	4b0e      	ldr	r3, [pc, #56]	; (269f0 <system_apb_clock_set_mask+0x58>)
   269b8:	4a0d      	ldr	r2, [pc, #52]	; (269f0 <system_apb_clock_set_mask+0x58>)
   269ba:	6991      	ldr	r1, [r2, #24]
   269bc:	683a      	ldr	r2, [r7, #0]
   269be:	430a      	orrs	r2, r1
   269c0:	619a      	str	r2, [r3, #24]
			break;
   269c2:	e00f      	b.n	269e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   269c4:	4b0a      	ldr	r3, [pc, #40]	; (269f0 <system_apb_clock_set_mask+0x58>)
   269c6:	4a0a      	ldr	r2, [pc, #40]	; (269f0 <system_apb_clock_set_mask+0x58>)
   269c8:	69d1      	ldr	r1, [r2, #28]
   269ca:	683a      	ldr	r2, [r7, #0]
   269cc:	430a      	orrs	r2, r1
   269ce:	61da      	str	r2, [r3, #28]
			break;
   269d0:	e008      	b.n	269e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   269d2:	4b07      	ldr	r3, [pc, #28]	; (269f0 <system_apb_clock_set_mask+0x58>)
   269d4:	4a06      	ldr	r2, [pc, #24]	; (269f0 <system_apb_clock_set_mask+0x58>)
   269d6:	6a11      	ldr	r1, [r2, #32]
   269d8:	683a      	ldr	r2, [r7, #0]
   269da:	430a      	orrs	r2, r1
   269dc:	621a      	str	r2, [r3, #32]
			break;
   269de:	e001      	b.n	269e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   269e0:	2317      	movs	r3, #23
   269e2:	e000      	b.n	269e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   269e4:	2300      	movs	r3, #0
}
   269e6:	0018      	movs	r0, r3
   269e8:	46bd      	mov	sp, r7
   269ea:	b002      	add	sp, #8
   269ec:	bd80      	pop	{r7, pc}
   269ee:	46c0      	nop			; (mov r8, r8)
   269f0:	40000400 	.word	0x40000400

000269f4 <system_is_debugger_present>:
{
   269f4:	b580      	push	{r7, lr}
   269f6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   269f8:	4b05      	ldr	r3, [pc, #20]	; (26a10 <system_is_debugger_present+0x1c>)
   269fa:	789b      	ldrb	r3, [r3, #2]
   269fc:	b2db      	uxtb	r3, r3
   269fe:	001a      	movs	r2, r3
   26a00:	2302      	movs	r3, #2
   26a02:	4013      	ands	r3, r2
   26a04:	1e5a      	subs	r2, r3, #1
   26a06:	4193      	sbcs	r3, r2
   26a08:	b2db      	uxtb	r3, r3
}
   26a0a:	0018      	movs	r0, r3
   26a0c:	46bd      	mov	sp, r7
   26a0e:	bd80      	pop	{r7, pc}
   26a10:	41002000 	.word	0x41002000

00026a14 <system_interrupt_enable>:
{
   26a14:	b580      	push	{r7, lr}
   26a16:	b082      	sub	sp, #8
   26a18:	af00      	add	r7, sp, #0
   26a1a:	0002      	movs	r2, r0
   26a1c:	1dfb      	adds	r3, r7, #7
   26a1e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26a20:	4b06      	ldr	r3, [pc, #24]	; (26a3c <system_interrupt_enable+0x28>)
   26a22:	1dfa      	adds	r2, r7, #7
   26a24:	7812      	ldrb	r2, [r2, #0]
   26a26:	0011      	movs	r1, r2
   26a28:	221f      	movs	r2, #31
   26a2a:	400a      	ands	r2, r1
   26a2c:	2101      	movs	r1, #1
   26a2e:	4091      	lsls	r1, r2
   26a30:	000a      	movs	r2, r1
   26a32:	601a      	str	r2, [r3, #0]
}
   26a34:	46c0      	nop			; (mov r8, r8)
   26a36:	46bd      	mov	sp, r7
   26a38:	b002      	add	sp, #8
   26a3a:	bd80      	pop	{r7, pc}
   26a3c:	e000e100 	.word	0xe000e100

00026a40 <system_interrupt_disable>:
{
   26a40:	b580      	push	{r7, lr}
   26a42:	b082      	sub	sp, #8
   26a44:	af00      	add	r7, sp, #0
   26a46:	0002      	movs	r2, r0
   26a48:	1dfb      	adds	r3, r7, #7
   26a4a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26a4c:	4a07      	ldr	r2, [pc, #28]	; (26a6c <system_interrupt_disable+0x2c>)
   26a4e:	1dfb      	adds	r3, r7, #7
   26a50:	781b      	ldrb	r3, [r3, #0]
   26a52:	0019      	movs	r1, r3
   26a54:	231f      	movs	r3, #31
   26a56:	400b      	ands	r3, r1
   26a58:	2101      	movs	r1, #1
   26a5a:	4099      	lsls	r1, r3
   26a5c:	000b      	movs	r3, r1
   26a5e:	0019      	movs	r1, r3
   26a60:	2380      	movs	r3, #128	; 0x80
   26a62:	50d1      	str	r1, [r2, r3]
}
   26a64:	46c0      	nop			; (mov r8, r8)
   26a66:	46bd      	mov	sp, r7
   26a68:	b002      	add	sp, #8
   26a6a:	bd80      	pop	{r7, pc}
   26a6c:	e000e100 	.word	0xe000e100

00026a70 <spi_is_syncing>:
{
   26a70:	b580      	push	{r7, lr}
   26a72:	b084      	sub	sp, #16
   26a74:	af00      	add	r7, sp, #0
   26a76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26a78:	687b      	ldr	r3, [r7, #4]
   26a7a:	681b      	ldr	r3, [r3, #0]
   26a7c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   26a7e:	68fb      	ldr	r3, [r7, #12]
   26a80:	69db      	ldr	r3, [r3, #28]
   26a82:	1e5a      	subs	r2, r3, #1
   26a84:	4193      	sbcs	r3, r2
   26a86:	b2db      	uxtb	r3, r3
}
   26a88:	0018      	movs	r0, r3
   26a8a:	46bd      	mov	sp, r7
   26a8c:	b004      	add	sp, #16
   26a8e:	bd80      	pop	{r7, pc}

00026a90 <spi_enable>:
{
   26a90:	b580      	push	{r7, lr}
   26a92:	b084      	sub	sp, #16
   26a94:	af00      	add	r7, sp, #0
   26a96:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26a98:	687b      	ldr	r3, [r7, #4]
   26a9a:	681b      	ldr	r3, [r3, #0]
   26a9c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   26a9e:	687b      	ldr	r3, [r7, #4]
   26aa0:	681b      	ldr	r3, [r3, #0]
   26aa2:	0018      	movs	r0, r3
   26aa4:	4b0b      	ldr	r3, [pc, #44]	; (26ad4 <spi_enable+0x44>)
   26aa6:	4798      	blx	r3
   26aa8:	0003      	movs	r3, r0
   26aaa:	0018      	movs	r0, r3
   26aac:	4b0a      	ldr	r3, [pc, #40]	; (26ad8 <spi_enable+0x48>)
   26aae:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26ab0:	46c0      	nop			; (mov r8, r8)
   26ab2:	687b      	ldr	r3, [r7, #4]
   26ab4:	0018      	movs	r0, r3
   26ab6:	4b09      	ldr	r3, [pc, #36]	; (26adc <spi_enable+0x4c>)
   26ab8:	4798      	blx	r3
   26aba:	1e03      	subs	r3, r0, #0
   26abc:	d1f9      	bne.n	26ab2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   26abe:	68fb      	ldr	r3, [r7, #12]
   26ac0:	681b      	ldr	r3, [r3, #0]
   26ac2:	2202      	movs	r2, #2
   26ac4:	431a      	orrs	r2, r3
   26ac6:	68fb      	ldr	r3, [r7, #12]
   26ac8:	601a      	str	r2, [r3, #0]
}
   26aca:	46c0      	nop			; (mov r8, r8)
   26acc:	46bd      	mov	sp, r7
   26ace:	b004      	add	sp, #16
   26ad0:	bd80      	pop	{r7, pc}
   26ad2:	46c0      	nop			; (mov r8, r8)
   26ad4:	000267ad 	.word	0x000267ad
   26ad8:	00026a15 	.word	0x00026a15
   26adc:	00026a71 	.word	0x00026a71

00026ae0 <spi_disable>:
{
   26ae0:	b580      	push	{r7, lr}
   26ae2:	b084      	sub	sp, #16
   26ae4:	af00      	add	r7, sp, #0
   26ae6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26ae8:	687b      	ldr	r3, [r7, #4]
   26aea:	681b      	ldr	r3, [r3, #0]
   26aec:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   26aee:	687b      	ldr	r3, [r7, #4]
   26af0:	681b      	ldr	r3, [r3, #0]
   26af2:	0018      	movs	r0, r3
   26af4:	4b0e      	ldr	r3, [pc, #56]	; (26b30 <spi_disable+0x50>)
   26af6:	4798      	blx	r3
   26af8:	0003      	movs	r3, r0
   26afa:	0018      	movs	r0, r3
   26afc:	4b0d      	ldr	r3, [pc, #52]	; (26b34 <spi_disable+0x54>)
   26afe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26b00:	46c0      	nop			; (mov r8, r8)
   26b02:	687b      	ldr	r3, [r7, #4]
   26b04:	0018      	movs	r0, r3
   26b06:	4b0c      	ldr	r3, [pc, #48]	; (26b38 <spi_disable+0x58>)
   26b08:	4798      	blx	r3
   26b0a:	1e03      	subs	r3, r0, #0
   26b0c:	d1f9      	bne.n	26b02 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   26b0e:	68fb      	ldr	r3, [r7, #12]
   26b10:	228f      	movs	r2, #143	; 0x8f
   26b12:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26b14:	68fb      	ldr	r3, [r7, #12]
   26b16:	228f      	movs	r2, #143	; 0x8f
   26b18:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   26b1a:	68fb      	ldr	r3, [r7, #12]
   26b1c:	681b      	ldr	r3, [r3, #0]
   26b1e:	2202      	movs	r2, #2
   26b20:	4393      	bics	r3, r2
   26b22:	001a      	movs	r2, r3
   26b24:	68fb      	ldr	r3, [r7, #12]
   26b26:	601a      	str	r2, [r3, #0]
}
   26b28:	46c0      	nop			; (mov r8, r8)
   26b2a:	46bd      	mov	sp, r7
   26b2c:	b004      	add	sp, #16
   26b2e:	bd80      	pop	{r7, pc}
   26b30:	000267ad 	.word	0x000267ad
   26b34:	00026a41 	.word	0x00026a41
   26b38:	00026a71 	.word	0x00026a71

00026b3c <spi_is_write_complete>:
{
   26b3c:	b580      	push	{r7, lr}
   26b3e:	b084      	sub	sp, #16
   26b40:	af00      	add	r7, sp, #0
   26b42:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b44:	687b      	ldr	r3, [r7, #4]
   26b46:	681b      	ldr	r3, [r3, #0]
   26b48:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   26b4a:	68fb      	ldr	r3, [r7, #12]
   26b4c:	7e1b      	ldrb	r3, [r3, #24]
   26b4e:	b2db      	uxtb	r3, r3
   26b50:	001a      	movs	r2, r3
   26b52:	2302      	movs	r3, #2
   26b54:	4013      	ands	r3, r2
   26b56:	1e5a      	subs	r2, r3, #1
   26b58:	4193      	sbcs	r3, r2
   26b5a:	b2db      	uxtb	r3, r3
}
   26b5c:	0018      	movs	r0, r3
   26b5e:	46bd      	mov	sp, r7
   26b60:	b004      	add	sp, #16
   26b62:	bd80      	pop	{r7, pc}

00026b64 <spi_is_ready_to_write>:
{
   26b64:	b580      	push	{r7, lr}
   26b66:	b084      	sub	sp, #16
   26b68:	af00      	add	r7, sp, #0
   26b6a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b6c:	687b      	ldr	r3, [r7, #4]
   26b6e:	681b      	ldr	r3, [r3, #0]
   26b70:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   26b72:	68fb      	ldr	r3, [r7, #12]
   26b74:	7e1b      	ldrb	r3, [r3, #24]
   26b76:	b2db      	uxtb	r3, r3
   26b78:	001a      	movs	r2, r3
   26b7a:	2301      	movs	r3, #1
   26b7c:	4013      	ands	r3, r2
   26b7e:	1e5a      	subs	r2, r3, #1
   26b80:	4193      	sbcs	r3, r2
   26b82:	b2db      	uxtb	r3, r3
}
   26b84:	0018      	movs	r0, r3
   26b86:	46bd      	mov	sp, r7
   26b88:	b004      	add	sp, #16
   26b8a:	bd80      	pop	{r7, pc}

00026b8c <spi_is_ready_to_read>:
{
   26b8c:	b580      	push	{r7, lr}
   26b8e:	b084      	sub	sp, #16
   26b90:	af00      	add	r7, sp, #0
   26b92:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26b94:	687b      	ldr	r3, [r7, #4]
   26b96:	681b      	ldr	r3, [r3, #0]
   26b98:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   26b9a:	68fb      	ldr	r3, [r7, #12]
   26b9c:	7e1b      	ldrb	r3, [r3, #24]
   26b9e:	b2db      	uxtb	r3, r3
   26ba0:	001a      	movs	r2, r3
   26ba2:	2304      	movs	r3, #4
   26ba4:	4013      	ands	r3, r2
   26ba6:	1e5a      	subs	r2, r3, #1
   26ba8:	4193      	sbcs	r3, r2
   26baa:	b2db      	uxtb	r3, r3
}
   26bac:	0018      	movs	r0, r3
   26bae:	46bd      	mov	sp, r7
   26bb0:	b004      	add	sp, #16
   26bb2:	bd80      	pop	{r7, pc}

00026bb4 <spi_write>:
{
   26bb4:	b580      	push	{r7, lr}
   26bb6:	b084      	sub	sp, #16
   26bb8:	af00      	add	r7, sp, #0
   26bba:	6078      	str	r0, [r7, #4]
   26bbc:	000a      	movs	r2, r1
   26bbe:	1cbb      	adds	r3, r7, #2
   26bc0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26bc2:	687b      	ldr	r3, [r7, #4]
   26bc4:	681b      	ldr	r3, [r3, #0]
   26bc6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   26bc8:	687b      	ldr	r3, [r7, #4]
   26bca:	0018      	movs	r0, r3
   26bcc:	4b0a      	ldr	r3, [pc, #40]	; (26bf8 <spi_write+0x44>)
   26bce:	4798      	blx	r3
   26bd0:	0003      	movs	r3, r0
   26bd2:	001a      	movs	r2, r3
   26bd4:	2301      	movs	r3, #1
   26bd6:	4053      	eors	r3, r2
   26bd8:	b2db      	uxtb	r3, r3
   26bda:	2b00      	cmp	r3, #0
   26bdc:	d001      	beq.n	26be2 <spi_write+0x2e>
		return STATUS_BUSY;
   26bde:	2305      	movs	r3, #5
   26be0:	e006      	b.n	26bf0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   26be2:	1cbb      	adds	r3, r7, #2
   26be4:	881b      	ldrh	r3, [r3, #0]
   26be6:	05db      	lsls	r3, r3, #23
   26be8:	0dda      	lsrs	r2, r3, #23
   26bea:	68fb      	ldr	r3, [r7, #12]
   26bec:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   26bee:	2300      	movs	r3, #0
}
   26bf0:	0018      	movs	r0, r3
   26bf2:	46bd      	mov	sp, r7
   26bf4:	b004      	add	sp, #16
   26bf6:	bd80      	pop	{r7, pc}
   26bf8:	00026b65 	.word	0x00026b65

00026bfc <spi_read>:
{
   26bfc:	b580      	push	{r7, lr}
   26bfe:	b084      	sub	sp, #16
   26c00:	af00      	add	r7, sp, #0
   26c02:	6078      	str	r0, [r7, #4]
   26c04:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26c06:	687b      	ldr	r3, [r7, #4]
   26c08:	681b      	ldr	r3, [r3, #0]
   26c0a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   26c0c:	687b      	ldr	r3, [r7, #4]
   26c0e:	0018      	movs	r0, r3
   26c10:	4b1b      	ldr	r3, [pc, #108]	; (26c80 <spi_read+0x84>)
   26c12:	4798      	blx	r3
   26c14:	0003      	movs	r3, r0
   26c16:	001a      	movs	r2, r3
   26c18:	2301      	movs	r3, #1
   26c1a:	4053      	eors	r3, r2
   26c1c:	b2db      	uxtb	r3, r3
   26c1e:	2b00      	cmp	r3, #0
   26c20:	d001      	beq.n	26c26 <spi_read+0x2a>
		return STATUS_ERR_IO;
   26c22:	2310      	movs	r3, #16
   26c24:	e027      	b.n	26c76 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   26c26:	230f      	movs	r3, #15
   26c28:	18fb      	adds	r3, r7, r3
   26c2a:	2200      	movs	r2, #0
   26c2c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26c2e:	68bb      	ldr	r3, [r7, #8]
   26c30:	8b5b      	ldrh	r3, [r3, #26]
   26c32:	b29b      	uxth	r3, r3
   26c34:	001a      	movs	r2, r3
   26c36:	2304      	movs	r3, #4
   26c38:	4013      	ands	r3, r2
   26c3a:	d006      	beq.n	26c4a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   26c3c:	230f      	movs	r3, #15
   26c3e:	18fb      	adds	r3, r7, r3
   26c40:	221e      	movs	r2, #30
   26c42:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26c44:	68bb      	ldr	r3, [r7, #8]
   26c46:	2204      	movs	r2, #4
   26c48:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26c4a:	687b      	ldr	r3, [r7, #4]
   26c4c:	799b      	ldrb	r3, [r3, #6]
   26c4e:	2b01      	cmp	r3, #1
   26c50:	d108      	bne.n	26c64 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   26c52:	68bb      	ldr	r3, [r7, #8]
   26c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c56:	b29b      	uxth	r3, r3
   26c58:	05db      	lsls	r3, r3, #23
   26c5a:	0ddb      	lsrs	r3, r3, #23
   26c5c:	b29a      	uxth	r2, r3
   26c5e:	683b      	ldr	r3, [r7, #0]
   26c60:	801a      	strh	r2, [r3, #0]
   26c62:	e005      	b.n	26c70 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   26c64:	68bb      	ldr	r3, [r7, #8]
   26c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c68:	b2db      	uxtb	r3, r3
   26c6a:	b29a      	uxth	r2, r3
   26c6c:	683b      	ldr	r3, [r7, #0]
   26c6e:	801a      	strh	r2, [r3, #0]
	return retval;
   26c70:	230f      	movs	r3, #15
   26c72:	18fb      	adds	r3, r7, r3
   26c74:	781b      	ldrb	r3, [r3, #0]
}
   26c76:	0018      	movs	r0, r3
   26c78:	46bd      	mov	sp, r7
   26c7a:	b004      	add	sp, #16
   26c7c:	bd80      	pop	{r7, pc}
   26c7e:	46c0      	nop			; (mov r8, r8)
   26c80:	00026b8d 	.word	0x00026b8d

00026c84 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   26c84:	b590      	push	{r4, r7, lr}
   26c86:	b089      	sub	sp, #36	; 0x24
   26c88:	af00      	add	r7, sp, #0
   26c8a:	6078      	str	r0, [r7, #4]
   26c8c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26c8e:	230c      	movs	r3, #12
   26c90:	18fb      	adds	r3, r7, r3
   26c92:	2200      	movs	r2, #0
   26c94:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26c96:	687b      	ldr	r3, [r7, #4]
   26c98:	681b      	ldr	r3, [r3, #0]
   26c9a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   26c9c:	687b      	ldr	r3, [r7, #4]
   26c9e:	0018      	movs	r0, r3
   26ca0:	4b24      	ldr	r3, [pc, #144]	; (26d34 <spi_set_baudrate+0xb0>)
   26ca2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26ca4:	46c0      	nop			; (mov r8, r8)
   26ca6:	687b      	ldr	r3, [r7, #4]
   26ca8:	0018      	movs	r0, r3
   26caa:	4b23      	ldr	r3, [pc, #140]	; (26d38 <spi_set_baudrate+0xb4>)
   26cac:	4798      	blx	r3
   26cae:	1e03      	subs	r3, r0, #0
   26cb0:	d1f9      	bne.n	26ca6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26cb2:	687b      	ldr	r3, [r7, #4]
   26cb4:	681b      	ldr	r3, [r3, #0]
   26cb6:	0018      	movs	r0, r3
   26cb8:	4b20      	ldr	r3, [pc, #128]	; (26d3c <spi_set_baudrate+0xb8>)
   26cba:	4798      	blx	r3
   26cbc:	0003      	movs	r3, r0
   26cbe:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26cc0:	69bb      	ldr	r3, [r7, #24]
   26cc2:	3314      	adds	r3, #20
   26cc4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26cc6:	697b      	ldr	r3, [r7, #20]
   26cc8:	b2db      	uxtb	r3, r3
   26cca:	0018      	movs	r0, r3
   26ccc:	4b1c      	ldr	r3, [pc, #112]	; (26d40 <spi_set_baudrate+0xbc>)
   26cce:	4798      	blx	r3
   26cd0:	0003      	movs	r3, r0
   26cd2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   26cd4:	230f      	movs	r3, #15
   26cd6:	18fc      	adds	r4, r7, r3
   26cd8:	230c      	movs	r3, #12
   26cda:	18fa      	adds	r2, r7, r3
   26cdc:	6939      	ldr	r1, [r7, #16]
   26cde:	683b      	ldr	r3, [r7, #0]
   26ce0:	0018      	movs	r0, r3
   26ce2:	4b18      	ldr	r3, [pc, #96]	; (26d44 <spi_set_baudrate+0xc0>)
   26ce4:	4798      	blx	r3
   26ce6:	0003      	movs	r3, r0
   26ce8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   26cea:	230f      	movs	r3, #15
   26cec:	18fb      	adds	r3, r7, r3
   26cee:	781b      	ldrb	r3, [r3, #0]
   26cf0:	2b00      	cmp	r3, #0
   26cf2:	d001      	beq.n	26cf8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   26cf4:	2317      	movs	r3, #23
   26cf6:	e018      	b.n	26d2a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   26cf8:	230c      	movs	r3, #12
   26cfa:	18fb      	adds	r3, r7, r3
   26cfc:	881b      	ldrh	r3, [r3, #0]
   26cfe:	b2da      	uxtb	r2, r3
   26d00:	69fb      	ldr	r3, [r7, #28]
   26d02:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   26d04:	46c0      	nop			; (mov r8, r8)
   26d06:	687b      	ldr	r3, [r7, #4]
   26d08:	0018      	movs	r0, r3
   26d0a:	4b0b      	ldr	r3, [pc, #44]	; (26d38 <spi_set_baudrate+0xb4>)
   26d0c:	4798      	blx	r3
   26d0e:	1e03      	subs	r3, r0, #0
   26d10:	d1f9      	bne.n	26d06 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   26d12:	687b      	ldr	r3, [r7, #4]
   26d14:	0018      	movs	r0, r3
   26d16:	4b0c      	ldr	r3, [pc, #48]	; (26d48 <spi_set_baudrate+0xc4>)
   26d18:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26d1a:	46c0      	nop			; (mov r8, r8)
   26d1c:	687b      	ldr	r3, [r7, #4]
   26d1e:	0018      	movs	r0, r3
   26d20:	4b05      	ldr	r3, [pc, #20]	; (26d38 <spi_set_baudrate+0xb4>)
   26d22:	4798      	blx	r3
   26d24:	1e03      	subs	r3, r0, #0
   26d26:	d1f9      	bne.n	26d1c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   26d28:	2300      	movs	r3, #0
}
   26d2a:	0018      	movs	r0, r3
   26d2c:	46bd      	mov	sp, r7
   26d2e:	b009      	add	sp, #36	; 0x24
   26d30:	bd90      	pop	{r4, r7, pc}
   26d32:	46c0      	nop			; (mov r8, r8)
   26d34:	00026ae1 	.word	0x00026ae1
   26d38:	00026a71 	.word	0x00026a71
   26d3c:	000266dd 	.word	0x000266dd
   26d40:	00029091 	.word	0x00029091
   26d44:	00026257 	.word	0x00026257
   26d48:	00026a91 	.word	0x00026a91

00026d4c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   26d4c:	b590      	push	{r4, r7, lr}
   26d4e:	b093      	sub	sp, #76	; 0x4c
   26d50:	af00      	add	r7, sp, #0
   26d52:	6078      	str	r0, [r7, #4]
   26d54:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   26d56:	687b      	ldr	r3, [r7, #4]
   26d58:	681b      	ldr	r3, [r3, #0]
   26d5a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   26d5c:	687b      	ldr	r3, [r7, #4]
   26d5e:	681b      	ldr	r3, [r3, #0]
   26d60:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   26d62:	231c      	movs	r3, #28
   26d64:	18fb      	adds	r3, r7, r3
   26d66:	0018      	movs	r0, r3
   26d68:	4b75      	ldr	r3, [pc, #468]	; (26f40 <_spi_set_config+0x1f4>)
   26d6a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26d6c:	231c      	movs	r3, #28
   26d6e:	18fb      	adds	r3, r7, r3
   26d70:	2200      	movs	r2, #0
   26d72:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   26d74:	683b      	ldr	r3, [r7, #0]
   26d76:	781b      	ldrb	r3, [r3, #0]
   26d78:	2b00      	cmp	r3, #0
   26d7a:	d103      	bne.n	26d84 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   26d7c:	231c      	movs	r3, #28
   26d7e:	18fb      	adds	r3, r7, r3
   26d80:	2200      	movs	r2, #0
   26d82:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   26d84:	683b      	ldr	r3, [r7, #0]
   26d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   26d88:	230c      	movs	r3, #12
   26d8a:	18fb      	adds	r3, r7, r3
   26d8c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   26d8e:	683b      	ldr	r3, [r7, #0]
   26d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   26d92:	230c      	movs	r3, #12
   26d94:	18fb      	adds	r3, r7, r3
   26d96:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   26d98:	683b      	ldr	r3, [r7, #0]
   26d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   26d9c:	230c      	movs	r3, #12
   26d9e:	18fb      	adds	r3, r7, r3
   26da0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   26da2:	683b      	ldr	r3, [r7, #0]
   26da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   26da6:	230c      	movs	r3, #12
   26da8:	18fb      	adds	r3, r7, r3
   26daa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   26dac:	2347      	movs	r3, #71	; 0x47
   26dae:	18fb      	adds	r3, r7, r3
   26db0:	2200      	movs	r2, #0
   26db2:	701a      	strb	r2, [r3, #0]
   26db4:	e02c      	b.n	26e10 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   26db6:	2347      	movs	r3, #71	; 0x47
   26db8:	18fb      	adds	r3, r7, r3
   26dba:	781a      	ldrb	r2, [r3, #0]
   26dbc:	230c      	movs	r3, #12
   26dbe:	18fb      	adds	r3, r7, r3
   26dc0:	0092      	lsls	r2, r2, #2
   26dc2:	58d3      	ldr	r3, [r2, r3]
   26dc4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   26dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26dc8:	2b00      	cmp	r3, #0
   26dca:	d109      	bne.n	26de0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   26dcc:	2347      	movs	r3, #71	; 0x47
   26dce:	18fb      	adds	r3, r7, r3
   26dd0:	781a      	ldrb	r2, [r3, #0]
   26dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26dd4:	0011      	movs	r1, r2
   26dd6:	0018      	movs	r0, r3
   26dd8:	4b5a      	ldr	r3, [pc, #360]	; (26f44 <_spi_set_config+0x1f8>)
   26dda:	4798      	blx	r3
   26ddc:	0003      	movs	r3, r0
   26dde:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   26de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26de2:	3301      	adds	r3, #1
   26de4:	d00d      	beq.n	26e02 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   26de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26de8:	b2da      	uxtb	r2, r3
   26dea:	231c      	movs	r3, #28
   26dec:	18fb      	adds	r3, r7, r3
   26dee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   26df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26df2:	0c1b      	lsrs	r3, r3, #16
   26df4:	b2db      	uxtb	r3, r3
   26df6:	221c      	movs	r2, #28
   26df8:	18ba      	adds	r2, r7, r2
   26dfa:	0011      	movs	r1, r2
   26dfc:	0018      	movs	r0, r3
   26dfe:	4b52      	ldr	r3, [pc, #328]	; (26f48 <_spi_set_config+0x1fc>)
   26e00:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   26e02:	2347      	movs	r3, #71	; 0x47
   26e04:	18fb      	adds	r3, r7, r3
   26e06:	781a      	ldrb	r2, [r3, #0]
   26e08:	2347      	movs	r3, #71	; 0x47
   26e0a:	18fb      	adds	r3, r7, r3
   26e0c:	3201      	adds	r2, #1
   26e0e:	701a      	strb	r2, [r3, #0]
   26e10:	2347      	movs	r3, #71	; 0x47
   26e12:	18fb      	adds	r3, r7, r3
   26e14:	781b      	ldrb	r3, [r3, #0]
   26e16:	2b03      	cmp	r3, #3
   26e18:	d9cd      	bls.n	26db6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   26e1a:	683b      	ldr	r3, [r7, #0]
   26e1c:	781a      	ldrb	r2, [r3, #0]
   26e1e:	687b      	ldr	r3, [r7, #4]
   26e20:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   26e22:	683b      	ldr	r3, [r7, #0]
   26e24:	7c1a      	ldrb	r2, [r3, #16]
   26e26:	687b      	ldr	r3, [r7, #4]
   26e28:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   26e2a:	683b      	ldr	r3, [r7, #0]
   26e2c:	7c9a      	ldrb	r2, [r3, #18]
   26e2e:	687b      	ldr	r3, [r7, #4]
   26e30:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   26e32:	683b      	ldr	r3, [r7, #0]
   26e34:	7d1a      	ldrb	r2, [r3, #20]
   26e36:	687b      	ldr	r3, [r7, #4]
   26e38:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26e3a:	230a      	movs	r3, #10
   26e3c:	18fb      	adds	r3, r7, r3
   26e3e:	2200      	movs	r2, #0
   26e40:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   26e42:	2300      	movs	r3, #0
   26e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   26e46:	2300      	movs	r3, #0
   26e48:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   26e4a:	683b      	ldr	r3, [r7, #0]
   26e4c:	781b      	ldrb	r3, [r3, #0]
   26e4e:	2b01      	cmp	r3, #1
   26e50:	d129      	bne.n	26ea6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26e52:	687b      	ldr	r3, [r7, #4]
   26e54:	681b      	ldr	r3, [r3, #0]
   26e56:	0018      	movs	r0, r3
   26e58:	4b3c      	ldr	r3, [pc, #240]	; (26f4c <_spi_set_config+0x200>)
   26e5a:	4798      	blx	r3
   26e5c:	0003      	movs	r3, r0
   26e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26e62:	3314      	adds	r3, #20
   26e64:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26e68:	b2db      	uxtb	r3, r3
   26e6a:	0018      	movs	r0, r3
   26e6c:	4b38      	ldr	r3, [pc, #224]	; (26f50 <_spi_set_config+0x204>)
   26e6e:	4798      	blx	r3
   26e70:	0003      	movs	r3, r0
   26e72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   26e74:	683b      	ldr	r3, [r7, #0]
   26e76:	699b      	ldr	r3, [r3, #24]
   26e78:	2223      	movs	r2, #35	; 0x23
   26e7a:	18bc      	adds	r4, r7, r2
   26e7c:	220a      	movs	r2, #10
   26e7e:	18ba      	adds	r2, r7, r2
   26e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26e82:	0018      	movs	r0, r3
   26e84:	4b33      	ldr	r3, [pc, #204]	; (26f54 <_spi_set_config+0x208>)
   26e86:	4798      	blx	r3
   26e88:	0003      	movs	r3, r0
   26e8a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   26e8c:	2323      	movs	r3, #35	; 0x23
   26e8e:	18fb      	adds	r3, r7, r3
   26e90:	781b      	ldrb	r3, [r3, #0]
   26e92:	2b00      	cmp	r3, #0
   26e94:	d001      	beq.n	26e9a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   26e96:	2317      	movs	r3, #23
   26e98:	e04e      	b.n	26f38 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   26e9a:	230a      	movs	r3, #10
   26e9c:	18fb      	adds	r3, r7, r3
   26e9e:	881b      	ldrh	r3, [r3, #0]
   26ea0:	b2da      	uxtb	r2, r3
   26ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26ea4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   26ea6:	683b      	ldr	r3, [r7, #0]
   26ea8:	685b      	ldr	r3, [r3, #4]
   26eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26eac:	4313      	orrs	r3, r2
   26eae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   26eb0:	683b      	ldr	r3, [r7, #0]
   26eb2:	689b      	ldr	r3, [r3, #8]
   26eb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26eb6:	4313      	orrs	r3, r2
   26eb8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   26eba:	683b      	ldr	r3, [r7, #0]
   26ebc:	68db      	ldr	r3, [r3, #12]
   26ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26ec0:	4313      	orrs	r3, r2
   26ec2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   26ec4:	683b      	ldr	r3, [r7, #0]
   26ec6:	7c1b      	ldrb	r3, [r3, #16]
   26ec8:	001a      	movs	r2, r3
   26eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26ecc:	4313      	orrs	r3, r2
   26ece:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   26ed0:	683b      	ldr	r3, [r7, #0]
   26ed2:	7c5b      	ldrb	r3, [r3, #17]
   26ed4:	2b00      	cmp	r3, #0
   26ed6:	d103      	bne.n	26ee0 <_spi_set_config+0x194>
   26ed8:	4b1f      	ldr	r3, [pc, #124]	; (26f58 <_spi_set_config+0x20c>)
   26eda:	4798      	blx	r3
   26edc:	1e03      	subs	r3, r0, #0
   26ede:	d003      	beq.n	26ee8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   26ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26ee2:	2280      	movs	r2, #128	; 0x80
   26ee4:	4313      	orrs	r3, r2
   26ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   26ee8:	683b      	ldr	r3, [r7, #0]
   26eea:	7c9b      	ldrb	r3, [r3, #18]
   26eec:	2b00      	cmp	r3, #0
   26eee:	d004      	beq.n	26efa <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   26ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26ef2:	2280      	movs	r2, #128	; 0x80
   26ef4:	0292      	lsls	r2, r2, #10
   26ef6:	4313      	orrs	r3, r2
   26ef8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   26efa:	683b      	ldr	r3, [r7, #0]
   26efc:	7cdb      	ldrb	r3, [r3, #19]
   26efe:	2b00      	cmp	r3, #0
   26f00:	d004      	beq.n	26f0c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   26f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26f04:	2280      	movs	r2, #128	; 0x80
   26f06:	0092      	lsls	r2, r2, #2
   26f08:	4313      	orrs	r3, r2
   26f0a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   26f0c:	683b      	ldr	r3, [r7, #0]
   26f0e:	7d1b      	ldrb	r3, [r3, #20]
   26f10:	2b00      	cmp	r3, #0
   26f12:	d004      	beq.n	26f1e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   26f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26f16:	2280      	movs	r2, #128	; 0x80
   26f18:	0192      	lsls	r2, r2, #6
   26f1a:	4313      	orrs	r3, r2
   26f1c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   26f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26f20:	681a      	ldr	r2, [r3, #0]
   26f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26f24:	431a      	orrs	r2, r3
   26f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26f28:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   26f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26f2c:	685a      	ldr	r2, [r3, #4]
   26f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26f30:	431a      	orrs	r2, r3
   26f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26f34:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   26f36:	2300      	movs	r3, #0
}
   26f38:	0018      	movs	r0, r3
   26f3a:	46bd      	mov	sp, r7
   26f3c:	b013      	add	sp, #76	; 0x4c
   26f3e:	bd90      	pop	{r4, r7, pc}
   26f40:	00026881 	.word	0x00026881
   26f44:	00026521 	.word	0x00026521
   26f48:	000292cd 	.word	0x000292cd
   26f4c:	000266dd 	.word	0x000266dd
   26f50:	00029091 	.word	0x00029091
   26f54:	00026257 	.word	0x00026257
   26f58:	000269f5 	.word	0x000269f5

00026f5c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   26f5c:	b590      	push	{r4, r7, lr}
   26f5e:	b08b      	sub	sp, #44	; 0x2c
   26f60:	af00      	add	r7, sp, #0
   26f62:	60f8      	str	r0, [r7, #12]
   26f64:	60b9      	str	r1, [r7, #8]
   26f66:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26f68:	68fb      	ldr	r3, [r7, #12]
   26f6a:	68ba      	ldr	r2, [r7, #8]
   26f6c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26f6e:	68fb      	ldr	r3, [r7, #12]
   26f70:	681b      	ldr	r3, [r3, #0]
   26f72:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   26f74:	6a3b      	ldr	r3, [r7, #32]
   26f76:	681b      	ldr	r3, [r3, #0]
   26f78:	2202      	movs	r2, #2
   26f7a:	4013      	ands	r3, r2
   26f7c:	d001      	beq.n	26f82 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   26f7e:	231c      	movs	r3, #28
   26f80:	e09c      	b.n	270bc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   26f82:	6a3b      	ldr	r3, [r7, #32]
   26f84:	681b      	ldr	r3, [r3, #0]
   26f86:	2201      	movs	r2, #1
   26f88:	4013      	ands	r3, r2
   26f8a:	d001      	beq.n	26f90 <spi_init+0x34>
		return STATUS_BUSY;
   26f8c:	2305      	movs	r3, #5
   26f8e:	e095      	b.n	270bc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26f90:	68fb      	ldr	r3, [r7, #12]
   26f92:	681b      	ldr	r3, [r3, #0]
   26f94:	0018      	movs	r0, r3
   26f96:	4b4b      	ldr	r3, [pc, #300]	; (270c4 <spi_init+0x168>)
   26f98:	4798      	blx	r3
   26f9a:	0003      	movs	r3, r0
   26f9c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   26f9e:	69fb      	ldr	r3, [r7, #28]
   26fa0:	3302      	adds	r3, #2
   26fa2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26fa4:	69fb      	ldr	r3, [r7, #28]
   26fa6:	3314      	adds	r3, #20
   26fa8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   26faa:	2201      	movs	r2, #1
   26fac:	69bb      	ldr	r3, [r7, #24]
   26fae:	409a      	lsls	r2, r3
   26fb0:	0013      	movs	r3, r2
   26fb2:	0019      	movs	r1, r3
   26fb4:	2002      	movs	r0, #2
   26fb6:	4b44      	ldr	r3, [pc, #272]	; (270c8 <spi_init+0x16c>)
   26fb8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26fba:	2310      	movs	r3, #16
   26fbc:	18fb      	adds	r3, r7, r3
   26fbe:	0018      	movs	r0, r3
   26fc0:	4b42      	ldr	r3, [pc, #264]	; (270cc <spi_init+0x170>)
   26fc2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   26fc4:	687b      	ldr	r3, [r7, #4]
   26fc6:	2224      	movs	r2, #36	; 0x24
   26fc8:	5c9a      	ldrb	r2, [r3, r2]
   26fca:	2310      	movs	r3, #16
   26fcc:	18fb      	adds	r3, r7, r3
   26fce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   26fd0:	697b      	ldr	r3, [r7, #20]
   26fd2:	b2db      	uxtb	r3, r3
   26fd4:	2210      	movs	r2, #16
   26fd6:	18ba      	adds	r2, r7, r2
   26fd8:	0011      	movs	r1, r2
   26fda:	0018      	movs	r0, r3
   26fdc:	4b3c      	ldr	r3, [pc, #240]	; (270d0 <spi_init+0x174>)
   26fde:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   26fe0:	697b      	ldr	r3, [r7, #20]
   26fe2:	b2db      	uxtb	r3, r3
   26fe4:	0018      	movs	r0, r3
   26fe6:	4b3b      	ldr	r3, [pc, #236]	; (270d4 <spi_init+0x178>)
   26fe8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   26fea:	687b      	ldr	r3, [r7, #4]
   26fec:	2224      	movs	r2, #36	; 0x24
   26fee:	5c9b      	ldrb	r3, [r3, r2]
   26ff0:	2100      	movs	r1, #0
   26ff2:	0018      	movs	r0, r3
   26ff4:	4b38      	ldr	r3, [pc, #224]	; (270d8 <spi_init+0x17c>)
   26ff6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   26ff8:	687b      	ldr	r3, [r7, #4]
   26ffa:	781b      	ldrb	r3, [r3, #0]
   26ffc:	2b01      	cmp	r3, #1
   26ffe:	d105      	bne.n	2700c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27000:	6a3b      	ldr	r3, [r7, #32]
   27002:	681b      	ldr	r3, [r3, #0]
   27004:	220c      	movs	r2, #12
   27006:	431a      	orrs	r2, r3
   27008:	6a3b      	ldr	r3, [r7, #32]
   2700a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2700c:	2327      	movs	r3, #39	; 0x27
   2700e:	18fb      	adds	r3, r7, r3
   27010:	2200      	movs	r2, #0
   27012:	701a      	strb	r2, [r3, #0]
   27014:	e010      	b.n	27038 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27016:	2327      	movs	r3, #39	; 0x27
   27018:	18fb      	adds	r3, r7, r3
   2701a:	781b      	ldrb	r3, [r3, #0]
   2701c:	68fa      	ldr	r2, [r7, #12]
   2701e:	3302      	adds	r3, #2
   27020:	009b      	lsls	r3, r3, #2
   27022:	18d3      	adds	r3, r2, r3
   27024:	3304      	adds	r3, #4
   27026:	2200      	movs	r2, #0
   27028:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2702a:	2327      	movs	r3, #39	; 0x27
   2702c:	18fb      	adds	r3, r7, r3
   2702e:	781a      	ldrb	r2, [r3, #0]
   27030:	2327      	movs	r3, #39	; 0x27
   27032:	18fb      	adds	r3, r7, r3
   27034:	3201      	adds	r2, #1
   27036:	701a      	strb	r2, [r3, #0]
   27038:	2327      	movs	r3, #39	; 0x27
   2703a:	18fb      	adds	r3, r7, r3
   2703c:	781b      	ldrb	r3, [r3, #0]
   2703e:	2b06      	cmp	r3, #6
   27040:	d9e9      	bls.n	27016 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27042:	68fb      	ldr	r3, [r7, #12]
   27044:	2200      	movs	r2, #0
   27046:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27048:	68fb      	ldr	r3, [r7, #12]
   2704a:	2200      	movs	r2, #0
   2704c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2704e:	68fb      	ldr	r3, [r7, #12]
   27050:	2200      	movs	r2, #0
   27052:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27054:	68fb      	ldr	r3, [r7, #12]
   27056:	2200      	movs	r2, #0
   27058:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2705a:	68fb      	ldr	r3, [r7, #12]
   2705c:	2236      	movs	r2, #54	; 0x36
   2705e:	2100      	movs	r1, #0
   27060:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27062:	68fb      	ldr	r3, [r7, #12]
   27064:	2237      	movs	r2, #55	; 0x37
   27066:	2100      	movs	r1, #0
   27068:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2706a:	68fb      	ldr	r3, [r7, #12]
   2706c:	2238      	movs	r2, #56	; 0x38
   2706e:	2100      	movs	r1, #0
   27070:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27072:	68fb      	ldr	r3, [r7, #12]
   27074:	2203      	movs	r2, #3
   27076:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27078:	68fb      	ldr	r3, [r7, #12]
   2707a:	2200      	movs	r2, #0
   2707c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2707e:	68fb      	ldr	r3, [r7, #12]
   27080:	681b      	ldr	r3, [r3, #0]
   27082:	2213      	movs	r2, #19
   27084:	18bc      	adds	r4, r7, r2
   27086:	0018      	movs	r0, r3
   27088:	4b0e      	ldr	r3, [pc, #56]	; (270c4 <spi_init+0x168>)
   2708a:	4798      	blx	r3
   2708c:	0003      	movs	r3, r0
   2708e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27090:	4a12      	ldr	r2, [pc, #72]	; (270dc <spi_init+0x180>)
   27092:	2313      	movs	r3, #19
   27094:	18fb      	adds	r3, r7, r3
   27096:	781b      	ldrb	r3, [r3, #0]
   27098:	0011      	movs	r1, r2
   2709a:	0018      	movs	r0, r3
   2709c:	4b10      	ldr	r3, [pc, #64]	; (270e0 <spi_init+0x184>)
   2709e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   270a0:	2313      	movs	r3, #19
   270a2:	18fb      	adds	r3, r7, r3
   270a4:	781a      	ldrb	r2, [r3, #0]
   270a6:	4b0f      	ldr	r3, [pc, #60]	; (270e4 <spi_init+0x188>)
   270a8:	0092      	lsls	r2, r2, #2
   270aa:	68f9      	ldr	r1, [r7, #12]
   270ac:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   270ae:	687a      	ldr	r2, [r7, #4]
   270b0:	68fb      	ldr	r3, [r7, #12]
   270b2:	0011      	movs	r1, r2
   270b4:	0018      	movs	r0, r3
   270b6:	4b0c      	ldr	r3, [pc, #48]	; (270e8 <spi_init+0x18c>)
   270b8:	4798      	blx	r3
   270ba:	0003      	movs	r3, r0
}
   270bc:	0018      	movs	r0, r3
   270be:	46bd      	mov	sp, r7
   270c0:	b00b      	add	sp, #44	; 0x2c
   270c2:	bd90      	pop	{r4, r7, pc}
   270c4:	000266dd 	.word	0x000266dd
   270c8:	00026999 	.word	0x00026999
   270cc:	00026981 	.word	0x00026981
   270d0:	00028f6d 	.word	0x00028f6d
   270d4:	00028fb1 	.word	0x00028fb1
   270d8:	00026495 	.word	0x00026495
   270dc:	000275b5 	.word	0x000275b5
   270e0:	00026741 	.word	0x00026741
   270e4:	20005bcc 	.word	0x20005bcc
   270e8:	00026d4d 	.word	0x00026d4d

000270ec <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   270ec:	b590      	push	{r4, r7, lr}
   270ee:	b087      	sub	sp, #28
   270f0:	af00      	add	r7, sp, #0
   270f2:	60f8      	str	r0, [r7, #12]
   270f4:	60b9      	str	r1, [r7, #8]
   270f6:	0019      	movs	r1, r3
   270f8:	1dbb      	adds	r3, r7, #6
   270fa:	801a      	strh	r2, [r3, #0]
   270fc:	1d3b      	adds	r3, r7, #4
   270fe:	1c0a      	adds	r2, r1, #0
   27100:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27102:	68fb      	ldr	r3, [r7, #12]
   27104:	2238      	movs	r2, #56	; 0x38
   27106:	5c9b      	ldrb	r3, [r3, r2]
   27108:	b2db      	uxtb	r3, r3
   2710a:	2b05      	cmp	r3, #5
   2710c:	d101      	bne.n	27112 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2710e:	2305      	movs	r3, #5
   27110:	e07a      	b.n	27208 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27112:	1dbb      	adds	r3, r7, #6
   27114:	881b      	ldrh	r3, [r3, #0]
   27116:	2b00      	cmp	r3, #0
   27118:	d101      	bne.n	2711e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2711a:	2317      	movs	r3, #23
   2711c:	e074      	b.n	27208 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2711e:	68fb      	ldr	r3, [r7, #12]
   27120:	79db      	ldrb	r3, [r3, #7]
   27122:	2201      	movs	r2, #1
   27124:	4053      	eors	r3, r2
   27126:	b2db      	uxtb	r3, r3
   27128:	2b00      	cmp	r3, #0
   2712a:	d001      	beq.n	27130 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   2712c:	231c      	movs	r3, #28
   2712e:	e06b      	b.n	27208 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27130:	2316      	movs	r3, #22
   27132:	18fb      	adds	r3, r7, r3
   27134:	2200      	movs	r2, #0
   27136:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27138:	e05e      	b.n	271f8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2713a:	68fb      	ldr	r3, [r7, #12]
   2713c:	795b      	ldrb	r3, [r3, #5]
   2713e:	2b01      	cmp	r3, #1
   27140:	d112      	bne.n	27168 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27142:	46c0      	nop			; (mov r8, r8)
   27144:	68fb      	ldr	r3, [r7, #12]
   27146:	0018      	movs	r0, r3
   27148:	4b31      	ldr	r3, [pc, #196]	; (27210 <spi_read_buffer_wait+0x124>)
   2714a:	4798      	blx	r3
   2714c:	0003      	movs	r3, r0
   2714e:	001a      	movs	r2, r3
   27150:	2301      	movs	r3, #1
   27152:	4053      	eors	r3, r2
   27154:	b2db      	uxtb	r3, r3
   27156:	2b00      	cmp	r3, #0
   27158:	d1f4      	bne.n	27144 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2715a:	1d3b      	adds	r3, r7, #4
   2715c:	881a      	ldrh	r2, [r3, #0]
   2715e:	68fb      	ldr	r3, [r7, #12]
   27160:	0011      	movs	r1, r2
   27162:	0018      	movs	r0, r3
   27164:	4b2b      	ldr	r3, [pc, #172]	; (27214 <spi_read_buffer_wait+0x128>)
   27166:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27168:	46c0      	nop			; (mov r8, r8)
   2716a:	68fb      	ldr	r3, [r7, #12]
   2716c:	0018      	movs	r0, r3
   2716e:	4b2a      	ldr	r3, [pc, #168]	; (27218 <spi_read_buffer_wait+0x12c>)
   27170:	4798      	blx	r3
   27172:	0003      	movs	r3, r0
   27174:	001a      	movs	r2, r3
   27176:	2301      	movs	r3, #1
   27178:	4053      	eors	r3, r2
   2717a:	b2db      	uxtb	r3, r3
   2717c:	2b00      	cmp	r3, #0
   2717e:	d1f4      	bne.n	2716a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27180:	2312      	movs	r3, #18
   27182:	18fb      	adds	r3, r7, r3
   27184:	2200      	movs	r2, #0
   27186:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27188:	2315      	movs	r3, #21
   2718a:	18fc      	adds	r4, r7, r3
   2718c:	2312      	movs	r3, #18
   2718e:	18fa      	adds	r2, r7, r3
   27190:	68fb      	ldr	r3, [r7, #12]
   27192:	0011      	movs	r1, r2
   27194:	0018      	movs	r0, r3
   27196:	4b21      	ldr	r3, [pc, #132]	; (2721c <spi_read_buffer_wait+0x130>)
   27198:	4798      	blx	r3
   2719a:	0003      	movs	r3, r0
   2719c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2719e:	2315      	movs	r3, #21
   271a0:	18fb      	adds	r3, r7, r3
   271a2:	781b      	ldrb	r3, [r3, #0]
   271a4:	2b00      	cmp	r3, #0
   271a6:	d003      	beq.n	271b0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   271a8:	2315      	movs	r3, #21
   271aa:	18fb      	adds	r3, r7, r3
   271ac:	781b      	ldrb	r3, [r3, #0]
   271ae:	e02b      	b.n	27208 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   271b0:	2316      	movs	r3, #22
   271b2:	18fb      	adds	r3, r7, r3
   271b4:	881b      	ldrh	r3, [r3, #0]
   271b6:	2216      	movs	r2, #22
   271b8:	18ba      	adds	r2, r7, r2
   271ba:	1c59      	adds	r1, r3, #1
   271bc:	8011      	strh	r1, [r2, #0]
   271be:	001a      	movs	r2, r3
   271c0:	68bb      	ldr	r3, [r7, #8]
   271c2:	189b      	adds	r3, r3, r2
   271c4:	2212      	movs	r2, #18
   271c6:	18ba      	adds	r2, r7, r2
   271c8:	8812      	ldrh	r2, [r2, #0]
   271ca:	b2d2      	uxtb	r2, r2
   271cc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   271ce:	68fb      	ldr	r3, [r7, #12]
   271d0:	799b      	ldrb	r3, [r3, #6]
   271d2:	2b01      	cmp	r3, #1
   271d4:	d110      	bne.n	271f8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   271d6:	2316      	movs	r3, #22
   271d8:	18fb      	adds	r3, r7, r3
   271da:	881b      	ldrh	r3, [r3, #0]
   271dc:	2216      	movs	r2, #22
   271de:	18ba      	adds	r2, r7, r2
   271e0:	1c59      	adds	r1, r3, #1
   271e2:	8011      	strh	r1, [r2, #0]
   271e4:	001a      	movs	r2, r3
   271e6:	68bb      	ldr	r3, [r7, #8]
   271e8:	189b      	adds	r3, r3, r2
   271ea:	2212      	movs	r2, #18
   271ec:	18ba      	adds	r2, r7, r2
   271ee:	8812      	ldrh	r2, [r2, #0]
   271f0:	0a12      	lsrs	r2, r2, #8
   271f2:	b292      	uxth	r2, r2
   271f4:	b2d2      	uxtb	r2, r2
   271f6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   271f8:	1dbb      	adds	r3, r7, #6
   271fa:	881b      	ldrh	r3, [r3, #0]
   271fc:	1dba      	adds	r2, r7, #6
   271fe:	1e59      	subs	r1, r3, #1
   27200:	8011      	strh	r1, [r2, #0]
   27202:	2b00      	cmp	r3, #0
   27204:	d199      	bne.n	2713a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27206:	2300      	movs	r3, #0
}
   27208:	0018      	movs	r0, r3
   2720a:	46bd      	mov	sp, r7
   2720c:	b007      	add	sp, #28
   2720e:	bd90      	pop	{r4, r7, pc}
   27210:	00026b65 	.word	0x00026b65
   27214:	00026bb5 	.word	0x00026bb5
   27218:	00026b8d 	.word	0x00026b8d
   2721c:	00026bfd 	.word	0x00026bfd

00027220 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27220:	b580      	push	{r7, lr}
   27222:	b086      	sub	sp, #24
   27224:	af00      	add	r7, sp, #0
   27226:	60f8      	str	r0, [r7, #12]
   27228:	60b9      	str	r1, [r7, #8]
   2722a:	1dfb      	adds	r3, r7, #7
   2722c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2722e:	68fb      	ldr	r3, [r7, #12]
   27230:	795b      	ldrb	r3, [r3, #5]
   27232:	2b01      	cmp	r3, #1
   27234:	d001      	beq.n	2723a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27236:	2315      	movs	r3, #21
   27238:	e05c      	b.n	272f4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2723a:	68fb      	ldr	r3, [r7, #12]
   2723c:	7a1b      	ldrb	r3, [r3, #8]
   2723e:	2201      	movs	r2, #1
   27240:	4053      	eors	r3, r2
   27242:	b2db      	uxtb	r3, r3
   27244:	2b00      	cmp	r3, #0
   27246:	d054      	beq.n	272f2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27248:	1dfb      	adds	r3, r7, #7
   2724a:	781b      	ldrb	r3, [r3, #0]
   2724c:	2b00      	cmp	r3, #0
   2724e:	d04a      	beq.n	272e6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27250:	68bb      	ldr	r3, [r7, #8]
   27252:	785b      	ldrb	r3, [r3, #1]
   27254:	2b00      	cmp	r3, #0
   27256:	d03f      	beq.n	272d8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27258:	68fb      	ldr	r3, [r7, #12]
   2725a:	0018      	movs	r0, r3
   2725c:	4b27      	ldr	r3, [pc, #156]	; (272fc <spi_select_slave+0xdc>)
   2725e:	4798      	blx	r3
   27260:	0003      	movs	r3, r0
   27262:	001a      	movs	r2, r3
   27264:	2301      	movs	r3, #1
   27266:	4053      	eors	r3, r2
   27268:	b2db      	uxtb	r3, r3
   2726a:	2b00      	cmp	r3, #0
   2726c:	d007      	beq.n	2727e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2726e:	68bb      	ldr	r3, [r7, #8]
   27270:	781b      	ldrb	r3, [r3, #0]
   27272:	2101      	movs	r1, #1
   27274:	0018      	movs	r0, r3
   27276:	4b22      	ldr	r3, [pc, #136]	; (27300 <spi_select_slave+0xe0>)
   27278:	4798      	blx	r3
					return STATUS_BUSY;
   2727a:	2305      	movs	r3, #5
   2727c:	e03a      	b.n	272f4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2727e:	68bb      	ldr	r3, [r7, #8]
   27280:	781b      	ldrb	r3, [r3, #0]
   27282:	2100      	movs	r1, #0
   27284:	0018      	movs	r0, r3
   27286:	4b1e      	ldr	r3, [pc, #120]	; (27300 <spi_select_slave+0xe0>)
   27288:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2728a:	68bb      	ldr	r3, [r7, #8]
   2728c:	789b      	ldrb	r3, [r3, #2]
   2728e:	b29a      	uxth	r2, r3
   27290:	68fb      	ldr	r3, [r7, #12]
   27292:	0011      	movs	r1, r2
   27294:	0018      	movs	r0, r3
   27296:	4b1b      	ldr	r3, [pc, #108]	; (27304 <spi_select_slave+0xe4>)
   27298:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2729a:	68fb      	ldr	r3, [r7, #12]
   2729c:	79db      	ldrb	r3, [r3, #7]
   2729e:	2201      	movs	r2, #1
   272a0:	4053      	eors	r3, r2
   272a2:	b2db      	uxtb	r3, r3
   272a4:	2b00      	cmp	r3, #0
   272a6:	d024      	beq.n	272f2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   272a8:	46c0      	nop			; (mov r8, r8)
   272aa:	68fb      	ldr	r3, [r7, #12]
   272ac:	0018      	movs	r0, r3
   272ae:	4b16      	ldr	r3, [pc, #88]	; (27308 <spi_select_slave+0xe8>)
   272b0:	4798      	blx	r3
   272b2:	0003      	movs	r3, r0
   272b4:	001a      	movs	r2, r3
   272b6:	2301      	movs	r3, #1
   272b8:	4053      	eors	r3, r2
   272ba:	b2db      	uxtb	r3, r3
   272bc:	2b00      	cmp	r3, #0
   272be:	d1f4      	bne.n	272aa <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   272c0:	2316      	movs	r3, #22
   272c2:	18fb      	adds	r3, r7, r3
   272c4:	2200      	movs	r2, #0
   272c6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   272c8:	2316      	movs	r3, #22
   272ca:	18fa      	adds	r2, r7, r3
   272cc:	68fb      	ldr	r3, [r7, #12]
   272ce:	0011      	movs	r1, r2
   272d0:	0018      	movs	r0, r3
   272d2:	4b0e      	ldr	r3, [pc, #56]	; (2730c <spi_select_slave+0xec>)
   272d4:	4798      	blx	r3
   272d6:	e00c      	b.n	272f2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   272d8:	68bb      	ldr	r3, [r7, #8]
   272da:	781b      	ldrb	r3, [r3, #0]
   272dc:	2100      	movs	r1, #0
   272de:	0018      	movs	r0, r3
   272e0:	4b07      	ldr	r3, [pc, #28]	; (27300 <spi_select_slave+0xe0>)
   272e2:	4798      	blx	r3
   272e4:	e005      	b.n	272f2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   272e6:	68bb      	ldr	r3, [r7, #8]
   272e8:	781b      	ldrb	r3, [r3, #0]
   272ea:	2101      	movs	r1, #1
   272ec:	0018      	movs	r0, r3
   272ee:	4b04      	ldr	r3, [pc, #16]	; (27300 <spi_select_slave+0xe0>)
   272f0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   272f2:	2300      	movs	r3, #0
}
   272f4:	0018      	movs	r0, r3
   272f6:	46bd      	mov	sp, r7
   272f8:	b006      	add	sp, #24
   272fa:	bd80      	pop	{r7, pc}
   272fc:	00026b65 	.word	0x00026b65
   27300:	0002692d 	.word	0x0002692d
   27304:	00026bb5 	.word	0x00026bb5
   27308:	00026b8d 	.word	0x00026b8d
   2730c:	00026bfd 	.word	0x00026bfd

00027310 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27310:	b580      	push	{r7, lr}
   27312:	b086      	sub	sp, #24
   27314:	af00      	add	r7, sp, #0
   27316:	60f8      	str	r0, [r7, #12]
   27318:	60b9      	str	r1, [r7, #8]
   2731a:	1dbb      	adds	r3, r7, #6
   2731c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2731e:	68fb      	ldr	r3, [r7, #12]
   27320:	2238      	movs	r2, #56	; 0x38
   27322:	5c9b      	ldrb	r3, [r3, r2]
   27324:	b2db      	uxtb	r3, r3
   27326:	2b05      	cmp	r3, #5
   27328:	d101      	bne.n	2732e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2732a:	2305      	movs	r3, #5
   2732c:	e087      	b.n	2743e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2732e:	1dbb      	adds	r3, r7, #6
   27330:	881b      	ldrh	r3, [r3, #0]
   27332:	2b00      	cmp	r3, #0
   27334:	d101      	bne.n	2733a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27336:	2317      	movs	r3, #23
   27338:	e081      	b.n	2743e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   2733a:	2316      	movs	r3, #22
   2733c:	18fb      	adds	r3, r7, r3
   2733e:	2200      	movs	r2, #0
   27340:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27342:	2314      	movs	r3, #20
   27344:	18fb      	adds	r3, r7, r3
   27346:	1dba      	adds	r2, r7, #6
   27348:	8812      	ldrh	r2, [r2, #0]
   2734a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2734c:	e05f      	b.n	2740e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2734e:	46c0      	nop			; (mov r8, r8)
   27350:	68fb      	ldr	r3, [r7, #12]
   27352:	0018      	movs	r0, r3
   27354:	4b3c      	ldr	r3, [pc, #240]	; (27448 <spi_write_buffer_wait+0x138>)
   27356:	4798      	blx	r3
   27358:	0003      	movs	r3, r0
   2735a:	001a      	movs	r2, r3
   2735c:	2301      	movs	r3, #1
   2735e:	4053      	eors	r3, r2
   27360:	b2db      	uxtb	r3, r3
   27362:	2b00      	cmp	r3, #0
   27364:	d1f4      	bne.n	27350 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27366:	2316      	movs	r3, #22
   27368:	18fb      	adds	r3, r7, r3
   2736a:	881b      	ldrh	r3, [r3, #0]
   2736c:	2216      	movs	r2, #22
   2736e:	18ba      	adds	r2, r7, r2
   27370:	1c59      	adds	r1, r3, #1
   27372:	8011      	strh	r1, [r2, #0]
   27374:	001a      	movs	r2, r3
   27376:	68bb      	ldr	r3, [r7, #8]
   27378:	189b      	adds	r3, r3, r2
   2737a:	781a      	ldrb	r2, [r3, #0]
   2737c:	2312      	movs	r3, #18
   2737e:	18fb      	adds	r3, r7, r3
   27380:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27382:	68fb      	ldr	r3, [r7, #12]
   27384:	799b      	ldrb	r3, [r3, #6]
   27386:	2b01      	cmp	r3, #1
   27388:	d115      	bne.n	273b6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2738a:	2316      	movs	r3, #22
   2738c:	18fb      	adds	r3, r7, r3
   2738e:	881b      	ldrh	r3, [r3, #0]
   27390:	2216      	movs	r2, #22
   27392:	18ba      	adds	r2, r7, r2
   27394:	1c59      	adds	r1, r3, #1
   27396:	8011      	strh	r1, [r2, #0]
   27398:	001a      	movs	r2, r3
   2739a:	68bb      	ldr	r3, [r7, #8]
   2739c:	189b      	adds	r3, r3, r2
   2739e:	781b      	ldrb	r3, [r3, #0]
   273a0:	021b      	lsls	r3, r3, #8
   273a2:	b21a      	sxth	r2, r3
   273a4:	2312      	movs	r3, #18
   273a6:	18fb      	adds	r3, r7, r3
   273a8:	2100      	movs	r1, #0
   273aa:	5e5b      	ldrsh	r3, [r3, r1]
   273ac:	4313      	orrs	r3, r2
   273ae:	b21a      	sxth	r2, r3
   273b0:	2312      	movs	r3, #18
   273b2:	18fb      	adds	r3, r7, r3
   273b4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   273b6:	2312      	movs	r3, #18
   273b8:	18fb      	adds	r3, r7, r3
   273ba:	881a      	ldrh	r2, [r3, #0]
   273bc:	68fb      	ldr	r3, [r7, #12]
   273be:	0011      	movs	r1, r2
   273c0:	0018      	movs	r0, r3
   273c2:	4b22      	ldr	r3, [pc, #136]	; (2744c <spi_write_buffer_wait+0x13c>)
   273c4:	4798      	blx	r3

		if (module->receiver_enabled) {
   273c6:	68fb      	ldr	r3, [r7, #12]
   273c8:	79db      	ldrb	r3, [r3, #7]
   273ca:	2214      	movs	r2, #20
   273cc:	18ba      	adds	r2, r7, r2
   273ce:	2114      	movs	r1, #20
   273d0:	1879      	adds	r1, r7, r1
   273d2:	8809      	ldrh	r1, [r1, #0]
   273d4:	8011      	strh	r1, [r2, #0]
   273d6:	2b00      	cmp	r3, #0
   273d8:	d019      	beq.n	2740e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   273da:	46c0      	nop			; (mov r8, r8)
   273dc:	68fb      	ldr	r3, [r7, #12]
   273de:	0018      	movs	r0, r3
   273e0:	4b1b      	ldr	r3, [pc, #108]	; (27450 <spi_write_buffer_wait+0x140>)
   273e2:	4798      	blx	r3
   273e4:	0003      	movs	r3, r0
   273e6:	001a      	movs	r2, r3
   273e8:	2301      	movs	r3, #1
   273ea:	4053      	eors	r3, r2
   273ec:	b2db      	uxtb	r3, r3
   273ee:	2b00      	cmp	r3, #0
   273f0:	d1f4      	bne.n	273dc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   273f2:	2310      	movs	r3, #16
   273f4:	18fa      	adds	r2, r7, r3
   273f6:	68fb      	ldr	r3, [r7, #12]
   273f8:	0011      	movs	r1, r2
   273fa:	0018      	movs	r0, r3
   273fc:	4b15      	ldr	r3, [pc, #84]	; (27454 <spi_write_buffer_wait+0x144>)
   273fe:	4798      	blx	r3
			flush_length--;
   27400:	2314      	movs	r3, #20
   27402:	18fb      	adds	r3, r7, r3
   27404:	881a      	ldrh	r2, [r3, #0]
   27406:	2314      	movs	r3, #20
   27408:	18fb      	adds	r3, r7, r3
   2740a:	3a01      	subs	r2, #1
   2740c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2740e:	1dbb      	adds	r3, r7, #6
   27410:	881b      	ldrh	r3, [r3, #0]
   27412:	1dba      	adds	r2, r7, #6
   27414:	1e59      	subs	r1, r3, #1
   27416:	8011      	strh	r1, [r2, #0]
   27418:	2b00      	cmp	r3, #0
   2741a:	d198      	bne.n	2734e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2741c:	68fb      	ldr	r3, [r7, #12]
   2741e:	795b      	ldrb	r3, [r3, #5]
   27420:	2b01      	cmp	r3, #1
   27422:	d10b      	bne.n	2743c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27424:	46c0      	nop			; (mov r8, r8)
   27426:	68fb      	ldr	r3, [r7, #12]
   27428:	0018      	movs	r0, r3
   2742a:	4b0b      	ldr	r3, [pc, #44]	; (27458 <spi_write_buffer_wait+0x148>)
   2742c:	4798      	blx	r3
   2742e:	0003      	movs	r3, r0
   27430:	001a      	movs	r2, r3
   27432:	2301      	movs	r3, #1
   27434:	4053      	eors	r3, r2
   27436:	b2db      	uxtb	r3, r3
   27438:	2b00      	cmp	r3, #0
   2743a:	d1f4      	bne.n	27426 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   2743c:	2300      	movs	r3, #0
}
   2743e:	0018      	movs	r0, r3
   27440:	46bd      	mov	sp, r7
   27442:	b006      	add	sp, #24
   27444:	bd80      	pop	{r7, pc}
   27446:	46c0      	nop			; (mov r8, r8)
   27448:	00026b65 	.word	0x00026b65
   2744c:	00026bb5 	.word	0x00026bb5
   27450:	00026b8d 	.word	0x00026b8d
   27454:	00026bfd 	.word	0x00026bfd
   27458:	00026b3d 	.word	0x00026b3d

0002745c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   2745c:	b580      	push	{r7, lr}
   2745e:	b084      	sub	sp, #16
   27460:	af00      	add	r7, sp, #0
   27462:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27464:	687b      	ldr	r3, [r7, #4]
   27466:	681b      	ldr	r3, [r3, #0]
   27468:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2746a:	687b      	ldr	r3, [r7, #4]
   2746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2746e:	781b      	ldrb	r3, [r3, #0]
   27470:	b2da      	uxtb	r2, r3
   27472:	230e      	movs	r3, #14
   27474:	18fb      	adds	r3, r7, r3
   27476:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27478:	687b      	ldr	r3, [r7, #4]
   2747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2747c:	1c5a      	adds	r2, r3, #1
   2747e:	687b      	ldr	r3, [r7, #4]
   27480:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27482:	687b      	ldr	r3, [r7, #4]
   27484:	799b      	ldrb	r3, [r3, #6]
   27486:	2b01      	cmp	r3, #1
   27488:	d113      	bne.n	274b2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2748a:	687b      	ldr	r3, [r7, #4]
   2748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2748e:	781b      	ldrb	r3, [r3, #0]
   27490:	b2db      	uxtb	r3, r3
   27492:	021b      	lsls	r3, r3, #8
   27494:	b21a      	sxth	r2, r3
   27496:	230e      	movs	r3, #14
   27498:	18fb      	adds	r3, r7, r3
   2749a:	2100      	movs	r1, #0
   2749c:	5e5b      	ldrsh	r3, [r3, r1]
   2749e:	4313      	orrs	r3, r2
   274a0:	b21a      	sxth	r2, r3
   274a2:	230e      	movs	r3, #14
   274a4:	18fb      	adds	r3, r7, r3
   274a6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   274a8:	687b      	ldr	r3, [r7, #4]
   274aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   274ac:	1c5a      	adds	r2, r3, #1
   274ae:	687b      	ldr	r3, [r7, #4]
   274b0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   274b2:	230e      	movs	r3, #14
   274b4:	18fb      	adds	r3, r7, r3
   274b6:	881b      	ldrh	r3, [r3, #0]
   274b8:	05db      	lsls	r3, r3, #23
   274ba:	0dda      	lsrs	r2, r3, #23
   274bc:	68bb      	ldr	r3, [r7, #8]
   274be:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   274c0:	687b      	ldr	r3, [r7, #4]
   274c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   274c4:	b29b      	uxth	r3, r3
   274c6:	3b01      	subs	r3, #1
   274c8:	b29a      	uxth	r2, r3
   274ca:	687b      	ldr	r3, [r7, #4]
   274cc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   274ce:	46c0      	nop			; (mov r8, r8)
   274d0:	46bd      	mov	sp, r7
   274d2:	b004      	add	sp, #16
   274d4:	bd80      	pop	{r7, pc}
	...

000274d8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   274d8:	b580      	push	{r7, lr}
   274da:	b084      	sub	sp, #16
   274dc:	af00      	add	r7, sp, #0
   274de:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   274e0:	687b      	ldr	r3, [r7, #4]
   274e2:	681b      	ldr	r3, [r3, #0]
   274e4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   274e6:	4b08      	ldr	r3, [pc, #32]	; (27508 <_spi_write_dummy+0x30>)
   274e8:	881b      	ldrh	r3, [r3, #0]
   274ea:	001a      	movs	r2, r3
   274ec:	68fb      	ldr	r3, [r7, #12]
   274ee:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   274f0:	687b      	ldr	r3, [r7, #4]
   274f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   274f4:	b29b      	uxth	r3, r3
   274f6:	3b01      	subs	r3, #1
   274f8:	b29a      	uxth	r2, r3
   274fa:	687b      	ldr	r3, [r7, #4]
   274fc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   274fe:	46c0      	nop			; (mov r8, r8)
   27500:	46bd      	mov	sp, r7
   27502:	b004      	add	sp, #16
   27504:	bd80      	pop	{r7, pc}
   27506:	46c0      	nop			; (mov r8, r8)
   27508:	20005be4 	.word	0x20005be4

0002750c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   2750c:	b580      	push	{r7, lr}
   2750e:	b084      	sub	sp, #16
   27510:	af00      	add	r7, sp, #0
   27512:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27514:	687b      	ldr	r3, [r7, #4]
   27516:	681b      	ldr	r3, [r3, #0]
   27518:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2751a:	230a      	movs	r3, #10
   2751c:	18fb      	adds	r3, r7, r3
   2751e:	2200      	movs	r2, #0
   27520:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   27522:	68fb      	ldr	r3, [r7, #12]
   27524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27526:	230a      	movs	r3, #10
   27528:	18fb      	adds	r3, r7, r3
   2752a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2752c:	687b      	ldr	r3, [r7, #4]
   2752e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27530:	b29b      	uxth	r3, r3
   27532:	3b01      	subs	r3, #1
   27534:	b29a      	uxth	r2, r3
   27536:	687b      	ldr	r3, [r7, #4]
   27538:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2753a:	46c0      	nop			; (mov r8, r8)
   2753c:	46bd      	mov	sp, r7
   2753e:	b004      	add	sp, #16
   27540:	bd80      	pop	{r7, pc}

00027542 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   27542:	b580      	push	{r7, lr}
   27544:	b084      	sub	sp, #16
   27546:	af00      	add	r7, sp, #0
   27548:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2754a:	687b      	ldr	r3, [r7, #4]
   2754c:	681b      	ldr	r3, [r3, #0]
   2754e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   27550:	68fb      	ldr	r3, [r7, #12]
   27552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27554:	b29a      	uxth	r2, r3
   27556:	230a      	movs	r3, #10
   27558:	18fb      	adds	r3, r7, r3
   2755a:	05d2      	lsls	r2, r2, #23
   2755c:	0dd2      	lsrs	r2, r2, #23
   2755e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27560:	687b      	ldr	r3, [r7, #4]
   27562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27564:	220a      	movs	r2, #10
   27566:	18ba      	adds	r2, r7, r2
   27568:	8812      	ldrh	r2, [r2, #0]
   2756a:	b2d2      	uxtb	r2, r2
   2756c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2756e:	687b      	ldr	r3, [r7, #4]
   27570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27572:	1c5a      	adds	r2, r3, #1
   27574:	687b      	ldr	r3, [r7, #4]
   27576:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27578:	687b      	ldr	r3, [r7, #4]
   2757a:	799b      	ldrb	r3, [r3, #6]
   2757c:	2b01      	cmp	r3, #1
   2757e:	d10d      	bne.n	2759c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27580:	687b      	ldr	r3, [r7, #4]
   27582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27584:	220a      	movs	r2, #10
   27586:	18ba      	adds	r2, r7, r2
   27588:	8812      	ldrh	r2, [r2, #0]
   2758a:	0a12      	lsrs	r2, r2, #8
   2758c:	b292      	uxth	r2, r2
   2758e:	b2d2      	uxtb	r2, r2
   27590:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27592:	687b      	ldr	r3, [r7, #4]
   27594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27596:	1c5a      	adds	r2, r3, #1
   27598:	687b      	ldr	r3, [r7, #4]
   2759a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2759c:	687b      	ldr	r3, [r7, #4]
   2759e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   275a0:	b29b      	uxth	r3, r3
   275a2:	3b01      	subs	r3, #1
   275a4:	b29a      	uxth	r2, r3
   275a6:	687b      	ldr	r3, [r7, #4]
   275a8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   275aa:	46c0      	nop			; (mov r8, r8)
   275ac:	46bd      	mov	sp, r7
   275ae:	b004      	add	sp, #16
   275b0:	bd80      	pop	{r7, pc}
	...

000275b4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   275b4:	b580      	push	{r7, lr}
   275b6:	b086      	sub	sp, #24
   275b8:	af00      	add	r7, sp, #0
   275ba:	0002      	movs	r2, r0
   275bc:	1dfb      	adds	r3, r7, #7
   275be:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   275c0:	1dfb      	adds	r3, r7, #7
   275c2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   275c4:	4b96      	ldr	r3, [pc, #600]	; (27820 <_spi_interrupt_handler+0x26c>)
   275c6:	0092      	lsls	r2, r2, #2
   275c8:	58d3      	ldr	r3, [r2, r3]
   275ca:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   275cc:	697b      	ldr	r3, [r7, #20]
   275ce:	681b      	ldr	r3, [r3, #0]
   275d0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   275d2:	697b      	ldr	r3, [r7, #20]
   275d4:	2237      	movs	r2, #55	; 0x37
   275d6:	5c9a      	ldrb	r2, [r3, r2]
   275d8:	697b      	ldr	r3, [r7, #20]
   275da:	2136      	movs	r1, #54	; 0x36
   275dc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   275de:	230f      	movs	r3, #15
   275e0:	18fb      	adds	r3, r7, r3
   275e2:	400a      	ands	r2, r1
   275e4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   275e6:	693b      	ldr	r3, [r7, #16]
   275e8:	7e1b      	ldrb	r3, [r3, #24]
   275ea:	b2da      	uxtb	r2, r3
   275ec:	230c      	movs	r3, #12
   275ee:	18fb      	adds	r3, r7, r3
   275f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   275f2:	693b      	ldr	r3, [r7, #16]
   275f4:	7d9b      	ldrb	r3, [r3, #22]
   275f6:	b2db      	uxtb	r3, r3
   275f8:	b29a      	uxth	r2, r3
   275fa:	230c      	movs	r3, #12
   275fc:	18fb      	adds	r3, r7, r3
   275fe:	210c      	movs	r1, #12
   27600:	1879      	adds	r1, r7, r1
   27602:	8809      	ldrh	r1, [r1, #0]
   27604:	400a      	ands	r2, r1
   27606:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27608:	230c      	movs	r3, #12
   2760a:	18fb      	adds	r3, r7, r3
   2760c:	881b      	ldrh	r3, [r3, #0]
   2760e:	2201      	movs	r2, #1
   27610:	4013      	ands	r3, r2
   27612:	d038      	beq.n	27686 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27614:	697b      	ldr	r3, [r7, #20]
   27616:	795b      	ldrb	r3, [r3, #5]
   27618:	2b01      	cmp	r3, #1
   2761a:	d110      	bne.n	2763e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2761c:	697b      	ldr	r3, [r7, #20]
   2761e:	7a5b      	ldrb	r3, [r3, #9]
   27620:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27622:	2b00      	cmp	r3, #0
   27624:	d10b      	bne.n	2763e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27626:	697b      	ldr	r3, [r7, #20]
   27628:	0018      	movs	r0, r3
   2762a:	4b7e      	ldr	r3, [pc, #504]	; (27824 <_spi_interrupt_handler+0x270>)
   2762c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2762e:	697b      	ldr	r3, [r7, #20]
   27630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27632:	b29b      	uxth	r3, r3
   27634:	2b00      	cmp	r3, #0
   27636:	d102      	bne.n	2763e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27638:	693b      	ldr	r3, [r7, #16]
   2763a:	2201      	movs	r2, #1
   2763c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2763e:	697b      	ldr	r3, [r7, #20]
   27640:	795b      	ldrb	r3, [r3, #5]
		if (0
   27642:	2b01      	cmp	r3, #1
   27644:	d11f      	bne.n	27686 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27646:	697b      	ldr	r3, [r7, #20]
   27648:	7a5b      	ldrb	r3, [r3, #9]
   2764a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2764c:	2b00      	cmp	r3, #0
   2764e:	d01a      	beq.n	27686 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   27650:	697b      	ldr	r3, [r7, #20]
   27652:	0018      	movs	r0, r3
   27654:	4b74      	ldr	r3, [pc, #464]	; (27828 <_spi_interrupt_handler+0x274>)
   27656:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27658:	697b      	ldr	r3, [r7, #20]
   2765a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2765c:	b29b      	uxth	r3, r3
   2765e:	2b00      	cmp	r3, #0
   27660:	d111      	bne.n	27686 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27662:	693b      	ldr	r3, [r7, #16]
   27664:	2201      	movs	r2, #1
   27666:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27668:	697b      	ldr	r3, [r7, #20]
   2766a:	7a5b      	ldrb	r3, [r3, #9]
   2766c:	b2db      	uxtb	r3, r3
   2766e:	2b01      	cmp	r3, #1
   27670:	d109      	bne.n	27686 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   27672:	697b      	ldr	r3, [r7, #20]
   27674:	79db      	ldrb	r3, [r3, #7]
   27676:	2201      	movs	r2, #1
   27678:	4053      	eors	r3, r2
   2767a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2767c:	2b00      	cmp	r3, #0
   2767e:	d002      	beq.n	27686 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27680:	693b      	ldr	r3, [r7, #16]
   27682:	2202      	movs	r2, #2
   27684:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27686:	230c      	movs	r3, #12
   27688:	18fb      	adds	r3, r7, r3
   2768a:	881b      	ldrh	r3, [r3, #0]
   2768c:	2204      	movs	r2, #4
   2768e:	4013      	ands	r3, r2
   27690:	d100      	bne.n	27694 <_spi_interrupt_handler+0xe0>
   27692:	e07e      	b.n	27792 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27694:	693b      	ldr	r3, [r7, #16]
   27696:	8b5b      	ldrh	r3, [r3, #26]
   27698:	b29b      	uxth	r3, r3
   2769a:	001a      	movs	r2, r3
   2769c:	2304      	movs	r3, #4
   2769e:	4013      	ands	r3, r2
   276a0:	d022      	beq.n	276e8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   276a2:	697b      	ldr	r3, [r7, #20]
   276a4:	7a5b      	ldrb	r3, [r3, #9]
   276a6:	b2db      	uxtb	r3, r3
   276a8:	2b01      	cmp	r3, #1
   276aa:	d014      	beq.n	276d6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   276ac:	697b      	ldr	r3, [r7, #20]
   276ae:	2238      	movs	r2, #56	; 0x38
   276b0:	211e      	movs	r1, #30
   276b2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   276b4:	697b      	ldr	r3, [r7, #20]
   276b6:	2203      	movs	r2, #3
   276b8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   276ba:	693b      	ldr	r3, [r7, #16]
   276bc:	2205      	movs	r2, #5
   276be:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   276c0:	230f      	movs	r3, #15
   276c2:	18fb      	adds	r3, r7, r3
   276c4:	781b      	ldrb	r3, [r3, #0]
   276c6:	2208      	movs	r2, #8
   276c8:	4013      	ands	r3, r2
   276ca:	d004      	beq.n	276d6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   276cc:	697b      	ldr	r3, [r7, #20]
   276ce:	699b      	ldr	r3, [r3, #24]
   276d0:	697a      	ldr	r2, [r7, #20]
   276d2:	0010      	movs	r0, r2
   276d4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   276d6:	693b      	ldr	r3, [r7, #16]
   276d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   276da:	230a      	movs	r3, #10
   276dc:	18fb      	adds	r3, r7, r3
   276de:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   276e0:	693b      	ldr	r3, [r7, #16]
   276e2:	2204      	movs	r2, #4
   276e4:	835a      	strh	r2, [r3, #26]
   276e6:	e054      	b.n	27792 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   276e8:	697b      	ldr	r3, [r7, #20]
   276ea:	7a5b      	ldrb	r3, [r3, #9]
   276ec:	b2db      	uxtb	r3, r3
   276ee:	2b01      	cmp	r3, #1
   276f0:	d11e      	bne.n	27730 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   276f2:	697b      	ldr	r3, [r7, #20]
   276f4:	0018      	movs	r0, r3
   276f6:	4b4d      	ldr	r3, [pc, #308]	; (2782c <_spi_interrupt_handler+0x278>)
   276f8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   276fa:	697b      	ldr	r3, [r7, #20]
   276fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   276fe:	b29b      	uxth	r3, r3
   27700:	2b00      	cmp	r3, #0
   27702:	d146      	bne.n	27792 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27704:	693b      	ldr	r3, [r7, #16]
   27706:	2204      	movs	r2, #4
   27708:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2770a:	697b      	ldr	r3, [r7, #20]
   2770c:	2238      	movs	r2, #56	; 0x38
   2770e:	2100      	movs	r1, #0
   27710:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   27712:	697b      	ldr	r3, [r7, #20]
   27714:	2203      	movs	r2, #3
   27716:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   27718:	230f      	movs	r3, #15
   2771a:	18fb      	adds	r3, r7, r3
   2771c:	781b      	ldrb	r3, [r3, #0]
   2771e:	2201      	movs	r2, #1
   27720:	4013      	ands	r3, r2
   27722:	d036      	beq.n	27792 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   27724:	697b      	ldr	r3, [r7, #20]
   27726:	68db      	ldr	r3, [r3, #12]
   27728:	697a      	ldr	r2, [r7, #20]
   2772a:	0010      	movs	r0, r2
   2772c:	4798      	blx	r3
   2772e:	e030      	b.n	27792 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   27730:	697b      	ldr	r3, [r7, #20]
   27732:	0018      	movs	r0, r3
   27734:	4b3e      	ldr	r3, [pc, #248]	; (27830 <_spi_interrupt_handler+0x27c>)
   27736:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   27738:	697b      	ldr	r3, [r7, #20]
   2773a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2773c:	b29b      	uxth	r3, r3
   2773e:	2b00      	cmp	r3, #0
   27740:	d127      	bne.n	27792 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   27742:	697b      	ldr	r3, [r7, #20]
   27744:	2238      	movs	r2, #56	; 0x38
   27746:	2100      	movs	r1, #0
   27748:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2774a:	693b      	ldr	r3, [r7, #16]
   2774c:	2204      	movs	r2, #4
   2774e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   27750:	697b      	ldr	r3, [r7, #20]
   27752:	7a5b      	ldrb	r3, [r3, #9]
   27754:	b2db      	uxtb	r3, r3
   27756:	2b02      	cmp	r3, #2
   27758:	d10b      	bne.n	27772 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2775a:	230f      	movs	r3, #15
   2775c:	18fb      	adds	r3, r7, r3
   2775e:	781b      	ldrb	r3, [r3, #0]
   27760:	2204      	movs	r2, #4
   27762:	4013      	ands	r3, r2
   27764:	d015      	beq.n	27792 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   27766:	697b      	ldr	r3, [r7, #20]
   27768:	695b      	ldr	r3, [r3, #20]
   2776a:	697a      	ldr	r2, [r7, #20]
   2776c:	0010      	movs	r0, r2
   2776e:	4798      	blx	r3
   27770:	e00f      	b.n	27792 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   27772:	697b      	ldr	r3, [r7, #20]
   27774:	7a5b      	ldrb	r3, [r3, #9]
   27776:	b2db      	uxtb	r3, r3
   27778:	2b00      	cmp	r3, #0
   2777a:	d10a      	bne.n	27792 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2777c:	230f      	movs	r3, #15
   2777e:	18fb      	adds	r3, r7, r3
   27780:	781b      	ldrb	r3, [r3, #0]
   27782:	2202      	movs	r2, #2
   27784:	4013      	ands	r3, r2
   27786:	d004      	beq.n	27792 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   27788:	697b      	ldr	r3, [r7, #20]
   2778a:	691b      	ldr	r3, [r3, #16]
   2778c:	697a      	ldr	r2, [r7, #20]
   2778e:	0010      	movs	r0, r2
   27790:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   27792:	230c      	movs	r3, #12
   27794:	18fb      	adds	r3, r7, r3
   27796:	881b      	ldrh	r3, [r3, #0]
   27798:	2202      	movs	r2, #2
   2779a:	4013      	ands	r3, r2
   2779c:	d024      	beq.n	277e8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2779e:	697b      	ldr	r3, [r7, #20]
   277a0:	795b      	ldrb	r3, [r3, #5]
   277a2:	2b01      	cmp	r3, #1
   277a4:	d120      	bne.n	277e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   277a6:	697b      	ldr	r3, [r7, #20]
   277a8:	7a5b      	ldrb	r3, [r3, #9]
   277aa:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   277ac:	2b01      	cmp	r3, #1
   277ae:	d11b      	bne.n	277e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   277b0:	697b      	ldr	r3, [r7, #20]
   277b2:	79db      	ldrb	r3, [r3, #7]
   277b4:	2201      	movs	r2, #1
   277b6:	4053      	eors	r3, r2
   277b8:	b2db      	uxtb	r3, r3
   277ba:	2b00      	cmp	r3, #0
   277bc:	d014      	beq.n	277e8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   277be:	693b      	ldr	r3, [r7, #16]
   277c0:	2202      	movs	r2, #2
   277c2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   277c4:	697b      	ldr	r3, [r7, #20]
   277c6:	2203      	movs	r2, #3
   277c8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   277ca:	697b      	ldr	r3, [r7, #20]
   277cc:	2238      	movs	r2, #56	; 0x38
   277ce:	2100      	movs	r1, #0
   277d0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   277d2:	230f      	movs	r3, #15
   277d4:	18fb      	adds	r3, r7, r3
   277d6:	781b      	ldrb	r3, [r3, #0]
   277d8:	2201      	movs	r2, #1
   277da:	4013      	ands	r3, r2
   277dc:	d004      	beq.n	277e8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   277de:	697b      	ldr	r3, [r7, #20]
   277e0:	68db      	ldr	r3, [r3, #12]
   277e2:	697a      	ldr	r2, [r7, #20]
   277e4:	0010      	movs	r0, r2
   277e6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   277e8:	230c      	movs	r3, #12
   277ea:	18fb      	adds	r3, r7, r3
   277ec:	881b      	ldrh	r3, [r3, #0]
   277ee:	2280      	movs	r2, #128	; 0x80
   277f0:	4013      	ands	r3, r2
   277f2:	d010      	beq.n	27816 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   277f4:	693b      	ldr	r3, [r7, #16]
   277f6:	2280      	movs	r2, #128	; 0x80
   277f8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   277fa:	693b      	ldr	r3, [r7, #16]
   277fc:	2280      	movs	r2, #128	; 0x80
   277fe:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   27800:	230f      	movs	r3, #15
   27802:	18fb      	adds	r3, r7, r3
   27804:	781b      	ldrb	r3, [r3, #0]
   27806:	2240      	movs	r2, #64	; 0x40
   27808:	4013      	ands	r3, r2
   2780a:	d004      	beq.n	27816 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2780c:	697b      	ldr	r3, [r7, #20]
   2780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27810:	697a      	ldr	r2, [r7, #20]
   27812:	0010      	movs	r0, r2
   27814:	4798      	blx	r3
		}
	}
#  endif
}
   27816:	46c0      	nop			; (mov r8, r8)
   27818:	46bd      	mov	sp, r7
   2781a:	b006      	add	sp, #24
   2781c:	bd80      	pop	{r7, pc}
   2781e:	46c0      	nop			; (mov r8, r8)
   27820:	20005bcc 	.word	0x20005bcc
   27824:	000274d9 	.word	0x000274d9
   27828:	0002745d 	.word	0x0002745d
   2782c:	0002750d 	.word	0x0002750d
   27830:	00027543 	.word	0x00027543

00027834 <system_gclk_chan_get_config_defaults>:
{
   27834:	b580      	push	{r7, lr}
   27836:	b082      	sub	sp, #8
   27838:	af00      	add	r7, sp, #0
   2783a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2783c:	687b      	ldr	r3, [r7, #4]
   2783e:	2200      	movs	r2, #0
   27840:	701a      	strb	r2, [r3, #0]
}
   27842:	46c0      	nop			; (mov r8, r8)
   27844:	46bd      	mov	sp, r7
   27846:	b002      	add	sp, #8
   27848:	bd80      	pop	{r7, pc}
	...

0002784c <system_apb_clock_set_mask>:
{
   2784c:	b580      	push	{r7, lr}
   2784e:	b082      	sub	sp, #8
   27850:	af00      	add	r7, sp, #0
   27852:	0002      	movs	r2, r0
   27854:	6039      	str	r1, [r7, #0]
   27856:	1dfb      	adds	r3, r7, #7
   27858:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2785a:	1dfb      	adds	r3, r7, #7
   2785c:	781b      	ldrb	r3, [r3, #0]
   2785e:	2b01      	cmp	r3, #1
   27860:	d00a      	beq.n	27878 <system_apb_clock_set_mask+0x2c>
   27862:	2b02      	cmp	r3, #2
   27864:	d00f      	beq.n	27886 <system_apb_clock_set_mask+0x3a>
   27866:	2b00      	cmp	r3, #0
   27868:	d114      	bne.n	27894 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2786a:	4b0e      	ldr	r3, [pc, #56]	; (278a4 <system_apb_clock_set_mask+0x58>)
   2786c:	4a0d      	ldr	r2, [pc, #52]	; (278a4 <system_apb_clock_set_mask+0x58>)
   2786e:	6991      	ldr	r1, [r2, #24]
   27870:	683a      	ldr	r2, [r7, #0]
   27872:	430a      	orrs	r2, r1
   27874:	619a      	str	r2, [r3, #24]
			break;
   27876:	e00f      	b.n	27898 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27878:	4b0a      	ldr	r3, [pc, #40]	; (278a4 <system_apb_clock_set_mask+0x58>)
   2787a:	4a0a      	ldr	r2, [pc, #40]	; (278a4 <system_apb_clock_set_mask+0x58>)
   2787c:	69d1      	ldr	r1, [r2, #28]
   2787e:	683a      	ldr	r2, [r7, #0]
   27880:	430a      	orrs	r2, r1
   27882:	61da      	str	r2, [r3, #28]
			break;
   27884:	e008      	b.n	27898 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27886:	4b07      	ldr	r3, [pc, #28]	; (278a4 <system_apb_clock_set_mask+0x58>)
   27888:	4a06      	ldr	r2, [pc, #24]	; (278a4 <system_apb_clock_set_mask+0x58>)
   2788a:	6a11      	ldr	r1, [r2, #32]
   2788c:	683a      	ldr	r2, [r7, #0]
   2788e:	430a      	orrs	r2, r1
   27890:	621a      	str	r2, [r3, #32]
			break;
   27892:	e001      	b.n	27898 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27894:	2317      	movs	r3, #23
   27896:	e000      	b.n	2789a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27898:	2300      	movs	r3, #0
}
   2789a:	0018      	movs	r0, r3
   2789c:	46bd      	mov	sp, r7
   2789e:	b002      	add	sp, #8
   278a0:	bd80      	pop	{r7, pc}
   278a2:	46c0      	nop			; (mov r8, r8)
   278a4:	40000400 	.word	0x40000400

000278a8 <system_pinmux_get_config_defaults>:
{
   278a8:	b580      	push	{r7, lr}
   278aa:	b082      	sub	sp, #8
   278ac:	af00      	add	r7, sp, #0
   278ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   278b0:	687b      	ldr	r3, [r7, #4]
   278b2:	2280      	movs	r2, #128	; 0x80
   278b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   278b6:	687b      	ldr	r3, [r7, #4]
   278b8:	2200      	movs	r2, #0
   278ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   278bc:	687b      	ldr	r3, [r7, #4]
   278be:	2201      	movs	r2, #1
   278c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   278c2:	687b      	ldr	r3, [r7, #4]
   278c4:	2200      	movs	r2, #0
   278c6:	70da      	strb	r2, [r3, #3]
}
   278c8:	46c0      	nop			; (mov r8, r8)
   278ca:	46bd      	mov	sp, r7
   278cc:	b002      	add	sp, #8
   278ce:	bd80      	pop	{r7, pc}

000278d0 <system_is_debugger_present>:
{
   278d0:	b580      	push	{r7, lr}
   278d2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   278d4:	4b05      	ldr	r3, [pc, #20]	; (278ec <system_is_debugger_present+0x1c>)
   278d6:	789b      	ldrb	r3, [r3, #2]
   278d8:	b2db      	uxtb	r3, r3
   278da:	001a      	movs	r2, r3
   278dc:	2302      	movs	r3, #2
   278de:	4013      	ands	r3, r2
   278e0:	1e5a      	subs	r2, r3, #1
   278e2:	4193      	sbcs	r3, r2
   278e4:	b2db      	uxtb	r3, r3
}
   278e6:	0018      	movs	r0, r3
   278e8:	46bd      	mov	sp, r7
   278ea:	bd80      	pop	{r7, pc}
   278ec:	41002000 	.word	0x41002000

000278f0 <usart_is_syncing>:
{
   278f0:	b580      	push	{r7, lr}
   278f2:	b084      	sub	sp, #16
   278f4:	af00      	add	r7, sp, #0
   278f6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   278f8:	687b      	ldr	r3, [r7, #4]
   278fa:	681b      	ldr	r3, [r3, #0]
   278fc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   278fe:	68fb      	ldr	r3, [r7, #12]
   27900:	69db      	ldr	r3, [r3, #28]
   27902:	1e5a      	subs	r2, r3, #1
   27904:	4193      	sbcs	r3, r2
   27906:	b2db      	uxtb	r3, r3
}
   27908:	0018      	movs	r0, r3
   2790a:	46bd      	mov	sp, r7
   2790c:	b004      	add	sp, #16
   2790e:	bd80      	pop	{r7, pc}

00027910 <_usart_wait_for_sync>:
{
   27910:	b580      	push	{r7, lr}
   27912:	b082      	sub	sp, #8
   27914:	af00      	add	r7, sp, #0
   27916:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27918:	46c0      	nop			; (mov r8, r8)
   2791a:	687b      	ldr	r3, [r7, #4]
   2791c:	0018      	movs	r0, r3
   2791e:	4b04      	ldr	r3, [pc, #16]	; (27930 <_usart_wait_for_sync+0x20>)
   27920:	4798      	blx	r3
   27922:	1e03      	subs	r3, r0, #0
   27924:	d1f9      	bne.n	2791a <_usart_wait_for_sync+0xa>
}
   27926:	46c0      	nop			; (mov r8, r8)
   27928:	46bd      	mov	sp, r7
   2792a:	b002      	add	sp, #8
   2792c:	bd80      	pop	{r7, pc}
   2792e:	46c0      	nop			; (mov r8, r8)
   27930:	000278f1 	.word	0x000278f1

00027934 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   27934:	b5b0      	push	{r4, r5, r7, lr}
   27936:	b08c      	sub	sp, #48	; 0x30
   27938:	af02      	add	r7, sp, #8
   2793a:	6078      	str	r0, [r7, #4]
   2793c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2793e:	687b      	ldr	r3, [r7, #4]
   27940:	681b      	ldr	r3, [r3, #0]
   27942:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27944:	687b      	ldr	r3, [r7, #4]
   27946:	681b      	ldr	r3, [r3, #0]
   27948:	0018      	movs	r0, r3
   2794a:	4bab      	ldr	r3, [pc, #684]	; (27bf8 <_usart_set_config+0x2c4>)
   2794c:	4798      	blx	r3
   2794e:	0003      	movs	r3, r0
   27950:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27952:	697b      	ldr	r3, [r7, #20]
   27954:	3314      	adds	r3, #20
   27956:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   27958:	2300      	movs	r3, #0
   2795a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2795c:	2300      	movs	r3, #0
   2795e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   27960:	230a      	movs	r3, #10
   27962:	18fb      	adds	r3, r7, r3
   27964:	2200      	movs	r2, #0
   27966:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27968:	231f      	movs	r3, #31
   2796a:	18fb      	adds	r3, r7, r3
   2796c:	2200      	movs	r2, #0
   2796e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27970:	231e      	movs	r3, #30
   27972:	18fb      	adds	r3, r7, r3
   27974:	2210      	movs	r2, #16
   27976:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   27978:	683b      	ldr	r3, [r7, #0]
   2797a:	8a1b      	ldrh	r3, [r3, #16]
   2797c:	2280      	movs	r2, #128	; 0x80
   2797e:	01d2      	lsls	r2, r2, #7
   27980:	4293      	cmp	r3, r2
   27982:	d01c      	beq.n	279be <_usart_set_config+0x8a>
   27984:	2280      	movs	r2, #128	; 0x80
   27986:	01d2      	lsls	r2, r2, #7
   27988:	4293      	cmp	r3, r2
   2798a:	dc06      	bgt.n	2799a <_usart_set_config+0x66>
   2798c:	2b00      	cmp	r3, #0
   2798e:	d00d      	beq.n	279ac <_usart_set_config+0x78>
   27990:	2280      	movs	r2, #128	; 0x80
   27992:	0192      	lsls	r2, r2, #6
   27994:	4293      	cmp	r3, r2
   27996:	d024      	beq.n	279e2 <_usart_set_config+0xae>
   27998:	e035      	b.n	27a06 <_usart_set_config+0xd2>
   2799a:	22c0      	movs	r2, #192	; 0xc0
   2799c:	01d2      	lsls	r2, r2, #7
   2799e:	4293      	cmp	r3, r2
   279a0:	d028      	beq.n	279f4 <_usart_set_config+0xc0>
   279a2:	2280      	movs	r2, #128	; 0x80
   279a4:	0212      	lsls	r2, r2, #8
   279a6:	4293      	cmp	r3, r2
   279a8:	d012      	beq.n	279d0 <_usart_set_config+0x9c>
   279aa:	e02c      	b.n	27a06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   279ac:	231f      	movs	r3, #31
   279ae:	18fb      	adds	r3, r7, r3
   279b0:	2200      	movs	r2, #0
   279b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   279b4:	231e      	movs	r3, #30
   279b6:	18fb      	adds	r3, r7, r3
   279b8:	2210      	movs	r2, #16
   279ba:	701a      	strb	r2, [r3, #0]
			break;
   279bc:	e023      	b.n	27a06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   279be:	231f      	movs	r3, #31
   279c0:	18fb      	adds	r3, r7, r3
   279c2:	2200      	movs	r2, #0
   279c4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   279c6:	231e      	movs	r3, #30
   279c8:	18fb      	adds	r3, r7, r3
   279ca:	2208      	movs	r2, #8
   279cc:	701a      	strb	r2, [r3, #0]
			break;
   279ce:	e01a      	b.n	27a06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   279d0:	231f      	movs	r3, #31
   279d2:	18fb      	adds	r3, r7, r3
   279d4:	2200      	movs	r2, #0
   279d6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   279d8:	231e      	movs	r3, #30
   279da:	18fb      	adds	r3, r7, r3
   279dc:	2203      	movs	r2, #3
   279de:	701a      	strb	r2, [r3, #0]
			break;
   279e0:	e011      	b.n	27a06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   279e2:	231f      	movs	r3, #31
   279e4:	18fb      	adds	r3, r7, r3
   279e6:	2201      	movs	r2, #1
   279e8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   279ea:	231e      	movs	r3, #30
   279ec:	18fb      	adds	r3, r7, r3
   279ee:	2210      	movs	r2, #16
   279f0:	701a      	strb	r2, [r3, #0]
			break;
   279f2:	e008      	b.n	27a06 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   279f4:	231f      	movs	r3, #31
   279f6:	18fb      	adds	r3, r7, r3
   279f8:	2201      	movs	r2, #1
   279fa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   279fc:	231e      	movs	r3, #30
   279fe:	18fb      	adds	r3, r7, r3
   27a00:	2208      	movs	r2, #8
   27a02:	701a      	strb	r2, [r3, #0]
			break;
   27a04:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   27a06:	683b      	ldr	r3, [r7, #0]
   27a08:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   27a0a:	683b      	ldr	r3, [r7, #0]
   27a0c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   27a0e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   27a10:	683b      	ldr	r3, [r7, #0]
   27a12:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   27a14:	4313      	orrs	r3, r2
		config->sample_rate |
   27a16:	683a      	ldr	r2, [r7, #0]
   27a18:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   27a1a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   27a1c:	683a      	ldr	r2, [r7, #0]
   27a1e:	7e12      	ldrb	r2, [r2, #24]
   27a20:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   27a22:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   27a24:	683a      	ldr	r2, [r7, #0]
   27a26:	2126      	movs	r1, #38	; 0x26
   27a28:	5c52      	ldrb	r2, [r2, r1]
   27a2a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   27a2c:	4313      	orrs	r3, r2
   27a2e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   27a30:	231d      	movs	r3, #29
   27a32:	18fb      	adds	r3, r7, r3
   27a34:	2200      	movs	r2, #0
   27a36:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   27a38:	683b      	ldr	r3, [r7, #0]
   27a3a:	685b      	ldr	r3, [r3, #4]
   27a3c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   27a3e:	68fb      	ldr	r3, [r7, #12]
   27a40:	2b00      	cmp	r3, #0
   27a42:	d01e      	beq.n	27a82 <_usart_set_config+0x14e>
   27a44:	2280      	movs	r2, #128	; 0x80
   27a46:	0552      	lsls	r2, r2, #21
   27a48:	4293      	cmp	r3, r2
   27a4a:	d14f      	bne.n	27aec <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   27a4c:	683b      	ldr	r3, [r7, #0]
   27a4e:	2227      	movs	r2, #39	; 0x27
   27a50:	5c9b      	ldrb	r3, [r3, r2]
   27a52:	2201      	movs	r2, #1
   27a54:	4053      	eors	r3, r2
   27a56:	b2db      	uxtb	r3, r3
   27a58:	2b00      	cmp	r3, #0
   27a5a:	d046      	beq.n	27aea <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   27a5c:	683b      	ldr	r3, [r7, #0]
   27a5e:	6a1d      	ldr	r5, [r3, #32]
   27a60:	693b      	ldr	r3, [r7, #16]
   27a62:	b2db      	uxtb	r3, r3
   27a64:	0018      	movs	r0, r3
   27a66:	4b65      	ldr	r3, [pc, #404]	; (27bfc <_usart_set_config+0x2c8>)
   27a68:	4798      	blx	r3
   27a6a:	0001      	movs	r1, r0
   27a6c:	231d      	movs	r3, #29
   27a6e:	18fc      	adds	r4, r7, r3
   27a70:	230a      	movs	r3, #10
   27a72:	18fb      	adds	r3, r7, r3
   27a74:	001a      	movs	r2, r3
   27a76:	0028      	movs	r0, r5
   27a78:	4b61      	ldr	r3, [pc, #388]	; (27c00 <_usart_set_config+0x2cc>)
   27a7a:	4798      	blx	r3
   27a7c:	0003      	movs	r3, r0
   27a7e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   27a80:	e033      	b.n	27aea <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   27a82:	683b      	ldr	r3, [r7, #0]
   27a84:	2227      	movs	r2, #39	; 0x27
   27a86:	5c9b      	ldrb	r3, [r3, r2]
   27a88:	2b00      	cmp	r3, #0
   27a8a:	d014      	beq.n	27ab6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   27a8c:	683b      	ldr	r3, [r7, #0]
   27a8e:	6a18      	ldr	r0, [r3, #32]
   27a90:	683b      	ldr	r3, [r7, #0]
   27a92:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   27a94:	231d      	movs	r3, #29
   27a96:	18fc      	adds	r4, r7, r3
   27a98:	231f      	movs	r3, #31
   27a9a:	18fb      	adds	r3, r7, r3
   27a9c:	781d      	ldrb	r5, [r3, #0]
   27a9e:	230a      	movs	r3, #10
   27aa0:	18fa      	adds	r2, r7, r3
   27aa2:	231e      	movs	r3, #30
   27aa4:	18fb      	adds	r3, r7, r3
   27aa6:	781b      	ldrb	r3, [r3, #0]
   27aa8:	9300      	str	r3, [sp, #0]
   27aaa:	002b      	movs	r3, r5
   27aac:	4d55      	ldr	r5, [pc, #340]	; (27c04 <_usart_set_config+0x2d0>)
   27aae:	47a8      	blx	r5
   27ab0:	0003      	movs	r3, r0
   27ab2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   27ab4:	e01a      	b.n	27aec <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   27ab6:	683b      	ldr	r3, [r7, #0]
   27ab8:	6a1d      	ldr	r5, [r3, #32]
   27aba:	693b      	ldr	r3, [r7, #16]
   27abc:	b2db      	uxtb	r3, r3
   27abe:	0018      	movs	r0, r3
   27ac0:	4b4e      	ldr	r3, [pc, #312]	; (27bfc <_usart_set_config+0x2c8>)
   27ac2:	4798      	blx	r3
				status_code =
   27ac4:	231d      	movs	r3, #29
   27ac6:	18fc      	adds	r4, r7, r3
   27ac8:	231f      	movs	r3, #31
   27aca:	18fb      	adds	r3, r7, r3
   27acc:	7819      	ldrb	r1, [r3, #0]
   27ace:	230a      	movs	r3, #10
   27ad0:	18fa      	adds	r2, r7, r3
   27ad2:	231e      	movs	r3, #30
   27ad4:	18fb      	adds	r3, r7, r3
   27ad6:	781b      	ldrb	r3, [r3, #0]
   27ad8:	9300      	str	r3, [sp, #0]
   27ada:	000b      	movs	r3, r1
   27adc:	0001      	movs	r1, r0
   27ade:	0028      	movs	r0, r5
   27ae0:	4d48      	ldr	r5, [pc, #288]	; (27c04 <_usart_set_config+0x2d0>)
   27ae2:	47a8      	blx	r5
   27ae4:	0003      	movs	r3, r0
   27ae6:	7023      	strb	r3, [r4, #0]
			break;
   27ae8:	e000      	b.n	27aec <_usart_set_config+0x1b8>
			break;
   27aea:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   27aec:	231d      	movs	r3, #29
   27aee:	18fb      	adds	r3, r7, r3
   27af0:	781b      	ldrb	r3, [r3, #0]
   27af2:	2b00      	cmp	r3, #0
   27af4:	d003      	beq.n	27afe <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   27af6:	231d      	movs	r3, #29
   27af8:	18fb      	adds	r3, r7, r3
   27afa:	781b      	ldrb	r3, [r3, #0]
   27afc:	e077      	b.n	27bee <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   27afe:	683b      	ldr	r3, [r7, #0]
   27b00:	7e5b      	ldrb	r3, [r3, #25]
   27b02:	2b00      	cmp	r3, #0
   27b04:	d003      	beq.n	27b0e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   27b06:	683b      	ldr	r3, [r7, #0]
   27b08:	7e9a      	ldrb	r2, [r3, #26]
   27b0a:	69bb      	ldr	r3, [r7, #24]
   27b0c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27b0e:	687b      	ldr	r3, [r7, #4]
   27b10:	0018      	movs	r0, r3
   27b12:	4b3d      	ldr	r3, [pc, #244]	; (27c08 <_usart_set_config+0x2d4>)
   27b14:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   27b16:	230a      	movs	r3, #10
   27b18:	18fb      	adds	r3, r7, r3
   27b1a:	881a      	ldrh	r2, [r3, #0]
   27b1c:	69bb      	ldr	r3, [r7, #24]
   27b1e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27b22:	68fb      	ldr	r3, [r7, #12]
   27b24:	4313      	orrs	r3, r2
   27b26:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   27b28:	683b      	ldr	r3, [r7, #0]
   27b2a:	2227      	movs	r2, #39	; 0x27
   27b2c:	5c9b      	ldrb	r3, [r3, r2]
   27b2e:	2201      	movs	r2, #1
   27b30:	4053      	eors	r3, r2
   27b32:	b2db      	uxtb	r3, r3
   27b34:	2b00      	cmp	r3, #0
   27b36:	d003      	beq.n	27b40 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   27b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b3a:	2204      	movs	r2, #4
   27b3c:	4313      	orrs	r3, r2
   27b3e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27b40:	683b      	ldr	r3, [r7, #0]
   27b42:	7e5b      	ldrb	r3, [r3, #25]
   27b44:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27b46:	683b      	ldr	r3, [r7, #0]
   27b48:	7f1b      	ldrb	r3, [r3, #28]
   27b4a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27b4c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27b4e:	683b      	ldr	r3, [r7, #0]
   27b50:	7f5b      	ldrb	r3, [r3, #29]
   27b52:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27b54:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27b56:	683b      	ldr	r3, [r7, #0]
   27b58:	2124      	movs	r1, #36	; 0x24
   27b5a:	5c5b      	ldrb	r3, [r3, r1]
   27b5c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27b5e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   27b60:	683b      	ldr	r3, [r7, #0]
   27b62:	2125      	movs	r1, #37	; 0x25
   27b64:	5c5b      	ldrb	r3, [r3, r1]
   27b66:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27b68:	4313      	orrs	r3, r2
	ctrlb =  
   27b6a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   27b6c:	683b      	ldr	r3, [r7, #0]
   27b6e:	7a9b      	ldrb	r3, [r3, #10]
   27b70:	001a      	movs	r2, r3
   27b72:	6a3b      	ldr	r3, [r7, #32]
   27b74:	4313      	orrs	r3, r2
   27b76:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   27b78:	683b      	ldr	r3, [r7, #0]
   27b7a:	7adb      	ldrb	r3, [r3, #11]
   27b7c:	001a      	movs	r2, r3
   27b7e:	6a3b      	ldr	r3, [r7, #32]
   27b80:	4313      	orrs	r3, r2
   27b82:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   27b84:	683b      	ldr	r3, [r7, #0]
   27b86:	891b      	ldrh	r3, [r3, #8]
   27b88:	2bff      	cmp	r3, #255	; 0xff
   27b8a:	d00b      	beq.n	27ba4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   27b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b8e:	2280      	movs	r2, #128	; 0x80
   27b90:	0452      	lsls	r2, r2, #17
   27b92:	4313      	orrs	r3, r2
   27b94:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   27b96:	683b      	ldr	r3, [r7, #0]
   27b98:	891b      	ldrh	r3, [r3, #8]
   27b9a:	001a      	movs	r2, r3
   27b9c:	6a3b      	ldr	r3, [r7, #32]
   27b9e:	4313      	orrs	r3, r2
   27ba0:	623b      	str	r3, [r7, #32]
   27ba2:	e008      	b.n	27bb6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   27ba4:	683b      	ldr	r3, [r7, #0]
   27ba6:	7edb      	ldrb	r3, [r3, #27]
   27ba8:	2b00      	cmp	r3, #0
   27baa:	d004      	beq.n	27bb6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   27bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27bae:	2280      	movs	r2, #128	; 0x80
   27bb0:	04d2      	lsls	r2, r2, #19
   27bb2:	4313      	orrs	r3, r2
   27bb4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27bb6:	683b      	ldr	r3, [r7, #0]
   27bb8:	222c      	movs	r2, #44	; 0x2c
   27bba:	5c9b      	ldrb	r3, [r3, r2]
   27bbc:	2b00      	cmp	r3, #0
   27bbe:	d103      	bne.n	27bc8 <_usart_set_config+0x294>
   27bc0:	4b12      	ldr	r3, [pc, #72]	; (27c0c <_usart_set_config+0x2d8>)
   27bc2:	4798      	blx	r3
   27bc4:	1e03      	subs	r3, r0, #0
   27bc6:	d003      	beq.n	27bd0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   27bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27bca:	2280      	movs	r2, #128	; 0x80
   27bcc:	4313      	orrs	r3, r2
   27bce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27bd0:	687b      	ldr	r3, [r7, #4]
   27bd2:	0018      	movs	r0, r3
   27bd4:	4b0c      	ldr	r3, [pc, #48]	; (27c08 <_usart_set_config+0x2d4>)
   27bd6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   27bd8:	69bb      	ldr	r3, [r7, #24]
   27bda:	6a3a      	ldr	r2, [r7, #32]
   27bdc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27bde:	687b      	ldr	r3, [r7, #4]
   27be0:	0018      	movs	r0, r3
   27be2:	4b09      	ldr	r3, [pc, #36]	; (27c08 <_usart_set_config+0x2d4>)
   27be4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   27be6:	69bb      	ldr	r3, [r7, #24]
   27be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27bea:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   27bec:	2300      	movs	r3, #0
}
   27bee:	0018      	movs	r0, r3
   27bf0:	46bd      	mov	sp, r7
   27bf2:	b00a      	add	sp, #40	; 0x28
   27bf4:	bdb0      	pop	{r4, r5, r7, pc}
   27bf6:	46c0      	nop			; (mov r8, r8)
   27bf8:	000266dd 	.word	0x000266dd
   27bfc:	00029091 	.word	0x00029091
   27c00:	00026257 	.word	0x00026257
   27c04:	000262d5 	.word	0x000262d5
   27c08:	00027911 	.word	0x00027911
   27c0c:	000278d1 	.word	0x000278d1

00027c10 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27c10:	b590      	push	{r4, r7, lr}
   27c12:	b093      	sub	sp, #76	; 0x4c
   27c14:	af00      	add	r7, sp, #0
   27c16:	60f8      	str	r0, [r7, #12]
   27c18:	60b9      	str	r1, [r7, #8]
   27c1a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   27c1c:	233b      	movs	r3, #59	; 0x3b
   27c1e:	18fb      	adds	r3, r7, r3
   27c20:	2200      	movs	r2, #0
   27c22:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27c24:	68fb      	ldr	r3, [r7, #12]
   27c26:	68ba      	ldr	r2, [r7, #8]
   27c28:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27c2a:	68fb      	ldr	r3, [r7, #12]
   27c2c:	681b      	ldr	r3, [r3, #0]
   27c2e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27c30:	68fb      	ldr	r3, [r7, #12]
   27c32:	681b      	ldr	r3, [r3, #0]
   27c34:	0018      	movs	r0, r3
   27c36:	4b86      	ldr	r3, [pc, #536]	; (27e50 <usart_init+0x240>)
   27c38:	4798      	blx	r3
   27c3a:	0003      	movs	r3, r0
   27c3c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27c40:	3302      	adds	r3, #2
   27c42:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27c46:	3314      	adds	r3, #20
   27c48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   27c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c4c:	681b      	ldr	r3, [r3, #0]
   27c4e:	2201      	movs	r2, #1
   27c50:	4013      	ands	r3, r2
   27c52:	d001      	beq.n	27c58 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   27c54:	2305      	movs	r3, #5
   27c56:	e0f6      	b.n	27e46 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   27c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27c5a:	681b      	ldr	r3, [r3, #0]
   27c5c:	2202      	movs	r2, #2
   27c5e:	4013      	ands	r3, r2
   27c60:	d001      	beq.n	27c66 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   27c62:	231c      	movs	r3, #28
   27c64:	e0ef      	b.n	27e46 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27c66:	2201      	movs	r2, #1
   27c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27c6a:	409a      	lsls	r2, r3
   27c6c:	0013      	movs	r3, r2
   27c6e:	0019      	movs	r1, r3
   27c70:	2002      	movs	r0, #2
   27c72:	4b78      	ldr	r3, [pc, #480]	; (27e54 <usart_init+0x244>)
   27c74:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27c76:	2324      	movs	r3, #36	; 0x24
   27c78:	18fb      	adds	r3, r7, r3
   27c7a:	0018      	movs	r0, r3
   27c7c:	4b76      	ldr	r3, [pc, #472]	; (27e58 <usart_init+0x248>)
   27c7e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27c80:	687b      	ldr	r3, [r7, #4]
   27c82:	222d      	movs	r2, #45	; 0x2d
   27c84:	5c9a      	ldrb	r2, [r3, r2]
   27c86:	2324      	movs	r3, #36	; 0x24
   27c88:	18fb      	adds	r3, r7, r3
   27c8a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c8e:	b2db      	uxtb	r3, r3
   27c90:	2224      	movs	r2, #36	; 0x24
   27c92:	18ba      	adds	r2, r7, r2
   27c94:	0011      	movs	r1, r2
   27c96:	0018      	movs	r0, r3
   27c98:	4b70      	ldr	r3, [pc, #448]	; (27e5c <usart_init+0x24c>)
   27c9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27c9e:	b2db      	uxtb	r3, r3
   27ca0:	0018      	movs	r0, r3
   27ca2:	4b6f      	ldr	r3, [pc, #444]	; (27e60 <usart_init+0x250>)
   27ca4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27ca6:	687b      	ldr	r3, [r7, #4]
   27ca8:	222d      	movs	r2, #45	; 0x2d
   27caa:	5c9b      	ldrb	r3, [r3, r2]
   27cac:	2100      	movs	r1, #0
   27cae:	0018      	movs	r0, r3
   27cb0:	4b6c      	ldr	r3, [pc, #432]	; (27e64 <usart_init+0x254>)
   27cb2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   27cb4:	687b      	ldr	r3, [r7, #4]
   27cb6:	7ada      	ldrb	r2, [r3, #11]
   27cb8:	68fb      	ldr	r3, [r7, #12]
   27cba:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   27cbc:	687b      	ldr	r3, [r7, #4]
   27cbe:	2224      	movs	r2, #36	; 0x24
   27cc0:	5c9a      	ldrb	r2, [r3, r2]
   27cc2:	68fb      	ldr	r3, [r7, #12]
   27cc4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   27cc6:	687b      	ldr	r3, [r7, #4]
   27cc8:	2225      	movs	r2, #37	; 0x25
   27cca:	5c9a      	ldrb	r2, [r3, r2]
   27ccc:	68fb      	ldr	r3, [r7, #12]
   27cce:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   27cd0:	687b      	ldr	r3, [r7, #4]
   27cd2:	7eda      	ldrb	r2, [r3, #27]
   27cd4:	68fb      	ldr	r3, [r7, #12]
   27cd6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   27cd8:	687b      	ldr	r3, [r7, #4]
   27cda:	7f1a      	ldrb	r2, [r3, #28]
   27cdc:	68fb      	ldr	r3, [r7, #12]
   27cde:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   27ce0:	233b      	movs	r3, #59	; 0x3b
   27ce2:	18fc      	adds	r4, r7, r3
   27ce4:	687a      	ldr	r2, [r7, #4]
   27ce6:	68fb      	ldr	r3, [r7, #12]
   27ce8:	0011      	movs	r1, r2
   27cea:	0018      	movs	r0, r3
   27cec:	4b5e      	ldr	r3, [pc, #376]	; (27e68 <usart_init+0x258>)
   27cee:	4798      	blx	r3
   27cf0:	0003      	movs	r3, r0
   27cf2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   27cf4:	233b      	movs	r3, #59	; 0x3b
   27cf6:	18fb      	adds	r3, r7, r3
   27cf8:	781b      	ldrb	r3, [r3, #0]
   27cfa:	2b00      	cmp	r3, #0
   27cfc:	d003      	beq.n	27d06 <usart_init+0xf6>
		return status_code;
   27cfe:	233b      	movs	r3, #59	; 0x3b
   27d00:	18fb      	adds	r3, r7, r3
   27d02:	781b      	ldrb	r3, [r3, #0]
   27d04:	e09f      	b.n	27e46 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27d06:	2320      	movs	r3, #32
   27d08:	18fb      	adds	r3, r7, r3
   27d0a:	0018      	movs	r0, r3
   27d0c:	4b57      	ldr	r3, [pc, #348]	; (27e6c <usart_init+0x25c>)
   27d0e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27d10:	2320      	movs	r3, #32
   27d12:	18fb      	adds	r3, r7, r3
   27d14:	2200      	movs	r2, #0
   27d16:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27d18:	2320      	movs	r3, #32
   27d1a:	18fb      	adds	r3, r7, r3
   27d1c:	2200      	movs	r2, #0
   27d1e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27d20:	687b      	ldr	r3, [r7, #4]
   27d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27d24:	2310      	movs	r3, #16
   27d26:	18fb      	adds	r3, r7, r3
   27d28:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27d2a:	687b      	ldr	r3, [r7, #4]
   27d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27d2e:	2310      	movs	r3, #16
   27d30:	18fb      	adds	r3, r7, r3
   27d32:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27d34:	687b      	ldr	r3, [r7, #4]
   27d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   27d38:	2310      	movs	r3, #16
   27d3a:	18fb      	adds	r3, r7, r3
   27d3c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27d3e:	687b      	ldr	r3, [r7, #4]
   27d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   27d42:	2310      	movs	r3, #16
   27d44:	18fb      	adds	r3, r7, r3
   27d46:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d48:	2347      	movs	r3, #71	; 0x47
   27d4a:	18fb      	adds	r3, r7, r3
   27d4c:	2200      	movs	r2, #0
   27d4e:	701a      	strb	r2, [r3, #0]
   27d50:	e02c      	b.n	27dac <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27d52:	2347      	movs	r3, #71	; 0x47
   27d54:	18fb      	adds	r3, r7, r3
   27d56:	781a      	ldrb	r2, [r3, #0]
   27d58:	2310      	movs	r3, #16
   27d5a:	18fb      	adds	r3, r7, r3
   27d5c:	0092      	lsls	r2, r2, #2
   27d5e:	58d3      	ldr	r3, [r2, r3]
   27d60:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d64:	2b00      	cmp	r3, #0
   27d66:	d109      	bne.n	27d7c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27d68:	2347      	movs	r3, #71	; 0x47
   27d6a:	18fb      	adds	r3, r7, r3
   27d6c:	781a      	ldrb	r2, [r3, #0]
   27d6e:	68bb      	ldr	r3, [r7, #8]
   27d70:	0011      	movs	r1, r2
   27d72:	0018      	movs	r0, r3
   27d74:	4b3e      	ldr	r3, [pc, #248]	; (27e70 <usart_init+0x260>)
   27d76:	4798      	blx	r3
   27d78:	0003      	movs	r3, r0
   27d7a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d7e:	3301      	adds	r3, #1
   27d80:	d00d      	beq.n	27d9e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d84:	b2da      	uxtb	r2, r3
   27d86:	2320      	movs	r3, #32
   27d88:	18fb      	adds	r3, r7, r3
   27d8a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27d8e:	0c1b      	lsrs	r3, r3, #16
   27d90:	b2db      	uxtb	r3, r3
   27d92:	2220      	movs	r2, #32
   27d94:	18ba      	adds	r2, r7, r2
   27d96:	0011      	movs	r1, r2
   27d98:	0018      	movs	r0, r3
   27d9a:	4b36      	ldr	r3, [pc, #216]	; (27e74 <usart_init+0x264>)
   27d9c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27d9e:	2347      	movs	r3, #71	; 0x47
   27da0:	18fb      	adds	r3, r7, r3
   27da2:	781a      	ldrb	r2, [r3, #0]
   27da4:	2347      	movs	r3, #71	; 0x47
   27da6:	18fb      	adds	r3, r7, r3
   27da8:	3201      	adds	r2, #1
   27daa:	701a      	strb	r2, [r3, #0]
   27dac:	2347      	movs	r3, #71	; 0x47
   27dae:	18fb      	adds	r3, r7, r3
   27db0:	781b      	ldrb	r3, [r3, #0]
   27db2:	2b03      	cmp	r3, #3
   27db4:	d9cd      	bls.n	27d52 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27db6:	2300      	movs	r3, #0
   27db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   27dba:	e00a      	b.n	27dd2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   27dbc:	68fa      	ldr	r2, [r7, #12]
   27dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27dc0:	3302      	adds	r3, #2
   27dc2:	009b      	lsls	r3, r3, #2
   27dc4:	18d3      	adds	r3, r2, r3
   27dc6:	3304      	adds	r3, #4
   27dc8:	2200      	movs	r2, #0
   27dca:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27dce:	3301      	adds	r3, #1
   27dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   27dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27dd4:	2b05      	cmp	r3, #5
   27dd6:	d9f1      	bls.n	27dbc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   27dd8:	68fb      	ldr	r3, [r7, #12]
   27dda:	2200      	movs	r2, #0
   27ddc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   27dde:	68fb      	ldr	r3, [r7, #12]
   27de0:	2200      	movs	r2, #0
   27de2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   27de4:	68fb      	ldr	r3, [r7, #12]
   27de6:	2200      	movs	r2, #0
   27de8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   27dea:	68fb      	ldr	r3, [r7, #12]
   27dec:	2200      	movs	r2, #0
   27dee:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   27df0:	68fb      	ldr	r3, [r7, #12]
   27df2:	2230      	movs	r2, #48	; 0x30
   27df4:	2100      	movs	r1, #0
   27df6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   27df8:	68fb      	ldr	r3, [r7, #12]
   27dfa:	2231      	movs	r2, #49	; 0x31
   27dfc:	2100      	movs	r1, #0
   27dfe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   27e00:	68fb      	ldr	r3, [r7, #12]
   27e02:	2232      	movs	r2, #50	; 0x32
   27e04:	2100      	movs	r1, #0
   27e06:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   27e08:	68fb      	ldr	r3, [r7, #12]
   27e0a:	2233      	movs	r2, #51	; 0x33
   27e0c:	2100      	movs	r1, #0
   27e0e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   27e10:	68fb      	ldr	r3, [r7, #12]
   27e12:	681b      	ldr	r3, [r3, #0]
   27e14:	2227      	movs	r2, #39	; 0x27
   27e16:	18bc      	adds	r4, r7, r2
   27e18:	0018      	movs	r0, r3
   27e1a:	4b0d      	ldr	r3, [pc, #52]	; (27e50 <usart_init+0x240>)
   27e1c:	4798      	blx	r3
   27e1e:	0003      	movs	r3, r0
   27e20:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   27e22:	4a15      	ldr	r2, [pc, #84]	; (27e78 <usart_init+0x268>)
   27e24:	2327      	movs	r3, #39	; 0x27
   27e26:	18fb      	adds	r3, r7, r3
   27e28:	781b      	ldrb	r3, [r3, #0]
   27e2a:	0011      	movs	r1, r2
   27e2c:	0018      	movs	r0, r3
   27e2e:	4b13      	ldr	r3, [pc, #76]	; (27e7c <usart_init+0x26c>)
   27e30:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27e32:	2327      	movs	r3, #39	; 0x27
   27e34:	18fb      	adds	r3, r7, r3
   27e36:	781a      	ldrb	r2, [r3, #0]
   27e38:	4b11      	ldr	r3, [pc, #68]	; (27e80 <usart_init+0x270>)
   27e3a:	0092      	lsls	r2, r2, #2
   27e3c:	68f9      	ldr	r1, [r7, #12]
   27e3e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   27e40:	233b      	movs	r3, #59	; 0x3b
   27e42:	18fb      	adds	r3, r7, r3
   27e44:	781b      	ldrb	r3, [r3, #0]
}
   27e46:	0018      	movs	r0, r3
   27e48:	46bd      	mov	sp, r7
   27e4a:	b013      	add	sp, #76	; 0x4c
   27e4c:	bd90      	pop	{r4, r7, pc}
   27e4e:	46c0      	nop			; (mov r8, r8)
   27e50:	000266dd 	.word	0x000266dd
   27e54:	0002784d 	.word	0x0002784d
   27e58:	00027835 	.word	0x00027835
   27e5c:	00028f6d 	.word	0x00028f6d
   27e60:	00028fb1 	.word	0x00028fb1
   27e64:	00026495 	.word	0x00026495
   27e68:	00027935 	.word	0x00027935
   27e6c:	000278a9 	.word	0x000278a9
   27e70:	00026521 	.word	0x00026521
   27e74:	000292cd 	.word	0x000292cd
   27e78:	000280ed 	.word	0x000280ed
   27e7c:	00026741 	.word	0x00026741
   27e80:	20005bcc 	.word	0x20005bcc

00027e84 <system_interrupt_enter_critical_section>:
{
   27e84:	b580      	push	{r7, lr}
   27e86:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   27e88:	4b02      	ldr	r3, [pc, #8]	; (27e94 <system_interrupt_enter_critical_section+0x10>)
   27e8a:	4798      	blx	r3
}
   27e8c:	46c0      	nop			; (mov r8, r8)
   27e8e:	46bd      	mov	sp, r7
   27e90:	bd80      	pop	{r7, pc}
   27e92:	46c0      	nop			; (mov r8, r8)
   27e94:	000252d9 	.word	0x000252d9

00027e98 <system_interrupt_leave_critical_section>:
{
   27e98:	b580      	push	{r7, lr}
   27e9a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   27e9c:	4b02      	ldr	r3, [pc, #8]	; (27ea8 <system_interrupt_leave_critical_section+0x10>)
   27e9e:	4798      	blx	r3
}
   27ea0:	46c0      	nop			; (mov r8, r8)
   27ea2:	46bd      	mov	sp, r7
   27ea4:	bd80      	pop	{r7, pc}
   27ea6:	46c0      	nop			; (mov r8, r8)
   27ea8:	0002532d 	.word	0x0002532d

00027eac <usart_is_syncing>:
{
   27eac:	b580      	push	{r7, lr}
   27eae:	b084      	sub	sp, #16
   27eb0:	af00      	add	r7, sp, #0
   27eb2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27eb4:	687b      	ldr	r3, [r7, #4]
   27eb6:	681b      	ldr	r3, [r3, #0]
   27eb8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   27eba:	68fb      	ldr	r3, [r7, #12]
   27ebc:	69db      	ldr	r3, [r3, #28]
   27ebe:	1e5a      	subs	r2, r3, #1
   27ec0:	4193      	sbcs	r3, r2
   27ec2:	b2db      	uxtb	r3, r3
}
   27ec4:	0018      	movs	r0, r3
   27ec6:	46bd      	mov	sp, r7
   27ec8:	b004      	add	sp, #16
   27eca:	bd80      	pop	{r7, pc}

00027ecc <_usart_wait_for_sync>:
{
   27ecc:	b580      	push	{r7, lr}
   27ece:	b082      	sub	sp, #8
   27ed0:	af00      	add	r7, sp, #0
   27ed2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27ed4:	46c0      	nop			; (mov r8, r8)
   27ed6:	687b      	ldr	r3, [r7, #4]
   27ed8:	0018      	movs	r0, r3
   27eda:	4b04      	ldr	r3, [pc, #16]	; (27eec <_usart_wait_for_sync+0x20>)
   27edc:	4798      	blx	r3
   27ede:	1e03      	subs	r3, r0, #0
   27ee0:	d1f9      	bne.n	27ed6 <_usart_wait_for_sync+0xa>
}
   27ee2:	46c0      	nop			; (mov r8, r8)
   27ee4:	46bd      	mov	sp, r7
   27ee6:	b002      	add	sp, #8
   27ee8:	bd80      	pop	{r7, pc}
   27eea:	46c0      	nop			; (mov r8, r8)
   27eec:	00027ead 	.word	0x00027ead

00027ef0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27ef0:	b580      	push	{r7, lr}
   27ef2:	b086      	sub	sp, #24
   27ef4:	af00      	add	r7, sp, #0
   27ef6:	60f8      	str	r0, [r7, #12]
   27ef8:	60b9      	str	r1, [r7, #8]
   27efa:	1dbb      	adds	r3, r7, #6
   27efc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27efe:	68fb      	ldr	r3, [r7, #12]
   27f00:	681b      	ldr	r3, [r3, #0]
   27f02:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27f04:	4b0f      	ldr	r3, [pc, #60]	; (27f44 <_usart_write_buffer+0x54>)
   27f06:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   27f08:	68fb      	ldr	r3, [r7, #12]
   27f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   27f0c:	b29b      	uxth	r3, r3
   27f0e:	2b00      	cmp	r3, #0
   27f10:	d003      	beq.n	27f1a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27f12:	4b0d      	ldr	r3, [pc, #52]	; (27f48 <_usart_write_buffer+0x58>)
   27f14:	4798      	blx	r3
		return STATUS_BUSY;
   27f16:	2305      	movs	r3, #5
   27f18:	e010      	b.n	27f3c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   27f1a:	68fb      	ldr	r3, [r7, #12]
   27f1c:	1dba      	adds	r2, r7, #6
   27f1e:	8812      	ldrh	r2, [r2, #0]
   27f20:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   27f22:	4b09      	ldr	r3, [pc, #36]	; (27f48 <_usart_write_buffer+0x58>)
   27f24:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   27f26:	68fb      	ldr	r3, [r7, #12]
   27f28:	68ba      	ldr	r2, [r7, #8]
   27f2a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   27f2c:	68fb      	ldr	r3, [r7, #12]
   27f2e:	2233      	movs	r2, #51	; 0x33
   27f30:	2105      	movs	r1, #5
   27f32:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   27f34:	697b      	ldr	r3, [r7, #20]
   27f36:	2201      	movs	r2, #1
   27f38:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   27f3a:	2300      	movs	r3, #0
}
   27f3c:	0018      	movs	r0, r3
   27f3e:	46bd      	mov	sp, r7
   27f40:	b006      	add	sp, #24
   27f42:	bd80      	pop	{r7, pc}
   27f44:	00027e85 	.word	0x00027e85
   27f48:	00027e99 	.word	0x00027e99

00027f4c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   27f4c:	b580      	push	{r7, lr}
   27f4e:	b086      	sub	sp, #24
   27f50:	af00      	add	r7, sp, #0
   27f52:	60f8      	str	r0, [r7, #12]
   27f54:	60b9      	str	r1, [r7, #8]
   27f56:	1dbb      	adds	r3, r7, #6
   27f58:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27f5a:	68fb      	ldr	r3, [r7, #12]
   27f5c:	681b      	ldr	r3, [r3, #0]
   27f5e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27f60:	4b16      	ldr	r3, [pc, #88]	; (27fbc <_usart_read_buffer+0x70>)
   27f62:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   27f64:	68fb      	ldr	r3, [r7, #12]
   27f66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27f68:	b29b      	uxth	r3, r3
   27f6a:	2b00      	cmp	r3, #0
   27f6c:	d003      	beq.n	27f76 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27f6e:	4b14      	ldr	r3, [pc, #80]	; (27fc0 <_usart_read_buffer+0x74>)
   27f70:	4798      	blx	r3
		return STATUS_BUSY;
   27f72:	2305      	movs	r3, #5
   27f74:	e01e      	b.n	27fb4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   27f76:	68fb      	ldr	r3, [r7, #12]
   27f78:	1dba      	adds	r2, r7, #6
   27f7a:	8812      	ldrh	r2, [r2, #0]
   27f7c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   27f7e:	4b10      	ldr	r3, [pc, #64]	; (27fc0 <_usart_read_buffer+0x74>)
   27f80:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   27f82:	68fb      	ldr	r3, [r7, #12]
   27f84:	68ba      	ldr	r2, [r7, #8]
   27f86:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   27f88:	68fb      	ldr	r3, [r7, #12]
   27f8a:	2232      	movs	r2, #50	; 0x32
   27f8c:	2105      	movs	r1, #5
   27f8e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   27f90:	697b      	ldr	r3, [r7, #20]
   27f92:	2204      	movs	r2, #4
   27f94:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   27f96:	68fb      	ldr	r3, [r7, #12]
   27f98:	7a1b      	ldrb	r3, [r3, #8]
   27f9a:	2b00      	cmp	r3, #0
   27f9c:	d002      	beq.n	27fa4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   27f9e:	697b      	ldr	r3, [r7, #20]
   27fa0:	2220      	movs	r2, #32
   27fa2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   27fa4:	68fb      	ldr	r3, [r7, #12]
   27fa6:	7a5b      	ldrb	r3, [r3, #9]
   27fa8:	2b00      	cmp	r3, #0
   27faa:	d002      	beq.n	27fb2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   27fac:	697b      	ldr	r3, [r7, #20]
   27fae:	2208      	movs	r2, #8
   27fb0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   27fb2:	2300      	movs	r3, #0
}
   27fb4:	0018      	movs	r0, r3
   27fb6:	46bd      	mov	sp, r7
   27fb8:	b006      	add	sp, #24
   27fba:	bd80      	pop	{r7, pc}
   27fbc:	00027e85 	.word	0x00027e85
   27fc0:	00027e99 	.word	0x00027e99

00027fc4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   27fc4:	b580      	push	{r7, lr}
   27fc6:	b084      	sub	sp, #16
   27fc8:	af00      	add	r7, sp, #0
   27fca:	60f8      	str	r0, [r7, #12]
   27fcc:	60b9      	str	r1, [r7, #8]
   27fce:	1dfb      	adds	r3, r7, #7
   27fd0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   27fd2:	1dfb      	adds	r3, r7, #7
   27fd4:	781b      	ldrb	r3, [r3, #0]
   27fd6:	68fa      	ldr	r2, [r7, #12]
   27fd8:	3302      	adds	r3, #2
   27fda:	009b      	lsls	r3, r3, #2
   27fdc:	18d3      	adds	r3, r2, r3
   27fde:	3304      	adds	r3, #4
   27fe0:	68ba      	ldr	r2, [r7, #8]
   27fe2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   27fe4:	68fb      	ldr	r3, [r7, #12]
   27fe6:	2230      	movs	r2, #48	; 0x30
   27fe8:	5c9b      	ldrb	r3, [r3, r2]
   27fea:	b25a      	sxtb	r2, r3
   27fec:	1dfb      	adds	r3, r7, #7
   27fee:	781b      	ldrb	r3, [r3, #0]
   27ff0:	2101      	movs	r1, #1
   27ff2:	4099      	lsls	r1, r3
   27ff4:	000b      	movs	r3, r1
   27ff6:	b25b      	sxtb	r3, r3
   27ff8:	4313      	orrs	r3, r2
   27ffa:	b25b      	sxtb	r3, r3
   27ffc:	b2d9      	uxtb	r1, r3
   27ffe:	68fb      	ldr	r3, [r7, #12]
   28000:	2230      	movs	r2, #48	; 0x30
   28002:	5499      	strb	r1, [r3, r2]
}
   28004:	46c0      	nop			; (mov r8, r8)
   28006:	46bd      	mov	sp, r7
   28008:	b004      	add	sp, #16
   2800a:	bd80      	pop	{r7, pc}

0002800c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2800c:	b580      	push	{r7, lr}
   2800e:	b084      	sub	sp, #16
   28010:	af00      	add	r7, sp, #0
   28012:	60f8      	str	r0, [r7, #12]
   28014:	60b9      	str	r1, [r7, #8]
   28016:	1dbb      	adds	r3, r7, #6
   28018:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2801a:	1dbb      	adds	r3, r7, #6
   2801c:	881b      	ldrh	r3, [r3, #0]
   2801e:	2b00      	cmp	r3, #0
   28020:	d101      	bne.n	28026 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28022:	2317      	movs	r3, #23
   28024:	e010      	b.n	28048 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28026:	68fb      	ldr	r3, [r7, #12]
   28028:	79db      	ldrb	r3, [r3, #7]
   2802a:	2201      	movs	r2, #1
   2802c:	4053      	eors	r3, r2
   2802e:	b2db      	uxtb	r3, r3
   28030:	2b00      	cmp	r3, #0
   28032:	d001      	beq.n	28038 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28034:	231c      	movs	r3, #28
   28036:	e007      	b.n	28048 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28038:	1dbb      	adds	r3, r7, #6
   2803a:	881a      	ldrh	r2, [r3, #0]
   2803c:	68b9      	ldr	r1, [r7, #8]
   2803e:	68fb      	ldr	r3, [r7, #12]
   28040:	0018      	movs	r0, r3
   28042:	4b03      	ldr	r3, [pc, #12]	; (28050 <usart_write_buffer_job+0x44>)
   28044:	4798      	blx	r3
   28046:	0003      	movs	r3, r0
}
   28048:	0018      	movs	r0, r3
   2804a:	46bd      	mov	sp, r7
   2804c:	b004      	add	sp, #16
   2804e:	bd80      	pop	{r7, pc}
   28050:	00027ef1 	.word	0x00027ef1

00028054 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28054:	b580      	push	{r7, lr}
   28056:	b084      	sub	sp, #16
   28058:	af00      	add	r7, sp, #0
   2805a:	60f8      	str	r0, [r7, #12]
   2805c:	60b9      	str	r1, [r7, #8]
   2805e:	1dbb      	adds	r3, r7, #6
   28060:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28062:	1dbb      	adds	r3, r7, #6
   28064:	881b      	ldrh	r3, [r3, #0]
   28066:	2b00      	cmp	r3, #0
   28068:	d101      	bne.n	2806e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2806a:	2317      	movs	r3, #23
   2806c:	e010      	b.n	28090 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2806e:	68fb      	ldr	r3, [r7, #12]
   28070:	799b      	ldrb	r3, [r3, #6]
   28072:	2201      	movs	r2, #1
   28074:	4053      	eors	r3, r2
   28076:	b2db      	uxtb	r3, r3
   28078:	2b00      	cmp	r3, #0
   2807a:	d001      	beq.n	28080 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2807c:	231c      	movs	r3, #28
   2807e:	e007      	b.n	28090 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28080:	1dbb      	adds	r3, r7, #6
   28082:	881a      	ldrh	r2, [r3, #0]
   28084:	68b9      	ldr	r1, [r7, #8]
   28086:	68fb      	ldr	r3, [r7, #12]
   28088:	0018      	movs	r0, r3
   2808a:	4b03      	ldr	r3, [pc, #12]	; (28098 <usart_read_buffer_job+0x44>)
   2808c:	4798      	blx	r3
   2808e:	0003      	movs	r3, r0
}
   28090:	0018      	movs	r0, r3
   28092:	46bd      	mov	sp, r7
   28094:	b004      	add	sp, #16
   28096:	bd80      	pop	{r7, pc}
   28098:	00027f4d 	.word	0x00027f4d

0002809c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2809c:	b580      	push	{r7, lr}
   2809e:	b084      	sub	sp, #16
   280a0:	af00      	add	r7, sp, #0
   280a2:	6078      	str	r0, [r7, #4]
   280a4:	000a      	movs	r2, r1
   280a6:	1cfb      	adds	r3, r7, #3
   280a8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   280aa:	1cfb      	adds	r3, r7, #3
   280ac:	781b      	ldrb	r3, [r3, #0]
   280ae:	2b00      	cmp	r3, #0
   280b0:	d002      	beq.n	280b8 <usart_get_job_status+0x1c>
   280b2:	2b01      	cmp	r3, #1
   280b4:	d007      	beq.n	280c6 <usart_get_job_status+0x2a>
   280b6:	e00d      	b.n	280d4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   280b8:	230f      	movs	r3, #15
   280ba:	18fb      	adds	r3, r7, r3
   280bc:	687a      	ldr	r2, [r7, #4]
   280be:	2132      	movs	r1, #50	; 0x32
   280c0:	5c52      	ldrb	r2, [r2, r1]
   280c2:	701a      	strb	r2, [r3, #0]
			break;
   280c4:	e00b      	b.n	280de <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   280c6:	230f      	movs	r3, #15
   280c8:	18fb      	adds	r3, r7, r3
   280ca:	687a      	ldr	r2, [r7, #4]
   280cc:	2133      	movs	r1, #51	; 0x33
   280ce:	5c52      	ldrb	r2, [r2, r1]
   280d0:	701a      	strb	r2, [r3, #0]
			break;
   280d2:	e004      	b.n	280de <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   280d4:	230f      	movs	r3, #15
   280d6:	18fb      	adds	r3, r7, r3
   280d8:	2217      	movs	r2, #23
   280da:	701a      	strb	r2, [r3, #0]
			break;
   280dc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   280de:	230f      	movs	r3, #15
   280e0:	18fb      	adds	r3, r7, r3
   280e2:	781b      	ldrb	r3, [r3, #0]
}
   280e4:	0018      	movs	r0, r3
   280e6:	46bd      	mov	sp, r7
   280e8:	b004      	add	sp, #16
   280ea:	bd80      	pop	{r7, pc}

000280ec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   280ec:	b580      	push	{r7, lr}
   280ee:	b088      	sub	sp, #32
   280f0:	af00      	add	r7, sp, #0
   280f2:	0002      	movs	r2, r0
   280f4:	1dfb      	adds	r3, r7, #7
   280f6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   280f8:	1dfb      	adds	r3, r7, #7
   280fa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   280fc:	4ba3      	ldr	r3, [pc, #652]	; (2838c <_usart_interrupt_handler+0x2a0>)
   280fe:	0092      	lsls	r2, r2, #2
   28100:	58d3      	ldr	r3, [r2, r3]
   28102:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28104:	69bb      	ldr	r3, [r7, #24]
   28106:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28108:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2810a:	69bb      	ldr	r3, [r7, #24]
   2810c:	0018      	movs	r0, r3
   2810e:	4ba0      	ldr	r3, [pc, #640]	; (28390 <_usart_interrupt_handler+0x2a4>)
   28110:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28112:	697b      	ldr	r3, [r7, #20]
   28114:	7e1b      	ldrb	r3, [r3, #24]
   28116:	b2da      	uxtb	r2, r3
   28118:	2312      	movs	r3, #18
   2811a:	18fb      	adds	r3, r7, r3
   2811c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2811e:	697b      	ldr	r3, [r7, #20]
   28120:	7d9b      	ldrb	r3, [r3, #22]
   28122:	b2db      	uxtb	r3, r3
   28124:	b29a      	uxth	r2, r3
   28126:	2312      	movs	r3, #18
   28128:	18fb      	adds	r3, r7, r3
   2812a:	2112      	movs	r1, #18
   2812c:	1879      	adds	r1, r7, r1
   2812e:	8809      	ldrh	r1, [r1, #0]
   28130:	400a      	ands	r2, r1
   28132:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28134:	69bb      	ldr	r3, [r7, #24]
   28136:	2230      	movs	r2, #48	; 0x30
   28138:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2813a:	69ba      	ldr	r2, [r7, #24]
   2813c:	2131      	movs	r1, #49	; 0x31
   2813e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28140:	4013      	ands	r3, r2
   28142:	b2da      	uxtb	r2, r3
   28144:	2310      	movs	r3, #16
   28146:	18fb      	adds	r3, r7, r3
   28148:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2814a:	2312      	movs	r3, #18
   2814c:	18fb      	adds	r3, r7, r3
   2814e:	881b      	ldrh	r3, [r3, #0]
   28150:	2201      	movs	r2, #1
   28152:	4013      	ands	r3, r2
   28154:	d044      	beq.n	281e0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28156:	69bb      	ldr	r3, [r7, #24]
   28158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2815a:	b29b      	uxth	r3, r3
   2815c:	2b00      	cmp	r3, #0
   2815e:	d03c      	beq.n	281da <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28160:	69bb      	ldr	r3, [r7, #24]
   28162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28164:	781b      	ldrb	r3, [r3, #0]
   28166:	b2da      	uxtb	r2, r3
   28168:	231c      	movs	r3, #28
   2816a:	18fb      	adds	r3, r7, r3
   2816c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2816e:	69bb      	ldr	r3, [r7, #24]
   28170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28172:	1c5a      	adds	r2, r3, #1
   28174:	69bb      	ldr	r3, [r7, #24]
   28176:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28178:	69bb      	ldr	r3, [r7, #24]
   2817a:	795b      	ldrb	r3, [r3, #5]
   2817c:	2b01      	cmp	r3, #1
   2817e:	d113      	bne.n	281a8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28180:	69bb      	ldr	r3, [r7, #24]
   28182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28184:	781b      	ldrb	r3, [r3, #0]
   28186:	b2db      	uxtb	r3, r3
   28188:	021b      	lsls	r3, r3, #8
   2818a:	b21a      	sxth	r2, r3
   2818c:	231c      	movs	r3, #28
   2818e:	18fb      	adds	r3, r7, r3
   28190:	2100      	movs	r1, #0
   28192:	5e5b      	ldrsh	r3, [r3, r1]
   28194:	4313      	orrs	r3, r2
   28196:	b21a      	sxth	r2, r3
   28198:	231c      	movs	r3, #28
   2819a:	18fb      	adds	r3, r7, r3
   2819c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2819e:	69bb      	ldr	r3, [r7, #24]
   281a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   281a2:	1c5a      	adds	r2, r3, #1
   281a4:	69bb      	ldr	r3, [r7, #24]
   281a6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   281a8:	231c      	movs	r3, #28
   281aa:	18fb      	adds	r3, r7, r3
   281ac:	881b      	ldrh	r3, [r3, #0]
   281ae:	05db      	lsls	r3, r3, #23
   281b0:	0ddb      	lsrs	r3, r3, #23
   281b2:	b29a      	uxth	r2, r3
   281b4:	697b      	ldr	r3, [r7, #20]
   281b6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   281b8:	69bb      	ldr	r3, [r7, #24]
   281ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   281bc:	b29b      	uxth	r3, r3
   281be:	3b01      	subs	r3, #1
   281c0:	b29b      	uxth	r3, r3
   281c2:	69ba      	ldr	r2, [r7, #24]
   281c4:	1c19      	adds	r1, r3, #0
   281c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   281c8:	2b00      	cmp	r3, #0
   281ca:	d109      	bne.n	281e0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   281cc:	697b      	ldr	r3, [r7, #20]
   281ce:	2201      	movs	r2, #1
   281d0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   281d2:	697b      	ldr	r3, [r7, #20]
   281d4:	2202      	movs	r2, #2
   281d6:	759a      	strb	r2, [r3, #22]
   281d8:	e002      	b.n	281e0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   281da:	697b      	ldr	r3, [r7, #20]
   281dc:	2201      	movs	r2, #1
   281de:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   281e0:	2312      	movs	r3, #18
   281e2:	18fb      	adds	r3, r7, r3
   281e4:	881b      	ldrh	r3, [r3, #0]
   281e6:	2202      	movs	r2, #2
   281e8:	4013      	ands	r3, r2
   281ea:	d011      	beq.n	28210 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   281ec:	697b      	ldr	r3, [r7, #20]
   281ee:	2202      	movs	r2, #2
   281f0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   281f2:	69bb      	ldr	r3, [r7, #24]
   281f4:	2233      	movs	r2, #51	; 0x33
   281f6:	2100      	movs	r1, #0
   281f8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   281fa:	2310      	movs	r3, #16
   281fc:	18fb      	adds	r3, r7, r3
   281fe:	881b      	ldrh	r3, [r3, #0]
   28200:	2201      	movs	r2, #1
   28202:	4013      	ands	r3, r2
   28204:	d004      	beq.n	28210 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28206:	69bb      	ldr	r3, [r7, #24]
   28208:	68db      	ldr	r3, [r3, #12]
   2820a:	69ba      	ldr	r2, [r7, #24]
   2820c:	0010      	movs	r0, r2
   2820e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28210:	2312      	movs	r3, #18
   28212:	18fb      	adds	r3, r7, r3
   28214:	881b      	ldrh	r3, [r3, #0]
   28216:	2204      	movs	r2, #4
   28218:	4013      	ands	r3, r2
   2821a:	d100      	bne.n	2821e <_usart_interrupt_handler+0x132>
   2821c:	e0bd      	b.n	2839a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2821e:	69bb      	ldr	r3, [r7, #24]
   28220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28222:	b29b      	uxth	r3, r3
   28224:	2b00      	cmp	r3, #0
   28226:	d100      	bne.n	2822a <_usart_interrupt_handler+0x13e>
   28228:	e0b4      	b.n	28394 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2822a:	697b      	ldr	r3, [r7, #20]
   2822c:	8b5b      	ldrh	r3, [r3, #26]
   2822e:	b29b      	uxth	r3, r3
   28230:	b2da      	uxtb	r2, r3
   28232:	231f      	movs	r3, #31
   28234:	18fb      	adds	r3, r7, r3
   28236:	213f      	movs	r1, #63	; 0x3f
   28238:	400a      	ands	r2, r1
   2823a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2823c:	231f      	movs	r3, #31
   2823e:	18fb      	adds	r3, r7, r3
   28240:	781b      	ldrb	r3, [r3, #0]
   28242:	2208      	movs	r2, #8
   28244:	4013      	ands	r3, r2
   28246:	d007      	beq.n	28258 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28248:	231f      	movs	r3, #31
   2824a:	18fb      	adds	r3, r7, r3
   2824c:	221f      	movs	r2, #31
   2824e:	18ba      	adds	r2, r7, r2
   28250:	7812      	ldrb	r2, [r2, #0]
   28252:	2108      	movs	r1, #8
   28254:	438a      	bics	r2, r1
   28256:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28258:	231f      	movs	r3, #31
   2825a:	18fb      	adds	r3, r7, r3
   2825c:	781b      	ldrb	r3, [r3, #0]
   2825e:	2b00      	cmp	r3, #0
   28260:	d050      	beq.n	28304 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28262:	231f      	movs	r3, #31
   28264:	18fb      	adds	r3, r7, r3
   28266:	781b      	ldrb	r3, [r3, #0]
   28268:	2202      	movs	r2, #2
   2826a:	4013      	ands	r3, r2
   2826c:	d007      	beq.n	2827e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2826e:	69bb      	ldr	r3, [r7, #24]
   28270:	2232      	movs	r2, #50	; 0x32
   28272:	211a      	movs	r1, #26
   28274:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28276:	697b      	ldr	r3, [r7, #20]
   28278:	2202      	movs	r2, #2
   2827a:	835a      	strh	r2, [r3, #26]
   2827c:	e036      	b.n	282ec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2827e:	231f      	movs	r3, #31
   28280:	18fb      	adds	r3, r7, r3
   28282:	781b      	ldrb	r3, [r3, #0]
   28284:	2204      	movs	r2, #4
   28286:	4013      	ands	r3, r2
   28288:	d007      	beq.n	2829a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2828a:	69bb      	ldr	r3, [r7, #24]
   2828c:	2232      	movs	r2, #50	; 0x32
   2828e:	211e      	movs	r1, #30
   28290:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28292:	697b      	ldr	r3, [r7, #20]
   28294:	2204      	movs	r2, #4
   28296:	835a      	strh	r2, [r3, #26]
   28298:	e028      	b.n	282ec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2829a:	231f      	movs	r3, #31
   2829c:	18fb      	adds	r3, r7, r3
   2829e:	781b      	ldrb	r3, [r3, #0]
   282a0:	2201      	movs	r2, #1
   282a2:	4013      	ands	r3, r2
   282a4:	d007      	beq.n	282b6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   282a6:	69bb      	ldr	r3, [r7, #24]
   282a8:	2232      	movs	r2, #50	; 0x32
   282aa:	2113      	movs	r1, #19
   282ac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   282ae:	697b      	ldr	r3, [r7, #20]
   282b0:	2201      	movs	r2, #1
   282b2:	835a      	strh	r2, [r3, #26]
   282b4:	e01a      	b.n	282ec <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   282b6:	231f      	movs	r3, #31
   282b8:	18fb      	adds	r3, r7, r3
   282ba:	781b      	ldrb	r3, [r3, #0]
   282bc:	2210      	movs	r2, #16
   282be:	4013      	ands	r3, r2
   282c0:	d007      	beq.n	282d2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   282c2:	69bb      	ldr	r3, [r7, #24]
   282c4:	2232      	movs	r2, #50	; 0x32
   282c6:	2142      	movs	r1, #66	; 0x42
   282c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   282ca:	697b      	ldr	r3, [r7, #20]
   282cc:	2210      	movs	r2, #16
   282ce:	835a      	strh	r2, [r3, #26]
   282d0:	e00c      	b.n	282ec <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   282d2:	231f      	movs	r3, #31
   282d4:	18fb      	adds	r3, r7, r3
   282d6:	781b      	ldrb	r3, [r3, #0]
   282d8:	2220      	movs	r2, #32
   282da:	4013      	ands	r3, r2
   282dc:	d006      	beq.n	282ec <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   282de:	69bb      	ldr	r3, [r7, #24]
   282e0:	2232      	movs	r2, #50	; 0x32
   282e2:	2141      	movs	r1, #65	; 0x41
   282e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   282e6:	697b      	ldr	r3, [r7, #20]
   282e8:	2220      	movs	r2, #32
   282ea:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   282ec:	2310      	movs	r3, #16
   282ee:	18fb      	adds	r3, r7, r3
   282f0:	881b      	ldrh	r3, [r3, #0]
   282f2:	2204      	movs	r2, #4
   282f4:	4013      	ands	r3, r2
				if (callback_status
   282f6:	d050      	beq.n	2839a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   282f8:	69bb      	ldr	r3, [r7, #24]
   282fa:	695b      	ldr	r3, [r3, #20]
   282fc:	69ba      	ldr	r2, [r7, #24]
   282fe:	0010      	movs	r0, r2
   28300:	4798      	blx	r3
   28302:	e04a      	b.n	2839a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28304:	697b      	ldr	r3, [r7, #20]
   28306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28308:	b29a      	uxth	r2, r3
   2830a:	230e      	movs	r3, #14
   2830c:	18fb      	adds	r3, r7, r3
   2830e:	05d2      	lsls	r2, r2, #23
   28310:	0dd2      	lsrs	r2, r2, #23
   28312:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28314:	69bb      	ldr	r3, [r7, #24]
   28316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28318:	220e      	movs	r2, #14
   2831a:	18ba      	adds	r2, r7, r2
   2831c:	8812      	ldrh	r2, [r2, #0]
   2831e:	b2d2      	uxtb	r2, r2
   28320:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28322:	69bb      	ldr	r3, [r7, #24]
   28324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28326:	1c5a      	adds	r2, r3, #1
   28328:	69bb      	ldr	r3, [r7, #24]
   2832a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2832c:	69bb      	ldr	r3, [r7, #24]
   2832e:	795b      	ldrb	r3, [r3, #5]
   28330:	2b01      	cmp	r3, #1
   28332:	d10d      	bne.n	28350 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28334:	69bb      	ldr	r3, [r7, #24]
   28336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28338:	220e      	movs	r2, #14
   2833a:	18ba      	adds	r2, r7, r2
   2833c:	8812      	ldrh	r2, [r2, #0]
   2833e:	0a12      	lsrs	r2, r2, #8
   28340:	b292      	uxth	r2, r2
   28342:	b2d2      	uxtb	r2, r2
   28344:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28346:	69bb      	ldr	r3, [r7, #24]
   28348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2834a:	1c5a      	adds	r2, r3, #1
   2834c:	69bb      	ldr	r3, [r7, #24]
   2834e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28350:	69bb      	ldr	r3, [r7, #24]
   28352:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28354:	b29b      	uxth	r3, r3
   28356:	3b01      	subs	r3, #1
   28358:	b29b      	uxth	r3, r3
   2835a:	69ba      	ldr	r2, [r7, #24]
   2835c:	1c19      	adds	r1, r3, #0
   2835e:	8591      	strh	r1, [r2, #44]	; 0x2c
   28360:	2b00      	cmp	r3, #0
   28362:	d11a      	bne.n	2839a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28364:	697b      	ldr	r3, [r7, #20]
   28366:	2204      	movs	r2, #4
   28368:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2836a:	69bb      	ldr	r3, [r7, #24]
   2836c:	2232      	movs	r2, #50	; 0x32
   2836e:	2100      	movs	r1, #0
   28370:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28372:	2310      	movs	r3, #16
   28374:	18fb      	adds	r3, r7, r3
   28376:	881b      	ldrh	r3, [r3, #0]
   28378:	2202      	movs	r2, #2
   2837a:	4013      	ands	r3, r2
					if (callback_status
   2837c:	d00d      	beq.n	2839a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2837e:	69bb      	ldr	r3, [r7, #24]
   28380:	691b      	ldr	r3, [r3, #16]
   28382:	69ba      	ldr	r2, [r7, #24]
   28384:	0010      	movs	r0, r2
   28386:	4798      	blx	r3
   28388:	e007      	b.n	2839a <_usart_interrupt_handler+0x2ae>
   2838a:	46c0      	nop			; (mov r8, r8)
   2838c:	20005bcc 	.word	0x20005bcc
   28390:	00027ecd 	.word	0x00027ecd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28394:	697b      	ldr	r3, [r7, #20]
   28396:	2204      	movs	r2, #4
   28398:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2839a:	2312      	movs	r3, #18
   2839c:	18fb      	adds	r3, r7, r3
   2839e:	881b      	ldrh	r3, [r3, #0]
   283a0:	2210      	movs	r2, #16
   283a2:	4013      	ands	r3, r2
   283a4:	d010      	beq.n	283c8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   283a6:	697b      	ldr	r3, [r7, #20]
   283a8:	2210      	movs	r2, #16
   283aa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   283ac:	697b      	ldr	r3, [r7, #20]
   283ae:	2210      	movs	r2, #16
   283b0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   283b2:	2310      	movs	r3, #16
   283b4:	18fb      	adds	r3, r7, r3
   283b6:	881b      	ldrh	r3, [r3, #0]
   283b8:	2210      	movs	r2, #16
   283ba:	4013      	ands	r3, r2
   283bc:	d004      	beq.n	283c8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   283be:	69bb      	ldr	r3, [r7, #24]
   283c0:	69db      	ldr	r3, [r3, #28]
   283c2:	69ba      	ldr	r2, [r7, #24]
   283c4:	0010      	movs	r0, r2
   283c6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   283c8:	2312      	movs	r3, #18
   283ca:	18fb      	adds	r3, r7, r3
   283cc:	881b      	ldrh	r3, [r3, #0]
   283ce:	2220      	movs	r2, #32
   283d0:	4013      	ands	r3, r2
   283d2:	d010      	beq.n	283f6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   283d4:	697b      	ldr	r3, [r7, #20]
   283d6:	2220      	movs	r2, #32
   283d8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   283da:	697b      	ldr	r3, [r7, #20]
   283dc:	2220      	movs	r2, #32
   283de:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   283e0:	2310      	movs	r3, #16
   283e2:	18fb      	adds	r3, r7, r3
   283e4:	881b      	ldrh	r3, [r3, #0]
   283e6:	2208      	movs	r2, #8
   283e8:	4013      	ands	r3, r2
   283ea:	d004      	beq.n	283f6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   283ec:	69bb      	ldr	r3, [r7, #24]
   283ee:	699b      	ldr	r3, [r3, #24]
   283f0:	69ba      	ldr	r2, [r7, #24]
   283f2:	0010      	movs	r0, r2
   283f4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   283f6:	2312      	movs	r3, #18
   283f8:	18fb      	adds	r3, r7, r3
   283fa:	881b      	ldrh	r3, [r3, #0]
   283fc:	2208      	movs	r2, #8
   283fe:	4013      	ands	r3, r2
   28400:	d010      	beq.n	28424 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28402:	697b      	ldr	r3, [r7, #20]
   28404:	2208      	movs	r2, #8
   28406:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28408:	697b      	ldr	r3, [r7, #20]
   2840a:	2208      	movs	r2, #8
   2840c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2840e:	2310      	movs	r3, #16
   28410:	18fb      	adds	r3, r7, r3
   28412:	881b      	ldrh	r3, [r3, #0]
   28414:	2220      	movs	r2, #32
   28416:	4013      	ands	r3, r2
   28418:	d004      	beq.n	28424 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2841a:	69bb      	ldr	r3, [r7, #24]
   2841c:	6a1b      	ldr	r3, [r3, #32]
   2841e:	69ba      	ldr	r2, [r7, #24]
   28420:	0010      	movs	r0, r2
   28422:	4798      	blx	r3
		}
	}
#endif
}
   28424:	46c0      	nop			; (mov r8, r8)
   28426:	46bd      	mov	sp, r7
   28428:	b008      	add	sp, #32
   2842a:	bd80      	pop	{r7, pc}

0002842c <system_gclk_gen_get_config_defaults>:
{
   2842c:	b580      	push	{r7, lr}
   2842e:	b082      	sub	sp, #8
   28430:	af00      	add	r7, sp, #0
   28432:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28434:	687b      	ldr	r3, [r7, #4]
   28436:	2201      	movs	r2, #1
   28438:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2843a:	687b      	ldr	r3, [r7, #4]
   2843c:	2200      	movs	r2, #0
   2843e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28440:	687b      	ldr	r3, [r7, #4]
   28442:	2206      	movs	r2, #6
   28444:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28446:	687b      	ldr	r3, [r7, #4]
   28448:	2200      	movs	r2, #0
   2844a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2844c:	687b      	ldr	r3, [r7, #4]
   2844e:	2200      	movs	r2, #0
   28450:	725a      	strb	r2, [r3, #9]
}
   28452:	46c0      	nop			; (mov r8, r8)
   28454:	46bd      	mov	sp, r7
   28456:	b002      	add	sp, #8
   28458:	bd80      	pop	{r7, pc}

0002845a <system_gclk_chan_get_config_defaults>:
{
   2845a:	b580      	push	{r7, lr}
   2845c:	b082      	sub	sp, #8
   2845e:	af00      	add	r7, sp, #0
   28460:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28462:	687b      	ldr	r3, [r7, #4]
   28464:	2200      	movs	r2, #0
   28466:	701a      	strb	r2, [r3, #0]
}
   28468:	46c0      	nop			; (mov r8, r8)
   2846a:	46bd      	mov	sp, r7
   2846c:	b002      	add	sp, #8
   2846e:	bd80      	pop	{r7, pc}

00028470 <system_clock_source_osc8m_get_config_defaults>:
{
   28470:	b580      	push	{r7, lr}
   28472:	b082      	sub	sp, #8
   28474:	af00      	add	r7, sp, #0
   28476:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28478:	687b      	ldr	r3, [r7, #4]
   2847a:	2203      	movs	r2, #3
   2847c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2847e:	687b      	ldr	r3, [r7, #4]
   28480:	2200      	movs	r2, #0
   28482:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28484:	687b      	ldr	r3, [r7, #4]
   28486:	2201      	movs	r2, #1
   28488:	709a      	strb	r2, [r3, #2]
}
   2848a:	46c0      	nop			; (mov r8, r8)
   2848c:	46bd      	mov	sp, r7
   2848e:	b002      	add	sp, #8
   28490:	bd80      	pop	{r7, pc}
	...

00028494 <system_cpu_clock_set_divider>:
{
   28494:	b580      	push	{r7, lr}
   28496:	b082      	sub	sp, #8
   28498:	af00      	add	r7, sp, #0
   2849a:	0002      	movs	r2, r0
   2849c:	1dfb      	adds	r3, r7, #7
   2849e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   284a0:	4a03      	ldr	r2, [pc, #12]	; (284b0 <system_cpu_clock_set_divider+0x1c>)
   284a2:	1dfb      	adds	r3, r7, #7
   284a4:	781b      	ldrb	r3, [r3, #0]
   284a6:	7213      	strb	r3, [r2, #8]
}
   284a8:	46c0      	nop			; (mov r8, r8)
   284aa:	46bd      	mov	sp, r7
   284ac:	b002      	add	sp, #8
   284ae:	bd80      	pop	{r7, pc}
   284b0:	40000400 	.word	0x40000400

000284b4 <system_apb_clock_set_divider>:
{
   284b4:	b580      	push	{r7, lr}
   284b6:	b082      	sub	sp, #8
   284b8:	af00      	add	r7, sp, #0
   284ba:	0002      	movs	r2, r0
   284bc:	1dfb      	adds	r3, r7, #7
   284be:	701a      	strb	r2, [r3, #0]
   284c0:	1dbb      	adds	r3, r7, #6
   284c2:	1c0a      	adds	r2, r1, #0
   284c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   284c6:	1dfb      	adds	r3, r7, #7
   284c8:	781b      	ldrb	r3, [r3, #0]
   284ca:	2b01      	cmp	r3, #1
   284cc:	d008      	beq.n	284e0 <system_apb_clock_set_divider+0x2c>
   284ce:	2b02      	cmp	r3, #2
   284d0:	d00b      	beq.n	284ea <system_apb_clock_set_divider+0x36>
   284d2:	2b00      	cmp	r3, #0
   284d4:	d10e      	bne.n	284f4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   284d6:	4a0b      	ldr	r2, [pc, #44]	; (28504 <system_apb_clock_set_divider+0x50>)
   284d8:	1dbb      	adds	r3, r7, #6
   284da:	781b      	ldrb	r3, [r3, #0]
   284dc:	7253      	strb	r3, [r2, #9]
			break;
   284de:	e00b      	b.n	284f8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   284e0:	4a08      	ldr	r2, [pc, #32]	; (28504 <system_apb_clock_set_divider+0x50>)
   284e2:	1dbb      	adds	r3, r7, #6
   284e4:	781b      	ldrb	r3, [r3, #0]
   284e6:	7293      	strb	r3, [r2, #10]
			break;
   284e8:	e006      	b.n	284f8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   284ea:	4a06      	ldr	r2, [pc, #24]	; (28504 <system_apb_clock_set_divider+0x50>)
   284ec:	1dbb      	adds	r3, r7, #6
   284ee:	781b      	ldrb	r3, [r3, #0]
   284f0:	72d3      	strb	r3, [r2, #11]
			break;
   284f2:	e001      	b.n	284f8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   284f4:	2317      	movs	r3, #23
   284f6:	e000      	b.n	284fa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   284f8:	2300      	movs	r3, #0
}
   284fa:	0018      	movs	r0, r3
   284fc:	46bd      	mov	sp, r7
   284fe:	b002      	add	sp, #8
   28500:	bd80      	pop	{r7, pc}
   28502:	46c0      	nop			; (mov r8, r8)
   28504:	40000400 	.word	0x40000400

00028508 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28508:	b580      	push	{r7, lr}
   2850a:	b082      	sub	sp, #8
   2850c:	af00      	add	r7, sp, #0
   2850e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   28510:	687b      	ldr	r3, [r7, #4]
   28512:	2201      	movs	r2, #1
   28514:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28516:	687b      	ldr	r3, [r7, #4]
   28518:	2200      	movs	r2, #0
   2851a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2851c:	687b      	ldr	r3, [r7, #4]
   2851e:	2200      	movs	r2, #0
   28520:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   28522:	687b      	ldr	r3, [r7, #4]
   28524:	2200      	movs	r2, #0
   28526:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28528:	687b      	ldr	r3, [r7, #4]
   2852a:	2200      	movs	r2, #0
   2852c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2852e:	687b      	ldr	r3, [r7, #4]
   28530:	4a0a      	ldr	r2, [pc, #40]	; (2855c <system_clock_source_dpll_get_config_defaults+0x54>)
   28532:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28534:	687b      	ldr	r3, [r7, #4]
   28536:	2280      	movs	r2, #128	; 0x80
   28538:	0212      	lsls	r2, r2, #8
   2853a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2853c:	687b      	ldr	r3, [r7, #4]
   2853e:	2201      	movs	r2, #1
   28540:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   28542:	687b      	ldr	r3, [r7, #4]
   28544:	2200      	movs	r2, #0
   28546:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28548:	687b      	ldr	r3, [r7, #4]
   2854a:	2200      	movs	r2, #0
   2854c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2854e:	687b      	ldr	r3, [r7, #4]
   28550:	2200      	movs	r2, #0
   28552:	749a      	strb	r2, [r3, #18]
};
   28554:	46c0      	nop			; (mov r8, r8)
   28556:	46bd      	mov	sp, r7
   28558:	b002      	add	sp, #8
   2855a:	bd80      	pop	{r7, pc}
   2855c:	02dc6c00 	.word	0x02dc6c00

00028560 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28560:	b580      	push	{r7, lr}
   28562:	b082      	sub	sp, #8
   28564:	af00      	add	r7, sp, #0
   28566:	0002      	movs	r2, r0
   28568:	1dfb      	adds	r3, r7, #7
   2856a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2856c:	4a08      	ldr	r2, [pc, #32]	; (28590 <system_flash_set_waitstates+0x30>)
   2856e:	1dfb      	adds	r3, r7, #7
   28570:	781b      	ldrb	r3, [r3, #0]
   28572:	210f      	movs	r1, #15
   28574:	400b      	ands	r3, r1
   28576:	b2d9      	uxtb	r1, r3
   28578:	6853      	ldr	r3, [r2, #4]
   2857a:	200f      	movs	r0, #15
   2857c:	4001      	ands	r1, r0
   2857e:	0049      	lsls	r1, r1, #1
   28580:	201e      	movs	r0, #30
   28582:	4383      	bics	r3, r0
   28584:	430b      	orrs	r3, r1
   28586:	6053      	str	r3, [r2, #4]
}
   28588:	46c0      	nop			; (mov r8, r8)
   2858a:	46bd      	mov	sp, r7
   2858c:	b002      	add	sp, #8
   2858e:	bd80      	pop	{r7, pc}
   28590:	41004000 	.word	0x41004000

00028594 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28594:	b580      	push	{r7, lr}
   28596:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28598:	46c0      	nop			; (mov r8, r8)
   2859a:	4b04      	ldr	r3, [pc, #16]	; (285ac <_system_dfll_wait_for_sync+0x18>)
   2859c:	68db      	ldr	r3, [r3, #12]
   2859e:	2210      	movs	r2, #16
   285a0:	4013      	ands	r3, r2
   285a2:	d0fa      	beq.n	2859a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   285a4:	46c0      	nop			; (mov r8, r8)
   285a6:	46bd      	mov	sp, r7
   285a8:	bd80      	pop	{r7, pc}
   285aa:	46c0      	nop			; (mov r8, r8)
   285ac:	40000800 	.word	0x40000800

000285b0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   285b0:	b580      	push	{r7, lr}
   285b2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   285b4:	4b0c      	ldr	r3, [pc, #48]	; (285e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285b6:	2202      	movs	r2, #2
   285b8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   285ba:	4b0c      	ldr	r3, [pc, #48]	; (285ec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   285bc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   285be:	4a0a      	ldr	r2, [pc, #40]	; (285e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285c0:	4b0b      	ldr	r3, [pc, #44]	; (285f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   285c2:	689b      	ldr	r3, [r3, #8]
   285c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   285c6:	4a08      	ldr	r2, [pc, #32]	; (285e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285c8:	4b09      	ldr	r3, [pc, #36]	; (285f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   285ca:	685b      	ldr	r3, [r3, #4]
   285cc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   285ce:	4b06      	ldr	r3, [pc, #24]	; (285e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285d0:	2200      	movs	r2, #0
   285d2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   285d4:	4b05      	ldr	r3, [pc, #20]	; (285ec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   285d6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   285d8:	4a03      	ldr	r2, [pc, #12]	; (285e8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   285da:	4b05      	ldr	r3, [pc, #20]	; (285f0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   285dc:	681b      	ldr	r3, [r3, #0]
   285de:	b29b      	uxth	r3, r3
   285e0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   285e2:	46c0      	nop			; (mov r8, r8)
   285e4:	46bd      	mov	sp, r7
   285e6:	bd80      	pop	{r7, pc}
   285e8:	40000800 	.word	0x40000800
   285ec:	00028595 	.word	0x00028595
   285f0:	200042a8 	.word	0x200042a8

000285f4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   285f4:	b580      	push	{r7, lr}
   285f6:	b082      	sub	sp, #8
   285f8:	af00      	add	r7, sp, #0
   285fa:	0002      	movs	r2, r0
   285fc:	1dfb      	adds	r3, r7, #7
   285fe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28600:	1dfb      	adds	r3, r7, #7
   28602:	781b      	ldrb	r3, [r3, #0]
   28604:	2b08      	cmp	r3, #8
   28606:	d841      	bhi.n	2868c <system_clock_source_get_hz+0x98>
   28608:	009a      	lsls	r2, r3, #2
   2860a:	4b23      	ldr	r3, [pc, #140]	; (28698 <system_clock_source_get_hz+0xa4>)
   2860c:	18d3      	adds	r3, r2, r3
   2860e:	681b      	ldr	r3, [r3, #0]
   28610:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   28612:	4b22      	ldr	r3, [pc, #136]	; (2869c <system_clock_source_get_hz+0xa8>)
   28614:	691b      	ldr	r3, [r3, #16]
   28616:	e03a      	b.n	2868e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28618:	4b21      	ldr	r3, [pc, #132]	; (286a0 <system_clock_source_get_hz+0xac>)
   2861a:	6a1b      	ldr	r3, [r3, #32]
   2861c:	059b      	lsls	r3, r3, #22
   2861e:	0f9b      	lsrs	r3, r3, #30
   28620:	b2db      	uxtb	r3, r3
   28622:	001a      	movs	r2, r3
   28624:	4b1f      	ldr	r3, [pc, #124]	; (286a4 <system_clock_source_get_hz+0xb0>)
   28626:	40d3      	lsrs	r3, r2
   28628:	e031      	b.n	2868e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2862a:	2380      	movs	r3, #128	; 0x80
   2862c:	021b      	lsls	r3, r3, #8
   2862e:	e02e      	b.n	2868e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   28630:	2380      	movs	r3, #128	; 0x80
   28632:	021b      	lsls	r3, r3, #8
   28634:	e02b      	b.n	2868e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28636:	4b19      	ldr	r3, [pc, #100]	; (2869c <system_clock_source_get_hz+0xa8>)
   28638:	695b      	ldr	r3, [r3, #20]
   2863a:	e028      	b.n	2868e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2863c:	4b17      	ldr	r3, [pc, #92]	; (2869c <system_clock_source_get_hz+0xa8>)
   2863e:	681b      	ldr	r3, [r3, #0]
   28640:	2202      	movs	r2, #2
   28642:	4013      	ands	r3, r2
   28644:	d101      	bne.n	2864a <system_clock_source_get_hz+0x56>
			return 0;
   28646:	2300      	movs	r3, #0
   28648:	e021      	b.n	2868e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2864a:	4b17      	ldr	r3, [pc, #92]	; (286a8 <system_clock_source_get_hz+0xb4>)
   2864c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2864e:	4b13      	ldr	r3, [pc, #76]	; (2869c <system_clock_source_get_hz+0xa8>)
   28650:	681b      	ldr	r3, [r3, #0]
   28652:	2224      	movs	r2, #36	; 0x24
   28654:	4013      	ands	r3, r2
   28656:	2b04      	cmp	r3, #4
   28658:	d109      	bne.n	2866e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2865a:	2000      	movs	r0, #0
   2865c:	4b13      	ldr	r3, [pc, #76]	; (286ac <system_clock_source_get_hz+0xb8>)
   2865e:	4798      	blx	r3
   28660:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   28662:	4b0e      	ldr	r3, [pc, #56]	; (2869c <system_clock_source_get_hz+0xa8>)
   28664:	689b      	ldr	r3, [r3, #8]
   28666:	041b      	lsls	r3, r3, #16
   28668:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2866a:	4353      	muls	r3, r2
   2866c:	e00f      	b.n	2868e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2866e:	4b10      	ldr	r3, [pc, #64]	; (286b0 <system_clock_source_get_hz+0xbc>)
   28670:	e00d      	b.n	2868e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   28672:	4a0b      	ldr	r2, [pc, #44]	; (286a0 <system_clock_source_get_hz+0xac>)
   28674:	2350      	movs	r3, #80	; 0x50
   28676:	5cd3      	ldrb	r3, [r2, r3]
   28678:	b2db      	uxtb	r3, r3
   2867a:	001a      	movs	r2, r3
   2867c:	2304      	movs	r3, #4
   2867e:	4013      	ands	r3, r2
   28680:	d101      	bne.n	28686 <system_clock_source_get_hz+0x92>
			return 0;
   28682:	2300      	movs	r3, #0
   28684:	e003      	b.n	2868e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28686:	4b05      	ldr	r3, [pc, #20]	; (2869c <system_clock_source_get_hz+0xa8>)
   28688:	68db      	ldr	r3, [r3, #12]
   2868a:	e000      	b.n	2868e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2868c:	2300      	movs	r3, #0
	}
}
   2868e:	0018      	movs	r0, r3
   28690:	46bd      	mov	sp, r7
   28692:	b002      	add	sp, #8
   28694:	bd80      	pop	{r7, pc}
   28696:	46c0      	nop			; (mov r8, r8)
   28698:	00038fac 	.word	0x00038fac
   2869c:	200042a8 	.word	0x200042a8
   286a0:	40000800 	.word	0x40000800
   286a4:	007a1200 	.word	0x007a1200
   286a8:	00028595 	.word	0x00028595
   286ac:	00029091 	.word	0x00029091
   286b0:	02dc6c00 	.word	0x02dc6c00

000286b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   286b4:	b580      	push	{r7, lr}
   286b6:	b084      	sub	sp, #16
   286b8:	af00      	add	r7, sp, #0
   286ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   286bc:	4b1a      	ldr	r3, [pc, #104]	; (28728 <system_clock_source_osc8m_set_config+0x74>)
   286be:	6a1b      	ldr	r3, [r3, #32]
   286c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   286c2:	687b      	ldr	r3, [r7, #4]
   286c4:	781b      	ldrb	r3, [r3, #0]
   286c6:	1c1a      	adds	r2, r3, #0
   286c8:	2303      	movs	r3, #3
   286ca:	4013      	ands	r3, r2
   286cc:	b2da      	uxtb	r2, r3
   286ce:	230d      	movs	r3, #13
   286d0:	18fb      	adds	r3, r7, r3
   286d2:	2103      	movs	r1, #3
   286d4:	400a      	ands	r2, r1
   286d6:	0010      	movs	r0, r2
   286d8:	781a      	ldrb	r2, [r3, #0]
   286da:	2103      	movs	r1, #3
   286dc:	438a      	bics	r2, r1
   286de:	1c11      	adds	r1, r2, #0
   286e0:	1c02      	adds	r2, r0, #0
   286e2:	430a      	orrs	r2, r1
   286e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   286e6:	687b      	ldr	r3, [r7, #4]
   286e8:	789a      	ldrb	r2, [r3, #2]
   286ea:	230c      	movs	r3, #12
   286ec:	18fb      	adds	r3, r7, r3
   286ee:	01d0      	lsls	r0, r2, #7
   286f0:	781a      	ldrb	r2, [r3, #0]
   286f2:	217f      	movs	r1, #127	; 0x7f
   286f4:	400a      	ands	r2, r1
   286f6:	1c11      	adds	r1, r2, #0
   286f8:	1c02      	adds	r2, r0, #0
   286fa:	430a      	orrs	r2, r1
   286fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   286fe:	687b      	ldr	r3, [r7, #4]
   28700:	785a      	ldrb	r2, [r3, #1]
   28702:	230c      	movs	r3, #12
   28704:	18fb      	adds	r3, r7, r3
   28706:	2101      	movs	r1, #1
   28708:	400a      	ands	r2, r1
   2870a:	0190      	lsls	r0, r2, #6
   2870c:	781a      	ldrb	r2, [r3, #0]
   2870e:	2140      	movs	r1, #64	; 0x40
   28710:	438a      	bics	r2, r1
   28712:	1c11      	adds	r1, r2, #0
   28714:	1c02      	adds	r2, r0, #0
   28716:	430a      	orrs	r2, r1
   28718:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2871a:	4b03      	ldr	r3, [pc, #12]	; (28728 <system_clock_source_osc8m_set_config+0x74>)
   2871c:	68fa      	ldr	r2, [r7, #12]
   2871e:	621a      	str	r2, [r3, #32]
}
   28720:	46c0      	nop			; (mov r8, r8)
   28722:	46bd      	mov	sp, r7
   28724:	b004      	add	sp, #16
   28726:	bd80      	pop	{r7, pc}
   28728:	40000800 	.word	0x40000800

0002872c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2872c:	b580      	push	{r7, lr}
   2872e:	b086      	sub	sp, #24
   28730:	af00      	add	r7, sp, #0
   28732:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   28734:	687b      	ldr	r3, [r7, #4]
   28736:	68db      	ldr	r3, [r3, #12]
   28738:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2873a:	687b      	ldr	r3, [r7, #4]
   2873c:	7d1b      	ldrb	r3, [r3, #20]
   2873e:	2b01      	cmp	r3, #1
   28740:	d10a      	bne.n	28758 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   28742:	687b      	ldr	r3, [r7, #4]
   28744:	8a1b      	ldrh	r3, [r3, #16]
   28746:	3301      	adds	r3, #1
   28748:	005b      	lsls	r3, r3, #1
   2874a:	001a      	movs	r2, r3
   2874c:	4b36      	ldr	r3, [pc, #216]	; (28828 <system_clock_source_dpll_set_config+0xfc>)
   2874e:	0011      	movs	r1, r2
   28750:	6978      	ldr	r0, [r7, #20]
   28752:	4798      	blx	r3
   28754:	0003      	movs	r3, r0
   28756:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   28758:	687b      	ldr	r3, [r7, #4]
   2875a:	689b      	ldr	r3, [r3, #8]
   2875c:	011a      	lsls	r2, r3, #4
   2875e:	4b32      	ldr	r3, [pc, #200]	; (28828 <system_clock_source_dpll_set_config+0xfc>)
   28760:	6979      	ldr	r1, [r7, #20]
   28762:	0010      	movs	r0, r2
   28764:	4798      	blx	r3
   28766:	0003      	movs	r3, r0
   28768:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2876a:	693b      	ldr	r3, [r7, #16]
   2876c:	b2da      	uxtb	r2, r3
   2876e:	230f      	movs	r3, #15
   28770:	18fb      	adds	r3, r7, r3
   28772:	210f      	movs	r1, #15
   28774:	400a      	ands	r2, r1
   28776:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   28778:	693b      	ldr	r3, [r7, #16]
   2877a:	091b      	lsrs	r3, r3, #4
   2877c:	3b01      	subs	r3, #1
   2877e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   28780:	492a      	ldr	r1, [pc, #168]	; (2882c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28782:	687b      	ldr	r3, [r7, #4]
   28784:	781b      	ldrb	r3, [r3, #0]
   28786:	01db      	lsls	r3, r3, #7
   28788:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2878a:	687b      	ldr	r3, [r7, #4]
   2878c:	785b      	ldrb	r3, [r3, #1]
   2878e:	019b      	lsls	r3, r3, #6
   28790:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28792:	4313      	orrs	r3, r2
   28794:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   28796:	2344      	movs	r3, #68	; 0x44
   28798:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2879a:	4b24      	ldr	r3, [pc, #144]	; (2882c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2879c:	220f      	movs	r2, #15
   2879e:	18ba      	adds	r2, r7, r2
   287a0:	7812      	ldrb	r2, [r2, #0]
   287a2:	0412      	lsls	r2, r2, #16
   287a4:	0011      	movs	r1, r2
   287a6:	22f0      	movs	r2, #240	; 0xf0
   287a8:	0312      	lsls	r2, r2, #12
   287aa:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   287ac:	693a      	ldr	r2, [r7, #16]
   287ae:	0512      	lsls	r2, r2, #20
   287b0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   287b2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   287b4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   287b6:	4b1d      	ldr	r3, [pc, #116]	; (2882c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   287b8:	687a      	ldr	r2, [r7, #4]
   287ba:	8a12      	ldrh	r2, [r2, #16]
   287bc:	0412      	lsls	r2, r2, #16
   287be:	0011      	movs	r1, r2
   287c0:	4a1b      	ldr	r2, [pc, #108]	; (28830 <system_clock_source_dpll_set_config+0x104>)
   287c2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   287c4:	687a      	ldr	r2, [r7, #4]
   287c6:	7892      	ldrb	r2, [r2, #2]
   287c8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   287ca:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   287cc:	687a      	ldr	r2, [r7, #4]
   287ce:	7cd2      	ldrb	r2, [r2, #19]
   287d0:	0212      	lsls	r2, r2, #8
   287d2:	0010      	movs	r0, r2
   287d4:	22e0      	movs	r2, #224	; 0xe0
   287d6:	00d2      	lsls	r2, r2, #3
   287d8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   287da:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   287dc:	687a      	ldr	r2, [r7, #4]
   287de:	7d12      	ldrb	r2, [r2, #20]
   287e0:	0112      	lsls	r2, r2, #4
   287e2:	0010      	movs	r0, r2
   287e4:	2230      	movs	r2, #48	; 0x30
   287e6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   287e8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   287ea:	687a      	ldr	r2, [r7, #4]
   287ec:	78d2      	ldrb	r2, [r2, #3]
   287ee:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   287f0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   287f2:	687a      	ldr	r2, [r7, #4]
   287f4:	7912      	ldrb	r2, [r2, #4]
   287f6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   287f8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   287fa:	687a      	ldr	r2, [r7, #4]
   287fc:	7c92      	ldrb	r2, [r2, #18]
   287fe:	0010      	movs	r0, r2
   28800:	2203      	movs	r2, #3
   28802:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28804:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   28806:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   28808:	693b      	ldr	r3, [r7, #16]
   2880a:	3301      	adds	r3, #1
   2880c:	011a      	lsls	r2, r3, #4
   2880e:	230f      	movs	r3, #15
   28810:	18fb      	adds	r3, r7, r3
   28812:	781b      	ldrb	r3, [r3, #0]
   28814:	18d3      	adds	r3, r2, r3
   28816:	697a      	ldr	r2, [r7, #20]
   28818:	4353      	muls	r3, r2
   2881a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2881c:	4b05      	ldr	r3, [pc, #20]	; (28834 <system_clock_source_dpll_set_config+0x108>)
   2881e:	60da      	str	r2, [r3, #12]
}
   28820:	46c0      	nop			; (mov r8, r8)
   28822:	46bd      	mov	sp, r7
   28824:	b006      	add	sp, #24
   28826:	bd80      	pop	{r7, pc}
   28828:	00031b55 	.word	0x00031b55
   2882c:	40000800 	.word	0x40000800
   28830:	07ff0000 	.word	0x07ff0000
   28834:	200042a8 	.word	0x200042a8

00028838 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   28838:	b580      	push	{r7, lr}
   2883a:	b082      	sub	sp, #8
   2883c:	af00      	add	r7, sp, #0
   2883e:	0002      	movs	r2, r0
   28840:	1dfb      	adds	r3, r7, #7
   28842:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28844:	1dfb      	adds	r3, r7, #7
   28846:	781b      	ldrb	r3, [r3, #0]
   28848:	2b08      	cmp	r3, #8
   2884a:	d83b      	bhi.n	288c4 <system_clock_source_enable+0x8c>
   2884c:	009a      	lsls	r2, r3, #2
   2884e:	4b21      	ldr	r3, [pc, #132]	; (288d4 <system_clock_source_enable+0x9c>)
   28850:	18d3      	adds	r3, r2, r3
   28852:	681b      	ldr	r3, [r3, #0]
   28854:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   28856:	4b20      	ldr	r3, [pc, #128]	; (288d8 <system_clock_source_enable+0xa0>)
   28858:	4a1f      	ldr	r2, [pc, #124]	; (288d8 <system_clock_source_enable+0xa0>)
   2885a:	6a12      	ldr	r2, [r2, #32]
   2885c:	2102      	movs	r1, #2
   2885e:	430a      	orrs	r2, r1
   28860:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   28862:	2300      	movs	r3, #0
   28864:	e031      	b.n	288ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   28866:	4b1c      	ldr	r3, [pc, #112]	; (288d8 <system_clock_source_enable+0xa0>)
   28868:	4a1b      	ldr	r2, [pc, #108]	; (288d8 <system_clock_source_enable+0xa0>)
   2886a:	6992      	ldr	r2, [r2, #24]
   2886c:	2102      	movs	r1, #2
   2886e:	430a      	orrs	r2, r1
   28870:	619a      	str	r2, [r3, #24]
		break;
   28872:	e029      	b.n	288c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   28874:	4a18      	ldr	r2, [pc, #96]	; (288d8 <system_clock_source_enable+0xa0>)
   28876:	4b18      	ldr	r3, [pc, #96]	; (288d8 <system_clock_source_enable+0xa0>)
   28878:	8a1b      	ldrh	r3, [r3, #16]
   2887a:	b29b      	uxth	r3, r3
   2887c:	2102      	movs	r1, #2
   2887e:	430b      	orrs	r3, r1
   28880:	b29b      	uxth	r3, r3
   28882:	8213      	strh	r3, [r2, #16]
		break;
   28884:	e020      	b.n	288c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   28886:	4a14      	ldr	r2, [pc, #80]	; (288d8 <system_clock_source_enable+0xa0>)
   28888:	4b13      	ldr	r3, [pc, #76]	; (288d8 <system_clock_source_enable+0xa0>)
   2888a:	8a9b      	ldrh	r3, [r3, #20]
   2888c:	b29b      	uxth	r3, r3
   2888e:	2102      	movs	r1, #2
   28890:	430b      	orrs	r3, r1
   28892:	b29b      	uxth	r3, r3
   28894:	8293      	strh	r3, [r2, #20]
		break;
   28896:	e017      	b.n	288c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   28898:	4b10      	ldr	r3, [pc, #64]	; (288dc <system_clock_source_enable+0xa4>)
   2889a:	681b      	ldr	r3, [r3, #0]
   2889c:	2202      	movs	r2, #2
   2889e:	431a      	orrs	r2, r3
   288a0:	4b0e      	ldr	r3, [pc, #56]	; (288dc <system_clock_source_enable+0xa4>)
   288a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   288a4:	4b0e      	ldr	r3, [pc, #56]	; (288e0 <system_clock_source_enable+0xa8>)
   288a6:	4798      	blx	r3
		break;
   288a8:	e00e      	b.n	288c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   288aa:	4a0b      	ldr	r2, [pc, #44]	; (288d8 <system_clock_source_enable+0xa0>)
   288ac:	490a      	ldr	r1, [pc, #40]	; (288d8 <system_clock_source_enable+0xa0>)
   288ae:	2344      	movs	r3, #68	; 0x44
   288b0:	5ccb      	ldrb	r3, [r1, r3]
   288b2:	b2db      	uxtb	r3, r3
   288b4:	2102      	movs	r1, #2
   288b6:	430b      	orrs	r3, r1
   288b8:	b2d9      	uxtb	r1, r3
   288ba:	2344      	movs	r3, #68	; 0x44
   288bc:	54d1      	strb	r1, [r2, r3]
		break;
   288be:	e003      	b.n	288c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   288c0:	2300      	movs	r3, #0
   288c2:	e002      	b.n	288ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   288c4:	2317      	movs	r3, #23
   288c6:	e000      	b.n	288ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   288c8:	2300      	movs	r3, #0
}
   288ca:	0018      	movs	r0, r3
   288cc:	46bd      	mov	sp, r7
   288ce:	b002      	add	sp, #8
   288d0:	bd80      	pop	{r7, pc}
   288d2:	46c0      	nop			; (mov r8, r8)
   288d4:	00038fd0 	.word	0x00038fd0
   288d8:	40000800 	.word	0x40000800
   288dc:	200042a8 	.word	0x200042a8
   288e0:	000285b1 	.word	0x000285b1

000288e4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   288e4:	b580      	push	{r7, lr}
   288e6:	b084      	sub	sp, #16
   288e8:	af00      	add	r7, sp, #0
   288ea:	0002      	movs	r2, r0
   288ec:	1dfb      	adds	r3, r7, #7
   288ee:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   288f0:	2300      	movs	r3, #0
   288f2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   288f4:	1dfb      	adds	r3, r7, #7
   288f6:	781b      	ldrb	r3, [r3, #0]
   288f8:	2b08      	cmp	r3, #8
   288fa:	d821      	bhi.n	28940 <system_clock_source_is_ready+0x5c>
   288fc:	009a      	lsls	r2, r3, #2
   288fe:	4b18      	ldr	r3, [pc, #96]	; (28960 <system_clock_source_is_ready+0x7c>)
   28900:	18d3      	adds	r3, r2, r3
   28902:	681b      	ldr	r3, [r3, #0]
   28904:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   28906:	2308      	movs	r3, #8
   28908:	60fb      	str	r3, [r7, #12]
		break;
   2890a:	e01b      	b.n	28944 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2890c:	2304      	movs	r3, #4
   2890e:	60fb      	str	r3, [r7, #12]
		break;
   28910:	e018      	b.n	28944 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   28912:	2301      	movs	r3, #1
   28914:	60fb      	str	r3, [r7, #12]
		break;
   28916:	e015      	b.n	28944 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   28918:	2302      	movs	r3, #2
   2891a:	60fb      	str	r3, [r7, #12]
		break;
   2891c:	e012      	b.n	28944 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2891e:	2310      	movs	r3, #16
   28920:	60fb      	str	r3, [r7, #12]
		}
		break;
   28922:	e00f      	b.n	28944 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   28924:	4a0f      	ldr	r2, [pc, #60]	; (28964 <system_clock_source_is_ready+0x80>)
   28926:	2350      	movs	r3, #80	; 0x50
   28928:	5cd3      	ldrb	r3, [r2, r3]
   2892a:	b2db      	uxtb	r3, r3
   2892c:	001a      	movs	r2, r3
   2892e:	2303      	movs	r3, #3
   28930:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   28932:	3b03      	subs	r3, #3
   28934:	425a      	negs	r2, r3
   28936:	4153      	adcs	r3, r2
   28938:	b2db      	uxtb	r3, r3
   2893a:	e00c      	b.n	28956 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2893c:	2301      	movs	r3, #1
   2893e:	e00a      	b.n	28956 <system_clock_source_is_ready+0x72>

	default:
		return false;
   28940:	2300      	movs	r3, #0
   28942:	e008      	b.n	28956 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   28944:	4b07      	ldr	r3, [pc, #28]	; (28964 <system_clock_source_is_ready+0x80>)
   28946:	68db      	ldr	r3, [r3, #12]
   28948:	68fa      	ldr	r2, [r7, #12]
   2894a:	401a      	ands	r2, r3
   2894c:	68fb      	ldr	r3, [r7, #12]
   2894e:	1ad3      	subs	r3, r2, r3
   28950:	425a      	negs	r2, r3
   28952:	4153      	adcs	r3, r2
   28954:	b2db      	uxtb	r3, r3
}
   28956:	0018      	movs	r0, r3
   28958:	46bd      	mov	sp, r7
   2895a:	b004      	add	sp, #16
   2895c:	bd80      	pop	{r7, pc}
   2895e:	46c0      	nop			; (mov r8, r8)
   28960:	00038ff4 	.word	0x00038ff4
   28964:	40000800 	.word	0x40000800

00028968 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   28968:	b580      	push	{r7, lr}
   2896a:	b082      	sub	sp, #8
   2896c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2896e:	003b      	movs	r3, r7
   28970:	2203      	movs	r2, #3
   28972:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28974:	2300      	movs	r3, #0
   28976:	607b      	str	r3, [r7, #4]
   28978:	e009      	b.n	2898e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2897a:	687b      	ldr	r3, [r7, #4]
   2897c:	b2db      	uxtb	r3, r3
   2897e:	003a      	movs	r2, r7
   28980:	0011      	movs	r1, r2
   28982:	0018      	movs	r0, r3
   28984:	4b05      	ldr	r3, [pc, #20]	; (2899c <_switch_peripheral_gclk+0x34>)
   28986:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28988:	687b      	ldr	r3, [r7, #4]
   2898a:	3301      	adds	r3, #1
   2898c:	607b      	str	r3, [r7, #4]
   2898e:	687b      	ldr	r3, [r7, #4]
   28990:	2b24      	cmp	r3, #36	; 0x24
   28992:	d9f2      	bls.n	2897a <_switch_peripheral_gclk+0x12>
	}
}
   28994:	46c0      	nop			; (mov r8, r8)
   28996:	46bd      	mov	sp, r7
   28998:	b002      	add	sp, #8
   2899a:	bd80      	pop	{r7, pc}
   2899c:	00028f6d 	.word	0x00028f6d

000289a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   289a0:	b580      	push	{r7, lr}
   289a2:	b0a6      	sub	sp, #152	; 0x98
   289a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   289a6:	4b92      	ldr	r3, [pc, #584]	; (28bf0 <system_clock_init+0x250>)
   289a8:	22c2      	movs	r2, #194	; 0xc2
   289aa:	00d2      	lsls	r2, r2, #3
   289ac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   289ae:	2003      	movs	r0, #3
   289b0:	4b90      	ldr	r3, [pc, #576]	; (28bf4 <system_clock_init+0x254>)
   289b2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   289b4:	4b90      	ldr	r3, [pc, #576]	; (28bf8 <system_clock_init+0x258>)
   289b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   289b8:	2394      	movs	r3, #148	; 0x94
   289ba:	18fb      	adds	r3, r7, r3
   289bc:	0018      	movs	r0, r3
   289be:	4b8f      	ldr	r3, [pc, #572]	; (28bfc <system_clock_init+0x25c>)
   289c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   289c2:	2394      	movs	r3, #148	; 0x94
   289c4:	18fb      	adds	r3, r7, r3
   289c6:	2200      	movs	r2, #0
   289c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   289ca:	2394      	movs	r3, #148	; 0x94
   289cc:	18fb      	adds	r3, r7, r3
   289ce:	2201      	movs	r2, #1
   289d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   289d2:	2394      	movs	r3, #148	; 0x94
   289d4:	18fb      	adds	r3, r7, r3
   289d6:	2200      	movs	r2, #0
   289d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   289da:	2394      	movs	r3, #148	; 0x94
   289dc:	18fb      	adds	r3, r7, r3
   289de:	0018      	movs	r0, r3
   289e0:	4b87      	ldr	r3, [pc, #540]	; (28c00 <system_clock_init+0x260>)
   289e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   289e4:	2006      	movs	r0, #6
   289e6:	4b87      	ldr	r3, [pc, #540]	; (28c04 <system_clock_init+0x264>)
   289e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   289ea:	4b87      	ldr	r3, [pc, #540]	; (28c08 <system_clock_init+0x268>)
   289ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   289ee:	2360      	movs	r3, #96	; 0x60
   289f0:	18fb      	adds	r3, r7, r3
   289f2:	0018      	movs	r0, r3
   289f4:	4b85      	ldr	r3, [pc, #532]	; (28c0c <system_clock_init+0x26c>)
   289f6:	4798      	blx	r3
   289f8:	2360      	movs	r3, #96	; 0x60
   289fa:	18fb      	adds	r3, r7, r3
   289fc:	2206      	movs	r2, #6
   289fe:	701a      	strb	r2, [r3, #0]
   28a00:	2360      	movs	r3, #96	; 0x60
   28a02:	18fb      	adds	r3, r7, r3
   28a04:	2208      	movs	r2, #8
   28a06:	605a      	str	r2, [r3, #4]
   28a08:	2360      	movs	r3, #96	; 0x60
   28a0a:	18fb      	adds	r3, r7, r3
   28a0c:	2200      	movs	r2, #0
   28a0e:	721a      	strb	r2, [r3, #8]
   28a10:	2360      	movs	r3, #96	; 0x60
   28a12:	18fb      	adds	r3, r7, r3
   28a14:	2200      	movs	r2, #0
   28a16:	725a      	strb	r2, [r3, #9]
   28a18:	2360      	movs	r3, #96	; 0x60
   28a1a:	18fb      	adds	r3, r7, r3
   28a1c:	0019      	movs	r1, r3
   28a1e:	2001      	movs	r0, #1
   28a20:	4b7b      	ldr	r3, [pc, #492]	; (28c10 <system_clock_init+0x270>)
   28a22:	4798      	blx	r3
   28a24:	2001      	movs	r0, #1
   28a26:	4b7b      	ldr	r3, [pc, #492]	; (28c14 <system_clock_init+0x274>)
   28a28:	4798      	blx	r3
   28a2a:	2354      	movs	r3, #84	; 0x54
   28a2c:	18fb      	adds	r3, r7, r3
   28a2e:	0018      	movs	r0, r3
   28a30:	4b76      	ldr	r3, [pc, #472]	; (28c0c <system_clock_init+0x26c>)
   28a32:	4798      	blx	r3
   28a34:	2354      	movs	r3, #84	; 0x54
   28a36:	18fb      	adds	r3, r7, r3
   28a38:	2203      	movs	r2, #3
   28a3a:	701a      	strb	r2, [r3, #0]
   28a3c:	2354      	movs	r3, #84	; 0x54
   28a3e:	18fb      	adds	r3, r7, r3
   28a40:	2201      	movs	r2, #1
   28a42:	605a      	str	r2, [r3, #4]
   28a44:	2354      	movs	r3, #84	; 0x54
   28a46:	18fb      	adds	r3, r7, r3
   28a48:	2201      	movs	r2, #1
   28a4a:	721a      	strb	r2, [r3, #8]
   28a4c:	2354      	movs	r3, #84	; 0x54
   28a4e:	18fb      	adds	r3, r7, r3
   28a50:	2200      	movs	r2, #0
   28a52:	725a      	strb	r2, [r3, #9]
   28a54:	2354      	movs	r3, #84	; 0x54
   28a56:	18fb      	adds	r3, r7, r3
   28a58:	0019      	movs	r1, r3
   28a5a:	2002      	movs	r0, #2
   28a5c:	4b6c      	ldr	r3, [pc, #432]	; (28c10 <system_clock_init+0x270>)
   28a5e:	4798      	blx	r3
   28a60:	2002      	movs	r0, #2
   28a62:	4b6c      	ldr	r3, [pc, #432]	; (28c14 <system_clock_init+0x274>)
   28a64:	4798      	blx	r3
   28a66:	233c      	movs	r3, #60	; 0x3c
   28a68:	18fb      	adds	r3, r7, r3
   28a6a:	0018      	movs	r0, r3
   28a6c:	4b67      	ldr	r3, [pc, #412]	; (28c0c <system_clock_init+0x26c>)
   28a6e:	4798      	blx	r3
   28a70:	233c      	movs	r3, #60	; 0x3c
   28a72:	18fb      	adds	r3, r7, r3
   28a74:	2203      	movs	r2, #3
   28a76:	701a      	strb	r2, [r3, #0]
   28a78:	233c      	movs	r3, #60	; 0x3c
   28a7a:	18fb      	adds	r3, r7, r3
   28a7c:	2220      	movs	r2, #32
   28a7e:	605a      	str	r2, [r3, #4]
   28a80:	233c      	movs	r3, #60	; 0x3c
   28a82:	18fb      	adds	r3, r7, r3
   28a84:	2200      	movs	r2, #0
   28a86:	721a      	strb	r2, [r3, #8]
   28a88:	233c      	movs	r3, #60	; 0x3c
   28a8a:	18fb      	adds	r3, r7, r3
   28a8c:	2200      	movs	r2, #0
   28a8e:	725a      	strb	r2, [r3, #9]
   28a90:	233c      	movs	r3, #60	; 0x3c
   28a92:	18fb      	adds	r3, r7, r3
   28a94:	0019      	movs	r1, r3
   28a96:	2004      	movs	r0, #4
   28a98:	4b5d      	ldr	r3, [pc, #372]	; (28c10 <system_clock_init+0x270>)
   28a9a:	4798      	blx	r3
   28a9c:	2004      	movs	r0, #4
   28a9e:	4b5d      	ldr	r3, [pc, #372]	; (28c14 <system_clock_init+0x274>)
   28aa0:	4798      	blx	r3
   28aa2:	2330      	movs	r3, #48	; 0x30
   28aa4:	18fb      	adds	r3, r7, r3
   28aa6:	0018      	movs	r0, r3
   28aa8:	4b58      	ldr	r3, [pc, #352]	; (28c0c <system_clock_init+0x26c>)
   28aaa:	4798      	blx	r3
   28aac:	2330      	movs	r3, #48	; 0x30
   28aae:	18fb      	adds	r3, r7, r3
   28ab0:	2206      	movs	r2, #6
   28ab2:	701a      	strb	r2, [r3, #0]
   28ab4:	2330      	movs	r3, #48	; 0x30
   28ab6:	18fb      	adds	r3, r7, r3
   28ab8:	2201      	movs	r2, #1
   28aba:	605a      	str	r2, [r3, #4]
   28abc:	2330      	movs	r3, #48	; 0x30
   28abe:	18fb      	adds	r3, r7, r3
   28ac0:	2200      	movs	r2, #0
   28ac2:	721a      	strb	r2, [r3, #8]
   28ac4:	2330      	movs	r3, #48	; 0x30
   28ac6:	18fb      	adds	r3, r7, r3
   28ac8:	2200      	movs	r2, #0
   28aca:	725a      	strb	r2, [r3, #9]
   28acc:	2330      	movs	r3, #48	; 0x30
   28ace:	18fb      	adds	r3, r7, r3
   28ad0:	0019      	movs	r1, r3
   28ad2:	2005      	movs	r0, #5
   28ad4:	4b4e      	ldr	r3, [pc, #312]	; (28c10 <system_clock_init+0x270>)
   28ad6:	4798      	blx	r3
   28ad8:	2005      	movs	r0, #5
   28ada:	4b4e      	ldr	r3, [pc, #312]	; (28c14 <system_clock_init+0x274>)
   28adc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   28ade:	2390      	movs	r3, #144	; 0x90
   28ae0:	18fb      	adds	r3, r7, r3
   28ae2:	0018      	movs	r0, r3
   28ae4:	4b4c      	ldr	r3, [pc, #304]	; (28c18 <system_clock_init+0x278>)
   28ae6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   28ae8:	2390      	movs	r3, #144	; 0x90
   28aea:	18fb      	adds	r3, r7, r3
   28aec:	2201      	movs	r2, #1
   28aee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28af0:	2390      	movs	r3, #144	; 0x90
   28af2:	18fb      	adds	r3, r7, r3
   28af4:	0019      	movs	r1, r3
   28af6:	2001      	movs	r0, #1
   28af8:	4b48      	ldr	r3, [pc, #288]	; (28c1c <system_clock_init+0x27c>)
   28afa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   28afc:	2001      	movs	r0, #1
   28afe:	4b48      	ldr	r3, [pc, #288]	; (28c20 <system_clock_init+0x280>)
   28b00:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28b02:	2378      	movs	r3, #120	; 0x78
   28b04:	18fb      	adds	r3, r7, r3
   28b06:	0018      	movs	r0, r3
   28b08:	4b46      	ldr	r3, [pc, #280]	; (28c24 <system_clock_init+0x284>)
   28b0a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   28b0c:	2378      	movs	r3, #120	; 0x78
   28b0e:	18fb      	adds	r3, r7, r3
   28b10:	2200      	movs	r2, #0
   28b12:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28b14:	2378      	movs	r3, #120	; 0x78
   28b16:	18fb      	adds	r3, r7, r3
   28b18:	2200      	movs	r2, #0
   28b1a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   28b1c:	2378      	movs	r3, #120	; 0x78
   28b1e:	18fb      	adds	r3, r7, r3
   28b20:	2200      	movs	r2, #0
   28b22:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28b24:	2378      	movs	r3, #120	; 0x78
   28b26:	18fb      	adds	r3, r7, r3
   28b28:	2200      	movs	r2, #0
   28b2a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   28b2c:	2378      	movs	r3, #120	; 0x78
   28b2e:	18fb      	adds	r3, r7, r3
   28b30:	2200      	movs	r2, #0
   28b32:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28b34:	2378      	movs	r3, #120	; 0x78
   28b36:	18fb      	adds	r3, r7, r3
   28b38:	2200      	movs	r2, #0
   28b3a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   28b3c:	2378      	movs	r3, #120	; 0x78
   28b3e:	18fb      	adds	r3, r7, r3
   28b40:	2200      	movs	r2, #0
   28b42:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   28b44:	2378      	movs	r3, #120	; 0x78
   28b46:	18fb      	adds	r3, r7, r3
   28b48:	2202      	movs	r2, #2
   28b4a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   28b4c:	2378      	movs	r3, #120	; 0x78
   28b4e:	18fb      	adds	r3, r7, r3
   28b50:	4a35      	ldr	r2, [pc, #212]	; (28c28 <system_clock_init+0x288>)
   28b52:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   28b54:	2378      	movs	r3, #120	; 0x78
   28b56:	18fb      	adds	r3, r7, r3
   28b58:	2201      	movs	r2, #1
   28b5a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   28b5c:	2378      	movs	r3, #120	; 0x78
   28b5e:	18fb      	adds	r3, r7, r3
   28b60:	4a32      	ldr	r2, [pc, #200]	; (28c2c <system_clock_init+0x28c>)
   28b62:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   28b64:	2378      	movs	r3, #120	; 0x78
   28b66:	18fb      	adds	r3, r7, r3
   28b68:	0018      	movs	r0, r3
   28b6a:	4b31      	ldr	r3, [pc, #196]	; (28c30 <system_clock_init+0x290>)
   28b6c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   28b6e:	2008      	movs	r0, #8
   28b70:	4b24      	ldr	r3, [pc, #144]	; (28c04 <system_clock_init+0x264>)
   28b72:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   28b74:	46c0      	nop			; (mov r8, r8)
   28b76:	2008      	movs	r0, #8
   28b78:	4b2e      	ldr	r3, [pc, #184]	; (28c34 <system_clock_init+0x294>)
   28b7a:	4798      	blx	r3
   28b7c:	0003      	movs	r3, r0
   28b7e:	001a      	movs	r2, r3
   28b80:	2301      	movs	r3, #1
   28b82:	4053      	eors	r3, r2
   28b84:	b2db      	uxtb	r3, r3
   28b86:	2b00      	cmp	r3, #0
   28b88:	d1f5      	bne.n	28b76 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   28b8a:	4919      	ldr	r1, [pc, #100]	; (28bf0 <system_clock_init+0x250>)
   28b8c:	2244      	movs	r2, #68	; 0x44
   28b8e:	5c8b      	ldrb	r3, [r1, r2]
   28b90:	2080      	movs	r0, #128	; 0x80
   28b92:	4240      	negs	r0, r0
   28b94:	4303      	orrs	r3, r0
   28b96:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   28b98:	2000      	movs	r0, #0
   28b9a:	4b27      	ldr	r3, [pc, #156]	; (28c38 <system_clock_init+0x298>)
   28b9c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   28b9e:	2100      	movs	r1, #0
   28ba0:	2000      	movs	r0, #0
   28ba2:	4b26      	ldr	r3, [pc, #152]	; (28c3c <system_clock_init+0x29c>)
   28ba4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   28ba6:	2100      	movs	r1, #0
   28ba8:	2001      	movs	r0, #1
   28baa:	4b24      	ldr	r3, [pc, #144]	; (28c3c <system_clock_init+0x29c>)
   28bac:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   28bae:	2100      	movs	r1, #0
   28bb0:	2002      	movs	r0, #2
   28bb2:	4b22      	ldr	r3, [pc, #136]	; (28c3c <system_clock_init+0x29c>)
   28bb4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   28bb6:	003b      	movs	r3, r7
   28bb8:	0018      	movs	r0, r3
   28bba:	4b14      	ldr	r3, [pc, #80]	; (28c0c <system_clock_init+0x26c>)
   28bbc:	4798      	blx	r3
   28bbe:	003b      	movs	r3, r7
   28bc0:	2208      	movs	r2, #8
   28bc2:	701a      	strb	r2, [r3, #0]
   28bc4:	003b      	movs	r3, r7
   28bc6:	2201      	movs	r2, #1
   28bc8:	605a      	str	r2, [r3, #4]
   28bca:	003b      	movs	r3, r7
   28bcc:	2200      	movs	r2, #0
   28bce:	721a      	strb	r2, [r3, #8]
   28bd0:	003b      	movs	r3, r7
   28bd2:	2201      	movs	r2, #1
   28bd4:	725a      	strb	r2, [r3, #9]
   28bd6:	003b      	movs	r3, r7
   28bd8:	0019      	movs	r1, r3
   28bda:	2000      	movs	r0, #0
   28bdc:	4b0c      	ldr	r3, [pc, #48]	; (28c10 <system_clock_init+0x270>)
   28bde:	4798      	blx	r3
   28be0:	2000      	movs	r0, #0
   28be2:	4b0c      	ldr	r3, [pc, #48]	; (28c14 <system_clock_init+0x274>)
   28be4:	4798      	blx	r3
#endif
}
   28be6:	46c0      	nop			; (mov r8, r8)
   28be8:	46bd      	mov	sp, r7
   28bea:	b026      	add	sp, #152	; 0x98
   28bec:	bd80      	pop	{r7, pc}
   28bee:	46c0      	nop			; (mov r8, r8)
   28bf0:	40000800 	.word	0x40000800
   28bf4:	00028561 	.word	0x00028561
   28bf8:	00028969 	.word	0x00028969
   28bfc:	00028471 	.word	0x00028471
   28c00:	000286b5 	.word	0x000286b5
   28c04:	00028839 	.word	0x00028839
   28c08:	00028ce5 	.word	0x00028ce5
   28c0c:	0002842d 	.word	0x0002842d
   28c10:	00028d15 	.word	0x00028d15
   28c14:	00028e39 	.word	0x00028e39
   28c18:	0002845b 	.word	0x0002845b
   28c1c:	00028f6d 	.word	0x00028f6d
   28c20:	00028fb1 	.word	0x00028fb1
   28c24:	00028509 	.word	0x00028509
   28c28:	000f4240 	.word	0x000f4240
   28c2c:	02dc6c00 	.word	0x02dc6c00
   28c30:	0002872d 	.word	0x0002872d
   28c34:	000288e5 	.word	0x000288e5
   28c38:	00028495 	.word	0x00028495
   28c3c:	000284b5 	.word	0x000284b5

00028c40 <system_apb_clock_set_mask>:
{
   28c40:	b580      	push	{r7, lr}
   28c42:	b082      	sub	sp, #8
   28c44:	af00      	add	r7, sp, #0
   28c46:	0002      	movs	r2, r0
   28c48:	6039      	str	r1, [r7, #0]
   28c4a:	1dfb      	adds	r3, r7, #7
   28c4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28c4e:	1dfb      	adds	r3, r7, #7
   28c50:	781b      	ldrb	r3, [r3, #0]
   28c52:	2b01      	cmp	r3, #1
   28c54:	d00a      	beq.n	28c6c <system_apb_clock_set_mask+0x2c>
   28c56:	2b02      	cmp	r3, #2
   28c58:	d00f      	beq.n	28c7a <system_apb_clock_set_mask+0x3a>
   28c5a:	2b00      	cmp	r3, #0
   28c5c:	d114      	bne.n	28c88 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28c5e:	4b0e      	ldr	r3, [pc, #56]	; (28c98 <system_apb_clock_set_mask+0x58>)
   28c60:	4a0d      	ldr	r2, [pc, #52]	; (28c98 <system_apb_clock_set_mask+0x58>)
   28c62:	6991      	ldr	r1, [r2, #24]
   28c64:	683a      	ldr	r2, [r7, #0]
   28c66:	430a      	orrs	r2, r1
   28c68:	619a      	str	r2, [r3, #24]
			break;
   28c6a:	e00f      	b.n	28c8c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28c6c:	4b0a      	ldr	r3, [pc, #40]	; (28c98 <system_apb_clock_set_mask+0x58>)
   28c6e:	4a0a      	ldr	r2, [pc, #40]	; (28c98 <system_apb_clock_set_mask+0x58>)
   28c70:	69d1      	ldr	r1, [r2, #28]
   28c72:	683a      	ldr	r2, [r7, #0]
   28c74:	430a      	orrs	r2, r1
   28c76:	61da      	str	r2, [r3, #28]
			break;
   28c78:	e008      	b.n	28c8c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28c7a:	4b07      	ldr	r3, [pc, #28]	; (28c98 <system_apb_clock_set_mask+0x58>)
   28c7c:	4a06      	ldr	r2, [pc, #24]	; (28c98 <system_apb_clock_set_mask+0x58>)
   28c7e:	6a11      	ldr	r1, [r2, #32]
   28c80:	683a      	ldr	r2, [r7, #0]
   28c82:	430a      	orrs	r2, r1
   28c84:	621a      	str	r2, [r3, #32]
			break;
   28c86:	e001      	b.n	28c8c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28c88:	2317      	movs	r3, #23
   28c8a:	e000      	b.n	28c8e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28c8c:	2300      	movs	r3, #0
}
   28c8e:	0018      	movs	r0, r3
   28c90:	46bd      	mov	sp, r7
   28c92:	b002      	add	sp, #8
   28c94:	bd80      	pop	{r7, pc}
   28c96:	46c0      	nop			; (mov r8, r8)
   28c98:	40000400 	.word	0x40000400

00028c9c <system_interrupt_enter_critical_section>:
{
   28c9c:	b580      	push	{r7, lr}
   28c9e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28ca0:	4b02      	ldr	r3, [pc, #8]	; (28cac <system_interrupt_enter_critical_section+0x10>)
   28ca2:	4798      	blx	r3
}
   28ca4:	46c0      	nop			; (mov r8, r8)
   28ca6:	46bd      	mov	sp, r7
   28ca8:	bd80      	pop	{r7, pc}
   28caa:	46c0      	nop			; (mov r8, r8)
   28cac:	000252d9 	.word	0x000252d9

00028cb0 <system_interrupt_leave_critical_section>:
{
   28cb0:	b580      	push	{r7, lr}
   28cb2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28cb4:	4b02      	ldr	r3, [pc, #8]	; (28cc0 <system_interrupt_leave_critical_section+0x10>)
   28cb6:	4798      	blx	r3
}
   28cb8:	46c0      	nop			; (mov r8, r8)
   28cba:	46bd      	mov	sp, r7
   28cbc:	bd80      	pop	{r7, pc}
   28cbe:	46c0      	nop			; (mov r8, r8)
   28cc0:	0002532d 	.word	0x0002532d

00028cc4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   28cc4:	b580      	push	{r7, lr}
   28cc6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   28cc8:	4b05      	ldr	r3, [pc, #20]	; (28ce0 <system_gclk_is_syncing+0x1c>)
   28cca:	785b      	ldrb	r3, [r3, #1]
   28ccc:	b2db      	uxtb	r3, r3
   28cce:	b25b      	sxtb	r3, r3
   28cd0:	2b00      	cmp	r3, #0
   28cd2:	da01      	bge.n	28cd8 <system_gclk_is_syncing+0x14>
		return true;
   28cd4:	2301      	movs	r3, #1
   28cd6:	e000      	b.n	28cda <system_gclk_is_syncing+0x16>
	}

	return false;
   28cd8:	2300      	movs	r3, #0
}
   28cda:	0018      	movs	r0, r3
   28cdc:	46bd      	mov	sp, r7
   28cde:	bd80      	pop	{r7, pc}
   28ce0:	40000c00 	.word	0x40000c00

00028ce4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   28ce4:	b580      	push	{r7, lr}
   28ce6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   28ce8:	2108      	movs	r1, #8
   28cea:	2000      	movs	r0, #0
   28cec:	4b07      	ldr	r3, [pc, #28]	; (28d0c <system_gclk_init+0x28>)
   28cee:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28cf0:	4b07      	ldr	r3, [pc, #28]	; (28d10 <system_gclk_init+0x2c>)
   28cf2:	2201      	movs	r2, #1
   28cf4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   28cf6:	46c0      	nop			; (mov r8, r8)
   28cf8:	4b05      	ldr	r3, [pc, #20]	; (28d10 <system_gclk_init+0x2c>)
   28cfa:	781b      	ldrb	r3, [r3, #0]
   28cfc:	b2db      	uxtb	r3, r3
   28cfe:	001a      	movs	r2, r3
   28d00:	2301      	movs	r3, #1
   28d02:	4013      	ands	r3, r2
   28d04:	d1f8      	bne.n	28cf8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   28d06:	46c0      	nop			; (mov r8, r8)
   28d08:	46bd      	mov	sp, r7
   28d0a:	bd80      	pop	{r7, pc}
   28d0c:	00028c41 	.word	0x00028c41
   28d10:	40000c00 	.word	0x40000c00

00028d14 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   28d14:	b580      	push	{r7, lr}
   28d16:	b086      	sub	sp, #24
   28d18:	af00      	add	r7, sp, #0
   28d1a:	0002      	movs	r2, r0
   28d1c:	6039      	str	r1, [r7, #0]
   28d1e:	1dfb      	adds	r3, r7, #7
   28d20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   28d22:	1dfb      	adds	r3, r7, #7
   28d24:	781b      	ldrb	r3, [r3, #0]
   28d26:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   28d28:	1dfb      	adds	r3, r7, #7
   28d2a:	781b      	ldrb	r3, [r3, #0]
   28d2c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   28d2e:	683b      	ldr	r3, [r7, #0]
   28d30:	781b      	ldrb	r3, [r3, #0]
   28d32:	021b      	lsls	r3, r3, #8
   28d34:	001a      	movs	r2, r3
   28d36:	697b      	ldr	r3, [r7, #20]
   28d38:	4313      	orrs	r3, r2
   28d3a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   28d3c:	683b      	ldr	r3, [r7, #0]
   28d3e:	785b      	ldrb	r3, [r3, #1]
   28d40:	2b00      	cmp	r3, #0
   28d42:	d004      	beq.n	28d4e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   28d44:	697b      	ldr	r3, [r7, #20]
   28d46:	2280      	movs	r2, #128	; 0x80
   28d48:	02d2      	lsls	r2, r2, #11
   28d4a:	4313      	orrs	r3, r2
   28d4c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   28d4e:	683b      	ldr	r3, [r7, #0]
   28d50:	7a5b      	ldrb	r3, [r3, #9]
   28d52:	2b00      	cmp	r3, #0
   28d54:	d004      	beq.n	28d60 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   28d56:	697b      	ldr	r3, [r7, #20]
   28d58:	2280      	movs	r2, #128	; 0x80
   28d5a:	0312      	lsls	r2, r2, #12
   28d5c:	4313      	orrs	r3, r2
   28d5e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   28d60:	683b      	ldr	r3, [r7, #0]
   28d62:	685b      	ldr	r3, [r3, #4]
   28d64:	2b01      	cmp	r3, #1
   28d66:	d92c      	bls.n	28dc2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   28d68:	683b      	ldr	r3, [r7, #0]
   28d6a:	685a      	ldr	r2, [r3, #4]
   28d6c:	683b      	ldr	r3, [r7, #0]
   28d6e:	685b      	ldr	r3, [r3, #4]
   28d70:	3b01      	subs	r3, #1
   28d72:	4013      	ands	r3, r2
   28d74:	d11a      	bne.n	28dac <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   28d76:	2300      	movs	r3, #0
   28d78:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   28d7a:	2302      	movs	r3, #2
   28d7c:	60bb      	str	r3, [r7, #8]
   28d7e:	e005      	b.n	28d8c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   28d80:	68fb      	ldr	r3, [r7, #12]
   28d82:	3301      	adds	r3, #1
   28d84:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   28d86:	68bb      	ldr	r3, [r7, #8]
   28d88:	005b      	lsls	r3, r3, #1
   28d8a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   28d8c:	683b      	ldr	r3, [r7, #0]
   28d8e:	685a      	ldr	r2, [r3, #4]
   28d90:	68bb      	ldr	r3, [r7, #8]
   28d92:	429a      	cmp	r2, r3
   28d94:	d8f4      	bhi.n	28d80 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   28d96:	68fb      	ldr	r3, [r7, #12]
   28d98:	021b      	lsls	r3, r3, #8
   28d9a:	693a      	ldr	r2, [r7, #16]
   28d9c:	4313      	orrs	r3, r2
   28d9e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   28da0:	697b      	ldr	r3, [r7, #20]
   28da2:	2280      	movs	r2, #128	; 0x80
   28da4:	0352      	lsls	r2, r2, #13
   28da6:	4313      	orrs	r3, r2
   28da8:	617b      	str	r3, [r7, #20]
   28daa:	e00a      	b.n	28dc2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   28dac:	683b      	ldr	r3, [r7, #0]
   28dae:	685b      	ldr	r3, [r3, #4]
   28db0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   28db2:	693a      	ldr	r2, [r7, #16]
   28db4:	4313      	orrs	r3, r2
   28db6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   28db8:	697b      	ldr	r3, [r7, #20]
   28dba:	2280      	movs	r2, #128	; 0x80
   28dbc:	0292      	lsls	r2, r2, #10
   28dbe:	4313      	orrs	r3, r2
   28dc0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   28dc2:	683b      	ldr	r3, [r7, #0]
   28dc4:	7a1b      	ldrb	r3, [r3, #8]
   28dc6:	2b00      	cmp	r3, #0
   28dc8:	d004      	beq.n	28dd4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   28dca:	697b      	ldr	r3, [r7, #20]
   28dcc:	2280      	movs	r2, #128	; 0x80
   28dce:	0392      	lsls	r2, r2, #14
   28dd0:	4313      	orrs	r3, r2
   28dd2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   28dd4:	46c0      	nop			; (mov r8, r8)
   28dd6:	4b13      	ldr	r3, [pc, #76]	; (28e24 <system_gclk_gen_set_config+0x110>)
   28dd8:	4798      	blx	r3
   28dda:	1e03      	subs	r3, r0, #0
   28ddc:	d1fb      	bne.n	28dd6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28dde:	4b12      	ldr	r3, [pc, #72]	; (28e28 <system_gclk_gen_set_config+0x114>)
   28de0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28de2:	4a12      	ldr	r2, [pc, #72]	; (28e2c <system_gclk_gen_set_config+0x118>)
   28de4:	1dfb      	adds	r3, r7, #7
   28de6:	781b      	ldrb	r3, [r3, #0]
   28de8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   28dea:	46c0      	nop			; (mov r8, r8)
   28dec:	4b0d      	ldr	r3, [pc, #52]	; (28e24 <system_gclk_gen_set_config+0x110>)
   28dee:	4798      	blx	r3
   28df0:	1e03      	subs	r3, r0, #0
   28df2:	d1fb      	bne.n	28dec <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   28df4:	4b0e      	ldr	r3, [pc, #56]	; (28e30 <system_gclk_gen_set_config+0x11c>)
   28df6:	693a      	ldr	r2, [r7, #16]
   28df8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   28dfa:	46c0      	nop			; (mov r8, r8)
   28dfc:	4b09      	ldr	r3, [pc, #36]	; (28e24 <system_gclk_gen_set_config+0x110>)
   28dfe:	4798      	blx	r3
   28e00:	1e03      	subs	r3, r0, #0
   28e02:	d1fb      	bne.n	28dfc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   28e04:	4b0a      	ldr	r3, [pc, #40]	; (28e30 <system_gclk_gen_set_config+0x11c>)
   28e06:	4a0a      	ldr	r2, [pc, #40]	; (28e30 <system_gclk_gen_set_config+0x11c>)
   28e08:	6851      	ldr	r1, [r2, #4]
   28e0a:	2280      	movs	r2, #128	; 0x80
   28e0c:	0252      	lsls	r2, r2, #9
   28e0e:	4011      	ands	r1, r2
   28e10:	697a      	ldr	r2, [r7, #20]
   28e12:	430a      	orrs	r2, r1
   28e14:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28e16:	4b07      	ldr	r3, [pc, #28]	; (28e34 <system_gclk_gen_set_config+0x120>)
   28e18:	4798      	blx	r3
}
   28e1a:	46c0      	nop			; (mov r8, r8)
   28e1c:	46bd      	mov	sp, r7
   28e1e:	b006      	add	sp, #24
   28e20:	bd80      	pop	{r7, pc}
   28e22:	46c0      	nop			; (mov r8, r8)
   28e24:	00028cc5 	.word	0x00028cc5
   28e28:	00028c9d 	.word	0x00028c9d
   28e2c:	40000c08 	.word	0x40000c08
   28e30:	40000c00 	.word	0x40000c00
   28e34:	00028cb1 	.word	0x00028cb1

00028e38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   28e38:	b580      	push	{r7, lr}
   28e3a:	b082      	sub	sp, #8
   28e3c:	af00      	add	r7, sp, #0
   28e3e:	0002      	movs	r2, r0
   28e40:	1dfb      	adds	r3, r7, #7
   28e42:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28e44:	46c0      	nop			; (mov r8, r8)
   28e46:	4b0e      	ldr	r3, [pc, #56]	; (28e80 <system_gclk_gen_enable+0x48>)
   28e48:	4798      	blx	r3
   28e4a:	1e03      	subs	r3, r0, #0
   28e4c:	d1fb      	bne.n	28e46 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28e4e:	4b0d      	ldr	r3, [pc, #52]	; (28e84 <system_gclk_gen_enable+0x4c>)
   28e50:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28e52:	4a0d      	ldr	r2, [pc, #52]	; (28e88 <system_gclk_gen_enable+0x50>)
   28e54:	1dfb      	adds	r3, r7, #7
   28e56:	781b      	ldrb	r3, [r3, #0]
   28e58:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28e5a:	46c0      	nop			; (mov r8, r8)
   28e5c:	4b08      	ldr	r3, [pc, #32]	; (28e80 <system_gclk_gen_enable+0x48>)
   28e5e:	4798      	blx	r3
   28e60:	1e03      	subs	r3, r0, #0
   28e62:	d1fb      	bne.n	28e5c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   28e64:	4b09      	ldr	r3, [pc, #36]	; (28e8c <system_gclk_gen_enable+0x54>)
   28e66:	4a09      	ldr	r2, [pc, #36]	; (28e8c <system_gclk_gen_enable+0x54>)
   28e68:	6852      	ldr	r2, [r2, #4]
   28e6a:	2180      	movs	r1, #128	; 0x80
   28e6c:	0249      	lsls	r1, r1, #9
   28e6e:	430a      	orrs	r2, r1
   28e70:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28e72:	4b07      	ldr	r3, [pc, #28]	; (28e90 <system_gclk_gen_enable+0x58>)
   28e74:	4798      	blx	r3
}
   28e76:	46c0      	nop			; (mov r8, r8)
   28e78:	46bd      	mov	sp, r7
   28e7a:	b002      	add	sp, #8
   28e7c:	bd80      	pop	{r7, pc}
   28e7e:	46c0      	nop			; (mov r8, r8)
   28e80:	00028cc5 	.word	0x00028cc5
   28e84:	00028c9d 	.word	0x00028c9d
   28e88:	40000c04 	.word	0x40000c04
   28e8c:	40000c00 	.word	0x40000c00
   28e90:	00028cb1 	.word	0x00028cb1

00028e94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   28e94:	b580      	push	{r7, lr}
   28e96:	b086      	sub	sp, #24
   28e98:	af00      	add	r7, sp, #0
   28e9a:	0002      	movs	r2, r0
   28e9c:	1dfb      	adds	r3, r7, #7
   28e9e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28ea0:	46c0      	nop			; (mov r8, r8)
   28ea2:	4b2a      	ldr	r3, [pc, #168]	; (28f4c <system_gclk_gen_get_hz+0xb8>)
   28ea4:	4798      	blx	r3
   28ea6:	1e03      	subs	r3, r0, #0
   28ea8:	d1fb      	bne.n	28ea2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   28eaa:	4b29      	ldr	r3, [pc, #164]	; (28f50 <system_gclk_gen_get_hz+0xbc>)
   28eac:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28eae:	4a29      	ldr	r2, [pc, #164]	; (28f54 <system_gclk_gen_get_hz+0xc0>)
   28eb0:	1dfb      	adds	r3, r7, #7
   28eb2:	781b      	ldrb	r3, [r3, #0]
   28eb4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28eb6:	46c0      	nop			; (mov r8, r8)
   28eb8:	4b24      	ldr	r3, [pc, #144]	; (28f4c <system_gclk_gen_get_hz+0xb8>)
   28eba:	4798      	blx	r3
   28ebc:	1e03      	subs	r3, r0, #0
   28ebe:	d1fb      	bne.n	28eb8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   28ec0:	4b25      	ldr	r3, [pc, #148]	; (28f58 <system_gclk_gen_get_hz+0xc4>)
   28ec2:	685b      	ldr	r3, [r3, #4]
   28ec4:	04db      	lsls	r3, r3, #19
   28ec6:	0edb      	lsrs	r3, r3, #27
   28ec8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   28eca:	0018      	movs	r0, r3
   28ecc:	4b23      	ldr	r3, [pc, #140]	; (28f5c <system_gclk_gen_get_hz+0xc8>)
   28ece:	4798      	blx	r3
   28ed0:	0003      	movs	r3, r0
   28ed2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28ed4:	4a1f      	ldr	r2, [pc, #124]	; (28f54 <system_gclk_gen_get_hz+0xc0>)
   28ed6:	1dfb      	adds	r3, r7, #7
   28ed8:	781b      	ldrb	r3, [r3, #0]
   28eda:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   28edc:	4b1e      	ldr	r3, [pc, #120]	; (28f58 <system_gclk_gen_get_hz+0xc4>)
   28ede:	685b      	ldr	r3, [r3, #4]
   28ee0:	02db      	lsls	r3, r3, #11
   28ee2:	0fdb      	lsrs	r3, r3, #31
   28ee4:	b2da      	uxtb	r2, r3
   28ee6:	2313      	movs	r3, #19
   28ee8:	18fb      	adds	r3, r7, r3
   28eea:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28eec:	4a1c      	ldr	r2, [pc, #112]	; (28f60 <system_gclk_gen_get_hz+0xcc>)
   28eee:	1dfb      	adds	r3, r7, #7
   28ef0:	781b      	ldrb	r3, [r3, #0]
   28ef2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28ef4:	46c0      	nop			; (mov r8, r8)
   28ef6:	4b15      	ldr	r3, [pc, #84]	; (28f4c <system_gclk_gen_get_hz+0xb8>)
   28ef8:	4798      	blx	r3
   28efa:	1e03      	subs	r3, r0, #0
   28efc:	d1fb      	bne.n	28ef6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   28efe:	4b16      	ldr	r3, [pc, #88]	; (28f58 <system_gclk_gen_get_hz+0xc4>)
   28f00:	689b      	ldr	r3, [r3, #8]
   28f02:	021b      	lsls	r3, r3, #8
   28f04:	0c1b      	lsrs	r3, r3, #16
   28f06:	b29b      	uxth	r3, r3
   28f08:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   28f0a:	4b16      	ldr	r3, [pc, #88]	; (28f64 <system_gclk_gen_get_hz+0xd0>)
   28f0c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   28f0e:	2313      	movs	r3, #19
   28f10:	18fb      	adds	r3, r7, r3
   28f12:	781b      	ldrb	r3, [r3, #0]
   28f14:	2b00      	cmp	r3, #0
   28f16:	d109      	bne.n	28f2c <system_gclk_gen_get_hz+0x98>
   28f18:	68fb      	ldr	r3, [r7, #12]
   28f1a:	2b01      	cmp	r3, #1
   28f1c:	d906      	bls.n	28f2c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   28f1e:	4b12      	ldr	r3, [pc, #72]	; (28f68 <system_gclk_gen_get_hz+0xd4>)
   28f20:	68f9      	ldr	r1, [r7, #12]
   28f22:	6978      	ldr	r0, [r7, #20]
   28f24:	4798      	blx	r3
   28f26:	0003      	movs	r3, r0
   28f28:	617b      	str	r3, [r7, #20]
   28f2a:	e00a      	b.n	28f42 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   28f2c:	2313      	movs	r3, #19
   28f2e:	18fb      	adds	r3, r7, r3
   28f30:	781b      	ldrb	r3, [r3, #0]
   28f32:	2b00      	cmp	r3, #0
   28f34:	d005      	beq.n	28f42 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   28f36:	68fb      	ldr	r3, [r7, #12]
   28f38:	3301      	adds	r3, #1
   28f3a:	697a      	ldr	r2, [r7, #20]
   28f3c:	40da      	lsrs	r2, r3
   28f3e:	0013      	movs	r3, r2
   28f40:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   28f42:	697b      	ldr	r3, [r7, #20]
}
   28f44:	0018      	movs	r0, r3
   28f46:	46bd      	mov	sp, r7
   28f48:	b006      	add	sp, #24
   28f4a:	bd80      	pop	{r7, pc}
   28f4c:	00028cc5 	.word	0x00028cc5
   28f50:	00028c9d 	.word	0x00028c9d
   28f54:	40000c04 	.word	0x40000c04
   28f58:	40000c00 	.word	0x40000c00
   28f5c:	000285f5 	.word	0x000285f5
   28f60:	40000c08 	.word	0x40000c08
   28f64:	00028cb1 	.word	0x00028cb1
   28f68:	00031b55 	.word	0x00031b55

00028f6c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   28f6c:	b580      	push	{r7, lr}
   28f6e:	b084      	sub	sp, #16
   28f70:	af00      	add	r7, sp, #0
   28f72:	0002      	movs	r2, r0
   28f74:	6039      	str	r1, [r7, #0]
   28f76:	1dfb      	adds	r3, r7, #7
   28f78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   28f7a:	1dfb      	adds	r3, r7, #7
   28f7c:	781b      	ldrb	r3, [r3, #0]
   28f7e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   28f80:	683b      	ldr	r3, [r7, #0]
   28f82:	781b      	ldrb	r3, [r3, #0]
   28f84:	021b      	lsls	r3, r3, #8
   28f86:	001a      	movs	r2, r3
   28f88:	68fb      	ldr	r3, [r7, #12]
   28f8a:	4313      	orrs	r3, r2
   28f8c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   28f8e:	1dfb      	adds	r3, r7, #7
   28f90:	781b      	ldrb	r3, [r3, #0]
   28f92:	0018      	movs	r0, r3
   28f94:	4b04      	ldr	r3, [pc, #16]	; (28fa8 <system_gclk_chan_set_config+0x3c>)
   28f96:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   28f98:	4b04      	ldr	r3, [pc, #16]	; (28fac <system_gclk_chan_set_config+0x40>)
   28f9a:	68fa      	ldr	r2, [r7, #12]
   28f9c:	b292      	uxth	r2, r2
   28f9e:	805a      	strh	r2, [r3, #2]
}
   28fa0:	46c0      	nop			; (mov r8, r8)
   28fa2:	46bd      	mov	sp, r7
   28fa4:	b004      	add	sp, #16
   28fa6:	bd80      	pop	{r7, pc}
   28fa8:	00028ff9 	.word	0x00028ff9
   28fac:	40000c00 	.word	0x40000c00

00028fb0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   28fb0:	b580      	push	{r7, lr}
   28fb2:	b082      	sub	sp, #8
   28fb4:	af00      	add	r7, sp, #0
   28fb6:	0002      	movs	r2, r0
   28fb8:	1dfb      	adds	r3, r7, #7
   28fba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28fbc:	4b0a      	ldr	r3, [pc, #40]	; (28fe8 <system_gclk_chan_enable+0x38>)
   28fbe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28fc0:	4a0a      	ldr	r2, [pc, #40]	; (28fec <system_gclk_chan_enable+0x3c>)
   28fc2:	1dfb      	adds	r3, r7, #7
   28fc4:	781b      	ldrb	r3, [r3, #0]
   28fc6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   28fc8:	4909      	ldr	r1, [pc, #36]	; (28ff0 <system_gclk_chan_enable+0x40>)
   28fca:	4b09      	ldr	r3, [pc, #36]	; (28ff0 <system_gclk_chan_enable+0x40>)
   28fcc:	885b      	ldrh	r3, [r3, #2]
   28fce:	b29b      	uxth	r3, r3
   28fd0:	2280      	movs	r2, #128	; 0x80
   28fd2:	01d2      	lsls	r2, r2, #7
   28fd4:	4313      	orrs	r3, r2
   28fd6:	b29b      	uxth	r3, r3
   28fd8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   28fda:	4b06      	ldr	r3, [pc, #24]	; (28ff4 <system_gclk_chan_enable+0x44>)
   28fdc:	4798      	blx	r3
}
   28fde:	46c0      	nop			; (mov r8, r8)
   28fe0:	46bd      	mov	sp, r7
   28fe2:	b002      	add	sp, #8
   28fe4:	bd80      	pop	{r7, pc}
   28fe6:	46c0      	nop			; (mov r8, r8)
   28fe8:	00028c9d 	.word	0x00028c9d
   28fec:	40000c02 	.word	0x40000c02
   28ff0:	40000c00 	.word	0x40000c00
   28ff4:	00028cb1 	.word	0x00028cb1

00028ff8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   28ff8:	b580      	push	{r7, lr}
   28ffa:	b084      	sub	sp, #16
   28ffc:	af00      	add	r7, sp, #0
   28ffe:	0002      	movs	r2, r0
   29000:	1dfb      	adds	r3, r7, #7
   29002:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29004:	4b1c      	ldr	r3, [pc, #112]	; (29078 <system_gclk_chan_disable+0x80>)
   29006:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29008:	4a1c      	ldr	r2, [pc, #112]	; (2907c <system_gclk_chan_disable+0x84>)
   2900a:	1dfb      	adds	r3, r7, #7
   2900c:	781b      	ldrb	r3, [r3, #0]
   2900e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29010:	4b1b      	ldr	r3, [pc, #108]	; (29080 <system_gclk_chan_disable+0x88>)
   29012:	885b      	ldrh	r3, [r3, #2]
   29014:	051b      	lsls	r3, r3, #20
   29016:	0f1b      	lsrs	r3, r3, #28
   29018:	b2db      	uxtb	r3, r3
   2901a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2901c:	4a18      	ldr	r2, [pc, #96]	; (29080 <system_gclk_chan_disable+0x88>)
   2901e:	8853      	ldrh	r3, [r2, #2]
   29020:	4918      	ldr	r1, [pc, #96]	; (29084 <system_gclk_chan_disable+0x8c>)
   29022:	400b      	ands	r3, r1
   29024:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29026:	4a16      	ldr	r2, [pc, #88]	; (29080 <system_gclk_chan_disable+0x88>)
   29028:	4b15      	ldr	r3, [pc, #84]	; (29080 <system_gclk_chan_disable+0x88>)
   2902a:	885b      	ldrh	r3, [r3, #2]
   2902c:	b29b      	uxth	r3, r3
   2902e:	4916      	ldr	r1, [pc, #88]	; (29088 <system_gclk_chan_disable+0x90>)
   29030:	400b      	ands	r3, r1
   29032:	b29b      	uxth	r3, r3
   29034:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29036:	46c0      	nop			; (mov r8, r8)
   29038:	4b11      	ldr	r3, [pc, #68]	; (29080 <system_gclk_chan_disable+0x88>)
   2903a:	885b      	ldrh	r3, [r3, #2]
   2903c:	b29b      	uxth	r3, r3
   2903e:	001a      	movs	r2, r3
   29040:	2380      	movs	r3, #128	; 0x80
   29042:	01db      	lsls	r3, r3, #7
   29044:	4013      	ands	r3, r2
   29046:	d1f7      	bne.n	29038 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29048:	4a0d      	ldr	r2, [pc, #52]	; (29080 <system_gclk_chan_disable+0x88>)
   2904a:	68fb      	ldr	r3, [r7, #12]
   2904c:	b2db      	uxtb	r3, r3
   2904e:	1c19      	adds	r1, r3, #0
   29050:	230f      	movs	r3, #15
   29052:	400b      	ands	r3, r1
   29054:	b2d9      	uxtb	r1, r3
   29056:	8853      	ldrh	r3, [r2, #2]
   29058:	1c08      	adds	r0, r1, #0
   2905a:	210f      	movs	r1, #15
   2905c:	4001      	ands	r1, r0
   2905e:	0208      	lsls	r0, r1, #8
   29060:	4908      	ldr	r1, [pc, #32]	; (29084 <system_gclk_chan_disable+0x8c>)
   29062:	400b      	ands	r3, r1
   29064:	1c19      	adds	r1, r3, #0
   29066:	1c03      	adds	r3, r0, #0
   29068:	430b      	orrs	r3, r1
   2906a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2906c:	4b07      	ldr	r3, [pc, #28]	; (2908c <system_gclk_chan_disable+0x94>)
   2906e:	4798      	blx	r3
}
   29070:	46c0      	nop			; (mov r8, r8)
   29072:	46bd      	mov	sp, r7
   29074:	b004      	add	sp, #16
   29076:	bd80      	pop	{r7, pc}
   29078:	00028c9d 	.word	0x00028c9d
   2907c:	40000c02 	.word	0x40000c02
   29080:	40000c00 	.word	0x40000c00
   29084:	fffff0ff 	.word	0xfffff0ff
   29088:	ffffbfff 	.word	0xffffbfff
   2908c:	00028cb1 	.word	0x00028cb1

00029090 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29090:	b580      	push	{r7, lr}
   29092:	b084      	sub	sp, #16
   29094:	af00      	add	r7, sp, #0
   29096:	0002      	movs	r2, r0
   29098:	1dfb      	adds	r3, r7, #7
   2909a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2909c:	4b0d      	ldr	r3, [pc, #52]	; (290d4 <system_gclk_chan_get_hz+0x44>)
   2909e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   290a0:	4a0d      	ldr	r2, [pc, #52]	; (290d8 <system_gclk_chan_get_hz+0x48>)
   290a2:	1dfb      	adds	r3, r7, #7
   290a4:	781b      	ldrb	r3, [r3, #0]
   290a6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   290a8:	4b0c      	ldr	r3, [pc, #48]	; (290dc <system_gclk_chan_get_hz+0x4c>)
   290aa:	885b      	ldrh	r3, [r3, #2]
   290ac:	051b      	lsls	r3, r3, #20
   290ae:	0f1b      	lsrs	r3, r3, #28
   290b0:	b2da      	uxtb	r2, r3
   290b2:	230f      	movs	r3, #15
   290b4:	18fb      	adds	r3, r7, r3
   290b6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   290b8:	4b09      	ldr	r3, [pc, #36]	; (290e0 <system_gclk_chan_get_hz+0x50>)
   290ba:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   290bc:	230f      	movs	r3, #15
   290be:	18fb      	adds	r3, r7, r3
   290c0:	781b      	ldrb	r3, [r3, #0]
   290c2:	0018      	movs	r0, r3
   290c4:	4b07      	ldr	r3, [pc, #28]	; (290e4 <system_gclk_chan_get_hz+0x54>)
   290c6:	4798      	blx	r3
   290c8:	0003      	movs	r3, r0
}
   290ca:	0018      	movs	r0, r3
   290cc:	46bd      	mov	sp, r7
   290ce:	b004      	add	sp, #16
   290d0:	bd80      	pop	{r7, pc}
   290d2:	46c0      	nop			; (mov r8, r8)
   290d4:	00028c9d 	.word	0x00028c9d
   290d8:	40000c02 	.word	0x40000c02
   290dc:	40000c00 	.word	0x40000c00
   290e0:	00028cb1 	.word	0x00028cb1
   290e4:	00028e95 	.word	0x00028e95

000290e8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   290e8:	b580      	push	{r7, lr}
   290ea:	b084      	sub	sp, #16
   290ec:	af00      	add	r7, sp, #0
   290ee:	0002      	movs	r2, r0
   290f0:	1dfb      	adds	r3, r7, #7
   290f2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   290f4:	230f      	movs	r3, #15
   290f6:	18fb      	adds	r3, r7, r3
   290f8:	2200      	movs	r2, #0
   290fa:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   290fc:	1dfb      	adds	r3, r7, #7
   290fe:	781b      	ldrb	r3, [r3, #0]
   29100:	2b7f      	cmp	r3, #127	; 0x7f
   29102:	d80b      	bhi.n	2911c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29104:	4a13      	ldr	r2, [pc, #76]	; (29154 <system_interrupt_clear_pending+0x6c>)
   29106:	1dfb      	adds	r3, r7, #7
   29108:	781b      	ldrb	r3, [r3, #0]
   2910a:	b25b      	sxtb	r3, r3
   2910c:	2101      	movs	r1, #1
   2910e:	4099      	lsls	r1, r3
   29110:	000b      	movs	r3, r1
   29112:	0019      	movs	r1, r3
   29114:	23c0      	movs	r3, #192	; 0xc0
   29116:	005b      	lsls	r3, r3, #1
   29118:	50d1      	str	r1, [r2, r3]
   2911a:	e014      	b.n	29146 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2911c:	1dfb      	adds	r3, r7, #7
   2911e:	781b      	ldrb	r3, [r3, #0]
   29120:	b25b      	sxtb	r3, r3
   29122:	330e      	adds	r3, #14
   29124:	d101      	bne.n	2912a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29126:	2317      	movs	r3, #23
   29128:	e010      	b.n	2914c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2912a:	1dfb      	adds	r3, r7, #7
   2912c:	781b      	ldrb	r3, [r3, #0]
   2912e:	b25b      	sxtb	r3, r3
   29130:	3301      	adds	r3, #1
   29132:	d104      	bne.n	2913e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29134:	4b08      	ldr	r3, [pc, #32]	; (29158 <system_interrupt_clear_pending+0x70>)
   29136:	2280      	movs	r2, #128	; 0x80
   29138:	0492      	lsls	r2, r2, #18
   2913a:	605a      	str	r2, [r3, #4]
   2913c:	e003      	b.n	29146 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2913e:	230f      	movs	r3, #15
   29140:	18fb      	adds	r3, r7, r3
   29142:	2217      	movs	r2, #23
   29144:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29146:	230f      	movs	r3, #15
   29148:	18fb      	adds	r3, r7, r3
   2914a:	781b      	ldrb	r3, [r3, #0]
}
   2914c:	0018      	movs	r0, r3
   2914e:	46bd      	mov	sp, r7
   29150:	b004      	add	sp, #16
   29152:	bd80      	pop	{r7, pc}
   29154:	e000e100 	.word	0xe000e100
   29158:	e000ed00 	.word	0xe000ed00

0002915c <system_pinmux_get_group_from_gpio_pin>:
{
   2915c:	b580      	push	{r7, lr}
   2915e:	b084      	sub	sp, #16
   29160:	af00      	add	r7, sp, #0
   29162:	0002      	movs	r2, r0
   29164:	1dfb      	adds	r3, r7, #7
   29166:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29168:	230f      	movs	r3, #15
   2916a:	18fb      	adds	r3, r7, r3
   2916c:	1dfa      	adds	r2, r7, #7
   2916e:	7812      	ldrb	r2, [r2, #0]
   29170:	09d2      	lsrs	r2, r2, #7
   29172:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29174:	230e      	movs	r3, #14
   29176:	18fb      	adds	r3, r7, r3
   29178:	1dfa      	adds	r2, r7, #7
   2917a:	7812      	ldrb	r2, [r2, #0]
   2917c:	0952      	lsrs	r2, r2, #5
   2917e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29180:	4b0d      	ldr	r3, [pc, #52]	; (291b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29182:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29184:	230f      	movs	r3, #15
   29186:	18fb      	adds	r3, r7, r3
   29188:	781b      	ldrb	r3, [r3, #0]
   2918a:	2b00      	cmp	r3, #0
   2918c:	d10f      	bne.n	291ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2918e:	230f      	movs	r3, #15
   29190:	18fb      	adds	r3, r7, r3
   29192:	781b      	ldrb	r3, [r3, #0]
   29194:	009b      	lsls	r3, r3, #2
   29196:	2210      	movs	r2, #16
   29198:	4694      	mov	ip, r2
   2919a:	44bc      	add	ip, r7
   2919c:	4463      	add	r3, ip
   2919e:	3b08      	subs	r3, #8
   291a0:	681a      	ldr	r2, [r3, #0]
   291a2:	230e      	movs	r3, #14
   291a4:	18fb      	adds	r3, r7, r3
   291a6:	781b      	ldrb	r3, [r3, #0]
   291a8:	01db      	lsls	r3, r3, #7
   291aa:	18d3      	adds	r3, r2, r3
   291ac:	e000      	b.n	291b0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   291ae:	2300      	movs	r3, #0
}
   291b0:	0018      	movs	r0, r3
   291b2:	46bd      	mov	sp, r7
   291b4:	b004      	add	sp, #16
   291b6:	bd80      	pop	{r7, pc}
   291b8:	41004400 	.word	0x41004400

000291bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   291bc:	b580      	push	{r7, lr}
   291be:	b088      	sub	sp, #32
   291c0:	af00      	add	r7, sp, #0
   291c2:	60f8      	str	r0, [r7, #12]
   291c4:	60b9      	str	r1, [r7, #8]
   291c6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   291c8:	2300      	movs	r3, #0
   291ca:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   291cc:	687b      	ldr	r3, [r7, #4]
   291ce:	78db      	ldrb	r3, [r3, #3]
   291d0:	2201      	movs	r2, #1
   291d2:	4053      	eors	r3, r2
   291d4:	b2db      	uxtb	r3, r3
   291d6:	2b00      	cmp	r3, #0
   291d8:	d035      	beq.n	29246 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   291da:	687b      	ldr	r3, [r7, #4]
   291dc:	781b      	ldrb	r3, [r3, #0]
   291de:	2b80      	cmp	r3, #128	; 0x80
   291e0:	d00b      	beq.n	291fa <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   291e2:	69fb      	ldr	r3, [r7, #28]
   291e4:	2280      	movs	r2, #128	; 0x80
   291e6:	0252      	lsls	r2, r2, #9
   291e8:	4313      	orrs	r3, r2
   291ea:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   291ec:	687b      	ldr	r3, [r7, #4]
   291ee:	781b      	ldrb	r3, [r3, #0]
   291f0:	061b      	lsls	r3, r3, #24
   291f2:	001a      	movs	r2, r3
   291f4:	69fb      	ldr	r3, [r7, #28]
   291f6:	4313      	orrs	r3, r2
   291f8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   291fa:	687b      	ldr	r3, [r7, #4]
   291fc:	785b      	ldrb	r3, [r3, #1]
   291fe:	2b00      	cmp	r3, #0
   29200:	d003      	beq.n	2920a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29202:	687b      	ldr	r3, [r7, #4]
   29204:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29206:	2b02      	cmp	r3, #2
   29208:	d110      	bne.n	2922c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2920a:	69fb      	ldr	r3, [r7, #28]
   2920c:	2280      	movs	r2, #128	; 0x80
   2920e:	0292      	lsls	r2, r2, #10
   29210:	4313      	orrs	r3, r2
   29212:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29214:	687b      	ldr	r3, [r7, #4]
   29216:	789b      	ldrb	r3, [r3, #2]
   29218:	2b00      	cmp	r3, #0
   2921a:	d004      	beq.n	29226 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2921c:	69fb      	ldr	r3, [r7, #28]
   2921e:	2280      	movs	r2, #128	; 0x80
   29220:	02d2      	lsls	r2, r2, #11
   29222:	4313      	orrs	r3, r2
   29224:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29226:	68fb      	ldr	r3, [r7, #12]
   29228:	68ba      	ldr	r2, [r7, #8]
   2922a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2922c:	687b      	ldr	r3, [r7, #4]
   2922e:	785b      	ldrb	r3, [r3, #1]
   29230:	2b01      	cmp	r3, #1
   29232:	d003      	beq.n	2923c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29234:	687b      	ldr	r3, [r7, #4]
   29236:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29238:	2b02      	cmp	r3, #2
   2923a:	d107      	bne.n	2924c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2923c:	69fb      	ldr	r3, [r7, #28]
   2923e:	4a22      	ldr	r2, [pc, #136]	; (292c8 <_system_pinmux_config+0x10c>)
   29240:	4013      	ands	r3, r2
   29242:	61fb      	str	r3, [r7, #28]
   29244:	e002      	b.n	2924c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29246:	68fb      	ldr	r3, [r7, #12]
   29248:	68ba      	ldr	r2, [r7, #8]
   2924a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2924c:	68bb      	ldr	r3, [r7, #8]
   2924e:	041b      	lsls	r3, r3, #16
   29250:	0c1b      	lsrs	r3, r3, #16
   29252:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29254:	68bb      	ldr	r3, [r7, #8]
   29256:	0c1b      	lsrs	r3, r3, #16
   29258:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2925a:	69ba      	ldr	r2, [r7, #24]
   2925c:	69fb      	ldr	r3, [r7, #28]
   2925e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29260:	22a0      	movs	r2, #160	; 0xa0
   29262:	05d2      	lsls	r2, r2, #23
   29264:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29266:	68fb      	ldr	r3, [r7, #12]
   29268:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2926a:	697a      	ldr	r2, [r7, #20]
   2926c:	69fb      	ldr	r3, [r7, #28]
   2926e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29270:	22d0      	movs	r2, #208	; 0xd0
   29272:	0612      	lsls	r2, r2, #24
   29274:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29276:	68fb      	ldr	r3, [r7, #12]
   29278:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2927a:	687b      	ldr	r3, [r7, #4]
   2927c:	78db      	ldrb	r3, [r3, #3]
   2927e:	2201      	movs	r2, #1
   29280:	4053      	eors	r3, r2
   29282:	b2db      	uxtb	r3, r3
   29284:	2b00      	cmp	r3, #0
   29286:	d01a      	beq.n	292be <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29288:	69fa      	ldr	r2, [r7, #28]
   2928a:	2380      	movs	r3, #128	; 0x80
   2928c:	02db      	lsls	r3, r3, #11
   2928e:	4013      	ands	r3, r2
   29290:	d00a      	beq.n	292a8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29292:	687b      	ldr	r3, [r7, #4]
   29294:	789b      	ldrb	r3, [r3, #2]
   29296:	2b01      	cmp	r3, #1
   29298:	d103      	bne.n	292a2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2929a:	68fb      	ldr	r3, [r7, #12]
   2929c:	68ba      	ldr	r2, [r7, #8]
   2929e:	619a      	str	r2, [r3, #24]
   292a0:	e002      	b.n	292a8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   292a2:	68fb      	ldr	r3, [r7, #12]
   292a4:	68ba      	ldr	r2, [r7, #8]
   292a6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   292a8:	687b      	ldr	r3, [r7, #4]
   292aa:	785b      	ldrb	r3, [r3, #1]
   292ac:	2b01      	cmp	r3, #1
   292ae:	d003      	beq.n	292b8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   292b0:	687b      	ldr	r3, [r7, #4]
   292b2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   292b4:	2b02      	cmp	r3, #2
   292b6:	d102      	bne.n	292be <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   292b8:	68fb      	ldr	r3, [r7, #12]
   292ba:	68ba      	ldr	r2, [r7, #8]
   292bc:	609a      	str	r2, [r3, #8]
		}
	}
}
   292be:	46c0      	nop			; (mov r8, r8)
   292c0:	46bd      	mov	sp, r7
   292c2:	b008      	add	sp, #32
   292c4:	bd80      	pop	{r7, pc}
   292c6:	46c0      	nop			; (mov r8, r8)
   292c8:	fffbffff 	.word	0xfffbffff

000292cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   292cc:	b580      	push	{r7, lr}
   292ce:	b084      	sub	sp, #16
   292d0:	af00      	add	r7, sp, #0
   292d2:	0002      	movs	r2, r0
   292d4:	6039      	str	r1, [r7, #0]
   292d6:	1dfb      	adds	r3, r7, #7
   292d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   292da:	1dfb      	adds	r3, r7, #7
   292dc:	781b      	ldrb	r3, [r3, #0]
   292de:	0018      	movs	r0, r3
   292e0:	4b0a      	ldr	r3, [pc, #40]	; (2930c <system_pinmux_pin_set_config+0x40>)
   292e2:	4798      	blx	r3
   292e4:	0003      	movs	r3, r0
   292e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   292e8:	1dfb      	adds	r3, r7, #7
   292ea:	781b      	ldrb	r3, [r3, #0]
   292ec:	221f      	movs	r2, #31
   292ee:	4013      	ands	r3, r2
   292f0:	2201      	movs	r2, #1
   292f2:	409a      	lsls	r2, r3
   292f4:	0013      	movs	r3, r2
   292f6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   292f8:	683a      	ldr	r2, [r7, #0]
   292fa:	68b9      	ldr	r1, [r7, #8]
   292fc:	68fb      	ldr	r3, [r7, #12]
   292fe:	0018      	movs	r0, r3
   29300:	4b03      	ldr	r3, [pc, #12]	; (29310 <system_pinmux_pin_set_config+0x44>)
   29302:	4798      	blx	r3
}
   29304:	46c0      	nop			; (mov r8, r8)
   29306:	46bd      	mov	sp, r7
   29308:	b004      	add	sp, #16
   2930a:	bd80      	pop	{r7, pc}
   2930c:	0002915d 	.word	0x0002915d
   29310:	000291bd 	.word	0x000291bd

00029314 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29314:	b580      	push	{r7, lr}
   29316:	af00      	add	r7, sp, #0
	return;
   29318:	46c0      	nop			; (mov r8, r8)
}
   2931a:	46bd      	mov	sp, r7
   2931c:	bd80      	pop	{r7, pc}
	...

00029320 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29320:	b580      	push	{r7, lr}
   29322:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29324:	4b06      	ldr	r3, [pc, #24]	; (29340 <system_init+0x20>)
   29326:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29328:	4b06      	ldr	r3, [pc, #24]	; (29344 <system_init+0x24>)
   2932a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2932c:	4b06      	ldr	r3, [pc, #24]	; (29348 <system_init+0x28>)
   2932e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29330:	4b06      	ldr	r3, [pc, #24]	; (2934c <system_init+0x2c>)
   29332:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29334:	4b06      	ldr	r3, [pc, #24]	; (29350 <system_init+0x30>)
   29336:	4798      	blx	r3
}
   29338:	46c0      	nop			; (mov r8, r8)
   2933a:	46bd      	mov	sp, r7
   2933c:	bd80      	pop	{r7, pc}
   2933e:	46c0      	nop			; (mov r8, r8)
   29340:	000289a1 	.word	0x000289a1
   29344:	00025469 	.word	0x00025469
   29348:	00013011 	.word	0x00013011
   2934c:	00025841 	.word	0x00025841
   29350:	00029315 	.word	0x00029315

00029354 <system_gclk_chan_get_config_defaults>:
{
   29354:	b580      	push	{r7, lr}
   29356:	b082      	sub	sp, #8
   29358:	af00      	add	r7, sp, #0
   2935a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2935c:	687b      	ldr	r3, [r7, #4]
   2935e:	2200      	movs	r2, #0
   29360:	701a      	strb	r2, [r3, #0]
}
   29362:	46c0      	nop			; (mov r8, r8)
   29364:	46bd      	mov	sp, r7
   29366:	b002      	add	sp, #8
   29368:	bd80      	pop	{r7, pc}
	...

0002936c <system_apb_clock_set_mask>:
{
   2936c:	b580      	push	{r7, lr}
   2936e:	b082      	sub	sp, #8
   29370:	af00      	add	r7, sp, #0
   29372:	0002      	movs	r2, r0
   29374:	6039      	str	r1, [r7, #0]
   29376:	1dfb      	adds	r3, r7, #7
   29378:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2937a:	1dfb      	adds	r3, r7, #7
   2937c:	781b      	ldrb	r3, [r3, #0]
   2937e:	2b01      	cmp	r3, #1
   29380:	d00a      	beq.n	29398 <system_apb_clock_set_mask+0x2c>
   29382:	2b02      	cmp	r3, #2
   29384:	d00f      	beq.n	293a6 <system_apb_clock_set_mask+0x3a>
   29386:	2b00      	cmp	r3, #0
   29388:	d114      	bne.n	293b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2938a:	4b0e      	ldr	r3, [pc, #56]	; (293c4 <system_apb_clock_set_mask+0x58>)
   2938c:	4a0d      	ldr	r2, [pc, #52]	; (293c4 <system_apb_clock_set_mask+0x58>)
   2938e:	6991      	ldr	r1, [r2, #24]
   29390:	683a      	ldr	r2, [r7, #0]
   29392:	430a      	orrs	r2, r1
   29394:	619a      	str	r2, [r3, #24]
			break;
   29396:	e00f      	b.n	293b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29398:	4b0a      	ldr	r3, [pc, #40]	; (293c4 <system_apb_clock_set_mask+0x58>)
   2939a:	4a0a      	ldr	r2, [pc, #40]	; (293c4 <system_apb_clock_set_mask+0x58>)
   2939c:	69d1      	ldr	r1, [r2, #28]
   2939e:	683a      	ldr	r2, [r7, #0]
   293a0:	430a      	orrs	r2, r1
   293a2:	61da      	str	r2, [r3, #28]
			break;
   293a4:	e008      	b.n	293b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   293a6:	4b07      	ldr	r3, [pc, #28]	; (293c4 <system_apb_clock_set_mask+0x58>)
   293a8:	4a06      	ldr	r2, [pc, #24]	; (293c4 <system_apb_clock_set_mask+0x58>)
   293aa:	6a11      	ldr	r1, [r2, #32]
   293ac:	683a      	ldr	r2, [r7, #0]
   293ae:	430a      	orrs	r2, r1
   293b0:	621a      	str	r2, [r3, #32]
			break;
   293b2:	e001      	b.n	293b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   293b4:	2317      	movs	r3, #23
   293b6:	e000      	b.n	293ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   293b8:	2300      	movs	r3, #0
}
   293ba:	0018      	movs	r0, r3
   293bc:	46bd      	mov	sp, r7
   293be:	b002      	add	sp, #8
   293c0:	bd80      	pop	{r7, pc}
   293c2:	46c0      	nop			; (mov r8, r8)
   293c4:	40000400 	.word	0x40000400

000293c8 <system_pinmux_get_config_defaults>:
{
   293c8:	b580      	push	{r7, lr}
   293ca:	b082      	sub	sp, #8
   293cc:	af00      	add	r7, sp, #0
   293ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   293d0:	687b      	ldr	r3, [r7, #4]
   293d2:	2280      	movs	r2, #128	; 0x80
   293d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   293d6:	687b      	ldr	r3, [r7, #4]
   293d8:	2200      	movs	r2, #0
   293da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   293dc:	687b      	ldr	r3, [r7, #4]
   293de:	2201      	movs	r2, #1
   293e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   293e2:	687b      	ldr	r3, [r7, #4]
   293e4:	2200      	movs	r2, #0
   293e6:	70da      	strb	r2, [r3, #3]
}
   293e8:	46c0      	nop			; (mov r8, r8)
   293ea:	46bd      	mov	sp, r7
   293ec:	b002      	add	sp, #8
   293ee:	bd80      	pop	{r7, pc}

000293f0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   293f0:	b580      	push	{r7, lr}
   293f2:	b084      	sub	sp, #16
   293f4:	af00      	add	r7, sp, #0
   293f6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   293f8:	2300      	movs	r3, #0
   293fa:	60fb      	str	r3, [r7, #12]
   293fc:	e00c      	b.n	29418 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   293fe:	4b0a      	ldr	r3, [pc, #40]	; (29428 <_tcc_get_inst_index+0x38>)
   29400:	68fa      	ldr	r2, [r7, #12]
   29402:	0092      	lsls	r2, r2, #2
   29404:	58d2      	ldr	r2, [r2, r3]
   29406:	687b      	ldr	r3, [r7, #4]
   29408:	429a      	cmp	r2, r3
   2940a:	d102      	bne.n	29412 <_tcc_get_inst_index+0x22>
			return i;
   2940c:	68fb      	ldr	r3, [r7, #12]
   2940e:	b2db      	uxtb	r3, r3
   29410:	e006      	b.n	29420 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29412:	68fb      	ldr	r3, [r7, #12]
   29414:	3301      	adds	r3, #1
   29416:	60fb      	str	r3, [r7, #12]
   29418:	68fb      	ldr	r3, [r7, #12]
   2941a:	2b02      	cmp	r3, #2
   2941c:	d9ef      	bls.n	293fe <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2941e:	2300      	movs	r3, #0
}
   29420:	0018      	movs	r0, r3
   29422:	46bd      	mov	sp, r7
   29424:	b004      	add	sp, #16
   29426:	bd80      	pop	{r7, pc}
   29428:	00039018 	.word	0x00039018

0002942c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2942c:	b590      	push	{r4, r7, lr}
   2942e:	b085      	sub	sp, #20
   29430:	af00      	add	r7, sp, #0
   29432:	6078      	str	r0, [r7, #4]
   29434:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29436:	230f      	movs	r3, #15
   29438:	18fc      	adds	r4, r7, r3
   2943a:	683b      	ldr	r3, [r7, #0]
   2943c:	0018      	movs	r0, r3
   2943e:	4bad      	ldr	r3, [pc, #692]	; (296f4 <tcc_get_config_defaults+0x2c8>)
   29440:	4798      	blx	r3
   29442:	0003      	movs	r3, r0
   29444:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29446:	687b      	ldr	r3, [r7, #4]
   29448:	2200      	movs	r2, #0
   2944a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2944c:	230f      	movs	r3, #15
   2944e:	18fb      	adds	r3, r7, r3
   29450:	781a      	ldrb	r2, [r3, #0]
   29452:	4ba9      	ldr	r3, [pc, #676]	; (296f8 <tcc_get_config_defaults+0x2cc>)
   29454:	0092      	lsls	r2, r2, #2
   29456:	58d2      	ldr	r2, [r2, r3]
   29458:	687b      	ldr	r3, [r7, #4]
   2945a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2945c:	687b      	ldr	r3, [r7, #4]
   2945e:	2200      	movs	r2, #0
   29460:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29462:	687b      	ldr	r3, [r7, #4]
   29464:	2200      	movs	r2, #0
   29466:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29468:	687b      	ldr	r3, [r7, #4]
   2946a:	2200      	movs	r2, #0
   2946c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2946e:	687b      	ldr	r3, [r7, #4]
   29470:	2200      	movs	r2, #0
   29472:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29474:	687b      	ldr	r3, [r7, #4]
   29476:	2200      	movs	r2, #0
   29478:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2947a:	687b      	ldr	r3, [r7, #4]
   2947c:	2200      	movs	r2, #0
   2947e:	61da      	str	r2, [r3, #28]
   29480:	687b      	ldr	r3, [r7, #4]
   29482:	2200      	movs	r2, #0
   29484:	621a      	str	r2, [r3, #32]
   29486:	687b      	ldr	r3, [r7, #4]
   29488:	2200      	movs	r2, #0
   2948a:	625a      	str	r2, [r3, #36]	; 0x24
   2948c:	687b      	ldr	r3, [r7, #4]
   2948e:	2200      	movs	r2, #0
   29490:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29492:	687b      	ldr	r3, [r7, #4]
   29494:	2200      	movs	r2, #0
   29496:	751a      	strb	r2, [r3, #20]
   29498:	687b      	ldr	r3, [r7, #4]
   2949a:	2200      	movs	r2, #0
   2949c:	755a      	strb	r2, [r3, #21]
   2949e:	687b      	ldr	r3, [r7, #4]
   294a0:	2200      	movs	r2, #0
   294a2:	759a      	strb	r2, [r3, #22]
   294a4:	687b      	ldr	r3, [r7, #4]
   294a6:	2200      	movs	r2, #0
   294a8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   294aa:	687b      	ldr	r3, [r7, #4]
   294ac:	2200      	movs	r2, #0
   294ae:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   294b0:	687b      	ldr	r3, [r7, #4]
   294b2:	2200      	movs	r2, #0
   294b4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   294b6:	687b      	ldr	r3, [r7, #4]
   294b8:	2200      	movs	r2, #0
   294ba:	741a      	strb	r2, [r3, #16]
   294bc:	687b      	ldr	r3, [r7, #4]
   294be:	2200      	movs	r2, #0
   294c0:	745a      	strb	r2, [r3, #17]
   294c2:	687b      	ldr	r3, [r7, #4]
   294c4:	2200      	movs	r2, #0
   294c6:	749a      	strb	r2, [r3, #18]
   294c8:	687b      	ldr	r3, [r7, #4]
   294ca:	2200      	movs	r2, #0
   294cc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   294ce:	687b      	ldr	r3, [r7, #4]
   294d0:	222c      	movs	r2, #44	; 0x2c
   294d2:	2100      	movs	r1, #0
   294d4:	5499      	strb	r1, [r3, r2]
   294d6:	687b      	ldr	r3, [r7, #4]
   294d8:	222d      	movs	r2, #45	; 0x2d
   294da:	2100      	movs	r1, #0
   294dc:	5499      	strb	r1, [r3, r2]
   294de:	687b      	ldr	r3, [r7, #4]
   294e0:	222e      	movs	r2, #46	; 0x2e
   294e2:	2100      	movs	r1, #0
   294e4:	5499      	strb	r1, [r3, r2]
   294e6:	687b      	ldr	r3, [r7, #4]
   294e8:	222f      	movs	r2, #47	; 0x2f
   294ea:	2100      	movs	r1, #0
   294ec:	5499      	strb	r1, [r3, r2]
   294ee:	687b      	ldr	r3, [r7, #4]
   294f0:	2230      	movs	r2, #48	; 0x30
   294f2:	2100      	movs	r1, #0
   294f4:	5499      	strb	r1, [r3, r2]
   294f6:	687b      	ldr	r3, [r7, #4]
   294f8:	2231      	movs	r2, #49	; 0x31
   294fa:	2100      	movs	r1, #0
   294fc:	5499      	strb	r1, [r3, r2]
   294fe:	687b      	ldr	r3, [r7, #4]
   29500:	2232      	movs	r2, #50	; 0x32
   29502:	2100      	movs	r1, #0
   29504:	5499      	strb	r1, [r3, r2]
   29506:	687b      	ldr	r3, [r7, #4]
   29508:	2233      	movs	r2, #51	; 0x33
   2950a:	2100      	movs	r1, #0
   2950c:	5499      	strb	r1, [r3, r2]
   2950e:	687b      	ldr	r3, [r7, #4]
   29510:	2234      	movs	r2, #52	; 0x34
   29512:	2100      	movs	r1, #0
   29514:	5499      	strb	r1, [r3, r2]
   29516:	687b      	ldr	r3, [r7, #4]
   29518:	2235      	movs	r2, #53	; 0x35
   2951a:	2100      	movs	r1, #0
   2951c:	5499      	strb	r1, [r3, r2]
   2951e:	687b      	ldr	r3, [r7, #4]
   29520:	2236      	movs	r2, #54	; 0x36
   29522:	2100      	movs	r1, #0
   29524:	5499      	strb	r1, [r3, r2]
   29526:	687b      	ldr	r3, [r7, #4]
   29528:	2237      	movs	r2, #55	; 0x37
   2952a:	2100      	movs	r1, #0
   2952c:	5499      	strb	r1, [r3, r2]
   2952e:	687b      	ldr	r3, [r7, #4]
   29530:	2238      	movs	r2, #56	; 0x38
   29532:	2100      	movs	r1, #0
   29534:	5499      	strb	r1, [r3, r2]
   29536:	687b      	ldr	r3, [r7, #4]
   29538:	2239      	movs	r2, #57	; 0x39
   2953a:	2100      	movs	r1, #0
   2953c:	5499      	strb	r1, [r3, r2]
   2953e:	687b      	ldr	r3, [r7, #4]
   29540:	223a      	movs	r2, #58	; 0x3a
   29542:	2100      	movs	r1, #0
   29544:	5499      	strb	r1, [r3, r2]
   29546:	687b      	ldr	r3, [r7, #4]
   29548:	223b      	movs	r2, #59	; 0x3b
   2954a:	2100      	movs	r1, #0
   2954c:	5499      	strb	r1, [r3, r2]
   2954e:	687b      	ldr	r3, [r7, #4]
   29550:	223c      	movs	r2, #60	; 0x3c
   29552:	2100      	movs	r1, #0
   29554:	5499      	strb	r1, [r3, r2]
   29556:	687b      	ldr	r3, [r7, #4]
   29558:	223d      	movs	r2, #61	; 0x3d
   2955a:	2100      	movs	r1, #0
   2955c:	5499      	strb	r1, [r3, r2]
   2955e:	687b      	ldr	r3, [r7, #4]
   29560:	223e      	movs	r2, #62	; 0x3e
   29562:	2100      	movs	r1, #0
   29564:	5499      	strb	r1, [r3, r2]
   29566:	687b      	ldr	r3, [r7, #4]
   29568:	223f      	movs	r2, #63	; 0x3f
   2956a:	2100      	movs	r1, #0
   2956c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2956e:	687b      	ldr	r3, [r7, #4]
   29570:	2240      	movs	r2, #64	; 0x40
   29572:	2100      	movs	r1, #0
   29574:	5499      	strb	r1, [r3, r2]
   29576:	687b      	ldr	r3, [r7, #4]
   29578:	2241      	movs	r2, #65	; 0x41
   2957a:	2100      	movs	r1, #0
   2957c:	5499      	strb	r1, [r3, r2]
   2957e:	687b      	ldr	r3, [r7, #4]
   29580:	2242      	movs	r2, #66	; 0x42
   29582:	2100      	movs	r1, #0
   29584:	5499      	strb	r1, [r3, r2]
   29586:	687b      	ldr	r3, [r7, #4]
   29588:	2243      	movs	r2, #67	; 0x43
   2958a:	2100      	movs	r1, #0
   2958c:	5499      	strb	r1, [r3, r2]
   2958e:	687b      	ldr	r3, [r7, #4]
   29590:	2244      	movs	r2, #68	; 0x44
   29592:	2100      	movs	r1, #0
   29594:	5499      	strb	r1, [r3, r2]
   29596:	687b      	ldr	r3, [r7, #4]
   29598:	2245      	movs	r2, #69	; 0x45
   2959a:	2100      	movs	r1, #0
   2959c:	5499      	strb	r1, [r3, r2]
   2959e:	687b      	ldr	r3, [r7, #4]
   295a0:	2246      	movs	r2, #70	; 0x46
   295a2:	2100      	movs	r1, #0
   295a4:	5499      	strb	r1, [r3, r2]
   295a6:	687b      	ldr	r3, [r7, #4]
   295a8:	2247      	movs	r2, #71	; 0x47
   295aa:	2100      	movs	r1, #0
   295ac:	5499      	strb	r1, [r3, r2]
   295ae:	687b      	ldr	r3, [r7, #4]
   295b0:	2248      	movs	r2, #72	; 0x48
   295b2:	2100      	movs	r1, #0
   295b4:	5499      	strb	r1, [r3, r2]
   295b6:	687b      	ldr	r3, [r7, #4]
   295b8:	2249      	movs	r2, #73	; 0x49
   295ba:	2100      	movs	r1, #0
   295bc:	5499      	strb	r1, [r3, r2]
   295be:	687b      	ldr	r3, [r7, #4]
   295c0:	224a      	movs	r2, #74	; 0x4a
   295c2:	2100      	movs	r1, #0
   295c4:	5499      	strb	r1, [r3, r2]
   295c6:	687b      	ldr	r3, [r7, #4]
   295c8:	224b      	movs	r2, #75	; 0x4b
   295ca:	2100      	movs	r1, #0
   295cc:	5499      	strb	r1, [r3, r2]
   295ce:	687b      	ldr	r3, [r7, #4]
   295d0:	224c      	movs	r2, #76	; 0x4c
   295d2:	2100      	movs	r1, #0
   295d4:	5499      	strb	r1, [r3, r2]
   295d6:	687b      	ldr	r3, [r7, #4]
   295d8:	224d      	movs	r2, #77	; 0x4d
   295da:	2100      	movs	r1, #0
   295dc:	5499      	strb	r1, [r3, r2]
   295de:	687b      	ldr	r3, [r7, #4]
   295e0:	224e      	movs	r2, #78	; 0x4e
   295e2:	2100      	movs	r1, #0
   295e4:	5499      	strb	r1, [r3, r2]
   295e6:	687b      	ldr	r3, [r7, #4]
   295e8:	224f      	movs	r2, #79	; 0x4f
   295ea:	2100      	movs	r1, #0
   295ec:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   295ee:	687b      	ldr	r3, [r7, #4]
   295f0:	2250      	movs	r2, #80	; 0x50
   295f2:	2100      	movs	r1, #0
   295f4:	5499      	strb	r1, [r3, r2]
   295f6:	687b      	ldr	r3, [r7, #4]
   295f8:	2251      	movs	r2, #81	; 0x51
   295fa:	2100      	movs	r1, #0
   295fc:	5499      	strb	r1, [r3, r2]
   295fe:	687b      	ldr	r3, [r7, #4]
   29600:	2252      	movs	r2, #82	; 0x52
   29602:	2100      	movs	r1, #0
   29604:	5499      	strb	r1, [r3, r2]
   29606:	687b      	ldr	r3, [r7, #4]
   29608:	2253      	movs	r2, #83	; 0x53
   2960a:	2100      	movs	r1, #0
   2960c:	5499      	strb	r1, [r3, r2]
   2960e:	687b      	ldr	r3, [r7, #4]
   29610:	2254      	movs	r2, #84	; 0x54
   29612:	2100      	movs	r1, #0
   29614:	5499      	strb	r1, [r3, r2]
   29616:	687b      	ldr	r3, [r7, #4]
   29618:	2255      	movs	r2, #85	; 0x55
   2961a:	2100      	movs	r1, #0
   2961c:	5499      	strb	r1, [r3, r2]
   2961e:	687b      	ldr	r3, [r7, #4]
   29620:	2256      	movs	r2, #86	; 0x56
   29622:	2100      	movs	r1, #0
   29624:	5499      	strb	r1, [r3, r2]
   29626:	687b      	ldr	r3, [r7, #4]
   29628:	2257      	movs	r2, #87	; 0x57
   2962a:	2100      	movs	r1, #0
   2962c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2962e:	687b      	ldr	r3, [r7, #4]
   29630:	2298      	movs	r2, #152	; 0x98
   29632:	2100      	movs	r1, #0
   29634:	5499      	strb	r1, [r3, r2]
   29636:	687b      	ldr	r3, [r7, #4]
   29638:	2200      	movs	r2, #0
   2963a:	659a      	str	r2, [r3, #88]	; 0x58
   2963c:	687b      	ldr	r3, [r7, #4]
   2963e:	2200      	movs	r2, #0
   29640:	679a      	str	r2, [r3, #120]	; 0x78
   29642:	687b      	ldr	r3, [r7, #4]
   29644:	2299      	movs	r2, #153	; 0x99
   29646:	2100      	movs	r1, #0
   29648:	5499      	strb	r1, [r3, r2]
   2964a:	687b      	ldr	r3, [r7, #4]
   2964c:	2200      	movs	r2, #0
   2964e:	65da      	str	r2, [r3, #92]	; 0x5c
   29650:	687b      	ldr	r3, [r7, #4]
   29652:	2200      	movs	r2, #0
   29654:	67da      	str	r2, [r3, #124]	; 0x7c
   29656:	687b      	ldr	r3, [r7, #4]
   29658:	229a      	movs	r2, #154	; 0x9a
   2965a:	2100      	movs	r1, #0
   2965c:	5499      	strb	r1, [r3, r2]
   2965e:	687b      	ldr	r3, [r7, #4]
   29660:	2200      	movs	r2, #0
   29662:	661a      	str	r2, [r3, #96]	; 0x60
   29664:	687b      	ldr	r3, [r7, #4]
   29666:	2280      	movs	r2, #128	; 0x80
   29668:	2100      	movs	r1, #0
   2966a:	5099      	str	r1, [r3, r2]
   2966c:	687b      	ldr	r3, [r7, #4]
   2966e:	229b      	movs	r2, #155	; 0x9b
   29670:	2100      	movs	r1, #0
   29672:	5499      	strb	r1, [r3, r2]
   29674:	687b      	ldr	r3, [r7, #4]
   29676:	2200      	movs	r2, #0
   29678:	665a      	str	r2, [r3, #100]	; 0x64
   2967a:	687b      	ldr	r3, [r7, #4]
   2967c:	2284      	movs	r2, #132	; 0x84
   2967e:	2100      	movs	r1, #0
   29680:	5099      	str	r1, [r3, r2]
   29682:	687b      	ldr	r3, [r7, #4]
   29684:	229c      	movs	r2, #156	; 0x9c
   29686:	2100      	movs	r1, #0
   29688:	5499      	strb	r1, [r3, r2]
   2968a:	687b      	ldr	r3, [r7, #4]
   2968c:	2200      	movs	r2, #0
   2968e:	669a      	str	r2, [r3, #104]	; 0x68
   29690:	687b      	ldr	r3, [r7, #4]
   29692:	2288      	movs	r2, #136	; 0x88
   29694:	2100      	movs	r1, #0
   29696:	5099      	str	r1, [r3, r2]
   29698:	687b      	ldr	r3, [r7, #4]
   2969a:	229d      	movs	r2, #157	; 0x9d
   2969c:	2100      	movs	r1, #0
   2969e:	5499      	strb	r1, [r3, r2]
   296a0:	687b      	ldr	r3, [r7, #4]
   296a2:	2200      	movs	r2, #0
   296a4:	66da      	str	r2, [r3, #108]	; 0x6c
   296a6:	687b      	ldr	r3, [r7, #4]
   296a8:	228c      	movs	r2, #140	; 0x8c
   296aa:	2100      	movs	r1, #0
   296ac:	5099      	str	r1, [r3, r2]
   296ae:	687b      	ldr	r3, [r7, #4]
   296b0:	229e      	movs	r2, #158	; 0x9e
   296b2:	2100      	movs	r1, #0
   296b4:	5499      	strb	r1, [r3, r2]
   296b6:	687b      	ldr	r3, [r7, #4]
   296b8:	2200      	movs	r2, #0
   296ba:	671a      	str	r2, [r3, #112]	; 0x70
   296bc:	687b      	ldr	r3, [r7, #4]
   296be:	2290      	movs	r2, #144	; 0x90
   296c0:	2100      	movs	r1, #0
   296c2:	5099      	str	r1, [r3, r2]
   296c4:	687b      	ldr	r3, [r7, #4]
   296c6:	229f      	movs	r2, #159	; 0x9f
   296c8:	2100      	movs	r1, #0
   296ca:	5499      	strb	r1, [r3, r2]
   296cc:	687b      	ldr	r3, [r7, #4]
   296ce:	2200      	movs	r2, #0
   296d0:	675a      	str	r2, [r3, #116]	; 0x74
   296d2:	687b      	ldr	r3, [r7, #4]
   296d4:	2294      	movs	r2, #148	; 0x94
   296d6:	2100      	movs	r1, #0
   296d8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   296da:	687b      	ldr	r3, [r7, #4]
   296dc:	22a0      	movs	r2, #160	; 0xa0
   296de:	2101      	movs	r1, #1
   296e0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   296e2:	687b      	ldr	r3, [r7, #4]
   296e4:	22a1      	movs	r2, #161	; 0xa1
   296e6:	2100      	movs	r1, #0
   296e8:	5499      	strb	r1, [r3, r2]
}
   296ea:	46c0      	nop			; (mov r8, r8)
   296ec:	46bd      	mov	sp, r7
   296ee:	b005      	add	sp, #20
   296f0:	bd90      	pop	{r4, r7, pc}
   296f2:	46c0      	nop			; (mov r8, r8)
   296f4:	000293f1 	.word	0x000293f1
   296f8:	00039034 	.word	0x00039034

000296fc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   296fc:	b580      	push	{r7, lr}
   296fe:	b086      	sub	sp, #24
   29700:	af00      	add	r7, sp, #0
   29702:	60b9      	str	r1, [r7, #8]
   29704:	607a      	str	r2, [r7, #4]
   29706:	230f      	movs	r3, #15
   29708:	18fb      	adds	r3, r7, r3
   2970a:	1c02      	adds	r2, r0, #0
   2970c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2970e:	2300      	movs	r3, #0
   29710:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29712:	2300      	movs	r3, #0
   29714:	613b      	str	r3, [r7, #16]
   29716:	e01d      	b.n	29754 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   29718:	68ba      	ldr	r2, [r7, #8]
   2971a:	693b      	ldr	r3, [r7, #16]
   2971c:	18d3      	adds	r3, r2, r3
   2971e:	3310      	adds	r3, #16
   29720:	781b      	ldrb	r3, [r3, #0]
   29722:	2b01      	cmp	r3, #1
   29724:	d113      	bne.n	2974e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   29726:	230f      	movs	r3, #15
   29728:	18fb      	adds	r3, r7, r3
   2972a:	781b      	ldrb	r3, [r3, #0]
   2972c:	4a1b      	ldr	r2, [pc, #108]	; (2979c <_tcc_build_ctrla+0xa0>)
   2972e:	5cd3      	ldrb	r3, [r2, r3]
   29730:	001a      	movs	r2, r3
   29732:	693b      	ldr	r3, [r7, #16]
   29734:	429a      	cmp	r2, r3
   29736:	da01      	bge.n	2973c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   29738:	2317      	movs	r3, #23
   2973a:	e02a      	b.n	29792 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2973c:	2380      	movs	r3, #128	; 0x80
   2973e:	045a      	lsls	r2, r3, #17
   29740:	693b      	ldr	r3, [r7, #16]
   29742:	409a      	lsls	r2, r3
   29744:	0013      	movs	r3, r2
   29746:	001a      	movs	r2, r3
   29748:	697b      	ldr	r3, [r7, #20]
   2974a:	4313      	orrs	r3, r2
   2974c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2974e:	693b      	ldr	r3, [r7, #16]
   29750:	3301      	adds	r3, #1
   29752:	613b      	str	r3, [r7, #16]
   29754:	693b      	ldr	r3, [r7, #16]
   29756:	2b03      	cmp	r3, #3
   29758:	ddde      	ble.n	29718 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2975a:	68bb      	ldr	r3, [r7, #8]
   2975c:	22a1      	movs	r2, #161	; 0xa1
   2975e:	5c9b      	ldrb	r3, [r3, r2]
   29760:	2b00      	cmp	r3, #0
   29762:	d004      	beq.n	2976e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   29764:	697b      	ldr	r3, [r7, #20]
   29766:	2280      	movs	r2, #128	; 0x80
   29768:	0112      	lsls	r2, r2, #4
   2976a:	4313      	orrs	r3, r2
   2976c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2976e:	68bb      	ldr	r3, [r7, #8]
   29770:	7b1b      	ldrb	r3, [r3, #12]
   29772:	031b      	lsls	r3, r3, #12
   29774:	001a      	movs	r2, r3
   29776:	697b      	ldr	r3, [r7, #20]
   29778:	4313      	orrs	r3, r2
   2977a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2977c:	68bb      	ldr	r3, [r7, #8]
   2977e:	7adb      	ldrb	r3, [r3, #11]
   29780:	021b      	lsls	r3, r3, #8
   29782:	001a      	movs	r2, r3
   29784:	697b      	ldr	r3, [r7, #20]
   29786:	4313      	orrs	r3, r2
   29788:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2978a:	687b      	ldr	r3, [r7, #4]
   2978c:	697a      	ldr	r2, [r7, #20]
   2978e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29790:	2300      	movs	r3, #0
}
   29792:	0018      	movs	r0, r3
   29794:	46bd      	mov	sp, r7
   29796:	b006      	add	sp, #24
   29798:	bd80      	pop	{r7, pc}
   2979a:	46c0      	nop			; (mov r8, r8)
   2979c:	00039040 	.word	0x00039040

000297a0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   297a0:	b580      	push	{r7, lr}
   297a2:	b086      	sub	sp, #24
   297a4:	af00      	add	r7, sp, #0
   297a6:	60b9      	str	r1, [r7, #8]
   297a8:	607a      	str	r2, [r7, #4]
   297aa:	230f      	movs	r3, #15
   297ac:	18fb      	adds	r3, r7, r3
   297ae:	1c02      	adds	r2, r0, #0
   297b0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   297b2:	2317      	movs	r3, #23
   297b4:	18fb      	adds	r3, r7, r3
   297b6:	2200      	movs	r2, #0
   297b8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   297ba:	68bb      	ldr	r3, [r7, #8]
   297bc:	7a1b      	ldrb	r3, [r3, #8]
   297be:	2b00      	cmp	r3, #0
   297c0:	d007      	beq.n	297d2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   297c2:	2317      	movs	r3, #23
   297c4:	18fb      	adds	r3, r7, r3
   297c6:	2217      	movs	r2, #23
   297c8:	18ba      	adds	r2, r7, r2
   297ca:	7812      	ldrb	r2, [r2, #0]
   297cc:	2104      	movs	r1, #4
   297ce:	430a      	orrs	r2, r1
   297d0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   297d2:	68bb      	ldr	r3, [r7, #8]
   297d4:	7a5b      	ldrb	r3, [r3, #9]
   297d6:	2b01      	cmp	r3, #1
   297d8:	d107      	bne.n	297ea <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   297da:	2317      	movs	r3, #23
   297dc:	18fb      	adds	r3, r7, r3
   297de:	2217      	movs	r2, #23
   297e0:	18ba      	adds	r2, r7, r2
   297e2:	7812      	ldrb	r2, [r2, #0]
   297e4:	2101      	movs	r1, #1
   297e6:	430a      	orrs	r2, r1
   297e8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   297ea:	687b      	ldr	r3, [r7, #4]
   297ec:	2217      	movs	r2, #23
   297ee:	18ba      	adds	r2, r7, r2
   297f0:	7812      	ldrb	r2, [r2, #0]
   297f2:	701a      	strb	r2, [r3, #0]
}
   297f4:	46c0      	nop			; (mov r8, r8)
   297f6:	46bd      	mov	sp, r7
   297f8:	b006      	add	sp, #24
   297fa:	bd80      	pop	{r7, pc}

000297fc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   297fc:	b580      	push	{r7, lr}
   297fe:	b088      	sub	sp, #32
   29800:	af00      	add	r7, sp, #0
   29802:	60b9      	str	r1, [r7, #8]
   29804:	607a      	str	r2, [r7, #4]
   29806:	230f      	movs	r3, #15
   29808:	18fb      	adds	r3, r7, r3
   2980a:	1c02      	adds	r2, r0, #0
   2980c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2980e:	230f      	movs	r3, #15
   29810:	18fb      	adds	r3, r7, r3
   29812:	781a      	ldrb	r2, [r3, #0]
   29814:	231b      	movs	r3, #27
   29816:	18fb      	adds	r3, r7, r3
   29818:	493e      	ldr	r1, [pc, #248]	; (29914 <_tcc_build_faults+0x118>)
   2981a:	5c8a      	ldrb	r2, [r1, r2]
   2981c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2981e:	2300      	movs	r3, #0
   29820:	61fb      	str	r3, [r7, #28]
   29822:	e06e      	b.n	29902 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   29824:	69fa      	ldr	r2, [r7, #28]
   29826:	0013      	movs	r3, r2
   29828:	009b      	lsls	r3, r3, #2
   2982a:	189b      	adds	r3, r3, r2
   2982c:	005b      	lsls	r3, r3, #1
   2982e:	3328      	adds	r3, #40	; 0x28
   29830:	68ba      	ldr	r2, [r7, #8]
   29832:	18d3      	adds	r3, r2, r3
   29834:	3304      	adds	r3, #4
   29836:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   29838:	697b      	ldr	r3, [r7, #20]
   2983a:	7a5b      	ldrb	r3, [r3, #9]
   2983c:	221b      	movs	r2, #27
   2983e:	18ba      	adds	r2, r7, r2
   29840:	7812      	ldrb	r2, [r2, #0]
   29842:	429a      	cmp	r2, r3
   29844:	d801      	bhi.n	2984a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   29846:	2317      	movs	r3, #23
   29848:	e05f      	b.n	2990a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2984a:	697b      	ldr	r3, [r7, #20]
   2984c:	781b      	ldrb	r3, [r3, #0]
   2984e:	2b0f      	cmp	r3, #15
   29850:	d901      	bls.n	29856 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   29852:	2317      	movs	r3, #23
   29854:	e059      	b.n	2990a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29856:	697b      	ldr	r3, [r7, #20]
   29858:	781b      	ldrb	r3, [r3, #0]
   2985a:	061b      	lsls	r3, r3, #24
   2985c:	001a      	movs	r2, r3
   2985e:	23f0      	movs	r3, #240	; 0xf0
   29860:	051b      	lsls	r3, r3, #20
   29862:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   29864:	697b      	ldr	r3, [r7, #20]
   29866:	785b      	ldrb	r3, [r3, #1]
   29868:	041b      	lsls	r3, r3, #16
   2986a:	0019      	movs	r1, r3
   2986c:	23ff      	movs	r3, #255	; 0xff
   2986e:	041b      	lsls	r3, r3, #16
   29870:	400b      	ands	r3, r1
   29872:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   29874:	697b      	ldr	r3, [r7, #20]
   29876:	789b      	ldrb	r3, [r3, #2]
   29878:	2b00      	cmp	r3, #0
   2987a:	d001      	beq.n	29880 <_tcc_build_faults+0x84>
   2987c:	2380      	movs	r3, #128	; 0x80
   2987e:	e000      	b.n	29882 <_tcc_build_faults+0x86>
   29880:	2300      	movs	r3, #0
   29882:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   29884:	697b      	ldr	r3, [r7, #20]
   29886:	78db      	ldrb	r3, [r3, #3]
   29888:	2b00      	cmp	r3, #0
   2988a:	d001      	beq.n	29890 <_tcc_build_faults+0x94>
   2988c:	2308      	movs	r3, #8
   2988e:	e000      	b.n	29892 <_tcc_build_faults+0x96>
   29890:	2300      	movs	r3, #0
   29892:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   29894:	697b      	ldr	r3, [r7, #20]
   29896:	791b      	ldrb	r3, [r3, #4]
   29898:	2b00      	cmp	r3, #0
   2989a:	d001      	beq.n	298a0 <_tcc_build_faults+0xa4>
   2989c:	2310      	movs	r3, #16
   2989e:	e000      	b.n	298a2 <_tcc_build_faults+0xa6>
   298a0:	2300      	movs	r3, #0
   298a2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   298a4:	697b      	ldr	r3, [r7, #20]
   298a6:	795b      	ldrb	r3, [r3, #5]
   298a8:	0019      	movs	r1, r3
   298aa:	2303      	movs	r3, #3
   298ac:	400b      	ands	r3, r1
   298ae:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   298b0:	697b      	ldr	r3, [r7, #20]
   298b2:	799b      	ldrb	r3, [r3, #6]
   298b4:	015b      	lsls	r3, r3, #5
   298b6:	0019      	movs	r1, r3
   298b8:	2360      	movs	r3, #96	; 0x60
   298ba:	400b      	ands	r3, r1
   298bc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   298be:	697b      	ldr	r3, [r7, #20]
   298c0:	79db      	ldrb	r3, [r3, #7]
   298c2:	021b      	lsls	r3, r3, #8
   298c4:	0019      	movs	r1, r3
   298c6:	23c0      	movs	r3, #192	; 0xc0
   298c8:	009b      	lsls	r3, r3, #2
   298ca:	400b      	ands	r3, r1
   298cc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   298ce:	697b      	ldr	r3, [r7, #20]
   298d0:	7a1b      	ldrb	r3, [r3, #8]
   298d2:	031b      	lsls	r3, r3, #12
   298d4:	0019      	movs	r1, r3
   298d6:	23e0      	movs	r3, #224	; 0xe0
   298d8:	01db      	lsls	r3, r3, #7
   298da:	400b      	ands	r3, r1
   298dc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   298de:	697b      	ldr	r3, [r7, #20]
   298e0:	7a5b      	ldrb	r3, [r3, #9]
   298e2:	029b      	lsls	r3, r3, #10
   298e4:	0019      	movs	r1, r3
   298e6:	23c0      	movs	r3, #192	; 0xc0
   298e8:	011b      	lsls	r3, r3, #4
   298ea:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   298ec:	4313      	orrs	r3, r2
   298ee:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   298f0:	69fb      	ldr	r3, [r7, #28]
   298f2:	009b      	lsls	r3, r3, #2
   298f4:	687a      	ldr	r2, [r7, #4]
   298f6:	18d3      	adds	r3, r2, r3
   298f8:	693a      	ldr	r2, [r7, #16]
   298fa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   298fc:	69fb      	ldr	r3, [r7, #28]
   298fe:	3301      	adds	r3, #1
   29900:	61fb      	str	r3, [r7, #28]
   29902:	69fb      	ldr	r3, [r7, #28]
   29904:	2b01      	cmp	r3, #1
   29906:	dd8d      	ble.n	29824 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   29908:	2300      	movs	r3, #0
}
   2990a:	0018      	movs	r0, r3
   2990c:	46bd      	mov	sp, r7
   2990e:	b008      	add	sp, #32
   29910:	bd80      	pop	{r7, pc}
   29912:	46c0      	nop			; (mov r8, r8)
   29914:	00039040 	.word	0x00039040

00029918 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29918:	b580      	push	{r7, lr}
   2991a:	b088      	sub	sp, #32
   2991c:	af00      	add	r7, sp, #0
   2991e:	60b9      	str	r1, [r7, #8]
   29920:	607a      	str	r2, [r7, #4]
   29922:	230f      	movs	r3, #15
   29924:	18fb      	adds	r3, r7, r3
   29926:	1c02      	adds	r2, r0, #0
   29928:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2992a:	230f      	movs	r3, #15
   2992c:	18fb      	adds	r3, r7, r3
   2992e:	781a      	ldrb	r2, [r3, #0]
   29930:	2317      	movs	r3, #23
   29932:	18fb      	adds	r3, r7, r3
   29934:	492d      	ldr	r1, [pc, #180]	; (299ec <_tcc_build_drvctrl+0xd4>)
   29936:	5c8a      	ldrb	r2, [r1, r2]
   29938:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2993a:	2300      	movs	r3, #0
   2993c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2993e:	2300      	movs	r3, #0
   29940:	61fb      	str	r3, [r7, #28]
   29942:	e048      	b.n	299d6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   29944:	68ba      	ldr	r2, [r7, #8]
   29946:	2150      	movs	r1, #80	; 0x50
   29948:	69fb      	ldr	r3, [r7, #28]
   2994a:	18d3      	adds	r3, r2, r3
   2994c:	185b      	adds	r3, r3, r1
   2994e:	781b      	ldrb	r3, [r3, #0]
   29950:	2b00      	cmp	r3, #0
   29952:	d010      	beq.n	29976 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   29954:	2317      	movs	r3, #23
   29956:	18fb      	adds	r3, r7, r3
   29958:	781a      	ldrb	r2, [r3, #0]
   2995a:	69fb      	ldr	r3, [r7, #28]
   2995c:	429a      	cmp	r2, r3
   2995e:	d801      	bhi.n	29964 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   29960:	2317      	movs	r3, #23
   29962:	e03f      	b.n	299e4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   29964:	2380      	movs	r3, #128	; 0x80
   29966:	025a      	lsls	r2, r3, #9
   29968:	69fb      	ldr	r3, [r7, #28]
   2996a:	409a      	lsls	r2, r3
   2996c:	0013      	movs	r3, r2
   2996e:	001a      	movs	r2, r3
   29970:	69bb      	ldr	r3, [r7, #24]
   29972:	4313      	orrs	r3, r2
   29974:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   29976:	68ba      	ldr	r2, [r7, #8]
   29978:	69fb      	ldr	r3, [r7, #28]
   2997a:	331c      	adds	r3, #28
   2997c:	005b      	lsls	r3, r3, #1
   2997e:	18d3      	adds	r3, r2, r3
   29980:	3309      	adds	r3, #9
   29982:	781b      	ldrb	r3, [r3, #0]
   29984:	2b00      	cmp	r3, #0
   29986:	d023      	beq.n	299d0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   29988:	2317      	movs	r3, #23
   2998a:	18fb      	adds	r3, r7, r3
   2998c:	781a      	ldrb	r2, [r3, #0]
   2998e:	69fb      	ldr	r3, [r7, #28]
   29990:	429a      	cmp	r2, r3
   29992:	d801      	bhi.n	29998 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   29994:	2317      	movs	r3, #23
   29996:	e025      	b.n	299e4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   29998:	68ba      	ldr	r2, [r7, #8]
   2999a:	69fb      	ldr	r3, [r7, #28]
   2999c:	331c      	adds	r3, #28
   2999e:	005b      	lsls	r3, r3, #1
   299a0:	18d3      	adds	r3, r2, r3
   299a2:	3309      	adds	r3, #9
   299a4:	781b      	ldrb	r3, [r3, #0]
   299a6:	2b02      	cmp	r3, #2
   299a8:	d10a      	bne.n	299c0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   299aa:	2302      	movs	r3, #2
   299ac:	33ff      	adds	r3, #255	; 0xff
   299ae:	001a      	movs	r2, r3
   299b0:	69fb      	ldr	r3, [r7, #28]
   299b2:	409a      	lsls	r2, r3
   299b4:	0013      	movs	r3, r2
   299b6:	001a      	movs	r2, r3
   299b8:	69bb      	ldr	r3, [r7, #24]
   299ba:	4313      	orrs	r3, r2
   299bc:	61bb      	str	r3, [r7, #24]
   299be:	e007      	b.n	299d0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   299c0:	2201      	movs	r2, #1
   299c2:	69fb      	ldr	r3, [r7, #28]
   299c4:	409a      	lsls	r2, r3
   299c6:	0013      	movs	r3, r2
   299c8:	001a      	movs	r2, r3
   299ca:	69bb      	ldr	r3, [r7, #24]
   299cc:	4313      	orrs	r3, r2
   299ce:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   299d0:	69fb      	ldr	r3, [r7, #28]
   299d2:	3301      	adds	r3, #1
   299d4:	61fb      	str	r3, [r7, #28]
   299d6:	69fb      	ldr	r3, [r7, #28]
   299d8:	2b07      	cmp	r3, #7
   299da:	d9b3      	bls.n	29944 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   299dc:	687b      	ldr	r3, [r7, #4]
   299de:	69ba      	ldr	r2, [r7, #24]
   299e0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   299e2:	2300      	movs	r3, #0
}
   299e4:	0018      	movs	r0, r3
   299e6:	46bd      	mov	sp, r7
   299e8:	b008      	add	sp, #32
   299ea:	bd80      	pop	{r7, pc}
   299ec:	00039044 	.word	0x00039044

000299f0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   299f0:	b580      	push	{r7, lr}
   299f2:	b088      	sub	sp, #32
   299f4:	af00      	add	r7, sp, #0
   299f6:	60b9      	str	r1, [r7, #8]
   299f8:	607a      	str	r2, [r7, #4]
   299fa:	230f      	movs	r3, #15
   299fc:	18fb      	adds	r3, r7, r3
   299fe:	1c02      	adds	r2, r0, #0
   29a00:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   29a02:	230f      	movs	r3, #15
   29a04:	18fb      	adds	r3, r7, r3
   29a06:	781a      	ldrb	r2, [r3, #0]
   29a08:	2317      	movs	r3, #23
   29a0a:	18fb      	adds	r3, r7, r3
   29a0c:	491d      	ldr	r1, [pc, #116]	; (29a84 <_tcc_build_waves+0x94>)
   29a0e:	5c8a      	ldrb	r2, [r1, r2]
   29a10:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   29a12:	68bb      	ldr	r3, [r7, #8]
   29a14:	3310      	adds	r3, #16
   29a16:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29a18:	693b      	ldr	r3, [r7, #16]
   29a1a:	7a5b      	ldrb	r3, [r3, #9]
   29a1c:	011b      	lsls	r3, r3, #4
   29a1e:	001a      	movs	r2, r3
   29a20:	2330      	movs	r3, #48	; 0x30
   29a22:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   29a24:	693b      	ldr	r3, [r7, #16]
   29a26:	7a1b      	ldrb	r3, [r3, #8]
   29a28:	0019      	movs	r1, r3
   29a2a:	2307      	movs	r3, #7
   29a2c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29a2e:	4313      	orrs	r3, r2
   29a30:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29a32:	2300      	movs	r3, #0
   29a34:	61fb      	str	r3, [r7, #28]
   29a36:	e01a      	b.n	29a6e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   29a38:	693a      	ldr	r2, [r7, #16]
   29a3a:	69fb      	ldr	r3, [r7, #28]
   29a3c:	18d3      	adds	r3, r2, r3
   29a3e:	3304      	adds	r3, #4
   29a40:	781b      	ldrb	r3, [r3, #0]
   29a42:	2b00      	cmp	r3, #0
   29a44:	d010      	beq.n	29a68 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   29a46:	2317      	movs	r3, #23
   29a48:	18fb      	adds	r3, r7, r3
   29a4a:	781a      	ldrb	r2, [r3, #0]
   29a4c:	69fb      	ldr	r3, [r7, #28]
   29a4e:	429a      	cmp	r2, r3
   29a50:	dc01      	bgt.n	29a56 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   29a52:	2317      	movs	r3, #23
   29a54:	e012      	b.n	29a7c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   29a56:	2380      	movs	r3, #128	; 0x80
   29a58:	025a      	lsls	r2, r3, #9
   29a5a:	69fb      	ldr	r3, [r7, #28]
   29a5c:	409a      	lsls	r2, r3
   29a5e:	0013      	movs	r3, r2
   29a60:	001a      	movs	r2, r3
   29a62:	69bb      	ldr	r3, [r7, #24]
   29a64:	4313      	orrs	r3, r2
   29a66:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29a68:	69fb      	ldr	r3, [r7, #28]
   29a6a:	3301      	adds	r3, #1
   29a6c:	61fb      	str	r3, [r7, #28]
   29a6e:	69fb      	ldr	r3, [r7, #28]
   29a70:	2b03      	cmp	r3, #3
   29a72:	dde1      	ble.n	29a38 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   29a74:	687b      	ldr	r3, [r7, #4]
   29a76:	69ba      	ldr	r2, [r7, #24]
   29a78:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   29a7a:	2300      	movs	r3, #0
}
   29a7c:	0018      	movs	r0, r3
   29a7e:	46bd      	mov	sp, r7
   29a80:	b008      	add	sp, #32
   29a82:	bd80      	pop	{r7, pc}
   29a84:	00039040 	.word	0x00039040

00029a88 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   29a88:	b590      	push	{r4, r7, lr}
   29a8a:	b091      	sub	sp, #68	; 0x44
   29a8c:	af00      	add	r7, sp, #0
   29a8e:	60f8      	str	r0, [r7, #12]
   29a90:	60b9      	str	r1, [r7, #8]
   29a92:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29a94:	233b      	movs	r3, #59	; 0x3b
   29a96:	18fc      	adds	r4, r7, r3
   29a98:	68bb      	ldr	r3, [r7, #8]
   29a9a:	0018      	movs	r0, r3
   29a9c:	4bc4      	ldr	r3, [pc, #784]	; (29db0 <tcc_init+0x328>)
   29a9e:	4798      	blx	r3
   29aa0:	0003      	movs	r3, r0
   29aa2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   29aa4:	233b      	movs	r3, #59	; 0x3b
   29aa6:	18fb      	adds	r3, r7, r3
   29aa8:	781a      	ldrb	r2, [r3, #0]
   29aaa:	4bc2      	ldr	r3, [pc, #776]	; (29db4 <tcc_init+0x32c>)
   29aac:	0092      	lsls	r2, r2, #2
   29aae:	58d3      	ldr	r3, [r2, r3]
   29ab0:	0019      	movs	r1, r3
   29ab2:	2002      	movs	r0, #2
   29ab4:	4bc0      	ldr	r3, [pc, #768]	; (29db8 <tcc_init+0x330>)
   29ab6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   29ab8:	68bb      	ldr	r3, [r7, #8]
   29aba:	681b      	ldr	r3, [r3, #0]
   29abc:	2202      	movs	r2, #2
   29abe:	4013      	ands	r3, r2
   29ac0:	d001      	beq.n	29ac6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   29ac2:	231c      	movs	r3, #28
   29ac4:	e1be      	b.n	29e44 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   29ac6:	68bb      	ldr	r3, [r7, #8]
   29ac8:	681b      	ldr	r3, [r3, #0]
   29aca:	2201      	movs	r2, #1
   29acc:	4013      	ands	r3, r2
   29ace:	d001      	beq.n	29ad4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   29ad0:	231c      	movs	r3, #28
   29ad2:	e1b7      	b.n	29e44 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   29ad4:	233b      	movs	r3, #59	; 0x3b
   29ad6:	18fb      	adds	r3, r7, r3
   29ad8:	781a      	ldrb	r2, [r3, #0]
   29ada:	4bb8      	ldr	r3, [pc, #736]	; (29dbc <tcc_init+0x334>)
   29adc:	0092      	lsls	r2, r2, #2
   29ade:	58d3      	ldr	r3, [r2, r3]
   29ae0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   29ae2:	687b      	ldr	r3, [r7, #4]
   29ae4:	681a      	ldr	r2, [r3, #0]
   29ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29ae8:	429a      	cmp	r2, r3
   29aea:	d804      	bhi.n	29af6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   29aec:	687b      	ldr	r3, [r7, #4]
   29aee:	685a      	ldr	r2, [r3, #4]
   29af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29af2:	429a      	cmp	r2, r3
   29af4:	d901      	bls.n	29afa <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   29af6:	2317      	movs	r3, #23
   29af8:	e1a4      	b.n	29e44 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29afa:	2300      	movs	r3, #0
   29afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   29afe:	e00e      	b.n	29b1e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29b00:	687a      	ldr	r2, [r7, #4]
   29b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b04:	3306      	adds	r3, #6
   29b06:	009b      	lsls	r3, r3, #2
   29b08:	18d3      	adds	r3, r2, r3
   29b0a:	3304      	adds	r3, #4
   29b0c:	681a      	ldr	r2, [r3, #0]
   29b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29b10:	429a      	cmp	r2, r3
   29b12:	d901      	bls.n	29b18 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29b14:	2317      	movs	r3, #23
   29b16:	e195      	b.n	29e44 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b1a:	3301      	adds	r3, #1
   29b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b20:	2b03      	cmp	r3, #3
   29b22:	dded      	ble.n	29b00 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29b24:	2300      	movs	r3, #0
   29b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   29b28:	e019      	b.n	29b5e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   29b2a:	687a      	ldr	r2, [r7, #4]
   29b2c:	2198      	movs	r1, #152	; 0x98
   29b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b30:	18d3      	adds	r3, r2, r3
   29b32:	185b      	adds	r3, r3, r1
   29b34:	781b      	ldrb	r3, [r3, #0]
   29b36:	2201      	movs	r2, #1
   29b38:	4053      	eors	r3, r2
   29b3a:	b2db      	uxtb	r3, r3
   29b3c:	2b00      	cmp	r3, #0
   29b3e:	d10a      	bne.n	29b56 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   29b40:	233b      	movs	r3, #59	; 0x3b
   29b42:	18fb      	adds	r3, r7, r3
   29b44:	781b      	ldrb	r3, [r3, #0]
   29b46:	4a9e      	ldr	r2, [pc, #632]	; (29dc0 <tcc_init+0x338>)
   29b48:	5cd3      	ldrb	r3, [r2, r3]
   29b4a:	001a      	movs	r2, r3
   29b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b4e:	429a      	cmp	r2, r3
   29b50:	dc02      	bgt.n	29b58 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   29b52:	2317      	movs	r3, #23
   29b54:	e176      	b.n	29e44 <tcc_init+0x3bc>
			continue;
   29b56:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b5a:	3301      	adds	r3, #1
   29b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b60:	2b07      	cmp	r3, #7
   29b62:	dde2      	ble.n	29b2a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   29b64:	2300      	movs	r3, #0
   29b66:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   29b68:	2333      	movs	r3, #51	; 0x33
   29b6a:	18fc      	adds	r4, r7, r3
   29b6c:	232c      	movs	r3, #44	; 0x2c
   29b6e:	18fa      	adds	r2, r7, r3
   29b70:	6879      	ldr	r1, [r7, #4]
   29b72:	233b      	movs	r3, #59	; 0x3b
   29b74:	18fb      	adds	r3, r7, r3
   29b76:	781b      	ldrb	r3, [r3, #0]
   29b78:	0018      	movs	r0, r3
   29b7a:	4b92      	ldr	r3, [pc, #584]	; (29dc4 <tcc_init+0x33c>)
   29b7c:	4798      	blx	r3
   29b7e:	0003      	movs	r3, r0
   29b80:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29b82:	2333      	movs	r3, #51	; 0x33
   29b84:	18fb      	adds	r3, r7, r3
   29b86:	781b      	ldrb	r3, [r3, #0]
   29b88:	2b00      	cmp	r3, #0
   29b8a:	d003      	beq.n	29b94 <tcc_init+0x10c>
		return status;
   29b8c:	2333      	movs	r3, #51	; 0x33
   29b8e:	18fb      	adds	r3, r7, r3
   29b90:	781b      	ldrb	r3, [r3, #0]
   29b92:	e157      	b.n	29e44 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   29b94:	232b      	movs	r3, #43	; 0x2b
   29b96:	18fa      	adds	r2, r7, r3
   29b98:	6879      	ldr	r1, [r7, #4]
   29b9a:	233b      	movs	r3, #59	; 0x3b
   29b9c:	18fb      	adds	r3, r7, r3
   29b9e:	781b      	ldrb	r3, [r3, #0]
   29ba0:	0018      	movs	r0, r3
   29ba2:	4b89      	ldr	r3, [pc, #548]	; (29dc8 <tcc_init+0x340>)
   29ba4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   29ba6:	2333      	movs	r3, #51	; 0x33
   29ba8:	18fc      	adds	r4, r7, r3
   29baa:	2320      	movs	r3, #32
   29bac:	18fa      	adds	r2, r7, r3
   29bae:	6879      	ldr	r1, [r7, #4]
   29bb0:	233b      	movs	r3, #59	; 0x3b
   29bb2:	18fb      	adds	r3, r7, r3
   29bb4:	781b      	ldrb	r3, [r3, #0]
   29bb6:	0018      	movs	r0, r3
   29bb8:	4b84      	ldr	r3, [pc, #528]	; (29dcc <tcc_init+0x344>)
   29bba:	4798      	blx	r3
   29bbc:	0003      	movs	r3, r0
   29bbe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29bc0:	2333      	movs	r3, #51	; 0x33
   29bc2:	18fb      	adds	r3, r7, r3
   29bc4:	781b      	ldrb	r3, [r3, #0]
   29bc6:	2b00      	cmp	r3, #0
   29bc8:	d003      	beq.n	29bd2 <tcc_init+0x14a>
		return status;
   29bca:	2333      	movs	r3, #51	; 0x33
   29bcc:	18fb      	adds	r3, r7, r3
   29bce:	781b      	ldrb	r3, [r3, #0]
   29bd0:	e138      	b.n	29e44 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   29bd2:	2300      	movs	r3, #0
   29bd4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   29bd6:	2333      	movs	r3, #51	; 0x33
   29bd8:	18fc      	adds	r4, r7, r3
   29bda:	231c      	movs	r3, #28
   29bdc:	18fa      	adds	r2, r7, r3
   29bde:	6879      	ldr	r1, [r7, #4]
   29be0:	233b      	movs	r3, #59	; 0x3b
   29be2:	18fb      	adds	r3, r7, r3
   29be4:	781b      	ldrb	r3, [r3, #0]
   29be6:	0018      	movs	r0, r3
   29be8:	4b79      	ldr	r3, [pc, #484]	; (29dd0 <tcc_init+0x348>)
   29bea:	4798      	blx	r3
   29bec:	0003      	movs	r3, r0
   29bee:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29bf0:	2333      	movs	r3, #51	; 0x33
   29bf2:	18fb      	adds	r3, r7, r3
   29bf4:	781b      	ldrb	r3, [r3, #0]
   29bf6:	2b00      	cmp	r3, #0
   29bf8:	d003      	beq.n	29c02 <tcc_init+0x17a>
		return status;
   29bfa:	2333      	movs	r3, #51	; 0x33
   29bfc:	18fb      	adds	r3, r7, r3
   29bfe:	781b      	ldrb	r3, [r3, #0]
   29c00:	e120      	b.n	29e44 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29c02:	2333      	movs	r3, #51	; 0x33
   29c04:	18fc      	adds	r4, r7, r3
   29c06:	2318      	movs	r3, #24
   29c08:	18fa      	adds	r2, r7, r3
   29c0a:	6879      	ldr	r1, [r7, #4]
   29c0c:	233b      	movs	r3, #59	; 0x3b
   29c0e:	18fb      	adds	r3, r7, r3
   29c10:	781b      	ldrb	r3, [r3, #0]
   29c12:	0018      	movs	r0, r3
   29c14:	4b6f      	ldr	r3, [pc, #444]	; (29dd4 <tcc_init+0x34c>)
   29c16:	4798      	blx	r3
   29c18:	0003      	movs	r3, r0
   29c1a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29c1c:	2333      	movs	r3, #51	; 0x33
   29c1e:	18fb      	adds	r3, r7, r3
   29c20:	781b      	ldrb	r3, [r3, #0]
   29c22:	2b00      	cmp	r3, #0
   29c24:	d003      	beq.n	29c2e <tcc_init+0x1a6>
		return status;
   29c26:	2333      	movs	r3, #51	; 0x33
   29c28:	18fb      	adds	r3, r7, r3
   29c2a:	781b      	ldrb	r3, [r3, #0]
   29c2c:	e10a      	b.n	29e44 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29c2e:	2300      	movs	r3, #0
   29c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c32:	e009      	b.n	29c48 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29c34:	68fa      	ldr	r2, [r7, #12]
   29c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c38:	009b      	lsls	r3, r3, #2
   29c3a:	18d3      	adds	r3, r2, r3
   29c3c:	3304      	adds	r3, #4
   29c3e:	2200      	movs	r2, #0
   29c40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c44:	3301      	adds	r3, #1
   29c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   29c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29c4a:	2b0b      	cmp	r3, #11
   29c4c:	ddf2      	ble.n	29c34 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   29c4e:	68fb      	ldr	r3, [r7, #12]
   29c50:	2200      	movs	r2, #0
   29c52:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   29c54:	68fb      	ldr	r3, [r7, #12]
   29c56:	2200      	movs	r2, #0
   29c58:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   29c5a:	233b      	movs	r3, #59	; 0x3b
   29c5c:	18fb      	adds	r3, r7, r3
   29c5e:	781a      	ldrb	r2, [r3, #0]
   29c60:	4b5d      	ldr	r3, [pc, #372]	; (29dd8 <tcc_init+0x350>)
   29c62:	0092      	lsls	r2, r2, #2
   29c64:	68f9      	ldr	r1, [r7, #12]
   29c66:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   29c68:	68fb      	ldr	r3, [r7, #12]
   29c6a:	68ba      	ldr	r2, [r7, #8]
   29c6c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   29c6e:	687b      	ldr	r3, [r7, #4]
   29c70:	22a0      	movs	r2, #160	; 0xa0
   29c72:	5c99      	ldrb	r1, [r3, r2]
   29c74:	68fb      	ldr	r3, [r7, #12]
   29c76:	223c      	movs	r2, #60	; 0x3c
   29c78:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   29c7a:	2314      	movs	r3, #20
   29c7c:	18fb      	adds	r3, r7, r3
   29c7e:	0018      	movs	r0, r3
   29c80:	4b56      	ldr	r3, [pc, #344]	; (29ddc <tcc_init+0x354>)
   29c82:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   29c84:	687b      	ldr	r3, [r7, #4]
   29c86:	7a9a      	ldrb	r2, [r3, #10]
   29c88:	2314      	movs	r3, #20
   29c8a:	18fb      	adds	r3, r7, r3
   29c8c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   29c8e:	233b      	movs	r3, #59	; 0x3b
   29c90:	18fb      	adds	r3, r7, r3
   29c92:	781b      	ldrb	r3, [r3, #0]
   29c94:	4a52      	ldr	r2, [pc, #328]	; (29de0 <tcc_init+0x358>)
   29c96:	5cd3      	ldrb	r3, [r2, r3]
   29c98:	2214      	movs	r2, #20
   29c9a:	18ba      	adds	r2, r7, r2
   29c9c:	0011      	movs	r1, r2
   29c9e:	0018      	movs	r0, r3
   29ca0:	4b50      	ldr	r3, [pc, #320]	; (29de4 <tcc_init+0x35c>)
   29ca2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   29ca4:	233b      	movs	r3, #59	; 0x3b
   29ca6:	18fb      	adds	r3, r7, r3
   29ca8:	781b      	ldrb	r3, [r3, #0]
   29caa:	4a4d      	ldr	r2, [pc, #308]	; (29de0 <tcc_init+0x358>)
   29cac:	5cd3      	ldrb	r3, [r2, r3]
   29cae:	0018      	movs	r0, r3
   29cb0:	4b4d      	ldr	r3, [pc, #308]	; (29de8 <tcc_init+0x360>)
   29cb2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29cb4:	2300      	movs	r3, #0
   29cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   29cb8:	e02d      	b.n	29d16 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   29cba:	687a      	ldr	r2, [r7, #4]
   29cbc:	2198      	movs	r1, #152	; 0x98
   29cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29cc0:	18d3      	adds	r3, r2, r3
   29cc2:	185b      	adds	r3, r3, r1
   29cc4:	781b      	ldrb	r3, [r3, #0]
   29cc6:	2201      	movs	r2, #1
   29cc8:	4053      	eors	r3, r2
   29cca:	b2db      	uxtb	r3, r3
   29ccc:	2b00      	cmp	r3, #0
   29cce:	d11e      	bne.n	29d0e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   29cd0:	2310      	movs	r3, #16
   29cd2:	18fb      	adds	r3, r7, r3
   29cd4:	0018      	movs	r0, r3
   29cd6:	4b45      	ldr	r3, [pc, #276]	; (29dec <tcc_init+0x364>)
   29cd8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   29cda:	687b      	ldr	r3, [r7, #4]
   29cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29cde:	321e      	adds	r2, #30
   29ce0:	0092      	lsls	r2, r2, #2
   29ce2:	58d3      	ldr	r3, [r2, r3]
   29ce4:	b2da      	uxtb	r2, r3
   29ce6:	2310      	movs	r3, #16
   29ce8:	18fb      	adds	r3, r7, r3
   29cea:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   29cec:	2310      	movs	r3, #16
   29cee:	18fb      	adds	r3, r7, r3
   29cf0:	2201      	movs	r2, #1
   29cf2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   29cf4:	687b      	ldr	r3, [r7, #4]
   29cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29cf8:	3216      	adds	r2, #22
   29cfa:	0092      	lsls	r2, r2, #2
   29cfc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   29cfe:	b2db      	uxtb	r3, r3
   29d00:	2210      	movs	r2, #16
   29d02:	18ba      	adds	r2, r7, r2
   29d04:	0011      	movs	r1, r2
   29d06:	0018      	movs	r0, r3
   29d08:	4b39      	ldr	r3, [pc, #228]	; (29df0 <tcc_init+0x368>)
   29d0a:	4798      	blx	r3
   29d0c:	e000      	b.n	29d10 <tcc_init+0x288>
			continue;
   29d0e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29d12:	3301      	adds	r3, #1
   29d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   29d16:	233b      	movs	r3, #59	; 0x3b
   29d18:	18fb      	adds	r3, r7, r3
   29d1a:	781b      	ldrb	r3, [r3, #0]
   29d1c:	4a28      	ldr	r2, [pc, #160]	; (29dc0 <tcc_init+0x338>)
   29d1e:	5cd3      	ldrb	r3, [r2, r3]
   29d20:	001a      	movs	r2, r3
   29d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29d24:	429a      	cmp	r2, r3
   29d26:	dcc8      	bgt.n	29cba <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   29d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29d2a:	68bb      	ldr	r3, [r7, #8]
   29d2c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29d2e:	46c0      	nop			; (mov r8, r8)
   29d30:	68bb      	ldr	r3, [r7, #8]
   29d32:	689b      	ldr	r3, [r3, #8]
   29d34:	2204      	movs	r2, #4
   29d36:	4013      	ands	r3, r2
   29d38:	d1fa      	bne.n	29d30 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   29d3a:	68bb      	ldr	r3, [r7, #8]
   29d3c:	22ff      	movs	r2, #255	; 0xff
   29d3e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29d40:	46c0      	nop			; (mov r8, r8)
   29d42:	68bb      	ldr	r3, [r7, #8]
   29d44:	689b      	ldr	r3, [r3, #8]
   29d46:	2204      	movs	r2, #4
   29d48:	4013      	ands	r3, r2
   29d4a:	d1fa      	bne.n	29d42 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   29d4c:	232b      	movs	r3, #43	; 0x2b
   29d4e:	18fb      	adds	r3, r7, r3
   29d50:	781a      	ldrb	r2, [r3, #0]
   29d52:	68bb      	ldr	r3, [r7, #8]
   29d54:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   29d56:	2320      	movs	r3, #32
   29d58:	18fb      	adds	r3, r7, r3
   29d5a:	681a      	ldr	r2, [r3, #0]
   29d5c:	68bb      	ldr	r3, [r7, #8]
   29d5e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   29d60:	2320      	movs	r3, #32
   29d62:	18fb      	adds	r3, r7, r3
   29d64:	685a      	ldr	r2, [r3, #4]
   29d66:	68bb      	ldr	r3, [r7, #8]
   29d68:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   29d6a:	69fa      	ldr	r2, [r7, #28]
   29d6c:	68bb      	ldr	r3, [r7, #8]
   29d6e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   29d70:	46c0      	nop			; (mov r8, r8)
   29d72:	68bb      	ldr	r3, [r7, #8]
   29d74:	689b      	ldr	r3, [r3, #8]
   29d76:	4a1f      	ldr	r2, [pc, #124]	; (29df4 <tcc_init+0x36c>)
   29d78:	4013      	ands	r3, r2
   29d7a:	d1fa      	bne.n	29d72 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   29d7c:	69ba      	ldr	r2, [r7, #24]
   29d7e:	68bb      	ldr	r3, [r7, #8]
   29d80:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   29d82:	46c0      	nop			; (mov r8, r8)
   29d84:	68bb      	ldr	r3, [r7, #8]
   29d86:	689b      	ldr	r3, [r3, #8]
   29d88:	2210      	movs	r2, #16
   29d8a:	4013      	ands	r3, r2
   29d8c:	d1fa      	bne.n	29d84 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   29d8e:	687b      	ldr	r3, [r7, #4]
   29d90:	681a      	ldr	r2, [r3, #0]
   29d92:	68bb      	ldr	r3, [r7, #8]
   29d94:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   29d96:	46c0      	nop			; (mov r8, r8)
   29d98:	68bb      	ldr	r3, [r7, #8]
   29d9a:	689b      	ldr	r3, [r3, #8]
   29d9c:	4a16      	ldr	r2, [pc, #88]	; (29df8 <tcc_init+0x370>)
   29d9e:	4013      	ands	r3, r2
   29da0:	d1fa      	bne.n	29d98 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   29da2:	687b      	ldr	r3, [r7, #4]
   29da4:	685a      	ldr	r2, [r3, #4]
   29da6:	68bb      	ldr	r3, [r7, #8]
   29da8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   29daa:	2300      	movs	r3, #0
   29dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   29dae:	e03f      	b.n	29e30 <tcc_init+0x3a8>
   29db0:	000293f1 	.word	0x000293f1
   29db4:	00039028 	.word	0x00039028
   29db8:	0002936d 	.word	0x0002936d
   29dbc:	00039034 	.word	0x00039034
   29dc0:	00039044 	.word	0x00039044
   29dc4:	000296fd 	.word	0x000296fd
   29dc8:	000297a1 	.word	0x000297a1
   29dcc:	000297fd 	.word	0x000297fd
   29dd0:	00029919 	.word	0x00029919
   29dd4:	000299f1 	.word	0x000299f1
   29dd8:	20005be8 	.word	0x20005be8
   29ddc:	00029355 	.word	0x00029355
   29de0:	00039024 	.word	0x00039024
   29de4:	00028f6d 	.word	0x00028f6d
   29de8:	00028fb1 	.word	0x00028fb1
   29dec:	000293c9 	.word	0x000293c9
   29df0:	000292cd 	.word	0x000292cd
   29df4:	00020040 	.word	0x00020040
   29df8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   29dfc:	46c0      	nop			; (mov r8, r8)
   29dfe:	68bb      	ldr	r3, [r7, #8]
   29e00:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   29e02:	4912      	ldr	r1, [pc, #72]	; (29e4c <tcc_init+0x3c4>)
   29e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29e06:	4091      	lsls	r1, r2
   29e08:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   29e0a:	4013      	ands	r3, r2
   29e0c:	d1f7      	bne.n	29dfe <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   29e0e:	687a      	ldr	r2, [r7, #4]
   29e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e12:	3306      	adds	r3, #6
   29e14:	009b      	lsls	r3, r3, #2
   29e16:	18d3      	adds	r3, r2, r3
   29e18:	3304      	adds	r3, #4
   29e1a:	681a      	ldr	r2, [r3, #0]
   29e1c:	68b9      	ldr	r1, [r7, #8]
   29e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e20:	3310      	adds	r3, #16
   29e22:	009b      	lsls	r3, r3, #2
   29e24:	18cb      	adds	r3, r1, r3
   29e26:	3304      	adds	r3, #4
   29e28:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   29e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e2c:	3301      	adds	r3, #1
   29e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e30:	233b      	movs	r3, #59	; 0x3b
   29e32:	18fb      	adds	r3, r7, r3
   29e34:	781b      	ldrb	r3, [r3, #0]
   29e36:	4a06      	ldr	r2, [pc, #24]	; (29e50 <tcc_init+0x3c8>)
   29e38:	5cd3      	ldrb	r3, [r2, r3]
   29e3a:	001a      	movs	r2, r3
   29e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e3e:	429a      	cmp	r2, r3
   29e40:	dcdc      	bgt.n	29dfc <tcc_init+0x374>
	}

	return STATUS_OK;
   29e42:	2300      	movs	r3, #0
}
   29e44:	0018      	movs	r0, r3
   29e46:	46bd      	mov	sp, r7
   29e48:	b011      	add	sp, #68	; 0x44
   29e4a:	bd90      	pop	{r4, r7, pc}
   29e4c:	00080100 	.word	0x00080100
   29e50:	00039040 	.word	0x00039040

00029e54 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
   29e54:	b590      	push	{r4, r7, lr}
   29e56:	b089      	sub	sp, #36	; 0x24
   29e58:	af00      	add	r7, sp, #0
   29e5a:	60f8      	str	r0, [r7, #12]
   29e5c:	0008      	movs	r0, r1
   29e5e:	607a      	str	r2, [r7, #4]
   29e60:	0019      	movs	r1, r3
   29e62:	230b      	movs	r3, #11
   29e64:	18fb      	adds	r3, r7, r3
   29e66:	1c02      	adds	r2, r0, #0
   29e68:	701a      	strb	r2, [r3, #0]
   29e6a:	230a      	movs	r3, #10
   29e6c:	18fb      	adds	r3, r7, r3
   29e6e:	1c0a      	adds	r2, r1, #0
   29e70:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   29e72:	68fb      	ldr	r3, [r7, #12]
   29e74:	681b      	ldr	r3, [r3, #0]
   29e76:	61fb      	str	r3, [r7, #28]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
   29e78:	231b      	movs	r3, #27
   29e7a:	18fc      	adds	r4, r7, r3
   29e7c:	69fb      	ldr	r3, [r7, #28]
   29e7e:	0018      	movs	r0, r3
   29e80:	4b2e      	ldr	r3, [pc, #184]	; (29f3c <_tcc_set_compare_value+0xe8>)
   29e82:	4798      	blx	r3
   29e84:	0003      	movs	r3, r0
   29e86:	7023      	strb	r3, [r4, #0]

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
   29e88:	231b      	movs	r3, #27
   29e8a:	18fb      	adds	r3, r7, r3
   29e8c:	781b      	ldrb	r3, [r3, #0]
   29e8e:	4a2c      	ldr	r2, [pc, #176]	; (29f40 <_tcc_set_compare_value+0xec>)
   29e90:	5cd3      	ldrb	r3, [r2, r3]
   29e92:	220b      	movs	r2, #11
   29e94:	18ba      	adds	r2, r7, r2
   29e96:	7812      	ldrb	r2, [r2, #0]
   29e98:	429a      	cmp	r2, r3
   29e9a:	d301      	bcc.n	29ea0 <_tcc_set_compare_value+0x4c>
		return STATUS_ERR_INVALID_ARG;
   29e9c:	2317      	movs	r3, #23
   29e9e:	e049      	b.n	29f34 <_tcc_set_compare_value+0xe0>
	}

	uint32_t max_count = _tcc_maxs[module_index];
   29ea0:	231b      	movs	r3, #27
   29ea2:	18fb      	adds	r3, r7, r3
   29ea4:	781a      	ldrb	r2, [r3, #0]
   29ea6:	4b27      	ldr	r3, [pc, #156]	; (29f44 <_tcc_set_compare_value+0xf0>)
   29ea8:	0092      	lsls	r2, r2, #2
   29eaa:	58d3      	ldr	r3, [r2, r3]
   29eac:	617b      	str	r3, [r7, #20]

	/* Check compare value */
	if (compare > max_count) {
   29eae:	687a      	ldr	r2, [r7, #4]
   29eb0:	697b      	ldr	r3, [r7, #20]
   29eb2:	429a      	cmp	r2, r3
   29eb4:	d901      	bls.n	29eba <_tcc_set_compare_value+0x66>
		return STATUS_ERR_INVALID_ARG;
   29eb6:	2317      	movs	r3, #23
   29eb8:	e03c      	b.n	29f34 <_tcc_set_compare_value+0xe0>
	}

	if (double_buffering_enabled) {
   29eba:	230a      	movs	r3, #10
   29ebc:	18fb      	adds	r3, r7, r3
   29ebe:	781b      	ldrb	r3, [r3, #0]
   29ec0:	2b00      	cmp	r3, #0
   29ec2:	d020      	beq.n	29f06 <_tcc_set_compare_value+0xb2>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
   29ec4:	46c0      	nop			; (mov r8, r8)
   29ec6:	69fb      	ldr	r3, [r7, #28]
   29ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
   29eca:	220b      	movs	r2, #11
   29ecc:	18ba      	adds	r2, r7, r2
   29ece:	7812      	ldrb	r2, [r2, #0]
   29ed0:	2180      	movs	r1, #128	; 0x80
   29ed2:	0249      	lsls	r1, r1, #9
   29ed4:	4091      	lsls	r1, r2
   29ed6:	000a      	movs	r2, r1
		while(tcc_module->STATUS.reg  &
   29ed8:	4013      	ands	r3, r2
   29eda:	d1f4      	bne.n	29ec6 <_tcc_set_compare_value+0x72>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
   29edc:	46c0      	nop			; (mov r8, r8)
   29ede:	69fb      	ldr	r3, [r7, #28]
   29ee0:	689b      	ldr	r3, [r3, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
   29ee2:	220b      	movs	r2, #11
   29ee4:	18ba      	adds	r2, r7, r2
   29ee6:	7812      	ldrb	r2, [r2, #0]
   29ee8:	2180      	movs	r1, #128	; 0x80
   29eea:	0309      	lsls	r1, r1, #12
   29eec:	4091      	lsls	r1, r2
   29eee:	000a      	movs	r2, r1
		while(tcc_module->SYNCBUSY.reg  &
   29ef0:	4013      	ands	r3, r2
   29ef2:	d1f4      	bne.n	29ede <_tcc_set_compare_value+0x8a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
   29ef4:	230b      	movs	r3, #11
   29ef6:	18fb      	adds	r3, r7, r3
   29ef8:	781a      	ldrb	r2, [r3, #0]
   29efa:	69fb      	ldr	r3, [r7, #28]
   29efc:	321c      	adds	r2, #28
   29efe:	0092      	lsls	r2, r2, #2
   29f00:	6879      	ldr	r1, [r7, #4]
   29f02:	50d1      	str	r1, [r2, r3]
   29f04:	e015      	b.n	29f32 <_tcc_set_compare_value+0xde>
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
   29f06:	46c0      	nop			; (mov r8, r8)
   29f08:	69fb      	ldr	r3, [r7, #28]
   29f0a:	689b      	ldr	r3, [r3, #8]
   29f0c:	220b      	movs	r2, #11
   29f0e:	18ba      	adds	r2, r7, r2
   29f10:	7812      	ldrb	r2, [r2, #0]
   29f12:	2180      	movs	r1, #128	; 0x80
   29f14:	0049      	lsls	r1, r1, #1
   29f16:	4091      	lsls	r1, r2
   29f18:	000a      	movs	r2, r1
   29f1a:	4013      	ands	r3, r2
   29f1c:	d1f4      	bne.n	29f08 <_tcc_set_compare_value+0xb4>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
   29f1e:	230b      	movs	r3, #11
   29f20:	18fb      	adds	r3, r7, r3
   29f22:	781b      	ldrb	r3, [r3, #0]
   29f24:	69fa      	ldr	r2, [r7, #28]
   29f26:	3310      	adds	r3, #16
   29f28:	009b      	lsls	r3, r3, #2
   29f2a:	18d3      	adds	r3, r2, r3
   29f2c:	3304      	adds	r3, #4
   29f2e:	687a      	ldr	r2, [r7, #4]
   29f30:	601a      	str	r2, [r3, #0]
	}
	return STATUS_OK;
   29f32:	2300      	movs	r3, #0
}
   29f34:	0018      	movs	r0, r3
   29f36:	46bd      	mov	sp, r7
   29f38:	b009      	add	sp, #36	; 0x24
   29f3a:	bd90      	pop	{r4, r7, pc}
   29f3c:	000293f1 	.word	0x000293f1
   29f40:	00039040 	.word	0x00039040
   29f44:	00039034 	.word	0x00039034

00029f48 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
   29f48:	b590      	push	{r4, r7, lr}
   29f4a:	b085      	sub	sp, #20
   29f4c:	af00      	add	r7, sp, #0
   29f4e:	60f8      	str	r0, [r7, #12]
   29f50:	607a      	str	r2, [r7, #4]
   29f52:	230b      	movs	r3, #11
   29f54:	18fb      	adds	r3, r7, r3
   29f56:	1c0a      	adds	r2, r1, #0
   29f58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
   29f5a:	68fb      	ldr	r3, [r7, #12]
   29f5c:	223c      	movs	r2, #60	; 0x3c
   29f5e:	5c9c      	ldrb	r4, [r3, r2]
   29f60:	687a      	ldr	r2, [r7, #4]
   29f62:	230b      	movs	r3, #11
   29f64:	18fb      	adds	r3, r7, r3
   29f66:	7819      	ldrb	r1, [r3, #0]
   29f68:	68f8      	ldr	r0, [r7, #12]
   29f6a:	0023      	movs	r3, r4
   29f6c:	4c03      	ldr	r4, [pc, #12]	; (29f7c <tcc_set_compare_value+0x34>)
   29f6e:	47a0      	blx	r4
   29f70:	0003      	movs	r3, r0
			module_inst->double_buffering_enabled);
}
   29f72:	0018      	movs	r0, r3
   29f74:	46bd      	mov	sp, r7
   29f76:	b005      	add	sp, #20
   29f78:	bd90      	pop	{r4, r7, pc}
   29f7a:	46c0      	nop			; (mov r8, r8)
   29f7c:	00029e55 	.word	0x00029e55

00029f80 <system_interrupt_enable>:
{
   29f80:	b580      	push	{r7, lr}
   29f82:	b082      	sub	sp, #8
   29f84:	af00      	add	r7, sp, #0
   29f86:	0002      	movs	r2, r0
   29f88:	1dfb      	adds	r3, r7, #7
   29f8a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29f8c:	4b06      	ldr	r3, [pc, #24]	; (29fa8 <system_interrupt_enable+0x28>)
   29f8e:	1dfa      	adds	r2, r7, #7
   29f90:	7812      	ldrb	r2, [r2, #0]
   29f92:	0011      	movs	r1, r2
   29f94:	221f      	movs	r2, #31
   29f96:	400a      	ands	r2, r1
   29f98:	2101      	movs	r1, #1
   29f9a:	4091      	lsls	r1, r2
   29f9c:	000a      	movs	r2, r1
   29f9e:	601a      	str	r2, [r3, #0]
}
   29fa0:	46c0      	nop			; (mov r8, r8)
   29fa2:	46bd      	mov	sp, r7
   29fa4:	b002      	add	sp, #8
   29fa6:	bd80      	pop	{r7, pc}
   29fa8:	e000e100 	.word	0xe000e100

00029fac <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   29fac:	b580      	push	{r7, lr}
   29fae:	b082      	sub	sp, #8
   29fb0:	af00      	add	r7, sp, #0
   29fb2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   29fb4:	4a04      	ldr	r2, [pc, #16]	; (29fc8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   29fb6:	687b      	ldr	r3, [r7, #4]
   29fb8:	18d3      	adds	r3, r2, r3
   29fba:	781b      	ldrb	r3, [r3, #0]
   29fbc:	b25b      	sxtb	r3, r3
}
   29fbe:	0018      	movs	r0, r3
   29fc0:	46bd      	mov	sp, r7
   29fc2:	b002      	add	sp, #8
   29fc4:	bd80      	pop	{r7, pc}
   29fc6:	46c0      	nop			; (mov r8, r8)
   29fc8:	20000118 	.word	0x20000118

00029fcc <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   29fcc:	b580      	push	{r7, lr}
   29fce:	b084      	sub	sp, #16
   29fd0:	af00      	add	r7, sp, #0
   29fd2:	60f8      	str	r0, [r7, #12]
   29fd4:	60b9      	str	r1, [r7, #8]
   29fd6:	1dfb      	adds	r3, r7, #7
   29fd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29fda:	1dfb      	adds	r3, r7, #7
   29fdc:	781b      	ldrb	r3, [r3, #0]
   29fde:	68fa      	ldr	r2, [r7, #12]
   29fe0:	009b      	lsls	r3, r3, #2
   29fe2:	18d3      	adds	r3, r2, r3
   29fe4:	3304      	adds	r3, #4
   29fe6:	68ba      	ldr	r2, [r7, #8]
   29fe8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   29fea:	68fb      	ldr	r3, [r7, #12]
   29fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29fee:	1dfb      	adds	r3, r7, #7
   29ff0:	7819      	ldrb	r1, [r3, #0]
   29ff2:	4b05      	ldr	r3, [pc, #20]	; (2a008 <tcc_register_callback+0x3c>)
   29ff4:	0089      	lsls	r1, r1, #2
   29ff6:	58cb      	ldr	r3, [r1, r3]
   29ff8:	431a      	orrs	r2, r3
   29ffa:	68fb      	ldr	r3, [r7, #12]
   29ffc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   29ffe:	2300      	movs	r3, #0
}
   2a000:	0018      	movs	r0, r3
   2a002:	46bd      	mov	sp, r7
   2a004:	b004      	add	sp, #16
   2a006:	bd80      	pop	{r7, pc}
   2a008:	00039048 	.word	0x00039048

0002a00c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a00c:	b580      	push	{r7, lr}
   2a00e:	b082      	sub	sp, #8
   2a010:	af00      	add	r7, sp, #0
   2a012:	6078      	str	r0, [r7, #4]
   2a014:	000a      	movs	r2, r1
   2a016:	1cfb      	adds	r3, r7, #3
   2a018:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a01a:	687b      	ldr	r3, [r7, #4]
   2a01c:	681b      	ldr	r3, [r3, #0]
   2a01e:	0018      	movs	r0, r3
   2a020:	4b0f      	ldr	r3, [pc, #60]	; (2a060 <tcc_enable_callback+0x54>)
   2a022:	4798      	blx	r3
   2a024:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a026:	0018      	movs	r0, r3
   2a028:	4b0e      	ldr	r3, [pc, #56]	; (2a064 <tcc_enable_callback+0x58>)
   2a02a:	4798      	blx	r3
   2a02c:	0003      	movs	r3, r0
   2a02e:	0018      	movs	r0, r3
   2a030:	4b0d      	ldr	r3, [pc, #52]	; (2a068 <tcc_enable_callback+0x5c>)
   2a032:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a034:	687b      	ldr	r3, [r7, #4]
   2a036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a038:	1cfb      	adds	r3, r7, #3
   2a03a:	7819      	ldrb	r1, [r3, #0]
   2a03c:	4b0b      	ldr	r3, [pc, #44]	; (2a06c <tcc_enable_callback+0x60>)
   2a03e:	0089      	lsls	r1, r1, #2
   2a040:	58cb      	ldr	r3, [r1, r3]
   2a042:	431a      	orrs	r2, r3
   2a044:	687b      	ldr	r3, [r7, #4]
   2a046:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a048:	687b      	ldr	r3, [r7, #4]
   2a04a:	681b      	ldr	r3, [r3, #0]
   2a04c:	1cfa      	adds	r2, r7, #3
   2a04e:	7811      	ldrb	r1, [r2, #0]
   2a050:	4a06      	ldr	r2, [pc, #24]	; (2a06c <tcc_enable_callback+0x60>)
   2a052:	0089      	lsls	r1, r1, #2
   2a054:	588a      	ldr	r2, [r1, r2]
   2a056:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a058:	46c0      	nop			; (mov r8, r8)
   2a05a:	46bd      	mov	sp, r7
   2a05c:	b002      	add	sp, #8
   2a05e:	bd80      	pop	{r7, pc}
   2a060:	000293f1 	.word	0x000293f1
   2a064:	00029fad 	.word	0x00029fad
   2a068:	00029f81 	.word	0x00029f81
   2a06c:	00039048 	.word	0x00039048

0002a070 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a070:	b580      	push	{r7, lr}
   2a072:	af00      	add	r7, sp, #0
   2a074:	2000      	movs	r0, #0
   2a076:	4b02      	ldr	r3, [pc, #8]	; (2a080 <TCC0_Handler+0x10>)
   2a078:	4798      	blx	r3
   2a07a:	46c0      	nop			; (mov r8, r8)
   2a07c:	46bd      	mov	sp, r7
   2a07e:	bd80      	pop	{r7, pc}
   2a080:	0002a0ad 	.word	0x0002a0ad

0002a084 <TCC1_Handler>:
   2a084:	b580      	push	{r7, lr}
   2a086:	af00      	add	r7, sp, #0
   2a088:	2001      	movs	r0, #1
   2a08a:	4b02      	ldr	r3, [pc, #8]	; (2a094 <TCC1_Handler+0x10>)
   2a08c:	4798      	blx	r3
   2a08e:	46c0      	nop			; (mov r8, r8)
   2a090:	46bd      	mov	sp, r7
   2a092:	bd80      	pop	{r7, pc}
   2a094:	0002a0ad 	.word	0x0002a0ad

0002a098 <TCC2_Handler>:
   2a098:	b580      	push	{r7, lr}
   2a09a:	af00      	add	r7, sp, #0
   2a09c:	2002      	movs	r0, #2
   2a09e:	4b02      	ldr	r3, [pc, #8]	; (2a0a8 <TCC2_Handler+0x10>)
   2a0a0:	4798      	blx	r3
   2a0a2:	46c0      	nop			; (mov r8, r8)
   2a0a4:	46bd      	mov	sp, r7
   2a0a6:	bd80      	pop	{r7, pc}
   2a0a8:	0002a0ad 	.word	0x0002a0ad

0002a0ac <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a0ac:	b580      	push	{r7, lr}
   2a0ae:	b086      	sub	sp, #24
   2a0b0:	af00      	add	r7, sp, #0
   2a0b2:	0002      	movs	r2, r0
   2a0b4:	1dfb      	adds	r3, r7, #7
   2a0b6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a0b8:	1dfb      	adds	r3, r7, #7
   2a0ba:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a0bc:	4b18      	ldr	r3, [pc, #96]	; (2a120 <_tcc_interrupt_handler+0x74>)
   2a0be:	0092      	lsls	r2, r2, #2
   2a0c0:	58d3      	ldr	r3, [r2, r3]
   2a0c2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a0c4:	693b      	ldr	r3, [r7, #16]
   2a0c6:	681b      	ldr	r3, [r3, #0]
   2a0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a0ca:	693b      	ldr	r3, [r7, #16]
   2a0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a0ce:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a0d0:	693b      	ldr	r3, [r7, #16]
   2a0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a0d4:	4013      	ands	r3, r2
   2a0d6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a0d8:	2300      	movs	r3, #0
   2a0da:	617b      	str	r3, [r7, #20]
   2a0dc:	e019      	b.n	2a112 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a0de:	4b11      	ldr	r3, [pc, #68]	; (2a124 <_tcc_interrupt_handler+0x78>)
   2a0e0:	697a      	ldr	r2, [r7, #20]
   2a0e2:	0092      	lsls	r2, r2, #2
   2a0e4:	58d3      	ldr	r3, [r2, r3]
   2a0e6:	68fa      	ldr	r2, [r7, #12]
   2a0e8:	4013      	ands	r3, r2
   2a0ea:	d00f      	beq.n	2a10c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a0ec:	693a      	ldr	r2, [r7, #16]
   2a0ee:	697b      	ldr	r3, [r7, #20]
   2a0f0:	009b      	lsls	r3, r3, #2
   2a0f2:	18d3      	adds	r3, r2, r3
   2a0f4:	3304      	adds	r3, #4
   2a0f6:	681b      	ldr	r3, [r3, #0]
   2a0f8:	693a      	ldr	r2, [r7, #16]
   2a0fa:	0010      	movs	r0, r2
   2a0fc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a0fe:	693b      	ldr	r3, [r7, #16]
   2a100:	681b      	ldr	r3, [r3, #0]
   2a102:	4a08      	ldr	r2, [pc, #32]	; (2a124 <_tcc_interrupt_handler+0x78>)
   2a104:	6979      	ldr	r1, [r7, #20]
   2a106:	0089      	lsls	r1, r1, #2
   2a108:	588a      	ldr	r2, [r1, r2]
   2a10a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a10c:	697b      	ldr	r3, [r7, #20]
   2a10e:	3301      	adds	r3, #1
   2a110:	617b      	str	r3, [r7, #20]
   2a112:	697b      	ldr	r3, [r7, #20]
   2a114:	2b0b      	cmp	r3, #11
   2a116:	dde2      	ble.n	2a0de <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a118:	46c0      	nop			; (mov r8, r8)
   2a11a:	46bd      	mov	sp, r7
   2a11c:	b006      	add	sp, #24
   2a11e:	bd80      	pop	{r7, pc}
   2a120:	20005be8 	.word	0x20005be8
   2a124:	00039048 	.word	0x00039048

0002a128 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a128:	b580      	push	{r7, lr}
   2a12a:	b082      	sub	sp, #8
   2a12c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a12e:	4b2f      	ldr	r3, [pc, #188]	; (2a1ec <Reset_Handler+0xc4>)
   2a130:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a132:	4b2f      	ldr	r3, [pc, #188]	; (2a1f0 <Reset_Handler+0xc8>)
   2a134:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a136:	687a      	ldr	r2, [r7, #4]
   2a138:	683b      	ldr	r3, [r7, #0]
   2a13a:	429a      	cmp	r2, r3
   2a13c:	d00c      	beq.n	2a158 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a13e:	e007      	b.n	2a150 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a140:	683b      	ldr	r3, [r7, #0]
   2a142:	1d1a      	adds	r2, r3, #4
   2a144:	603a      	str	r2, [r7, #0]
   2a146:	687a      	ldr	r2, [r7, #4]
   2a148:	1d11      	adds	r1, r2, #4
   2a14a:	6079      	str	r1, [r7, #4]
   2a14c:	6812      	ldr	r2, [r2, #0]
   2a14e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a150:	683a      	ldr	r2, [r7, #0]
   2a152:	4b28      	ldr	r3, [pc, #160]	; (2a1f4 <Reset_Handler+0xcc>)
   2a154:	429a      	cmp	r2, r3
   2a156:	d3f3      	bcc.n	2a140 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a158:	4b27      	ldr	r3, [pc, #156]	; (2a1f8 <Reset_Handler+0xd0>)
   2a15a:	603b      	str	r3, [r7, #0]
   2a15c:	e004      	b.n	2a168 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a15e:	683b      	ldr	r3, [r7, #0]
   2a160:	1d1a      	adds	r2, r3, #4
   2a162:	603a      	str	r2, [r7, #0]
   2a164:	2200      	movs	r2, #0
   2a166:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a168:	683a      	ldr	r2, [r7, #0]
   2a16a:	4b24      	ldr	r3, [pc, #144]	; (2a1fc <Reset_Handler+0xd4>)
   2a16c:	429a      	cmp	r2, r3
   2a16e:	d3f6      	bcc.n	2a15e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a170:	4b23      	ldr	r3, [pc, #140]	; (2a200 <Reset_Handler+0xd8>)
   2a172:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a174:	4b23      	ldr	r3, [pc, #140]	; (2a204 <Reset_Handler+0xdc>)
   2a176:	687a      	ldr	r2, [r7, #4]
   2a178:	21ff      	movs	r1, #255	; 0xff
   2a17a:	438a      	bics	r2, r1
   2a17c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a17e:	4a22      	ldr	r2, [pc, #136]	; (2a208 <Reset_Handler+0xe0>)
   2a180:	2390      	movs	r3, #144	; 0x90
   2a182:	005b      	lsls	r3, r3, #1
   2a184:	2102      	movs	r1, #2
   2a186:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a188:	4a20      	ldr	r2, [pc, #128]	; (2a20c <Reset_Handler+0xe4>)
   2a18a:	78d3      	ldrb	r3, [r2, #3]
   2a18c:	2103      	movs	r1, #3
   2a18e:	438b      	bics	r3, r1
   2a190:	1c19      	adds	r1, r3, #0
   2a192:	2302      	movs	r3, #2
   2a194:	430b      	orrs	r3, r1
   2a196:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a198:	4a1c      	ldr	r2, [pc, #112]	; (2a20c <Reset_Handler+0xe4>)
   2a19a:	78d3      	ldrb	r3, [r2, #3]
   2a19c:	210c      	movs	r1, #12
   2a19e:	438b      	bics	r3, r1
   2a1a0:	1c19      	adds	r1, r3, #0
   2a1a2:	2308      	movs	r3, #8
   2a1a4:	430b      	orrs	r3, r1
   2a1a6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a1a8:	4a19      	ldr	r2, [pc, #100]	; (2a210 <Reset_Handler+0xe8>)
   2a1aa:	7b93      	ldrb	r3, [r2, #14]
   2a1ac:	2130      	movs	r1, #48	; 0x30
   2a1ae:	438b      	bics	r3, r1
   2a1b0:	1c19      	adds	r1, r3, #0
   2a1b2:	2320      	movs	r3, #32
   2a1b4:	430b      	orrs	r3, r1
   2a1b6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a1b8:	4a15      	ldr	r2, [pc, #84]	; (2a210 <Reset_Handler+0xe8>)
   2a1ba:	7b93      	ldrb	r3, [r2, #14]
   2a1bc:	210c      	movs	r1, #12
   2a1be:	438b      	bics	r3, r1
   2a1c0:	1c19      	adds	r1, r3, #0
   2a1c2:	2308      	movs	r3, #8
   2a1c4:	430b      	orrs	r3, r1
   2a1c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a1c8:	4a11      	ldr	r2, [pc, #68]	; (2a210 <Reset_Handler+0xe8>)
   2a1ca:	7b93      	ldrb	r3, [r2, #14]
   2a1cc:	2103      	movs	r1, #3
   2a1ce:	438b      	bics	r3, r1
   2a1d0:	1c19      	adds	r1, r3, #0
   2a1d2:	2302      	movs	r3, #2
   2a1d4:	430b      	orrs	r3, r1
   2a1d6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a1d8:	4a0e      	ldr	r2, [pc, #56]	; (2a214 <Reset_Handler+0xec>)
   2a1da:	6853      	ldr	r3, [r2, #4]
   2a1dc:	2180      	movs	r1, #128	; 0x80
   2a1de:	430b      	orrs	r3, r1
   2a1e0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a1e2:	4b0d      	ldr	r3, [pc, #52]	; (2a218 <Reset_Handler+0xf0>)
   2a1e4:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a1e6:	4b0d      	ldr	r3, [pc, #52]	; (2a21c <Reset_Handler+0xf4>)
   2a1e8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a1ea:	e7fe      	b.n	2a1ea <Reset_Handler+0xc2>
   2a1ec:	00039d8c 	.word	0x00039d8c
   2a1f0:	20000000 	.word	0x20000000
   2a1f4:	200002f0 	.word	0x200002f0
   2a1f8:	200002f0 	.word	0x200002f0
   2a1fc:	20005c58 	.word	0x20005c58
   2a200:	00012000 	.word	0x00012000
   2a204:	e000ed00 	.word	0xe000ed00
   2a208:	41007000 	.word	0x41007000
   2a20c:	41005000 	.word	0x41005000
   2a210:	41004800 	.word	0x41004800
   2a214:	41004000 	.word	0x41004000
   2a218:	00034569 	.word	0x00034569
   2a21c:	0003195d 	.word	0x0003195d

0002a220 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a220:	b580      	push	{r7, lr}
   2a222:	af00      	add	r7, sp, #0
  __asm volatile (
   2a224:	2004      	movs	r0, #4
   2a226:	4671      	mov	r1, lr
   2a228:	4208      	tst	r0, r1
   2a22a:	d002      	beq.n	2a232 <_MSP>
   2a22c:	f3ef 8009 	mrs	r0, PSP
   2a230:	e001      	b.n	2a236 <_HALT>

0002a232 <_MSP>:
   2a232:	f3ef 8008 	mrs	r0, MSP

0002a236 <_HALT>:
   2a236:	6941      	ldr	r1, [r0, #20]
   2a238:	e004      	b.n	2a244 <HardFault_HandlerC>
   2a23a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a23c:	46c0      	nop			; (mov r8, r8)
   2a23e:	46bd      	mov	sp, r7
   2a240:	bd80      	pop	{r7, pc}
	...

0002a244 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a244:	b580      	push	{r7, lr}
   2a246:	b090      	sub	sp, #64	; 0x40
   2a248:	af00      	add	r7, sp, #0
   2a24a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a24c:	687b      	ldr	r3, [r7, #4]
   2a24e:	681b      	ldr	r3, [r3, #0]
   2a250:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a252:	687b      	ldr	r3, [r7, #4]
   2a254:	685b      	ldr	r3, [r3, #4]
   2a256:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a258:	687b      	ldr	r3, [r7, #4]
   2a25a:	689b      	ldr	r3, [r3, #8]
   2a25c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a25e:	687b      	ldr	r3, [r7, #4]
   2a260:	68db      	ldr	r3, [r3, #12]
   2a262:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2a264:	687b      	ldr	r3, [r7, #4]
   2a266:	691b      	ldr	r3, [r3, #16]
   2a268:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2a26a:	687b      	ldr	r3, [r7, #4]
   2a26c:	695b      	ldr	r3, [r3, #20]
   2a26e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2a270:	687b      	ldr	r3, [r7, #4]
   2a272:	699b      	ldr	r3, [r3, #24]
   2a274:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2a276:	687b      	ldr	r3, [r7, #4]
   2a278:	69db      	ldr	r3, [r3, #28]
   2a27a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2a27c:	4b0b      	ldr	r3, [pc, #44]	; (2a2ac <HardFault_HandlerC+0x68>)
   2a27e:	681b      	ldr	r3, [r3, #0]
   2a280:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2a282:	4b0b      	ldr	r3, [pc, #44]	; (2a2b0 <HardFault_HandlerC+0x6c>)
   2a284:	681b      	ldr	r3, [r3, #0]
   2a286:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2a288:	4b0a      	ldr	r3, [pc, #40]	; (2a2b4 <HardFault_HandlerC+0x70>)
   2a28a:	681b      	ldr	r3, [r3, #0]
   2a28c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2a28e:	4b0a      	ldr	r3, [pc, #40]	; (2a2b8 <HardFault_HandlerC+0x74>)
   2a290:	681b      	ldr	r3, [r3, #0]
   2a292:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2a294:	4b09      	ldr	r3, [pc, #36]	; (2a2bc <HardFault_HandlerC+0x78>)
   2a296:	681b      	ldr	r3, [r3, #0]
   2a298:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2a29a:	4b09      	ldr	r3, [pc, #36]	; (2a2c0 <HardFault_HandlerC+0x7c>)
   2a29c:	681b      	ldr	r3, [r3, #0]
   2a29e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2a2a0:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2a2a2:	46c0      	nop			; (mov r8, r8)
   2a2a4:	46bd      	mov	sp, r7
   2a2a6:	b010      	add	sp, #64	; 0x40
   2a2a8:	bd80      	pop	{r7, pc}
   2a2aa:	46c0      	nop			; (mov r8, r8)
   2a2ac:	e000ed28 	.word	0xe000ed28
   2a2b0:	e000ed2c 	.word	0xe000ed2c
   2a2b4:	e000ed30 	.word	0xe000ed30
   2a2b8:	e000ed3c 	.word	0xe000ed3c
   2a2bc:	e000ed34 	.word	0xe000ed34
   2a2c0:	e000ed38 	.word	0xe000ed38

0002a2c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2a2c4:	b580      	push	{r7, lr}
   2a2c6:	b086      	sub	sp, #24
   2a2c8:	af00      	add	r7, sp, #0
   2a2ca:	60f8      	str	r0, [r7, #12]
   2a2cc:	60b9      	str	r1, [r7, #8]
   2a2ce:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a2d0:	2300      	movs	r3, #0
   2a2d2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2a2d4:	68fb      	ldr	r3, [r7, #12]
   2a2d6:	2b00      	cmp	r3, #0
   2a2d8:	d012      	beq.n	2a300 <_read+0x3c>
		return -1;
   2a2da:	2301      	movs	r3, #1
   2a2dc:	425b      	negs	r3, r3
   2a2de:	e013      	b.n	2a308 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2a2e0:	4b0b      	ldr	r3, [pc, #44]	; (2a310 <_read+0x4c>)
   2a2e2:	681a      	ldr	r2, [r3, #0]
   2a2e4:	4b0b      	ldr	r3, [pc, #44]	; (2a314 <_read+0x50>)
   2a2e6:	681b      	ldr	r3, [r3, #0]
   2a2e8:	68b9      	ldr	r1, [r7, #8]
   2a2ea:	0018      	movs	r0, r3
   2a2ec:	4790      	blx	r2
		ptr++;
   2a2ee:	68bb      	ldr	r3, [r7, #8]
   2a2f0:	3301      	adds	r3, #1
   2a2f2:	60bb      	str	r3, [r7, #8]
		nChars++;
   2a2f4:	697b      	ldr	r3, [r7, #20]
   2a2f6:	3301      	adds	r3, #1
   2a2f8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2a2fa:	687b      	ldr	r3, [r7, #4]
   2a2fc:	3b01      	subs	r3, #1
   2a2fe:	607b      	str	r3, [r7, #4]
   2a300:	687b      	ldr	r3, [r7, #4]
   2a302:	2b00      	cmp	r3, #0
   2a304:	dcec      	bgt.n	2a2e0 <_read+0x1c>
	}
	return nChars;
   2a306:	697b      	ldr	r3, [r7, #20]
}
   2a308:	0018      	movs	r0, r3
   2a30a:	46bd      	mov	sp, r7
   2a30c:	b006      	add	sp, #24
   2a30e:	bd80      	pop	{r7, pc}
   2a310:	20005bf4 	.word	0x20005bf4
   2a314:	20005bfc 	.word	0x20005bfc

0002a318 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2a318:	b580      	push	{r7, lr}
   2a31a:	b086      	sub	sp, #24
   2a31c:	af00      	add	r7, sp, #0
   2a31e:	60f8      	str	r0, [r7, #12]
   2a320:	60b9      	str	r1, [r7, #8]
   2a322:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a324:	2300      	movs	r3, #0
   2a326:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2a328:	68fb      	ldr	r3, [r7, #12]
   2a32a:	2b01      	cmp	r3, #1
   2a32c:	d01d      	beq.n	2a36a <_write+0x52>
   2a32e:	68fb      	ldr	r3, [r7, #12]
   2a330:	2b02      	cmp	r3, #2
   2a332:	d01a      	beq.n	2a36a <_write+0x52>
   2a334:	68fb      	ldr	r3, [r7, #12]
   2a336:	2b03      	cmp	r3, #3
   2a338:	d017      	beq.n	2a36a <_write+0x52>
		return -1;
   2a33a:	2301      	movs	r3, #1
   2a33c:	425b      	negs	r3, r3
   2a33e:	e018      	b.n	2a372 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2a340:	4b0e      	ldr	r3, [pc, #56]	; (2a37c <_write+0x64>)
   2a342:	681a      	ldr	r2, [r3, #0]
   2a344:	4b0e      	ldr	r3, [pc, #56]	; (2a380 <_write+0x68>)
   2a346:	6818      	ldr	r0, [r3, #0]
   2a348:	68bb      	ldr	r3, [r7, #8]
   2a34a:	1c59      	adds	r1, r3, #1
   2a34c:	60b9      	str	r1, [r7, #8]
   2a34e:	781b      	ldrb	r3, [r3, #0]
   2a350:	0019      	movs	r1, r3
   2a352:	4790      	blx	r2
   2a354:	1e03      	subs	r3, r0, #0
   2a356:	da02      	bge.n	2a35e <_write+0x46>
			return -1;
   2a358:	2301      	movs	r3, #1
   2a35a:	425b      	negs	r3, r3
   2a35c:	e009      	b.n	2a372 <_write+0x5a>
		}
		++nChars;
   2a35e:	697b      	ldr	r3, [r7, #20]
   2a360:	3301      	adds	r3, #1
   2a362:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2a364:	687b      	ldr	r3, [r7, #4]
   2a366:	3b01      	subs	r3, #1
   2a368:	607b      	str	r3, [r7, #4]
   2a36a:	687b      	ldr	r3, [r7, #4]
   2a36c:	2b00      	cmp	r3, #0
   2a36e:	d1e7      	bne.n	2a340 <_write+0x28>
	}
	return nChars;
   2a370:	697b      	ldr	r3, [r7, #20]
}
   2a372:	0018      	movs	r0, r3
   2a374:	46bd      	mov	sp, r7
   2a376:	b006      	add	sp, #24
   2a378:	bd80      	pop	{r7, pc}
   2a37a:	46c0      	nop			; (mov r8, r8)
   2a37c:	20005bf8 	.word	0x20005bf8
   2a380:	20005bfc 	.word	0x20005bfc

0002a384 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2a384:	b580      	push	{r7, lr}
   2a386:	b084      	sub	sp, #16
   2a388:	af00      	add	r7, sp, #0
   2a38a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2a38c:	4b0a      	ldr	r3, [pc, #40]	; (2a3b8 <_sbrk+0x34>)
   2a38e:	681b      	ldr	r3, [r3, #0]
   2a390:	2b00      	cmp	r3, #0
   2a392:	d102      	bne.n	2a39a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2a394:	4b08      	ldr	r3, [pc, #32]	; (2a3b8 <_sbrk+0x34>)
   2a396:	4a09      	ldr	r2, [pc, #36]	; (2a3bc <_sbrk+0x38>)
   2a398:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2a39a:	4b07      	ldr	r3, [pc, #28]	; (2a3b8 <_sbrk+0x34>)
   2a39c:	681b      	ldr	r3, [r3, #0]
   2a39e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2a3a0:	4b05      	ldr	r3, [pc, #20]	; (2a3b8 <_sbrk+0x34>)
   2a3a2:	681a      	ldr	r2, [r3, #0]
   2a3a4:	687b      	ldr	r3, [r7, #4]
   2a3a6:	18d2      	adds	r2, r2, r3
   2a3a8:	4b03      	ldr	r3, [pc, #12]	; (2a3b8 <_sbrk+0x34>)
   2a3aa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2a3ac:	68fb      	ldr	r3, [r7, #12]
}
   2a3ae:	0018      	movs	r0, r3
   2a3b0:	46bd      	mov	sp, r7
   2a3b2:	b004      	add	sp, #16
   2a3b4:	bd80      	pop	{r7, pc}
   2a3b6:	46c0      	nop			; (mov r8, r8)
   2a3b8:	200042c0 	.word	0x200042c0
   2a3bc:	20007c58 	.word	0x20007c58

0002a3c0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2a3c0:	b580      	push	{r7, lr}
   2a3c2:	b082      	sub	sp, #8
   2a3c4:	af00      	add	r7, sp, #0
   2a3c6:	6078      	str	r0, [r7, #4]
	return -1;
   2a3c8:	2301      	movs	r3, #1
   2a3ca:	425b      	negs	r3, r3
}
   2a3cc:	0018      	movs	r0, r3
   2a3ce:	46bd      	mov	sp, r7
   2a3d0:	b002      	add	sp, #8
   2a3d2:	bd80      	pop	{r7, pc}

0002a3d4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2a3d4:	b580      	push	{r7, lr}
   2a3d6:	b082      	sub	sp, #8
   2a3d8:	af00      	add	r7, sp, #0
   2a3da:	6078      	str	r0, [r7, #4]
   2a3dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2a3de:	683b      	ldr	r3, [r7, #0]
   2a3e0:	2280      	movs	r2, #128	; 0x80
   2a3e2:	0192      	lsls	r2, r2, #6
   2a3e4:	605a      	str	r2, [r3, #4]

	return 0;
   2a3e6:	2300      	movs	r3, #0
}
   2a3e8:	0018      	movs	r0, r3
   2a3ea:	46bd      	mov	sp, r7
   2a3ec:	b002      	add	sp, #8
   2a3ee:	bd80      	pop	{r7, pc}

0002a3f0 <_isatty>:

extern int _isatty(int file)
{
   2a3f0:	b580      	push	{r7, lr}
   2a3f2:	b082      	sub	sp, #8
   2a3f4:	af00      	add	r7, sp, #0
   2a3f6:	6078      	str	r0, [r7, #4]
	return 1;
   2a3f8:	2301      	movs	r3, #1
}
   2a3fa:	0018      	movs	r0, r3
   2a3fc:	46bd      	mov	sp, r7
   2a3fe:	b002      	add	sp, #8
   2a400:	bd80      	pop	{r7, pc}

0002a402 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2a402:	b580      	push	{r7, lr}
   2a404:	b084      	sub	sp, #16
   2a406:	af00      	add	r7, sp, #0
   2a408:	60f8      	str	r0, [r7, #12]
   2a40a:	60b9      	str	r1, [r7, #8]
   2a40c:	607a      	str	r2, [r7, #4]
	return 0;
   2a40e:	2300      	movs	r3, #0
}
   2a410:	0018      	movs	r0, r3
   2a412:	46bd      	mov	sp, r7
   2a414:	b004      	add	sp, #16
   2a416:	bd80      	pop	{r7, pc}

0002a418 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2a418:	b580      	push	{r7, lr}
   2a41a:	b082      	sub	sp, #8
   2a41c:	af00      	add	r7, sp, #0
   2a41e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2a420:	687b      	ldr	r3, [r7, #4]
   2a422:	2200      	movs	r2, #0
   2a424:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2a426:	687b      	ldr	r3, [r7, #4]
   2a428:	2200      	movs	r2, #0
   2a42a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2a42c:	687b      	ldr	r3, [r7, #4]
   2a42e:	2200      	movs	r2, #0
   2a430:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2a432:	687b      	ldr	r3, [r7, #4]
   2a434:	2200      	movs	r2, #0
   2a436:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2a438:	687b      	ldr	r3, [r7, #4]
   2a43a:	2201      	movs	r2, #1
   2a43c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2a43e:	687b      	ldr	r3, [r7, #4]
   2a440:	2201      	movs	r2, #1
   2a442:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2a444:	687b      	ldr	r3, [r7, #4]
   2a446:	22fa      	movs	r2, #250	; 0xfa
   2a448:	00d2      	lsls	r2, r2, #3
   2a44a:	80da      	strh	r2, [r3, #6]
}
   2a44c:	46c0      	nop			; (mov r8, r8)
   2a44e:	46bd      	mov	sp, r7
   2a450:	b002      	add	sp, #8
   2a452:	bd80      	pop	{r7, pc}

0002a454 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2a454:	b580      	push	{r7, lr}
   2a456:	b086      	sub	sp, #24
   2a458:	af00      	add	r7, sp, #0
   2a45a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2a45c:	230c      	movs	r3, #12
   2a45e:	18fb      	adds	r3, r7, r3
   2a460:	0018      	movs	r0, r3
   2a462:	4b23      	ldr	r3, [pc, #140]	; (2a4f0 <rtc_calendar_get_config_defaults+0x9c>)
   2a464:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2a466:	687b      	ldr	r3, [r7, #4]
   2a468:	22a0      	movs	r2, #160	; 0xa0
   2a46a:	0112      	lsls	r2, r2, #4
   2a46c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2a46e:	687b      	ldr	r3, [r7, #4]
   2a470:	2200      	movs	r2, #0
   2a472:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2a474:	687b      	ldr	r3, [r7, #4]
   2a476:	2200      	movs	r2, #0
   2a478:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2a47a:	687b      	ldr	r3, [r7, #4]
   2a47c:	2200      	movs	r2, #0
   2a47e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2a480:	687b      	ldr	r3, [r7, #4]
   2a482:	22fa      	movs	r2, #250	; 0xfa
   2a484:	00d2      	lsls	r2, r2, #3
   2a486:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a488:	2317      	movs	r3, #23
   2a48a:	18fb      	adds	r3, r7, r3
   2a48c:	2200      	movs	r2, #0
   2a48e:	701a      	strb	r2, [r3, #0]
   2a490:	e025      	b.n	2a4de <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2a492:	2317      	movs	r3, #23
   2a494:	18fb      	adds	r3, r7, r3
   2a496:	781a      	ldrb	r2, [r3, #0]
   2a498:	6879      	ldr	r1, [r7, #4]
   2a49a:	2008      	movs	r0, #8
   2a49c:	0013      	movs	r3, r2
   2a49e:	009b      	lsls	r3, r3, #2
   2a4a0:	189b      	adds	r3, r3, r2
   2a4a2:	005b      	lsls	r3, r3, #1
   2a4a4:	18cb      	adds	r3, r1, r3
   2a4a6:	181a      	adds	r2, r3, r0
   2a4a8:	230c      	movs	r3, #12
   2a4aa:	18fb      	adds	r3, r7, r3
   2a4ac:	0010      	movs	r0, r2
   2a4ae:	0019      	movs	r1, r3
   2a4b0:	2308      	movs	r3, #8
   2a4b2:	001a      	movs	r2, r3
   2a4b4:	4b0f      	ldr	r3, [pc, #60]	; (2a4f4 <rtc_calendar_get_config_defaults+0xa0>)
   2a4b6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a4b8:	2317      	movs	r3, #23
   2a4ba:	18fb      	adds	r3, r7, r3
   2a4bc:	781a      	ldrb	r2, [r3, #0]
   2a4be:	6879      	ldr	r1, [r7, #4]
   2a4c0:	0013      	movs	r3, r2
   2a4c2:	009b      	lsls	r3, r3, #2
   2a4c4:	189b      	adds	r3, r3, r2
   2a4c6:	005b      	lsls	r3, r3, #1
   2a4c8:	18cb      	adds	r3, r1, r3
   2a4ca:	3310      	adds	r3, #16
   2a4cc:	2206      	movs	r2, #6
   2a4ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a4d0:	2317      	movs	r3, #23
   2a4d2:	18fb      	adds	r3, r7, r3
   2a4d4:	781a      	ldrb	r2, [r3, #0]
   2a4d6:	2317      	movs	r3, #23
   2a4d8:	18fb      	adds	r3, r7, r3
   2a4da:	3201      	adds	r2, #1
   2a4dc:	701a      	strb	r2, [r3, #0]
   2a4de:	2317      	movs	r3, #23
   2a4e0:	18fb      	adds	r3, r7, r3
   2a4e2:	781b      	ldrb	r3, [r3, #0]
   2a4e4:	2b00      	cmp	r3, #0
   2a4e6:	d0d4      	beq.n	2a492 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2a4e8:	46c0      	nop			; (mov r8, r8)
   2a4ea:	46bd      	mov	sp, r7
   2a4ec:	b006      	add	sp, #24
   2a4ee:	bd80      	pop	{r7, pc}
   2a4f0:	0002a419 	.word	0x0002a419
   2a4f4:	000345d9 	.word	0x000345d9

0002a4f8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2a4f8:	b580      	push	{r7, lr}
   2a4fa:	b088      	sub	sp, #32
   2a4fc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2a4fe:	230c      	movs	r3, #12
   2a500:	18fb      	adds	r3, r7, r3
   2a502:	0018      	movs	r0, r3
   2a504:	4b1a      	ldr	r3, [pc, #104]	; (2a570 <configure_rtc_calendar+0x78>)
   2a506:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2a508:	1d3b      	adds	r3, r7, #4
   2a50a:	0018      	movs	r0, r3
   2a50c:	4b19      	ldr	r3, [pc, #100]	; (2a574 <configure_rtc_calendar+0x7c>)
   2a50e:	4798      	blx	r3
	init_time.year   = 2014;
   2a510:	1d3b      	adds	r3, r7, #4
   2a512:	4a19      	ldr	r2, [pc, #100]	; (2a578 <configure_rtc_calendar+0x80>)
   2a514:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2a516:	1d3b      	adds	r3, r7, #4
   2a518:	2201      	movs	r2, #1
   2a51a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2a51c:	1d3b      	adds	r3, r7, #4
   2a51e:	2201      	movs	r2, #1
   2a520:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2a522:	1d3b      	adds	r3, r7, #4
   2a524:	2200      	movs	r2, #0
   2a526:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2a528:	1d3b      	adds	r3, r7, #4
   2a52a:	2200      	movs	r2, #0
   2a52c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2a52e:	1d3b      	adds	r3, r7, #4
   2a530:	2204      	movs	r2, #4
   2a532:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2a534:	230c      	movs	r3, #12
   2a536:	18fb      	adds	r3, r7, r3
   2a538:	2201      	movs	r2, #1
   2a53a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2a53c:	230c      	movs	r3, #12
   2a53e:	18fb      	adds	r3, r7, r3
   2a540:	1d3a      	adds	r2, r7, #4
   2a542:	3308      	adds	r3, #8
   2a544:	ca03      	ldmia	r2!, {r0, r1}
   2a546:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a548:	230c      	movs	r3, #12
   2a54a:	18fb      	adds	r3, r7, r3
   2a54c:	2206      	movs	r2, #6
   2a54e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2a550:	230c      	movs	r3, #12
   2a552:	18fa      	adds	r2, r7, r3
   2a554:	4909      	ldr	r1, [pc, #36]	; (2a57c <configure_rtc_calendar+0x84>)
   2a556:	4b0a      	ldr	r3, [pc, #40]	; (2a580 <configure_rtc_calendar+0x88>)
   2a558:	0018      	movs	r0, r3
   2a55a:	4b0a      	ldr	r3, [pc, #40]	; (2a584 <configure_rtc_calendar+0x8c>)
   2a55c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2a55e:	4b08      	ldr	r3, [pc, #32]	; (2a580 <configure_rtc_calendar+0x88>)
   2a560:	0018      	movs	r0, r3
   2a562:	4b09      	ldr	r3, [pc, #36]	; (2a588 <configure_rtc_calendar+0x90>)
   2a564:	4798      	blx	r3
}
   2a566:	46c0      	nop			; (mov r8, r8)
   2a568:	46bd      	mov	sp, r7
   2a56a:	b008      	add	sp, #32
   2a56c:	bd80      	pop	{r7, pc}
   2a56e:	46c0      	nop			; (mov r8, r8)
   2a570:	0002a455 	.word	0x0002a455
   2a574:	0002a419 	.word	0x0002a419
   2a578:	000007de 	.word	0x000007de
   2a57c:	40001400 	.word	0x40001400
   2a580:	20005c00 	.word	0x20005c00
   2a584:	00025f09 	.word	0x00025f09
   2a588:	00025c35 	.word	0x00025c35

0002a58c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2a58c:	b590      	push	{r4, r7, lr}
   2a58e:	b085      	sub	sp, #20
   2a590:	af00      	add	r7, sp, #0
   2a592:	0002      	movs	r2, r0
   2a594:	1dfb      	adds	r3, r7, #7
   2a596:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2a598:	4b1a      	ldr	r3, [pc, #104]	; (2a604 <disk_initialize+0x78>)
   2a59a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2a59c:	1dfb      	adds	r3, r7, #7
   2a59e:	781b      	ldrb	r3, [r3, #0]
   2a5a0:	2b01      	cmp	r3, #1
   2a5a2:	d901      	bls.n	2a5a8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2a5a4:	2301      	movs	r3, #1
   2a5a6:	e029      	b.n	2a5fc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2a5a8:	2300      	movs	r3, #0
   2a5aa:	60fb      	str	r3, [r7, #12]
   2a5ac:	e010      	b.n	2a5d0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2a5ae:	230b      	movs	r3, #11
   2a5b0:	18fc      	adds	r4, r7, r3
   2a5b2:	1dfb      	adds	r3, r7, #7
   2a5b4:	781b      	ldrb	r3, [r3, #0]
   2a5b6:	0018      	movs	r0, r3
   2a5b8:	4b13      	ldr	r3, [pc, #76]	; (2a608 <disk_initialize+0x7c>)
   2a5ba:	4798      	blx	r3
   2a5bc:	0003      	movs	r3, r0
   2a5be:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2a5c0:	230b      	movs	r3, #11
   2a5c2:	18fb      	adds	r3, r7, r3
   2a5c4:	781b      	ldrb	r3, [r3, #0]
   2a5c6:	2b03      	cmp	r3, #3
   2a5c8:	d106      	bne.n	2a5d8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2a5ca:	68fb      	ldr	r3, [r7, #12]
   2a5cc:	3301      	adds	r3, #1
   2a5ce:	60fb      	str	r3, [r7, #12]
   2a5d0:	68fb      	ldr	r3, [r7, #12]
   2a5d2:	2b01      	cmp	r3, #1
   2a5d4:	ddeb      	ble.n	2a5ae <disk_initialize+0x22>
   2a5d6:	e000      	b.n	2a5da <disk_initialize+0x4e>
			break;
   2a5d8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2a5da:	230b      	movs	r3, #11
   2a5dc:	18fb      	adds	r3, r7, r3
   2a5de:	781b      	ldrb	r3, [r3, #0]
   2a5e0:	2b00      	cmp	r3, #0
   2a5e2:	d001      	beq.n	2a5e8 <disk_initialize+0x5c>
		return STA_NOINIT;
   2a5e4:	2301      	movs	r3, #1
   2a5e6:	e009      	b.n	2a5fc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2a5e8:	1dfb      	adds	r3, r7, #7
   2a5ea:	781b      	ldrb	r3, [r3, #0]
   2a5ec:	0018      	movs	r0, r3
   2a5ee:	4b07      	ldr	r3, [pc, #28]	; (2a60c <disk_initialize+0x80>)
   2a5f0:	4798      	blx	r3
   2a5f2:	1e03      	subs	r3, r0, #0
   2a5f4:	d001      	beq.n	2a5fa <disk_initialize+0x6e>
		return STA_PROTECT;
   2a5f6:	2304      	movs	r3, #4
   2a5f8:	e000      	b.n	2a5fc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2a5fa:	2300      	movs	r3, #0
}
   2a5fc:	0018      	movs	r0, r3
   2a5fe:	46bd      	mov	sp, r7
   2a600:	b005      	add	sp, #20
   2a602:	bd90      	pop	{r4, r7, pc}
   2a604:	0002a4f9 	.word	0x0002a4f9
   2a608:	00025131 	.word	0x00025131
   2a60c:	000251e9 	.word	0x000251e9

0002a610 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2a610:	b580      	push	{r7, lr}
   2a612:	b082      	sub	sp, #8
   2a614:	af00      	add	r7, sp, #0
   2a616:	0002      	movs	r2, r0
   2a618:	1dfb      	adds	r3, r7, #7
   2a61a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2a61c:	1dfb      	adds	r3, r7, #7
   2a61e:	781b      	ldrb	r3, [r3, #0]
   2a620:	0018      	movs	r0, r3
   2a622:	4b08      	ldr	r3, [pc, #32]	; (2a644 <disk_status+0x34>)
   2a624:	4798      	blx	r3
   2a626:	1e03      	subs	r3, r0, #0
   2a628:	d002      	beq.n	2a630 <disk_status+0x20>
   2a62a:	2b02      	cmp	r3, #2
   2a62c:	d002      	beq.n	2a634 <disk_status+0x24>
   2a62e:	e003      	b.n	2a638 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2a630:	2300      	movs	r3, #0
   2a632:	e002      	b.n	2a63a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2a634:	2303      	movs	r3, #3
   2a636:	e000      	b.n	2a63a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2a638:	2301      	movs	r3, #1
	}
}
   2a63a:	0018      	movs	r0, r3
   2a63c:	46bd      	mov	sp, r7
   2a63e:	b002      	add	sp, #8
   2a640:	bd80      	pop	{r7, pc}
   2a642:	46c0      	nop			; (mov r8, r8)
   2a644:	00025131 	.word	0x00025131

0002a648 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2a648:	b590      	push	{r4, r7, lr}
   2a64a:	b089      	sub	sp, #36	; 0x24
   2a64c:	af00      	add	r7, sp, #0
   2a64e:	60b9      	str	r1, [r7, #8]
   2a650:	607a      	str	r2, [r7, #4]
   2a652:	0019      	movs	r1, r3
   2a654:	230f      	movs	r3, #15
   2a656:	18fb      	adds	r3, r7, r3
   2a658:	1c02      	adds	r2, r0, #0
   2a65a:	701a      	strb	r2, [r3, #0]
   2a65c:	230e      	movs	r3, #14
   2a65e:	18fb      	adds	r3, r7, r3
   2a660:	1c0a      	adds	r2, r1, #0
   2a662:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a664:	231b      	movs	r3, #27
   2a666:	18fc      	adds	r4, r7, r3
   2a668:	230f      	movs	r3, #15
   2a66a:	18fb      	adds	r3, r7, r3
   2a66c:	781b      	ldrb	r3, [r3, #0]
   2a66e:	0018      	movs	r0, r3
   2a670:	4b28      	ldr	r3, [pc, #160]	; (2a714 <disk_read+0xcc>)
   2a672:	4798      	blx	r3
   2a674:	0003      	movs	r3, r0
   2a676:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a678:	231b      	movs	r3, #27
   2a67a:	18fb      	adds	r3, r7, r3
   2a67c:	781b      	ldrb	r3, [r3, #0]
   2a67e:	2b00      	cmp	r3, #0
   2a680:	d101      	bne.n	2a686 <disk_read+0x3e>
		return RES_ERROR;
   2a682:	2301      	movs	r3, #1
   2a684:	e042      	b.n	2a70c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a686:	2314      	movs	r3, #20
   2a688:	18fa      	adds	r2, r7, r3
   2a68a:	230f      	movs	r3, #15
   2a68c:	18fb      	adds	r3, r7, r3
   2a68e:	781b      	ldrb	r3, [r3, #0]
   2a690:	0011      	movs	r1, r2
   2a692:	0018      	movs	r0, r3
   2a694:	4b20      	ldr	r3, [pc, #128]	; (2a718 <disk_read+0xd0>)
   2a696:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a698:	230e      	movs	r3, #14
   2a69a:	18fb      	adds	r3, r7, r3
   2a69c:	781b      	ldrb	r3, [r3, #0]
   2a69e:	221b      	movs	r2, #27
   2a6a0:	18ba      	adds	r2, r7, r2
   2a6a2:	7812      	ldrb	r2, [r2, #0]
   2a6a4:	4353      	muls	r3, r2
   2a6a6:	001a      	movs	r2, r3
   2a6a8:	687b      	ldr	r3, [r7, #4]
   2a6aa:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a6ac:	697b      	ldr	r3, [r7, #20]
   2a6ae:	3301      	adds	r3, #1
   2a6b0:	211b      	movs	r1, #27
   2a6b2:	1879      	adds	r1, r7, r1
   2a6b4:	7809      	ldrb	r1, [r1, #0]
   2a6b6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a6b8:	429a      	cmp	r2, r3
   2a6ba:	d901      	bls.n	2a6c0 <disk_read+0x78>
		return RES_PARERR;
   2a6bc:	2304      	movs	r3, #4
   2a6be:	e025      	b.n	2a70c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2a6c0:	2300      	movs	r3, #0
   2a6c2:	61fb      	str	r3, [r7, #28]
   2a6c4:	e01b      	b.n	2a6fe <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a6c6:	231b      	movs	r3, #27
   2a6c8:	18fb      	adds	r3, r7, r3
   2a6ca:	781b      	ldrb	r3, [r3, #0]
   2a6cc:	69fa      	ldr	r2, [r7, #28]
   2a6ce:	435a      	muls	r2, r3
   2a6d0:	687b      	ldr	r3, [r7, #4]
   2a6d2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a6d4:	231b      	movs	r3, #27
   2a6d6:	18fb      	adds	r3, r7, r3
   2a6d8:	781b      	ldrb	r3, [r3, #0]
   2a6da:	69fa      	ldr	r2, [r7, #28]
   2a6dc:	4353      	muls	r3, r2
   2a6de:	025b      	lsls	r3, r3, #9
   2a6e0:	68ba      	ldr	r2, [r7, #8]
   2a6e2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a6e4:	230f      	movs	r3, #15
   2a6e6:	18fb      	adds	r3, r7, r3
   2a6e8:	781b      	ldrb	r3, [r3, #0]
   2a6ea:	0018      	movs	r0, r3
   2a6ec:	4b0b      	ldr	r3, [pc, #44]	; (2a71c <disk_read+0xd4>)
   2a6ee:	4798      	blx	r3
   2a6f0:	1e03      	subs	r3, r0, #0
   2a6f2:	d001      	beq.n	2a6f8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a6f4:	2301      	movs	r3, #1
   2a6f6:	e009      	b.n	2a70c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2a6f8:	69fb      	ldr	r3, [r7, #28]
   2a6fa:	3301      	adds	r3, #1
   2a6fc:	61fb      	str	r3, [r7, #28]
   2a6fe:	230e      	movs	r3, #14
   2a700:	18fb      	adds	r3, r7, r3
   2a702:	781a      	ldrb	r2, [r3, #0]
   2a704:	69fb      	ldr	r3, [r7, #28]
   2a706:	429a      	cmp	r2, r3
   2a708:	d8dd      	bhi.n	2a6c6 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2a70a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a70c:	0018      	movs	r0, r3
   2a70e:	46bd      	mov	sp, r7
   2a710:	b009      	add	sp, #36	; 0x24
   2a712:	bd90      	pop	{r4, r7, pc}
   2a714:	000251bd 	.word	0x000251bd
   2a718:	00025171 	.word	0x00025171
   2a71c:	00025231 	.word	0x00025231

0002a720 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2a720:	b590      	push	{r4, r7, lr}
   2a722:	b089      	sub	sp, #36	; 0x24
   2a724:	af00      	add	r7, sp, #0
   2a726:	60b9      	str	r1, [r7, #8]
   2a728:	607a      	str	r2, [r7, #4]
   2a72a:	0019      	movs	r1, r3
   2a72c:	230f      	movs	r3, #15
   2a72e:	18fb      	adds	r3, r7, r3
   2a730:	1c02      	adds	r2, r0, #0
   2a732:	701a      	strb	r2, [r3, #0]
   2a734:	230e      	movs	r3, #14
   2a736:	18fb      	adds	r3, r7, r3
   2a738:	1c0a      	adds	r2, r1, #0
   2a73a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a73c:	231b      	movs	r3, #27
   2a73e:	18fc      	adds	r4, r7, r3
   2a740:	230f      	movs	r3, #15
   2a742:	18fb      	adds	r3, r7, r3
   2a744:	781b      	ldrb	r3, [r3, #0]
   2a746:	0018      	movs	r0, r3
   2a748:	4b28      	ldr	r3, [pc, #160]	; (2a7ec <disk_write+0xcc>)
   2a74a:	4798      	blx	r3
   2a74c:	0003      	movs	r3, r0
   2a74e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a750:	231b      	movs	r3, #27
   2a752:	18fb      	adds	r3, r7, r3
   2a754:	781b      	ldrb	r3, [r3, #0]
   2a756:	2b00      	cmp	r3, #0
   2a758:	d101      	bne.n	2a75e <disk_write+0x3e>
		return RES_ERROR;
   2a75a:	2301      	movs	r3, #1
   2a75c:	e042      	b.n	2a7e4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a75e:	2314      	movs	r3, #20
   2a760:	18fa      	adds	r2, r7, r3
   2a762:	230f      	movs	r3, #15
   2a764:	18fb      	adds	r3, r7, r3
   2a766:	781b      	ldrb	r3, [r3, #0]
   2a768:	0011      	movs	r1, r2
   2a76a:	0018      	movs	r0, r3
   2a76c:	4b20      	ldr	r3, [pc, #128]	; (2a7f0 <disk_write+0xd0>)
   2a76e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a770:	230e      	movs	r3, #14
   2a772:	18fb      	adds	r3, r7, r3
   2a774:	781b      	ldrb	r3, [r3, #0]
   2a776:	221b      	movs	r2, #27
   2a778:	18ba      	adds	r2, r7, r2
   2a77a:	7812      	ldrb	r2, [r2, #0]
   2a77c:	4353      	muls	r3, r2
   2a77e:	001a      	movs	r2, r3
   2a780:	687b      	ldr	r3, [r7, #4]
   2a782:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a784:	697b      	ldr	r3, [r7, #20]
   2a786:	3301      	adds	r3, #1
   2a788:	211b      	movs	r1, #27
   2a78a:	1879      	adds	r1, r7, r1
   2a78c:	7809      	ldrb	r1, [r1, #0]
   2a78e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a790:	429a      	cmp	r2, r3
   2a792:	d901      	bls.n	2a798 <disk_write+0x78>
		return RES_PARERR;
   2a794:	2304      	movs	r3, #4
   2a796:	e025      	b.n	2a7e4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2a798:	2300      	movs	r3, #0
   2a79a:	61fb      	str	r3, [r7, #28]
   2a79c:	e01b      	b.n	2a7d6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a79e:	231b      	movs	r3, #27
   2a7a0:	18fb      	adds	r3, r7, r3
   2a7a2:	781b      	ldrb	r3, [r3, #0]
   2a7a4:	69fa      	ldr	r2, [r7, #28]
   2a7a6:	435a      	muls	r2, r3
   2a7a8:	687b      	ldr	r3, [r7, #4]
   2a7aa:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a7ac:	231b      	movs	r3, #27
   2a7ae:	18fb      	adds	r3, r7, r3
   2a7b0:	781b      	ldrb	r3, [r3, #0]
   2a7b2:	69fa      	ldr	r2, [r7, #28]
   2a7b4:	4353      	muls	r3, r2
   2a7b6:	025b      	lsls	r3, r3, #9
   2a7b8:	68ba      	ldr	r2, [r7, #8]
   2a7ba:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a7bc:	230f      	movs	r3, #15
   2a7be:	18fb      	adds	r3, r7, r3
   2a7c0:	781b      	ldrb	r3, [r3, #0]
   2a7c2:	0018      	movs	r0, r3
   2a7c4:	4b0b      	ldr	r3, [pc, #44]	; (2a7f4 <disk_write+0xd4>)
   2a7c6:	4798      	blx	r3
   2a7c8:	1e03      	subs	r3, r0, #0
   2a7ca:	d001      	beq.n	2a7d0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a7cc:	2301      	movs	r3, #1
   2a7ce:	e009      	b.n	2a7e4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2a7d0:	69fb      	ldr	r3, [r7, #28]
   2a7d2:	3301      	adds	r3, #1
   2a7d4:	61fb      	str	r3, [r7, #28]
   2a7d6:	230e      	movs	r3, #14
   2a7d8:	18fb      	adds	r3, r7, r3
   2a7da:	781a      	ldrb	r2, [r3, #0]
   2a7dc:	69fb      	ldr	r3, [r7, #28]
   2a7de:	429a      	cmp	r2, r3
   2a7e0:	d8dd      	bhi.n	2a79e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2a7e2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a7e4:	0018      	movs	r0, r3
   2a7e6:	46bd      	mov	sp, r7
   2a7e8:	b009      	add	sp, #36	; 0x24
   2a7ea:	bd90      	pop	{r4, r7, pc}
   2a7ec:	000251bd 	.word	0x000251bd
   2a7f0:	00025171 	.word	0x00025171
   2a7f4:	00025285 	.word	0x00025285

0002a7f8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2a7f8:	b590      	push	{r4, r7, lr}
   2a7fa:	b085      	sub	sp, #20
   2a7fc:	af00      	add	r7, sp, #0
   2a7fe:	603a      	str	r2, [r7, #0]
   2a800:	1dfb      	adds	r3, r7, #7
   2a802:	1c02      	adds	r2, r0, #0
   2a804:	701a      	strb	r2, [r3, #0]
   2a806:	1dbb      	adds	r3, r7, #6
   2a808:	1c0a      	adds	r2, r1, #0
   2a80a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2a80c:	230f      	movs	r3, #15
   2a80e:	18fb      	adds	r3, r7, r3
   2a810:	2204      	movs	r2, #4
   2a812:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2a814:	1dbb      	adds	r3, r7, #6
   2a816:	781b      	ldrb	r3, [r3, #0]
   2a818:	2b01      	cmp	r3, #1
   2a81a:	d00f      	beq.n	2a83c <disk_ioctl+0x44>
   2a81c:	dc02      	bgt.n	2a824 <disk_ioctl+0x2c>
   2a81e:	2b00      	cmp	r3, #0
   2a820:	d044      	beq.n	2a8ac <disk_ioctl+0xb4>
   2a822:	e054      	b.n	2a8ce <disk_ioctl+0xd6>
   2a824:	2b02      	cmp	r3, #2
   2a826:	d01a      	beq.n	2a85e <disk_ioctl+0x66>
   2a828:	2b03      	cmp	r3, #3
   2a82a:	d150      	bne.n	2a8ce <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2a82c:	683b      	ldr	r3, [r7, #0]
   2a82e:	2201      	movs	r2, #1
   2a830:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2a832:	230f      	movs	r3, #15
   2a834:	18fb      	adds	r3, r7, r3
   2a836:	2200      	movs	r2, #0
   2a838:	701a      	strb	r2, [r3, #0]
		break;
   2a83a:	e04c      	b.n	2a8d6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2a83c:	2308      	movs	r3, #8
   2a83e:	18fa      	adds	r2, r7, r3
   2a840:	1dfb      	adds	r3, r7, #7
   2a842:	781b      	ldrb	r3, [r3, #0]
   2a844:	0011      	movs	r1, r2
   2a846:	0018      	movs	r0, r3
   2a848:	4b26      	ldr	r3, [pc, #152]	; (2a8e4 <disk_ioctl+0xec>)
   2a84a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2a84c:	68bb      	ldr	r3, [r7, #8]
   2a84e:	1c5a      	adds	r2, r3, #1
   2a850:	683b      	ldr	r3, [r7, #0]
   2a852:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2a854:	230f      	movs	r3, #15
   2a856:	18fb      	adds	r3, r7, r3
   2a858:	2200      	movs	r2, #0
   2a85a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a85c:	e03b      	b.n	2a8d6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2a85e:	230e      	movs	r3, #14
   2a860:	18fc      	adds	r4, r7, r3
   2a862:	1dfb      	adds	r3, r7, #7
   2a864:	781b      	ldrb	r3, [r3, #0]
   2a866:	0018      	movs	r0, r3
   2a868:	4b1f      	ldr	r3, [pc, #124]	; (2a8e8 <disk_ioctl+0xf0>)
   2a86a:	4798      	blx	r3
   2a86c:	0003      	movs	r3, r0
   2a86e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2a870:	230e      	movs	r3, #14
   2a872:	18fb      	adds	r3, r7, r3
   2a874:	781b      	ldrb	r3, [r3, #0]
   2a876:	2b01      	cmp	r3, #1
   2a878:	d010      	beq.n	2a89c <disk_ioctl+0xa4>
   2a87a:	230e      	movs	r3, #14
   2a87c:	18fb      	adds	r3, r7, r3
   2a87e:	781b      	ldrb	r3, [r3, #0]
   2a880:	2b02      	cmp	r3, #2
   2a882:	d00b      	beq.n	2a89c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2a884:	230e      	movs	r3, #14
   2a886:	18fb      	adds	r3, r7, r3
   2a888:	781b      	ldrb	r3, [r3, #0]
   2a88a:	2b04      	cmp	r3, #4
   2a88c:	d006      	beq.n	2a89c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2a88e:	230e      	movs	r3, #14
   2a890:	18fb      	adds	r3, r7, r3
   2a892:	781b      	ldrb	r3, [r3, #0]
   2a894:	2b08      	cmp	r3, #8
   2a896:	d001      	beq.n	2a89c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2a898:	2301      	movs	r3, #1
   2a89a:	e01f      	b.n	2a8dc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2a89c:	683b      	ldr	r3, [r7, #0]
   2a89e:	2200      	movs	r2, #0
   2a8a0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2a8a2:	230f      	movs	r3, #15
   2a8a4:	18fb      	adds	r3, r7, r3
   2a8a6:	2200      	movs	r2, #0
   2a8a8:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a8aa:	e014      	b.n	2a8d6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2a8ac:	1dfb      	adds	r3, r7, #7
   2a8ae:	781b      	ldrb	r3, [r3, #0]
   2a8b0:	0018      	movs	r0, r3
   2a8b2:	4b0e      	ldr	r3, [pc, #56]	; (2a8ec <disk_ioctl+0xf4>)
   2a8b4:	4798      	blx	r3
   2a8b6:	1e03      	subs	r3, r0, #0
   2a8b8:	d104      	bne.n	2a8c4 <disk_ioctl+0xcc>
			res = RES_OK;
   2a8ba:	230f      	movs	r3, #15
   2a8bc:	18fb      	adds	r3, r7, r3
   2a8be:	2200      	movs	r2, #0
   2a8c0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2a8c2:	e008      	b.n	2a8d6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2a8c4:	230f      	movs	r3, #15
   2a8c6:	18fb      	adds	r3, r7, r3
   2a8c8:	2203      	movs	r2, #3
   2a8ca:	701a      	strb	r2, [r3, #0]
		break;
   2a8cc:	e003      	b.n	2a8d6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2a8ce:	230f      	movs	r3, #15
   2a8d0:	18fb      	adds	r3, r7, r3
   2a8d2:	2204      	movs	r2, #4
   2a8d4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2a8d6:	230f      	movs	r3, #15
   2a8d8:	18fb      	adds	r3, r7, r3
   2a8da:	781b      	ldrb	r3, [r3, #0]
}
   2a8dc:	0018      	movs	r0, r3
   2a8de:	46bd      	mov	sp, r7
   2a8e0:	b005      	add	sp, #20
   2a8e2:	bd90      	pop	{r4, r7, pc}
   2a8e4:	00025171 	.word	0x00025171
   2a8e8:	000251bd 	.word	0x000251bd
   2a8ec:	00025131 	.word	0x00025131

0002a8f0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2a8f0:	b580      	push	{r7, lr}
   2a8f2:	b084      	sub	sp, #16
   2a8f4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2a8f6:	1d3a      	adds	r2, r7, #4
   2a8f8:	4b12      	ldr	r3, [pc, #72]	; (2a944 <get_fattime+0x54>)
   2a8fa:	0011      	movs	r1, r2
   2a8fc:	0018      	movs	r0, r3
   2a8fe:	4b12      	ldr	r3, [pc, #72]	; (2a948 <get_fattime+0x58>)
   2a900:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2a902:	1d3b      	adds	r3, r7, #4
   2a904:	88db      	ldrh	r3, [r3, #6]
   2a906:	4a11      	ldr	r2, [pc, #68]	; (2a94c <get_fattime+0x5c>)
   2a908:	4694      	mov	ip, r2
   2a90a:	4463      	add	r3, ip
   2a90c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2a90e:	1d3b      	adds	r3, r7, #4
   2a910:	795b      	ldrb	r3, [r3, #5]
   2a912:	055b      	lsls	r3, r3, #21
   2a914:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2a916:	1d3b      	adds	r3, r7, #4
   2a918:	791b      	ldrb	r3, [r3, #4]
   2a91a:	041b      	lsls	r3, r3, #16
   2a91c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2a91e:	1d3b      	adds	r3, r7, #4
   2a920:	789b      	ldrb	r3, [r3, #2]
   2a922:	02db      	lsls	r3, r3, #11
   2a924:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2a926:	1d3b      	adds	r3, r7, #4
   2a928:	785b      	ldrb	r3, [r3, #1]
   2a92a:	015b      	lsls	r3, r3, #5
   2a92c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2a92e:	1d3a      	adds	r2, r7, #4
   2a930:	7812      	ldrb	r2, [r2, #0]
   2a932:	0852      	lsrs	r2, r2, #1
   2a934:	b2d2      	uxtb	r2, r2
   2a936:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2a938:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2a93a:	68fb      	ldr	r3, [r7, #12]
}
   2a93c:	0018      	movs	r0, r3
   2a93e:	46bd      	mov	sp, r7
   2a940:	b004      	add	sp, #16
   2a942:	bd80      	pop	{r7, pc}
   2a944:	20005c00 	.word	0x20005c00
   2a948:	00025f9d 	.word	0x00025f9d
   2a94c:	fffff844 	.word	0xfffff844

0002a950 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2a950:	b580      	push	{r7, lr}
   2a952:	b086      	sub	sp, #24
   2a954:	af00      	add	r7, sp, #0
   2a956:	60f8      	str	r0, [r7, #12]
   2a958:	60b9      	str	r1, [r7, #8]
   2a95a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a95c:	68fb      	ldr	r3, [r7, #12]
   2a95e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2a960:	68bb      	ldr	r3, [r7, #8]
   2a962:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2a964:	e007      	b.n	2a976 <mem_cpy+0x26>
		*d++ = *s++;
   2a966:	697b      	ldr	r3, [r7, #20]
   2a968:	1c5a      	adds	r2, r3, #1
   2a96a:	617a      	str	r2, [r7, #20]
   2a96c:	693a      	ldr	r2, [r7, #16]
   2a96e:	1c51      	adds	r1, r2, #1
   2a970:	6139      	str	r1, [r7, #16]
   2a972:	7812      	ldrb	r2, [r2, #0]
   2a974:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a976:	687b      	ldr	r3, [r7, #4]
   2a978:	1e5a      	subs	r2, r3, #1
   2a97a:	607a      	str	r2, [r7, #4]
   2a97c:	2b00      	cmp	r3, #0
   2a97e:	d1f2      	bne.n	2a966 <mem_cpy+0x16>
}
   2a980:	46c0      	nop			; (mov r8, r8)
   2a982:	46bd      	mov	sp, r7
   2a984:	b006      	add	sp, #24
   2a986:	bd80      	pop	{r7, pc}

0002a988 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2a988:	b580      	push	{r7, lr}
   2a98a:	b086      	sub	sp, #24
   2a98c:	af00      	add	r7, sp, #0
   2a98e:	60f8      	str	r0, [r7, #12]
   2a990:	60b9      	str	r1, [r7, #8]
   2a992:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a994:	68fb      	ldr	r3, [r7, #12]
   2a996:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2a998:	e005      	b.n	2a9a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2a99a:	697b      	ldr	r3, [r7, #20]
   2a99c:	1c5a      	adds	r2, r3, #1
   2a99e:	617a      	str	r2, [r7, #20]
   2a9a0:	68ba      	ldr	r2, [r7, #8]
   2a9a2:	b2d2      	uxtb	r2, r2
   2a9a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a9a6:	687b      	ldr	r3, [r7, #4]
   2a9a8:	1e5a      	subs	r2, r3, #1
   2a9aa:	607a      	str	r2, [r7, #4]
   2a9ac:	2b00      	cmp	r3, #0
   2a9ae:	d1f4      	bne.n	2a99a <mem_set+0x12>
}
   2a9b0:	46c0      	nop			; (mov r8, r8)
   2a9b2:	46bd      	mov	sp, r7
   2a9b4:	b006      	add	sp, #24
   2a9b6:	bd80      	pop	{r7, pc}

0002a9b8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2a9b8:	b580      	push	{r7, lr}
   2a9ba:	b088      	sub	sp, #32
   2a9bc:	af00      	add	r7, sp, #0
   2a9be:	60f8      	str	r0, [r7, #12]
   2a9c0:	60b9      	str	r1, [r7, #8]
   2a9c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2a9c4:	68fb      	ldr	r3, [r7, #12]
   2a9c6:	61fb      	str	r3, [r7, #28]
   2a9c8:	68bb      	ldr	r3, [r7, #8]
   2a9ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2a9cc:	2300      	movs	r3, #0
   2a9ce:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2a9d0:	46c0      	nop			; (mov r8, r8)
   2a9d2:	687b      	ldr	r3, [r7, #4]
   2a9d4:	1e5a      	subs	r2, r3, #1
   2a9d6:	607a      	str	r2, [r7, #4]
   2a9d8:	2b00      	cmp	r3, #0
   2a9da:	d00d      	beq.n	2a9f8 <mem_cmp+0x40>
   2a9dc:	69fb      	ldr	r3, [r7, #28]
   2a9de:	1c5a      	adds	r2, r3, #1
   2a9e0:	61fa      	str	r2, [r7, #28]
   2a9e2:	781b      	ldrb	r3, [r3, #0]
   2a9e4:	0019      	movs	r1, r3
   2a9e6:	69bb      	ldr	r3, [r7, #24]
   2a9e8:	1c5a      	adds	r2, r3, #1
   2a9ea:	61ba      	str	r2, [r7, #24]
   2a9ec:	781b      	ldrb	r3, [r3, #0]
   2a9ee:	1acb      	subs	r3, r1, r3
   2a9f0:	617b      	str	r3, [r7, #20]
   2a9f2:	697b      	ldr	r3, [r7, #20]
   2a9f4:	2b00      	cmp	r3, #0
   2a9f6:	d0ec      	beq.n	2a9d2 <mem_cmp+0x1a>
	return r;
   2a9f8:	697b      	ldr	r3, [r7, #20]
}
   2a9fa:	0018      	movs	r0, r3
   2a9fc:	46bd      	mov	sp, r7
   2a9fe:	b008      	add	sp, #32
   2aa00:	bd80      	pop	{r7, pc}

0002aa02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2aa02:	b580      	push	{r7, lr}
   2aa04:	b082      	sub	sp, #8
   2aa06:	af00      	add	r7, sp, #0
   2aa08:	6078      	str	r0, [r7, #4]
   2aa0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2aa0c:	e002      	b.n	2aa14 <chk_chr+0x12>
   2aa0e:	687b      	ldr	r3, [r7, #4]
   2aa10:	3301      	adds	r3, #1
   2aa12:	607b      	str	r3, [r7, #4]
   2aa14:	687b      	ldr	r3, [r7, #4]
   2aa16:	781b      	ldrb	r3, [r3, #0]
   2aa18:	2b00      	cmp	r3, #0
   2aa1a:	d005      	beq.n	2aa28 <chk_chr+0x26>
   2aa1c:	687b      	ldr	r3, [r7, #4]
   2aa1e:	781b      	ldrb	r3, [r3, #0]
   2aa20:	001a      	movs	r2, r3
   2aa22:	683b      	ldr	r3, [r7, #0]
   2aa24:	429a      	cmp	r2, r3
   2aa26:	d1f2      	bne.n	2aa0e <chk_chr+0xc>
	return *str;
   2aa28:	687b      	ldr	r3, [r7, #4]
   2aa2a:	781b      	ldrb	r3, [r3, #0]
}
   2aa2c:	0018      	movs	r0, r3
   2aa2e:	46bd      	mov	sp, r7
   2aa30:	b002      	add	sp, #8
   2aa32:	bd80      	pop	{r7, pc}

0002aa34 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2aa34:	b590      	push	{r4, r7, lr}
   2aa36:	b085      	sub	sp, #20
   2aa38:	af00      	add	r7, sp, #0
   2aa3a:	6078      	str	r0, [r7, #4]
   2aa3c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2aa3e:	687b      	ldr	r3, [r7, #4]
   2aa40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2aa42:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2aa44:	68fa      	ldr	r2, [r7, #12]
   2aa46:	683b      	ldr	r3, [r7, #0]
   2aa48:	429a      	cmp	r2, r3
   2aa4a:	d04e      	beq.n	2aaea <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2aa4c:	687b      	ldr	r3, [r7, #4]
   2aa4e:	791b      	ldrb	r3, [r3, #4]
   2aa50:	2b00      	cmp	r3, #0
   2aa52:	d037      	beq.n	2aac4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2aa54:	687b      	ldr	r3, [r7, #4]
   2aa56:	7858      	ldrb	r0, [r3, #1]
   2aa58:	687b      	ldr	r3, [r7, #4]
   2aa5a:	3330      	adds	r3, #48	; 0x30
   2aa5c:	0019      	movs	r1, r3
   2aa5e:	68fa      	ldr	r2, [r7, #12]
   2aa60:	2301      	movs	r3, #1
   2aa62:	4c24      	ldr	r4, [pc, #144]	; (2aaf4 <move_window+0xc0>)
   2aa64:	47a0      	blx	r4
   2aa66:	1e03      	subs	r3, r0, #0
   2aa68:	d001      	beq.n	2aa6e <move_window+0x3a>
				return FR_DISK_ERR;
   2aa6a:	2301      	movs	r3, #1
   2aa6c:	e03e      	b.n	2aaec <move_window+0xb8>
			fs->wflag = 0;
   2aa6e:	687b      	ldr	r3, [r7, #4]
   2aa70:	2200      	movs	r2, #0
   2aa72:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2aa74:	687b      	ldr	r3, [r7, #4]
   2aa76:	6a1a      	ldr	r2, [r3, #32]
   2aa78:	687b      	ldr	r3, [r7, #4]
   2aa7a:	69db      	ldr	r3, [r3, #28]
   2aa7c:	18d2      	adds	r2, r2, r3
   2aa7e:	68fb      	ldr	r3, [r7, #12]
   2aa80:	429a      	cmp	r2, r3
   2aa82:	d91f      	bls.n	2aac4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2aa84:	230b      	movs	r3, #11
   2aa86:	18fb      	adds	r3, r7, r3
   2aa88:	687a      	ldr	r2, [r7, #4]
   2aa8a:	78d2      	ldrb	r2, [r2, #3]
   2aa8c:	701a      	strb	r2, [r3, #0]
   2aa8e:	e014      	b.n	2aaba <move_window+0x86>
					wsect += fs->fsize;
   2aa90:	687b      	ldr	r3, [r7, #4]
   2aa92:	69db      	ldr	r3, [r3, #28]
   2aa94:	68fa      	ldr	r2, [r7, #12]
   2aa96:	18d3      	adds	r3, r2, r3
   2aa98:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2aa9a:	687b      	ldr	r3, [r7, #4]
   2aa9c:	7858      	ldrb	r0, [r3, #1]
   2aa9e:	687b      	ldr	r3, [r7, #4]
   2aaa0:	3330      	adds	r3, #48	; 0x30
   2aaa2:	0019      	movs	r1, r3
   2aaa4:	68fa      	ldr	r2, [r7, #12]
   2aaa6:	2301      	movs	r3, #1
   2aaa8:	4c12      	ldr	r4, [pc, #72]	; (2aaf4 <move_window+0xc0>)
   2aaaa:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2aaac:	230b      	movs	r3, #11
   2aaae:	18fb      	adds	r3, r7, r3
   2aab0:	781a      	ldrb	r2, [r3, #0]
   2aab2:	230b      	movs	r3, #11
   2aab4:	18fb      	adds	r3, r7, r3
   2aab6:	3a01      	subs	r2, #1
   2aab8:	701a      	strb	r2, [r3, #0]
   2aaba:	230b      	movs	r3, #11
   2aabc:	18fb      	adds	r3, r7, r3
   2aabe:	781b      	ldrb	r3, [r3, #0]
   2aac0:	2b01      	cmp	r3, #1
   2aac2:	d8e5      	bhi.n	2aa90 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2aac4:	683b      	ldr	r3, [r7, #0]
   2aac6:	2b00      	cmp	r3, #0
   2aac8:	d00f      	beq.n	2aaea <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2aaca:	687b      	ldr	r3, [r7, #4]
   2aacc:	7858      	ldrb	r0, [r3, #1]
   2aace:	687b      	ldr	r3, [r7, #4]
   2aad0:	3330      	adds	r3, #48	; 0x30
   2aad2:	0019      	movs	r1, r3
   2aad4:	683a      	ldr	r2, [r7, #0]
   2aad6:	2301      	movs	r3, #1
   2aad8:	4c07      	ldr	r4, [pc, #28]	; (2aaf8 <move_window+0xc4>)
   2aada:	47a0      	blx	r4
   2aadc:	1e03      	subs	r3, r0, #0
   2aade:	d001      	beq.n	2aae4 <move_window+0xb0>
				return FR_DISK_ERR;
   2aae0:	2301      	movs	r3, #1
   2aae2:	e003      	b.n	2aaec <move_window+0xb8>
			fs->winsect = sector;
   2aae4:	687b      	ldr	r3, [r7, #4]
   2aae6:	683a      	ldr	r2, [r7, #0]
   2aae8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2aaea:	2300      	movs	r3, #0
}
   2aaec:	0018      	movs	r0, r3
   2aaee:	46bd      	mov	sp, r7
   2aaf0:	b005      	add	sp, #20
   2aaf2:	bd90      	pop	{r4, r7, pc}
   2aaf4:	0002a721 	.word	0x0002a721
   2aaf8:	0002a649 	.word	0x0002a649

0002aafc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2aafc:	b590      	push	{r4, r7, lr}
   2aafe:	b085      	sub	sp, #20
   2ab00:	af00      	add	r7, sp, #0
   2ab02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2ab04:	230f      	movs	r3, #15
   2ab06:	18fc      	adds	r4, r7, r3
   2ab08:	687b      	ldr	r3, [r7, #4]
   2ab0a:	2100      	movs	r1, #0
   2ab0c:	0018      	movs	r0, r3
   2ab0e:	4b52      	ldr	r3, [pc, #328]	; (2ac58 <sync+0x15c>)
   2ab10:	4798      	blx	r3
   2ab12:	0003      	movs	r3, r0
   2ab14:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ab16:	230f      	movs	r3, #15
   2ab18:	18fb      	adds	r3, r7, r3
   2ab1a:	781b      	ldrb	r3, [r3, #0]
   2ab1c:	2b00      	cmp	r3, #0
   2ab1e:	d000      	beq.n	2ab22 <sync+0x26>
   2ab20:	e093      	b.n	2ac4a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2ab22:	687b      	ldr	r3, [r7, #4]
   2ab24:	781b      	ldrb	r3, [r3, #0]
   2ab26:	2b03      	cmp	r3, #3
   2ab28:	d000      	beq.n	2ab2c <sync+0x30>
   2ab2a:	e081      	b.n	2ac30 <sync+0x134>
   2ab2c:	687b      	ldr	r3, [r7, #4]
   2ab2e:	795b      	ldrb	r3, [r3, #5]
   2ab30:	2b00      	cmp	r3, #0
   2ab32:	d07d      	beq.n	2ac30 <sync+0x134>
			fs->winsect = 0;
   2ab34:	687b      	ldr	r3, [r7, #4]
   2ab36:	2200      	movs	r2, #0
   2ab38:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2ab3a:	687b      	ldr	r3, [r7, #4]
   2ab3c:	3330      	adds	r3, #48	; 0x30
   2ab3e:	0018      	movs	r0, r3
   2ab40:	2380      	movs	r3, #128	; 0x80
   2ab42:	009b      	lsls	r3, r3, #2
   2ab44:	001a      	movs	r2, r3
   2ab46:	2100      	movs	r1, #0
   2ab48:	4b44      	ldr	r3, [pc, #272]	; (2ac5c <sync+0x160>)
   2ab4a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2ab4c:	687b      	ldr	r3, [r7, #4]
   2ab4e:	4a44      	ldr	r2, [pc, #272]	; (2ac60 <sync+0x164>)
   2ab50:	2155      	movs	r1, #85	; 0x55
   2ab52:	5499      	strb	r1, [r3, r2]
   2ab54:	687b      	ldr	r3, [r7, #4]
   2ab56:	4a43      	ldr	r2, [pc, #268]	; (2ac64 <sync+0x168>)
   2ab58:	21aa      	movs	r1, #170	; 0xaa
   2ab5a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2ab5c:	687b      	ldr	r3, [r7, #4]
   2ab5e:	2230      	movs	r2, #48	; 0x30
   2ab60:	2152      	movs	r1, #82	; 0x52
   2ab62:	5499      	strb	r1, [r3, r2]
   2ab64:	687b      	ldr	r3, [r7, #4]
   2ab66:	2231      	movs	r2, #49	; 0x31
   2ab68:	2152      	movs	r1, #82	; 0x52
   2ab6a:	5499      	strb	r1, [r3, r2]
   2ab6c:	687b      	ldr	r3, [r7, #4]
   2ab6e:	2232      	movs	r2, #50	; 0x32
   2ab70:	2161      	movs	r1, #97	; 0x61
   2ab72:	5499      	strb	r1, [r3, r2]
   2ab74:	687b      	ldr	r3, [r7, #4]
   2ab76:	2233      	movs	r2, #51	; 0x33
   2ab78:	2141      	movs	r1, #65	; 0x41
   2ab7a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2ab7c:	687a      	ldr	r2, [r7, #4]
   2ab7e:	2385      	movs	r3, #133	; 0x85
   2ab80:	009b      	lsls	r3, r3, #2
   2ab82:	2172      	movs	r1, #114	; 0x72
   2ab84:	54d1      	strb	r1, [r2, r3]
   2ab86:	687b      	ldr	r3, [r7, #4]
   2ab88:	4a37      	ldr	r2, [pc, #220]	; (2ac68 <sync+0x16c>)
   2ab8a:	2172      	movs	r1, #114	; 0x72
   2ab8c:	5499      	strb	r1, [r3, r2]
   2ab8e:	687b      	ldr	r3, [r7, #4]
   2ab90:	4a36      	ldr	r2, [pc, #216]	; (2ac6c <sync+0x170>)
   2ab92:	2141      	movs	r1, #65	; 0x41
   2ab94:	5499      	strb	r1, [r3, r2]
   2ab96:	687b      	ldr	r3, [r7, #4]
   2ab98:	4a35      	ldr	r2, [pc, #212]	; (2ac70 <sync+0x174>)
   2ab9a:	2161      	movs	r1, #97	; 0x61
   2ab9c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ab9e:	687b      	ldr	r3, [r7, #4]
   2aba0:	691b      	ldr	r3, [r3, #16]
   2aba2:	b2d9      	uxtb	r1, r3
   2aba4:	687a      	ldr	r2, [r7, #4]
   2aba6:	2386      	movs	r3, #134	; 0x86
   2aba8:	009b      	lsls	r3, r3, #2
   2abaa:	54d1      	strb	r1, [r2, r3]
   2abac:	687b      	ldr	r3, [r7, #4]
   2abae:	691b      	ldr	r3, [r3, #16]
   2abb0:	b29b      	uxth	r3, r3
   2abb2:	0a1b      	lsrs	r3, r3, #8
   2abb4:	b29b      	uxth	r3, r3
   2abb6:	b2d9      	uxtb	r1, r3
   2abb8:	687b      	ldr	r3, [r7, #4]
   2abba:	4a2e      	ldr	r2, [pc, #184]	; (2ac74 <sync+0x178>)
   2abbc:	5499      	strb	r1, [r3, r2]
   2abbe:	687b      	ldr	r3, [r7, #4]
   2abc0:	691b      	ldr	r3, [r3, #16]
   2abc2:	0c1b      	lsrs	r3, r3, #16
   2abc4:	b2d9      	uxtb	r1, r3
   2abc6:	687b      	ldr	r3, [r7, #4]
   2abc8:	4a2b      	ldr	r2, [pc, #172]	; (2ac78 <sync+0x17c>)
   2abca:	5499      	strb	r1, [r3, r2]
   2abcc:	687b      	ldr	r3, [r7, #4]
   2abce:	691b      	ldr	r3, [r3, #16]
   2abd0:	0e1b      	lsrs	r3, r3, #24
   2abd2:	b2d9      	uxtb	r1, r3
   2abd4:	687b      	ldr	r3, [r7, #4]
   2abd6:	4a29      	ldr	r2, [pc, #164]	; (2ac7c <sync+0x180>)
   2abd8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2abda:	687b      	ldr	r3, [r7, #4]
   2abdc:	68db      	ldr	r3, [r3, #12]
   2abde:	b2d9      	uxtb	r1, r3
   2abe0:	687a      	ldr	r2, [r7, #4]
   2abe2:	2387      	movs	r3, #135	; 0x87
   2abe4:	009b      	lsls	r3, r3, #2
   2abe6:	54d1      	strb	r1, [r2, r3]
   2abe8:	687b      	ldr	r3, [r7, #4]
   2abea:	68db      	ldr	r3, [r3, #12]
   2abec:	b29b      	uxth	r3, r3
   2abee:	0a1b      	lsrs	r3, r3, #8
   2abf0:	b29b      	uxth	r3, r3
   2abf2:	b2d9      	uxtb	r1, r3
   2abf4:	687b      	ldr	r3, [r7, #4]
   2abf6:	4a22      	ldr	r2, [pc, #136]	; (2ac80 <sync+0x184>)
   2abf8:	5499      	strb	r1, [r3, r2]
   2abfa:	687b      	ldr	r3, [r7, #4]
   2abfc:	68db      	ldr	r3, [r3, #12]
   2abfe:	0c1b      	lsrs	r3, r3, #16
   2ac00:	b2d9      	uxtb	r1, r3
   2ac02:	687b      	ldr	r3, [r7, #4]
   2ac04:	4a1f      	ldr	r2, [pc, #124]	; (2ac84 <sync+0x188>)
   2ac06:	5499      	strb	r1, [r3, r2]
   2ac08:	687b      	ldr	r3, [r7, #4]
   2ac0a:	68db      	ldr	r3, [r3, #12]
   2ac0c:	0e1b      	lsrs	r3, r3, #24
   2ac0e:	b2d9      	uxtb	r1, r3
   2ac10:	687b      	ldr	r3, [r7, #4]
   2ac12:	4a1d      	ldr	r2, [pc, #116]	; (2ac88 <sync+0x18c>)
   2ac14:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2ac16:	687b      	ldr	r3, [r7, #4]
   2ac18:	7858      	ldrb	r0, [r3, #1]
   2ac1a:	687b      	ldr	r3, [r7, #4]
   2ac1c:	3330      	adds	r3, #48	; 0x30
   2ac1e:	0019      	movs	r1, r3
   2ac20:	687b      	ldr	r3, [r7, #4]
   2ac22:	695a      	ldr	r2, [r3, #20]
   2ac24:	2301      	movs	r3, #1
   2ac26:	4c19      	ldr	r4, [pc, #100]	; (2ac8c <sync+0x190>)
   2ac28:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2ac2a:	687b      	ldr	r3, [r7, #4]
   2ac2c:	2200      	movs	r2, #0
   2ac2e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2ac30:	687b      	ldr	r3, [r7, #4]
   2ac32:	785b      	ldrb	r3, [r3, #1]
   2ac34:	2200      	movs	r2, #0
   2ac36:	2100      	movs	r1, #0
   2ac38:	0018      	movs	r0, r3
   2ac3a:	4b15      	ldr	r3, [pc, #84]	; (2ac90 <sync+0x194>)
   2ac3c:	4798      	blx	r3
   2ac3e:	1e03      	subs	r3, r0, #0
   2ac40:	d003      	beq.n	2ac4a <sync+0x14e>
			res = FR_DISK_ERR;
   2ac42:	230f      	movs	r3, #15
   2ac44:	18fb      	adds	r3, r7, r3
   2ac46:	2201      	movs	r2, #1
   2ac48:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2ac4a:	230f      	movs	r3, #15
   2ac4c:	18fb      	adds	r3, r7, r3
   2ac4e:	781b      	ldrb	r3, [r3, #0]
}
   2ac50:	0018      	movs	r0, r3
   2ac52:	46bd      	mov	sp, r7
   2ac54:	b005      	add	sp, #20
   2ac56:	bd90      	pop	{r4, r7, pc}
   2ac58:	0002aa35 	.word	0x0002aa35
   2ac5c:	0002a989 	.word	0x0002a989
   2ac60:	0000022e 	.word	0x0000022e
   2ac64:	0000022f 	.word	0x0000022f
   2ac68:	00000215 	.word	0x00000215
   2ac6c:	00000216 	.word	0x00000216
   2ac70:	00000217 	.word	0x00000217
   2ac74:	00000219 	.word	0x00000219
   2ac78:	0000021a 	.word	0x0000021a
   2ac7c:	0000021b 	.word	0x0000021b
   2ac80:	0000021d 	.word	0x0000021d
   2ac84:	0000021e 	.word	0x0000021e
   2ac88:	0000021f 	.word	0x0000021f
   2ac8c:	0002a721 	.word	0x0002a721
   2ac90:	0002a7f9 	.word	0x0002a7f9

0002ac94 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2ac94:	b580      	push	{r7, lr}
   2ac96:	b082      	sub	sp, #8
   2ac98:	af00      	add	r7, sp, #0
   2ac9a:	6078      	str	r0, [r7, #4]
   2ac9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2ac9e:	683b      	ldr	r3, [r7, #0]
   2aca0:	3b02      	subs	r3, #2
   2aca2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2aca4:	687b      	ldr	r3, [r7, #4]
   2aca6:	699b      	ldr	r3, [r3, #24]
   2aca8:	1e9a      	subs	r2, r3, #2
   2acaa:	683b      	ldr	r3, [r7, #0]
   2acac:	429a      	cmp	r2, r3
   2acae:	d801      	bhi.n	2acb4 <clust2sect+0x20>
   2acb0:	2300      	movs	r3, #0
   2acb2:	e007      	b.n	2acc4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2acb4:	687b      	ldr	r3, [r7, #4]
   2acb6:	789b      	ldrb	r3, [r3, #2]
   2acb8:	001a      	movs	r2, r3
   2acba:	683b      	ldr	r3, [r7, #0]
   2acbc:	435a      	muls	r2, r3
   2acbe:	687b      	ldr	r3, [r7, #4]
   2acc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2acc2:	18d3      	adds	r3, r2, r3
}
   2acc4:	0018      	movs	r0, r3
   2acc6:	46bd      	mov	sp, r7
   2acc8:	b002      	add	sp, #8
   2acca:	bd80      	pop	{r7, pc}

0002accc <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2accc:	b580      	push	{r7, lr}
   2acce:	b086      	sub	sp, #24
   2acd0:	af00      	add	r7, sp, #0
   2acd2:	6078      	str	r0, [r7, #4]
   2acd4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2acd6:	683b      	ldr	r3, [r7, #0]
   2acd8:	2b01      	cmp	r3, #1
   2acda:	d904      	bls.n	2ace6 <get_fat+0x1a>
   2acdc:	687b      	ldr	r3, [r7, #4]
   2acde:	699a      	ldr	r2, [r3, #24]
   2ace0:	683b      	ldr	r3, [r7, #0]
   2ace2:	429a      	cmp	r2, r3
   2ace4:	d801      	bhi.n	2acea <get_fat+0x1e>
		return 1;
   2ace6:	2301      	movs	r3, #1
   2ace8:	e09f      	b.n	2ae2a <get_fat+0x15e>

	switch (fs->fs_type) {
   2acea:	687b      	ldr	r3, [r7, #4]
   2acec:	781b      	ldrb	r3, [r3, #0]
   2acee:	2b02      	cmp	r3, #2
   2acf0:	d048      	beq.n	2ad84 <get_fat+0xb8>
   2acf2:	2b03      	cmp	r3, #3
   2acf4:	d067      	beq.n	2adc6 <get_fat+0xfa>
   2acf6:	2b01      	cmp	r3, #1
   2acf8:	d000      	beq.n	2acfc <get_fat+0x30>
   2acfa:	e094      	b.n	2ae26 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2acfc:	683b      	ldr	r3, [r7, #0]
   2acfe:	617b      	str	r3, [r7, #20]
   2ad00:	697b      	ldr	r3, [r7, #20]
   2ad02:	085b      	lsrs	r3, r3, #1
   2ad04:	697a      	ldr	r2, [r7, #20]
   2ad06:	18d3      	adds	r3, r2, r3
   2ad08:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ad0a:	687b      	ldr	r3, [r7, #4]
   2ad0c:	6a1a      	ldr	r2, [r3, #32]
   2ad0e:	697b      	ldr	r3, [r7, #20]
   2ad10:	0a5b      	lsrs	r3, r3, #9
   2ad12:	18d2      	adds	r2, r2, r3
   2ad14:	687b      	ldr	r3, [r7, #4]
   2ad16:	0011      	movs	r1, r2
   2ad18:	0018      	movs	r0, r3
   2ad1a:	4b46      	ldr	r3, [pc, #280]	; (2ae34 <get_fat+0x168>)
   2ad1c:	4798      	blx	r3
   2ad1e:	1e03      	subs	r3, r0, #0
   2ad20:	d000      	beq.n	2ad24 <get_fat+0x58>
   2ad22:	e079      	b.n	2ae18 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2ad24:	697b      	ldr	r3, [r7, #20]
   2ad26:	05db      	lsls	r3, r3, #23
   2ad28:	0ddb      	lsrs	r3, r3, #23
   2ad2a:	687a      	ldr	r2, [r7, #4]
   2ad2c:	2130      	movs	r1, #48	; 0x30
   2ad2e:	18d3      	adds	r3, r2, r3
   2ad30:	185b      	adds	r3, r3, r1
   2ad32:	781b      	ldrb	r3, [r3, #0]
   2ad34:	613b      	str	r3, [r7, #16]
   2ad36:	697b      	ldr	r3, [r7, #20]
   2ad38:	3301      	adds	r3, #1
   2ad3a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ad3c:	687b      	ldr	r3, [r7, #4]
   2ad3e:	6a1a      	ldr	r2, [r3, #32]
   2ad40:	697b      	ldr	r3, [r7, #20]
   2ad42:	0a5b      	lsrs	r3, r3, #9
   2ad44:	18d2      	adds	r2, r2, r3
   2ad46:	687b      	ldr	r3, [r7, #4]
   2ad48:	0011      	movs	r1, r2
   2ad4a:	0018      	movs	r0, r3
   2ad4c:	4b39      	ldr	r3, [pc, #228]	; (2ae34 <get_fat+0x168>)
   2ad4e:	4798      	blx	r3
   2ad50:	1e03      	subs	r3, r0, #0
   2ad52:	d163      	bne.n	2ae1c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2ad54:	697b      	ldr	r3, [r7, #20]
   2ad56:	05db      	lsls	r3, r3, #23
   2ad58:	0ddb      	lsrs	r3, r3, #23
   2ad5a:	687a      	ldr	r2, [r7, #4]
   2ad5c:	2130      	movs	r1, #48	; 0x30
   2ad5e:	18d3      	adds	r3, r2, r3
   2ad60:	185b      	adds	r3, r3, r1
   2ad62:	781b      	ldrb	r3, [r3, #0]
   2ad64:	021b      	lsls	r3, r3, #8
   2ad66:	001a      	movs	r2, r3
   2ad68:	693b      	ldr	r3, [r7, #16]
   2ad6a:	4313      	orrs	r3, r2
   2ad6c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2ad6e:	683b      	ldr	r3, [r7, #0]
   2ad70:	2201      	movs	r2, #1
   2ad72:	4013      	ands	r3, r2
   2ad74:	d002      	beq.n	2ad7c <get_fat+0xb0>
   2ad76:	693b      	ldr	r3, [r7, #16]
   2ad78:	091b      	lsrs	r3, r3, #4
   2ad7a:	e056      	b.n	2ae2a <get_fat+0x15e>
   2ad7c:	693b      	ldr	r3, [r7, #16]
   2ad7e:	051b      	lsls	r3, r3, #20
   2ad80:	0d1b      	lsrs	r3, r3, #20
   2ad82:	e052      	b.n	2ae2a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ad84:	687b      	ldr	r3, [r7, #4]
   2ad86:	6a1a      	ldr	r2, [r3, #32]
   2ad88:	683b      	ldr	r3, [r7, #0]
   2ad8a:	0a1b      	lsrs	r3, r3, #8
   2ad8c:	18d2      	adds	r2, r2, r3
   2ad8e:	687b      	ldr	r3, [r7, #4]
   2ad90:	0011      	movs	r1, r2
   2ad92:	0018      	movs	r0, r3
   2ad94:	4b27      	ldr	r3, [pc, #156]	; (2ae34 <get_fat+0x168>)
   2ad96:	4798      	blx	r3
   2ad98:	1e03      	subs	r3, r0, #0
   2ad9a:	d141      	bne.n	2ae20 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2ad9c:	683b      	ldr	r3, [r7, #0]
   2ad9e:	005a      	lsls	r2, r3, #1
   2ada0:	23ff      	movs	r3, #255	; 0xff
   2ada2:	005b      	lsls	r3, r3, #1
   2ada4:	4013      	ands	r3, r2
   2ada6:	3330      	adds	r3, #48	; 0x30
   2ada8:	687a      	ldr	r2, [r7, #4]
   2adaa:	18d3      	adds	r3, r2, r3
   2adac:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2adae:	68fb      	ldr	r3, [r7, #12]
   2adb0:	3301      	adds	r3, #1
   2adb2:	781b      	ldrb	r3, [r3, #0]
   2adb4:	021b      	lsls	r3, r3, #8
   2adb6:	b21a      	sxth	r2, r3
   2adb8:	68fb      	ldr	r3, [r7, #12]
   2adba:	781b      	ldrb	r3, [r3, #0]
   2adbc:	b21b      	sxth	r3, r3
   2adbe:	4313      	orrs	r3, r2
   2adc0:	b21b      	sxth	r3, r3
   2adc2:	b29b      	uxth	r3, r3
   2adc4:	e031      	b.n	2ae2a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2adc6:	687b      	ldr	r3, [r7, #4]
   2adc8:	6a1a      	ldr	r2, [r3, #32]
   2adca:	683b      	ldr	r3, [r7, #0]
   2adcc:	09db      	lsrs	r3, r3, #7
   2adce:	18d2      	adds	r2, r2, r3
   2add0:	687b      	ldr	r3, [r7, #4]
   2add2:	0011      	movs	r1, r2
   2add4:	0018      	movs	r0, r3
   2add6:	4b17      	ldr	r3, [pc, #92]	; (2ae34 <get_fat+0x168>)
   2add8:	4798      	blx	r3
   2adda:	1e03      	subs	r3, r0, #0
   2addc:	d122      	bne.n	2ae24 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2adde:	683b      	ldr	r3, [r7, #0]
   2ade0:	009a      	lsls	r2, r3, #2
   2ade2:	23fe      	movs	r3, #254	; 0xfe
   2ade4:	005b      	lsls	r3, r3, #1
   2ade6:	4013      	ands	r3, r2
   2ade8:	3330      	adds	r3, #48	; 0x30
   2adea:	687a      	ldr	r2, [r7, #4]
   2adec:	18d3      	adds	r3, r2, r3
   2adee:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2adf0:	68fb      	ldr	r3, [r7, #12]
   2adf2:	3303      	adds	r3, #3
   2adf4:	781b      	ldrb	r3, [r3, #0]
   2adf6:	061a      	lsls	r2, r3, #24
   2adf8:	68fb      	ldr	r3, [r7, #12]
   2adfa:	3302      	adds	r3, #2
   2adfc:	781b      	ldrb	r3, [r3, #0]
   2adfe:	041b      	lsls	r3, r3, #16
   2ae00:	4313      	orrs	r3, r2
   2ae02:	68fa      	ldr	r2, [r7, #12]
   2ae04:	3201      	adds	r2, #1
   2ae06:	7812      	ldrb	r2, [r2, #0]
   2ae08:	0212      	lsls	r2, r2, #8
   2ae0a:	4313      	orrs	r3, r2
   2ae0c:	68fa      	ldr	r2, [r7, #12]
   2ae0e:	7812      	ldrb	r2, [r2, #0]
   2ae10:	4313      	orrs	r3, r2
   2ae12:	011b      	lsls	r3, r3, #4
   2ae14:	091b      	lsrs	r3, r3, #4
   2ae16:	e008      	b.n	2ae2a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ae18:	46c0      	nop			; (mov r8, r8)
   2ae1a:	e004      	b.n	2ae26 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ae1c:	46c0      	nop			; (mov r8, r8)
   2ae1e:	e002      	b.n	2ae26 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ae20:	46c0      	nop			; (mov r8, r8)
   2ae22:	e000      	b.n	2ae26 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ae24:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2ae26:	2301      	movs	r3, #1
   2ae28:	425b      	negs	r3, r3
}
   2ae2a:	0018      	movs	r0, r3
   2ae2c:	46bd      	mov	sp, r7
   2ae2e:	b006      	add	sp, #24
   2ae30:	bd80      	pop	{r7, pc}
   2ae32:	46c0      	nop			; (mov r8, r8)
   2ae34:	0002aa35 	.word	0x0002aa35

0002ae38 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ae38:	b590      	push	{r4, r7, lr}
   2ae3a:	b089      	sub	sp, #36	; 0x24
   2ae3c:	af00      	add	r7, sp, #0
   2ae3e:	60f8      	str	r0, [r7, #12]
   2ae40:	60b9      	str	r1, [r7, #8]
   2ae42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ae44:	68bb      	ldr	r3, [r7, #8]
   2ae46:	2b01      	cmp	r3, #1
   2ae48:	d904      	bls.n	2ae54 <put_fat+0x1c>
   2ae4a:	68fb      	ldr	r3, [r7, #12]
   2ae4c:	699a      	ldr	r2, [r3, #24]
   2ae4e:	68bb      	ldr	r3, [r7, #8]
   2ae50:	429a      	cmp	r2, r3
   2ae52:	d804      	bhi.n	2ae5e <put_fat+0x26>
		res = FR_INT_ERR;
   2ae54:	231f      	movs	r3, #31
   2ae56:	18fb      	adds	r3, r7, r3
   2ae58:	2202      	movs	r2, #2
   2ae5a:	701a      	strb	r2, [r3, #0]
   2ae5c:	e100      	b.n	2b060 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2ae5e:	68fb      	ldr	r3, [r7, #12]
   2ae60:	781b      	ldrb	r3, [r3, #0]
   2ae62:	2b02      	cmp	r3, #2
   2ae64:	d100      	bne.n	2ae68 <put_fat+0x30>
   2ae66:	e078      	b.n	2af5a <put_fat+0x122>
   2ae68:	2b03      	cmp	r3, #3
   2ae6a:	d100      	bne.n	2ae6e <put_fat+0x36>
   2ae6c:	e09e      	b.n	2afac <put_fat+0x174>
   2ae6e:	2b01      	cmp	r3, #1
   2ae70:	d000      	beq.n	2ae74 <put_fat+0x3c>
   2ae72:	e0e6      	b.n	2b042 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2ae74:	68bb      	ldr	r3, [r7, #8]
   2ae76:	61bb      	str	r3, [r7, #24]
   2ae78:	69bb      	ldr	r3, [r7, #24]
   2ae7a:	085b      	lsrs	r3, r3, #1
   2ae7c:	69ba      	ldr	r2, [r7, #24]
   2ae7e:	18d3      	adds	r3, r2, r3
   2ae80:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ae82:	68fb      	ldr	r3, [r7, #12]
   2ae84:	6a1a      	ldr	r2, [r3, #32]
   2ae86:	69bb      	ldr	r3, [r7, #24]
   2ae88:	0a5b      	lsrs	r3, r3, #9
   2ae8a:	18d2      	adds	r2, r2, r3
   2ae8c:	231f      	movs	r3, #31
   2ae8e:	18fc      	adds	r4, r7, r3
   2ae90:	68fb      	ldr	r3, [r7, #12]
   2ae92:	0011      	movs	r1, r2
   2ae94:	0018      	movs	r0, r3
   2ae96:	4b76      	ldr	r3, [pc, #472]	; (2b070 <put_fat+0x238>)
   2ae98:	4798      	blx	r3
   2ae9a:	0003      	movs	r3, r0
   2ae9c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ae9e:	231f      	movs	r3, #31
   2aea0:	18fb      	adds	r3, r7, r3
   2aea2:	781b      	ldrb	r3, [r3, #0]
   2aea4:	2b00      	cmp	r3, #0
   2aea6:	d000      	beq.n	2aeaa <put_fat+0x72>
   2aea8:	e0d0      	b.n	2b04c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2aeaa:	69bb      	ldr	r3, [r7, #24]
   2aeac:	05db      	lsls	r3, r3, #23
   2aeae:	0ddb      	lsrs	r3, r3, #23
   2aeb0:	3330      	adds	r3, #48	; 0x30
   2aeb2:	68fa      	ldr	r2, [r7, #12]
   2aeb4:	18d3      	adds	r3, r2, r3
   2aeb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2aeb8:	68bb      	ldr	r3, [r7, #8]
   2aeba:	2201      	movs	r2, #1
   2aebc:	4013      	ands	r3, r2
   2aebe:	d00d      	beq.n	2aedc <put_fat+0xa4>
   2aec0:	697b      	ldr	r3, [r7, #20]
   2aec2:	781b      	ldrb	r3, [r3, #0]
   2aec4:	b25b      	sxtb	r3, r3
   2aec6:	220f      	movs	r2, #15
   2aec8:	4013      	ands	r3, r2
   2aeca:	b25a      	sxtb	r2, r3
   2aecc:	687b      	ldr	r3, [r7, #4]
   2aece:	b2db      	uxtb	r3, r3
   2aed0:	011b      	lsls	r3, r3, #4
   2aed2:	b25b      	sxtb	r3, r3
   2aed4:	4313      	orrs	r3, r2
   2aed6:	b25b      	sxtb	r3, r3
   2aed8:	b2db      	uxtb	r3, r3
   2aeda:	e001      	b.n	2aee0 <put_fat+0xa8>
   2aedc:	687b      	ldr	r3, [r7, #4]
   2aede:	b2db      	uxtb	r3, r3
   2aee0:	697a      	ldr	r2, [r7, #20]
   2aee2:	7013      	strb	r3, [r2, #0]
			bc++;
   2aee4:	69bb      	ldr	r3, [r7, #24]
   2aee6:	3301      	adds	r3, #1
   2aee8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2aeea:	68fb      	ldr	r3, [r7, #12]
   2aeec:	2201      	movs	r2, #1
   2aeee:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2aef0:	68fb      	ldr	r3, [r7, #12]
   2aef2:	6a1a      	ldr	r2, [r3, #32]
   2aef4:	69bb      	ldr	r3, [r7, #24]
   2aef6:	0a5b      	lsrs	r3, r3, #9
   2aef8:	18d2      	adds	r2, r2, r3
   2aefa:	231f      	movs	r3, #31
   2aefc:	18fc      	adds	r4, r7, r3
   2aefe:	68fb      	ldr	r3, [r7, #12]
   2af00:	0011      	movs	r1, r2
   2af02:	0018      	movs	r0, r3
   2af04:	4b5a      	ldr	r3, [pc, #360]	; (2b070 <put_fat+0x238>)
   2af06:	4798      	blx	r3
   2af08:	0003      	movs	r3, r0
   2af0a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2af0c:	231f      	movs	r3, #31
   2af0e:	18fb      	adds	r3, r7, r3
   2af10:	781b      	ldrb	r3, [r3, #0]
   2af12:	2b00      	cmp	r3, #0
   2af14:	d000      	beq.n	2af18 <put_fat+0xe0>
   2af16:	e09b      	b.n	2b050 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2af18:	69bb      	ldr	r3, [r7, #24]
   2af1a:	05db      	lsls	r3, r3, #23
   2af1c:	0ddb      	lsrs	r3, r3, #23
   2af1e:	3330      	adds	r3, #48	; 0x30
   2af20:	68fa      	ldr	r2, [r7, #12]
   2af22:	18d3      	adds	r3, r2, r3
   2af24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2af26:	68bb      	ldr	r3, [r7, #8]
   2af28:	2201      	movs	r2, #1
   2af2a:	4013      	ands	r3, r2
   2af2c:	d003      	beq.n	2af36 <put_fat+0xfe>
   2af2e:	687b      	ldr	r3, [r7, #4]
   2af30:	091b      	lsrs	r3, r3, #4
   2af32:	b2db      	uxtb	r3, r3
   2af34:	e00e      	b.n	2af54 <put_fat+0x11c>
   2af36:	697b      	ldr	r3, [r7, #20]
   2af38:	781b      	ldrb	r3, [r3, #0]
   2af3a:	b25b      	sxtb	r3, r3
   2af3c:	220f      	movs	r2, #15
   2af3e:	4393      	bics	r3, r2
   2af40:	b25a      	sxtb	r2, r3
   2af42:	687b      	ldr	r3, [r7, #4]
   2af44:	0a1b      	lsrs	r3, r3, #8
   2af46:	b25b      	sxtb	r3, r3
   2af48:	210f      	movs	r1, #15
   2af4a:	400b      	ands	r3, r1
   2af4c:	b25b      	sxtb	r3, r3
   2af4e:	4313      	orrs	r3, r2
   2af50:	b25b      	sxtb	r3, r3
   2af52:	b2db      	uxtb	r3, r3
   2af54:	697a      	ldr	r2, [r7, #20]
   2af56:	7013      	strb	r3, [r2, #0]
			break;
   2af58:	e07f      	b.n	2b05a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2af5a:	68fb      	ldr	r3, [r7, #12]
   2af5c:	6a1a      	ldr	r2, [r3, #32]
   2af5e:	68bb      	ldr	r3, [r7, #8]
   2af60:	0a1b      	lsrs	r3, r3, #8
   2af62:	18d2      	adds	r2, r2, r3
   2af64:	231f      	movs	r3, #31
   2af66:	18fc      	adds	r4, r7, r3
   2af68:	68fb      	ldr	r3, [r7, #12]
   2af6a:	0011      	movs	r1, r2
   2af6c:	0018      	movs	r0, r3
   2af6e:	4b40      	ldr	r3, [pc, #256]	; (2b070 <put_fat+0x238>)
   2af70:	4798      	blx	r3
   2af72:	0003      	movs	r3, r0
   2af74:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2af76:	231f      	movs	r3, #31
   2af78:	18fb      	adds	r3, r7, r3
   2af7a:	781b      	ldrb	r3, [r3, #0]
   2af7c:	2b00      	cmp	r3, #0
   2af7e:	d169      	bne.n	2b054 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2af80:	68bb      	ldr	r3, [r7, #8]
   2af82:	005a      	lsls	r2, r3, #1
   2af84:	23ff      	movs	r3, #255	; 0xff
   2af86:	005b      	lsls	r3, r3, #1
   2af88:	4013      	ands	r3, r2
   2af8a:	3330      	adds	r3, #48	; 0x30
   2af8c:	68fa      	ldr	r2, [r7, #12]
   2af8e:	18d3      	adds	r3, r2, r3
   2af90:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2af92:	687b      	ldr	r3, [r7, #4]
   2af94:	b2da      	uxtb	r2, r3
   2af96:	697b      	ldr	r3, [r7, #20]
   2af98:	701a      	strb	r2, [r3, #0]
   2af9a:	697b      	ldr	r3, [r7, #20]
   2af9c:	3301      	adds	r3, #1
   2af9e:	687a      	ldr	r2, [r7, #4]
   2afa0:	b292      	uxth	r2, r2
   2afa2:	0a12      	lsrs	r2, r2, #8
   2afa4:	b292      	uxth	r2, r2
   2afa6:	b2d2      	uxtb	r2, r2
   2afa8:	701a      	strb	r2, [r3, #0]
			break;
   2afaa:	e056      	b.n	2b05a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2afac:	68fb      	ldr	r3, [r7, #12]
   2afae:	6a1a      	ldr	r2, [r3, #32]
   2afb0:	68bb      	ldr	r3, [r7, #8]
   2afb2:	09db      	lsrs	r3, r3, #7
   2afb4:	18d2      	adds	r2, r2, r3
   2afb6:	231f      	movs	r3, #31
   2afb8:	18fc      	adds	r4, r7, r3
   2afba:	68fb      	ldr	r3, [r7, #12]
   2afbc:	0011      	movs	r1, r2
   2afbe:	0018      	movs	r0, r3
   2afc0:	4b2b      	ldr	r3, [pc, #172]	; (2b070 <put_fat+0x238>)
   2afc2:	4798      	blx	r3
   2afc4:	0003      	movs	r3, r0
   2afc6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2afc8:	231f      	movs	r3, #31
   2afca:	18fb      	adds	r3, r7, r3
   2afcc:	781b      	ldrb	r3, [r3, #0]
   2afce:	2b00      	cmp	r3, #0
   2afd0:	d142      	bne.n	2b058 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2afd2:	68bb      	ldr	r3, [r7, #8]
   2afd4:	009a      	lsls	r2, r3, #2
   2afd6:	23fe      	movs	r3, #254	; 0xfe
   2afd8:	005b      	lsls	r3, r3, #1
   2afda:	4013      	ands	r3, r2
   2afdc:	3330      	adds	r3, #48	; 0x30
   2afde:	68fa      	ldr	r2, [r7, #12]
   2afe0:	18d3      	adds	r3, r2, r3
   2afe2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2afe4:	697b      	ldr	r3, [r7, #20]
   2afe6:	3303      	adds	r3, #3
   2afe8:	781b      	ldrb	r3, [r3, #0]
   2afea:	061a      	lsls	r2, r3, #24
   2afec:	697b      	ldr	r3, [r7, #20]
   2afee:	3302      	adds	r3, #2
   2aff0:	781b      	ldrb	r3, [r3, #0]
   2aff2:	041b      	lsls	r3, r3, #16
   2aff4:	4313      	orrs	r3, r2
   2aff6:	697a      	ldr	r2, [r7, #20]
   2aff8:	3201      	adds	r2, #1
   2affa:	7812      	ldrb	r2, [r2, #0]
   2affc:	0212      	lsls	r2, r2, #8
   2affe:	4313      	orrs	r3, r2
   2b000:	697a      	ldr	r2, [r7, #20]
   2b002:	7812      	ldrb	r2, [r2, #0]
   2b004:	4313      	orrs	r3, r2
   2b006:	0f1b      	lsrs	r3, r3, #28
   2b008:	071b      	lsls	r3, r3, #28
   2b00a:	687a      	ldr	r2, [r7, #4]
   2b00c:	4313      	orrs	r3, r2
   2b00e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b010:	687b      	ldr	r3, [r7, #4]
   2b012:	b2da      	uxtb	r2, r3
   2b014:	697b      	ldr	r3, [r7, #20]
   2b016:	701a      	strb	r2, [r3, #0]
   2b018:	697b      	ldr	r3, [r7, #20]
   2b01a:	3301      	adds	r3, #1
   2b01c:	687a      	ldr	r2, [r7, #4]
   2b01e:	b292      	uxth	r2, r2
   2b020:	0a12      	lsrs	r2, r2, #8
   2b022:	b292      	uxth	r2, r2
   2b024:	b2d2      	uxtb	r2, r2
   2b026:	701a      	strb	r2, [r3, #0]
   2b028:	697b      	ldr	r3, [r7, #20]
   2b02a:	3302      	adds	r3, #2
   2b02c:	687a      	ldr	r2, [r7, #4]
   2b02e:	0c12      	lsrs	r2, r2, #16
   2b030:	b2d2      	uxtb	r2, r2
   2b032:	701a      	strb	r2, [r3, #0]
   2b034:	697b      	ldr	r3, [r7, #20]
   2b036:	3303      	adds	r3, #3
   2b038:	687a      	ldr	r2, [r7, #4]
   2b03a:	0e12      	lsrs	r2, r2, #24
   2b03c:	b2d2      	uxtb	r2, r2
   2b03e:	701a      	strb	r2, [r3, #0]
			break;
   2b040:	e00b      	b.n	2b05a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b042:	231f      	movs	r3, #31
   2b044:	18fb      	adds	r3, r7, r3
   2b046:	2202      	movs	r2, #2
   2b048:	701a      	strb	r2, [r3, #0]
   2b04a:	e006      	b.n	2b05a <put_fat+0x222>
			if (res != FR_OK) break;
   2b04c:	46c0      	nop			; (mov r8, r8)
   2b04e:	e004      	b.n	2b05a <put_fat+0x222>
			if (res != FR_OK) break;
   2b050:	46c0      	nop			; (mov r8, r8)
   2b052:	e002      	b.n	2b05a <put_fat+0x222>
			if (res != FR_OK) break;
   2b054:	46c0      	nop			; (mov r8, r8)
   2b056:	e000      	b.n	2b05a <put_fat+0x222>
			if (res != FR_OK) break;
   2b058:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b05a:	68fb      	ldr	r3, [r7, #12]
   2b05c:	2201      	movs	r2, #1
   2b05e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b060:	231f      	movs	r3, #31
   2b062:	18fb      	adds	r3, r7, r3
   2b064:	781b      	ldrb	r3, [r3, #0]
}
   2b066:	0018      	movs	r0, r3
   2b068:	46bd      	mov	sp, r7
   2b06a:	b009      	add	sp, #36	; 0x24
   2b06c:	bd90      	pop	{r4, r7, pc}
   2b06e:	46c0      	nop			; (mov r8, r8)
   2b070:	0002aa35 	.word	0x0002aa35

0002b074 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b074:	b590      	push	{r4, r7, lr}
   2b076:	b085      	sub	sp, #20
   2b078:	af00      	add	r7, sp, #0
   2b07a:	6078      	str	r0, [r7, #4]
   2b07c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b07e:	683b      	ldr	r3, [r7, #0]
   2b080:	2b01      	cmp	r3, #1
   2b082:	d904      	bls.n	2b08e <remove_chain+0x1a>
   2b084:	687b      	ldr	r3, [r7, #4]
   2b086:	699a      	ldr	r2, [r3, #24]
   2b088:	683b      	ldr	r3, [r7, #0]
   2b08a:	429a      	cmp	r2, r3
   2b08c:	d804      	bhi.n	2b098 <remove_chain+0x24>
		res = FR_INT_ERR;
   2b08e:	230f      	movs	r3, #15
   2b090:	18fb      	adds	r3, r7, r3
   2b092:	2202      	movs	r2, #2
   2b094:	701a      	strb	r2, [r3, #0]
   2b096:	e045      	b.n	2b124 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b098:	230f      	movs	r3, #15
   2b09a:	18fb      	adds	r3, r7, r3
   2b09c:	2200      	movs	r2, #0
   2b09e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b0a0:	e037      	b.n	2b112 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b0a2:	683a      	ldr	r2, [r7, #0]
   2b0a4:	687b      	ldr	r3, [r7, #4]
   2b0a6:	0011      	movs	r1, r2
   2b0a8:	0018      	movs	r0, r3
   2b0aa:	4b22      	ldr	r3, [pc, #136]	; (2b134 <remove_chain+0xc0>)
   2b0ac:	4798      	blx	r3
   2b0ae:	0003      	movs	r3, r0
   2b0b0:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b0b2:	68bb      	ldr	r3, [r7, #8]
   2b0b4:	2b00      	cmp	r3, #0
   2b0b6:	d032      	beq.n	2b11e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b0b8:	68bb      	ldr	r3, [r7, #8]
   2b0ba:	2b01      	cmp	r3, #1
   2b0bc:	d104      	bne.n	2b0c8 <remove_chain+0x54>
   2b0be:	230f      	movs	r3, #15
   2b0c0:	18fb      	adds	r3, r7, r3
   2b0c2:	2202      	movs	r2, #2
   2b0c4:	701a      	strb	r2, [r3, #0]
   2b0c6:	e02d      	b.n	2b124 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b0c8:	68bb      	ldr	r3, [r7, #8]
   2b0ca:	3301      	adds	r3, #1
   2b0cc:	d104      	bne.n	2b0d8 <remove_chain+0x64>
   2b0ce:	230f      	movs	r3, #15
   2b0d0:	18fb      	adds	r3, r7, r3
   2b0d2:	2201      	movs	r2, #1
   2b0d4:	701a      	strb	r2, [r3, #0]
   2b0d6:	e025      	b.n	2b124 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b0d8:	230f      	movs	r3, #15
   2b0da:	18fc      	adds	r4, r7, r3
   2b0dc:	6839      	ldr	r1, [r7, #0]
   2b0de:	687b      	ldr	r3, [r7, #4]
   2b0e0:	2200      	movs	r2, #0
   2b0e2:	0018      	movs	r0, r3
   2b0e4:	4b14      	ldr	r3, [pc, #80]	; (2b138 <remove_chain+0xc4>)
   2b0e6:	4798      	blx	r3
   2b0e8:	0003      	movs	r3, r0
   2b0ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b0ec:	230f      	movs	r3, #15
   2b0ee:	18fb      	adds	r3, r7, r3
   2b0f0:	781b      	ldrb	r3, [r3, #0]
   2b0f2:	2b00      	cmp	r3, #0
   2b0f4:	d115      	bne.n	2b122 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b0f6:	687b      	ldr	r3, [r7, #4]
   2b0f8:	691b      	ldr	r3, [r3, #16]
   2b0fa:	3301      	adds	r3, #1
   2b0fc:	d007      	beq.n	2b10e <remove_chain+0x9a>
				fs->free_clust++;
   2b0fe:	687b      	ldr	r3, [r7, #4]
   2b100:	691b      	ldr	r3, [r3, #16]
   2b102:	1c5a      	adds	r2, r3, #1
   2b104:	687b      	ldr	r3, [r7, #4]
   2b106:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b108:	687b      	ldr	r3, [r7, #4]
   2b10a:	2201      	movs	r2, #1
   2b10c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b10e:	68bb      	ldr	r3, [r7, #8]
   2b110:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b112:	687b      	ldr	r3, [r7, #4]
   2b114:	699a      	ldr	r2, [r3, #24]
   2b116:	683b      	ldr	r3, [r7, #0]
   2b118:	429a      	cmp	r2, r3
   2b11a:	d8c2      	bhi.n	2b0a2 <remove_chain+0x2e>
   2b11c:	e002      	b.n	2b124 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b11e:	46c0      	nop			; (mov r8, r8)
   2b120:	e000      	b.n	2b124 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b122:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b124:	230f      	movs	r3, #15
   2b126:	18fb      	adds	r3, r7, r3
   2b128:	781b      	ldrb	r3, [r3, #0]
}
   2b12a:	0018      	movs	r0, r3
   2b12c:	46bd      	mov	sp, r7
   2b12e:	b005      	add	sp, #20
   2b130:	bd90      	pop	{r4, r7, pc}
   2b132:	46c0      	nop			; (mov r8, r8)
   2b134:	0002accd 	.word	0x0002accd
   2b138:	0002ae39 	.word	0x0002ae39

0002b13c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b13c:	b590      	push	{r4, r7, lr}
   2b13e:	b087      	sub	sp, #28
   2b140:	af00      	add	r7, sp, #0
   2b142:	6078      	str	r0, [r7, #4]
   2b144:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b146:	683b      	ldr	r3, [r7, #0]
   2b148:	2b00      	cmp	r3, #0
   2b14a:	d10d      	bne.n	2b168 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b14c:	687b      	ldr	r3, [r7, #4]
   2b14e:	68db      	ldr	r3, [r3, #12]
   2b150:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b152:	693b      	ldr	r3, [r7, #16]
   2b154:	2b00      	cmp	r3, #0
   2b156:	d004      	beq.n	2b162 <create_chain+0x26>
   2b158:	687b      	ldr	r3, [r7, #4]
   2b15a:	699a      	ldr	r2, [r3, #24]
   2b15c:	693b      	ldr	r3, [r7, #16]
   2b15e:	429a      	cmp	r2, r3
   2b160:	d818      	bhi.n	2b194 <create_chain+0x58>
   2b162:	2301      	movs	r3, #1
   2b164:	613b      	str	r3, [r7, #16]
   2b166:	e015      	b.n	2b194 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b168:	683a      	ldr	r2, [r7, #0]
   2b16a:	687b      	ldr	r3, [r7, #4]
   2b16c:	0011      	movs	r1, r2
   2b16e:	0018      	movs	r0, r3
   2b170:	4b3e      	ldr	r3, [pc, #248]	; (2b26c <create_chain+0x130>)
   2b172:	4798      	blx	r3
   2b174:	0003      	movs	r3, r0
   2b176:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b178:	68bb      	ldr	r3, [r7, #8]
   2b17a:	2b01      	cmp	r3, #1
   2b17c:	d801      	bhi.n	2b182 <create_chain+0x46>
   2b17e:	2301      	movs	r3, #1
   2b180:	e070      	b.n	2b264 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b182:	687b      	ldr	r3, [r7, #4]
   2b184:	699a      	ldr	r2, [r3, #24]
   2b186:	68bb      	ldr	r3, [r7, #8]
   2b188:	429a      	cmp	r2, r3
   2b18a:	d901      	bls.n	2b190 <create_chain+0x54>
   2b18c:	68bb      	ldr	r3, [r7, #8]
   2b18e:	e069      	b.n	2b264 <create_chain+0x128>
		scl = clst;
   2b190:	683b      	ldr	r3, [r7, #0]
   2b192:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b194:	693b      	ldr	r3, [r7, #16]
   2b196:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b198:	697b      	ldr	r3, [r7, #20]
   2b19a:	3301      	adds	r3, #1
   2b19c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b19e:	687b      	ldr	r3, [r7, #4]
   2b1a0:	699a      	ldr	r2, [r3, #24]
   2b1a2:	697b      	ldr	r3, [r7, #20]
   2b1a4:	429a      	cmp	r2, r3
   2b1a6:	d807      	bhi.n	2b1b8 <create_chain+0x7c>
			ncl = 2;
   2b1a8:	2302      	movs	r3, #2
   2b1aa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b1ac:	697a      	ldr	r2, [r7, #20]
   2b1ae:	693b      	ldr	r3, [r7, #16]
   2b1b0:	429a      	cmp	r2, r3
   2b1b2:	d901      	bls.n	2b1b8 <create_chain+0x7c>
   2b1b4:	2300      	movs	r3, #0
   2b1b6:	e055      	b.n	2b264 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b1b8:	697a      	ldr	r2, [r7, #20]
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	0011      	movs	r1, r2
   2b1be:	0018      	movs	r0, r3
   2b1c0:	4b2a      	ldr	r3, [pc, #168]	; (2b26c <create_chain+0x130>)
   2b1c2:	4798      	blx	r3
   2b1c4:	0003      	movs	r3, r0
   2b1c6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b1c8:	68bb      	ldr	r3, [r7, #8]
   2b1ca:	2b00      	cmp	r3, #0
   2b1cc:	d00d      	beq.n	2b1ea <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b1ce:	68bb      	ldr	r3, [r7, #8]
   2b1d0:	3301      	adds	r3, #1
   2b1d2:	d002      	beq.n	2b1da <create_chain+0x9e>
   2b1d4:	68bb      	ldr	r3, [r7, #8]
   2b1d6:	2b01      	cmp	r3, #1
   2b1d8:	d101      	bne.n	2b1de <create_chain+0xa2>
			return cs;
   2b1da:	68bb      	ldr	r3, [r7, #8]
   2b1dc:	e042      	b.n	2b264 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b1de:	697a      	ldr	r2, [r7, #20]
   2b1e0:	693b      	ldr	r3, [r7, #16]
   2b1e2:	429a      	cmp	r2, r3
   2b1e4:	d1d8      	bne.n	2b198 <create_chain+0x5c>
   2b1e6:	2300      	movs	r3, #0
   2b1e8:	e03c      	b.n	2b264 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b1ea:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b1ec:	230f      	movs	r3, #15
   2b1ee:	18fc      	adds	r4, r7, r3
   2b1f0:	4a1f      	ldr	r2, [pc, #124]	; (2b270 <create_chain+0x134>)
   2b1f2:	6979      	ldr	r1, [r7, #20]
   2b1f4:	687b      	ldr	r3, [r7, #4]
   2b1f6:	0018      	movs	r0, r3
   2b1f8:	4b1e      	ldr	r3, [pc, #120]	; (2b274 <create_chain+0x138>)
   2b1fa:	4798      	blx	r3
   2b1fc:	0003      	movs	r3, r0
   2b1fe:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b200:	230f      	movs	r3, #15
   2b202:	18fb      	adds	r3, r7, r3
   2b204:	781b      	ldrb	r3, [r3, #0]
   2b206:	2b00      	cmp	r3, #0
   2b208:	d10c      	bne.n	2b224 <create_chain+0xe8>
   2b20a:	683b      	ldr	r3, [r7, #0]
   2b20c:	2b00      	cmp	r3, #0
   2b20e:	d009      	beq.n	2b224 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b210:	230f      	movs	r3, #15
   2b212:	18fc      	adds	r4, r7, r3
   2b214:	697a      	ldr	r2, [r7, #20]
   2b216:	6839      	ldr	r1, [r7, #0]
   2b218:	687b      	ldr	r3, [r7, #4]
   2b21a:	0018      	movs	r0, r3
   2b21c:	4b15      	ldr	r3, [pc, #84]	; (2b274 <create_chain+0x138>)
   2b21e:	4798      	blx	r3
   2b220:	0003      	movs	r3, r0
   2b222:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b224:	230f      	movs	r3, #15
   2b226:	18fb      	adds	r3, r7, r3
   2b228:	781b      	ldrb	r3, [r3, #0]
   2b22a:	2b00      	cmp	r3, #0
   2b22c:	d10f      	bne.n	2b24e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b22e:	687b      	ldr	r3, [r7, #4]
   2b230:	697a      	ldr	r2, [r7, #20]
   2b232:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b234:	687b      	ldr	r3, [r7, #4]
   2b236:	691b      	ldr	r3, [r3, #16]
   2b238:	3301      	adds	r3, #1
   2b23a:	d012      	beq.n	2b262 <create_chain+0x126>
			fs->free_clust--;
   2b23c:	687b      	ldr	r3, [r7, #4]
   2b23e:	691b      	ldr	r3, [r3, #16]
   2b240:	1e5a      	subs	r2, r3, #1
   2b242:	687b      	ldr	r3, [r7, #4]
   2b244:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b246:	687b      	ldr	r3, [r7, #4]
   2b248:	2201      	movs	r2, #1
   2b24a:	715a      	strb	r2, [r3, #5]
   2b24c:	e009      	b.n	2b262 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b24e:	230f      	movs	r3, #15
   2b250:	18fb      	adds	r3, r7, r3
   2b252:	781b      	ldrb	r3, [r3, #0]
   2b254:	2b01      	cmp	r3, #1
   2b256:	d102      	bne.n	2b25e <create_chain+0x122>
   2b258:	2301      	movs	r3, #1
   2b25a:	425b      	negs	r3, r3
   2b25c:	e000      	b.n	2b260 <create_chain+0x124>
   2b25e:	2301      	movs	r3, #1
   2b260:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2b262:	697b      	ldr	r3, [r7, #20]
}
   2b264:	0018      	movs	r0, r3
   2b266:	46bd      	mov	sp, r7
   2b268:	b007      	add	sp, #28
   2b26a:	bd90      	pop	{r4, r7, pc}
   2b26c:	0002accd 	.word	0x0002accd
   2b270:	0fffffff 	.word	0x0fffffff
   2b274:	0002ae39 	.word	0x0002ae39

0002b278 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2b278:	b580      	push	{r7, lr}
   2b27a:	b084      	sub	sp, #16
   2b27c:	af00      	add	r7, sp, #0
   2b27e:	6078      	str	r0, [r7, #4]
   2b280:	000a      	movs	r2, r1
   2b282:	1cbb      	adds	r3, r7, #2
   2b284:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2b286:	687b      	ldr	r3, [r7, #4]
   2b288:	1cba      	adds	r2, r7, #2
   2b28a:	8812      	ldrh	r2, [r2, #0]
   2b28c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2b28e:	687b      	ldr	r3, [r7, #4]
   2b290:	689b      	ldr	r3, [r3, #8]
   2b292:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2b294:	68fb      	ldr	r3, [r7, #12]
   2b296:	2b01      	cmp	r3, #1
   2b298:	d005      	beq.n	2b2a6 <dir_sdi+0x2e>
   2b29a:	687b      	ldr	r3, [r7, #4]
   2b29c:	681b      	ldr	r3, [r3, #0]
   2b29e:	699a      	ldr	r2, [r3, #24]
   2b2a0:	68fb      	ldr	r3, [r7, #12]
   2b2a2:	429a      	cmp	r2, r3
   2b2a4:	d801      	bhi.n	2b2aa <dir_sdi+0x32>
		return FR_INT_ERR;
   2b2a6:	2302      	movs	r3, #2
   2b2a8:	e075      	b.n	2b396 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2b2aa:	68fb      	ldr	r3, [r7, #12]
   2b2ac:	2b00      	cmp	r3, #0
   2b2ae:	d108      	bne.n	2b2c2 <dir_sdi+0x4a>
   2b2b0:	687b      	ldr	r3, [r7, #4]
   2b2b2:	681b      	ldr	r3, [r3, #0]
   2b2b4:	781b      	ldrb	r3, [r3, #0]
   2b2b6:	2b03      	cmp	r3, #3
   2b2b8:	d103      	bne.n	2b2c2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2b2ba:	687b      	ldr	r3, [r7, #4]
   2b2bc:	681b      	ldr	r3, [r3, #0]
   2b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b2c0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2b2c2:	68fb      	ldr	r3, [r7, #12]
   2b2c4:	2b00      	cmp	r3, #0
   2b2c6:	d116      	bne.n	2b2f6 <dir_sdi+0x7e>
		dj->clust = clst;
   2b2c8:	687b      	ldr	r3, [r7, #4]
   2b2ca:	68fa      	ldr	r2, [r7, #12]
   2b2cc:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2b2ce:	687b      	ldr	r3, [r7, #4]
   2b2d0:	681b      	ldr	r3, [r3, #0]
   2b2d2:	891b      	ldrh	r3, [r3, #8]
   2b2d4:	1cba      	adds	r2, r7, #2
   2b2d6:	8812      	ldrh	r2, [r2, #0]
   2b2d8:	429a      	cmp	r2, r3
   2b2da:	d301      	bcc.n	2b2e0 <dir_sdi+0x68>
			return FR_INT_ERR;
   2b2dc:	2302      	movs	r3, #2
   2b2de:	e05a      	b.n	2b396 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b2e0:	687b      	ldr	r3, [r7, #4]
   2b2e2:	681b      	ldr	r3, [r3, #0]
   2b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b2e6:	1cba      	adds	r2, r7, #2
   2b2e8:	8812      	ldrh	r2, [r2, #0]
   2b2ea:	0912      	lsrs	r2, r2, #4
   2b2ec:	b292      	uxth	r2, r2
   2b2ee:	189a      	adds	r2, r3, r2
   2b2f0:	687b      	ldr	r3, [r7, #4]
   2b2f2:	611a      	str	r2, [r3, #16]
   2b2f4:	e042      	b.n	2b37c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2b2f6:	687b      	ldr	r3, [r7, #4]
   2b2f8:	681b      	ldr	r3, [r3, #0]
   2b2fa:	789b      	ldrb	r3, [r3, #2]
   2b2fc:	b29a      	uxth	r2, r3
   2b2fe:	230a      	movs	r3, #10
   2b300:	18fb      	adds	r3, r7, r3
   2b302:	0112      	lsls	r2, r2, #4
   2b304:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b306:	e020      	b.n	2b34a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2b308:	687b      	ldr	r3, [r7, #4]
   2b30a:	681b      	ldr	r3, [r3, #0]
   2b30c:	68fa      	ldr	r2, [r7, #12]
   2b30e:	0011      	movs	r1, r2
   2b310:	0018      	movs	r0, r3
   2b312:	4b23      	ldr	r3, [pc, #140]	; (2b3a0 <dir_sdi+0x128>)
   2b314:	4798      	blx	r3
   2b316:	0003      	movs	r3, r0
   2b318:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2b31a:	68fb      	ldr	r3, [r7, #12]
   2b31c:	3301      	adds	r3, #1
   2b31e:	d101      	bne.n	2b324 <dir_sdi+0xac>
   2b320:	2301      	movs	r3, #1
   2b322:	e038      	b.n	2b396 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2b324:	68fb      	ldr	r3, [r7, #12]
   2b326:	2b01      	cmp	r3, #1
   2b328:	d905      	bls.n	2b336 <dir_sdi+0xbe>
   2b32a:	687b      	ldr	r3, [r7, #4]
   2b32c:	681b      	ldr	r3, [r3, #0]
   2b32e:	699a      	ldr	r2, [r3, #24]
   2b330:	68fb      	ldr	r3, [r7, #12]
   2b332:	429a      	cmp	r2, r3
   2b334:	d801      	bhi.n	2b33a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2b336:	2302      	movs	r3, #2
   2b338:	e02d      	b.n	2b396 <dir_sdi+0x11e>
			idx -= ic;
   2b33a:	1cbb      	adds	r3, r7, #2
   2b33c:	1cb9      	adds	r1, r7, #2
   2b33e:	220a      	movs	r2, #10
   2b340:	18ba      	adds	r2, r7, r2
   2b342:	8809      	ldrh	r1, [r1, #0]
   2b344:	8812      	ldrh	r2, [r2, #0]
   2b346:	1a8a      	subs	r2, r1, r2
   2b348:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b34a:	1cba      	adds	r2, r7, #2
   2b34c:	230a      	movs	r3, #10
   2b34e:	18fb      	adds	r3, r7, r3
   2b350:	8812      	ldrh	r2, [r2, #0]
   2b352:	881b      	ldrh	r3, [r3, #0]
   2b354:	429a      	cmp	r2, r3
   2b356:	d2d7      	bcs.n	2b308 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2b358:	687b      	ldr	r3, [r7, #4]
   2b35a:	68fa      	ldr	r2, [r7, #12]
   2b35c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b35e:	687b      	ldr	r3, [r7, #4]
   2b360:	681b      	ldr	r3, [r3, #0]
   2b362:	68fa      	ldr	r2, [r7, #12]
   2b364:	0011      	movs	r1, r2
   2b366:	0018      	movs	r0, r3
   2b368:	4b0e      	ldr	r3, [pc, #56]	; (2b3a4 <dir_sdi+0x12c>)
   2b36a:	4798      	blx	r3
   2b36c:	0002      	movs	r2, r0
   2b36e:	1cbb      	adds	r3, r7, #2
   2b370:	881b      	ldrh	r3, [r3, #0]
   2b372:	091b      	lsrs	r3, r3, #4
   2b374:	b29b      	uxth	r3, r3
   2b376:	18d2      	adds	r2, r2, r3
   2b378:	687b      	ldr	r3, [r7, #4]
   2b37a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2b37c:	687b      	ldr	r3, [r7, #4]
   2b37e:	681b      	ldr	r3, [r3, #0]
   2b380:	3330      	adds	r3, #48	; 0x30
   2b382:	001a      	movs	r2, r3
   2b384:	1cbb      	adds	r3, r7, #2
   2b386:	881b      	ldrh	r3, [r3, #0]
   2b388:	210f      	movs	r1, #15
   2b38a:	400b      	ands	r3, r1
   2b38c:	015b      	lsls	r3, r3, #5
   2b38e:	18d2      	adds	r2, r2, r3
   2b390:	687b      	ldr	r3, [r7, #4]
   2b392:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2b394:	2300      	movs	r3, #0
}
   2b396:	0018      	movs	r0, r3
   2b398:	46bd      	mov	sp, r7
   2b39a:	b004      	add	sp, #16
   2b39c:	bd80      	pop	{r7, pc}
   2b39e:	46c0      	nop			; (mov r8, r8)
   2b3a0:	0002accd 	.word	0x0002accd
   2b3a4:	0002ac95 	.word	0x0002ac95

0002b3a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2b3a8:	b590      	push	{r4, r7, lr}
   2b3aa:	b085      	sub	sp, #20
   2b3ac:	af00      	add	r7, sp, #0
   2b3ae:	6078      	str	r0, [r7, #4]
   2b3b0:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2b3b2:	687b      	ldr	r3, [r7, #4]
   2b3b4:	88da      	ldrh	r2, [r3, #6]
   2b3b6:	2308      	movs	r3, #8
   2b3b8:	18fb      	adds	r3, r7, r3
   2b3ba:	3201      	adds	r2, #1
   2b3bc:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2b3be:	2308      	movs	r3, #8
   2b3c0:	18fb      	adds	r3, r7, r3
   2b3c2:	881b      	ldrh	r3, [r3, #0]
   2b3c4:	2b00      	cmp	r3, #0
   2b3c6:	d003      	beq.n	2b3d0 <dir_next+0x28>
   2b3c8:	687b      	ldr	r3, [r7, #4]
   2b3ca:	691b      	ldr	r3, [r3, #16]
   2b3cc:	2b00      	cmp	r3, #0
   2b3ce:	d101      	bne.n	2b3d4 <dir_next+0x2c>
		return FR_NO_FILE;
   2b3d0:	2304      	movs	r3, #4
   2b3d2:	e0d2      	b.n	2b57a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2b3d4:	2308      	movs	r3, #8
   2b3d6:	18fb      	adds	r3, r7, r3
   2b3d8:	881b      	ldrh	r3, [r3, #0]
   2b3da:	220f      	movs	r2, #15
   2b3dc:	4013      	ands	r3, r2
   2b3de:	b29b      	uxth	r3, r3
   2b3e0:	2b00      	cmp	r3, #0
   2b3e2:	d000      	beq.n	2b3e6 <dir_next+0x3e>
   2b3e4:	e0b6      	b.n	2b554 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2b3e6:	687b      	ldr	r3, [r7, #4]
   2b3e8:	691b      	ldr	r3, [r3, #16]
   2b3ea:	1c5a      	adds	r2, r3, #1
   2b3ec:	687b      	ldr	r3, [r7, #4]
   2b3ee:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2b3f0:	687b      	ldr	r3, [r7, #4]
   2b3f2:	68db      	ldr	r3, [r3, #12]
   2b3f4:	2b00      	cmp	r3, #0
   2b3f6:	d10a      	bne.n	2b40e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2b3f8:	687b      	ldr	r3, [r7, #4]
   2b3fa:	681b      	ldr	r3, [r3, #0]
   2b3fc:	891b      	ldrh	r3, [r3, #8]
   2b3fe:	2208      	movs	r2, #8
   2b400:	18ba      	adds	r2, r7, r2
   2b402:	8812      	ldrh	r2, [r2, #0]
   2b404:	429a      	cmp	r2, r3
   2b406:	d200      	bcs.n	2b40a <dir_next+0x62>
   2b408:	e0a4      	b.n	2b554 <dir_next+0x1ac>
				return FR_NO_FILE;
   2b40a:	2304      	movs	r3, #4
   2b40c:	e0b5      	b.n	2b57a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2b40e:	2308      	movs	r3, #8
   2b410:	18fb      	adds	r3, r7, r3
   2b412:	881b      	ldrh	r3, [r3, #0]
   2b414:	091b      	lsrs	r3, r3, #4
   2b416:	b29b      	uxth	r3, r3
   2b418:	001a      	movs	r2, r3
   2b41a:	687b      	ldr	r3, [r7, #4]
   2b41c:	681b      	ldr	r3, [r3, #0]
   2b41e:	789b      	ldrb	r3, [r3, #2]
   2b420:	3b01      	subs	r3, #1
   2b422:	4013      	ands	r3, r2
   2b424:	d000      	beq.n	2b428 <dir_next+0x80>
   2b426:	e095      	b.n	2b554 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2b428:	687b      	ldr	r3, [r7, #4]
   2b42a:	681a      	ldr	r2, [r3, #0]
   2b42c:	687b      	ldr	r3, [r7, #4]
   2b42e:	68db      	ldr	r3, [r3, #12]
   2b430:	0019      	movs	r1, r3
   2b432:	0010      	movs	r0, r2
   2b434:	4b53      	ldr	r3, [pc, #332]	; (2b584 <dir_next+0x1dc>)
   2b436:	4798      	blx	r3
   2b438:	0003      	movs	r3, r0
   2b43a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2b43c:	68fb      	ldr	r3, [r7, #12]
   2b43e:	2b01      	cmp	r3, #1
   2b440:	d801      	bhi.n	2b446 <dir_next+0x9e>
   2b442:	2302      	movs	r3, #2
   2b444:	e099      	b.n	2b57a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b446:	68fb      	ldr	r3, [r7, #12]
   2b448:	3301      	adds	r3, #1
   2b44a:	d101      	bne.n	2b450 <dir_next+0xa8>
   2b44c:	2301      	movs	r3, #1
   2b44e:	e094      	b.n	2b57a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2b450:	687b      	ldr	r3, [r7, #4]
   2b452:	681b      	ldr	r3, [r3, #0]
   2b454:	699a      	ldr	r2, [r3, #24]
   2b456:	68fb      	ldr	r3, [r7, #12]
   2b458:	429a      	cmp	r2, r3
   2b45a:	d900      	bls.n	2b45e <dir_next+0xb6>
   2b45c:	e06d      	b.n	2b53a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2b45e:	683b      	ldr	r3, [r7, #0]
   2b460:	2b00      	cmp	r3, #0
   2b462:	d101      	bne.n	2b468 <dir_next+0xc0>
   2b464:	2304      	movs	r3, #4
   2b466:	e088      	b.n	2b57a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2b468:	687b      	ldr	r3, [r7, #4]
   2b46a:	681a      	ldr	r2, [r3, #0]
   2b46c:	687b      	ldr	r3, [r7, #4]
   2b46e:	68db      	ldr	r3, [r3, #12]
   2b470:	0019      	movs	r1, r3
   2b472:	0010      	movs	r0, r2
   2b474:	4b44      	ldr	r3, [pc, #272]	; (2b588 <dir_next+0x1e0>)
   2b476:	4798      	blx	r3
   2b478:	0003      	movs	r3, r0
   2b47a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2b47c:	68fb      	ldr	r3, [r7, #12]
   2b47e:	2b00      	cmp	r3, #0
   2b480:	d101      	bne.n	2b486 <dir_next+0xde>
   2b482:	2307      	movs	r3, #7
   2b484:	e079      	b.n	2b57a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2b486:	68fb      	ldr	r3, [r7, #12]
   2b488:	2b01      	cmp	r3, #1
   2b48a:	d101      	bne.n	2b490 <dir_next+0xe8>
   2b48c:	2302      	movs	r3, #2
   2b48e:	e074      	b.n	2b57a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b490:	68fb      	ldr	r3, [r7, #12]
   2b492:	3301      	adds	r3, #1
   2b494:	d101      	bne.n	2b49a <dir_next+0xf2>
   2b496:	2301      	movs	r3, #1
   2b498:	e06f      	b.n	2b57a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2b49a:	687b      	ldr	r3, [r7, #4]
   2b49c:	681b      	ldr	r3, [r3, #0]
   2b49e:	2100      	movs	r1, #0
   2b4a0:	0018      	movs	r0, r3
   2b4a2:	4b3a      	ldr	r3, [pc, #232]	; (2b58c <dir_next+0x1e4>)
   2b4a4:	4798      	blx	r3
   2b4a6:	1e03      	subs	r3, r0, #0
   2b4a8:	d001      	beq.n	2b4ae <dir_next+0x106>
   2b4aa:	2301      	movs	r3, #1
   2b4ac:	e065      	b.n	2b57a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2b4ae:	687b      	ldr	r3, [r7, #4]
   2b4b0:	681b      	ldr	r3, [r3, #0]
   2b4b2:	3330      	adds	r3, #48	; 0x30
   2b4b4:	0018      	movs	r0, r3
   2b4b6:	2380      	movs	r3, #128	; 0x80
   2b4b8:	009b      	lsls	r3, r3, #2
   2b4ba:	001a      	movs	r2, r3
   2b4bc:	2100      	movs	r1, #0
   2b4be:	4b34      	ldr	r3, [pc, #208]	; (2b590 <dir_next+0x1e8>)
   2b4c0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2b4c2:	687b      	ldr	r3, [r7, #4]
   2b4c4:	681c      	ldr	r4, [r3, #0]
   2b4c6:	687b      	ldr	r3, [r7, #4]
   2b4c8:	681b      	ldr	r3, [r3, #0]
   2b4ca:	68fa      	ldr	r2, [r7, #12]
   2b4cc:	0011      	movs	r1, r2
   2b4ce:	0018      	movs	r0, r3
   2b4d0:	4b30      	ldr	r3, [pc, #192]	; (2b594 <dir_next+0x1ec>)
   2b4d2:	4798      	blx	r3
   2b4d4:	0003      	movs	r3, r0
   2b4d6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b4d8:	230b      	movs	r3, #11
   2b4da:	18fb      	adds	r3, r7, r3
   2b4dc:	2200      	movs	r2, #0
   2b4de:	701a      	strb	r2, [r3, #0]
   2b4e0:	e019      	b.n	2b516 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2b4e2:	687b      	ldr	r3, [r7, #4]
   2b4e4:	681b      	ldr	r3, [r3, #0]
   2b4e6:	2201      	movs	r2, #1
   2b4e8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2b4ea:	687b      	ldr	r3, [r7, #4]
   2b4ec:	681b      	ldr	r3, [r3, #0]
   2b4ee:	2100      	movs	r1, #0
   2b4f0:	0018      	movs	r0, r3
   2b4f2:	4b26      	ldr	r3, [pc, #152]	; (2b58c <dir_next+0x1e4>)
   2b4f4:	4798      	blx	r3
   2b4f6:	1e03      	subs	r3, r0, #0
   2b4f8:	d001      	beq.n	2b4fe <dir_next+0x156>
   2b4fa:	2301      	movs	r3, #1
   2b4fc:	e03d      	b.n	2b57a <dir_next+0x1d2>
						dj->fs->winsect++;
   2b4fe:	687b      	ldr	r3, [r7, #4]
   2b500:	681b      	ldr	r3, [r3, #0]
   2b502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b504:	3201      	adds	r2, #1
   2b506:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b508:	230b      	movs	r3, #11
   2b50a:	18fb      	adds	r3, r7, r3
   2b50c:	781a      	ldrb	r2, [r3, #0]
   2b50e:	230b      	movs	r3, #11
   2b510:	18fb      	adds	r3, r7, r3
   2b512:	3201      	adds	r2, #1
   2b514:	701a      	strb	r2, [r3, #0]
   2b516:	687b      	ldr	r3, [r7, #4]
   2b518:	681b      	ldr	r3, [r3, #0]
   2b51a:	789b      	ldrb	r3, [r3, #2]
   2b51c:	220b      	movs	r2, #11
   2b51e:	18ba      	adds	r2, r7, r2
   2b520:	7812      	ldrb	r2, [r2, #0]
   2b522:	429a      	cmp	r2, r3
   2b524:	d3dd      	bcc.n	2b4e2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2b526:	687b      	ldr	r3, [r7, #4]
   2b528:	681b      	ldr	r3, [r3, #0]
   2b52a:	687a      	ldr	r2, [r7, #4]
   2b52c:	6812      	ldr	r2, [r2, #0]
   2b52e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2b530:	220b      	movs	r2, #11
   2b532:	18ba      	adds	r2, r7, r2
   2b534:	7812      	ldrb	r2, [r2, #0]
   2b536:	1a8a      	subs	r2, r1, r2
   2b538:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2b53a:	687b      	ldr	r3, [r7, #4]
   2b53c:	68fa      	ldr	r2, [r7, #12]
   2b53e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2b540:	687b      	ldr	r3, [r7, #4]
   2b542:	681b      	ldr	r3, [r3, #0]
   2b544:	68fa      	ldr	r2, [r7, #12]
   2b546:	0011      	movs	r1, r2
   2b548:	0018      	movs	r0, r3
   2b54a:	4b12      	ldr	r3, [pc, #72]	; (2b594 <dir_next+0x1ec>)
   2b54c:	4798      	blx	r3
   2b54e:	0002      	movs	r2, r0
   2b550:	687b      	ldr	r3, [r7, #4]
   2b552:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2b554:	687b      	ldr	r3, [r7, #4]
   2b556:	2208      	movs	r2, #8
   2b558:	18ba      	adds	r2, r7, r2
   2b55a:	8812      	ldrh	r2, [r2, #0]
   2b55c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2b55e:	687b      	ldr	r3, [r7, #4]
   2b560:	681b      	ldr	r3, [r3, #0]
   2b562:	3330      	adds	r3, #48	; 0x30
   2b564:	001a      	movs	r2, r3
   2b566:	2308      	movs	r3, #8
   2b568:	18fb      	adds	r3, r7, r3
   2b56a:	881b      	ldrh	r3, [r3, #0]
   2b56c:	210f      	movs	r1, #15
   2b56e:	400b      	ands	r3, r1
   2b570:	015b      	lsls	r3, r3, #5
   2b572:	18d2      	adds	r2, r2, r3
   2b574:	687b      	ldr	r3, [r7, #4]
   2b576:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2b578:	2300      	movs	r3, #0
}
   2b57a:	0018      	movs	r0, r3
   2b57c:	46bd      	mov	sp, r7
   2b57e:	b005      	add	sp, #20
   2b580:	bd90      	pop	{r4, r7, pc}
   2b582:	46c0      	nop			; (mov r8, r8)
   2b584:	0002accd 	.word	0x0002accd
   2b588:	0002b13d 	.word	0x0002b13d
   2b58c:	0002aa35 	.word	0x0002aa35
   2b590:	0002a989 	.word	0x0002a989
   2b594:	0002ac95 	.word	0x0002ac95

0002b598 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2b598:	b590      	push	{r4, r7, lr}
   2b59a:	b087      	sub	sp, #28
   2b59c:	af00      	add	r7, sp, #0
   2b59e:	6078      	str	r0, [r7, #4]
   2b5a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2b5a2:	683b      	ldr	r3, [r7, #0]
   2b5a4:	781b      	ldrb	r3, [r3, #0]
   2b5a6:	001a      	movs	r2, r3
   2b5a8:	2340      	movs	r3, #64	; 0x40
   2b5aa:	439a      	bics	r2, r3
   2b5ac:	0013      	movs	r3, r2
   2b5ae:	1e5a      	subs	r2, r3, #1
   2b5b0:	0013      	movs	r3, r2
   2b5b2:	005b      	lsls	r3, r3, #1
   2b5b4:	189b      	adds	r3, r3, r2
   2b5b6:	009b      	lsls	r3, r3, #2
   2b5b8:	189b      	adds	r3, r3, r2
   2b5ba:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2b5bc:	2300      	movs	r3, #0
   2b5be:	613b      	str	r3, [r7, #16]
   2b5c0:	230e      	movs	r3, #14
   2b5c2:	18fb      	adds	r3, r7, r3
   2b5c4:	2201      	movs	r2, #1
   2b5c6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2b5c8:	4a31      	ldr	r2, [pc, #196]	; (2b690 <cmp_lfn+0xf8>)
   2b5ca:	693b      	ldr	r3, [r7, #16]
   2b5cc:	18d3      	adds	r3, r2, r3
   2b5ce:	781b      	ldrb	r3, [r3, #0]
   2b5d0:	3301      	adds	r3, #1
   2b5d2:	683a      	ldr	r2, [r7, #0]
   2b5d4:	18d3      	adds	r3, r2, r3
   2b5d6:	781b      	ldrb	r3, [r3, #0]
   2b5d8:	021b      	lsls	r3, r3, #8
   2b5da:	b21a      	sxth	r2, r3
   2b5dc:	492c      	ldr	r1, [pc, #176]	; (2b690 <cmp_lfn+0xf8>)
   2b5de:	693b      	ldr	r3, [r7, #16]
   2b5e0:	18cb      	adds	r3, r1, r3
   2b5e2:	781b      	ldrb	r3, [r3, #0]
   2b5e4:	0019      	movs	r1, r3
   2b5e6:	683b      	ldr	r3, [r7, #0]
   2b5e8:	185b      	adds	r3, r3, r1
   2b5ea:	781b      	ldrb	r3, [r3, #0]
   2b5ec:	b21b      	sxth	r3, r3
   2b5ee:	4313      	orrs	r3, r2
   2b5f0:	b21a      	sxth	r2, r3
   2b5f2:	230c      	movs	r3, #12
   2b5f4:	18fb      	adds	r3, r7, r3
   2b5f6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2b5f8:	230e      	movs	r3, #14
   2b5fa:	18fb      	adds	r3, r7, r3
   2b5fc:	881b      	ldrh	r3, [r3, #0]
   2b5fe:	2b00      	cmp	r3, #0
   2b600:	d01f      	beq.n	2b642 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2b602:	230e      	movs	r3, #14
   2b604:	18fc      	adds	r4, r7, r3
   2b606:	230c      	movs	r3, #12
   2b608:	18fb      	adds	r3, r7, r3
   2b60a:	881b      	ldrh	r3, [r3, #0]
   2b60c:	0018      	movs	r0, r3
   2b60e:	4b21      	ldr	r3, [pc, #132]	; (2b694 <cmp_lfn+0xfc>)
   2b610:	4798      	blx	r3
   2b612:	0003      	movs	r3, r0
   2b614:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2b616:	697b      	ldr	r3, [r7, #20]
   2b618:	2bfe      	cmp	r3, #254	; 0xfe
   2b61a:	d810      	bhi.n	2b63e <cmp_lfn+0xa6>
   2b61c:	697b      	ldr	r3, [r7, #20]
   2b61e:	1c5a      	adds	r2, r3, #1
   2b620:	617a      	str	r2, [r7, #20]
   2b622:	005b      	lsls	r3, r3, #1
   2b624:	687a      	ldr	r2, [r7, #4]
   2b626:	18d3      	adds	r3, r2, r3
   2b628:	881b      	ldrh	r3, [r3, #0]
   2b62a:	0018      	movs	r0, r3
   2b62c:	4b19      	ldr	r3, [pc, #100]	; (2b694 <cmp_lfn+0xfc>)
   2b62e:	4798      	blx	r3
   2b630:	0003      	movs	r3, r0
   2b632:	001a      	movs	r2, r3
   2b634:	230e      	movs	r3, #14
   2b636:	18fb      	adds	r3, r7, r3
   2b638:	881b      	ldrh	r3, [r3, #0]
   2b63a:	4293      	cmp	r3, r2
   2b63c:	d009      	beq.n	2b652 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2b63e:	2300      	movs	r3, #0
   2b640:	e022      	b.n	2b688 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2b642:	230c      	movs	r3, #12
   2b644:	18fb      	adds	r3, r7, r3
   2b646:	881b      	ldrh	r3, [r3, #0]
   2b648:	4a13      	ldr	r2, [pc, #76]	; (2b698 <cmp_lfn+0x100>)
   2b64a:	4293      	cmp	r3, r2
   2b64c:	d001      	beq.n	2b652 <cmp_lfn+0xba>
   2b64e:	2300      	movs	r3, #0
   2b650:	e01a      	b.n	2b688 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2b652:	693b      	ldr	r3, [r7, #16]
   2b654:	3301      	adds	r3, #1
   2b656:	613b      	str	r3, [r7, #16]
   2b658:	693b      	ldr	r3, [r7, #16]
   2b65a:	2b0c      	cmp	r3, #12
   2b65c:	d9b4      	bls.n	2b5c8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2b65e:	683b      	ldr	r3, [r7, #0]
   2b660:	781b      	ldrb	r3, [r3, #0]
   2b662:	001a      	movs	r2, r3
   2b664:	2340      	movs	r3, #64	; 0x40
   2b666:	4013      	ands	r3, r2
   2b668:	d00d      	beq.n	2b686 <cmp_lfn+0xee>
   2b66a:	230e      	movs	r3, #14
   2b66c:	18fb      	adds	r3, r7, r3
   2b66e:	881b      	ldrh	r3, [r3, #0]
   2b670:	2b00      	cmp	r3, #0
   2b672:	d008      	beq.n	2b686 <cmp_lfn+0xee>
   2b674:	697b      	ldr	r3, [r7, #20]
   2b676:	005b      	lsls	r3, r3, #1
   2b678:	687a      	ldr	r2, [r7, #4]
   2b67a:	18d3      	adds	r3, r2, r3
   2b67c:	881b      	ldrh	r3, [r3, #0]
   2b67e:	2b00      	cmp	r3, #0
   2b680:	d001      	beq.n	2b686 <cmp_lfn+0xee>
		return 0;
   2b682:	2300      	movs	r3, #0
   2b684:	e000      	b.n	2b688 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2b686:	2301      	movs	r3, #1
}
   2b688:	0018      	movs	r0, r3
   2b68a:	46bd      	mov	sp, r7
   2b68c:	b007      	add	sp, #28
   2b68e:	bd90      	pop	{r4, r7, pc}
   2b690:	00039078 	.word	0x00039078
   2b694:	0002d645 	.word	0x0002d645
   2b698:	0000ffff 	.word	0x0000ffff

0002b69c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2b69c:	b580      	push	{r7, lr}
   2b69e:	b088      	sub	sp, #32
   2b6a0:	af00      	add	r7, sp, #0
   2b6a2:	60f8      	str	r0, [r7, #12]
   2b6a4:	60b9      	str	r1, [r7, #8]
   2b6a6:	0019      	movs	r1, r3
   2b6a8:	1dfb      	adds	r3, r7, #7
   2b6aa:	701a      	strb	r2, [r3, #0]
   2b6ac:	1dbb      	adds	r3, r7, #6
   2b6ae:	1c0a      	adds	r2, r1, #0
   2b6b0:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2b6b2:	68bb      	ldr	r3, [r7, #8]
   2b6b4:	330d      	adds	r3, #13
   2b6b6:	1dba      	adds	r2, r7, #6
   2b6b8:	7812      	ldrb	r2, [r2, #0]
   2b6ba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2b6bc:	68bb      	ldr	r3, [r7, #8]
   2b6be:	330b      	adds	r3, #11
   2b6c0:	220f      	movs	r2, #15
   2b6c2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2b6c4:	68bb      	ldr	r3, [r7, #8]
   2b6c6:	330c      	adds	r3, #12
   2b6c8:	2200      	movs	r2, #0
   2b6ca:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2b6cc:	68bb      	ldr	r3, [r7, #8]
   2b6ce:	331a      	adds	r3, #26
   2b6d0:	2200      	movs	r2, #0
   2b6d2:	701a      	strb	r2, [r3, #0]
   2b6d4:	68bb      	ldr	r3, [r7, #8]
   2b6d6:	331b      	adds	r3, #27
   2b6d8:	2200      	movs	r2, #0
   2b6da:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2b6dc:	1dfb      	adds	r3, r7, #7
   2b6de:	781b      	ldrb	r3, [r3, #0]
   2b6e0:	1e5a      	subs	r2, r3, #1
   2b6e2:	0013      	movs	r3, r2
   2b6e4:	005b      	lsls	r3, r3, #1
   2b6e6:	189b      	adds	r3, r3, r2
   2b6e8:	009b      	lsls	r3, r3, #2
   2b6ea:	189b      	adds	r3, r3, r2
   2b6ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2b6ee:	2316      	movs	r3, #22
   2b6f0:	18fb      	adds	r3, r7, r3
   2b6f2:	2200      	movs	r2, #0
   2b6f4:	801a      	strh	r2, [r3, #0]
   2b6f6:	2300      	movs	r3, #0
   2b6f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2b6fa:	2316      	movs	r3, #22
   2b6fc:	18fb      	adds	r3, r7, r3
   2b6fe:	881b      	ldrh	r3, [r3, #0]
   2b700:	4a28      	ldr	r2, [pc, #160]	; (2b7a4 <fit_lfn+0x108>)
   2b702:	4293      	cmp	r3, r2
   2b704:	d009      	beq.n	2b71a <fit_lfn+0x7e>
   2b706:	69fb      	ldr	r3, [r7, #28]
   2b708:	1c5a      	adds	r2, r3, #1
   2b70a:	61fa      	str	r2, [r7, #28]
   2b70c:	005b      	lsls	r3, r3, #1
   2b70e:	68fa      	ldr	r2, [r7, #12]
   2b710:	18d2      	adds	r2, r2, r3
   2b712:	2316      	movs	r3, #22
   2b714:	18fb      	adds	r3, r7, r3
   2b716:	8812      	ldrh	r2, [r2, #0]
   2b718:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2b71a:	4a23      	ldr	r2, [pc, #140]	; (2b7a8 <fit_lfn+0x10c>)
   2b71c:	69bb      	ldr	r3, [r7, #24]
   2b71e:	18d3      	adds	r3, r2, r3
   2b720:	781b      	ldrb	r3, [r3, #0]
   2b722:	001a      	movs	r2, r3
   2b724:	68bb      	ldr	r3, [r7, #8]
   2b726:	189b      	adds	r3, r3, r2
   2b728:	2216      	movs	r2, #22
   2b72a:	18ba      	adds	r2, r7, r2
   2b72c:	8812      	ldrh	r2, [r2, #0]
   2b72e:	b2d2      	uxtb	r2, r2
   2b730:	701a      	strb	r2, [r3, #0]
   2b732:	4a1d      	ldr	r2, [pc, #116]	; (2b7a8 <fit_lfn+0x10c>)
   2b734:	69bb      	ldr	r3, [r7, #24]
   2b736:	18d3      	adds	r3, r2, r3
   2b738:	781b      	ldrb	r3, [r3, #0]
   2b73a:	3301      	adds	r3, #1
   2b73c:	68ba      	ldr	r2, [r7, #8]
   2b73e:	18d3      	adds	r3, r2, r3
   2b740:	2216      	movs	r2, #22
   2b742:	18ba      	adds	r2, r7, r2
   2b744:	8812      	ldrh	r2, [r2, #0]
   2b746:	0a12      	lsrs	r2, r2, #8
   2b748:	b292      	uxth	r2, r2
   2b74a:	b2d2      	uxtb	r2, r2
   2b74c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2b74e:	2316      	movs	r3, #22
   2b750:	18fb      	adds	r3, r7, r3
   2b752:	881b      	ldrh	r3, [r3, #0]
   2b754:	2b00      	cmp	r3, #0
   2b756:	d104      	bne.n	2b762 <fit_lfn+0xc6>
   2b758:	2316      	movs	r3, #22
   2b75a:	18fb      	adds	r3, r7, r3
   2b75c:	2201      	movs	r2, #1
   2b75e:	4252      	negs	r2, r2
   2b760:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2b762:	69bb      	ldr	r3, [r7, #24]
   2b764:	3301      	adds	r3, #1
   2b766:	61bb      	str	r3, [r7, #24]
   2b768:	69bb      	ldr	r3, [r7, #24]
   2b76a:	2b0c      	cmp	r3, #12
   2b76c:	d9c5      	bls.n	2b6fa <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2b76e:	2316      	movs	r3, #22
   2b770:	18fb      	adds	r3, r7, r3
   2b772:	881b      	ldrh	r3, [r3, #0]
   2b774:	4a0b      	ldr	r2, [pc, #44]	; (2b7a4 <fit_lfn+0x108>)
   2b776:	4293      	cmp	r3, r2
   2b778:	d006      	beq.n	2b788 <fit_lfn+0xec>
   2b77a:	69fb      	ldr	r3, [r7, #28]
   2b77c:	005b      	lsls	r3, r3, #1
   2b77e:	68fa      	ldr	r2, [r7, #12]
   2b780:	18d3      	adds	r3, r2, r3
   2b782:	881b      	ldrh	r3, [r3, #0]
   2b784:	2b00      	cmp	r3, #0
   2b786:	d105      	bne.n	2b794 <fit_lfn+0xf8>
   2b788:	1dfb      	adds	r3, r7, #7
   2b78a:	1dfa      	adds	r2, r7, #7
   2b78c:	7812      	ldrb	r2, [r2, #0]
   2b78e:	2140      	movs	r1, #64	; 0x40
   2b790:	430a      	orrs	r2, r1
   2b792:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2b794:	68bb      	ldr	r3, [r7, #8]
   2b796:	1dfa      	adds	r2, r7, #7
   2b798:	7812      	ldrb	r2, [r2, #0]
   2b79a:	701a      	strb	r2, [r3, #0]
}
   2b79c:	46c0      	nop			; (mov r8, r8)
   2b79e:	46bd      	mov	sp, r7
   2b7a0:	b008      	add	sp, #32
   2b7a2:	bd80      	pop	{r7, pc}
   2b7a4:	0000ffff 	.word	0x0000ffff
   2b7a8:	00039078 	.word	0x00039078

0002b7ac <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2b7ac:	b580      	push	{r7, lr}
   2b7ae:	b08a      	sub	sp, #40	; 0x28
   2b7b0:	af00      	add	r7, sp, #0
   2b7b2:	60f8      	str	r0, [r7, #12]
   2b7b4:	60b9      	str	r1, [r7, #8]
   2b7b6:	607a      	str	r2, [r7, #4]
   2b7b8:	001a      	movs	r2, r3
   2b7ba:	1cbb      	adds	r3, r7, #2
   2b7bc:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2b7be:	68b9      	ldr	r1, [r7, #8]
   2b7c0:	68fb      	ldr	r3, [r7, #12]
   2b7c2:	220b      	movs	r2, #11
   2b7c4:	0018      	movs	r0, r3
   2b7c6:	4b38      	ldr	r3, [pc, #224]	; (2b8a8 <gen_numname+0xfc>)
   2b7c8:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2b7ca:	1cbb      	adds	r3, r7, #2
   2b7cc:	881b      	ldrh	r3, [r3, #0]
   2b7ce:	2b05      	cmp	r3, #5
   2b7d0:	d911      	bls.n	2b7f6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2b7d2:	1cbb      	adds	r3, r7, #2
   2b7d4:	881b      	ldrh	r3, [r3, #0]
   2b7d6:	b29a      	uxth	r2, r3
   2b7d8:	0852      	lsrs	r2, r2, #1
   2b7da:	03db      	lsls	r3, r3, #15
   2b7dc:	4313      	orrs	r3, r2
   2b7de:	b299      	uxth	r1, r3
   2b7e0:	687b      	ldr	r3, [r7, #4]
   2b7e2:	1c9a      	adds	r2, r3, #2
   2b7e4:	607a      	str	r2, [r7, #4]
   2b7e6:	881a      	ldrh	r2, [r3, #0]
   2b7e8:	1cbb      	adds	r3, r7, #2
   2b7ea:	188a      	adds	r2, r1, r2
   2b7ec:	801a      	strh	r2, [r3, #0]
   2b7ee:	687b      	ldr	r3, [r7, #4]
   2b7f0:	881b      	ldrh	r3, [r3, #0]
   2b7f2:	2b00      	cmp	r3, #0
   2b7f4:	d1ed      	bne.n	2b7d2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2b7f6:	2307      	movs	r3, #7
   2b7f8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2b7fa:	1cbb      	adds	r3, r7, #2
   2b7fc:	881b      	ldrh	r3, [r3, #0]
   2b7fe:	b2db      	uxtb	r3, r3
   2b800:	220f      	movs	r2, #15
   2b802:	4013      	ands	r3, r2
   2b804:	b2da      	uxtb	r2, r3
   2b806:	2327      	movs	r3, #39	; 0x27
   2b808:	18fb      	adds	r3, r7, r3
   2b80a:	3230      	adds	r2, #48	; 0x30
   2b80c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2b80e:	2327      	movs	r3, #39	; 0x27
   2b810:	18fb      	adds	r3, r7, r3
   2b812:	781b      	ldrb	r3, [r3, #0]
   2b814:	2b39      	cmp	r3, #57	; 0x39
   2b816:	d906      	bls.n	2b826 <gen_numname+0x7a>
   2b818:	2327      	movs	r3, #39	; 0x27
   2b81a:	18fb      	adds	r3, r7, r3
   2b81c:	2227      	movs	r2, #39	; 0x27
   2b81e:	18ba      	adds	r2, r7, r2
   2b820:	7812      	ldrb	r2, [r2, #0]
   2b822:	3207      	adds	r2, #7
   2b824:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2b826:	6a3b      	ldr	r3, [r7, #32]
   2b828:	1e5a      	subs	r2, r3, #1
   2b82a:	623a      	str	r2, [r7, #32]
   2b82c:	2214      	movs	r2, #20
   2b82e:	18ba      	adds	r2, r7, r2
   2b830:	2127      	movs	r1, #39	; 0x27
   2b832:	1879      	adds	r1, r7, r1
   2b834:	7809      	ldrb	r1, [r1, #0]
   2b836:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2b838:	1cbb      	adds	r3, r7, #2
   2b83a:	1cba      	adds	r2, r7, #2
   2b83c:	8812      	ldrh	r2, [r2, #0]
   2b83e:	0912      	lsrs	r2, r2, #4
   2b840:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2b842:	1cbb      	adds	r3, r7, #2
   2b844:	881b      	ldrh	r3, [r3, #0]
   2b846:	2b00      	cmp	r3, #0
   2b848:	d1d7      	bne.n	2b7fa <gen_numname+0x4e>
	ns[i] = '~';
   2b84a:	2314      	movs	r3, #20
   2b84c:	18fa      	adds	r2, r7, r3
   2b84e:	6a3b      	ldr	r3, [r7, #32]
   2b850:	18d3      	adds	r3, r2, r3
   2b852:	227e      	movs	r2, #126	; 0x7e
   2b854:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2b856:	2300      	movs	r3, #0
   2b858:	61fb      	str	r3, [r7, #28]
   2b85a:	e002      	b.n	2b862 <gen_numname+0xb6>
   2b85c:	69fb      	ldr	r3, [r7, #28]
   2b85e:	3301      	adds	r3, #1
   2b860:	61fb      	str	r3, [r7, #28]
   2b862:	69fa      	ldr	r2, [r7, #28]
   2b864:	6a3b      	ldr	r3, [r7, #32]
   2b866:	429a      	cmp	r2, r3
   2b868:	d205      	bcs.n	2b876 <gen_numname+0xca>
   2b86a:	68fa      	ldr	r2, [r7, #12]
   2b86c:	69fb      	ldr	r3, [r7, #28]
   2b86e:	18d3      	adds	r3, r2, r3
   2b870:	781b      	ldrb	r3, [r3, #0]
   2b872:	2b20      	cmp	r3, #32
   2b874:	d1f2      	bne.n	2b85c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2b876:	69fb      	ldr	r3, [r7, #28]
   2b878:	1c5a      	adds	r2, r3, #1
   2b87a:	61fa      	str	r2, [r7, #28]
   2b87c:	68fa      	ldr	r2, [r7, #12]
   2b87e:	18d2      	adds	r2, r2, r3
   2b880:	6a3b      	ldr	r3, [r7, #32]
   2b882:	2b07      	cmp	r3, #7
   2b884:	d806      	bhi.n	2b894 <gen_numname+0xe8>
   2b886:	6a3b      	ldr	r3, [r7, #32]
   2b888:	1c59      	adds	r1, r3, #1
   2b88a:	6239      	str	r1, [r7, #32]
   2b88c:	2114      	movs	r1, #20
   2b88e:	1879      	adds	r1, r7, r1
   2b890:	5ccb      	ldrb	r3, [r1, r3]
   2b892:	e000      	b.n	2b896 <gen_numname+0xea>
   2b894:	2320      	movs	r3, #32
   2b896:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2b898:	69fb      	ldr	r3, [r7, #28]
   2b89a:	2b07      	cmp	r3, #7
   2b89c:	d9eb      	bls.n	2b876 <gen_numname+0xca>
}
   2b89e:	46c0      	nop			; (mov r8, r8)
   2b8a0:	46bd      	mov	sp, r7
   2b8a2:	b00a      	add	sp, #40	; 0x28
   2b8a4:	bd80      	pop	{r7, pc}
   2b8a6:	46c0      	nop			; (mov r8, r8)
   2b8a8:	0002a951 	.word	0x0002a951

0002b8ac <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2b8ac:	b580      	push	{r7, lr}
   2b8ae:	b084      	sub	sp, #16
   2b8b0:	af00      	add	r7, sp, #0
   2b8b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2b8b4:	230f      	movs	r3, #15
   2b8b6:	18fb      	adds	r3, r7, r3
   2b8b8:	2200      	movs	r2, #0
   2b8ba:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2b8bc:	230b      	movs	r3, #11
   2b8be:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2b8c0:	230f      	movs	r3, #15
   2b8c2:	18fb      	adds	r3, r7, r3
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	b2da      	uxtb	r2, r3
   2b8c8:	0852      	lsrs	r2, r2, #1
   2b8ca:	01db      	lsls	r3, r3, #7
   2b8cc:	4313      	orrs	r3, r2
   2b8ce:	b2d9      	uxtb	r1, r3
   2b8d0:	687b      	ldr	r3, [r7, #4]
   2b8d2:	1c5a      	adds	r2, r3, #1
   2b8d4:	607a      	str	r2, [r7, #4]
   2b8d6:	781a      	ldrb	r2, [r3, #0]
   2b8d8:	230f      	movs	r3, #15
   2b8da:	18fb      	adds	r3, r7, r3
   2b8dc:	188a      	adds	r2, r1, r2
   2b8de:	701a      	strb	r2, [r3, #0]
   2b8e0:	68bb      	ldr	r3, [r7, #8]
   2b8e2:	3b01      	subs	r3, #1
   2b8e4:	60bb      	str	r3, [r7, #8]
   2b8e6:	68bb      	ldr	r3, [r7, #8]
   2b8e8:	2b00      	cmp	r3, #0
   2b8ea:	d1e9      	bne.n	2b8c0 <sum_sfn+0x14>
	return sum;
   2b8ec:	230f      	movs	r3, #15
   2b8ee:	18fb      	adds	r3, r7, r3
   2b8f0:	781b      	ldrb	r3, [r3, #0]
}
   2b8f2:	0018      	movs	r0, r3
   2b8f4:	46bd      	mov	sp, r7
   2b8f6:	b004      	add	sp, #16
   2b8f8:	bd80      	pop	{r7, pc}
	...

0002b8fc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2b8fc:	b590      	push	{r4, r7, lr}
   2b8fe:	b087      	sub	sp, #28
   2b900:	af00      	add	r7, sp, #0
   2b902:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2b904:	2317      	movs	r3, #23
   2b906:	18fc      	adds	r4, r7, r3
   2b908:	687b      	ldr	r3, [r7, #4]
   2b90a:	2100      	movs	r1, #0
   2b90c:	0018      	movs	r0, r3
   2b90e:	4b74      	ldr	r3, [pc, #464]	; (2bae0 <dir_find+0x1e4>)
   2b910:	4798      	blx	r3
   2b912:	0003      	movs	r3, r0
   2b914:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2b916:	2317      	movs	r3, #23
   2b918:	18fb      	adds	r3, r7, r3
   2b91a:	781b      	ldrb	r3, [r3, #0]
   2b91c:	2b00      	cmp	r3, #0
   2b91e:	d003      	beq.n	2b928 <dir_find+0x2c>
   2b920:	2317      	movs	r3, #23
   2b922:	18fb      	adds	r3, r7, r3
   2b924:	781b      	ldrb	r3, [r3, #0]
   2b926:	e0d6      	b.n	2bad6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2b928:	2314      	movs	r3, #20
   2b92a:	18fb      	adds	r3, r7, r3
   2b92c:	22ff      	movs	r2, #255	; 0xff
   2b92e:	701a      	strb	r2, [r3, #0]
   2b930:	2315      	movs	r3, #21
   2b932:	18fb      	adds	r3, r7, r3
   2b934:	2214      	movs	r2, #20
   2b936:	18ba      	adds	r2, r7, r2
   2b938:	7812      	ldrb	r2, [r2, #0]
   2b93a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2b93c:	687b      	ldr	r3, [r7, #4]
   2b93e:	681a      	ldr	r2, [r3, #0]
   2b940:	687b      	ldr	r3, [r7, #4]
   2b942:	691b      	ldr	r3, [r3, #16]
   2b944:	2117      	movs	r1, #23
   2b946:	187c      	adds	r4, r7, r1
   2b948:	0019      	movs	r1, r3
   2b94a:	0010      	movs	r0, r2
   2b94c:	4b65      	ldr	r3, [pc, #404]	; (2bae4 <dir_find+0x1e8>)
   2b94e:	4798      	blx	r3
   2b950:	0003      	movs	r3, r0
   2b952:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2b954:	2317      	movs	r3, #23
   2b956:	18fb      	adds	r3, r7, r3
   2b958:	781b      	ldrb	r3, [r3, #0]
   2b95a:	2b00      	cmp	r3, #0
   2b95c:	d000      	beq.n	2b960 <dir_find+0x64>
   2b95e:	e0b2      	b.n	2bac6 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2b960:	687b      	ldr	r3, [r7, #4]
   2b962:	695b      	ldr	r3, [r3, #20]
   2b964:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2b966:	2316      	movs	r3, #22
   2b968:	18fb      	adds	r3, r7, r3
   2b96a:	693a      	ldr	r2, [r7, #16]
   2b96c:	7812      	ldrb	r2, [r2, #0]
   2b96e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2b970:	2316      	movs	r3, #22
   2b972:	18fb      	adds	r3, r7, r3
   2b974:	781b      	ldrb	r3, [r3, #0]
   2b976:	2b00      	cmp	r3, #0
   2b978:	d104      	bne.n	2b984 <dir_find+0x88>
   2b97a:	2317      	movs	r3, #23
   2b97c:	18fb      	adds	r3, r7, r3
   2b97e:	2204      	movs	r2, #4
   2b980:	701a      	strb	r2, [r3, #0]
   2b982:	e0a5      	b.n	2bad0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2b984:	693b      	ldr	r3, [r7, #16]
   2b986:	330b      	adds	r3, #11
   2b988:	781a      	ldrb	r2, [r3, #0]
   2b98a:	230f      	movs	r3, #15
   2b98c:	18fb      	adds	r3, r7, r3
   2b98e:	213f      	movs	r1, #63	; 0x3f
   2b990:	400a      	ands	r2, r1
   2b992:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2b994:	2316      	movs	r3, #22
   2b996:	18fb      	adds	r3, r7, r3
   2b998:	781b      	ldrb	r3, [r3, #0]
   2b99a:	2be5      	cmp	r3, #229	; 0xe5
   2b99c:	d00a      	beq.n	2b9b4 <dir_find+0xb8>
   2b99e:	230f      	movs	r3, #15
   2b9a0:	18fb      	adds	r3, r7, r3
   2b9a2:	781b      	ldrb	r3, [r3, #0]
   2b9a4:	2208      	movs	r2, #8
   2b9a6:	4013      	ands	r3, r2
   2b9a8:	d009      	beq.n	2b9be <dir_find+0xc2>
   2b9aa:	230f      	movs	r3, #15
   2b9ac:	18fb      	adds	r3, r7, r3
   2b9ae:	781b      	ldrb	r3, [r3, #0]
   2b9b0:	2b0f      	cmp	r3, #15
   2b9b2:	d004      	beq.n	2b9be <dir_find+0xc2>
			ord = 0xFF;
   2b9b4:	2315      	movs	r3, #21
   2b9b6:	18fb      	adds	r3, r7, r3
   2b9b8:	22ff      	movs	r2, #255	; 0xff
   2b9ba:	701a      	strb	r2, [r3, #0]
   2b9bc:	e073      	b.n	2baa6 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2b9be:	230f      	movs	r3, #15
   2b9c0:	18fb      	adds	r3, r7, r3
   2b9c2:	781b      	ldrb	r3, [r3, #0]
   2b9c4:	2b0f      	cmp	r3, #15
   2b9c6:	d145      	bne.n	2ba54 <dir_find+0x158>
				if (dj->lfn) {
   2b9c8:	687b      	ldr	r3, [r7, #4]
   2b9ca:	69db      	ldr	r3, [r3, #28]
   2b9cc:	2b00      	cmp	r3, #0
   2b9ce:	d100      	bne.n	2b9d2 <dir_find+0xd6>
   2b9d0:	e069      	b.n	2baa6 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2b9d2:	2316      	movs	r3, #22
   2b9d4:	18fb      	adds	r3, r7, r3
   2b9d6:	781b      	ldrb	r3, [r3, #0]
   2b9d8:	2240      	movs	r2, #64	; 0x40
   2b9da:	4013      	ands	r3, r2
   2b9dc:	d016      	beq.n	2ba0c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2b9de:	2314      	movs	r3, #20
   2b9e0:	18fb      	adds	r3, r7, r3
   2b9e2:	693a      	ldr	r2, [r7, #16]
   2b9e4:	7b52      	ldrb	r2, [r2, #13]
   2b9e6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2b9e8:	2316      	movs	r3, #22
   2b9ea:	18fb      	adds	r3, r7, r3
   2b9ec:	2216      	movs	r2, #22
   2b9ee:	18ba      	adds	r2, r7, r2
   2b9f0:	7812      	ldrb	r2, [r2, #0]
   2b9f2:	2140      	movs	r1, #64	; 0x40
   2b9f4:	438a      	bics	r2, r1
   2b9f6:	701a      	strb	r2, [r3, #0]
   2b9f8:	2315      	movs	r3, #21
   2b9fa:	18fb      	adds	r3, r7, r3
   2b9fc:	2216      	movs	r2, #22
   2b9fe:	18ba      	adds	r2, r7, r2
   2ba00:	7812      	ldrb	r2, [r2, #0]
   2ba02:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2ba04:	687b      	ldr	r3, [r7, #4]
   2ba06:	88da      	ldrh	r2, [r3, #6]
   2ba08:	687b      	ldr	r3, [r7, #4]
   2ba0a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2ba0c:	2316      	movs	r3, #22
   2ba0e:	18fa      	adds	r2, r7, r3
   2ba10:	2315      	movs	r3, #21
   2ba12:	18fb      	adds	r3, r7, r3
   2ba14:	7812      	ldrb	r2, [r2, #0]
   2ba16:	781b      	ldrb	r3, [r3, #0]
   2ba18:	429a      	cmp	r2, r3
   2ba1a:	d116      	bne.n	2ba4a <dir_find+0x14e>
   2ba1c:	693b      	ldr	r3, [r7, #16]
   2ba1e:	330d      	adds	r3, #13
   2ba20:	781b      	ldrb	r3, [r3, #0]
   2ba22:	2214      	movs	r2, #20
   2ba24:	18ba      	adds	r2, r7, r2
   2ba26:	7812      	ldrb	r2, [r2, #0]
   2ba28:	429a      	cmp	r2, r3
   2ba2a:	d10e      	bne.n	2ba4a <dir_find+0x14e>
   2ba2c:	687b      	ldr	r3, [r7, #4]
   2ba2e:	69db      	ldr	r3, [r3, #28]
   2ba30:	693a      	ldr	r2, [r7, #16]
   2ba32:	0011      	movs	r1, r2
   2ba34:	0018      	movs	r0, r3
   2ba36:	4b2c      	ldr	r3, [pc, #176]	; (2bae8 <dir_find+0x1ec>)
   2ba38:	4798      	blx	r3
   2ba3a:	1e03      	subs	r3, r0, #0
   2ba3c:	d005      	beq.n	2ba4a <dir_find+0x14e>
   2ba3e:	2315      	movs	r3, #21
   2ba40:	18fb      	adds	r3, r7, r3
   2ba42:	781b      	ldrb	r3, [r3, #0]
   2ba44:	3b01      	subs	r3, #1
   2ba46:	b2da      	uxtb	r2, r3
   2ba48:	e000      	b.n	2ba4c <dir_find+0x150>
   2ba4a:	22ff      	movs	r2, #255	; 0xff
   2ba4c:	2315      	movs	r3, #21
   2ba4e:	18fb      	adds	r3, r7, r3
   2ba50:	701a      	strb	r2, [r3, #0]
   2ba52:	e028      	b.n	2baa6 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2ba54:	2315      	movs	r3, #21
   2ba56:	18fb      	adds	r3, r7, r3
   2ba58:	781b      	ldrb	r3, [r3, #0]
   2ba5a:	2b00      	cmp	r3, #0
   2ba5c:	d10a      	bne.n	2ba74 <dir_find+0x178>
   2ba5e:	693b      	ldr	r3, [r7, #16]
   2ba60:	0018      	movs	r0, r3
   2ba62:	4b22      	ldr	r3, [pc, #136]	; (2baec <dir_find+0x1f0>)
   2ba64:	4798      	blx	r3
   2ba66:	0003      	movs	r3, r0
   2ba68:	001a      	movs	r2, r3
   2ba6a:	2314      	movs	r3, #20
   2ba6c:	18fb      	adds	r3, r7, r3
   2ba6e:	781b      	ldrb	r3, [r3, #0]
   2ba70:	4293      	cmp	r3, r2
   2ba72:	d02a      	beq.n	2baca <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2ba74:	2315      	movs	r3, #21
   2ba76:	18fb      	adds	r3, r7, r3
   2ba78:	22ff      	movs	r2, #255	; 0xff
   2ba7a:	701a      	strb	r2, [r3, #0]
   2ba7c:	687b      	ldr	r3, [r7, #4]
   2ba7e:	2201      	movs	r2, #1
   2ba80:	4252      	negs	r2, r2
   2ba82:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2ba84:	687b      	ldr	r3, [r7, #4]
   2ba86:	699b      	ldr	r3, [r3, #24]
   2ba88:	330b      	adds	r3, #11
   2ba8a:	781b      	ldrb	r3, [r3, #0]
   2ba8c:	001a      	movs	r2, r3
   2ba8e:	2301      	movs	r3, #1
   2ba90:	4013      	ands	r3, r2
   2ba92:	d108      	bne.n	2baa6 <dir_find+0x1aa>
   2ba94:	687b      	ldr	r3, [r7, #4]
   2ba96:	6999      	ldr	r1, [r3, #24]
   2ba98:	693b      	ldr	r3, [r7, #16]
   2ba9a:	220b      	movs	r2, #11
   2ba9c:	0018      	movs	r0, r3
   2ba9e:	4b14      	ldr	r3, [pc, #80]	; (2baf0 <dir_find+0x1f4>)
   2baa0:	4798      	blx	r3
   2baa2:	1e03      	subs	r3, r0, #0
   2baa4:	d013      	beq.n	2bace <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2baa6:	2317      	movs	r3, #23
   2baa8:	18fc      	adds	r4, r7, r3
   2baaa:	687b      	ldr	r3, [r7, #4]
   2baac:	2100      	movs	r1, #0
   2baae:	0018      	movs	r0, r3
   2bab0:	4b10      	ldr	r3, [pc, #64]	; (2baf4 <dir_find+0x1f8>)
   2bab2:	4798      	blx	r3
   2bab4:	0003      	movs	r3, r0
   2bab6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bab8:	2317      	movs	r3, #23
   2baba:	18fb      	adds	r3, r7, r3
   2babc:	781b      	ldrb	r3, [r3, #0]
   2babe:	2b00      	cmp	r3, #0
   2bac0:	d100      	bne.n	2bac4 <dir_find+0x1c8>
   2bac2:	e73b      	b.n	2b93c <dir_find+0x40>
   2bac4:	e004      	b.n	2bad0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2bac6:	46c0      	nop			; (mov r8, r8)
   2bac8:	e002      	b.n	2bad0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2baca:	46c0      	nop			; (mov r8, r8)
   2bacc:	e000      	b.n	2bad0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2bace:	46c0      	nop			; (mov r8, r8)

	return res;
   2bad0:	2317      	movs	r3, #23
   2bad2:	18fb      	adds	r3, r7, r3
   2bad4:	781b      	ldrb	r3, [r3, #0]
}
   2bad6:	0018      	movs	r0, r3
   2bad8:	46bd      	mov	sp, r7
   2bada:	b007      	add	sp, #28
   2badc:	bd90      	pop	{r4, r7, pc}
   2bade:	46c0      	nop			; (mov r8, r8)
   2bae0:	0002b279 	.word	0x0002b279
   2bae4:	0002aa35 	.word	0x0002aa35
   2bae8:	0002b599 	.word	0x0002b599
   2baec:	0002b8ad 	.word	0x0002b8ad
   2baf0:	0002a9b9 	.word	0x0002a9b9
   2baf4:	0002b3a9 	.word	0x0002b3a9

0002baf8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2baf8:	b590      	push	{r4, r7, lr}
   2bafa:	b08d      	sub	sp, #52	; 0x34
   2bafc:	af00      	add	r7, sp, #0
   2bafe:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2bb00:	687b      	ldr	r3, [r7, #4]
   2bb02:	699b      	ldr	r3, [r3, #24]
   2bb04:	627b      	str	r3, [r7, #36]	; 0x24
   2bb06:	687b      	ldr	r3, [r7, #4]
   2bb08:	69db      	ldr	r3, [r3, #28]
   2bb0a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2bb0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2bb0e:	230c      	movs	r3, #12
   2bb10:	18fb      	adds	r3, r7, r3
   2bb12:	220c      	movs	r2, #12
   2bb14:	0018      	movs	r0, r3
   2bb16:	4bc8      	ldr	r3, [pc, #800]	; (2be38 <dir_register+0x340>)
   2bb18:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2bb1a:	230c      	movs	r3, #12
   2bb1c:	18fb      	adds	r3, r7, r3
   2bb1e:	7adb      	ldrb	r3, [r3, #11]
   2bb20:	001a      	movs	r2, r3
   2bb22:	2301      	movs	r3, #1
   2bb24:	4013      	ands	r3, r2
   2bb26:	d048      	beq.n	2bbba <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bb2a:	330b      	adds	r3, #11
   2bb2c:	2200      	movs	r2, #0
   2bb2e:	701a      	strb	r2, [r3, #0]
   2bb30:	687b      	ldr	r3, [r7, #4]
   2bb32:	2200      	movs	r2, #0
   2bb34:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2bb36:	232c      	movs	r3, #44	; 0x2c
   2bb38:	18fb      	adds	r3, r7, r3
   2bb3a:	2201      	movs	r2, #1
   2bb3c:	801a      	strh	r2, [r3, #0]
   2bb3e:	e01c      	b.n	2bb7a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2bb40:	232c      	movs	r3, #44	; 0x2c
   2bb42:	18fb      	adds	r3, r7, r3
   2bb44:	881b      	ldrh	r3, [r3, #0]
   2bb46:	6a3a      	ldr	r2, [r7, #32]
   2bb48:	210c      	movs	r1, #12
   2bb4a:	1879      	adds	r1, r7, r1
   2bb4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2bb4e:	4cbb      	ldr	r4, [pc, #748]	; (2be3c <dir_register+0x344>)
   2bb50:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2bb52:	232f      	movs	r3, #47	; 0x2f
   2bb54:	18fc      	adds	r4, r7, r3
   2bb56:	687b      	ldr	r3, [r7, #4]
   2bb58:	0018      	movs	r0, r3
   2bb5a:	4bb9      	ldr	r3, [pc, #740]	; (2be40 <dir_register+0x348>)
   2bb5c:	4798      	blx	r3
   2bb5e:	0003      	movs	r3, r0
   2bb60:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bb62:	232f      	movs	r3, #47	; 0x2f
   2bb64:	18fb      	adds	r3, r7, r3
   2bb66:	781b      	ldrb	r3, [r3, #0]
   2bb68:	2b00      	cmp	r3, #0
   2bb6a:	d10c      	bne.n	2bb86 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2bb6c:	232c      	movs	r3, #44	; 0x2c
   2bb6e:	18fb      	adds	r3, r7, r3
   2bb70:	881a      	ldrh	r2, [r3, #0]
   2bb72:	232c      	movs	r3, #44	; 0x2c
   2bb74:	18fb      	adds	r3, r7, r3
   2bb76:	3201      	adds	r2, #1
   2bb78:	801a      	strh	r2, [r3, #0]
   2bb7a:	232c      	movs	r3, #44	; 0x2c
   2bb7c:	18fb      	adds	r3, r7, r3
   2bb7e:	881b      	ldrh	r3, [r3, #0]
   2bb80:	2b63      	cmp	r3, #99	; 0x63
   2bb82:	d9dd      	bls.n	2bb40 <dir_register+0x48>
   2bb84:	e000      	b.n	2bb88 <dir_register+0x90>
			if (res != FR_OK) break;
   2bb86:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2bb88:	232c      	movs	r3, #44	; 0x2c
   2bb8a:	18fb      	adds	r3, r7, r3
   2bb8c:	881b      	ldrh	r3, [r3, #0]
   2bb8e:	2b64      	cmp	r3, #100	; 0x64
   2bb90:	d101      	bne.n	2bb96 <dir_register+0x9e>
   2bb92:	2307      	movs	r3, #7
   2bb94:	e14c      	b.n	2be30 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2bb96:	232f      	movs	r3, #47	; 0x2f
   2bb98:	18fb      	adds	r3, r7, r3
   2bb9a:	781b      	ldrb	r3, [r3, #0]
   2bb9c:	2b04      	cmp	r3, #4
   2bb9e:	d003      	beq.n	2bba8 <dir_register+0xb0>
   2bba0:	232f      	movs	r3, #47	; 0x2f
   2bba2:	18fb      	adds	r3, r7, r3
   2bba4:	781b      	ldrb	r3, [r3, #0]
   2bba6:	e143      	b.n	2be30 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bbaa:	330b      	adds	r3, #11
   2bbac:	220c      	movs	r2, #12
   2bbae:	18ba      	adds	r2, r7, r2
   2bbb0:	7ad2      	ldrb	r2, [r2, #11]
   2bbb2:	701a      	strb	r2, [r3, #0]
   2bbb4:	687b      	ldr	r3, [r7, #4]
   2bbb6:	6a3a      	ldr	r2, [r7, #32]
   2bbb8:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2bbba:	230c      	movs	r3, #12
   2bbbc:	18fb      	adds	r3, r7, r3
   2bbbe:	7adb      	ldrb	r3, [r3, #11]
   2bbc0:	001a      	movs	r2, r3
   2bbc2:	2302      	movs	r3, #2
   2bbc4:	4013      	ands	r3, r2
   2bbc6:	d023      	beq.n	2bc10 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2bbc8:	232a      	movs	r3, #42	; 0x2a
   2bbca:	18fb      	adds	r3, r7, r3
   2bbcc:	2200      	movs	r2, #0
   2bbce:	801a      	strh	r2, [r3, #0]
   2bbd0:	e006      	b.n	2bbe0 <dir_register+0xe8>
   2bbd2:	232a      	movs	r3, #42	; 0x2a
   2bbd4:	18fb      	adds	r3, r7, r3
   2bbd6:	881a      	ldrh	r2, [r3, #0]
   2bbd8:	232a      	movs	r3, #42	; 0x2a
   2bbda:	18fb      	adds	r3, r7, r3
   2bbdc:	3201      	adds	r2, #1
   2bbde:	801a      	strh	r2, [r3, #0]
   2bbe0:	232a      	movs	r3, #42	; 0x2a
   2bbe2:	18fb      	adds	r3, r7, r3
   2bbe4:	881b      	ldrh	r3, [r3, #0]
   2bbe6:	005b      	lsls	r3, r3, #1
   2bbe8:	6a3a      	ldr	r2, [r7, #32]
   2bbea:	18d3      	adds	r3, r2, r3
   2bbec:	881b      	ldrh	r3, [r3, #0]
   2bbee:	2b00      	cmp	r3, #0
   2bbf0:	d1ef      	bne.n	2bbd2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2bbf2:	232a      	movs	r3, #42	; 0x2a
   2bbf4:	18fb      	adds	r3, r7, r3
   2bbf6:	881b      	ldrh	r3, [r3, #0]
   2bbf8:	3319      	adds	r3, #25
   2bbfa:	001a      	movs	r2, r3
   2bbfc:	4b91      	ldr	r3, [pc, #580]	; (2be44 <dir_register+0x34c>)
   2bbfe:	210d      	movs	r1, #13
   2bc00:	0010      	movs	r0, r2
   2bc02:	4798      	blx	r3
   2bc04:	0003      	movs	r3, r0
   2bc06:	001a      	movs	r2, r3
   2bc08:	232a      	movs	r3, #42	; 0x2a
   2bc0a:	18fb      	adds	r3, r7, r3
   2bc0c:	801a      	strh	r2, [r3, #0]
   2bc0e:	e003      	b.n	2bc18 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2bc10:	232a      	movs	r3, #42	; 0x2a
   2bc12:	18fb      	adds	r3, r7, r3
   2bc14:	2201      	movs	r2, #1
   2bc16:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2bc18:	232f      	movs	r3, #47	; 0x2f
   2bc1a:	18fc      	adds	r4, r7, r3
   2bc1c:	687b      	ldr	r3, [r7, #4]
   2bc1e:	2100      	movs	r1, #0
   2bc20:	0018      	movs	r0, r3
   2bc22:	4b89      	ldr	r3, [pc, #548]	; (2be48 <dir_register+0x350>)
   2bc24:	4798      	blx	r3
   2bc26:	0003      	movs	r3, r0
   2bc28:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2bc2a:	232f      	movs	r3, #47	; 0x2f
   2bc2c:	18fb      	adds	r3, r7, r3
   2bc2e:	781b      	ldrb	r3, [r3, #0]
   2bc30:	2b00      	cmp	r3, #0
   2bc32:	d003      	beq.n	2bc3c <dir_register+0x144>
   2bc34:	232f      	movs	r3, #47	; 0x2f
   2bc36:	18fb      	adds	r3, r7, r3
   2bc38:	781b      	ldrb	r3, [r3, #0]
   2bc3a:	e0f9      	b.n	2be30 <dir_register+0x338>
	n = is = 0;
   2bc3c:	2328      	movs	r3, #40	; 0x28
   2bc3e:	18fb      	adds	r3, r7, r3
   2bc40:	2200      	movs	r2, #0
   2bc42:	801a      	strh	r2, [r3, #0]
   2bc44:	232c      	movs	r3, #44	; 0x2c
   2bc46:	18fb      	adds	r3, r7, r3
   2bc48:	2228      	movs	r2, #40	; 0x28
   2bc4a:	18ba      	adds	r2, r7, r2
   2bc4c:	8812      	ldrh	r2, [r2, #0]
   2bc4e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2bc50:	687b      	ldr	r3, [r7, #4]
   2bc52:	681a      	ldr	r2, [r3, #0]
   2bc54:	687b      	ldr	r3, [r7, #4]
   2bc56:	691b      	ldr	r3, [r3, #16]
   2bc58:	212f      	movs	r1, #47	; 0x2f
   2bc5a:	187c      	adds	r4, r7, r1
   2bc5c:	0019      	movs	r1, r3
   2bc5e:	0010      	movs	r0, r2
   2bc60:	4b7a      	ldr	r3, [pc, #488]	; (2be4c <dir_register+0x354>)
   2bc62:	4798      	blx	r3
   2bc64:	0003      	movs	r3, r0
   2bc66:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bc68:	232f      	movs	r3, #47	; 0x2f
   2bc6a:	18fb      	adds	r3, r7, r3
   2bc6c:	781b      	ldrb	r3, [r3, #0]
   2bc6e:	2b00      	cmp	r3, #0
   2bc70:	d13c      	bne.n	2bcec <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2bc72:	687b      	ldr	r3, [r7, #4]
   2bc74:	695a      	ldr	r2, [r3, #20]
   2bc76:	231f      	movs	r3, #31
   2bc78:	18fb      	adds	r3, r7, r3
   2bc7a:	7812      	ldrb	r2, [r2, #0]
   2bc7c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2bc7e:	231f      	movs	r3, #31
   2bc80:	18fb      	adds	r3, r7, r3
   2bc82:	781b      	ldrb	r3, [r3, #0]
   2bc84:	2be5      	cmp	r3, #229	; 0xe5
   2bc86:	d004      	beq.n	2bc92 <dir_register+0x19a>
   2bc88:	231f      	movs	r3, #31
   2bc8a:	18fb      	adds	r3, r7, r3
   2bc8c:	781b      	ldrb	r3, [r3, #0]
   2bc8e:	2b00      	cmp	r3, #0
   2bc90:	d119      	bne.n	2bcc6 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2bc92:	232c      	movs	r3, #44	; 0x2c
   2bc94:	18fb      	adds	r3, r7, r3
   2bc96:	881b      	ldrh	r3, [r3, #0]
   2bc98:	2b00      	cmp	r3, #0
   2bc9a:	d104      	bne.n	2bca6 <dir_register+0x1ae>
   2bc9c:	2328      	movs	r3, #40	; 0x28
   2bc9e:	18fb      	adds	r3, r7, r3
   2bca0:	687a      	ldr	r2, [r7, #4]
   2bca2:	88d2      	ldrh	r2, [r2, #6]
   2bca4:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2bca6:	232c      	movs	r3, #44	; 0x2c
   2bca8:	18fb      	adds	r3, r7, r3
   2bcaa:	222c      	movs	r2, #44	; 0x2c
   2bcac:	18ba      	adds	r2, r7, r2
   2bcae:	8812      	ldrh	r2, [r2, #0]
   2bcb0:	3201      	adds	r2, #1
   2bcb2:	801a      	strh	r2, [r3, #0]
   2bcb4:	232c      	movs	r3, #44	; 0x2c
   2bcb6:	18fa      	adds	r2, r7, r3
   2bcb8:	232a      	movs	r3, #42	; 0x2a
   2bcba:	18fb      	adds	r3, r7, r3
   2bcbc:	8812      	ldrh	r2, [r2, #0]
   2bcbe:	881b      	ldrh	r3, [r3, #0]
   2bcc0:	429a      	cmp	r2, r3
   2bcc2:	d104      	bne.n	2bcce <dir_register+0x1d6>
   2bcc4:	e013      	b.n	2bcee <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2bcc6:	232c      	movs	r3, #44	; 0x2c
   2bcc8:	18fb      	adds	r3, r7, r3
   2bcca:	2200      	movs	r2, #0
   2bccc:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2bcce:	232f      	movs	r3, #47	; 0x2f
   2bcd0:	18fc      	adds	r4, r7, r3
   2bcd2:	687b      	ldr	r3, [r7, #4]
   2bcd4:	2101      	movs	r1, #1
   2bcd6:	0018      	movs	r0, r3
   2bcd8:	4b5d      	ldr	r3, [pc, #372]	; (2be50 <dir_register+0x358>)
   2bcda:	4798      	blx	r3
   2bcdc:	0003      	movs	r3, r0
   2bcde:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bce0:	232f      	movs	r3, #47	; 0x2f
   2bce2:	18fb      	adds	r3, r7, r3
   2bce4:	781b      	ldrb	r3, [r3, #0]
   2bce6:	2b00      	cmp	r3, #0
   2bce8:	d0b2      	beq.n	2bc50 <dir_register+0x158>
   2bcea:	e000      	b.n	2bcee <dir_register+0x1f6>
		if (res != FR_OK) break;
   2bcec:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2bcee:	232f      	movs	r3, #47	; 0x2f
   2bcf0:	18fb      	adds	r3, r7, r3
   2bcf2:	781b      	ldrb	r3, [r3, #0]
   2bcf4:	2b00      	cmp	r3, #0
   2bcf6:	d163      	bne.n	2bdc0 <dir_register+0x2c8>
   2bcf8:	232a      	movs	r3, #42	; 0x2a
   2bcfa:	18fb      	adds	r3, r7, r3
   2bcfc:	881b      	ldrh	r3, [r3, #0]
   2bcfe:	2b01      	cmp	r3, #1
   2bd00:	d95e      	bls.n	2bdc0 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2bd02:	232f      	movs	r3, #47	; 0x2f
   2bd04:	18fc      	adds	r4, r7, r3
   2bd06:	2328      	movs	r3, #40	; 0x28
   2bd08:	18fb      	adds	r3, r7, r3
   2bd0a:	881a      	ldrh	r2, [r3, #0]
   2bd0c:	687b      	ldr	r3, [r7, #4]
   2bd0e:	0011      	movs	r1, r2
   2bd10:	0018      	movs	r0, r3
   2bd12:	4b4d      	ldr	r3, [pc, #308]	; (2be48 <dir_register+0x350>)
   2bd14:	4798      	blx	r3
   2bd16:	0003      	movs	r3, r0
   2bd18:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bd1a:	232f      	movs	r3, #47	; 0x2f
   2bd1c:	18fb      	adds	r3, r7, r3
   2bd1e:	781b      	ldrb	r3, [r3, #0]
   2bd20:	2b00      	cmp	r3, #0
   2bd22:	d14d      	bne.n	2bdc0 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2bd24:	687b      	ldr	r3, [r7, #4]
   2bd26:	699b      	ldr	r3, [r3, #24]
   2bd28:	221e      	movs	r2, #30
   2bd2a:	18bc      	adds	r4, r7, r2
   2bd2c:	0018      	movs	r0, r3
   2bd2e:	4b49      	ldr	r3, [pc, #292]	; (2be54 <dir_register+0x35c>)
   2bd30:	4798      	blx	r3
   2bd32:	0003      	movs	r3, r0
   2bd34:	7023      	strb	r3, [r4, #0]
			ne--;
   2bd36:	232a      	movs	r3, #42	; 0x2a
   2bd38:	18fb      	adds	r3, r7, r3
   2bd3a:	881a      	ldrh	r2, [r3, #0]
   2bd3c:	232a      	movs	r3, #42	; 0x2a
   2bd3e:	18fb      	adds	r3, r7, r3
   2bd40:	3a01      	subs	r2, #1
   2bd42:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2bd44:	687b      	ldr	r3, [r7, #4]
   2bd46:	681a      	ldr	r2, [r3, #0]
   2bd48:	687b      	ldr	r3, [r7, #4]
   2bd4a:	691b      	ldr	r3, [r3, #16]
   2bd4c:	212f      	movs	r1, #47	; 0x2f
   2bd4e:	187c      	adds	r4, r7, r1
   2bd50:	0019      	movs	r1, r3
   2bd52:	0010      	movs	r0, r2
   2bd54:	4b3d      	ldr	r3, [pc, #244]	; (2be4c <dir_register+0x354>)
   2bd56:	4798      	blx	r3
   2bd58:	0003      	movs	r3, r0
   2bd5a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2bd5c:	232f      	movs	r3, #47	; 0x2f
   2bd5e:	18fb      	adds	r3, r7, r3
   2bd60:	781b      	ldrb	r3, [r3, #0]
   2bd62:	2b00      	cmp	r3, #0
   2bd64:	d12b      	bne.n	2bdbe <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2bd66:	687b      	ldr	r3, [r7, #4]
   2bd68:	69d8      	ldr	r0, [r3, #28]
   2bd6a:	687b      	ldr	r3, [r7, #4]
   2bd6c:	6959      	ldr	r1, [r3, #20]
   2bd6e:	232a      	movs	r3, #42	; 0x2a
   2bd70:	18fb      	adds	r3, r7, r3
   2bd72:	881b      	ldrh	r3, [r3, #0]
   2bd74:	b2da      	uxtb	r2, r3
   2bd76:	231e      	movs	r3, #30
   2bd78:	18fb      	adds	r3, r7, r3
   2bd7a:	781b      	ldrb	r3, [r3, #0]
   2bd7c:	4c36      	ldr	r4, [pc, #216]	; (2be58 <dir_register+0x360>)
   2bd7e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2bd80:	687b      	ldr	r3, [r7, #4]
   2bd82:	681b      	ldr	r3, [r3, #0]
   2bd84:	2201      	movs	r2, #1
   2bd86:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2bd88:	232f      	movs	r3, #47	; 0x2f
   2bd8a:	18fc      	adds	r4, r7, r3
   2bd8c:	687b      	ldr	r3, [r7, #4]
   2bd8e:	2100      	movs	r1, #0
   2bd90:	0018      	movs	r0, r3
   2bd92:	4b2f      	ldr	r3, [pc, #188]	; (2be50 <dir_register+0x358>)
   2bd94:	4798      	blx	r3
   2bd96:	0003      	movs	r3, r0
   2bd98:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2bd9a:	232f      	movs	r3, #47	; 0x2f
   2bd9c:	18fb      	adds	r3, r7, r3
   2bd9e:	781b      	ldrb	r3, [r3, #0]
   2bda0:	2b00      	cmp	r3, #0
   2bda2:	d10d      	bne.n	2bdc0 <dir_register+0x2c8>
   2bda4:	232a      	movs	r3, #42	; 0x2a
   2bda6:	18fb      	adds	r3, r7, r3
   2bda8:	222a      	movs	r2, #42	; 0x2a
   2bdaa:	18ba      	adds	r2, r7, r2
   2bdac:	8812      	ldrh	r2, [r2, #0]
   2bdae:	3a01      	subs	r2, #1
   2bdb0:	801a      	strh	r2, [r3, #0]
   2bdb2:	232a      	movs	r3, #42	; 0x2a
   2bdb4:	18fb      	adds	r3, r7, r3
   2bdb6:	881b      	ldrh	r3, [r3, #0]
   2bdb8:	2b00      	cmp	r3, #0
   2bdba:	d1c3      	bne.n	2bd44 <dir_register+0x24c>
   2bdbc:	e000      	b.n	2bdc0 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2bdbe:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2bdc0:	232f      	movs	r3, #47	; 0x2f
   2bdc2:	18fb      	adds	r3, r7, r3
   2bdc4:	781b      	ldrb	r3, [r3, #0]
   2bdc6:	2b00      	cmp	r3, #0
   2bdc8:	d12f      	bne.n	2be2a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2bdca:	687b      	ldr	r3, [r7, #4]
   2bdcc:	681a      	ldr	r2, [r3, #0]
   2bdce:	687b      	ldr	r3, [r7, #4]
   2bdd0:	691b      	ldr	r3, [r3, #16]
   2bdd2:	212f      	movs	r1, #47	; 0x2f
   2bdd4:	187c      	adds	r4, r7, r1
   2bdd6:	0019      	movs	r1, r3
   2bdd8:	0010      	movs	r0, r2
   2bdda:	4b1c      	ldr	r3, [pc, #112]	; (2be4c <dir_register+0x354>)
   2bddc:	4798      	blx	r3
   2bdde:	0003      	movs	r3, r0
   2bde0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bde2:	232f      	movs	r3, #47	; 0x2f
   2bde4:	18fb      	adds	r3, r7, r3
   2bde6:	781b      	ldrb	r3, [r3, #0]
   2bde8:	2b00      	cmp	r3, #0
   2bdea:	d11e      	bne.n	2be2a <dir_register+0x332>
			dir = dj->dir;
   2bdec:	687b      	ldr	r3, [r7, #4]
   2bdee:	695b      	ldr	r3, [r3, #20]
   2bdf0:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2bdf2:	69bb      	ldr	r3, [r7, #24]
   2bdf4:	2220      	movs	r2, #32
   2bdf6:	2100      	movs	r1, #0
   2bdf8:	0018      	movs	r0, r3
   2bdfa:	4b18      	ldr	r3, [pc, #96]	; (2be5c <dir_register+0x364>)
   2bdfc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2bdfe:	687b      	ldr	r3, [r7, #4]
   2be00:	6999      	ldr	r1, [r3, #24]
   2be02:	69bb      	ldr	r3, [r7, #24]
   2be04:	220b      	movs	r2, #11
   2be06:	0018      	movs	r0, r3
   2be08:	4b0b      	ldr	r3, [pc, #44]	; (2be38 <dir_register+0x340>)
   2be0a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2be0c:	69bb      	ldr	r3, [r7, #24]
   2be0e:	330c      	adds	r3, #12
   2be10:	001a      	movs	r2, r3
   2be12:	687b      	ldr	r3, [r7, #4]
   2be14:	699b      	ldr	r3, [r3, #24]
   2be16:	330b      	adds	r3, #11
   2be18:	781b      	ldrb	r3, [r3, #0]
   2be1a:	2118      	movs	r1, #24
   2be1c:	400b      	ands	r3, r1
   2be1e:	b2db      	uxtb	r3, r3
   2be20:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2be22:	687b      	ldr	r3, [r7, #4]
   2be24:	681b      	ldr	r3, [r3, #0]
   2be26:	2201      	movs	r2, #1
   2be28:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2be2a:	232f      	movs	r3, #47	; 0x2f
   2be2c:	18fb      	adds	r3, r7, r3
   2be2e:	781b      	ldrb	r3, [r3, #0]
}
   2be30:	0018      	movs	r0, r3
   2be32:	46bd      	mov	sp, r7
   2be34:	b00d      	add	sp, #52	; 0x34
   2be36:	bd90      	pop	{r4, r7, pc}
   2be38:	0002a951 	.word	0x0002a951
   2be3c:	0002b7ad 	.word	0x0002b7ad
   2be40:	0002b8fd 	.word	0x0002b8fd
   2be44:	00031c69 	.word	0x00031c69
   2be48:	0002b279 	.word	0x0002b279
   2be4c:	0002aa35 	.word	0x0002aa35
   2be50:	0002b3a9 	.word	0x0002b3a9
   2be54:	0002b8ad 	.word	0x0002b8ad
   2be58:	0002b69d 	.word	0x0002b69d
   2be5c:	0002a989 	.word	0x0002a989

0002be60 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2be60:	b590      	push	{r4, r7, lr}
   2be62:	b08b      	sub	sp, #44	; 0x2c
   2be64:	af00      	add	r7, sp, #0
   2be66:	6078      	str	r0, [r7, #4]
   2be68:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2be6a:	683b      	ldr	r3, [r7, #0]
   2be6c:	681b      	ldr	r3, [r3, #0]
   2be6e:	613b      	str	r3, [r7, #16]
   2be70:	e002      	b.n	2be78 <create_name+0x18>
   2be72:	693b      	ldr	r3, [r7, #16]
   2be74:	3301      	adds	r3, #1
   2be76:	613b      	str	r3, [r7, #16]
   2be78:	693b      	ldr	r3, [r7, #16]
   2be7a:	781b      	ldrb	r3, [r3, #0]
   2be7c:	2b2f      	cmp	r3, #47	; 0x2f
   2be7e:	d0f8      	beq.n	2be72 <create_name+0x12>
   2be80:	693b      	ldr	r3, [r7, #16]
   2be82:	781b      	ldrb	r3, [r3, #0]
   2be84:	2b5c      	cmp	r3, #92	; 0x5c
   2be86:	d0f4      	beq.n	2be72 <create_name+0x12>
	lfn = dj->lfn;
   2be88:	687b      	ldr	r3, [r7, #4]
   2be8a:	69db      	ldr	r3, [r3, #28]
   2be8c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2be8e:	2300      	movs	r3, #0
   2be90:	617b      	str	r3, [r7, #20]
   2be92:	697b      	ldr	r3, [r7, #20]
   2be94:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2be96:	69bb      	ldr	r3, [r7, #24]
   2be98:	1c5a      	adds	r2, r3, #1
   2be9a:	61ba      	str	r2, [r7, #24]
   2be9c:	693a      	ldr	r2, [r7, #16]
   2be9e:	18d3      	adds	r3, r2, r3
   2bea0:	781a      	ldrb	r2, [r3, #0]
   2bea2:	2324      	movs	r3, #36	; 0x24
   2bea4:	18fb      	adds	r3, r7, r3
   2bea6:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2bea8:	2324      	movs	r3, #36	; 0x24
   2beaa:	18fb      	adds	r3, r7, r3
   2beac:	881b      	ldrh	r3, [r3, #0]
   2beae:	2b1f      	cmp	r3, #31
   2beb0:	d944      	bls.n	2bf3c <create_name+0xdc>
   2beb2:	2324      	movs	r3, #36	; 0x24
   2beb4:	18fb      	adds	r3, r7, r3
   2beb6:	881b      	ldrh	r3, [r3, #0]
   2beb8:	2b2f      	cmp	r3, #47	; 0x2f
   2beba:	d03f      	beq.n	2bf3c <create_name+0xdc>
   2bebc:	2324      	movs	r3, #36	; 0x24
   2bebe:	18fb      	adds	r3, r7, r3
   2bec0:	881b      	ldrh	r3, [r3, #0]
   2bec2:	2b5c      	cmp	r3, #92	; 0x5c
   2bec4:	d03a      	beq.n	2bf3c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2bec6:	697b      	ldr	r3, [r7, #20]
   2bec8:	2bfe      	cmp	r3, #254	; 0xfe
   2beca:	d901      	bls.n	2bed0 <create_name+0x70>
			return FR_INVALID_NAME;
   2becc:	2306      	movs	r3, #6
   2bece:	e1e7      	b.n	2c2a0 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2bed0:	2324      	movs	r3, #36	; 0x24
   2bed2:	18fb      	adds	r3, r7, r3
   2bed4:	2224      	movs	r2, #36	; 0x24
   2bed6:	18ba      	adds	r2, r7, r2
   2bed8:	8812      	ldrh	r2, [r2, #0]
   2beda:	21ff      	movs	r1, #255	; 0xff
   2bedc:	400a      	ands	r2, r1
   2bede:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2bee0:	2324      	movs	r3, #36	; 0x24
   2bee2:	18fc      	adds	r4, r7, r3
   2bee4:	2324      	movs	r3, #36	; 0x24
   2bee6:	18fb      	adds	r3, r7, r3
   2bee8:	881b      	ldrh	r3, [r3, #0]
   2beea:	2101      	movs	r1, #1
   2beec:	0018      	movs	r0, r3
   2beee:	4bba      	ldr	r3, [pc, #744]	; (2c1d8 <create_name+0x378>)
   2bef0:	4798      	blx	r3
   2bef2:	0003      	movs	r3, r0
   2bef4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2bef6:	2324      	movs	r3, #36	; 0x24
   2bef8:	18fb      	adds	r3, r7, r3
   2befa:	881b      	ldrh	r3, [r3, #0]
   2befc:	2b00      	cmp	r3, #0
   2befe:	d101      	bne.n	2bf04 <create_name+0xa4>
   2bf00:	2306      	movs	r3, #6
   2bf02:	e1cd      	b.n	2c2a0 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2bf04:	2324      	movs	r3, #36	; 0x24
   2bf06:	18fb      	adds	r3, r7, r3
   2bf08:	881b      	ldrh	r3, [r3, #0]
   2bf0a:	2b7f      	cmp	r3, #127	; 0x7f
   2bf0c:	d80b      	bhi.n	2bf26 <create_name+0xc6>
   2bf0e:	2324      	movs	r3, #36	; 0x24
   2bf10:	18fb      	adds	r3, r7, r3
   2bf12:	881a      	ldrh	r2, [r3, #0]
   2bf14:	4bb1      	ldr	r3, [pc, #708]	; (2c1dc <create_name+0x37c>)
   2bf16:	0011      	movs	r1, r2
   2bf18:	0018      	movs	r0, r3
   2bf1a:	4bb1      	ldr	r3, [pc, #708]	; (2c1e0 <create_name+0x380>)
   2bf1c:	4798      	blx	r3
   2bf1e:	1e03      	subs	r3, r0, #0
   2bf20:	d001      	beq.n	2bf26 <create_name+0xc6>
			return FR_INVALID_NAME;
   2bf22:	2306      	movs	r3, #6
   2bf24:	e1bc      	b.n	2c2a0 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2bf26:	697b      	ldr	r3, [r7, #20]
   2bf28:	1c5a      	adds	r2, r3, #1
   2bf2a:	617a      	str	r2, [r7, #20]
   2bf2c:	005b      	lsls	r3, r3, #1
   2bf2e:	68fa      	ldr	r2, [r7, #12]
   2bf30:	18d3      	adds	r3, r2, r3
   2bf32:	2224      	movs	r2, #36	; 0x24
   2bf34:	18ba      	adds	r2, r7, r2
   2bf36:	8812      	ldrh	r2, [r2, #0]
   2bf38:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2bf3a:	e7ac      	b.n	2be96 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2bf3c:	693a      	ldr	r2, [r7, #16]
   2bf3e:	69bb      	ldr	r3, [r7, #24]
   2bf40:	18d2      	adds	r2, r2, r3
   2bf42:	683b      	ldr	r3, [r7, #0]
   2bf44:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2bf46:	2324      	movs	r3, #36	; 0x24
   2bf48:	18fb      	adds	r3, r7, r3
   2bf4a:	881b      	ldrh	r3, [r3, #0]
   2bf4c:	2b1f      	cmp	r3, #31
   2bf4e:	d801      	bhi.n	2bf54 <create_name+0xf4>
   2bf50:	2204      	movs	r2, #4
   2bf52:	e000      	b.n	2bf56 <create_name+0xf6>
   2bf54:	2200      	movs	r2, #0
   2bf56:	2326      	movs	r3, #38	; 0x26
   2bf58:	18fb      	adds	r3, r7, r3
   2bf5a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2bf5c:	e017      	b.n	2bf8e <create_name+0x12e>
		w = lfn[di-1];
   2bf5e:	697b      	ldr	r3, [r7, #20]
   2bf60:	4aa0      	ldr	r2, [pc, #640]	; (2c1e4 <create_name+0x384>)
   2bf62:	4694      	mov	ip, r2
   2bf64:	4463      	add	r3, ip
   2bf66:	005b      	lsls	r3, r3, #1
   2bf68:	68fa      	ldr	r2, [r7, #12]
   2bf6a:	18d2      	adds	r2, r2, r3
   2bf6c:	2324      	movs	r3, #36	; 0x24
   2bf6e:	18fb      	adds	r3, r7, r3
   2bf70:	8812      	ldrh	r2, [r2, #0]
   2bf72:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2bf74:	2324      	movs	r3, #36	; 0x24
   2bf76:	18fb      	adds	r3, r7, r3
   2bf78:	881b      	ldrh	r3, [r3, #0]
   2bf7a:	2b20      	cmp	r3, #32
   2bf7c:	d004      	beq.n	2bf88 <create_name+0x128>
   2bf7e:	2324      	movs	r3, #36	; 0x24
   2bf80:	18fb      	adds	r3, r7, r3
   2bf82:	881b      	ldrh	r3, [r3, #0]
   2bf84:	2b2e      	cmp	r3, #46	; 0x2e
   2bf86:	d106      	bne.n	2bf96 <create_name+0x136>
		di--;
   2bf88:	697b      	ldr	r3, [r7, #20]
   2bf8a:	3b01      	subs	r3, #1
   2bf8c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2bf8e:	697b      	ldr	r3, [r7, #20]
   2bf90:	2b00      	cmp	r3, #0
   2bf92:	d1e4      	bne.n	2bf5e <create_name+0xfe>
   2bf94:	e000      	b.n	2bf98 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2bf96:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2bf98:	697b      	ldr	r3, [r7, #20]
   2bf9a:	2b00      	cmp	r3, #0
   2bf9c:	d101      	bne.n	2bfa2 <create_name+0x142>
   2bf9e:	2306      	movs	r3, #6
   2bfa0:	e17e      	b.n	2c2a0 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2bfa2:	697b      	ldr	r3, [r7, #20]
   2bfa4:	005b      	lsls	r3, r3, #1
   2bfa6:	68fa      	ldr	r2, [r7, #12]
   2bfa8:	18d3      	adds	r3, r2, r3
   2bfaa:	2200      	movs	r2, #0
   2bfac:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2bfae:	687b      	ldr	r3, [r7, #4]
   2bfb0:	699b      	ldr	r3, [r3, #24]
   2bfb2:	220b      	movs	r2, #11
   2bfb4:	2120      	movs	r1, #32
   2bfb6:	0018      	movs	r0, r3
   2bfb8:	4b8b      	ldr	r3, [pc, #556]	; (2c1e8 <create_name+0x388>)
   2bfba:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2bfbc:	2300      	movs	r3, #0
   2bfbe:	61bb      	str	r3, [r7, #24]
   2bfc0:	e002      	b.n	2bfc8 <create_name+0x168>
   2bfc2:	69bb      	ldr	r3, [r7, #24]
   2bfc4:	3301      	adds	r3, #1
   2bfc6:	61bb      	str	r3, [r7, #24]
   2bfc8:	69bb      	ldr	r3, [r7, #24]
   2bfca:	005b      	lsls	r3, r3, #1
   2bfcc:	68fa      	ldr	r2, [r7, #12]
   2bfce:	18d3      	adds	r3, r2, r3
   2bfd0:	881b      	ldrh	r3, [r3, #0]
   2bfd2:	2b20      	cmp	r3, #32
   2bfd4:	d0f5      	beq.n	2bfc2 <create_name+0x162>
   2bfd6:	69bb      	ldr	r3, [r7, #24]
   2bfd8:	005b      	lsls	r3, r3, #1
   2bfda:	68fa      	ldr	r2, [r7, #12]
   2bfdc:	18d3      	adds	r3, r2, r3
   2bfde:	881b      	ldrh	r3, [r3, #0]
   2bfe0:	2b2e      	cmp	r3, #46	; 0x2e
   2bfe2:	d0ee      	beq.n	2bfc2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2bfe4:	69bb      	ldr	r3, [r7, #24]
   2bfe6:	2b00      	cmp	r3, #0
   2bfe8:	d00b      	beq.n	2c002 <create_name+0x1a2>
   2bfea:	2326      	movs	r3, #38	; 0x26
   2bfec:	18fb      	adds	r3, r7, r3
   2bfee:	2226      	movs	r2, #38	; 0x26
   2bff0:	18ba      	adds	r2, r7, r2
   2bff2:	7812      	ldrb	r2, [r2, #0]
   2bff4:	2103      	movs	r1, #3
   2bff6:	430a      	orrs	r2, r1
   2bff8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2bffa:	e002      	b.n	2c002 <create_name+0x1a2>
   2bffc:	697b      	ldr	r3, [r7, #20]
   2bffe:	3b01      	subs	r3, #1
   2c000:	617b      	str	r3, [r7, #20]
   2c002:	697b      	ldr	r3, [r7, #20]
   2c004:	2b00      	cmp	r3, #0
   2c006:	d009      	beq.n	2c01c <create_name+0x1bc>
   2c008:	697b      	ldr	r3, [r7, #20]
   2c00a:	4a76      	ldr	r2, [pc, #472]	; (2c1e4 <create_name+0x384>)
   2c00c:	4694      	mov	ip, r2
   2c00e:	4463      	add	r3, ip
   2c010:	005b      	lsls	r3, r3, #1
   2c012:	68fa      	ldr	r2, [r7, #12]
   2c014:	18d3      	adds	r3, r2, r3
   2c016:	881b      	ldrh	r3, [r3, #0]
   2c018:	2b2e      	cmp	r3, #46	; 0x2e
   2c01a:	d1ef      	bne.n	2bffc <create_name+0x19c>

	b = i = 0; ni = 8;
   2c01c:	2300      	movs	r3, #0
   2c01e:	623b      	str	r3, [r7, #32]
   2c020:	2327      	movs	r3, #39	; 0x27
   2c022:	18fb      	adds	r3, r7, r3
   2c024:	2200      	movs	r2, #0
   2c026:	701a      	strb	r2, [r3, #0]
   2c028:	2308      	movs	r3, #8
   2c02a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c02c:	69bb      	ldr	r3, [r7, #24]
   2c02e:	1c5a      	adds	r2, r3, #1
   2c030:	61ba      	str	r2, [r7, #24]
   2c032:	005b      	lsls	r3, r3, #1
   2c034:	68fa      	ldr	r2, [r7, #12]
   2c036:	18d2      	adds	r2, r2, r3
   2c038:	2324      	movs	r3, #36	; 0x24
   2c03a:	18fb      	adds	r3, r7, r3
   2c03c:	8812      	ldrh	r2, [r2, #0]
   2c03e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c040:	2324      	movs	r3, #36	; 0x24
   2c042:	18fb      	adds	r3, r7, r3
   2c044:	881b      	ldrh	r3, [r3, #0]
   2c046:	2b00      	cmp	r3, #0
   2c048:	d100      	bne.n	2c04c <create_name+0x1ec>
   2c04a:	e0c3      	b.n	2c1d4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c04c:	2324      	movs	r3, #36	; 0x24
   2c04e:	18fb      	adds	r3, r7, r3
   2c050:	881b      	ldrh	r3, [r3, #0]
   2c052:	2b20      	cmp	r3, #32
   2c054:	d008      	beq.n	2c068 <create_name+0x208>
   2c056:	2324      	movs	r3, #36	; 0x24
   2c058:	18fb      	adds	r3, r7, r3
   2c05a:	881b      	ldrh	r3, [r3, #0]
   2c05c:	2b2e      	cmp	r3, #46	; 0x2e
   2c05e:	d10c      	bne.n	2c07a <create_name+0x21a>
   2c060:	69ba      	ldr	r2, [r7, #24]
   2c062:	697b      	ldr	r3, [r7, #20]
   2c064:	429a      	cmp	r2, r3
   2c066:	d008      	beq.n	2c07a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c068:	2326      	movs	r3, #38	; 0x26
   2c06a:	18fb      	adds	r3, r7, r3
   2c06c:	2226      	movs	r2, #38	; 0x26
   2c06e:	18ba      	adds	r2, r7, r2
   2c070:	7812      	ldrb	r2, [r2, #0]
   2c072:	2103      	movs	r1, #3
   2c074:	430a      	orrs	r2, r1
   2c076:	701a      	strb	r2, [r3, #0]
   2c078:	e0ab      	b.n	2c1d2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c07a:	6a3a      	ldr	r2, [r7, #32]
   2c07c:	69fb      	ldr	r3, [r7, #28]
   2c07e:	429a      	cmp	r2, r3
   2c080:	d203      	bcs.n	2c08a <create_name+0x22a>
   2c082:	69ba      	ldr	r2, [r7, #24]
   2c084:	697b      	ldr	r3, [r7, #20]
   2c086:	429a      	cmp	r2, r3
   2c088:	d12a      	bne.n	2c0e0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c08a:	69fb      	ldr	r3, [r7, #28]
   2c08c:	2b0b      	cmp	r3, #11
   2c08e:	d108      	bne.n	2c0a2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c090:	2326      	movs	r3, #38	; 0x26
   2c092:	18fb      	adds	r3, r7, r3
   2c094:	2226      	movs	r2, #38	; 0x26
   2c096:	18ba      	adds	r2, r7, r2
   2c098:	7812      	ldrb	r2, [r2, #0]
   2c09a:	2103      	movs	r1, #3
   2c09c:	430a      	orrs	r2, r1
   2c09e:	701a      	strb	r2, [r3, #0]
   2c0a0:	e0a9      	b.n	2c1f6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c0a2:	69ba      	ldr	r2, [r7, #24]
   2c0a4:	697b      	ldr	r3, [r7, #20]
   2c0a6:	429a      	cmp	r2, r3
   2c0a8:	d007      	beq.n	2c0ba <create_name+0x25a>
   2c0aa:	2326      	movs	r3, #38	; 0x26
   2c0ac:	18fb      	adds	r3, r7, r3
   2c0ae:	2226      	movs	r2, #38	; 0x26
   2c0b0:	18ba      	adds	r2, r7, r2
   2c0b2:	7812      	ldrb	r2, [r2, #0]
   2c0b4:	2103      	movs	r1, #3
   2c0b6:	430a      	orrs	r2, r1
   2c0b8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c0ba:	69ba      	ldr	r2, [r7, #24]
   2c0bc:	697b      	ldr	r3, [r7, #20]
   2c0be:	429a      	cmp	r2, r3
   2c0c0:	d900      	bls.n	2c0c4 <create_name+0x264>
   2c0c2:	e097      	b.n	2c1f4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c0c4:	697b      	ldr	r3, [r7, #20]
   2c0c6:	61bb      	str	r3, [r7, #24]
   2c0c8:	2308      	movs	r3, #8
   2c0ca:	623b      	str	r3, [r7, #32]
   2c0cc:	230b      	movs	r3, #11
   2c0ce:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c0d0:	2327      	movs	r3, #39	; 0x27
   2c0d2:	18fb      	adds	r3, r7, r3
   2c0d4:	2227      	movs	r2, #39	; 0x27
   2c0d6:	18ba      	adds	r2, r7, r2
   2c0d8:	7812      	ldrb	r2, [r2, #0]
   2c0da:	0092      	lsls	r2, r2, #2
   2c0dc:	701a      	strb	r2, [r3, #0]
   2c0de:	e078      	b.n	2c1d2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c0e0:	2324      	movs	r3, #36	; 0x24
   2c0e2:	18fb      	adds	r3, r7, r3
   2c0e4:	881b      	ldrh	r3, [r3, #0]
   2c0e6:	2b7f      	cmp	r3, #127	; 0x7f
   2c0e8:	d920      	bls.n	2c12c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c0ea:	2324      	movs	r3, #36	; 0x24
   2c0ec:	18fc      	adds	r4, r7, r3
   2c0ee:	2324      	movs	r3, #36	; 0x24
   2c0f0:	18fb      	adds	r3, r7, r3
   2c0f2:	881b      	ldrh	r3, [r3, #0]
   2c0f4:	2100      	movs	r1, #0
   2c0f6:	0018      	movs	r0, r3
   2c0f8:	4b37      	ldr	r3, [pc, #220]	; (2c1d8 <create_name+0x378>)
   2c0fa:	4798      	blx	r3
   2c0fc:	0003      	movs	r3, r0
   2c0fe:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c100:	2324      	movs	r3, #36	; 0x24
   2c102:	18fb      	adds	r3, r7, r3
   2c104:	881b      	ldrh	r3, [r3, #0]
   2c106:	2b00      	cmp	r3, #0
   2c108:	d008      	beq.n	2c11c <create_name+0x2bc>
   2c10a:	2324      	movs	r3, #36	; 0x24
   2c10c:	18fb      	adds	r3, r7, r3
   2c10e:	881b      	ldrh	r3, [r3, #0]
   2c110:	3b80      	subs	r3, #128	; 0x80
   2c112:	4a36      	ldr	r2, [pc, #216]	; (2c1ec <create_name+0x38c>)
   2c114:	5cd2      	ldrb	r2, [r2, r3]
   2c116:	2324      	movs	r3, #36	; 0x24
   2c118:	18fb      	adds	r3, r7, r3
   2c11a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c11c:	2326      	movs	r3, #38	; 0x26
   2c11e:	18fb      	adds	r3, r7, r3
   2c120:	2226      	movs	r2, #38	; 0x26
   2c122:	18ba      	adds	r2, r7, r2
   2c124:	7812      	ldrb	r2, [r2, #0]
   2c126:	2102      	movs	r1, #2
   2c128:	430a      	orrs	r2, r1
   2c12a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c12c:	2324      	movs	r3, #36	; 0x24
   2c12e:	18fb      	adds	r3, r7, r3
   2c130:	881b      	ldrh	r3, [r3, #0]
   2c132:	2b00      	cmp	r3, #0
   2c134:	d009      	beq.n	2c14a <create_name+0x2ea>
   2c136:	2324      	movs	r3, #36	; 0x24
   2c138:	18fb      	adds	r3, r7, r3
   2c13a:	881a      	ldrh	r2, [r3, #0]
   2c13c:	4b2c      	ldr	r3, [pc, #176]	; (2c1f0 <create_name+0x390>)
   2c13e:	0011      	movs	r1, r2
   2c140:	0018      	movs	r0, r3
   2c142:	4b27      	ldr	r3, [pc, #156]	; (2c1e0 <create_name+0x380>)
   2c144:	4798      	blx	r3
   2c146:	1e03      	subs	r3, r0, #0
   2c148:	d00c      	beq.n	2c164 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c14a:	2324      	movs	r3, #36	; 0x24
   2c14c:	18fb      	adds	r3, r7, r3
   2c14e:	225f      	movs	r2, #95	; 0x5f
   2c150:	801a      	strh	r2, [r3, #0]
   2c152:	2326      	movs	r3, #38	; 0x26
   2c154:	18fb      	adds	r3, r7, r3
   2c156:	2226      	movs	r2, #38	; 0x26
   2c158:	18ba      	adds	r2, r7, r2
   2c15a:	7812      	ldrb	r2, [r2, #0]
   2c15c:	2103      	movs	r1, #3
   2c15e:	430a      	orrs	r2, r1
   2c160:	701a      	strb	r2, [r3, #0]
   2c162:	e02b      	b.n	2c1bc <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c164:	2324      	movs	r3, #36	; 0x24
   2c166:	18fb      	adds	r3, r7, r3
   2c168:	881b      	ldrh	r3, [r3, #0]
   2c16a:	2b40      	cmp	r3, #64	; 0x40
   2c16c:	d90d      	bls.n	2c18a <create_name+0x32a>
   2c16e:	2324      	movs	r3, #36	; 0x24
   2c170:	18fb      	adds	r3, r7, r3
   2c172:	881b      	ldrh	r3, [r3, #0]
   2c174:	2b5a      	cmp	r3, #90	; 0x5a
   2c176:	d808      	bhi.n	2c18a <create_name+0x32a>
					b |= 2;
   2c178:	2327      	movs	r3, #39	; 0x27
   2c17a:	18fb      	adds	r3, r7, r3
   2c17c:	2227      	movs	r2, #39	; 0x27
   2c17e:	18ba      	adds	r2, r7, r2
   2c180:	7812      	ldrb	r2, [r2, #0]
   2c182:	2102      	movs	r1, #2
   2c184:	430a      	orrs	r2, r1
   2c186:	701a      	strb	r2, [r3, #0]
   2c188:	e018      	b.n	2c1bc <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c18a:	2324      	movs	r3, #36	; 0x24
   2c18c:	18fb      	adds	r3, r7, r3
   2c18e:	881b      	ldrh	r3, [r3, #0]
   2c190:	2b60      	cmp	r3, #96	; 0x60
   2c192:	d913      	bls.n	2c1bc <create_name+0x35c>
   2c194:	2324      	movs	r3, #36	; 0x24
   2c196:	18fb      	adds	r3, r7, r3
   2c198:	881b      	ldrh	r3, [r3, #0]
   2c19a:	2b7a      	cmp	r3, #122	; 0x7a
   2c19c:	d80e      	bhi.n	2c1bc <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c19e:	2327      	movs	r3, #39	; 0x27
   2c1a0:	18fb      	adds	r3, r7, r3
   2c1a2:	2227      	movs	r2, #39	; 0x27
   2c1a4:	18ba      	adds	r2, r7, r2
   2c1a6:	7812      	ldrb	r2, [r2, #0]
   2c1a8:	2101      	movs	r1, #1
   2c1aa:	430a      	orrs	r2, r1
   2c1ac:	701a      	strb	r2, [r3, #0]
   2c1ae:	2324      	movs	r3, #36	; 0x24
   2c1b0:	18fb      	adds	r3, r7, r3
   2c1b2:	2224      	movs	r2, #36	; 0x24
   2c1b4:	18ba      	adds	r2, r7, r2
   2c1b6:	8812      	ldrh	r2, [r2, #0]
   2c1b8:	3a20      	subs	r2, #32
   2c1ba:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c1bc:	687b      	ldr	r3, [r7, #4]
   2c1be:	699a      	ldr	r2, [r3, #24]
   2c1c0:	6a3b      	ldr	r3, [r7, #32]
   2c1c2:	1c59      	adds	r1, r3, #1
   2c1c4:	6239      	str	r1, [r7, #32]
   2c1c6:	18d3      	adds	r3, r2, r3
   2c1c8:	2224      	movs	r2, #36	; 0x24
   2c1ca:	18ba      	adds	r2, r7, r2
   2c1cc:	8812      	ldrh	r2, [r2, #0]
   2c1ce:	b2d2      	uxtb	r2, r2
   2c1d0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c1d2:	e72b      	b.n	2c02c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c1d4:	46c0      	nop			; (mov r8, r8)
   2c1d6:	e00e      	b.n	2c1f6 <create_name+0x396>
   2c1d8:	0002d599 	.word	0x0002d599
   2c1dc:	00039088 	.word	0x00039088
   2c1e0:	0002aa03 	.word	0x0002aa03
   2c1e4:	7fffffff 	.word	0x7fffffff
   2c1e8:	0002a989 	.word	0x0002a989
   2c1ec:	000390d0 	.word	0x000390d0
   2c1f0:	00039094 	.word	0x00039094
			if (si > di) break;			/* No extension */
   2c1f4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c1f6:	687b      	ldr	r3, [r7, #4]
   2c1f8:	699b      	ldr	r3, [r3, #24]
   2c1fa:	781b      	ldrb	r3, [r3, #0]
   2c1fc:	2be5      	cmp	r3, #229	; 0xe5
   2c1fe:	d103      	bne.n	2c208 <create_name+0x3a8>
   2c200:	687b      	ldr	r3, [r7, #4]
   2c202:	699b      	ldr	r3, [r3, #24]
   2c204:	2205      	movs	r2, #5
   2c206:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c208:	69fb      	ldr	r3, [r7, #28]
   2c20a:	2b08      	cmp	r3, #8
   2c20c:	d106      	bne.n	2c21c <create_name+0x3bc>
   2c20e:	2327      	movs	r3, #39	; 0x27
   2c210:	18fb      	adds	r3, r7, r3
   2c212:	2227      	movs	r2, #39	; 0x27
   2c214:	18ba      	adds	r2, r7, r2
   2c216:	7812      	ldrb	r2, [r2, #0]
   2c218:	0092      	lsls	r2, r2, #2
   2c21a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c21c:	2327      	movs	r3, #39	; 0x27
   2c21e:	18fb      	adds	r3, r7, r3
   2c220:	781b      	ldrb	r3, [r3, #0]
   2c222:	220c      	movs	r2, #12
   2c224:	4013      	ands	r3, r2
   2c226:	2b0c      	cmp	r3, #12
   2c228:	d006      	beq.n	2c238 <create_name+0x3d8>
   2c22a:	2327      	movs	r3, #39	; 0x27
   2c22c:	18fb      	adds	r3, r7, r3
   2c22e:	781b      	ldrb	r3, [r3, #0]
   2c230:	2203      	movs	r2, #3
   2c232:	4013      	ands	r3, r2
   2c234:	2b03      	cmp	r3, #3
   2c236:	d107      	bne.n	2c248 <create_name+0x3e8>
		cf |= NS_LFN;
   2c238:	2326      	movs	r3, #38	; 0x26
   2c23a:	18fb      	adds	r3, r7, r3
   2c23c:	2226      	movs	r2, #38	; 0x26
   2c23e:	18ba      	adds	r2, r7, r2
   2c240:	7812      	ldrb	r2, [r2, #0]
   2c242:	2102      	movs	r1, #2
   2c244:	430a      	orrs	r2, r1
   2c246:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c248:	2326      	movs	r3, #38	; 0x26
   2c24a:	18fb      	adds	r3, r7, r3
   2c24c:	781b      	ldrb	r3, [r3, #0]
   2c24e:	2202      	movs	r2, #2
   2c250:	4013      	ands	r3, r2
   2c252:	d11d      	bne.n	2c290 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c254:	2327      	movs	r3, #39	; 0x27
   2c256:	18fb      	adds	r3, r7, r3
   2c258:	781b      	ldrb	r3, [r3, #0]
   2c25a:	2203      	movs	r2, #3
   2c25c:	4013      	ands	r3, r2
   2c25e:	2b01      	cmp	r3, #1
   2c260:	d107      	bne.n	2c272 <create_name+0x412>
   2c262:	2326      	movs	r3, #38	; 0x26
   2c264:	18fb      	adds	r3, r7, r3
   2c266:	2226      	movs	r2, #38	; 0x26
   2c268:	18ba      	adds	r2, r7, r2
   2c26a:	7812      	ldrb	r2, [r2, #0]
   2c26c:	2110      	movs	r1, #16
   2c26e:	430a      	orrs	r2, r1
   2c270:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2c272:	2327      	movs	r3, #39	; 0x27
   2c274:	18fb      	adds	r3, r7, r3
   2c276:	781b      	ldrb	r3, [r3, #0]
   2c278:	220c      	movs	r2, #12
   2c27a:	4013      	ands	r3, r2
   2c27c:	2b04      	cmp	r3, #4
   2c27e:	d107      	bne.n	2c290 <create_name+0x430>
   2c280:	2326      	movs	r3, #38	; 0x26
   2c282:	18fb      	adds	r3, r7, r3
   2c284:	2226      	movs	r2, #38	; 0x26
   2c286:	18ba      	adds	r2, r7, r2
   2c288:	7812      	ldrb	r2, [r2, #0]
   2c28a:	2108      	movs	r1, #8
   2c28c:	430a      	orrs	r2, r1
   2c28e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2c290:	687b      	ldr	r3, [r7, #4]
   2c292:	699b      	ldr	r3, [r3, #24]
   2c294:	330b      	adds	r3, #11
   2c296:	2226      	movs	r2, #38	; 0x26
   2c298:	18ba      	adds	r2, r7, r2
   2c29a:	7812      	ldrb	r2, [r2, #0]
   2c29c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2c29e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2c2a0:	0018      	movs	r0, r3
   2c2a2:	46bd      	mov	sp, r7
   2c2a4:	b00b      	add	sp, #44	; 0x2c
   2c2a6:	bd90      	pop	{r4, r7, pc}

0002c2a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2c2a8:	b590      	push	{r4, r7, lr}
   2c2aa:	b085      	sub	sp, #20
   2c2ac:	af00      	add	r7, sp, #0
   2c2ae:	6078      	str	r0, [r7, #4]
   2c2b0:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2c2b2:	683b      	ldr	r3, [r7, #0]
   2c2b4:	781b      	ldrb	r3, [r3, #0]
   2c2b6:	2b2f      	cmp	r3, #47	; 0x2f
   2c2b8:	d003      	beq.n	2c2c2 <follow_path+0x1a>
   2c2ba:	683b      	ldr	r3, [r7, #0]
   2c2bc:	781b      	ldrb	r3, [r3, #0]
   2c2be:	2b5c      	cmp	r3, #92	; 0x5c
   2c2c0:	d102      	bne.n	2c2c8 <follow_path+0x20>
		path++;
   2c2c2:	683b      	ldr	r3, [r7, #0]
   2c2c4:	3301      	adds	r3, #1
   2c2c6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2c2c8:	687b      	ldr	r3, [r7, #4]
   2c2ca:	2200      	movs	r2, #0
   2c2cc:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2c2ce:	683b      	ldr	r3, [r7, #0]
   2c2d0:	781b      	ldrb	r3, [r3, #0]
   2c2d2:	2b1f      	cmp	r3, #31
   2c2d4:	d80c      	bhi.n	2c2f0 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2c2d6:	230f      	movs	r3, #15
   2c2d8:	18fc      	adds	r4, r7, r3
   2c2da:	687b      	ldr	r3, [r7, #4]
   2c2dc:	2100      	movs	r1, #0
   2c2de:	0018      	movs	r0, r3
   2c2e0:	4b3c      	ldr	r3, [pc, #240]	; (2c3d4 <follow_path+0x12c>)
   2c2e2:	4798      	blx	r3
   2c2e4:	0003      	movs	r3, r0
   2c2e6:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2c2e8:	687b      	ldr	r3, [r7, #4]
   2c2ea:	2200      	movs	r2, #0
   2c2ec:	615a      	str	r2, [r3, #20]
   2c2ee:	e06a      	b.n	2c3c6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2c2f0:	230f      	movs	r3, #15
   2c2f2:	18fc      	adds	r4, r7, r3
   2c2f4:	003a      	movs	r2, r7
   2c2f6:	687b      	ldr	r3, [r7, #4]
   2c2f8:	0011      	movs	r1, r2
   2c2fa:	0018      	movs	r0, r3
   2c2fc:	4b36      	ldr	r3, [pc, #216]	; (2c3d8 <follow_path+0x130>)
   2c2fe:	4798      	blx	r3
   2c300:	0003      	movs	r3, r0
   2c302:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c304:	230f      	movs	r3, #15
   2c306:	18fb      	adds	r3, r7, r3
   2c308:	781b      	ldrb	r3, [r3, #0]
   2c30a:	2b00      	cmp	r3, #0
   2c30c:	d154      	bne.n	2c3b8 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2c30e:	230f      	movs	r3, #15
   2c310:	18fc      	adds	r4, r7, r3
   2c312:	687b      	ldr	r3, [r7, #4]
   2c314:	0018      	movs	r0, r3
   2c316:	4b31      	ldr	r3, [pc, #196]	; (2c3dc <follow_path+0x134>)
   2c318:	4798      	blx	r3
   2c31a:	0003      	movs	r3, r0
   2c31c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2c31e:	687b      	ldr	r3, [r7, #4]
   2c320:	699a      	ldr	r2, [r3, #24]
   2c322:	230e      	movs	r3, #14
   2c324:	18fb      	adds	r3, r7, r3
   2c326:	7ad2      	ldrb	r2, [r2, #11]
   2c328:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2c32a:	230f      	movs	r3, #15
   2c32c:	18fb      	adds	r3, r7, r3
   2c32e:	781b      	ldrb	r3, [r3, #0]
   2c330:	2b00      	cmp	r3, #0
   2c332:	d00f      	beq.n	2c354 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c334:	230f      	movs	r3, #15
   2c336:	18fb      	adds	r3, r7, r3
   2c338:	781b      	ldrb	r3, [r3, #0]
   2c33a:	2b04      	cmp	r3, #4
   2c33c:	d13e      	bne.n	2c3bc <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2c33e:	230e      	movs	r3, #14
   2c340:	18fb      	adds	r3, r7, r3
   2c342:	781b      	ldrb	r3, [r3, #0]
   2c344:	2204      	movs	r2, #4
   2c346:	4013      	ands	r3, r2
   2c348:	d13a      	bne.n	2c3c0 <follow_path+0x118>
   2c34a:	230f      	movs	r3, #15
   2c34c:	18fb      	adds	r3, r7, r3
   2c34e:	2205      	movs	r2, #5
   2c350:	701a      	strb	r2, [r3, #0]
				}
				break;
   2c352:	e035      	b.n	2c3c0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c354:	230e      	movs	r3, #14
   2c356:	18fb      	adds	r3, r7, r3
   2c358:	781b      	ldrb	r3, [r3, #0]
   2c35a:	2204      	movs	r2, #4
   2c35c:	4013      	ands	r3, r2
   2c35e:	d131      	bne.n	2c3c4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2c360:	687b      	ldr	r3, [r7, #4]
   2c362:	695b      	ldr	r3, [r3, #20]
   2c364:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2c366:	68bb      	ldr	r3, [r7, #8]
   2c368:	330b      	adds	r3, #11
   2c36a:	781b      	ldrb	r3, [r3, #0]
   2c36c:	001a      	movs	r2, r3
   2c36e:	2310      	movs	r3, #16
   2c370:	4013      	ands	r3, r2
   2c372:	d104      	bne.n	2c37e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2c374:	230f      	movs	r3, #15
   2c376:	18fb      	adds	r3, r7, r3
   2c378:	2205      	movs	r2, #5
   2c37a:	701a      	strb	r2, [r3, #0]
   2c37c:	e023      	b.n	2c3c6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2c37e:	68bb      	ldr	r3, [r7, #8]
   2c380:	3315      	adds	r3, #21
   2c382:	781b      	ldrb	r3, [r3, #0]
   2c384:	021b      	lsls	r3, r3, #8
   2c386:	b21a      	sxth	r2, r3
   2c388:	68bb      	ldr	r3, [r7, #8]
   2c38a:	3314      	adds	r3, #20
   2c38c:	781b      	ldrb	r3, [r3, #0]
   2c38e:	b21b      	sxth	r3, r3
   2c390:	4313      	orrs	r3, r2
   2c392:	b21b      	sxth	r3, r3
   2c394:	b29b      	uxth	r3, r3
   2c396:	041b      	lsls	r3, r3, #16
   2c398:	68ba      	ldr	r2, [r7, #8]
   2c39a:	321b      	adds	r2, #27
   2c39c:	7812      	ldrb	r2, [r2, #0]
   2c39e:	0212      	lsls	r2, r2, #8
   2c3a0:	b211      	sxth	r1, r2
   2c3a2:	68ba      	ldr	r2, [r7, #8]
   2c3a4:	321a      	adds	r2, #26
   2c3a6:	7812      	ldrb	r2, [r2, #0]
   2c3a8:	b212      	sxth	r2, r2
   2c3aa:	430a      	orrs	r2, r1
   2c3ac:	b212      	sxth	r2, r2
   2c3ae:	b292      	uxth	r2, r2
   2c3b0:	431a      	orrs	r2, r3
   2c3b2:	687b      	ldr	r3, [r7, #4]
   2c3b4:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2c3b6:	e79b      	b.n	2c2f0 <follow_path+0x48>
			if (res != FR_OK) break;
   2c3b8:	46c0      	nop			; (mov r8, r8)
   2c3ba:	e004      	b.n	2c3c6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c3bc:	46c0      	nop			; (mov r8, r8)
   2c3be:	e002      	b.n	2c3c6 <follow_path+0x11e>
				break;
   2c3c0:	46c0      	nop			; (mov r8, r8)
   2c3c2:	e000      	b.n	2c3c6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c3c4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c3c6:	230f      	movs	r3, #15
   2c3c8:	18fb      	adds	r3, r7, r3
   2c3ca:	781b      	ldrb	r3, [r3, #0]
}
   2c3cc:	0018      	movs	r0, r3
   2c3ce:	46bd      	mov	sp, r7
   2c3d0:	b005      	add	sp, #20
   2c3d2:	bd90      	pop	{r4, r7, pc}
   2c3d4:	0002b279 	.word	0x0002b279
   2c3d8:	0002be61 	.word	0x0002be61
   2c3dc:	0002b8fd 	.word	0x0002b8fd

0002c3e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2c3e0:	b590      	push	{r4, r7, lr}
   2c3e2:	b083      	sub	sp, #12
   2c3e4:	af00      	add	r7, sp, #0
   2c3e6:	6078      	str	r0, [r7, #4]
   2c3e8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2c3ea:	687b      	ldr	r3, [r7, #4]
   2c3ec:	7858      	ldrb	r0, [r3, #1]
   2c3ee:	687b      	ldr	r3, [r7, #4]
   2c3f0:	3330      	adds	r3, #48	; 0x30
   2c3f2:	0019      	movs	r1, r3
   2c3f4:	683a      	ldr	r2, [r7, #0]
   2c3f6:	2301      	movs	r3, #1
   2c3f8:	4c2a      	ldr	r4, [pc, #168]	; (2c4a4 <check_fs+0xc4>)
   2c3fa:	47a0      	blx	r4
   2c3fc:	1e03      	subs	r3, r0, #0
   2c3fe:	d001      	beq.n	2c404 <check_fs+0x24>
		return 3;
   2c400:	2303      	movs	r3, #3
   2c402:	e04b      	b.n	2c49c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2c404:	687b      	ldr	r3, [r7, #4]
   2c406:	4a28      	ldr	r2, [pc, #160]	; (2c4a8 <check_fs+0xc8>)
   2c408:	4694      	mov	ip, r2
   2c40a:	4463      	add	r3, ip
   2c40c:	3301      	adds	r3, #1
   2c40e:	781b      	ldrb	r3, [r3, #0]
   2c410:	021b      	lsls	r3, r3, #8
   2c412:	b21a      	sxth	r2, r3
   2c414:	687b      	ldr	r3, [r7, #4]
   2c416:	4924      	ldr	r1, [pc, #144]	; (2c4a8 <check_fs+0xc8>)
   2c418:	5c5b      	ldrb	r3, [r3, r1]
   2c41a:	b21b      	sxth	r3, r3
   2c41c:	4313      	orrs	r3, r2
   2c41e:	b21b      	sxth	r3, r3
   2c420:	4a22      	ldr	r2, [pc, #136]	; (2c4ac <check_fs+0xcc>)
   2c422:	4293      	cmp	r3, r2
   2c424:	d001      	beq.n	2c42a <check_fs+0x4a>
		return 2;
   2c426:	2302      	movs	r3, #2
   2c428:	e038      	b.n	2c49c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2c42a:	687b      	ldr	r3, [r7, #4]
   2c42c:	3366      	adds	r3, #102	; 0x66
   2c42e:	3303      	adds	r3, #3
   2c430:	781b      	ldrb	r3, [r3, #0]
   2c432:	061a      	lsls	r2, r3, #24
   2c434:	687b      	ldr	r3, [r7, #4]
   2c436:	3366      	adds	r3, #102	; 0x66
   2c438:	3302      	adds	r3, #2
   2c43a:	781b      	ldrb	r3, [r3, #0]
   2c43c:	041b      	lsls	r3, r3, #16
   2c43e:	4313      	orrs	r3, r2
   2c440:	687a      	ldr	r2, [r7, #4]
   2c442:	3266      	adds	r2, #102	; 0x66
   2c444:	3201      	adds	r2, #1
   2c446:	7812      	ldrb	r2, [r2, #0]
   2c448:	0212      	lsls	r2, r2, #8
   2c44a:	4313      	orrs	r3, r2
   2c44c:	687a      	ldr	r2, [r7, #4]
   2c44e:	2166      	movs	r1, #102	; 0x66
   2c450:	5c52      	ldrb	r2, [r2, r1]
   2c452:	4313      	orrs	r3, r2
   2c454:	021b      	lsls	r3, r3, #8
   2c456:	0a1b      	lsrs	r3, r3, #8
   2c458:	4a15      	ldr	r2, [pc, #84]	; (2c4b0 <check_fs+0xd0>)
   2c45a:	4293      	cmp	r3, r2
   2c45c:	d101      	bne.n	2c462 <check_fs+0x82>
		return 0;
   2c45e:	2300      	movs	r3, #0
   2c460:	e01c      	b.n	2c49c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2c462:	687b      	ldr	r3, [r7, #4]
   2c464:	3382      	adds	r3, #130	; 0x82
   2c466:	3303      	adds	r3, #3
   2c468:	781b      	ldrb	r3, [r3, #0]
   2c46a:	061a      	lsls	r2, r3, #24
   2c46c:	687b      	ldr	r3, [r7, #4]
   2c46e:	3382      	adds	r3, #130	; 0x82
   2c470:	3302      	adds	r3, #2
   2c472:	781b      	ldrb	r3, [r3, #0]
   2c474:	041b      	lsls	r3, r3, #16
   2c476:	4313      	orrs	r3, r2
   2c478:	687a      	ldr	r2, [r7, #4]
   2c47a:	3282      	adds	r2, #130	; 0x82
   2c47c:	3201      	adds	r2, #1
   2c47e:	7812      	ldrb	r2, [r2, #0]
   2c480:	0212      	lsls	r2, r2, #8
   2c482:	4313      	orrs	r3, r2
   2c484:	687a      	ldr	r2, [r7, #4]
   2c486:	2182      	movs	r1, #130	; 0x82
   2c488:	5c52      	ldrb	r2, [r2, r1]
   2c48a:	4313      	orrs	r3, r2
   2c48c:	021b      	lsls	r3, r3, #8
   2c48e:	0a1b      	lsrs	r3, r3, #8
   2c490:	4a07      	ldr	r2, [pc, #28]	; (2c4b0 <check_fs+0xd0>)
   2c492:	4293      	cmp	r3, r2
   2c494:	d101      	bne.n	2c49a <check_fs+0xba>
		return 0;
   2c496:	2300      	movs	r3, #0
   2c498:	e000      	b.n	2c49c <check_fs+0xbc>

	return 1;
   2c49a:	2301      	movs	r3, #1
}
   2c49c:	0018      	movs	r0, r3
   2c49e:	46bd      	mov	sp, r7
   2c4a0:	b003      	add	sp, #12
   2c4a2:	bd90      	pop	{r4, r7, pc}
   2c4a4:	0002a649 	.word	0x0002a649
   2c4a8:	0000022e 	.word	0x0000022e
   2c4ac:	ffffaa55 	.word	0xffffaa55
   2c4b0:	00544146 	.word	0x00544146

0002c4b4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2c4b4:	b590      	push	{r4, r7, lr}
   2c4b6:	b093      	sub	sp, #76	; 0x4c
   2c4b8:	af00      	add	r7, sp, #0
   2c4ba:	60f8      	str	r0, [r7, #12]
   2c4bc:	60b9      	str	r1, [r7, #8]
   2c4be:	1dfb      	adds	r3, r7, #7
   2c4c0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2c4c2:	68fb      	ldr	r3, [r7, #12]
   2c4c4:	681b      	ldr	r3, [r3, #0]
   2c4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2c4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c4ca:	781b      	ldrb	r3, [r3, #0]
   2c4cc:	3b30      	subs	r3, #48	; 0x30
   2c4ce:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2c4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c4d2:	2b09      	cmp	r3, #9
   2c4d4:	d80b      	bhi.n	2c4ee <chk_mounted+0x3a>
   2c4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c4d8:	3301      	adds	r3, #1
   2c4da:	781b      	ldrb	r3, [r3, #0]
   2c4dc:	2b3a      	cmp	r3, #58	; 0x3a
   2c4de:	d106      	bne.n	2c4ee <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c4e2:	3302      	adds	r3, #2
   2c4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   2c4e6:	68fb      	ldr	r3, [r7, #12]
   2c4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2c4ea:	601a      	str	r2, [r3, #0]
   2c4ec:	e001      	b.n	2c4f2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2c4ee:	2300      	movs	r3, #0
   2c4f0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2c4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c4f4:	2b07      	cmp	r3, #7
   2c4f6:	d901      	bls.n	2c4fc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2c4f8:	230b      	movs	r3, #11
   2c4fa:	e2af      	b.n	2ca5c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2c4fc:	4bc5      	ldr	r3, [pc, #788]	; (2c814 <chk_mounted+0x360>)
   2c4fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2c500:	0092      	lsls	r2, r2, #2
   2c502:	58d3      	ldr	r3, [r2, r3]
   2c504:	62bb      	str	r3, [r7, #40]	; 0x28
   2c506:	68bb      	ldr	r3, [r7, #8]
   2c508:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c50a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c50e:	2b00      	cmp	r3, #0
   2c510:	d101      	bne.n	2c516 <chk_mounted+0x62>
   2c512:	230c      	movs	r3, #12
   2c514:	e2a2      	b.n	2ca5c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c518:	781b      	ldrb	r3, [r3, #0]
   2c51a:	2b00      	cmp	r3, #0
   2c51c:	d01c      	beq.n	2c558 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2c51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c520:	785b      	ldrb	r3, [r3, #1]
   2c522:	2227      	movs	r2, #39	; 0x27
   2c524:	18bc      	adds	r4, r7, r2
   2c526:	0018      	movs	r0, r3
   2c528:	4bbb      	ldr	r3, [pc, #748]	; (2c818 <chk_mounted+0x364>)
   2c52a:	4798      	blx	r3
   2c52c:	0003      	movs	r3, r0
   2c52e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2c530:	2327      	movs	r3, #39	; 0x27
   2c532:	18fb      	adds	r3, r7, r3
   2c534:	781b      	ldrb	r3, [r3, #0]
   2c536:	2201      	movs	r2, #1
   2c538:	4013      	ands	r3, r2
   2c53a:	d10d      	bne.n	2c558 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2c53c:	1dfb      	adds	r3, r7, #7
   2c53e:	781b      	ldrb	r3, [r3, #0]
   2c540:	2b00      	cmp	r3, #0
   2c542:	d007      	beq.n	2c554 <chk_mounted+0xa0>
   2c544:	2327      	movs	r3, #39	; 0x27
   2c546:	18fb      	adds	r3, r7, r3
   2c548:	781b      	ldrb	r3, [r3, #0]
   2c54a:	2204      	movs	r2, #4
   2c54c:	4013      	ands	r3, r2
   2c54e:	d001      	beq.n	2c554 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2c550:	230a      	movs	r3, #10
   2c552:	e283      	b.n	2ca5c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2c554:	2300      	movs	r3, #0
   2c556:	e281      	b.n	2ca5c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c55a:	2200      	movs	r2, #0
   2c55c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2c55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c560:	b2da      	uxtb	r2, r3
   2c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c564:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c568:	785b      	ldrb	r3, [r3, #1]
   2c56a:	2227      	movs	r2, #39	; 0x27
   2c56c:	18bc      	adds	r4, r7, r2
   2c56e:	0018      	movs	r0, r3
   2c570:	4baa      	ldr	r3, [pc, #680]	; (2c81c <chk_mounted+0x368>)
   2c572:	4798      	blx	r3
   2c574:	0003      	movs	r3, r0
   2c576:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2c578:	2327      	movs	r3, #39	; 0x27
   2c57a:	18fb      	adds	r3, r7, r3
   2c57c:	781b      	ldrb	r3, [r3, #0]
   2c57e:	2201      	movs	r2, #1
   2c580:	4013      	ands	r3, r2
   2c582:	d001      	beq.n	2c588 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2c584:	2303      	movs	r3, #3
   2c586:	e269      	b.n	2ca5c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2c588:	1dfb      	adds	r3, r7, #7
   2c58a:	781b      	ldrb	r3, [r3, #0]
   2c58c:	2b00      	cmp	r3, #0
   2c58e:	d007      	beq.n	2c5a0 <chk_mounted+0xec>
   2c590:	2327      	movs	r3, #39	; 0x27
   2c592:	18fb      	adds	r3, r7, r3
   2c594:	781b      	ldrb	r3, [r3, #0]
   2c596:	2204      	movs	r2, #4
   2c598:	4013      	ands	r3, r2
   2c59a:	d001      	beq.n	2c5a0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2c59c:	230a      	movs	r3, #10
   2c59e:	e25d      	b.n	2ca5c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2c5a0:	2300      	movs	r3, #0
   2c5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c5a4:	2347      	movs	r3, #71	; 0x47
   2c5a6:	18fc      	adds	r4, r7, r3
   2c5a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c5ac:	0011      	movs	r1, r2
   2c5ae:	0018      	movs	r0, r3
   2c5b0:	4b9b      	ldr	r3, [pc, #620]	; (2c820 <chk_mounted+0x36c>)
   2c5b2:	4798      	blx	r3
   2c5b4:	0003      	movs	r3, r0
   2c5b6:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2c5b8:	2347      	movs	r3, #71	; 0x47
   2c5ba:	18fb      	adds	r3, r7, r3
   2c5bc:	781b      	ldrb	r3, [r3, #0]
   2c5be:	2b01      	cmp	r3, #1
   2c5c0:	d13b      	bne.n	2c63a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2c5c2:	2346      	movs	r3, #70	; 0x46
   2c5c4:	18fb      	adds	r3, r7, r3
   2c5c6:	2200      	movs	r2, #0
   2c5c8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2c5ca:	2346      	movs	r3, #70	; 0x46
   2c5cc:	18fb      	adds	r3, r7, r3
   2c5ce:	781b      	ldrb	r3, [r3, #0]
   2c5d0:	2b00      	cmp	r3, #0
   2c5d2:	d006      	beq.n	2c5e2 <chk_mounted+0x12e>
   2c5d4:	2346      	movs	r3, #70	; 0x46
   2c5d6:	18fb      	adds	r3, r7, r3
   2c5d8:	781a      	ldrb	r2, [r3, #0]
   2c5da:	2346      	movs	r3, #70	; 0x46
   2c5dc:	18fb      	adds	r3, r7, r3
   2c5de:	3a01      	subs	r2, #1
   2c5e0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2c5e2:	2346      	movs	r3, #70	; 0x46
   2c5e4:	18fb      	adds	r3, r7, r3
   2c5e6:	781b      	ldrb	r3, [r3, #0]
   2c5e8:	011b      	lsls	r3, r3, #4
   2c5ea:	33bf      	adds	r3, #191	; 0xbf
   2c5ec:	33ff      	adds	r3, #255	; 0xff
   2c5ee:	3330      	adds	r3, #48	; 0x30
   2c5f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c5f2:	18d3      	adds	r3, r2, r3
   2c5f4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2c5f6:	6a3b      	ldr	r3, [r7, #32]
   2c5f8:	3304      	adds	r3, #4
   2c5fa:	781b      	ldrb	r3, [r3, #0]
   2c5fc:	2b00      	cmp	r3, #0
   2c5fe:	d01c      	beq.n	2c63a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2c600:	6a3b      	ldr	r3, [r7, #32]
   2c602:	330b      	adds	r3, #11
   2c604:	781b      	ldrb	r3, [r3, #0]
   2c606:	061a      	lsls	r2, r3, #24
   2c608:	6a3b      	ldr	r3, [r7, #32]
   2c60a:	330a      	adds	r3, #10
   2c60c:	781b      	ldrb	r3, [r3, #0]
   2c60e:	041b      	lsls	r3, r3, #16
   2c610:	4313      	orrs	r3, r2
   2c612:	6a3a      	ldr	r2, [r7, #32]
   2c614:	3209      	adds	r2, #9
   2c616:	7812      	ldrb	r2, [r2, #0]
   2c618:	0212      	lsls	r2, r2, #8
   2c61a:	4313      	orrs	r3, r2
   2c61c:	6a3a      	ldr	r2, [r7, #32]
   2c61e:	3208      	adds	r2, #8
   2c620:	7812      	ldrb	r2, [r2, #0]
   2c622:	4313      	orrs	r3, r2
   2c624:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2c626:	2347      	movs	r3, #71	; 0x47
   2c628:	18fc      	adds	r4, r7, r3
   2c62a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c62e:	0011      	movs	r1, r2
   2c630:	0018      	movs	r0, r3
   2c632:	4b7b      	ldr	r3, [pc, #492]	; (2c820 <chk_mounted+0x36c>)
   2c634:	4798      	blx	r3
   2c636:	0003      	movs	r3, r0
   2c638:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2c63a:	2347      	movs	r3, #71	; 0x47
   2c63c:	18fb      	adds	r3, r7, r3
   2c63e:	781b      	ldrb	r3, [r3, #0]
   2c640:	2b03      	cmp	r3, #3
   2c642:	d101      	bne.n	2c648 <chk_mounted+0x194>
   2c644:	2301      	movs	r3, #1
   2c646:	e209      	b.n	2ca5c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2c648:	2347      	movs	r3, #71	; 0x47
   2c64a:	18fb      	adds	r3, r7, r3
   2c64c:	781b      	ldrb	r3, [r3, #0]
   2c64e:	2b00      	cmp	r3, #0
   2c650:	d001      	beq.n	2c656 <chk_mounted+0x1a2>
   2c652:	230d      	movs	r3, #13
   2c654:	e202      	b.n	2ca5c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2c656:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c658:	223c      	movs	r2, #60	; 0x3c
   2c65a:	5c9b      	ldrb	r3, [r3, r2]
   2c65c:	021b      	lsls	r3, r3, #8
   2c65e:	b21a      	sxth	r2, r3
   2c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c662:	213b      	movs	r1, #59	; 0x3b
   2c664:	5c5b      	ldrb	r3, [r3, r1]
   2c666:	b21b      	sxth	r3, r3
   2c668:	4313      	orrs	r3, r2
   2c66a:	b21a      	sxth	r2, r3
   2c66c:	2380      	movs	r3, #128	; 0x80
   2c66e:	009b      	lsls	r3, r3, #2
   2c670:	429a      	cmp	r2, r3
   2c672:	d001      	beq.n	2c678 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2c674:	230d      	movs	r3, #13
   2c676:	e1f1      	b.n	2ca5c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c67a:	2247      	movs	r2, #71	; 0x47
   2c67c:	5c9b      	ldrb	r3, [r3, r2]
   2c67e:	021b      	lsls	r3, r3, #8
   2c680:	b21a      	sxth	r2, r3
   2c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c684:	2146      	movs	r1, #70	; 0x46
   2c686:	5c5b      	ldrb	r3, [r3, r1]
   2c688:	b21b      	sxth	r3, r3
   2c68a:	4313      	orrs	r3, r2
   2c68c:	b21b      	sxth	r3, r3
   2c68e:	b29b      	uxth	r3, r3
   2c690:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c694:	2b00      	cmp	r3, #0
   2c696:	d112      	bne.n	2c6be <chk_mounted+0x20a>
   2c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c69a:	2257      	movs	r2, #87	; 0x57
   2c69c:	5c9b      	ldrb	r3, [r3, r2]
   2c69e:	061a      	lsls	r2, r3, #24
   2c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6a2:	2156      	movs	r1, #86	; 0x56
   2c6a4:	5c5b      	ldrb	r3, [r3, r1]
   2c6a6:	041b      	lsls	r3, r3, #16
   2c6a8:	4313      	orrs	r3, r2
   2c6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c6ac:	2155      	movs	r1, #85	; 0x55
   2c6ae:	5c52      	ldrb	r2, [r2, r1]
   2c6b0:	0212      	lsls	r2, r2, #8
   2c6b2:	4313      	orrs	r3, r2
   2c6b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c6b6:	2154      	movs	r1, #84	; 0x54
   2c6b8:	5c52      	ldrb	r2, [r2, r1]
   2c6ba:	4313      	orrs	r3, r2
   2c6bc:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2c6c2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2c6c4:	231f      	movs	r3, #31
   2c6c6:	18fb      	adds	r3, r7, r3
   2c6c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c6ca:	2140      	movs	r1, #64	; 0x40
   2c6cc:	5c52      	ldrb	r2, [r2, r1]
   2c6ce:	701a      	strb	r2, [r3, #0]
   2c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6d2:	221f      	movs	r2, #31
   2c6d4:	18ba      	adds	r2, r7, r2
   2c6d6:	7812      	ldrb	r2, [r2, #0]
   2c6d8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2c6da:	231f      	movs	r3, #31
   2c6dc:	18fb      	adds	r3, r7, r3
   2c6de:	781b      	ldrb	r3, [r3, #0]
   2c6e0:	2b01      	cmp	r3, #1
   2c6e2:	d006      	beq.n	2c6f2 <chk_mounted+0x23e>
   2c6e4:	231f      	movs	r3, #31
   2c6e6:	18fb      	adds	r3, r7, r3
   2c6e8:	781b      	ldrb	r3, [r3, #0]
   2c6ea:	2b02      	cmp	r3, #2
   2c6ec:	d001      	beq.n	2c6f2 <chk_mounted+0x23e>
   2c6ee:	230d      	movs	r3, #13
   2c6f0:	e1b4      	b.n	2ca5c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2c6f2:	231f      	movs	r3, #31
   2c6f4:	18fb      	adds	r3, r7, r3
   2c6f6:	781a      	ldrb	r2, [r3, #0]
   2c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c6fa:	4353      	muls	r3, r2
   2c6fc:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2c6fe:	231f      	movs	r3, #31
   2c700:	18fb      	adds	r3, r7, r3
   2c702:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c704:	213d      	movs	r1, #61	; 0x3d
   2c706:	5c52      	ldrb	r2, [r2, r1]
   2c708:	701a      	strb	r2, [r3, #0]
   2c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c70c:	221f      	movs	r2, #31
   2c70e:	18ba      	adds	r2, r7, r2
   2c710:	7812      	ldrb	r2, [r2, #0]
   2c712:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2c714:	231f      	movs	r3, #31
   2c716:	18fb      	adds	r3, r7, r3
   2c718:	781b      	ldrb	r3, [r3, #0]
   2c71a:	2b00      	cmp	r3, #0
   2c71c:	d008      	beq.n	2c730 <chk_mounted+0x27c>
   2c71e:	231f      	movs	r3, #31
   2c720:	18fb      	adds	r3, r7, r3
   2c722:	781b      	ldrb	r3, [r3, #0]
   2c724:	221f      	movs	r2, #31
   2c726:	18ba      	adds	r2, r7, r2
   2c728:	7812      	ldrb	r2, [r2, #0]
   2c72a:	3a01      	subs	r2, #1
   2c72c:	4013      	ands	r3, r2
   2c72e:	d001      	beq.n	2c734 <chk_mounted+0x280>
   2c730:	230d      	movs	r3, #13
   2c732:	e193      	b.n	2ca5c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c736:	2242      	movs	r2, #66	; 0x42
   2c738:	5c9b      	ldrb	r3, [r3, r2]
   2c73a:	021b      	lsls	r3, r3, #8
   2c73c:	b21a      	sxth	r2, r3
   2c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c740:	2141      	movs	r1, #65	; 0x41
   2c742:	5c5b      	ldrb	r3, [r3, r1]
   2c744:	b21b      	sxth	r3, r3
   2c746:	4313      	orrs	r3, r2
   2c748:	b21b      	sxth	r3, r3
   2c74a:	b29a      	uxth	r2, r3
   2c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c74e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c752:	891b      	ldrh	r3, [r3, #8]
   2c754:	220f      	movs	r2, #15
   2c756:	4013      	ands	r3, r2
   2c758:	b29b      	uxth	r3, r3
   2c75a:	2b00      	cmp	r3, #0
   2c75c:	d001      	beq.n	2c762 <chk_mounted+0x2ae>
   2c75e:	230d      	movs	r3, #13
   2c760:	e17c      	b.n	2ca5c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c764:	2244      	movs	r2, #68	; 0x44
   2c766:	5c9b      	ldrb	r3, [r3, r2]
   2c768:	021b      	lsls	r3, r3, #8
   2c76a:	b21a      	sxth	r2, r3
   2c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c76e:	2143      	movs	r1, #67	; 0x43
   2c770:	5c5b      	ldrb	r3, [r3, r1]
   2c772:	b21b      	sxth	r3, r3
   2c774:	4313      	orrs	r3, r2
   2c776:	b21b      	sxth	r3, r3
   2c778:	b29b      	uxth	r3, r3
   2c77a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2c77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c77e:	2b00      	cmp	r3, #0
   2c780:	d112      	bne.n	2c7a8 <chk_mounted+0x2f4>
   2c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c784:	2253      	movs	r2, #83	; 0x53
   2c786:	5c9b      	ldrb	r3, [r3, r2]
   2c788:	061a      	lsls	r2, r3, #24
   2c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c78c:	2152      	movs	r1, #82	; 0x52
   2c78e:	5c5b      	ldrb	r3, [r3, r1]
   2c790:	041b      	lsls	r3, r3, #16
   2c792:	4313      	orrs	r3, r2
   2c794:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c796:	2151      	movs	r1, #81	; 0x51
   2c798:	5c52      	ldrb	r2, [r2, r1]
   2c79a:	0212      	lsls	r2, r2, #8
   2c79c:	4313      	orrs	r3, r2
   2c79e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c7a0:	2150      	movs	r1, #80	; 0x50
   2c7a2:	5c52      	ldrb	r2, [r2, r1]
   2c7a4:	4313      	orrs	r3, r2
   2c7a6:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7aa:	223f      	movs	r2, #63	; 0x3f
   2c7ac:	5c9b      	ldrb	r3, [r3, r2]
   2c7ae:	021b      	lsls	r3, r3, #8
   2c7b0:	b21a      	sxth	r2, r3
   2c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7b4:	213e      	movs	r1, #62	; 0x3e
   2c7b6:	5c5b      	ldrb	r3, [r3, r1]
   2c7b8:	b21b      	sxth	r3, r3
   2c7ba:	4313      	orrs	r3, r2
   2c7bc:	b21a      	sxth	r2, r3
   2c7be:	231c      	movs	r3, #28
   2c7c0:	18fb      	adds	r3, r7, r3
   2c7c2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2c7c4:	231c      	movs	r3, #28
   2c7c6:	18fb      	adds	r3, r7, r3
   2c7c8:	881b      	ldrh	r3, [r3, #0]
   2c7ca:	2b00      	cmp	r3, #0
   2c7cc:	d101      	bne.n	2c7d2 <chk_mounted+0x31e>
   2c7ce:	230d      	movs	r3, #13
   2c7d0:	e144      	b.n	2ca5c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2c7d2:	231c      	movs	r3, #28
   2c7d4:	18fb      	adds	r3, r7, r3
   2c7d6:	881a      	ldrh	r2, [r3, #0]
   2c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c7da:	18d3      	adds	r3, r2, r3
   2c7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c7de:	8912      	ldrh	r2, [r2, #8]
   2c7e0:	0912      	lsrs	r2, r2, #4
   2c7e2:	b292      	uxth	r2, r2
   2c7e4:	189b      	adds	r3, r3, r2
   2c7e6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2c7e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c7ea:	69bb      	ldr	r3, [r7, #24]
   2c7ec:	429a      	cmp	r2, r3
   2c7ee:	d201      	bcs.n	2c7f4 <chk_mounted+0x340>
   2c7f0:	230d      	movs	r3, #13
   2c7f2:	e133      	b.n	2ca5c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2c7f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c7f6:	69bb      	ldr	r3, [r7, #24]
   2c7f8:	1ad2      	subs	r2, r2, r3
   2c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7fc:	789b      	ldrb	r3, [r3, #2]
   2c7fe:	0019      	movs	r1, r3
   2c800:	4b08      	ldr	r3, [pc, #32]	; (2c824 <chk_mounted+0x370>)
   2c802:	0010      	movs	r0, r2
   2c804:	4798      	blx	r3
   2c806:	0003      	movs	r3, r0
   2c808:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2c80a:	697b      	ldr	r3, [r7, #20]
   2c80c:	2b00      	cmp	r3, #0
   2c80e:	d10b      	bne.n	2c828 <chk_mounted+0x374>
   2c810:	230d      	movs	r3, #13
   2c812:	e123      	b.n	2ca5c <chk_mounted+0x5a8>
   2c814:	200042c4 	.word	0x200042c4
   2c818:	0002a611 	.word	0x0002a611
   2c81c:	0002a58d 	.word	0x0002a58d
   2c820:	0002c3e1 	.word	0x0002c3e1
   2c824:	00031b55 	.word	0x00031b55
	fmt = FS_FAT12;
   2c828:	2347      	movs	r3, #71	; 0x47
   2c82a:	18fb      	adds	r3, r7, r3
   2c82c:	2201      	movs	r2, #1
   2c82e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2c830:	697b      	ldr	r3, [r7, #20]
   2c832:	4a8c      	ldr	r2, [pc, #560]	; (2ca64 <chk_mounted+0x5b0>)
   2c834:	4293      	cmp	r3, r2
   2c836:	d903      	bls.n	2c840 <chk_mounted+0x38c>
   2c838:	2347      	movs	r3, #71	; 0x47
   2c83a:	18fb      	adds	r3, r7, r3
   2c83c:	2202      	movs	r2, #2
   2c83e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2c840:	697b      	ldr	r3, [r7, #20]
   2c842:	4a89      	ldr	r2, [pc, #548]	; (2ca68 <chk_mounted+0x5b4>)
   2c844:	4293      	cmp	r3, r2
   2c846:	d903      	bls.n	2c850 <chk_mounted+0x39c>
   2c848:	2347      	movs	r3, #71	; 0x47
   2c84a:	18fb      	adds	r3, r7, r3
   2c84c:	2203      	movs	r2, #3
   2c84e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2c850:	697b      	ldr	r3, [r7, #20]
   2c852:	1c9a      	adds	r2, r3, #2
   2c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c856:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2c858:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c85a:	69bb      	ldr	r3, [r7, #24]
   2c85c:	18d2      	adds	r2, r2, r3
   2c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c860:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2c862:	231c      	movs	r3, #28
   2c864:	18fb      	adds	r3, r7, r3
   2c866:	881a      	ldrh	r2, [r3, #0]
   2c868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c86a:	18d2      	adds	r2, r2, r3
   2c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c86e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2c870:	2347      	movs	r3, #71	; 0x47
   2c872:	18fb      	adds	r3, r7, r3
   2c874:	781b      	ldrb	r3, [r3, #0]
   2c876:	2b03      	cmp	r3, #3
   2c878:	d11e      	bne.n	2c8b8 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c87c:	891b      	ldrh	r3, [r3, #8]
   2c87e:	2b00      	cmp	r3, #0
   2c880:	d001      	beq.n	2c886 <chk_mounted+0x3d2>
   2c882:	230d      	movs	r3, #13
   2c884:	e0ea      	b.n	2ca5c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c888:	225f      	movs	r2, #95	; 0x5f
   2c88a:	5c9b      	ldrb	r3, [r3, r2]
   2c88c:	061a      	lsls	r2, r3, #24
   2c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c890:	215e      	movs	r1, #94	; 0x5e
   2c892:	5c5b      	ldrb	r3, [r3, r1]
   2c894:	041b      	lsls	r3, r3, #16
   2c896:	4313      	orrs	r3, r2
   2c898:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c89a:	215d      	movs	r1, #93	; 0x5d
   2c89c:	5c52      	ldrb	r2, [r2, r1]
   2c89e:	0212      	lsls	r2, r2, #8
   2c8a0:	4313      	orrs	r3, r2
   2c8a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c8a4:	215c      	movs	r1, #92	; 0x5c
   2c8a6:	5c52      	ldrb	r2, [r2, r1]
   2c8a8:	431a      	orrs	r2, r3
   2c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ac:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8b0:	699b      	ldr	r3, [r3, #24]
   2c8b2:	009b      	lsls	r3, r3, #2
   2c8b4:	633b      	str	r3, [r7, #48]	; 0x30
   2c8b6:	e020      	b.n	2c8fa <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ba:	891b      	ldrh	r3, [r3, #8]
   2c8bc:	2b00      	cmp	r3, #0
   2c8be:	d101      	bne.n	2c8c4 <chk_mounted+0x410>
   2c8c0:	230d      	movs	r3, #13
   2c8c2:	e0cb      	b.n	2ca5c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2c8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8c6:	6a1a      	ldr	r2, [r3, #32]
   2c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c8ca:	18d2      	adds	r2, r2, r3
   2c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ce:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2c8d0:	2347      	movs	r3, #71	; 0x47
   2c8d2:	18fb      	adds	r3, r7, r3
   2c8d4:	781b      	ldrb	r3, [r3, #0]
   2c8d6:	2b02      	cmp	r3, #2
   2c8d8:	d103      	bne.n	2c8e2 <chk_mounted+0x42e>
   2c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8dc:	699b      	ldr	r3, [r3, #24]
   2c8de:	005b      	lsls	r3, r3, #1
   2c8e0:	e00a      	b.n	2c8f8 <chk_mounted+0x444>
   2c8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8e4:	699a      	ldr	r2, [r3, #24]
   2c8e6:	0013      	movs	r3, r2
   2c8e8:	005b      	lsls	r3, r3, #1
   2c8ea:	189b      	adds	r3, r3, r2
   2c8ec:	085a      	lsrs	r2, r3, #1
   2c8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8f0:	699b      	ldr	r3, [r3, #24]
   2c8f2:	2101      	movs	r1, #1
   2c8f4:	400b      	ands	r3, r1
   2c8f6:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2c8f8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8fc:	69da      	ldr	r2, [r3, #28]
   2c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c900:	495a      	ldr	r1, [pc, #360]	; (2ca6c <chk_mounted+0x5b8>)
   2c902:	468c      	mov	ip, r1
   2c904:	4463      	add	r3, ip
   2c906:	0a5b      	lsrs	r3, r3, #9
   2c908:	429a      	cmp	r2, r3
   2c90a:	d201      	bcs.n	2c910 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2c90c:	230d      	movs	r3, #13
   2c90e:	e0a5      	b.n	2ca5c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c912:	2201      	movs	r2, #1
   2c914:	4252      	negs	r2, r2
   2c916:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c91a:	2200      	movs	r2, #0
   2c91c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2c91e:	2347      	movs	r3, #71	; 0x47
   2c920:	18fb      	adds	r3, r7, r3
   2c922:	781b      	ldrb	r3, [r3, #0]
   2c924:	2b03      	cmp	r3, #3
   2c926:	d000      	beq.n	2c92a <chk_mounted+0x476>
   2c928:	e082      	b.n	2ca30 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c92c:	2200      	movs	r2, #0
   2c92e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c932:	2261      	movs	r2, #97	; 0x61
   2c934:	5c9b      	ldrb	r3, [r3, r2]
   2c936:	021b      	lsls	r3, r3, #8
   2c938:	b21a      	sxth	r2, r3
   2c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c93c:	2160      	movs	r1, #96	; 0x60
   2c93e:	5c5b      	ldrb	r3, [r3, r1]
   2c940:	b21b      	sxth	r3, r3
   2c942:	4313      	orrs	r3, r2
   2c944:	b21b      	sxth	r3, r3
   2c946:	b29b      	uxth	r3, r3
   2c948:	001a      	movs	r2, r3
   2c94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c94c:	18d2      	adds	r2, r2, r3
   2c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c950:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c954:	7858      	ldrb	r0, [r3, #1]
   2c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c958:	3330      	adds	r3, #48	; 0x30
   2c95a:	0019      	movs	r1, r3
   2c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c95e:	695a      	ldr	r2, [r3, #20]
   2c960:	2301      	movs	r3, #1
   2c962:	4c43      	ldr	r4, [pc, #268]	; (2ca70 <chk_mounted+0x5bc>)
   2c964:	47a0      	blx	r4
   2c966:	1e03      	subs	r3, r0, #0
   2c968:	d162      	bne.n	2ca30 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c96c:	4a41      	ldr	r2, [pc, #260]	; (2ca74 <chk_mounted+0x5c0>)
   2c96e:	5c9b      	ldrb	r3, [r3, r2]
   2c970:	021b      	lsls	r3, r3, #8
   2c972:	b21a      	sxth	r2, r3
   2c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c976:	4940      	ldr	r1, [pc, #256]	; (2ca78 <chk_mounted+0x5c4>)
   2c978:	5c5b      	ldrb	r3, [r3, r1]
   2c97a:	b21b      	sxth	r3, r3
   2c97c:	4313      	orrs	r3, r2
   2c97e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c980:	4a3e      	ldr	r2, [pc, #248]	; (2ca7c <chk_mounted+0x5c8>)
   2c982:	4293      	cmp	r3, r2
   2c984:	d154      	bne.n	2ca30 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c988:	2233      	movs	r2, #51	; 0x33
   2c98a:	5c9b      	ldrb	r3, [r3, r2]
   2c98c:	061a      	lsls	r2, r3, #24
   2c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c990:	2132      	movs	r1, #50	; 0x32
   2c992:	5c5b      	ldrb	r3, [r3, r1]
   2c994:	041b      	lsls	r3, r3, #16
   2c996:	4313      	orrs	r3, r2
   2c998:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c99a:	2131      	movs	r1, #49	; 0x31
   2c99c:	5c52      	ldrb	r2, [r2, r1]
   2c99e:	0212      	lsls	r2, r2, #8
   2c9a0:	4313      	orrs	r3, r2
   2c9a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c9a4:	2130      	movs	r1, #48	; 0x30
   2c9a6:	5c52      	ldrb	r2, [r2, r1]
   2c9a8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c9aa:	4a35      	ldr	r2, [pc, #212]	; (2ca80 <chk_mounted+0x5cc>)
   2c9ac:	4293      	cmp	r3, r2
   2c9ae:	d13f      	bne.n	2ca30 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9b2:	4a34      	ldr	r2, [pc, #208]	; (2ca84 <chk_mounted+0x5d0>)
   2c9b4:	5c9b      	ldrb	r3, [r3, r2]
   2c9b6:	061a      	lsls	r2, r3, #24
   2c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9ba:	4933      	ldr	r1, [pc, #204]	; (2ca88 <chk_mounted+0x5d4>)
   2c9bc:	5c5b      	ldrb	r3, [r3, r1]
   2c9be:	041b      	lsls	r3, r3, #16
   2c9c0:	4313      	orrs	r3, r2
   2c9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c9c4:	4931      	ldr	r1, [pc, #196]	; (2ca8c <chk_mounted+0x5d8>)
   2c9c6:	5c52      	ldrb	r2, [r2, r1]
   2c9c8:	0212      	lsls	r2, r2, #8
   2c9ca:	4313      	orrs	r3, r2
   2c9cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c9ce:	2285      	movs	r2, #133	; 0x85
   2c9d0:	0092      	lsls	r2, r2, #2
   2c9d2:	5c8a      	ldrb	r2, [r1, r2]
   2c9d4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c9d6:	4a2e      	ldr	r2, [pc, #184]	; (2ca90 <chk_mounted+0x5dc>)
   2c9d8:	4293      	cmp	r3, r2
   2c9da:	d129      	bne.n	2ca30 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9de:	4a2d      	ldr	r2, [pc, #180]	; (2ca94 <chk_mounted+0x5e0>)
   2c9e0:	5c9b      	ldrb	r3, [r3, r2]
   2c9e2:	061a      	lsls	r2, r3, #24
   2c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9e6:	492c      	ldr	r1, [pc, #176]	; (2ca98 <chk_mounted+0x5e4>)
   2c9e8:	5c5b      	ldrb	r3, [r3, r1]
   2c9ea:	041b      	lsls	r3, r3, #16
   2c9ec:	4313      	orrs	r3, r2
   2c9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c9f0:	492a      	ldr	r1, [pc, #168]	; (2ca9c <chk_mounted+0x5e8>)
   2c9f2:	5c52      	ldrb	r2, [r2, r1]
   2c9f4:	0212      	lsls	r2, r2, #8
   2c9f6:	4313      	orrs	r3, r2
   2c9f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c9fa:	2287      	movs	r2, #135	; 0x87
   2c9fc:	0092      	lsls	r2, r2, #2
   2c9fe:	5c8a      	ldrb	r2, [r1, r2]
   2ca00:	431a      	orrs	r2, r3
   2ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca04:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca08:	4a25      	ldr	r2, [pc, #148]	; (2caa0 <chk_mounted+0x5ec>)
   2ca0a:	5c9b      	ldrb	r3, [r3, r2]
   2ca0c:	061a      	lsls	r2, r3, #24
   2ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca10:	4924      	ldr	r1, [pc, #144]	; (2caa4 <chk_mounted+0x5f0>)
   2ca12:	5c5b      	ldrb	r3, [r3, r1]
   2ca14:	041b      	lsls	r3, r3, #16
   2ca16:	4313      	orrs	r3, r2
   2ca18:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ca1a:	4923      	ldr	r1, [pc, #140]	; (2caa8 <chk_mounted+0x5f4>)
   2ca1c:	5c52      	ldrb	r2, [r2, r1]
   2ca1e:	0212      	lsls	r2, r2, #8
   2ca20:	4313      	orrs	r3, r2
   2ca22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2ca24:	2286      	movs	r2, #134	; 0x86
   2ca26:	0092      	lsls	r2, r2, #2
   2ca28:	5c8a      	ldrb	r2, [r1, r2]
   2ca2a:	431a      	orrs	r2, r3
   2ca2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca2e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2ca30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca32:	2247      	movs	r2, #71	; 0x47
   2ca34:	18ba      	adds	r2, r7, r2
   2ca36:	7812      	ldrb	r2, [r2, #0]
   2ca38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2ca3a:	4b1c      	ldr	r3, [pc, #112]	; (2caac <chk_mounted+0x5f8>)
   2ca3c:	881b      	ldrh	r3, [r3, #0]
   2ca3e:	3301      	adds	r3, #1
   2ca40:	b29a      	uxth	r2, r3
   2ca42:	4b1a      	ldr	r3, [pc, #104]	; (2caac <chk_mounted+0x5f8>)
   2ca44:	801a      	strh	r2, [r3, #0]
   2ca46:	4b19      	ldr	r3, [pc, #100]	; (2caac <chk_mounted+0x5f8>)
   2ca48:	881a      	ldrh	r2, [r3, #0]
   2ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca4c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca50:	2200      	movs	r2, #0
   2ca52:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca56:	2200      	movs	r2, #0
   2ca58:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2ca5a:	2300      	movs	r3, #0
}
   2ca5c:	0018      	movs	r0, r3
   2ca5e:	46bd      	mov	sp, r7
   2ca60:	b013      	add	sp, #76	; 0x4c
   2ca62:	bd90      	pop	{r4, r7, pc}
   2ca64:	00000ff5 	.word	0x00000ff5
   2ca68:	0000fff5 	.word	0x0000fff5
   2ca6c:	000001ff 	.word	0x000001ff
   2ca70:	0002a649 	.word	0x0002a649
   2ca74:	0000022f 	.word	0x0000022f
   2ca78:	0000022e 	.word	0x0000022e
   2ca7c:	ffffaa55 	.word	0xffffaa55
   2ca80:	41615252 	.word	0x41615252
   2ca84:	00000217 	.word	0x00000217
   2ca88:	00000216 	.word	0x00000216
   2ca8c:	00000215 	.word	0x00000215
   2ca90:	61417272 	.word	0x61417272
   2ca94:	0000021f 	.word	0x0000021f
   2ca98:	0000021e 	.word	0x0000021e
   2ca9c:	0000021d 	.word	0x0000021d
   2caa0:	0000021b 	.word	0x0000021b
   2caa4:	0000021a 	.word	0x0000021a
   2caa8:	00000219 	.word	0x00000219
   2caac:	200042e4 	.word	0x200042e4

0002cab0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2cab0:	b580      	push	{r7, lr}
   2cab2:	b082      	sub	sp, #8
   2cab4:	af00      	add	r7, sp, #0
   2cab6:	6078      	str	r0, [r7, #4]
   2cab8:	000a      	movs	r2, r1
   2caba:	1cbb      	adds	r3, r7, #2
   2cabc:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2cabe:	687b      	ldr	r3, [r7, #4]
   2cac0:	2b00      	cmp	r3, #0
   2cac2:	d009      	beq.n	2cad8 <validate+0x28>
   2cac4:	687b      	ldr	r3, [r7, #4]
   2cac6:	781b      	ldrb	r3, [r3, #0]
   2cac8:	2b00      	cmp	r3, #0
   2caca:	d005      	beq.n	2cad8 <validate+0x28>
   2cacc:	687b      	ldr	r3, [r7, #4]
   2cace:	88db      	ldrh	r3, [r3, #6]
   2cad0:	1cba      	adds	r2, r7, #2
   2cad2:	8812      	ldrh	r2, [r2, #0]
   2cad4:	429a      	cmp	r2, r3
   2cad6:	d001      	beq.n	2cadc <validate+0x2c>
		return FR_INVALID_OBJECT;
   2cad8:	2309      	movs	r3, #9
   2cada:	e00c      	b.n	2caf6 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2cadc:	687b      	ldr	r3, [r7, #4]
   2cade:	785b      	ldrb	r3, [r3, #1]
   2cae0:	0018      	movs	r0, r3
   2cae2:	4b07      	ldr	r3, [pc, #28]	; (2cb00 <validate+0x50>)
   2cae4:	4798      	blx	r3
   2cae6:	0003      	movs	r3, r0
   2cae8:	001a      	movs	r2, r3
   2caea:	2301      	movs	r3, #1
   2caec:	4013      	ands	r3, r2
   2caee:	d001      	beq.n	2caf4 <validate+0x44>
		return FR_NOT_READY;
   2caf0:	2303      	movs	r3, #3
   2caf2:	e000      	b.n	2caf6 <validate+0x46>

	return FR_OK;
   2caf4:	2300      	movs	r3, #0
}
   2caf6:	0018      	movs	r0, r3
   2caf8:	46bd      	mov	sp, r7
   2cafa:	b002      	add	sp, #8
   2cafc:	bd80      	pop	{r7, pc}
   2cafe:	46c0      	nop			; (mov r8, r8)
   2cb00:	0002a611 	.word	0x0002a611

0002cb04 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2cb04:	b580      	push	{r7, lr}
   2cb06:	b084      	sub	sp, #16
   2cb08:	af00      	add	r7, sp, #0
   2cb0a:	0002      	movs	r2, r0
   2cb0c:	6039      	str	r1, [r7, #0]
   2cb0e:	1dfb      	adds	r3, r7, #7
   2cb10:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2cb12:	1dfb      	adds	r3, r7, #7
   2cb14:	781b      	ldrb	r3, [r3, #0]
   2cb16:	2b07      	cmp	r3, #7
   2cb18:	d901      	bls.n	2cb1e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2cb1a:	230b      	movs	r3, #11
   2cb1c:	e018      	b.n	2cb50 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2cb1e:	1dfb      	adds	r3, r7, #7
   2cb20:	781a      	ldrb	r2, [r3, #0]
   2cb22:	4b0d      	ldr	r3, [pc, #52]	; (2cb58 <f_mount+0x54>)
   2cb24:	0092      	lsls	r2, r2, #2
   2cb26:	58d3      	ldr	r3, [r2, r3]
   2cb28:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2cb2a:	68fb      	ldr	r3, [r7, #12]
   2cb2c:	2b00      	cmp	r3, #0
   2cb2e:	d002      	beq.n	2cb36 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2cb30:	68fb      	ldr	r3, [r7, #12]
   2cb32:	2200      	movs	r2, #0
   2cb34:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2cb36:	683b      	ldr	r3, [r7, #0]
   2cb38:	2b00      	cmp	r3, #0
   2cb3a:	d002      	beq.n	2cb42 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2cb3c:	683b      	ldr	r3, [r7, #0]
   2cb3e:	2200      	movs	r2, #0
   2cb40:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2cb42:	1dfb      	adds	r3, r7, #7
   2cb44:	781a      	ldrb	r2, [r3, #0]
   2cb46:	4b04      	ldr	r3, [pc, #16]	; (2cb58 <f_mount+0x54>)
   2cb48:	0092      	lsls	r2, r2, #2
   2cb4a:	6839      	ldr	r1, [r7, #0]
   2cb4c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2cb4e:	2300      	movs	r3, #0
}
   2cb50:	0018      	movs	r0, r3
   2cb52:	46bd      	mov	sp, r7
   2cb54:	b004      	add	sp, #16
   2cb56:	bd80      	pop	{r7, pc}
   2cb58:	200042c4 	.word	0x200042c4

0002cb5c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2cb5c:	b590      	push	{r4, r7, lr}
   2cb5e:	4ce5      	ldr	r4, [pc, #916]	; (2cef4 <f_open+0x398>)
   2cb60:	44a5      	add	sp, r4
   2cb62:	af00      	add	r7, sp, #0
   2cb64:	60f8      	str	r0, [r7, #12]
   2cb66:	60b9      	str	r1, [r7, #8]
   2cb68:	4be3      	ldr	r3, [pc, #908]	; (2cef8 <f_open+0x39c>)
   2cb6a:	2194      	movs	r1, #148	; 0x94
   2cb6c:	0089      	lsls	r1, r1, #2
   2cb6e:	468c      	mov	ip, r1
   2cb70:	44bc      	add	ip, r7
   2cb72:	4463      	add	r3, ip
   2cb74:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2cb76:	68fb      	ldr	r3, [r7, #12]
   2cb78:	2200      	movs	r2, #0
   2cb7a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2cb7c:	4bde      	ldr	r3, [pc, #888]	; (2cef8 <f_open+0x39c>)
   2cb7e:	2294      	movs	r2, #148	; 0x94
   2cb80:	0092      	lsls	r2, r2, #2
   2cb82:	4694      	mov	ip, r2
   2cb84:	44bc      	add	ip, r7
   2cb86:	4463      	add	r3, ip
   2cb88:	4adb      	ldr	r2, [pc, #876]	; (2cef8 <f_open+0x39c>)
   2cb8a:	2194      	movs	r1, #148	; 0x94
   2cb8c:	0089      	lsls	r1, r1, #2
   2cb8e:	468c      	mov	ip, r1
   2cb90:	44bc      	add	ip, r7
   2cb92:	4462      	add	r2, ip
   2cb94:	7812      	ldrb	r2, [r2, #0]
   2cb96:	211f      	movs	r1, #31
   2cb98:	400a      	ands	r2, r1
   2cb9a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2cb9c:	4bd6      	ldr	r3, [pc, #856]	; (2cef8 <f_open+0x39c>)
   2cb9e:	2294      	movs	r2, #148	; 0x94
   2cba0:	0092      	lsls	r2, r2, #2
   2cba2:	4694      	mov	ip, r2
   2cba4:	44bc      	add	ip, r7
   2cba6:	4463      	add	r3, ip
   2cba8:	781b      	ldrb	r3, [r3, #0]
   2cbaa:	2201      	movs	r2, #1
   2cbac:	4393      	bics	r3, r2
   2cbae:	b2da      	uxtb	r2, r3
   2cbb0:	4bd2      	ldr	r3, [pc, #840]	; (2cefc <f_open+0x3a0>)
   2cbb2:	18fc      	adds	r4, r7, r3
   2cbb4:	2387      	movs	r3, #135	; 0x87
   2cbb6:	009b      	lsls	r3, r3, #2
   2cbb8:	18f9      	adds	r1, r7, r3
   2cbba:	2308      	movs	r3, #8
   2cbbc:	18fb      	adds	r3, r7, r3
   2cbbe:	0018      	movs	r0, r3
   2cbc0:	4bcf      	ldr	r3, [pc, #828]	; (2cf00 <f_open+0x3a4>)
   2cbc2:	4798      	blx	r3
   2cbc4:	0003      	movs	r3, r0
   2cbc6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2cbc8:	2387      	movs	r3, #135	; 0x87
   2cbca:	009b      	lsls	r3, r3, #2
   2cbcc:	18fb      	adds	r3, r7, r3
   2cbce:	2284      	movs	r2, #132	; 0x84
   2cbd0:	0092      	lsls	r2, r2, #2
   2cbd2:	18ba      	adds	r2, r7, r2
   2cbd4:	619a      	str	r2, [r3, #24]
   2cbd6:	2387      	movs	r3, #135	; 0x87
   2cbd8:	009b      	lsls	r3, r3, #2
   2cbda:	18fb      	adds	r3, r7, r3
   2cbdc:	2210      	movs	r2, #16
   2cbde:	18ba      	adds	r2, r7, r2
   2cbe0:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2cbe2:	4bc6      	ldr	r3, [pc, #792]	; (2cefc <f_open+0x3a0>)
   2cbe4:	18fb      	adds	r3, r7, r3
   2cbe6:	781b      	ldrb	r3, [r3, #0]
   2cbe8:	2b00      	cmp	r3, #0
   2cbea:	d10b      	bne.n	2cc04 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2cbec:	68ba      	ldr	r2, [r7, #8]
   2cbee:	4bc3      	ldr	r3, [pc, #780]	; (2cefc <f_open+0x3a0>)
   2cbf0:	18fc      	adds	r4, r7, r3
   2cbf2:	2387      	movs	r3, #135	; 0x87
   2cbf4:	009b      	lsls	r3, r3, #2
   2cbf6:	18fb      	adds	r3, r7, r3
   2cbf8:	0011      	movs	r1, r2
   2cbfa:	0018      	movs	r0, r3
   2cbfc:	4bc1      	ldr	r3, [pc, #772]	; (2cf04 <f_open+0x3a8>)
   2cbfe:	4798      	blx	r3
   2cc00:	0003      	movs	r3, r0
   2cc02:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2cc04:	2387      	movs	r3, #135	; 0x87
   2cc06:	009b      	lsls	r3, r3, #2
   2cc08:	18fb      	adds	r3, r7, r3
   2cc0a:	695b      	ldr	r3, [r3, #20]
   2cc0c:	2292      	movs	r2, #146	; 0x92
   2cc0e:	0092      	lsls	r2, r2, #2
   2cc10:	18ba      	adds	r2, r7, r2
   2cc12:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2cc14:	4bb9      	ldr	r3, [pc, #740]	; (2cefc <f_open+0x3a0>)
   2cc16:	18fb      	adds	r3, r7, r3
   2cc18:	781b      	ldrb	r3, [r3, #0]
   2cc1a:	2b00      	cmp	r3, #0
   2cc1c:	d109      	bne.n	2cc32 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2cc1e:	2392      	movs	r3, #146	; 0x92
   2cc20:	009b      	lsls	r3, r3, #2
   2cc22:	18fb      	adds	r3, r7, r3
   2cc24:	681b      	ldr	r3, [r3, #0]
   2cc26:	2b00      	cmp	r3, #0
   2cc28:	d103      	bne.n	2cc32 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2cc2a:	4bb4      	ldr	r3, [pc, #720]	; (2cefc <f_open+0x3a0>)
   2cc2c:	18fb      	adds	r3, r7, r3
   2cc2e:	2206      	movs	r2, #6
   2cc30:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2cc32:	4bb1      	ldr	r3, [pc, #708]	; (2cef8 <f_open+0x39c>)
   2cc34:	2294      	movs	r2, #148	; 0x94
   2cc36:	0092      	lsls	r2, r2, #2
   2cc38:	4694      	mov	ip, r2
   2cc3a:	44bc      	add	ip, r7
   2cc3c:	4463      	add	r3, ip
   2cc3e:	781b      	ldrb	r3, [r3, #0]
   2cc40:	221c      	movs	r2, #28
   2cc42:	4013      	ands	r3, r2
   2cc44:	d100      	bne.n	2cc48 <f_open+0xec>
   2cc46:	e141      	b.n	2cecc <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2cc48:	4bac      	ldr	r3, [pc, #688]	; (2cefc <f_open+0x3a0>)
   2cc4a:	18fb      	adds	r3, r7, r3
   2cc4c:	781b      	ldrb	r3, [r3, #0]
   2cc4e:	2b00      	cmp	r3, #0
   2cc50:	d027      	beq.n	2cca2 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2cc52:	4baa      	ldr	r3, [pc, #680]	; (2cefc <f_open+0x3a0>)
   2cc54:	18fb      	adds	r3, r7, r3
   2cc56:	781b      	ldrb	r3, [r3, #0]
   2cc58:	2b04      	cmp	r3, #4
   2cc5a:	d109      	bne.n	2cc70 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2cc5c:	4ba7      	ldr	r3, [pc, #668]	; (2cefc <f_open+0x3a0>)
   2cc5e:	18fc      	adds	r4, r7, r3
   2cc60:	2387      	movs	r3, #135	; 0x87
   2cc62:	009b      	lsls	r3, r3, #2
   2cc64:	18fb      	adds	r3, r7, r3
   2cc66:	0018      	movs	r0, r3
   2cc68:	4ba7      	ldr	r3, [pc, #668]	; (2cf08 <f_open+0x3ac>)
   2cc6a:	4798      	blx	r3
   2cc6c:	0003      	movs	r3, r0
   2cc6e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2cc70:	4ba1      	ldr	r3, [pc, #644]	; (2cef8 <f_open+0x39c>)
   2cc72:	2294      	movs	r2, #148	; 0x94
   2cc74:	0092      	lsls	r2, r2, #2
   2cc76:	4694      	mov	ip, r2
   2cc78:	44bc      	add	ip, r7
   2cc7a:	4463      	add	r3, ip
   2cc7c:	4a9e      	ldr	r2, [pc, #632]	; (2cef8 <f_open+0x39c>)
   2cc7e:	2194      	movs	r1, #148	; 0x94
   2cc80:	0089      	lsls	r1, r1, #2
   2cc82:	468c      	mov	ip, r1
   2cc84:	44bc      	add	ip, r7
   2cc86:	4462      	add	r2, ip
   2cc88:	7812      	ldrb	r2, [r2, #0]
   2cc8a:	2108      	movs	r1, #8
   2cc8c:	430a      	orrs	r2, r1
   2cc8e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2cc90:	2387      	movs	r3, #135	; 0x87
   2cc92:	009b      	lsls	r3, r3, #2
   2cc94:	18fb      	adds	r3, r7, r3
   2cc96:	695b      	ldr	r3, [r3, #20]
   2cc98:	2292      	movs	r2, #146	; 0x92
   2cc9a:	0092      	lsls	r2, r2, #2
   2cc9c:	18ba      	adds	r2, r7, r2
   2cc9e:	6013      	str	r3, [r2, #0]
   2cca0:	e01c      	b.n	2ccdc <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2cca2:	2392      	movs	r3, #146	; 0x92
   2cca4:	009b      	lsls	r3, r3, #2
   2cca6:	18fb      	adds	r3, r7, r3
   2cca8:	681b      	ldr	r3, [r3, #0]
   2ccaa:	330b      	adds	r3, #11
   2ccac:	781b      	ldrb	r3, [r3, #0]
   2ccae:	001a      	movs	r2, r3
   2ccb0:	2311      	movs	r3, #17
   2ccb2:	4013      	ands	r3, r2
   2ccb4:	d004      	beq.n	2ccc0 <f_open+0x164>
				res = FR_DENIED;
   2ccb6:	4b91      	ldr	r3, [pc, #580]	; (2cefc <f_open+0x3a0>)
   2ccb8:	18fb      	adds	r3, r7, r3
   2ccba:	2207      	movs	r2, #7
   2ccbc:	701a      	strb	r2, [r3, #0]
   2ccbe:	e00d      	b.n	2ccdc <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2ccc0:	4b8d      	ldr	r3, [pc, #564]	; (2cef8 <f_open+0x39c>)
   2ccc2:	2294      	movs	r2, #148	; 0x94
   2ccc4:	0092      	lsls	r2, r2, #2
   2ccc6:	4694      	mov	ip, r2
   2ccc8:	44bc      	add	ip, r7
   2ccca:	4463      	add	r3, ip
   2cccc:	781b      	ldrb	r3, [r3, #0]
   2ccce:	2204      	movs	r2, #4
   2ccd0:	4013      	ands	r3, r2
   2ccd2:	d003      	beq.n	2ccdc <f_open+0x180>
					res = FR_EXIST;
   2ccd4:	4b89      	ldr	r3, [pc, #548]	; (2cefc <f_open+0x3a0>)
   2ccd6:	18fb      	adds	r3, r7, r3
   2ccd8:	2208      	movs	r2, #8
   2ccda:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2ccdc:	4b87      	ldr	r3, [pc, #540]	; (2cefc <f_open+0x3a0>)
   2ccde:	18fb      	adds	r3, r7, r3
   2cce0:	781b      	ldrb	r3, [r3, #0]
   2cce2:	2b00      	cmp	r3, #0
   2cce4:	d000      	beq.n	2cce8 <f_open+0x18c>
   2cce6:	e12f      	b.n	2cf48 <f_open+0x3ec>
   2cce8:	4b83      	ldr	r3, [pc, #524]	; (2cef8 <f_open+0x39c>)
   2ccea:	2294      	movs	r2, #148	; 0x94
   2ccec:	0092      	lsls	r2, r2, #2
   2ccee:	4694      	mov	ip, r2
   2ccf0:	44bc      	add	ip, r7
   2ccf2:	4463      	add	r3, ip
   2ccf4:	781b      	ldrb	r3, [r3, #0]
   2ccf6:	2208      	movs	r2, #8
   2ccf8:	4013      	ands	r3, r2
   2ccfa:	d100      	bne.n	2ccfe <f_open+0x1a2>
   2ccfc:	e124      	b.n	2cf48 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2ccfe:	4b83      	ldr	r3, [pc, #524]	; (2cf0c <f_open+0x3b0>)
   2cd00:	4798      	blx	r3
   2cd02:	0003      	movs	r3, r0
   2cd04:	2291      	movs	r2, #145	; 0x91
   2cd06:	0092      	lsls	r2, r2, #2
   2cd08:	18ba      	adds	r2, r7, r2
   2cd0a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2cd0c:	2392      	movs	r3, #146	; 0x92
   2cd0e:	009b      	lsls	r3, r3, #2
   2cd10:	18fb      	adds	r3, r7, r3
   2cd12:	681b      	ldr	r3, [r3, #0]
   2cd14:	330e      	adds	r3, #14
   2cd16:	2291      	movs	r2, #145	; 0x91
   2cd18:	0092      	lsls	r2, r2, #2
   2cd1a:	18ba      	adds	r2, r7, r2
   2cd1c:	6812      	ldr	r2, [r2, #0]
   2cd1e:	b2d2      	uxtb	r2, r2
   2cd20:	701a      	strb	r2, [r3, #0]
   2cd22:	2392      	movs	r3, #146	; 0x92
   2cd24:	009b      	lsls	r3, r3, #2
   2cd26:	18fb      	adds	r3, r7, r3
   2cd28:	681b      	ldr	r3, [r3, #0]
   2cd2a:	330f      	adds	r3, #15
   2cd2c:	2291      	movs	r2, #145	; 0x91
   2cd2e:	0092      	lsls	r2, r2, #2
   2cd30:	18ba      	adds	r2, r7, r2
   2cd32:	6812      	ldr	r2, [r2, #0]
   2cd34:	b292      	uxth	r2, r2
   2cd36:	0a12      	lsrs	r2, r2, #8
   2cd38:	b292      	uxth	r2, r2
   2cd3a:	b2d2      	uxtb	r2, r2
   2cd3c:	701a      	strb	r2, [r3, #0]
   2cd3e:	2392      	movs	r3, #146	; 0x92
   2cd40:	009b      	lsls	r3, r3, #2
   2cd42:	18fb      	adds	r3, r7, r3
   2cd44:	681b      	ldr	r3, [r3, #0]
   2cd46:	3310      	adds	r3, #16
   2cd48:	2291      	movs	r2, #145	; 0x91
   2cd4a:	0092      	lsls	r2, r2, #2
   2cd4c:	18ba      	adds	r2, r7, r2
   2cd4e:	6812      	ldr	r2, [r2, #0]
   2cd50:	0c12      	lsrs	r2, r2, #16
   2cd52:	b2d2      	uxtb	r2, r2
   2cd54:	701a      	strb	r2, [r3, #0]
   2cd56:	2392      	movs	r3, #146	; 0x92
   2cd58:	009b      	lsls	r3, r3, #2
   2cd5a:	18fb      	adds	r3, r7, r3
   2cd5c:	681b      	ldr	r3, [r3, #0]
   2cd5e:	3311      	adds	r3, #17
   2cd60:	2291      	movs	r2, #145	; 0x91
   2cd62:	0092      	lsls	r2, r2, #2
   2cd64:	18ba      	adds	r2, r7, r2
   2cd66:	6812      	ldr	r2, [r2, #0]
   2cd68:	0e12      	lsrs	r2, r2, #24
   2cd6a:	b2d2      	uxtb	r2, r2
   2cd6c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2cd6e:	2392      	movs	r3, #146	; 0x92
   2cd70:	009b      	lsls	r3, r3, #2
   2cd72:	18fb      	adds	r3, r7, r3
   2cd74:	681b      	ldr	r3, [r3, #0]
   2cd76:	330b      	adds	r3, #11
   2cd78:	2200      	movs	r2, #0
   2cd7a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2cd7c:	2392      	movs	r3, #146	; 0x92
   2cd7e:	009b      	lsls	r3, r3, #2
   2cd80:	18fb      	adds	r3, r7, r3
   2cd82:	681b      	ldr	r3, [r3, #0]
   2cd84:	331c      	adds	r3, #28
   2cd86:	2200      	movs	r2, #0
   2cd88:	701a      	strb	r2, [r3, #0]
   2cd8a:	2392      	movs	r3, #146	; 0x92
   2cd8c:	009b      	lsls	r3, r3, #2
   2cd8e:	18fb      	adds	r3, r7, r3
   2cd90:	681b      	ldr	r3, [r3, #0]
   2cd92:	331d      	adds	r3, #29
   2cd94:	2200      	movs	r2, #0
   2cd96:	701a      	strb	r2, [r3, #0]
   2cd98:	2392      	movs	r3, #146	; 0x92
   2cd9a:	009b      	lsls	r3, r3, #2
   2cd9c:	18fb      	adds	r3, r7, r3
   2cd9e:	681b      	ldr	r3, [r3, #0]
   2cda0:	331e      	adds	r3, #30
   2cda2:	2200      	movs	r2, #0
   2cda4:	701a      	strb	r2, [r3, #0]
   2cda6:	2392      	movs	r3, #146	; 0x92
   2cda8:	009b      	lsls	r3, r3, #2
   2cdaa:	18fb      	adds	r3, r7, r3
   2cdac:	681b      	ldr	r3, [r3, #0]
   2cdae:	331f      	adds	r3, #31
   2cdb0:	2200      	movs	r2, #0
   2cdb2:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2cdb4:	2392      	movs	r3, #146	; 0x92
   2cdb6:	009b      	lsls	r3, r3, #2
   2cdb8:	18fb      	adds	r3, r7, r3
   2cdba:	681b      	ldr	r3, [r3, #0]
   2cdbc:	3315      	adds	r3, #21
   2cdbe:	781b      	ldrb	r3, [r3, #0]
   2cdc0:	021b      	lsls	r3, r3, #8
   2cdc2:	b21a      	sxth	r2, r3
   2cdc4:	2392      	movs	r3, #146	; 0x92
   2cdc6:	009b      	lsls	r3, r3, #2
   2cdc8:	18fb      	adds	r3, r7, r3
   2cdca:	681b      	ldr	r3, [r3, #0]
   2cdcc:	3314      	adds	r3, #20
   2cdce:	781b      	ldrb	r3, [r3, #0]
   2cdd0:	b21b      	sxth	r3, r3
   2cdd2:	4313      	orrs	r3, r2
   2cdd4:	b21b      	sxth	r3, r3
   2cdd6:	b29b      	uxth	r3, r3
   2cdd8:	041b      	lsls	r3, r3, #16
   2cdda:	2292      	movs	r2, #146	; 0x92
   2cddc:	0092      	lsls	r2, r2, #2
   2cdde:	18ba      	adds	r2, r7, r2
   2cde0:	6812      	ldr	r2, [r2, #0]
   2cde2:	321b      	adds	r2, #27
   2cde4:	7812      	ldrb	r2, [r2, #0]
   2cde6:	0212      	lsls	r2, r2, #8
   2cde8:	b211      	sxth	r1, r2
   2cdea:	2292      	movs	r2, #146	; 0x92
   2cdec:	0092      	lsls	r2, r2, #2
   2cdee:	18ba      	adds	r2, r7, r2
   2cdf0:	6812      	ldr	r2, [r2, #0]
   2cdf2:	321a      	adds	r2, #26
   2cdf4:	7812      	ldrb	r2, [r2, #0]
   2cdf6:	b212      	sxth	r2, r2
   2cdf8:	430a      	orrs	r2, r1
   2cdfa:	b212      	sxth	r2, r2
   2cdfc:	b292      	uxth	r2, r2
   2cdfe:	4313      	orrs	r3, r2
   2ce00:	2290      	movs	r2, #144	; 0x90
   2ce02:	0092      	lsls	r2, r2, #2
   2ce04:	18ba      	adds	r2, r7, r2
   2ce06:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2ce08:	2392      	movs	r3, #146	; 0x92
   2ce0a:	009b      	lsls	r3, r3, #2
   2ce0c:	18fb      	adds	r3, r7, r3
   2ce0e:	681b      	ldr	r3, [r3, #0]
   2ce10:	331a      	adds	r3, #26
   2ce12:	2200      	movs	r2, #0
   2ce14:	701a      	strb	r2, [r3, #0]
   2ce16:	2392      	movs	r3, #146	; 0x92
   2ce18:	009b      	lsls	r3, r3, #2
   2ce1a:	18fb      	adds	r3, r7, r3
   2ce1c:	681b      	ldr	r3, [r3, #0]
   2ce1e:	331b      	adds	r3, #27
   2ce20:	2200      	movs	r2, #0
   2ce22:	701a      	strb	r2, [r3, #0]
   2ce24:	2392      	movs	r3, #146	; 0x92
   2ce26:	009b      	lsls	r3, r3, #2
   2ce28:	18fb      	adds	r3, r7, r3
   2ce2a:	681b      	ldr	r3, [r3, #0]
   2ce2c:	3314      	adds	r3, #20
   2ce2e:	2200      	movs	r2, #0
   2ce30:	701a      	strb	r2, [r3, #0]
   2ce32:	2392      	movs	r3, #146	; 0x92
   2ce34:	009b      	lsls	r3, r3, #2
   2ce36:	18fb      	adds	r3, r7, r3
   2ce38:	681b      	ldr	r3, [r3, #0]
   2ce3a:	3315      	adds	r3, #21
   2ce3c:	2200      	movs	r2, #0
   2ce3e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2ce40:	2387      	movs	r3, #135	; 0x87
   2ce42:	009b      	lsls	r3, r3, #2
   2ce44:	18fb      	adds	r3, r7, r3
   2ce46:	681b      	ldr	r3, [r3, #0]
   2ce48:	2201      	movs	r2, #1
   2ce4a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2ce4c:	2390      	movs	r3, #144	; 0x90
   2ce4e:	009b      	lsls	r3, r3, #2
   2ce50:	18fb      	adds	r3, r7, r3
   2ce52:	681b      	ldr	r3, [r3, #0]
   2ce54:	2b00      	cmp	r3, #0
   2ce56:	d100      	bne.n	2ce5a <f_open+0x2fe>
   2ce58:	e076      	b.n	2cf48 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2ce5a:	2387      	movs	r3, #135	; 0x87
   2ce5c:	009b      	lsls	r3, r3, #2
   2ce5e:	18fb      	adds	r3, r7, r3
   2ce60:	681b      	ldr	r3, [r3, #0]
   2ce62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ce64:	2291      	movs	r2, #145	; 0x91
   2ce66:	0092      	lsls	r2, r2, #2
   2ce68:	18ba      	adds	r2, r7, r2
   2ce6a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2ce6c:	2387      	movs	r3, #135	; 0x87
   2ce6e:	009b      	lsls	r3, r3, #2
   2ce70:	18fb      	adds	r3, r7, r3
   2ce72:	681b      	ldr	r3, [r3, #0]
   2ce74:	4a21      	ldr	r2, [pc, #132]	; (2cefc <f_open+0x3a0>)
   2ce76:	18bc      	adds	r4, r7, r2
   2ce78:	2290      	movs	r2, #144	; 0x90
   2ce7a:	0092      	lsls	r2, r2, #2
   2ce7c:	18ba      	adds	r2, r7, r2
   2ce7e:	6812      	ldr	r2, [r2, #0]
   2ce80:	0011      	movs	r1, r2
   2ce82:	0018      	movs	r0, r3
   2ce84:	4b22      	ldr	r3, [pc, #136]	; (2cf10 <f_open+0x3b4>)
   2ce86:	4798      	blx	r3
   2ce88:	0003      	movs	r3, r0
   2ce8a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2ce8c:	4b1b      	ldr	r3, [pc, #108]	; (2cefc <f_open+0x3a0>)
   2ce8e:	18fb      	adds	r3, r7, r3
   2ce90:	781b      	ldrb	r3, [r3, #0]
   2ce92:	2b00      	cmp	r3, #0
   2ce94:	d158      	bne.n	2cf48 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2ce96:	2387      	movs	r3, #135	; 0x87
   2ce98:	009b      	lsls	r3, r3, #2
   2ce9a:	18fb      	adds	r3, r7, r3
   2ce9c:	681b      	ldr	r3, [r3, #0]
   2ce9e:	2290      	movs	r2, #144	; 0x90
   2cea0:	0092      	lsls	r2, r2, #2
   2cea2:	18ba      	adds	r2, r7, r2
   2cea4:	6812      	ldr	r2, [r2, #0]
   2cea6:	3a01      	subs	r2, #1
   2cea8:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2ceaa:	2387      	movs	r3, #135	; 0x87
   2ceac:	009b      	lsls	r3, r3, #2
   2ceae:	18fb      	adds	r3, r7, r3
   2ceb0:	681b      	ldr	r3, [r3, #0]
   2ceb2:	4a12      	ldr	r2, [pc, #72]	; (2cefc <f_open+0x3a0>)
   2ceb4:	18bc      	adds	r4, r7, r2
   2ceb6:	2291      	movs	r2, #145	; 0x91
   2ceb8:	0092      	lsls	r2, r2, #2
   2ceba:	18ba      	adds	r2, r7, r2
   2cebc:	6812      	ldr	r2, [r2, #0]
   2cebe:	0011      	movs	r1, r2
   2cec0:	0018      	movs	r0, r3
   2cec2:	4b14      	ldr	r3, [pc, #80]	; (2cf14 <f_open+0x3b8>)
   2cec4:	4798      	blx	r3
   2cec6:	0003      	movs	r3, r0
   2cec8:	7023      	strb	r3, [r4, #0]
   2ceca:	e03d      	b.n	2cf48 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2cecc:	4b0b      	ldr	r3, [pc, #44]	; (2cefc <f_open+0x3a0>)
   2cece:	18fb      	adds	r3, r7, r3
   2ced0:	781b      	ldrb	r3, [r3, #0]
   2ced2:	2b00      	cmp	r3, #0
   2ced4:	d138      	bne.n	2cf48 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2ced6:	2392      	movs	r3, #146	; 0x92
   2ced8:	009b      	lsls	r3, r3, #2
   2ceda:	18fb      	adds	r3, r7, r3
   2cedc:	681b      	ldr	r3, [r3, #0]
   2cede:	330b      	adds	r3, #11
   2cee0:	781b      	ldrb	r3, [r3, #0]
   2cee2:	001a      	movs	r2, r3
   2cee4:	2310      	movs	r3, #16
   2cee6:	4013      	ands	r3, r2
   2cee8:	d016      	beq.n	2cf18 <f_open+0x3bc>
				res = FR_NO_FILE;
   2ceea:	4b04      	ldr	r3, [pc, #16]	; (2cefc <f_open+0x3a0>)
   2ceec:	18fb      	adds	r3, r7, r3
   2ceee:	2204      	movs	r2, #4
   2cef0:	701a      	strb	r2, [r3, #0]
   2cef2:	e029      	b.n	2cf48 <f_open+0x3ec>
   2cef4:	fffffdac 	.word	0xfffffdac
   2cef8:	fffffdb7 	.word	0xfffffdb7
   2cefc:	0000024f 	.word	0x0000024f
   2cf00:	0002c4b5 	.word	0x0002c4b5
   2cf04:	0002c2a9 	.word	0x0002c2a9
   2cf08:	0002baf9 	.word	0x0002baf9
   2cf0c:	0002a8f1 	.word	0x0002a8f1
   2cf10:	0002b075 	.word	0x0002b075
   2cf14:	0002aa35 	.word	0x0002aa35
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2cf18:	4b5a      	ldr	r3, [pc, #360]	; (2d084 <f_open+0x528>)
   2cf1a:	2294      	movs	r2, #148	; 0x94
   2cf1c:	0092      	lsls	r2, r2, #2
   2cf1e:	4694      	mov	ip, r2
   2cf20:	44bc      	add	ip, r7
   2cf22:	4463      	add	r3, ip
   2cf24:	781b      	ldrb	r3, [r3, #0]
   2cf26:	2202      	movs	r2, #2
   2cf28:	4013      	ands	r3, r2
   2cf2a:	d00d      	beq.n	2cf48 <f_open+0x3ec>
   2cf2c:	2392      	movs	r3, #146	; 0x92
   2cf2e:	009b      	lsls	r3, r3, #2
   2cf30:	18fb      	adds	r3, r7, r3
   2cf32:	681b      	ldr	r3, [r3, #0]
   2cf34:	330b      	adds	r3, #11
   2cf36:	781b      	ldrb	r3, [r3, #0]
   2cf38:	001a      	movs	r2, r3
   2cf3a:	2301      	movs	r3, #1
   2cf3c:	4013      	ands	r3, r2
   2cf3e:	d003      	beq.n	2cf48 <f_open+0x3ec>
					res = FR_DENIED;
   2cf40:	4b51      	ldr	r3, [pc, #324]	; (2d088 <f_open+0x52c>)
   2cf42:	18fb      	adds	r3, r7, r3
   2cf44:	2207      	movs	r2, #7
   2cf46:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2cf48:	4b4f      	ldr	r3, [pc, #316]	; (2d088 <f_open+0x52c>)
   2cf4a:	18fb      	adds	r3, r7, r3
   2cf4c:	781b      	ldrb	r3, [r3, #0]
   2cf4e:	2b00      	cmp	r3, #0
   2cf50:	d126      	bne.n	2cfa0 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2cf52:	4b4c      	ldr	r3, [pc, #304]	; (2d084 <f_open+0x528>)
   2cf54:	2294      	movs	r2, #148	; 0x94
   2cf56:	0092      	lsls	r2, r2, #2
   2cf58:	4694      	mov	ip, r2
   2cf5a:	44bc      	add	ip, r7
   2cf5c:	4463      	add	r3, ip
   2cf5e:	781b      	ldrb	r3, [r3, #0]
   2cf60:	2208      	movs	r2, #8
   2cf62:	4013      	ands	r3, r2
   2cf64:	d00f      	beq.n	2cf86 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2cf66:	4b47      	ldr	r3, [pc, #284]	; (2d084 <f_open+0x528>)
   2cf68:	2294      	movs	r2, #148	; 0x94
   2cf6a:	0092      	lsls	r2, r2, #2
   2cf6c:	4694      	mov	ip, r2
   2cf6e:	44bc      	add	ip, r7
   2cf70:	4463      	add	r3, ip
   2cf72:	4a44      	ldr	r2, [pc, #272]	; (2d084 <f_open+0x528>)
   2cf74:	2194      	movs	r1, #148	; 0x94
   2cf76:	0089      	lsls	r1, r1, #2
   2cf78:	468c      	mov	ip, r1
   2cf7a:	44bc      	add	ip, r7
   2cf7c:	4462      	add	r2, ip
   2cf7e:	7812      	ldrb	r2, [r2, #0]
   2cf80:	2120      	movs	r1, #32
   2cf82:	430a      	orrs	r2, r1
   2cf84:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2cf86:	2387      	movs	r3, #135	; 0x87
   2cf88:	009b      	lsls	r3, r3, #2
   2cf8a:	18fb      	adds	r3, r7, r3
   2cf8c:	681b      	ldr	r3, [r3, #0]
   2cf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cf90:	68fb      	ldr	r3, [r7, #12]
   2cf92:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2cf94:	68fb      	ldr	r3, [r7, #12]
   2cf96:	2292      	movs	r2, #146	; 0x92
   2cf98:	0092      	lsls	r2, r2, #2
   2cf9a:	18ba      	adds	r2, r7, r2
   2cf9c:	6812      	ldr	r2, [r2, #0]
   2cf9e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2cfa0:	4b39      	ldr	r3, [pc, #228]	; (2d088 <f_open+0x52c>)
   2cfa2:	18fb      	adds	r3, r7, r3
   2cfa4:	781b      	ldrb	r3, [r3, #0]
   2cfa6:	2b00      	cmp	r3, #0
   2cfa8:	d163      	bne.n	2d072 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2cfaa:	68fb      	ldr	r3, [r7, #12]
   2cfac:	4a35      	ldr	r2, [pc, #212]	; (2d084 <f_open+0x528>)
   2cfae:	2194      	movs	r1, #148	; 0x94
   2cfb0:	0089      	lsls	r1, r1, #2
   2cfb2:	468c      	mov	ip, r1
   2cfb4:	44bc      	add	ip, r7
   2cfb6:	4462      	add	r2, ip
   2cfb8:	7812      	ldrb	r2, [r2, #0]
   2cfba:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2cfbc:	2392      	movs	r3, #146	; 0x92
   2cfbe:	009b      	lsls	r3, r3, #2
   2cfc0:	18fb      	adds	r3, r7, r3
   2cfc2:	681b      	ldr	r3, [r3, #0]
   2cfc4:	3315      	adds	r3, #21
   2cfc6:	781b      	ldrb	r3, [r3, #0]
   2cfc8:	021b      	lsls	r3, r3, #8
   2cfca:	b21a      	sxth	r2, r3
   2cfcc:	2392      	movs	r3, #146	; 0x92
   2cfce:	009b      	lsls	r3, r3, #2
   2cfd0:	18fb      	adds	r3, r7, r3
   2cfd2:	681b      	ldr	r3, [r3, #0]
   2cfd4:	3314      	adds	r3, #20
   2cfd6:	781b      	ldrb	r3, [r3, #0]
   2cfd8:	b21b      	sxth	r3, r3
   2cfda:	4313      	orrs	r3, r2
   2cfdc:	b21b      	sxth	r3, r3
   2cfde:	b29b      	uxth	r3, r3
   2cfe0:	041b      	lsls	r3, r3, #16
   2cfe2:	2292      	movs	r2, #146	; 0x92
   2cfe4:	0092      	lsls	r2, r2, #2
   2cfe6:	18ba      	adds	r2, r7, r2
   2cfe8:	6812      	ldr	r2, [r2, #0]
   2cfea:	321b      	adds	r2, #27
   2cfec:	7812      	ldrb	r2, [r2, #0]
   2cfee:	0212      	lsls	r2, r2, #8
   2cff0:	b211      	sxth	r1, r2
   2cff2:	2292      	movs	r2, #146	; 0x92
   2cff4:	0092      	lsls	r2, r2, #2
   2cff6:	18ba      	adds	r2, r7, r2
   2cff8:	6812      	ldr	r2, [r2, #0]
   2cffa:	321a      	adds	r2, #26
   2cffc:	7812      	ldrb	r2, [r2, #0]
   2cffe:	b212      	sxth	r2, r2
   2d000:	430a      	orrs	r2, r1
   2d002:	b212      	sxth	r2, r2
   2d004:	b292      	uxth	r2, r2
   2d006:	431a      	orrs	r2, r3
   2d008:	68fb      	ldr	r3, [r7, #12]
   2d00a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d00c:	2392      	movs	r3, #146	; 0x92
   2d00e:	009b      	lsls	r3, r3, #2
   2d010:	18fb      	adds	r3, r7, r3
   2d012:	681b      	ldr	r3, [r3, #0]
   2d014:	331f      	adds	r3, #31
   2d016:	781b      	ldrb	r3, [r3, #0]
   2d018:	061a      	lsls	r2, r3, #24
   2d01a:	2392      	movs	r3, #146	; 0x92
   2d01c:	009b      	lsls	r3, r3, #2
   2d01e:	18fb      	adds	r3, r7, r3
   2d020:	681b      	ldr	r3, [r3, #0]
   2d022:	331e      	adds	r3, #30
   2d024:	781b      	ldrb	r3, [r3, #0]
   2d026:	041b      	lsls	r3, r3, #16
   2d028:	4313      	orrs	r3, r2
   2d02a:	2292      	movs	r2, #146	; 0x92
   2d02c:	0092      	lsls	r2, r2, #2
   2d02e:	18ba      	adds	r2, r7, r2
   2d030:	6812      	ldr	r2, [r2, #0]
   2d032:	321d      	adds	r2, #29
   2d034:	7812      	ldrb	r2, [r2, #0]
   2d036:	0212      	lsls	r2, r2, #8
   2d038:	4313      	orrs	r3, r2
   2d03a:	2292      	movs	r2, #146	; 0x92
   2d03c:	0092      	lsls	r2, r2, #2
   2d03e:	18ba      	adds	r2, r7, r2
   2d040:	6812      	ldr	r2, [r2, #0]
   2d042:	321c      	adds	r2, #28
   2d044:	7812      	ldrb	r2, [r2, #0]
   2d046:	431a      	orrs	r2, r3
   2d048:	68fb      	ldr	r3, [r7, #12]
   2d04a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d04c:	68fb      	ldr	r3, [r7, #12]
   2d04e:	2200      	movs	r2, #0
   2d050:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d052:	68fb      	ldr	r3, [r7, #12]
   2d054:	2200      	movs	r2, #0
   2d056:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d058:	2387      	movs	r3, #135	; 0x87
   2d05a:	009b      	lsls	r3, r3, #2
   2d05c:	18fb      	adds	r3, r7, r3
   2d05e:	681a      	ldr	r2, [r3, #0]
   2d060:	68fb      	ldr	r3, [r7, #12]
   2d062:	601a      	str	r2, [r3, #0]
   2d064:	2387      	movs	r3, #135	; 0x87
   2d066:	009b      	lsls	r3, r3, #2
   2d068:	18fb      	adds	r3, r7, r3
   2d06a:	681b      	ldr	r3, [r3, #0]
   2d06c:	88da      	ldrh	r2, [r3, #6]
   2d06e:	68fb      	ldr	r3, [r7, #12]
   2d070:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d072:	4b05      	ldr	r3, [pc, #20]	; (2d088 <f_open+0x52c>)
   2d074:	18fb      	adds	r3, r7, r3
   2d076:	781b      	ldrb	r3, [r3, #0]
}
   2d078:	0018      	movs	r0, r3
   2d07a:	46bd      	mov	sp, r7
   2d07c:	2395      	movs	r3, #149	; 0x95
   2d07e:	009b      	lsls	r3, r3, #2
   2d080:	449d      	add	sp, r3
   2d082:	bd90      	pop	{r4, r7, pc}
   2d084:	fffffdb7 	.word	0xfffffdb7
   2d088:	0000024f 	.word	0x0000024f

0002d08c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d08c:	b590      	push	{r4, r7, lr}
   2d08e:	b08b      	sub	sp, #44	; 0x2c
   2d090:	af00      	add	r7, sp, #0
   2d092:	60f8      	str	r0, [r7, #12]
   2d094:	60b9      	str	r1, [r7, #8]
   2d096:	607a      	str	r2, [r7, #4]
   2d098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d09a:	68bb      	ldr	r3, [r7, #8]
   2d09c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d09e:	683b      	ldr	r3, [r7, #0]
   2d0a0:	2200      	movs	r2, #0
   2d0a2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d0a4:	68fb      	ldr	r3, [r7, #12]
   2d0a6:	681a      	ldr	r2, [r3, #0]
   2d0a8:	68fb      	ldr	r3, [r7, #12]
   2d0aa:	889b      	ldrh	r3, [r3, #4]
   2d0ac:	2117      	movs	r1, #23
   2d0ae:	187c      	adds	r4, r7, r1
   2d0b0:	0019      	movs	r1, r3
   2d0b2:	0010      	movs	r0, r2
   2d0b4:	4bc3      	ldr	r3, [pc, #780]	; (2d3c4 <f_write+0x338>)
   2d0b6:	4798      	blx	r3
   2d0b8:	0003      	movs	r3, r0
   2d0ba:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d0bc:	2317      	movs	r3, #23
   2d0be:	18fb      	adds	r3, r7, r3
   2d0c0:	781b      	ldrb	r3, [r3, #0]
   2d0c2:	2b00      	cmp	r3, #0
   2d0c4:	d003      	beq.n	2d0ce <f_write+0x42>
   2d0c6:	2317      	movs	r3, #23
   2d0c8:	18fb      	adds	r3, r7, r3
   2d0ca:	781b      	ldrb	r3, [r3, #0]
   2d0cc:	e176      	b.n	2d3bc <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d0ce:	68fb      	ldr	r3, [r7, #12]
   2d0d0:	799b      	ldrb	r3, [r3, #6]
   2d0d2:	b25b      	sxtb	r3, r3
   2d0d4:	2b00      	cmp	r3, #0
   2d0d6:	da01      	bge.n	2d0dc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d0d8:	2302      	movs	r3, #2
   2d0da:	e16f      	b.n	2d3bc <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d0dc:	68fb      	ldr	r3, [r7, #12]
   2d0de:	799b      	ldrb	r3, [r3, #6]
   2d0e0:	001a      	movs	r2, r3
   2d0e2:	2302      	movs	r3, #2
   2d0e4:	4013      	ands	r3, r2
   2d0e6:	d101      	bne.n	2d0ec <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d0e8:	2307      	movs	r3, #7
   2d0ea:	e167      	b.n	2d3bc <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d0ec:	68fb      	ldr	r3, [r7, #12]
   2d0ee:	68da      	ldr	r2, [r3, #12]
   2d0f0:	687b      	ldr	r3, [r7, #4]
   2d0f2:	18d2      	adds	r2, r2, r3
   2d0f4:	68fb      	ldr	r3, [r7, #12]
   2d0f6:	68db      	ldr	r3, [r3, #12]
   2d0f8:	429a      	cmp	r2, r3
   2d0fa:	d300      	bcc.n	2d0fe <f_write+0x72>
   2d0fc:	e146      	b.n	2d38c <f_write+0x300>
   2d0fe:	2300      	movs	r3, #0
   2d100:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d102:	e143      	b.n	2d38c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d104:	68fb      	ldr	r3, [r7, #12]
   2d106:	689b      	ldr	r3, [r3, #8]
   2d108:	05db      	lsls	r3, r3, #23
   2d10a:	0ddb      	lsrs	r3, r3, #23
   2d10c:	d000      	beq.n	2d110 <f_write+0x84>
   2d10e:	e0f6      	b.n	2d2fe <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d110:	68fb      	ldr	r3, [r7, #12]
   2d112:	689b      	ldr	r3, [r3, #8]
   2d114:	0a5b      	lsrs	r3, r3, #9
   2d116:	b2da      	uxtb	r2, r3
   2d118:	68fb      	ldr	r3, [r7, #12]
   2d11a:	681b      	ldr	r3, [r3, #0]
   2d11c:	789b      	ldrb	r3, [r3, #2]
   2d11e:	3b01      	subs	r3, #1
   2d120:	b2d9      	uxtb	r1, r3
   2d122:	2316      	movs	r3, #22
   2d124:	18fb      	adds	r3, r7, r3
   2d126:	400a      	ands	r2, r1
   2d128:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d12a:	2316      	movs	r3, #22
   2d12c:	18fb      	adds	r3, r7, r3
   2d12e:	781b      	ldrb	r3, [r3, #0]
   2d130:	2b00      	cmp	r3, #0
   2d132:	d140      	bne.n	2d1b6 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d134:	68fb      	ldr	r3, [r7, #12]
   2d136:	689b      	ldr	r3, [r3, #8]
   2d138:	2b00      	cmp	r3, #0
   2d13a:	d111      	bne.n	2d160 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d13c:	68fb      	ldr	r3, [r7, #12]
   2d13e:	691b      	ldr	r3, [r3, #16]
   2d140:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d144:	2b00      	cmp	r3, #0
   2d146:	d115      	bne.n	2d174 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d148:	68fb      	ldr	r3, [r7, #12]
   2d14a:	681b      	ldr	r3, [r3, #0]
   2d14c:	2100      	movs	r1, #0
   2d14e:	0018      	movs	r0, r3
   2d150:	4b9d      	ldr	r3, [pc, #628]	; (2d3c8 <f_write+0x33c>)
   2d152:	4798      	blx	r3
   2d154:	0003      	movs	r3, r0
   2d156:	627b      	str	r3, [r7, #36]	; 0x24
   2d158:	68fb      	ldr	r3, [r7, #12]
   2d15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d15c:	611a      	str	r2, [r3, #16]
   2d15e:	e009      	b.n	2d174 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d160:	68fb      	ldr	r3, [r7, #12]
   2d162:	681a      	ldr	r2, [r3, #0]
   2d164:	68fb      	ldr	r3, [r7, #12]
   2d166:	695b      	ldr	r3, [r3, #20]
   2d168:	0019      	movs	r1, r3
   2d16a:	0010      	movs	r0, r2
   2d16c:	4b96      	ldr	r3, [pc, #600]	; (2d3c8 <f_write+0x33c>)
   2d16e:	4798      	blx	r3
   2d170:	0003      	movs	r3, r0
   2d172:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d176:	2b00      	cmp	r3, #0
   2d178:	d100      	bne.n	2d17c <f_write+0xf0>
   2d17a:	e10c      	b.n	2d396 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d17e:	2b01      	cmp	r3, #1
   2d180:	d109      	bne.n	2d196 <f_write+0x10a>
   2d182:	68fb      	ldr	r3, [r7, #12]
   2d184:	799b      	ldrb	r3, [r3, #6]
   2d186:	2280      	movs	r2, #128	; 0x80
   2d188:	4252      	negs	r2, r2
   2d18a:	4313      	orrs	r3, r2
   2d18c:	b2da      	uxtb	r2, r3
   2d18e:	68fb      	ldr	r3, [r7, #12]
   2d190:	719a      	strb	r2, [r3, #6]
   2d192:	2302      	movs	r3, #2
   2d194:	e112      	b.n	2d3bc <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d198:	3301      	adds	r3, #1
   2d19a:	d109      	bne.n	2d1b0 <f_write+0x124>
   2d19c:	68fb      	ldr	r3, [r7, #12]
   2d19e:	799b      	ldrb	r3, [r3, #6]
   2d1a0:	2280      	movs	r2, #128	; 0x80
   2d1a2:	4252      	negs	r2, r2
   2d1a4:	4313      	orrs	r3, r2
   2d1a6:	b2da      	uxtb	r2, r3
   2d1a8:	68fb      	ldr	r3, [r7, #12]
   2d1aa:	719a      	strb	r2, [r3, #6]
   2d1ac:	2301      	movs	r3, #1
   2d1ae:	e105      	b.n	2d3bc <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d1b0:	68fb      	ldr	r3, [r7, #12]
   2d1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d1b4:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d1b6:	68fb      	ldr	r3, [r7, #12]
   2d1b8:	681b      	ldr	r3, [r3, #0]
   2d1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d1bc:	68fb      	ldr	r3, [r7, #12]
   2d1be:	699b      	ldr	r3, [r3, #24]
   2d1c0:	429a      	cmp	r2, r3
   2d1c2:	d111      	bne.n	2d1e8 <f_write+0x15c>
   2d1c4:	68fb      	ldr	r3, [r7, #12]
   2d1c6:	681b      	ldr	r3, [r3, #0]
   2d1c8:	2100      	movs	r1, #0
   2d1ca:	0018      	movs	r0, r3
   2d1cc:	4b7f      	ldr	r3, [pc, #508]	; (2d3cc <f_write+0x340>)
   2d1ce:	4798      	blx	r3
   2d1d0:	1e03      	subs	r3, r0, #0
   2d1d2:	d009      	beq.n	2d1e8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d1d4:	68fb      	ldr	r3, [r7, #12]
   2d1d6:	799b      	ldrb	r3, [r3, #6]
   2d1d8:	2280      	movs	r2, #128	; 0x80
   2d1da:	4252      	negs	r2, r2
   2d1dc:	4313      	orrs	r3, r2
   2d1de:	b2da      	uxtb	r2, r3
   2d1e0:	68fb      	ldr	r3, [r7, #12]
   2d1e2:	719a      	strb	r2, [r3, #6]
   2d1e4:	2301      	movs	r3, #1
   2d1e6:	e0e9      	b.n	2d3bc <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d1e8:	68fb      	ldr	r3, [r7, #12]
   2d1ea:	681a      	ldr	r2, [r3, #0]
   2d1ec:	68fb      	ldr	r3, [r7, #12]
   2d1ee:	695b      	ldr	r3, [r3, #20]
   2d1f0:	0019      	movs	r1, r3
   2d1f2:	0010      	movs	r0, r2
   2d1f4:	4b76      	ldr	r3, [pc, #472]	; (2d3d0 <f_write+0x344>)
   2d1f6:	4798      	blx	r3
   2d1f8:	0003      	movs	r3, r0
   2d1fa:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d1fc:	693b      	ldr	r3, [r7, #16]
   2d1fe:	2b00      	cmp	r3, #0
   2d200:	d109      	bne.n	2d216 <f_write+0x18a>
   2d202:	68fb      	ldr	r3, [r7, #12]
   2d204:	799b      	ldrb	r3, [r3, #6]
   2d206:	2280      	movs	r2, #128	; 0x80
   2d208:	4252      	negs	r2, r2
   2d20a:	4313      	orrs	r3, r2
   2d20c:	b2da      	uxtb	r2, r3
   2d20e:	68fb      	ldr	r3, [r7, #12]
   2d210:	719a      	strb	r2, [r3, #6]
   2d212:	2302      	movs	r3, #2
   2d214:	e0d2      	b.n	2d3bc <f_write+0x330>
			sect += csect;
   2d216:	2316      	movs	r3, #22
   2d218:	18fb      	adds	r3, r7, r3
   2d21a:	781b      	ldrb	r3, [r3, #0]
   2d21c:	693a      	ldr	r2, [r7, #16]
   2d21e:	18d3      	adds	r3, r2, r3
   2d220:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d222:	687b      	ldr	r3, [r7, #4]
   2d224:	0a5b      	lsrs	r3, r3, #9
   2d226:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d228:	69fb      	ldr	r3, [r7, #28]
   2d22a:	2b00      	cmp	r3, #0
   2d22c:	d048      	beq.n	2d2c0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d22e:	2316      	movs	r3, #22
   2d230:	18fb      	adds	r3, r7, r3
   2d232:	781a      	ldrb	r2, [r3, #0]
   2d234:	69fb      	ldr	r3, [r7, #28]
   2d236:	18d2      	adds	r2, r2, r3
   2d238:	68fb      	ldr	r3, [r7, #12]
   2d23a:	681b      	ldr	r3, [r3, #0]
   2d23c:	789b      	ldrb	r3, [r3, #2]
   2d23e:	429a      	cmp	r2, r3
   2d240:	d908      	bls.n	2d254 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d242:	68fb      	ldr	r3, [r7, #12]
   2d244:	681b      	ldr	r3, [r3, #0]
   2d246:	789b      	ldrb	r3, [r3, #2]
   2d248:	001a      	movs	r2, r3
   2d24a:	2316      	movs	r3, #22
   2d24c:	18fb      	adds	r3, r7, r3
   2d24e:	781b      	ldrb	r3, [r3, #0]
   2d250:	1ad3      	subs	r3, r2, r3
   2d252:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d254:	68fb      	ldr	r3, [r7, #12]
   2d256:	681b      	ldr	r3, [r3, #0]
   2d258:	7858      	ldrb	r0, [r3, #1]
   2d25a:	69fb      	ldr	r3, [r7, #28]
   2d25c:	b2db      	uxtb	r3, r3
   2d25e:	693a      	ldr	r2, [r7, #16]
   2d260:	69b9      	ldr	r1, [r7, #24]
   2d262:	4c5c      	ldr	r4, [pc, #368]	; (2d3d4 <f_write+0x348>)
   2d264:	47a0      	blx	r4
   2d266:	1e03      	subs	r3, r0, #0
   2d268:	d009      	beq.n	2d27e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d26a:	68fb      	ldr	r3, [r7, #12]
   2d26c:	799b      	ldrb	r3, [r3, #6]
   2d26e:	2280      	movs	r2, #128	; 0x80
   2d270:	4252      	negs	r2, r2
   2d272:	4313      	orrs	r3, r2
   2d274:	b2da      	uxtb	r2, r3
   2d276:	68fb      	ldr	r3, [r7, #12]
   2d278:	719a      	strb	r2, [r3, #6]
   2d27a:	2301      	movs	r3, #1
   2d27c:	e09e      	b.n	2d3bc <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d27e:	68fb      	ldr	r3, [r7, #12]
   2d280:	681b      	ldr	r3, [r3, #0]
   2d282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d284:	693b      	ldr	r3, [r7, #16]
   2d286:	1ad2      	subs	r2, r2, r3
   2d288:	69fb      	ldr	r3, [r7, #28]
   2d28a:	429a      	cmp	r2, r3
   2d28c:	d214      	bcs.n	2d2b8 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2d28e:	68fb      	ldr	r3, [r7, #12]
   2d290:	681b      	ldr	r3, [r3, #0]
   2d292:	3330      	adds	r3, #48	; 0x30
   2d294:	0018      	movs	r0, r3
   2d296:	68fb      	ldr	r3, [r7, #12]
   2d298:	681b      	ldr	r3, [r3, #0]
   2d29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d29c:	693b      	ldr	r3, [r7, #16]
   2d29e:	1ad3      	subs	r3, r2, r3
   2d2a0:	025b      	lsls	r3, r3, #9
   2d2a2:	69ba      	ldr	r2, [r7, #24]
   2d2a4:	18d1      	adds	r1, r2, r3
   2d2a6:	2380      	movs	r3, #128	; 0x80
   2d2a8:	009b      	lsls	r3, r3, #2
   2d2aa:	001a      	movs	r2, r3
   2d2ac:	4b4a      	ldr	r3, [pc, #296]	; (2d3d8 <f_write+0x34c>)
   2d2ae:	4798      	blx	r3
					fp->fs->wflag = 0;
   2d2b0:	68fb      	ldr	r3, [r7, #12]
   2d2b2:	681b      	ldr	r3, [r3, #0]
   2d2b4:	2200      	movs	r2, #0
   2d2b6:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2d2b8:	69fb      	ldr	r3, [r7, #28]
   2d2ba:	025b      	lsls	r3, r3, #9
   2d2bc:	623b      	str	r3, [r7, #32]
				continue;
   2d2be:	e051      	b.n	2d364 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2d2c0:	68fb      	ldr	r3, [r7, #12]
   2d2c2:	689a      	ldr	r2, [r3, #8]
   2d2c4:	68fb      	ldr	r3, [r7, #12]
   2d2c6:	68db      	ldr	r3, [r3, #12]
   2d2c8:	429a      	cmp	r2, r3
   2d2ca:	d315      	bcc.n	2d2f8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2d2cc:	68fb      	ldr	r3, [r7, #12]
   2d2ce:	681b      	ldr	r3, [r3, #0]
   2d2d0:	2100      	movs	r1, #0
   2d2d2:	0018      	movs	r0, r3
   2d2d4:	4b3d      	ldr	r3, [pc, #244]	; (2d3cc <f_write+0x340>)
   2d2d6:	4798      	blx	r3
   2d2d8:	1e03      	subs	r3, r0, #0
   2d2da:	d009      	beq.n	2d2f0 <f_write+0x264>
   2d2dc:	68fb      	ldr	r3, [r7, #12]
   2d2de:	799b      	ldrb	r3, [r3, #6]
   2d2e0:	2280      	movs	r2, #128	; 0x80
   2d2e2:	4252      	negs	r2, r2
   2d2e4:	4313      	orrs	r3, r2
   2d2e6:	b2da      	uxtb	r2, r3
   2d2e8:	68fb      	ldr	r3, [r7, #12]
   2d2ea:	719a      	strb	r2, [r3, #6]
   2d2ec:	2301      	movs	r3, #1
   2d2ee:	e065      	b.n	2d3bc <f_write+0x330>
				fp->fs->winsect = sect;
   2d2f0:	68fb      	ldr	r3, [r7, #12]
   2d2f2:	681b      	ldr	r3, [r3, #0]
   2d2f4:	693a      	ldr	r2, [r7, #16]
   2d2f6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2d2f8:	68fb      	ldr	r3, [r7, #12]
   2d2fa:	693a      	ldr	r2, [r7, #16]
   2d2fc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2d2fe:	68fb      	ldr	r3, [r7, #12]
   2d300:	689b      	ldr	r3, [r3, #8]
   2d302:	05db      	lsls	r3, r3, #23
   2d304:	0ddb      	lsrs	r3, r3, #23
   2d306:	2280      	movs	r2, #128	; 0x80
   2d308:	0092      	lsls	r2, r2, #2
   2d30a:	1ad3      	subs	r3, r2, r3
   2d30c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2d30e:	6a3a      	ldr	r2, [r7, #32]
   2d310:	687b      	ldr	r3, [r7, #4]
   2d312:	429a      	cmp	r2, r3
   2d314:	d901      	bls.n	2d31a <f_write+0x28e>
   2d316:	687b      	ldr	r3, [r7, #4]
   2d318:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2d31a:	68fb      	ldr	r3, [r7, #12]
   2d31c:	681a      	ldr	r2, [r3, #0]
   2d31e:	68fb      	ldr	r3, [r7, #12]
   2d320:	699b      	ldr	r3, [r3, #24]
   2d322:	0019      	movs	r1, r3
   2d324:	0010      	movs	r0, r2
   2d326:	4b29      	ldr	r3, [pc, #164]	; (2d3cc <f_write+0x340>)
   2d328:	4798      	blx	r3
   2d32a:	1e03      	subs	r3, r0, #0
   2d32c:	d009      	beq.n	2d342 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2d32e:	68fb      	ldr	r3, [r7, #12]
   2d330:	799b      	ldrb	r3, [r3, #6]
   2d332:	2280      	movs	r2, #128	; 0x80
   2d334:	4252      	negs	r2, r2
   2d336:	4313      	orrs	r3, r2
   2d338:	b2da      	uxtb	r2, r3
   2d33a:	68fb      	ldr	r3, [r7, #12]
   2d33c:	719a      	strb	r2, [r3, #6]
   2d33e:	2301      	movs	r3, #1
   2d340:	e03c      	b.n	2d3bc <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2d342:	68fb      	ldr	r3, [r7, #12]
   2d344:	681a      	ldr	r2, [r3, #0]
   2d346:	68fb      	ldr	r3, [r7, #12]
   2d348:	689b      	ldr	r3, [r3, #8]
   2d34a:	05db      	lsls	r3, r3, #23
   2d34c:	0ddb      	lsrs	r3, r3, #23
   2d34e:	3330      	adds	r3, #48	; 0x30
   2d350:	18d3      	adds	r3, r2, r3
   2d352:	6a3a      	ldr	r2, [r7, #32]
   2d354:	69b9      	ldr	r1, [r7, #24]
   2d356:	0018      	movs	r0, r3
   2d358:	4b1f      	ldr	r3, [pc, #124]	; (2d3d8 <f_write+0x34c>)
   2d35a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2d35c:	68fb      	ldr	r3, [r7, #12]
   2d35e:	681b      	ldr	r3, [r3, #0]
   2d360:	2201      	movs	r2, #1
   2d362:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2d364:	69ba      	ldr	r2, [r7, #24]
   2d366:	6a3b      	ldr	r3, [r7, #32]
   2d368:	18d3      	adds	r3, r2, r3
   2d36a:	61bb      	str	r3, [r7, #24]
   2d36c:	68fb      	ldr	r3, [r7, #12]
   2d36e:	689a      	ldr	r2, [r3, #8]
   2d370:	6a3b      	ldr	r3, [r7, #32]
   2d372:	18d2      	adds	r2, r2, r3
   2d374:	68fb      	ldr	r3, [r7, #12]
   2d376:	609a      	str	r2, [r3, #8]
   2d378:	683b      	ldr	r3, [r7, #0]
   2d37a:	681a      	ldr	r2, [r3, #0]
   2d37c:	6a3b      	ldr	r3, [r7, #32]
   2d37e:	18d2      	adds	r2, r2, r3
   2d380:	683b      	ldr	r3, [r7, #0]
   2d382:	601a      	str	r2, [r3, #0]
   2d384:	687a      	ldr	r2, [r7, #4]
   2d386:	6a3b      	ldr	r3, [r7, #32]
   2d388:	1ad3      	subs	r3, r2, r3
   2d38a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2d38c:	687b      	ldr	r3, [r7, #4]
   2d38e:	2b00      	cmp	r3, #0
   2d390:	d000      	beq.n	2d394 <f_write+0x308>
   2d392:	e6b7      	b.n	2d104 <f_write+0x78>
   2d394:	e000      	b.n	2d398 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d396:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2d398:	68fb      	ldr	r3, [r7, #12]
   2d39a:	689a      	ldr	r2, [r3, #8]
   2d39c:	68fb      	ldr	r3, [r7, #12]
   2d39e:	68db      	ldr	r3, [r3, #12]
   2d3a0:	429a      	cmp	r2, r3
   2d3a2:	d903      	bls.n	2d3ac <f_write+0x320>
   2d3a4:	68fb      	ldr	r3, [r7, #12]
   2d3a6:	689a      	ldr	r2, [r3, #8]
   2d3a8:	68fb      	ldr	r3, [r7, #12]
   2d3aa:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2d3ac:	68fb      	ldr	r3, [r7, #12]
   2d3ae:	799b      	ldrb	r3, [r3, #6]
   2d3b0:	2220      	movs	r2, #32
   2d3b2:	4313      	orrs	r3, r2
   2d3b4:	b2da      	uxtb	r2, r3
   2d3b6:	68fb      	ldr	r3, [r7, #12]
   2d3b8:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2d3ba:	2300      	movs	r3, #0
}
   2d3bc:	0018      	movs	r0, r3
   2d3be:	46bd      	mov	sp, r7
   2d3c0:	b00b      	add	sp, #44	; 0x2c
   2d3c2:	bd90      	pop	{r4, r7, pc}
   2d3c4:	0002cab1 	.word	0x0002cab1
   2d3c8:	0002b13d 	.word	0x0002b13d
   2d3cc:	0002aa35 	.word	0x0002aa35
   2d3d0:	0002ac95 	.word	0x0002ac95
   2d3d4:	0002a721 	.word	0x0002a721
   2d3d8:	0002a951 	.word	0x0002a951

0002d3dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2d3dc:	b590      	push	{r4, r7, lr}
   2d3de:	b087      	sub	sp, #28
   2d3e0:	af00      	add	r7, sp, #0
   2d3e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2d3e4:	687b      	ldr	r3, [r7, #4]
   2d3e6:	681a      	ldr	r2, [r3, #0]
   2d3e8:	687b      	ldr	r3, [r7, #4]
   2d3ea:	889b      	ldrh	r3, [r3, #4]
   2d3ec:	2117      	movs	r1, #23
   2d3ee:	187c      	adds	r4, r7, r1
   2d3f0:	0019      	movs	r1, r3
   2d3f2:	0010      	movs	r0, r2
   2d3f4:	4b55      	ldr	r3, [pc, #340]	; (2d54c <f_sync+0x170>)
   2d3f6:	4798      	blx	r3
   2d3f8:	0003      	movs	r3, r0
   2d3fa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2d3fc:	2317      	movs	r3, #23
   2d3fe:	18fb      	adds	r3, r7, r3
   2d400:	781b      	ldrb	r3, [r3, #0]
   2d402:	2b00      	cmp	r3, #0
   2d404:	d000      	beq.n	2d408 <f_sync+0x2c>
   2d406:	e09a      	b.n	2d53e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2d408:	687b      	ldr	r3, [r7, #4]
   2d40a:	799b      	ldrb	r3, [r3, #6]
   2d40c:	001a      	movs	r2, r3
   2d40e:	2320      	movs	r3, #32
   2d410:	4013      	ands	r3, r2
   2d412:	d100      	bne.n	2d416 <f_sync+0x3a>
   2d414:	e093      	b.n	2d53e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2d416:	687b      	ldr	r3, [r7, #4]
   2d418:	681a      	ldr	r2, [r3, #0]
   2d41a:	687b      	ldr	r3, [r7, #4]
   2d41c:	69db      	ldr	r3, [r3, #28]
   2d41e:	2117      	movs	r1, #23
   2d420:	187c      	adds	r4, r7, r1
   2d422:	0019      	movs	r1, r3
   2d424:	0010      	movs	r0, r2
   2d426:	4b4a      	ldr	r3, [pc, #296]	; (2d550 <f_sync+0x174>)
   2d428:	4798      	blx	r3
   2d42a:	0003      	movs	r3, r0
   2d42c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2d42e:	2317      	movs	r3, #23
   2d430:	18fb      	adds	r3, r7, r3
   2d432:	781b      	ldrb	r3, [r3, #0]
   2d434:	2b00      	cmp	r3, #0
   2d436:	d000      	beq.n	2d43a <f_sync+0x5e>
   2d438:	e081      	b.n	2d53e <f_sync+0x162>
				dir = fp->dir_ptr;
   2d43a:	687b      	ldr	r3, [r7, #4]
   2d43c:	6a1b      	ldr	r3, [r3, #32]
   2d43e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2d440:	693b      	ldr	r3, [r7, #16]
   2d442:	330b      	adds	r3, #11
   2d444:	693a      	ldr	r2, [r7, #16]
   2d446:	320b      	adds	r2, #11
   2d448:	7812      	ldrb	r2, [r2, #0]
   2d44a:	2120      	movs	r1, #32
   2d44c:	430a      	orrs	r2, r1
   2d44e:	b2d2      	uxtb	r2, r2
   2d450:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2d452:	693b      	ldr	r3, [r7, #16]
   2d454:	331c      	adds	r3, #28
   2d456:	001a      	movs	r2, r3
   2d458:	687b      	ldr	r3, [r7, #4]
   2d45a:	68db      	ldr	r3, [r3, #12]
   2d45c:	b2db      	uxtb	r3, r3
   2d45e:	7013      	strb	r3, [r2, #0]
   2d460:	693b      	ldr	r3, [r7, #16]
   2d462:	331d      	adds	r3, #29
   2d464:	001a      	movs	r2, r3
   2d466:	687b      	ldr	r3, [r7, #4]
   2d468:	68db      	ldr	r3, [r3, #12]
   2d46a:	b29b      	uxth	r3, r3
   2d46c:	0a1b      	lsrs	r3, r3, #8
   2d46e:	b29b      	uxth	r3, r3
   2d470:	b2db      	uxtb	r3, r3
   2d472:	7013      	strb	r3, [r2, #0]
   2d474:	693b      	ldr	r3, [r7, #16]
   2d476:	331e      	adds	r3, #30
   2d478:	001a      	movs	r2, r3
   2d47a:	687b      	ldr	r3, [r7, #4]
   2d47c:	68db      	ldr	r3, [r3, #12]
   2d47e:	0c1b      	lsrs	r3, r3, #16
   2d480:	b2db      	uxtb	r3, r3
   2d482:	7013      	strb	r3, [r2, #0]
   2d484:	693b      	ldr	r3, [r7, #16]
   2d486:	331f      	adds	r3, #31
   2d488:	001a      	movs	r2, r3
   2d48a:	687b      	ldr	r3, [r7, #4]
   2d48c:	68db      	ldr	r3, [r3, #12]
   2d48e:	0e1b      	lsrs	r3, r3, #24
   2d490:	b2db      	uxtb	r3, r3
   2d492:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2d494:	693b      	ldr	r3, [r7, #16]
   2d496:	331a      	adds	r3, #26
   2d498:	001a      	movs	r2, r3
   2d49a:	687b      	ldr	r3, [r7, #4]
   2d49c:	691b      	ldr	r3, [r3, #16]
   2d49e:	b2db      	uxtb	r3, r3
   2d4a0:	7013      	strb	r3, [r2, #0]
   2d4a2:	693b      	ldr	r3, [r7, #16]
   2d4a4:	331b      	adds	r3, #27
   2d4a6:	001a      	movs	r2, r3
   2d4a8:	687b      	ldr	r3, [r7, #4]
   2d4aa:	691b      	ldr	r3, [r3, #16]
   2d4ac:	b29b      	uxth	r3, r3
   2d4ae:	0a1b      	lsrs	r3, r3, #8
   2d4b0:	b29b      	uxth	r3, r3
   2d4b2:	b2db      	uxtb	r3, r3
   2d4b4:	7013      	strb	r3, [r2, #0]
   2d4b6:	693b      	ldr	r3, [r7, #16]
   2d4b8:	3314      	adds	r3, #20
   2d4ba:	001a      	movs	r2, r3
   2d4bc:	687b      	ldr	r3, [r7, #4]
   2d4be:	691b      	ldr	r3, [r3, #16]
   2d4c0:	0c1b      	lsrs	r3, r3, #16
   2d4c2:	b2db      	uxtb	r3, r3
   2d4c4:	7013      	strb	r3, [r2, #0]
   2d4c6:	693b      	ldr	r3, [r7, #16]
   2d4c8:	3315      	adds	r3, #21
   2d4ca:	001a      	movs	r2, r3
   2d4cc:	687b      	ldr	r3, [r7, #4]
   2d4ce:	691b      	ldr	r3, [r3, #16]
   2d4d0:	0c1b      	lsrs	r3, r3, #16
   2d4d2:	b29b      	uxth	r3, r3
   2d4d4:	0a1b      	lsrs	r3, r3, #8
   2d4d6:	b29b      	uxth	r3, r3
   2d4d8:	b2db      	uxtb	r3, r3
   2d4da:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2d4dc:	4b1d      	ldr	r3, [pc, #116]	; (2d554 <f_sync+0x178>)
   2d4de:	4798      	blx	r3
   2d4e0:	0003      	movs	r3, r0
   2d4e2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2d4e4:	693b      	ldr	r3, [r7, #16]
   2d4e6:	3316      	adds	r3, #22
   2d4e8:	68fa      	ldr	r2, [r7, #12]
   2d4ea:	b2d2      	uxtb	r2, r2
   2d4ec:	701a      	strb	r2, [r3, #0]
   2d4ee:	693b      	ldr	r3, [r7, #16]
   2d4f0:	3317      	adds	r3, #23
   2d4f2:	68fa      	ldr	r2, [r7, #12]
   2d4f4:	b292      	uxth	r2, r2
   2d4f6:	0a12      	lsrs	r2, r2, #8
   2d4f8:	b292      	uxth	r2, r2
   2d4fa:	b2d2      	uxtb	r2, r2
   2d4fc:	701a      	strb	r2, [r3, #0]
   2d4fe:	693b      	ldr	r3, [r7, #16]
   2d500:	3318      	adds	r3, #24
   2d502:	68fa      	ldr	r2, [r7, #12]
   2d504:	0c12      	lsrs	r2, r2, #16
   2d506:	b2d2      	uxtb	r2, r2
   2d508:	701a      	strb	r2, [r3, #0]
   2d50a:	693b      	ldr	r3, [r7, #16]
   2d50c:	3319      	adds	r3, #25
   2d50e:	68fa      	ldr	r2, [r7, #12]
   2d510:	0e12      	lsrs	r2, r2, #24
   2d512:	b2d2      	uxtb	r2, r2
   2d514:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2d516:	687b      	ldr	r3, [r7, #4]
   2d518:	799b      	ldrb	r3, [r3, #6]
   2d51a:	2220      	movs	r2, #32
   2d51c:	4393      	bics	r3, r2
   2d51e:	b2da      	uxtb	r2, r3
   2d520:	687b      	ldr	r3, [r7, #4]
   2d522:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2d524:	687b      	ldr	r3, [r7, #4]
   2d526:	681b      	ldr	r3, [r3, #0]
   2d528:	2201      	movs	r2, #1
   2d52a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2d52c:	687b      	ldr	r3, [r7, #4]
   2d52e:	681b      	ldr	r3, [r3, #0]
   2d530:	2217      	movs	r2, #23
   2d532:	18bc      	adds	r4, r7, r2
   2d534:	0018      	movs	r0, r3
   2d536:	4b08      	ldr	r3, [pc, #32]	; (2d558 <f_sync+0x17c>)
   2d538:	4798      	blx	r3
   2d53a:	0003      	movs	r3, r0
   2d53c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2d53e:	2317      	movs	r3, #23
   2d540:	18fb      	adds	r3, r7, r3
   2d542:	781b      	ldrb	r3, [r3, #0]
}
   2d544:	0018      	movs	r0, r3
   2d546:	46bd      	mov	sp, r7
   2d548:	b007      	add	sp, #28
   2d54a:	bd90      	pop	{r4, r7, pc}
   2d54c:	0002cab1 	.word	0x0002cab1
   2d550:	0002aa35 	.word	0x0002aa35
   2d554:	0002a8f1 	.word	0x0002a8f1
   2d558:	0002aafd 	.word	0x0002aafd

0002d55c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2d55c:	b590      	push	{r4, r7, lr}
   2d55e:	b085      	sub	sp, #20
   2d560:	af00      	add	r7, sp, #0
   2d562:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2d564:	230f      	movs	r3, #15
   2d566:	18fc      	adds	r4, r7, r3
   2d568:	687b      	ldr	r3, [r7, #4]
   2d56a:	0018      	movs	r0, r3
   2d56c:	4b09      	ldr	r3, [pc, #36]	; (2d594 <f_close+0x38>)
   2d56e:	4798      	blx	r3
   2d570:	0003      	movs	r3, r0
   2d572:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2d574:	230f      	movs	r3, #15
   2d576:	18fb      	adds	r3, r7, r3
   2d578:	781b      	ldrb	r3, [r3, #0]
   2d57a:	2b00      	cmp	r3, #0
   2d57c:	d102      	bne.n	2d584 <f_close+0x28>
   2d57e:	687b      	ldr	r3, [r7, #4]
   2d580:	2200      	movs	r2, #0
   2d582:	601a      	str	r2, [r3, #0]
	return res;
   2d584:	230f      	movs	r3, #15
   2d586:	18fb      	adds	r3, r7, r3
   2d588:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2d58a:	0018      	movs	r0, r3
   2d58c:	46bd      	mov	sp, r7
   2d58e:	b005      	add	sp, #20
   2d590:	bd90      	pop	{r4, r7, pc}
   2d592:	46c0      	nop			; (mov r8, r8)
   2d594:	0002d3dd 	.word	0x0002d3dd

0002d598 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2d598:	b580      	push	{r7, lr}
   2d59a:	b084      	sub	sp, #16
   2d59c:	af00      	add	r7, sp, #0
   2d59e:	0002      	movs	r2, r0
   2d5a0:	6039      	str	r1, [r7, #0]
   2d5a2:	1dbb      	adds	r3, r7, #6
   2d5a4:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2d5a6:	1dbb      	adds	r3, r7, #6
   2d5a8:	881b      	ldrh	r3, [r3, #0]
   2d5aa:	2b7f      	cmp	r3, #127	; 0x7f
   2d5ac:	d805      	bhi.n	2d5ba <ff_convert+0x22>
		c = src;
   2d5ae:	230e      	movs	r3, #14
   2d5b0:	18fb      	adds	r3, r7, r3
   2d5b2:	1dba      	adds	r2, r7, #6
   2d5b4:	8812      	ldrh	r2, [r2, #0]
   2d5b6:	801a      	strh	r2, [r3, #0]
   2d5b8:	e03a      	b.n	2d630 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2d5ba:	683b      	ldr	r3, [r7, #0]
   2d5bc:	2b00      	cmp	r3, #0
   2d5be:	d010      	beq.n	2d5e2 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2d5c0:	1dbb      	adds	r3, r7, #6
   2d5c2:	881b      	ldrh	r3, [r3, #0]
   2d5c4:	2bff      	cmp	r3, #255	; 0xff
   2d5c6:	d807      	bhi.n	2d5d8 <ff_convert+0x40>
   2d5c8:	1dbb      	adds	r3, r7, #6
   2d5ca:	881b      	ldrh	r3, [r3, #0]
   2d5cc:	3b80      	subs	r3, #128	; 0x80
   2d5ce:	001a      	movs	r2, r3
   2d5d0:	4b1b      	ldr	r3, [pc, #108]	; (2d640 <ff_convert+0xa8>)
   2d5d2:	0052      	lsls	r2, r2, #1
   2d5d4:	5ad2      	ldrh	r2, [r2, r3]
   2d5d6:	e000      	b.n	2d5da <ff_convert+0x42>
   2d5d8:	2200      	movs	r2, #0
   2d5da:	230e      	movs	r3, #14
   2d5dc:	18fb      	adds	r3, r7, r3
   2d5de:	801a      	strh	r2, [r3, #0]
   2d5e0:	e026      	b.n	2d630 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2d5e2:	230e      	movs	r3, #14
   2d5e4:	18fb      	adds	r3, r7, r3
   2d5e6:	2200      	movs	r2, #0
   2d5e8:	801a      	strh	r2, [r3, #0]
   2d5ea:	e010      	b.n	2d60e <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2d5ec:	230e      	movs	r3, #14
   2d5ee:	18fb      	adds	r3, r7, r3
   2d5f0:	881a      	ldrh	r2, [r3, #0]
   2d5f2:	4b13      	ldr	r3, [pc, #76]	; (2d640 <ff_convert+0xa8>)
   2d5f4:	0052      	lsls	r2, r2, #1
   2d5f6:	5ad3      	ldrh	r3, [r2, r3]
   2d5f8:	1dba      	adds	r2, r7, #6
   2d5fa:	8812      	ldrh	r2, [r2, #0]
   2d5fc:	429a      	cmp	r2, r3
   2d5fe:	d00c      	beq.n	2d61a <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2d600:	230e      	movs	r3, #14
   2d602:	18fb      	adds	r3, r7, r3
   2d604:	881a      	ldrh	r2, [r3, #0]
   2d606:	230e      	movs	r3, #14
   2d608:	18fb      	adds	r3, r7, r3
   2d60a:	3201      	adds	r2, #1
   2d60c:	801a      	strh	r2, [r3, #0]
   2d60e:	230e      	movs	r3, #14
   2d610:	18fb      	adds	r3, r7, r3
   2d612:	881b      	ldrh	r3, [r3, #0]
   2d614:	2b7f      	cmp	r3, #127	; 0x7f
   2d616:	d9e9      	bls.n	2d5ec <ff_convert+0x54>
   2d618:	e000      	b.n	2d61c <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2d61a:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2d61c:	230e      	movs	r3, #14
   2d61e:	18fb      	adds	r3, r7, r3
   2d620:	881b      	ldrh	r3, [r3, #0]
   2d622:	3380      	adds	r3, #128	; 0x80
   2d624:	b29a      	uxth	r2, r3
   2d626:	230e      	movs	r3, #14
   2d628:	18fb      	adds	r3, r7, r3
   2d62a:	21ff      	movs	r1, #255	; 0xff
   2d62c:	400a      	ands	r2, r1
   2d62e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2d630:	230e      	movs	r3, #14
   2d632:	18fb      	adds	r3, r7, r3
   2d634:	881b      	ldrh	r3, [r3, #0]
}
   2d636:	0018      	movs	r0, r3
   2d638:	46bd      	mov	sp, r7
   2d63a:	b004      	add	sp, #16
   2d63c:	bd80      	pop	{r7, pc}
   2d63e:	46c0      	nop			; (mov r8, r8)
   2d640:	00039150 	.word	0x00039150

0002d644 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2d644:	b580      	push	{r7, lr}
   2d646:	b084      	sub	sp, #16
   2d648:	af00      	add	r7, sp, #0
   2d64a:	0002      	movs	r2, r0
   2d64c:	1dbb      	adds	r3, r7, #6
   2d64e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2d650:	2300      	movs	r3, #0
   2d652:	60fb      	str	r3, [r7, #12]
   2d654:	e002      	b.n	2d65c <ff_wtoupper+0x18>
   2d656:	68fb      	ldr	r3, [r7, #12]
   2d658:	3301      	adds	r3, #1
   2d65a:	60fb      	str	r3, [r7, #12]
   2d65c:	4b0f      	ldr	r3, [pc, #60]	; (2d69c <ff_wtoupper+0x58>)
   2d65e:	68fa      	ldr	r2, [r7, #12]
   2d660:	0052      	lsls	r2, r2, #1
   2d662:	5ad3      	ldrh	r3, [r2, r3]
   2d664:	2b00      	cmp	r3, #0
   2d666:	d007      	beq.n	2d678 <ff_wtoupper+0x34>
   2d668:	4b0c      	ldr	r3, [pc, #48]	; (2d69c <ff_wtoupper+0x58>)
   2d66a:	68fa      	ldr	r2, [r7, #12]
   2d66c:	0052      	lsls	r2, r2, #1
   2d66e:	5ad3      	ldrh	r3, [r2, r3]
   2d670:	1dba      	adds	r2, r7, #6
   2d672:	8812      	ldrh	r2, [r2, #0]
   2d674:	429a      	cmp	r2, r3
   2d676:	d1ee      	bne.n	2d656 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2d678:	4b08      	ldr	r3, [pc, #32]	; (2d69c <ff_wtoupper+0x58>)
   2d67a:	68fa      	ldr	r2, [r7, #12]
   2d67c:	0052      	lsls	r2, r2, #1
   2d67e:	5ad3      	ldrh	r3, [r2, r3]
   2d680:	2b00      	cmp	r3, #0
   2d682:	d004      	beq.n	2d68e <ff_wtoupper+0x4a>
   2d684:	4b06      	ldr	r3, [pc, #24]	; (2d6a0 <ff_wtoupper+0x5c>)
   2d686:	68fa      	ldr	r2, [r7, #12]
   2d688:	0052      	lsls	r2, r2, #1
   2d68a:	5ad3      	ldrh	r3, [r2, r3]
   2d68c:	e001      	b.n	2d692 <ff_wtoupper+0x4e>
   2d68e:	1dbb      	adds	r3, r7, #6
   2d690:	881b      	ldrh	r3, [r3, #0]
}
   2d692:	0018      	movs	r0, r3
   2d694:	46bd      	mov	sp, r7
   2d696:	b004      	add	sp, #16
   2d698:	bd80      	pop	{r7, pc}
   2d69a:	46c0      	nop			; (mov r8, r8)
   2d69c:	00039250 	.word	0x00039250
   2d6a0:	00039430 	.word	0x00039430

0002d6a4 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2d6a4:	b580      	push	{r7, lr}
   2d6a6:	b084      	sub	sp, #16
   2d6a8:	af00      	add	r7, sp, #0
   2d6aa:	60f8      	str	r0, [r7, #12]
   2d6ac:	60b9      	str	r1, [r7, #8]
   2d6ae:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2d6b0:	68fb      	ldr	r3, [r7, #12]
   2d6b2:	68ba      	ldr	r2, [r7, #8]
   2d6b4:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2d6b6:	68fb      	ldr	r3, [r7, #12]
   2d6b8:	687a      	ldr	r2, [r7, #4]
   2d6ba:	601a      	str	r2, [r3, #0]
}
   2d6bc:	46c0      	nop			; (mov r8, r8)
   2d6be:	46bd      	mov	sp, r7
   2d6c0:	b004      	add	sp, #16
   2d6c2:	bd80      	pop	{r7, pc}

0002d6c4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2d6c4:	b580      	push	{r7, lr}
   2d6c6:	b082      	sub	sp, #8
   2d6c8:	af00      	add	r7, sp, #0
   2d6ca:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2d6cc:	687b      	ldr	r3, [r7, #4]
   2d6ce:	681b      	ldr	r3, [r3, #0]
   2d6d0:	4a07      	ldr	r2, [pc, #28]	; (2d6f0 <getNextPacketId+0x2c>)
   2d6d2:	4293      	cmp	r3, r2
   2d6d4:	d003      	beq.n	2d6de <getNextPacketId+0x1a>
   2d6d6:	687b      	ldr	r3, [r7, #4]
   2d6d8:	681b      	ldr	r3, [r3, #0]
   2d6da:	1c5a      	adds	r2, r3, #1
   2d6dc:	e000      	b.n	2d6e0 <getNextPacketId+0x1c>
   2d6de:	2201      	movs	r2, #1
   2d6e0:	687b      	ldr	r3, [r7, #4]
   2d6e2:	601a      	str	r2, [r3, #0]
   2d6e4:	687b      	ldr	r3, [r7, #4]
   2d6e6:	681b      	ldr	r3, [r3, #0]
}
   2d6e8:	0018      	movs	r0, r3
   2d6ea:	46bd      	mov	sp, r7
   2d6ec:	b002      	add	sp, #8
   2d6ee:	bd80      	pop	{r7, pc}
   2d6f0:	0000ffff 	.word	0x0000ffff

0002d6f4 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2d6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d6f6:	b087      	sub	sp, #28
   2d6f8:	af00      	add	r7, sp, #0
   2d6fa:	60f8      	str	r0, [r7, #12]
   2d6fc:	60b9      	str	r1, [r7, #8]
   2d6fe:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2d700:	2301      	movs	r3, #1
   2d702:	425b      	negs	r3, r3
   2d704:	617b      	str	r3, [r7, #20]
        sent = 0;
   2d706:	2300      	movs	r3, #0
   2d708:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2d70a:	e01a      	b.n	2d742 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2d70c:	68fb      	ldr	r3, [r7, #12]
   2d70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d710:	68dc      	ldr	r4, [r3, #12]
   2d712:	68fb      	ldr	r3, [r7, #12]
   2d714:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d716:	68fb      	ldr	r3, [r7, #12]
   2d718:	691a      	ldr	r2, [r3, #16]
   2d71a:	693b      	ldr	r3, [r7, #16]
   2d71c:	18d6      	adds	r6, r2, r3
   2d71e:	687b      	ldr	r3, [r7, #4]
   2d720:	0018      	movs	r0, r3
   2d722:	4b1a      	ldr	r3, [pc, #104]	; (2d78c <sendPacket+0x98>)
   2d724:	4798      	blx	r3
   2d726:	0003      	movs	r3, r0
   2d728:	68ba      	ldr	r2, [r7, #8]
   2d72a:	0031      	movs	r1, r6
   2d72c:	0028      	movs	r0, r5
   2d72e:	47a0      	blx	r4
   2d730:	0003      	movs	r3, r0
   2d732:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2d734:	697b      	ldr	r3, [r7, #20]
   2d736:	2b00      	cmp	r3, #0
   2d738:	db0e      	blt.n	2d758 <sendPacket+0x64>
            break;
        sent += rc;
   2d73a:	693a      	ldr	r2, [r7, #16]
   2d73c:	697b      	ldr	r3, [r7, #20]
   2d73e:	18d3      	adds	r3, r2, r3
   2d740:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2d742:	693a      	ldr	r2, [r7, #16]
   2d744:	68bb      	ldr	r3, [r7, #8]
   2d746:	429a      	cmp	r2, r3
   2d748:	da07      	bge.n	2d75a <sendPacket+0x66>
   2d74a:	687b      	ldr	r3, [r7, #4]
   2d74c:	0018      	movs	r0, r3
   2d74e:	4b10      	ldr	r3, [pc, #64]	; (2d790 <sendPacket+0x9c>)
   2d750:	4798      	blx	r3
   2d752:	1e03      	subs	r3, r0, #0
   2d754:	d0da      	beq.n	2d70c <sendPacket+0x18>
   2d756:	e000      	b.n	2d75a <sendPacket+0x66>
            break;
   2d758:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2d75a:	693a      	ldr	r2, [r7, #16]
   2d75c:	68bb      	ldr	r3, [r7, #8]
   2d75e:	429a      	cmp	r2, r3
   2d760:	d10b      	bne.n	2d77a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2d762:	68fb      	ldr	r3, [r7, #12]
   2d764:	3354      	adds	r3, #84	; 0x54
   2d766:	001a      	movs	r2, r3
   2d768:	68fb      	ldr	r3, [r7, #12]
   2d76a:	699b      	ldr	r3, [r3, #24]
   2d76c:	0019      	movs	r1, r3
   2d76e:	0010      	movs	r0, r2
   2d770:	4b08      	ldr	r3, [pc, #32]	; (2d794 <sendPacket+0xa0>)
   2d772:	4798      	blx	r3
        rc = SUCCESS;
   2d774:	2300      	movs	r3, #0
   2d776:	617b      	str	r3, [r7, #20]
   2d778:	e002      	b.n	2d780 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2d77a:	2301      	movs	r3, #1
   2d77c:	425b      	negs	r3, r3
   2d77e:	617b      	str	r3, [r7, #20]
    return rc;
   2d780:	697b      	ldr	r3, [r7, #20]
}
   2d782:	0018      	movs	r0, r3
   2d784:	46bd      	mov	sp, r7
   2d786:	b007      	add	sp, #28
   2d788:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d78a:	46c0      	nop			; (mov r8, r8)
   2d78c:	0002e555 	.word	0x0002e555
   2d790:	0002e4d9 	.word	0x0002e4d9
   2d794:	0002e52d 	.word	0x0002e52d

0002d798 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2d798:	b580      	push	{r7, lr}
   2d79a:	b086      	sub	sp, #24
   2d79c:	af00      	add	r7, sp, #0
   2d79e:	60f8      	str	r0, [r7, #12]
   2d7a0:	60b9      	str	r1, [r7, #8]
   2d7a2:	607a      	str	r2, [r7, #4]
   2d7a4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2d7a6:	68fb      	ldr	r3, [r7, #12]
   2d7a8:	68ba      	ldr	r2, [r7, #8]
   2d7aa:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d7ac:	2300      	movs	r3, #0
   2d7ae:	617b      	str	r3, [r7, #20]
   2d7b0:	e00a      	b.n	2d7c8 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2d7b2:	68fa      	ldr	r2, [r7, #12]
   2d7b4:	697b      	ldr	r3, [r7, #20]
   2d7b6:	3304      	adds	r3, #4
   2d7b8:	00db      	lsls	r3, r3, #3
   2d7ba:	18d3      	adds	r3, r2, r3
   2d7bc:	3304      	adds	r3, #4
   2d7be:	2200      	movs	r2, #0
   2d7c0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d7c2:	697b      	ldr	r3, [r7, #20]
   2d7c4:	3301      	adds	r3, #1
   2d7c6:	617b      	str	r3, [r7, #20]
   2d7c8:	697b      	ldr	r3, [r7, #20]
   2d7ca:	2b04      	cmp	r3, #4
   2d7cc:	ddf1      	ble.n	2d7b2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2d7ce:	68fb      	ldr	r3, [r7, #12]
   2d7d0:	687a      	ldr	r2, [r7, #4]
   2d7d2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2d7d4:	68fb      	ldr	r3, [r7, #12]
   2d7d6:	683a      	ldr	r2, [r7, #0]
   2d7d8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2d7da:	68fb      	ldr	r3, [r7, #12]
   2d7dc:	6a3a      	ldr	r2, [r7, #32]
   2d7de:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2d7e0:	68fb      	ldr	r3, [r7, #12]
   2d7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d7e4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2d7e6:	68fb      	ldr	r3, [r7, #12]
   2d7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d7ea:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2d7ec:	68fb      	ldr	r3, [r7, #12]
   2d7ee:	2200      	movs	r2, #0
   2d7f0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2d7f2:	68fb      	ldr	r3, [r7, #12]
   2d7f4:	2200      	movs	r2, #0
   2d7f6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2d7f8:	68fb      	ldr	r3, [r7, #12]
   2d7fa:	2200      	movs	r2, #0
   2d7fc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2d7fe:	68fb      	ldr	r3, [r7, #12]
   2d800:	2201      	movs	r2, #1
   2d802:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2d804:	68fb      	ldr	r3, [r7, #12]
   2d806:	3354      	adds	r3, #84	; 0x54
   2d808:	0018      	movs	r0, r3
   2d80a:	4b03      	ldr	r3, [pc, #12]	; (2d818 <MQTTClientInit+0x80>)
   2d80c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2d80e:	46c0      	nop			; (mov r8, r8)
   2d810:	46bd      	mov	sp, r7
   2d812:	b006      	add	sp, #24
   2d814:	bd80      	pop	{r7, pc}
   2d816:	46c0      	nop			; (mov r8, r8)
   2d818:	0002e57d 	.word	0x0002e57d

0002d81c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2d81c:	b590      	push	{r4, r7, lr}
   2d81e:	b08b      	sub	sp, #44	; 0x2c
   2d820:	af00      	add	r7, sp, #0
   2d822:	60f8      	str	r0, [r7, #12]
   2d824:	60b9      	str	r1, [r7, #8]
   2d826:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2d828:	2301      	movs	r3, #1
   2d82a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2d82c:	2300      	movs	r3, #0
   2d82e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2d830:	2304      	movs	r3, #4
   2d832:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2d834:	68bb      	ldr	r3, [r7, #8]
   2d836:	2200      	movs	r2, #0
   2d838:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2d83a:	2301      	movs	r3, #1
   2d83c:	425b      	negs	r3, r3
   2d83e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2d840:	6a3b      	ldr	r3, [r7, #32]
   2d842:	3301      	adds	r3, #1
   2d844:	623b      	str	r3, [r7, #32]
   2d846:	6a3a      	ldr	r2, [r7, #32]
   2d848:	69fb      	ldr	r3, [r7, #28]
   2d84a:	429a      	cmp	r2, r3
   2d84c:	dd03      	ble.n	2d856 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2d84e:	2301      	movs	r3, #1
   2d850:	425b      	negs	r3, r3
   2d852:	61bb      	str	r3, [r7, #24]
            goto exit;
   2d854:	e026      	b.n	2d8a4 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2d856:	68fb      	ldr	r3, [r7, #12]
   2d858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d85a:	689c      	ldr	r4, [r3, #8]
   2d85c:	68fb      	ldr	r3, [r7, #12]
   2d85e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2d860:	687b      	ldr	r3, [r7, #4]
   2d862:	2217      	movs	r2, #23
   2d864:	18b9      	adds	r1, r7, r2
   2d866:	2201      	movs	r2, #1
   2d868:	47a0      	blx	r4
   2d86a:	0003      	movs	r3, r0
   2d86c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2d86e:	69bb      	ldr	r3, [r7, #24]
   2d870:	2b01      	cmp	r3, #1
   2d872:	d116      	bne.n	2d8a2 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2d874:	68bb      	ldr	r3, [r7, #8]
   2d876:	681a      	ldr	r2, [r3, #0]
   2d878:	2317      	movs	r3, #23
   2d87a:	18fb      	adds	r3, r7, r3
   2d87c:	781b      	ldrb	r3, [r3, #0]
   2d87e:	0019      	movs	r1, r3
   2d880:	237f      	movs	r3, #127	; 0x7f
   2d882:	400b      	ands	r3, r1
   2d884:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d886:	434b      	muls	r3, r1
   2d888:	18d2      	adds	r2, r2, r3
   2d88a:	68bb      	ldr	r3, [r7, #8]
   2d88c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d890:	01db      	lsls	r3, r3, #7
   2d892:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2d894:	2317      	movs	r3, #23
   2d896:	18fb      	adds	r3, r7, r3
   2d898:	781b      	ldrb	r3, [r3, #0]
   2d89a:	b25b      	sxtb	r3, r3
   2d89c:	2b00      	cmp	r3, #0
   2d89e:	dbcc      	blt.n	2d83a <decodePacket+0x1e>
   2d8a0:	e000      	b.n	2d8a4 <decodePacket+0x88>
            goto exit;
   2d8a2:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2d8a4:	6a3b      	ldr	r3, [r7, #32]
}
   2d8a6:	0018      	movs	r0, r3
   2d8a8:	46bd      	mov	sp, r7
   2d8aa:	b00b      	add	sp, #44	; 0x2c
   2d8ac:	bd90      	pop	{r4, r7, pc}
	...

0002d8b0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2d8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d8b2:	46c6      	mov	lr, r8
   2d8b4:	b500      	push	{lr}
   2d8b6:	b086      	sub	sp, #24
   2d8b8:	af00      	add	r7, sp, #0
   2d8ba:	6078      	str	r0, [r7, #4]
   2d8bc:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2d8be:	2301      	movs	r3, #1
   2d8c0:	425b      	negs	r3, r3
   2d8c2:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2d8c4:	2300      	movs	r3, #0
   2d8c6:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2d8c8:	2300      	movs	r3, #0
   2d8ca:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2d8cc:	2300      	movs	r3, #0
   2d8ce:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2d8d0:	687b      	ldr	r3, [r7, #4]
   2d8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d8d4:	689c      	ldr	r4, [r3, #8]
   2d8d6:	687b      	ldr	r3, [r7, #4]
   2d8d8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d8da:	687b      	ldr	r3, [r7, #4]
   2d8dc:	695e      	ldr	r6, [r3, #20]
   2d8de:	683b      	ldr	r3, [r7, #0]
   2d8e0:	0018      	movs	r0, r3
   2d8e2:	4b2b      	ldr	r3, [pc, #172]	; (2d990 <readPacket+0xe0>)
   2d8e4:	4798      	blx	r3
   2d8e6:	0003      	movs	r3, r0
   2d8e8:	2201      	movs	r2, #1
   2d8ea:	0031      	movs	r1, r6
   2d8ec:	0028      	movs	r0, r5
   2d8ee:	47a0      	blx	r4
   2d8f0:	0003      	movs	r3, r0
   2d8f2:	2b01      	cmp	r3, #1
   2d8f4:	d141      	bne.n	2d97a <readPacket+0xca>
        goto exit;

    len = 1;
   2d8f6:	2301      	movs	r3, #1
   2d8f8:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2d8fa:	683b      	ldr	r3, [r7, #0]
   2d8fc:	0018      	movs	r0, r3
   2d8fe:	4b24      	ldr	r3, [pc, #144]	; (2d990 <readPacket+0xe0>)
   2d900:	4798      	blx	r3
   2d902:	0002      	movs	r2, r0
   2d904:	2308      	movs	r3, #8
   2d906:	18f9      	adds	r1, r7, r3
   2d908:	687b      	ldr	r3, [r7, #4]
   2d90a:	0018      	movs	r0, r3
   2d90c:	4b21      	ldr	r3, [pc, #132]	; (2d994 <readPacket+0xe4>)
   2d90e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2d910:	687b      	ldr	r3, [r7, #4]
   2d912:	695b      	ldr	r3, [r3, #20]
   2d914:	3301      	adds	r3, #1
   2d916:	68ba      	ldr	r2, [r7, #8]
   2d918:	0011      	movs	r1, r2
   2d91a:	0018      	movs	r0, r3
   2d91c:	4b1e      	ldr	r3, [pc, #120]	; (2d998 <readPacket+0xe8>)
   2d91e:	4798      	blx	r3
   2d920:	0002      	movs	r2, r0
   2d922:	693b      	ldr	r3, [r7, #16]
   2d924:	189b      	adds	r3, r3, r2
   2d926:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2d928:	68bb      	ldr	r3, [r7, #8]
   2d92a:	2b00      	cmp	r3, #0
   2d92c:	dd17      	ble.n	2d95e <readPacket+0xae>
   2d92e:	687b      	ldr	r3, [r7, #4]
   2d930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d932:	689c      	ldr	r4, [r3, #8]
   2d934:	687b      	ldr	r3, [r7, #4]
   2d936:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d938:	687b      	ldr	r3, [r7, #4]
   2d93a:	695a      	ldr	r2, [r3, #20]
   2d93c:	693b      	ldr	r3, [r7, #16]
   2d93e:	18d6      	adds	r6, r2, r3
   2d940:	68bb      	ldr	r3, [r7, #8]
   2d942:	4698      	mov	r8, r3
   2d944:	683b      	ldr	r3, [r7, #0]
   2d946:	0018      	movs	r0, r3
   2d948:	4b11      	ldr	r3, [pc, #68]	; (2d990 <readPacket+0xe0>)
   2d94a:	4798      	blx	r3
   2d94c:	0003      	movs	r3, r0
   2d94e:	4642      	mov	r2, r8
   2d950:	0031      	movs	r1, r6
   2d952:	0028      	movs	r0, r5
   2d954:	47a0      	blx	r4
   2d956:	0002      	movs	r2, r0
   2d958:	68bb      	ldr	r3, [r7, #8]
   2d95a:	429a      	cmp	r2, r3
   2d95c:	d10f      	bne.n	2d97e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2d95e:	687b      	ldr	r3, [r7, #4]
   2d960:	695b      	ldr	r3, [r3, #20]
   2d962:	781a      	ldrb	r2, [r3, #0]
   2d964:	230c      	movs	r3, #12
   2d966:	18fb      	adds	r3, r7, r3
   2d968:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2d96a:	230c      	movs	r3, #12
   2d96c:	18fb      	adds	r3, r7, r3
   2d96e:	781b      	ldrb	r3, [r3, #0]
   2d970:	061b      	lsls	r3, r3, #24
   2d972:	0f1b      	lsrs	r3, r3, #28
   2d974:	b2db      	uxtb	r3, r3
   2d976:	617b      	str	r3, [r7, #20]
   2d978:	e002      	b.n	2d980 <readPacket+0xd0>
        goto exit;
   2d97a:	46c0      	nop			; (mov r8, r8)
   2d97c:	e000      	b.n	2d980 <readPacket+0xd0>
        goto exit;
   2d97e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2d980:	697b      	ldr	r3, [r7, #20]
}
   2d982:	0018      	movs	r0, r3
   2d984:	46bd      	mov	sp, r7
   2d986:	b006      	add	sp, #24
   2d988:	bc04      	pop	{r2}
   2d98a:	4690      	mov	r8, r2
   2d98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d98e:	46c0      	nop			; (mov r8, r8)
   2d990:	0002e555 	.word	0x0002e555
   2d994:	0002d81d 	.word	0x0002d81d
   2d998:	0002f32d 	.word	0x0002f32d

0002d99c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2d99c:	b580      	push	{r7, lr}
   2d99e:	b086      	sub	sp, #24
   2d9a0:	af00      	add	r7, sp, #0
   2d9a2:	6078      	str	r0, [r7, #4]
   2d9a4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2d9a6:	687b      	ldr	r3, [r7, #4]
   2d9a8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2d9aa:	683b      	ldr	r3, [r7, #0]
   2d9ac:	689b      	ldr	r3, [r3, #8]
   2d9ae:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2d9b0:	683b      	ldr	r3, [r7, #0]
   2d9b2:	685b      	ldr	r3, [r3, #4]
   2d9b4:	001a      	movs	r2, r3
   2d9b6:	693b      	ldr	r3, [r7, #16]
   2d9b8:	189b      	adds	r3, r3, r2
   2d9ba:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2d9bc:	e039      	b.n	2da32 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2d9be:	693b      	ldr	r3, [r7, #16]
   2d9c0:	781b      	ldrb	r3, [r3, #0]
   2d9c2:	2b2f      	cmp	r3, #47	; 0x2f
   2d9c4:	d103      	bne.n	2d9ce <isTopicMatched+0x32>
   2d9c6:	697b      	ldr	r3, [r7, #20]
   2d9c8:	781b      	ldrb	r3, [r3, #0]
   2d9ca:	2b2f      	cmp	r3, #47	; 0x2f
   2d9cc:	d13a      	bne.n	2da44 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2d9ce:	697b      	ldr	r3, [r7, #20]
   2d9d0:	781b      	ldrb	r3, [r3, #0]
   2d9d2:	2b2b      	cmp	r3, #43	; 0x2b
   2d9d4:	d009      	beq.n	2d9ea <isTopicMatched+0x4e>
   2d9d6:	697b      	ldr	r3, [r7, #20]
   2d9d8:	781b      	ldrb	r3, [r3, #0]
   2d9da:	2b23      	cmp	r3, #35	; 0x23
   2d9dc:	d005      	beq.n	2d9ea <isTopicMatched+0x4e>
   2d9de:	697b      	ldr	r3, [r7, #20]
   2d9e0:	781a      	ldrb	r2, [r3, #0]
   2d9e2:	693b      	ldr	r3, [r7, #16]
   2d9e4:	781b      	ldrb	r3, [r3, #0]
   2d9e6:	429a      	cmp	r2, r3
   2d9e8:	d12e      	bne.n	2da48 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2d9ea:	697b      	ldr	r3, [r7, #20]
   2d9ec:	781b      	ldrb	r3, [r3, #0]
   2d9ee:	2b2b      	cmp	r3, #43	; 0x2b
   2d9f0:	d112      	bne.n	2da18 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2d9f2:	693b      	ldr	r3, [r7, #16]
   2d9f4:	3301      	adds	r3, #1
   2d9f6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d9f8:	e005      	b.n	2da06 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2d9fa:	693b      	ldr	r3, [r7, #16]
   2d9fc:	3301      	adds	r3, #1
   2d9fe:	613b      	str	r3, [r7, #16]
   2da00:	693b      	ldr	r3, [r7, #16]
   2da02:	3301      	adds	r3, #1
   2da04:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2da06:	68fa      	ldr	r2, [r7, #12]
   2da08:	68bb      	ldr	r3, [r7, #8]
   2da0a:	429a      	cmp	r2, r3
   2da0c:	d20b      	bcs.n	2da26 <isTopicMatched+0x8a>
   2da0e:	68fb      	ldr	r3, [r7, #12]
   2da10:	781b      	ldrb	r3, [r3, #0]
   2da12:	2b2f      	cmp	r3, #47	; 0x2f
   2da14:	d1f1      	bne.n	2d9fa <isTopicMatched+0x5e>
   2da16:	e006      	b.n	2da26 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2da18:	697b      	ldr	r3, [r7, #20]
   2da1a:	781b      	ldrb	r3, [r3, #0]
   2da1c:	2b23      	cmp	r3, #35	; 0x23
   2da1e:	d102      	bne.n	2da26 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2da20:	68bb      	ldr	r3, [r7, #8]
   2da22:	3b01      	subs	r3, #1
   2da24:	613b      	str	r3, [r7, #16]
        curf++;
   2da26:	697b      	ldr	r3, [r7, #20]
   2da28:	3301      	adds	r3, #1
   2da2a:	617b      	str	r3, [r7, #20]
        curn++;
   2da2c:	693b      	ldr	r3, [r7, #16]
   2da2e:	3301      	adds	r3, #1
   2da30:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2da32:	697b      	ldr	r3, [r7, #20]
   2da34:	781b      	ldrb	r3, [r3, #0]
   2da36:	2b00      	cmp	r3, #0
   2da38:	d007      	beq.n	2da4a <isTopicMatched+0xae>
   2da3a:	693a      	ldr	r2, [r7, #16]
   2da3c:	68bb      	ldr	r3, [r7, #8]
   2da3e:	429a      	cmp	r2, r3
   2da40:	d3bd      	bcc.n	2d9be <isTopicMatched+0x22>
   2da42:	e002      	b.n	2da4a <isTopicMatched+0xae>
            break;
   2da44:	46c0      	nop			; (mov r8, r8)
   2da46:	e000      	b.n	2da4a <isTopicMatched+0xae>
            break;
   2da48:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2da4a:	693a      	ldr	r2, [r7, #16]
   2da4c:	68bb      	ldr	r3, [r7, #8]
   2da4e:	429a      	cmp	r2, r3
   2da50:	d105      	bne.n	2da5e <isTopicMatched+0xc2>
   2da52:	697b      	ldr	r3, [r7, #20]
   2da54:	781b      	ldrb	r3, [r3, #0]
   2da56:	2b00      	cmp	r3, #0
   2da58:	d101      	bne.n	2da5e <isTopicMatched+0xc2>
   2da5a:	2301      	movs	r3, #1
   2da5c:	e000      	b.n	2da60 <isTopicMatched+0xc4>
   2da5e:	2300      	movs	r3, #0
   2da60:	b2db      	uxtb	r3, r3
}
   2da62:	0018      	movs	r0, r3
   2da64:	46bd      	mov	sp, r7
   2da66:	b006      	add	sp, #24
   2da68:	bd80      	pop	{r7, pc}
	...

0002da6c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2da6c:	b580      	push	{r7, lr}
   2da6e:	b08a      	sub	sp, #40	; 0x28
   2da70:	af00      	add	r7, sp, #0
   2da72:	60f8      	str	r0, [r7, #12]
   2da74:	60b9      	str	r1, [r7, #8]
   2da76:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2da78:	2301      	movs	r3, #1
   2da7a:	425b      	negs	r3, r3
   2da7c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2da7e:	2300      	movs	r3, #0
   2da80:	627b      	str	r3, [r7, #36]	; 0x24
   2da82:	e044      	b.n	2db0e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2da84:	68fa      	ldr	r2, [r7, #12]
   2da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da88:	3304      	adds	r3, #4
   2da8a:	00db      	lsls	r3, r3, #3
   2da8c:	18d3      	adds	r3, r2, r3
   2da8e:	3304      	adds	r3, #4
   2da90:	681b      	ldr	r3, [r3, #0]
   2da92:	2b00      	cmp	r3, #0
   2da94:	d038      	beq.n	2db08 <deliverMessage+0x9c>
   2da96:	68fa      	ldr	r2, [r7, #12]
   2da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da9a:	3304      	adds	r3, #4
   2da9c:	00db      	lsls	r3, r3, #3
   2da9e:	18d3      	adds	r3, r2, r3
   2daa0:	3304      	adds	r3, #4
   2daa2:	681a      	ldr	r2, [r3, #0]
   2daa4:	68bb      	ldr	r3, [r7, #8]
   2daa6:	0011      	movs	r1, r2
   2daa8:	0018      	movs	r0, r3
   2daaa:	4b28      	ldr	r3, [pc, #160]	; (2db4c <deliverMessage+0xe0>)
   2daac:	4798      	blx	r3
   2daae:	1e03      	subs	r3, r0, #0
   2dab0:	d10d      	bne.n	2dace <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2dab2:	68fa      	ldr	r2, [r7, #12]
   2dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dab6:	3304      	adds	r3, #4
   2dab8:	00db      	lsls	r3, r3, #3
   2daba:	18d3      	adds	r3, r2, r3
   2dabc:	3304      	adds	r3, #4
   2dabe:	681b      	ldr	r3, [r3, #0]
   2dac0:	68ba      	ldr	r2, [r7, #8]
   2dac2:	0011      	movs	r1, r2
   2dac4:	0018      	movs	r0, r3
   2dac6:	4b22      	ldr	r3, [pc, #136]	; (2db50 <deliverMessage+0xe4>)
   2dac8:	4798      	blx	r3
   2daca:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2dacc:	d01c      	beq.n	2db08 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2dace:	68fa      	ldr	r2, [r7, #12]
   2dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dad2:	3304      	adds	r3, #4
   2dad4:	00db      	lsls	r3, r3, #3
   2dad6:	18d3      	adds	r3, r2, r3
   2dad8:	3308      	adds	r3, #8
   2dada:	681b      	ldr	r3, [r3, #0]
   2dadc:	2b00      	cmp	r3, #0
   2dade:	d013      	beq.n	2db08 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2dae0:	687a      	ldr	r2, [r7, #4]
   2dae2:	68b9      	ldr	r1, [r7, #8]
   2dae4:	2318      	movs	r3, #24
   2dae6:	18fb      	adds	r3, r7, r3
   2dae8:	0018      	movs	r0, r3
   2daea:	4b1a      	ldr	r3, [pc, #104]	; (2db54 <deliverMessage+0xe8>)
   2daec:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2daee:	68fa      	ldr	r2, [r7, #12]
   2daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2daf2:	3304      	adds	r3, #4
   2daf4:	00db      	lsls	r3, r3, #3
   2daf6:	18d3      	adds	r3, r2, r3
   2daf8:	3308      	adds	r3, #8
   2dafa:	681b      	ldr	r3, [r3, #0]
   2dafc:	2218      	movs	r2, #24
   2dafe:	18ba      	adds	r2, r7, r2
   2db00:	0010      	movs	r0, r2
   2db02:	4798      	blx	r3
                rc = SUCCESS;
   2db04:	2300      	movs	r3, #0
   2db06:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2db0a:	3301      	adds	r3, #1
   2db0c:	627b      	str	r3, [r7, #36]	; 0x24
   2db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2db10:	2b04      	cmp	r3, #4
   2db12:	ddb7      	ble.n	2da84 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2db14:	6a3b      	ldr	r3, [r7, #32]
   2db16:	3301      	adds	r3, #1
   2db18:	d112      	bne.n	2db40 <deliverMessage+0xd4>
   2db1a:	68fb      	ldr	r3, [r7, #12]
   2db1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2db1e:	2b00      	cmp	r3, #0
   2db20:	d00e      	beq.n	2db40 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2db22:	687a      	ldr	r2, [r7, #4]
   2db24:	68b9      	ldr	r1, [r7, #8]
   2db26:	2310      	movs	r3, #16
   2db28:	18fb      	adds	r3, r7, r3
   2db2a:	0018      	movs	r0, r3
   2db2c:	4b09      	ldr	r3, [pc, #36]	; (2db54 <deliverMessage+0xe8>)
   2db2e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2db30:	68fb      	ldr	r3, [r7, #12]
   2db32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2db34:	2210      	movs	r2, #16
   2db36:	18ba      	adds	r2, r7, r2
   2db38:	0010      	movs	r0, r2
   2db3a:	4798      	blx	r3
        rc = SUCCESS;
   2db3c:	2300      	movs	r3, #0
   2db3e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2db40:	6a3b      	ldr	r3, [r7, #32]
}
   2db42:	0018      	movs	r0, r3
   2db44:	46bd      	mov	sp, r7
   2db46:	b00a      	add	sp, #40	; 0x28
   2db48:	bd80      	pop	{r7, pc}
   2db4a:	46c0      	nop			; (mov r8, r8)
   2db4c:	0002f741 	.word	0x0002f741
   2db50:	0002d99d 	.word	0x0002d99d
   2db54:	0002d6a5 	.word	0x0002d6a5

0002db58 <keepalive>:


int keepalive(MQTTClient* c)
{
   2db58:	b580      	push	{r7, lr}
   2db5a:	b088      	sub	sp, #32
   2db5c:	af00      	add	r7, sp, #0
   2db5e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2db60:	2301      	movs	r3, #1
   2db62:	425b      	negs	r3, r3
   2db64:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2db66:	687b      	ldr	r3, [r7, #4]
   2db68:	699b      	ldr	r3, [r3, #24]
   2db6a:	2b00      	cmp	r3, #0
   2db6c:	d102      	bne.n	2db74 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2db6e:	2300      	movs	r3, #0
   2db70:	61fb      	str	r3, [r7, #28]
        goto exit;
   2db72:	e033      	b.n	2dbdc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2db74:	687b      	ldr	r3, [r7, #4]
   2db76:	3354      	adds	r3, #84	; 0x54
   2db78:	0018      	movs	r0, r3
   2db7a:	4b1b      	ldr	r3, [pc, #108]	; (2dbe8 <keepalive+0x90>)
   2db7c:	4798      	blx	r3
   2db7e:	1e03      	subs	r3, r0, #0
   2db80:	d02c      	beq.n	2dbdc <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2db82:	687b      	ldr	r3, [r7, #4]
   2db84:	7f1b      	ldrb	r3, [r3, #28]
   2db86:	2b00      	cmp	r3, #0
   2db88:	d128      	bne.n	2dbdc <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2db8a:	230c      	movs	r3, #12
   2db8c:	18fb      	adds	r3, r7, r3
   2db8e:	0018      	movs	r0, r3
   2db90:	4b16      	ldr	r3, [pc, #88]	; (2dbec <keepalive+0x94>)
   2db92:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2db94:	23fa      	movs	r3, #250	; 0xfa
   2db96:	009a      	lsls	r2, r3, #2
   2db98:	230c      	movs	r3, #12
   2db9a:	18fb      	adds	r3, r7, r3
   2db9c:	0011      	movs	r1, r2
   2db9e:	0018      	movs	r0, r3
   2dba0:	4b13      	ldr	r3, [pc, #76]	; (2dbf0 <keepalive+0x98>)
   2dba2:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2dba4:	687b      	ldr	r3, [r7, #4]
   2dba6:	691a      	ldr	r2, [r3, #16]
   2dba8:	687b      	ldr	r3, [r7, #4]
   2dbaa:	689b      	ldr	r3, [r3, #8]
   2dbac:	0019      	movs	r1, r3
   2dbae:	0010      	movs	r0, r2
   2dbb0:	4b10      	ldr	r3, [pc, #64]	; (2dbf4 <keepalive+0x9c>)
   2dbb2:	4798      	blx	r3
   2dbb4:	0003      	movs	r3, r0
   2dbb6:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2dbb8:	69bb      	ldr	r3, [r7, #24]
   2dbba:	2b00      	cmp	r3, #0
   2dbbc:	dd0e      	ble.n	2dbdc <keepalive+0x84>
   2dbbe:	230c      	movs	r3, #12
   2dbc0:	18fa      	adds	r2, r7, r3
   2dbc2:	69b9      	ldr	r1, [r7, #24]
   2dbc4:	687b      	ldr	r3, [r7, #4]
   2dbc6:	0018      	movs	r0, r3
   2dbc8:	4b0b      	ldr	r3, [pc, #44]	; (2dbf8 <keepalive+0xa0>)
   2dbca:	4798      	blx	r3
   2dbcc:	0003      	movs	r3, r0
   2dbce:	61fb      	str	r3, [r7, #28]
   2dbd0:	69fb      	ldr	r3, [r7, #28]
   2dbd2:	2b00      	cmp	r3, #0
   2dbd4:	d102      	bne.n	2dbdc <keepalive+0x84>
                c->ping_outstanding = 1;
   2dbd6:	687b      	ldr	r3, [r7, #4]
   2dbd8:	2201      	movs	r2, #1
   2dbda:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2dbdc:	69fb      	ldr	r3, [r7, #28]
}
   2dbde:	0018      	movs	r0, r3
   2dbe0:	46bd      	mov	sp, r7
   2dbe2:	b008      	add	sp, #32
   2dbe4:	bd80      	pop	{r7, pc}
   2dbe6:	46c0      	nop			; (mov r8, r8)
   2dbe8:	0002e4d9 	.word	0x0002e4d9
   2dbec:	0002e57d 	.word	0x0002e57d
   2dbf0:	0002e505 	.word	0x0002e505
   2dbf4:	0002f151 	.word	0x0002f151
   2dbf8:	0002d6f5 	.word	0x0002d6f5

0002dbfc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dbfe:	b095      	sub	sp, #84	; 0x54
   2dc00:	af06      	add	r7, sp, #24
   2dc02:	6078      	str	r0, [r7, #4]
   2dc04:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2dc06:	683a      	ldr	r2, [r7, #0]
   2dc08:	687b      	ldr	r3, [r7, #4]
   2dc0a:	0011      	movs	r1, r2
   2dc0c:	0018      	movs	r0, r3
   2dc0e:	4b70      	ldr	r3, [pc, #448]	; (2ddd0 <cycle+0x1d4>)
   2dc10:	4798      	blx	r3
   2dc12:	0002      	movs	r2, r0
   2dc14:	232e      	movs	r3, #46	; 0x2e
   2dc16:	18fb      	adds	r3, r7, r3
   2dc18:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2dc1a:	2300      	movs	r3, #0
   2dc1c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2dc1e:	2300      	movs	r3, #0
   2dc20:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2dc22:	232e      	movs	r3, #46	; 0x2e
   2dc24:	18fb      	adds	r3, r7, r3
   2dc26:	881b      	ldrh	r3, [r3, #0]
   2dc28:	2b0d      	cmp	r3, #13
   2dc2a:	d900      	bls.n	2dc2e <cycle+0x32>
   2dc2c:	e0bd      	b.n	2ddaa <cycle+0x1ae>
   2dc2e:	009a      	lsls	r2, r3, #2
   2dc30:	4b68      	ldr	r3, [pc, #416]	; (2ddd4 <cycle+0x1d8>)
   2dc32:	18d3      	adds	r3, r2, r3
   2dc34:	681b      	ldr	r3, [r3, #0]
   2dc36:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2dc38:	687b      	ldr	r3, [r7, #4]
   2dc3a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2dc3c:	687b      	ldr	r3, [r7, #4]
   2dc3e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2dc40:	001e      	movs	r6, r3
   2dc42:	2310      	movs	r3, #16
   2dc44:	18fb      	adds	r3, r7, r3
   2dc46:	1d1d      	adds	r5, r3, #4
   2dc48:	2310      	movs	r3, #16
   2dc4a:	18fb      	adds	r3, r7, r3
   2dc4c:	1c5c      	adds	r4, r3, #1
   2dc4e:	230c      	movs	r3, #12
   2dc50:	18f9      	adds	r1, r7, r3
   2dc52:	2310      	movs	r3, #16
   2dc54:	18fb      	adds	r3, r7, r3
   2dc56:	1c98      	adds	r0, r3, #2
   2dc58:	9604      	str	r6, [sp, #16]
   2dc5a:	9203      	str	r2, [sp, #12]
   2dc5c:	2310      	movs	r3, #16
   2dc5e:	18fb      	adds	r3, r7, r3
   2dc60:	330c      	adds	r3, #12
   2dc62:	9302      	str	r3, [sp, #8]
   2dc64:	2310      	movs	r3, #16
   2dc66:	18fb      	adds	r3, r7, r3
   2dc68:	3308      	adds	r3, #8
   2dc6a:	9301      	str	r3, [sp, #4]
   2dc6c:	2320      	movs	r3, #32
   2dc6e:	18fb      	adds	r3, r7, r3
   2dc70:	9300      	str	r3, [sp, #0]
   2dc72:	002b      	movs	r3, r5
   2dc74:	0022      	movs	r2, r4
   2dc76:	4c58      	ldr	r4, [pc, #352]	; (2ddd8 <cycle+0x1dc>)
   2dc78:	47a0      	blx	r4
   2dc7a:	0003      	movs	r3, r0
   2dc7c:	2b01      	cmp	r3, #1
   2dc7e:	d000      	beq.n	2dc82 <cycle+0x86>
   2dc80:	e098      	b.n	2ddb4 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2dc82:	68fb      	ldr	r3, [r7, #12]
   2dc84:	b2da      	uxtb	r2, r3
   2dc86:	2310      	movs	r3, #16
   2dc88:	18fb      	adds	r3, r7, r3
   2dc8a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2dc8c:	2310      	movs	r3, #16
   2dc8e:	18fa      	adds	r2, r7, r3
   2dc90:	2320      	movs	r3, #32
   2dc92:	18f9      	adds	r1, r7, r3
   2dc94:	687b      	ldr	r3, [r7, #4]
   2dc96:	0018      	movs	r0, r3
   2dc98:	4b50      	ldr	r3, [pc, #320]	; (2dddc <cycle+0x1e0>)
   2dc9a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2dc9c:	2310      	movs	r3, #16
   2dc9e:	18fb      	adds	r3, r7, r3
   2dca0:	781b      	ldrb	r3, [r3, #0]
   2dca2:	2b00      	cmp	r3, #0
   2dca4:	d100      	bne.n	2dca8 <cycle+0xac>
   2dca6:	e07d      	b.n	2dda4 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2dca8:	2310      	movs	r3, #16
   2dcaa:	18fb      	adds	r3, r7, r3
   2dcac:	781b      	ldrb	r3, [r3, #0]
   2dcae:	2b01      	cmp	r3, #1
   2dcb0:	d10f      	bne.n	2dcd2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2dcb2:	687b      	ldr	r3, [r7, #4]
   2dcb4:	6918      	ldr	r0, [r3, #16]
   2dcb6:	687b      	ldr	r3, [r7, #4]
   2dcb8:	689b      	ldr	r3, [r3, #8]
   2dcba:	0019      	movs	r1, r3
   2dcbc:	2310      	movs	r3, #16
   2dcbe:	18fb      	adds	r3, r7, r3
   2dcc0:	889b      	ldrh	r3, [r3, #4]
   2dcc2:	9300      	str	r3, [sp, #0]
   2dcc4:	2300      	movs	r3, #0
   2dcc6:	2204      	movs	r2, #4
   2dcc8:	4c45      	ldr	r4, [pc, #276]	; (2dde0 <cycle+0x1e4>)
   2dcca:	47a0      	blx	r4
   2dccc:	0003      	movs	r3, r0
   2dcce:	637b      	str	r3, [r7, #52]	; 0x34
   2dcd0:	e013      	b.n	2dcfa <cycle+0xfe>
                else if (msg.qos == QOS2)
   2dcd2:	2310      	movs	r3, #16
   2dcd4:	18fb      	adds	r3, r7, r3
   2dcd6:	781b      	ldrb	r3, [r3, #0]
   2dcd8:	2b02      	cmp	r3, #2
   2dcda:	d10e      	bne.n	2dcfa <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2dcdc:	687b      	ldr	r3, [r7, #4]
   2dcde:	6918      	ldr	r0, [r3, #16]
   2dce0:	687b      	ldr	r3, [r7, #4]
   2dce2:	689b      	ldr	r3, [r3, #8]
   2dce4:	0019      	movs	r1, r3
   2dce6:	2310      	movs	r3, #16
   2dce8:	18fb      	adds	r3, r7, r3
   2dcea:	889b      	ldrh	r3, [r3, #4]
   2dcec:	9300      	str	r3, [sp, #0]
   2dcee:	2300      	movs	r3, #0
   2dcf0:	2205      	movs	r2, #5
   2dcf2:	4c3b      	ldr	r4, [pc, #236]	; (2dde0 <cycle+0x1e4>)
   2dcf4:	47a0      	blx	r4
   2dcf6:	0003      	movs	r3, r0
   2dcf8:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2dcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dcfc:	2b00      	cmp	r3, #0
   2dcfe:	dc03      	bgt.n	2dd08 <cycle+0x10c>
                    rc = FAILURE;
   2dd00:	2301      	movs	r3, #1
   2dd02:	425b      	negs	r3, r3
   2dd04:	633b      	str	r3, [r7, #48]	; 0x30
   2dd06:	e007      	b.n	2dd18 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2dd08:	683a      	ldr	r2, [r7, #0]
   2dd0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2dd0c:	687b      	ldr	r3, [r7, #4]
   2dd0e:	0018      	movs	r0, r3
   2dd10:	4b34      	ldr	r3, [pc, #208]	; (2dde4 <cycle+0x1e8>)
   2dd12:	4798      	blx	r3
   2dd14:	0003      	movs	r3, r0
   2dd16:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd1a:	3301      	adds	r3, #1
   2dd1c:	d142      	bne.n	2dda4 <cycle+0x1a8>
                    goto exit; // there was a problem
   2dd1e:	46c0      	nop			; (mov r8, r8)
   2dd20:	e049      	b.n	2ddb6 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2dd22:	687b      	ldr	r3, [r7, #4]
   2dd24:	695c      	ldr	r4, [r3, #20]
   2dd26:	687b      	ldr	r3, [r7, #4]
   2dd28:	68db      	ldr	r3, [r3, #12]
   2dd2a:	220a      	movs	r2, #10
   2dd2c:	18ba      	adds	r2, r7, r2
   2dd2e:	2109      	movs	r1, #9
   2dd30:	1879      	adds	r1, r7, r1
   2dd32:	2008      	movs	r0, #8
   2dd34:	1838      	adds	r0, r7, r0
   2dd36:	9300      	str	r3, [sp, #0]
   2dd38:	0023      	movs	r3, r4
   2dd3a:	4c2b      	ldr	r4, [pc, #172]	; (2dde8 <cycle+0x1ec>)
   2dd3c:	47a0      	blx	r4
   2dd3e:	0003      	movs	r3, r0
   2dd40:	2b01      	cmp	r3, #1
   2dd42:	d003      	beq.n	2dd4c <cycle+0x150>
                rc = FAILURE;
   2dd44:	2301      	movs	r3, #1
   2dd46:	425b      	negs	r3, r3
   2dd48:	633b      	str	r3, [r7, #48]	; 0x30
   2dd4a:	e023      	b.n	2dd94 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2dd4c:	687b      	ldr	r3, [r7, #4]
   2dd4e:	6918      	ldr	r0, [r3, #16]
   2dd50:	687b      	ldr	r3, [r7, #4]
   2dd52:	689b      	ldr	r3, [r3, #8]
   2dd54:	0019      	movs	r1, r3
   2dd56:	230a      	movs	r3, #10
   2dd58:	18fb      	adds	r3, r7, r3
   2dd5a:	881b      	ldrh	r3, [r3, #0]
   2dd5c:	9300      	str	r3, [sp, #0]
   2dd5e:	2300      	movs	r3, #0
   2dd60:	2206      	movs	r2, #6
   2dd62:	4c1f      	ldr	r4, [pc, #124]	; (2dde0 <cycle+0x1e4>)
   2dd64:	47a0      	blx	r4
   2dd66:	0003      	movs	r3, r0
   2dd68:	637b      	str	r3, [r7, #52]	; 0x34
   2dd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dd6c:	2b00      	cmp	r3, #0
   2dd6e:	dc03      	bgt.n	2dd78 <cycle+0x17c>
                rc = FAILURE;
   2dd70:	2301      	movs	r3, #1
   2dd72:	425b      	negs	r3, r3
   2dd74:	633b      	str	r3, [r7, #48]	; 0x30
   2dd76:	e00d      	b.n	2dd94 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2dd78:	683a      	ldr	r2, [r7, #0]
   2dd7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2dd7c:	687b      	ldr	r3, [r7, #4]
   2dd7e:	0018      	movs	r0, r3
   2dd80:	4b18      	ldr	r3, [pc, #96]	; (2dde4 <cycle+0x1e8>)
   2dd82:	4798      	blx	r3
   2dd84:	0003      	movs	r3, r0
   2dd86:	633b      	str	r3, [r7, #48]	; 0x30
   2dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd8a:	2b00      	cmp	r3, #0
   2dd8c:	d002      	beq.n	2dd94 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2dd8e:	2301      	movs	r3, #1
   2dd90:	425b      	negs	r3, r3
   2dd92:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2dd96:	3301      	adds	r3, #1
   2dd98:	d106      	bne.n	2dda8 <cycle+0x1ac>
                goto exit; // there was a problem
   2dd9a:	e00c      	b.n	2ddb6 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2dd9c:	687b      	ldr	r3, [r7, #4]
   2dd9e:	2200      	movs	r2, #0
   2dda0:	771a      	strb	r2, [r3, #28]
            break;
   2dda2:	e002      	b.n	2ddaa <cycle+0x1ae>
            break;
   2dda4:	46c0      	nop			; (mov r8, r8)
   2dda6:	e000      	b.n	2ddaa <cycle+0x1ae>
            break;
   2dda8:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2ddaa:	687b      	ldr	r3, [r7, #4]
   2ddac:	0018      	movs	r0, r3
   2ddae:	4b0f      	ldr	r3, [pc, #60]	; (2ddec <cycle+0x1f0>)
   2ddb0:	4798      	blx	r3
   2ddb2:	e000      	b.n	2ddb6 <cycle+0x1ba>
                goto exit;
   2ddb4:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ddb8:	2b00      	cmp	r3, #0
   2ddba:	d103      	bne.n	2ddc4 <cycle+0x1c8>
        rc = packet_type;
   2ddbc:	232e      	movs	r3, #46	; 0x2e
   2ddbe:	18fb      	adds	r3, r7, r3
   2ddc0:	881b      	ldrh	r3, [r3, #0]
   2ddc2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2ddc6:	0018      	movs	r0, r3
   2ddc8:	46bd      	mov	sp, r7
   2ddca:	b00f      	add	sp, #60	; 0x3c
   2ddcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ddce:	46c0      	nop			; (mov r8, r8)
   2ddd0:	0002d8b1 	.word	0x0002d8b1
   2ddd4:	00039610 	.word	0x00039610
   2ddd8:	0002f175 	.word	0x0002f175
   2dddc:	0002da6d 	.word	0x0002da6d
   2dde0:	0002f96d 	.word	0x0002f96d
   2dde4:	0002d6f5 	.word	0x0002d6f5
   2dde8:	0002f279 	.word	0x0002f279
   2ddec:	0002db59 	.word	0x0002db59

0002ddf0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2ddf0:	b580      	push	{r7, lr}
   2ddf2:	b086      	sub	sp, #24
   2ddf4:	af00      	add	r7, sp, #0
   2ddf6:	6078      	str	r0, [r7, #4]
   2ddf8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2ddfa:	2300      	movs	r3, #0
   2ddfc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2ddfe:	2308      	movs	r3, #8
   2de00:	18fb      	adds	r3, r7, r3
   2de02:	0018      	movs	r0, r3
   2de04:	4b11      	ldr	r3, [pc, #68]	; (2de4c <MQTTYield+0x5c>)
   2de06:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2de08:	683a      	ldr	r2, [r7, #0]
   2de0a:	2308      	movs	r3, #8
   2de0c:	18fb      	adds	r3, r7, r3
   2de0e:	0011      	movs	r1, r2
   2de10:	0018      	movs	r0, r3
   2de12:	4b0f      	ldr	r3, [pc, #60]	; (2de50 <MQTTYield+0x60>)
   2de14:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2de16:	2308      	movs	r3, #8
   2de18:	18fa      	adds	r2, r7, r3
   2de1a:	687b      	ldr	r3, [r7, #4]
   2de1c:	0011      	movs	r1, r2
   2de1e:	0018      	movs	r0, r3
   2de20:	4b0c      	ldr	r3, [pc, #48]	; (2de54 <MQTTYield+0x64>)
   2de22:	4798      	blx	r3
   2de24:	0003      	movs	r3, r0
   2de26:	3301      	adds	r3, #1
   2de28:	d103      	bne.n	2de32 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2de2a:	2301      	movs	r3, #1
   2de2c:	425b      	negs	r3, r3
   2de2e:	617b      	str	r3, [r7, #20]
            break;
   2de30:	e006      	b.n	2de40 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2de32:	2308      	movs	r3, #8
   2de34:	18fb      	adds	r3, r7, r3
   2de36:	0018      	movs	r0, r3
   2de38:	4b07      	ldr	r3, [pc, #28]	; (2de58 <MQTTYield+0x68>)
   2de3a:	4798      	blx	r3
   2de3c:	1e03      	subs	r3, r0, #0
   2de3e:	d0ea      	beq.n	2de16 <MQTTYield+0x26>
        
    return rc;
   2de40:	697b      	ldr	r3, [r7, #20]
}
   2de42:	0018      	movs	r0, r3
   2de44:	46bd      	mov	sp, r7
   2de46:	b006      	add	sp, #24
   2de48:	bd80      	pop	{r7, pc}
   2de4a:	46c0      	nop			; (mov r8, r8)
   2de4c:	0002e57d 	.word	0x0002e57d
   2de50:	0002e505 	.word	0x0002e505
   2de54:	0002dbfd 	.word	0x0002dbfd
   2de58:	0002e4d9 	.word	0x0002e4d9

0002de5c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2de5c:	b580      	push	{r7, lr}
   2de5e:	b086      	sub	sp, #24
   2de60:	af00      	add	r7, sp, #0
   2de62:	60f8      	str	r0, [r7, #12]
   2de64:	60b9      	str	r1, [r7, #8]
   2de66:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2de68:	2301      	movs	r3, #1
   2de6a:	425b      	negs	r3, r3
   2de6c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2de6e:	687b      	ldr	r3, [r7, #4]
   2de70:	0018      	movs	r0, r3
   2de72:	4b0b      	ldr	r3, [pc, #44]	; (2dea0 <waitfor+0x44>)
   2de74:	4798      	blx	r3
   2de76:	1e03      	subs	r3, r0, #0
   2de78:	d10c      	bne.n	2de94 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2de7a:	687a      	ldr	r2, [r7, #4]
   2de7c:	68fb      	ldr	r3, [r7, #12]
   2de7e:	0011      	movs	r1, r2
   2de80:	0018      	movs	r0, r3
   2de82:	4b08      	ldr	r3, [pc, #32]	; (2dea4 <waitfor+0x48>)
   2de84:	4798      	blx	r3
   2de86:	0003      	movs	r3, r0
   2de88:	617b      	str	r3, [r7, #20]
   2de8a:	697a      	ldr	r2, [r7, #20]
   2de8c:	68bb      	ldr	r3, [r7, #8]
   2de8e:	429a      	cmp	r2, r3
   2de90:	d1ed      	bne.n	2de6e <waitfor+0x12>
   2de92:	e000      	b.n	2de96 <waitfor+0x3a>
            break; // we timed out
   2de94:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2de96:	697b      	ldr	r3, [r7, #20]
}
   2de98:	0018      	movs	r0, r3
   2de9a:	46bd      	mov	sp, r7
   2de9c:	b006      	add	sp, #24
   2de9e:	bd80      	pop	{r7, pc}
   2dea0:	0002e4d9 	.word	0x0002e4d9
   2dea4:	0002dbfd 	.word	0x0002dbfd

0002dea8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2dea8:	b590      	push	{r4, r7, lr}
   2deaa:	b09f      	sub	sp, #124	; 0x7c
   2deac:	af00      	add	r7, sp, #0
   2deae:	6078      	str	r0, [r7, #4]
   2deb0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2deb2:	2301      	movs	r3, #1
   2deb4:	425b      	negs	r3, r3
   2deb6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2deb8:	230c      	movs	r3, #12
   2deba:	18fa      	adds	r2, r7, r3
   2debc:	4b41      	ldr	r3, [pc, #260]	; (2dfc4 <MQTTConnect+0x11c>)
   2debe:	0010      	movs	r0, r2
   2dec0:	0019      	movs	r1, r3
   2dec2:	2358      	movs	r3, #88	; 0x58
   2dec4:	001a      	movs	r2, r3
   2dec6:	4b40      	ldr	r3, [pc, #256]	; (2dfc8 <MQTTConnect+0x120>)
   2dec8:	4798      	blx	r3
    int len = 0;
   2deca:	2300      	movs	r3, #0
   2decc:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2dece:	687b      	ldr	r3, [r7, #4]
   2ded0:	6a1b      	ldr	r3, [r3, #32]
   2ded2:	2b00      	cmp	r3, #0
   2ded4:	d166      	bne.n	2dfa4 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2ded6:	2364      	movs	r3, #100	; 0x64
   2ded8:	18fb      	adds	r3, r7, r3
   2deda:	0018      	movs	r0, r3
   2dedc:	4b3b      	ldr	r3, [pc, #236]	; (2dfcc <MQTTConnect+0x124>)
   2dede:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2dee0:	687b      	ldr	r3, [r7, #4]
   2dee2:	685a      	ldr	r2, [r3, #4]
   2dee4:	2364      	movs	r3, #100	; 0x64
   2dee6:	18fb      	adds	r3, r7, r3
   2dee8:	0011      	movs	r1, r2
   2deea:	0018      	movs	r0, r3
   2deec:	4b38      	ldr	r3, [pc, #224]	; (2dfd0 <MQTTConnect+0x128>)
   2deee:	4798      	blx	r3

    if (options == 0)
   2def0:	683b      	ldr	r3, [r7, #0]
   2def2:	2b00      	cmp	r3, #0
   2def4:	d102      	bne.n	2defc <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2def6:	230c      	movs	r3, #12
   2def8:	18fb      	adds	r3, r7, r3
   2defa:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2defc:	683b      	ldr	r3, [r7, #0]
   2defe:	8b1b      	ldrh	r3, [r3, #24]
   2df00:	001a      	movs	r2, r3
   2df02:	687b      	ldr	r3, [r7, #4]
   2df04:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2df06:	687b      	ldr	r3, [r7, #4]
   2df08:	3354      	adds	r3, #84	; 0x54
   2df0a:	001a      	movs	r2, r3
   2df0c:	687b      	ldr	r3, [r7, #4]
   2df0e:	699b      	ldr	r3, [r3, #24]
   2df10:	0019      	movs	r1, r3
   2df12:	0010      	movs	r0, r2
   2df14:	4b2f      	ldr	r3, [pc, #188]	; (2dfd4 <MQTTConnect+0x12c>)
   2df16:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2df18:	687b      	ldr	r3, [r7, #4]
   2df1a:	6918      	ldr	r0, [r3, #16]
   2df1c:	687b      	ldr	r3, [r7, #4]
   2df1e:	689b      	ldr	r3, [r3, #8]
   2df20:	0019      	movs	r1, r3
   2df22:	683b      	ldr	r3, [r7, #0]
   2df24:	001a      	movs	r2, r3
   2df26:	4b2c      	ldr	r3, [pc, #176]	; (2dfd8 <MQTTConnect+0x130>)
   2df28:	4798      	blx	r3
   2df2a:	0003      	movs	r3, r0
   2df2c:	673b      	str	r3, [r7, #112]	; 0x70
   2df2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2df30:	2b00      	cmp	r3, #0
   2df32:	dd39      	ble.n	2dfa8 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2df34:	2364      	movs	r3, #100	; 0x64
   2df36:	18fa      	adds	r2, r7, r3
   2df38:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2df3a:	687b      	ldr	r3, [r7, #4]
   2df3c:	0018      	movs	r0, r3
   2df3e:	4b27      	ldr	r3, [pc, #156]	; (2dfdc <MQTTConnect+0x134>)
   2df40:	4798      	blx	r3
   2df42:	0003      	movs	r3, r0
   2df44:	677b      	str	r3, [r7, #116]	; 0x74
   2df46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2df48:	2b00      	cmp	r3, #0
   2df4a:	d12f      	bne.n	2dfac <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2df4c:	2364      	movs	r3, #100	; 0x64
   2df4e:	18fa      	adds	r2, r7, r3
   2df50:	687b      	ldr	r3, [r7, #4]
   2df52:	2102      	movs	r1, #2
   2df54:	0018      	movs	r0, r3
   2df56:	4b22      	ldr	r3, [pc, #136]	; (2dfe0 <MQTTConnect+0x138>)
   2df58:	4798      	blx	r3
   2df5a:	0003      	movs	r3, r0
   2df5c:	2b02      	cmp	r3, #2
   2df5e:	d11d      	bne.n	2df9c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2df60:	230b      	movs	r3, #11
   2df62:	18fb      	adds	r3, r7, r3
   2df64:	22ff      	movs	r2, #255	; 0xff
   2df66:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2df68:	230a      	movs	r3, #10
   2df6a:	18fb      	adds	r3, r7, r3
   2df6c:	2200      	movs	r2, #0
   2df6e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2df70:	687b      	ldr	r3, [r7, #4]
   2df72:	695a      	ldr	r2, [r3, #20]
   2df74:	687b      	ldr	r3, [r7, #4]
   2df76:	68db      	ldr	r3, [r3, #12]
   2df78:	210b      	movs	r1, #11
   2df7a:	1879      	adds	r1, r7, r1
   2df7c:	200a      	movs	r0, #10
   2df7e:	1838      	adds	r0, r7, r0
   2df80:	4c18      	ldr	r4, [pc, #96]	; (2dfe4 <MQTTConnect+0x13c>)
   2df82:	47a0      	blx	r4
   2df84:	0003      	movs	r3, r0
   2df86:	2b01      	cmp	r3, #1
   2df88:	d104      	bne.n	2df94 <MQTTConnect+0xec>
            rc = connack_rc;
   2df8a:	230b      	movs	r3, #11
   2df8c:	18fb      	adds	r3, r7, r3
   2df8e:	781b      	ldrb	r3, [r3, #0]
   2df90:	677b      	str	r3, [r7, #116]	; 0x74
   2df92:	e00c      	b.n	2dfae <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2df94:	2301      	movs	r3, #1
   2df96:	425b      	negs	r3, r3
   2df98:	677b      	str	r3, [r7, #116]	; 0x74
   2df9a:	e008      	b.n	2dfae <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2df9c:	2301      	movs	r3, #1
   2df9e:	425b      	negs	r3, r3
   2dfa0:	677b      	str	r3, [r7, #116]	; 0x74
   2dfa2:	e004      	b.n	2dfae <MQTTConnect+0x106>
		goto exit;
   2dfa4:	46c0      	nop			; (mov r8, r8)
   2dfa6:	e002      	b.n	2dfae <MQTTConnect+0x106>
        goto exit;
   2dfa8:	46c0      	nop			; (mov r8, r8)
   2dfaa:	e000      	b.n	2dfae <MQTTConnect+0x106>
        goto exit; // there was a problem
   2dfac:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2dfae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2dfb0:	2b00      	cmp	r3, #0
   2dfb2:	d102      	bne.n	2dfba <MQTTConnect+0x112>
        c->isconnected = 1;
   2dfb4:	687b      	ldr	r3, [r7, #4]
   2dfb6:	2201      	movs	r2, #1
   2dfb8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2dfba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2dfbc:	0018      	movs	r0, r3
   2dfbe:	46bd      	mov	sp, r7
   2dfc0:	b01f      	add	sp, #124	; 0x7c
   2dfc2:	bd90      	pop	{r4, r7, pc}
   2dfc4:	00039648 	.word	0x00039648
   2dfc8:	000345d9 	.word	0x000345d9
   2dfcc:	0002e57d 	.word	0x0002e57d
   2dfd0:	0002e505 	.word	0x0002e505
   2dfd4:	0002e52d 	.word	0x0002e52d
   2dfd8:	0002ed59 	.word	0x0002ed59
   2dfdc:	0002d6f5 	.word	0x0002d6f5
   2dfe0:	0002de5d 	.word	0x0002de5d
   2dfe4:	0002efd5 	.word	0x0002efd5

0002dfe8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2dfe8:	b5b0      	push	{r4, r5, r7, lr}
   2dfea:	b096      	sub	sp, #88	; 0x58
   2dfec:	af04      	add	r7, sp, #16
   2dfee:	60f8      	str	r0, [r7, #12]
   2dff0:	60b9      	str	r1, [r7, #8]
   2dff2:	603b      	str	r3, [r7, #0]
   2dff4:	1dfb      	adds	r3, r7, #7
   2dff6:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2dff8:	2301      	movs	r3, #1
   2dffa:	425b      	negs	r3, r3
   2dffc:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2dffe:	2300      	movs	r3, #0
   2e000:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e002:	2324      	movs	r3, #36	; 0x24
   2e004:	18fb      	adds	r3, r7, r3
   2e006:	2200      	movs	r2, #0
   2e008:	601a      	str	r2, [r3, #0]
   2e00a:	2324      	movs	r3, #36	; 0x24
   2e00c:	18fb      	adds	r3, r7, r3
   2e00e:	2200      	movs	r2, #0
   2e010:	605a      	str	r2, [r3, #4]
   2e012:	2324      	movs	r3, #36	; 0x24
   2e014:	18fb      	adds	r3, r7, r3
   2e016:	2200      	movs	r2, #0
   2e018:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e01a:	1dfb      	adds	r3, r7, #7
   2e01c:	781b      	ldrb	r3, [r3, #0]
   2e01e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e020:	2324      	movs	r3, #36	; 0x24
   2e022:	18fb      	adds	r3, r7, r3
   2e024:	68ba      	ldr	r2, [r7, #8]
   2e026:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e028:	68fb      	ldr	r3, [r7, #12]
   2e02a:	6a1b      	ldr	r3, [r3, #32]
   2e02c:	2b00      	cmp	r3, #0
   2e02e:	d100      	bne.n	2e032 <MQTTSubscribe+0x4a>
   2e030:	e088      	b.n	2e144 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e032:	2330      	movs	r3, #48	; 0x30
   2e034:	18fb      	adds	r3, r7, r3
   2e036:	0018      	movs	r0, r3
   2e038:	4b47      	ldr	r3, [pc, #284]	; (2e158 <MQTTSubscribe+0x170>)
   2e03a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e03c:	68fb      	ldr	r3, [r7, #12]
   2e03e:	685a      	ldr	r2, [r3, #4]
   2e040:	2330      	movs	r3, #48	; 0x30
   2e042:	18fb      	adds	r3, r7, r3
   2e044:	0011      	movs	r1, r2
   2e046:	0018      	movs	r0, r3
   2e048:	4b44      	ldr	r3, [pc, #272]	; (2e15c <MQTTSubscribe+0x174>)
   2e04a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e04c:	68fb      	ldr	r3, [r7, #12]
   2e04e:	691c      	ldr	r4, [r3, #16]
   2e050:	68fb      	ldr	r3, [r7, #12]
   2e052:	689b      	ldr	r3, [r3, #8]
   2e054:	001d      	movs	r5, r3
   2e056:	68fb      	ldr	r3, [r7, #12]
   2e058:	0018      	movs	r0, r3
   2e05a:	4b41      	ldr	r3, [pc, #260]	; (2e160 <MQTTSubscribe+0x178>)
   2e05c:	4798      	blx	r3
   2e05e:	0003      	movs	r3, r0
   2e060:	b29a      	uxth	r2, r3
   2e062:	2320      	movs	r3, #32
   2e064:	18fb      	adds	r3, r7, r3
   2e066:	9302      	str	r3, [sp, #8]
   2e068:	2324      	movs	r3, #36	; 0x24
   2e06a:	18fb      	adds	r3, r7, r3
   2e06c:	9301      	str	r3, [sp, #4]
   2e06e:	2301      	movs	r3, #1
   2e070:	9300      	str	r3, [sp, #0]
   2e072:	0013      	movs	r3, r2
   2e074:	2200      	movs	r2, #0
   2e076:	0029      	movs	r1, r5
   2e078:	0020      	movs	r0, r4
   2e07a:	4c3a      	ldr	r4, [pc, #232]	; (2e164 <MQTTSubscribe+0x17c>)
   2e07c:	47a0      	blx	r4
   2e07e:	0003      	movs	r3, r0
   2e080:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e084:	2b00      	cmp	r3, #0
   2e086:	dd5f      	ble.n	2e148 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e088:	2330      	movs	r3, #48	; 0x30
   2e08a:	18fa      	adds	r2, r7, r3
   2e08c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e08e:	68fb      	ldr	r3, [r7, #12]
   2e090:	0018      	movs	r0, r3
   2e092:	4b35      	ldr	r3, [pc, #212]	; (2e168 <MQTTSubscribe+0x180>)
   2e094:	4798      	blx	r3
   2e096:	0003      	movs	r3, r0
   2e098:	647b      	str	r3, [r7, #68]	; 0x44
   2e09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e09c:	2b00      	cmp	r3, #0
   2e09e:	d155      	bne.n	2e14c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e0a0:	2330      	movs	r3, #48	; 0x30
   2e0a2:	18fa      	adds	r2, r7, r3
   2e0a4:	68fb      	ldr	r3, [r7, #12]
   2e0a6:	2109      	movs	r1, #9
   2e0a8:	0018      	movs	r0, r3
   2e0aa:	4b30      	ldr	r3, [pc, #192]	; (2e16c <MQTTSubscribe+0x184>)
   2e0ac:	4798      	blx	r3
   2e0ae:	0003      	movs	r3, r0
   2e0b0:	2b09      	cmp	r3, #9
   2e0b2:	d143      	bne.n	2e13c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e0b4:	2300      	movs	r3, #0
   2e0b6:	61fb      	str	r3, [r7, #28]
   2e0b8:	2301      	movs	r3, #1
   2e0ba:	425b      	negs	r3, r3
   2e0bc:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e0be:	68fb      	ldr	r3, [r7, #12]
   2e0c0:	695a      	ldr	r2, [r3, #20]
   2e0c2:	68fb      	ldr	r3, [r7, #12]
   2e0c4:	68db      	ldr	r3, [r3, #12]
   2e0c6:	001c      	movs	r4, r3
   2e0c8:	2318      	movs	r3, #24
   2e0ca:	18fb      	adds	r3, r7, r3
   2e0cc:	211c      	movs	r1, #28
   2e0ce:	1879      	adds	r1, r7, r1
   2e0d0:	2016      	movs	r0, #22
   2e0d2:	1838      	adds	r0, r7, r0
   2e0d4:	9401      	str	r4, [sp, #4]
   2e0d6:	9200      	str	r2, [sp, #0]
   2e0d8:	000a      	movs	r2, r1
   2e0da:	2101      	movs	r1, #1
   2e0dc:	4c24      	ldr	r4, [pc, #144]	; (2e170 <MQTTSubscribe+0x188>)
   2e0de:	47a0      	blx	r4
   2e0e0:	0003      	movs	r3, r0
   2e0e2:	2b01      	cmp	r3, #1
   2e0e4:	d101      	bne.n	2e0ea <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e0e6:	69bb      	ldr	r3, [r7, #24]
   2e0e8:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e0ec:	2b80      	cmp	r3, #128	; 0x80
   2e0ee:	d02e      	beq.n	2e14e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e0f0:	2300      	movs	r3, #0
   2e0f2:	643b      	str	r3, [r7, #64]	; 0x40
   2e0f4:	e01e      	b.n	2e134 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e0f6:	68fa      	ldr	r2, [r7, #12]
   2e0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0fa:	3304      	adds	r3, #4
   2e0fc:	00db      	lsls	r3, r3, #3
   2e0fe:	18d3      	adds	r3, r2, r3
   2e100:	3304      	adds	r3, #4
   2e102:	681b      	ldr	r3, [r3, #0]
   2e104:	2b00      	cmp	r3, #0
   2e106:	d112      	bne.n	2e12e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e108:	68fa      	ldr	r2, [r7, #12]
   2e10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e10c:	3304      	adds	r3, #4
   2e10e:	00db      	lsls	r3, r3, #3
   2e110:	18d3      	adds	r3, r2, r3
   2e112:	3304      	adds	r3, #4
   2e114:	68ba      	ldr	r2, [r7, #8]
   2e116:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e118:	68fa      	ldr	r2, [r7, #12]
   2e11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e11c:	3304      	adds	r3, #4
   2e11e:	00db      	lsls	r3, r3, #3
   2e120:	18d3      	adds	r3, r2, r3
   2e122:	3308      	adds	r3, #8
   2e124:	683a      	ldr	r2, [r7, #0]
   2e126:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e128:	2300      	movs	r3, #0
   2e12a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e12c:	e00f      	b.n	2e14e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e130:	3301      	adds	r3, #1
   2e132:	643b      	str	r3, [r7, #64]	; 0x40
   2e134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e136:	2b04      	cmp	r3, #4
   2e138:	dddd      	ble.n	2e0f6 <MQTTSubscribe+0x10e>
   2e13a:	e008      	b.n	2e14e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e13c:	2301      	movs	r3, #1
   2e13e:	425b      	negs	r3, r3
   2e140:	647b      	str	r3, [r7, #68]	; 0x44
   2e142:	e004      	b.n	2e14e <MQTTSubscribe+0x166>
		goto exit;
   2e144:	46c0      	nop			; (mov r8, r8)
   2e146:	e002      	b.n	2e14e <MQTTSubscribe+0x166>
        goto exit;
   2e148:	46c0      	nop			; (mov r8, r8)
   2e14a:	e000      	b.n	2e14e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e14c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e14e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e150:	0018      	movs	r0, r3
   2e152:	46bd      	mov	sp, r7
   2e154:	b012      	add	sp, #72	; 0x48
   2e156:	bdb0      	pop	{r4, r5, r7, pc}
   2e158:	0002e57d 	.word	0x0002e57d
   2e15c:	0002e505 	.word	0x0002e505
   2e160:	0002d6c5 	.word	0x0002d6c5
   2e164:	0002fab5 	.word	0x0002fab5
   2e168:	0002d6f5 	.word	0x0002d6f5
   2e16c:	0002de5d 	.word	0x0002de5d
   2e170:	0002fc05 	.word	0x0002fc05

0002e174 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e174:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e176:	46ce      	mov	lr, r9
   2e178:	4647      	mov	r7, r8
   2e17a:	b580      	push	{r7, lr}
   2e17c:	b097      	sub	sp, #92	; 0x5c
   2e17e:	af08      	add	r7, sp, #32
   2e180:	60f8      	str	r0, [r7, #12]
   2e182:	60b9      	str	r1, [r7, #8]
   2e184:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e186:	2301      	movs	r3, #1
   2e188:	425b      	negs	r3, r3
   2e18a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e18c:	2318      	movs	r3, #24
   2e18e:	18fb      	adds	r3, r7, r3
   2e190:	2200      	movs	r2, #0
   2e192:	601a      	str	r2, [r3, #0]
   2e194:	2318      	movs	r3, #24
   2e196:	18fb      	adds	r3, r7, r3
   2e198:	2200      	movs	r2, #0
   2e19a:	605a      	str	r2, [r3, #4]
   2e19c:	2318      	movs	r3, #24
   2e19e:	18fb      	adds	r3, r7, r3
   2e1a0:	2200      	movs	r2, #0
   2e1a2:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e1a4:	2318      	movs	r3, #24
   2e1a6:	18fb      	adds	r3, r7, r3
   2e1a8:	68ba      	ldr	r2, [r7, #8]
   2e1aa:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e1ac:	2300      	movs	r3, #0
   2e1ae:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e1b0:	68fb      	ldr	r3, [r7, #12]
   2e1b2:	6a1b      	ldr	r3, [r3, #32]
   2e1b4:	2b00      	cmp	r3, #0
   2e1b6:	d100      	bne.n	2e1ba <MQTTPublish+0x46>
   2e1b8:	e0a0      	b.n	2e2fc <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e1ba:	2324      	movs	r3, #36	; 0x24
   2e1bc:	18fb      	adds	r3, r7, r3
   2e1be:	0018      	movs	r0, r3
   2e1c0:	4b55      	ldr	r3, [pc, #340]	; (2e318 <MQTTPublish+0x1a4>)
   2e1c2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e1c4:	68fb      	ldr	r3, [r7, #12]
   2e1c6:	685a      	ldr	r2, [r3, #4]
   2e1c8:	2324      	movs	r3, #36	; 0x24
   2e1ca:	18fb      	adds	r3, r7, r3
   2e1cc:	0011      	movs	r1, r2
   2e1ce:	0018      	movs	r0, r3
   2e1d0:	4b52      	ldr	r3, [pc, #328]	; (2e31c <MQTTPublish+0x1a8>)
   2e1d2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e1d4:	687b      	ldr	r3, [r7, #4]
   2e1d6:	781b      	ldrb	r3, [r3, #0]
   2e1d8:	2b01      	cmp	r3, #1
   2e1da:	d003      	beq.n	2e1e4 <MQTTPublish+0x70>
   2e1dc:	687b      	ldr	r3, [r7, #4]
   2e1de:	781b      	ldrb	r3, [r3, #0]
   2e1e0:	2b02      	cmp	r3, #2
   2e1e2:	d107      	bne.n	2e1f4 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e1e4:	68fb      	ldr	r3, [r7, #12]
   2e1e6:	0018      	movs	r0, r3
   2e1e8:	4b4d      	ldr	r3, [pc, #308]	; (2e320 <MQTTPublish+0x1ac>)
   2e1ea:	4798      	blx	r3
   2e1ec:	0003      	movs	r3, r0
   2e1ee:	b29a      	uxth	r2, r3
   2e1f0:	687b      	ldr	r3, [r7, #4]
   2e1f2:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e1f4:	68fb      	ldr	r3, [r7, #12]
   2e1f6:	691b      	ldr	r3, [r3, #16]
   2e1f8:	469c      	mov	ip, r3
   2e1fa:	68fb      	ldr	r3, [r7, #12]
   2e1fc:	689b      	ldr	r3, [r3, #8]
   2e1fe:	001d      	movs	r5, r3
   2e200:	687b      	ldr	r3, [r7, #4]
   2e202:	781b      	ldrb	r3, [r3, #0]
   2e204:	001e      	movs	r6, r3
   2e206:	687b      	ldr	r3, [r7, #4]
   2e208:	785b      	ldrb	r3, [r3, #1]
   2e20a:	4698      	mov	r8, r3
   2e20c:	687b      	ldr	r3, [r7, #4]
   2e20e:	889b      	ldrh	r3, [r3, #4]
   2e210:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e212:	687b      	ldr	r3, [r7, #4]
   2e214:	689a      	ldr	r2, [r3, #8]
   2e216:	687b      	ldr	r3, [r7, #4]
   2e218:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e21a:	9306      	str	r3, [sp, #24]
   2e21c:	9205      	str	r2, [sp, #20]
   2e21e:	2318      	movs	r3, #24
   2e220:	18fa      	adds	r2, r7, r3
   2e222:	2308      	movs	r3, #8
   2e224:	446b      	add	r3, sp
   2e226:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e228:	c313      	stmia	r3!, {r0, r1, r4}
   2e22a:	464b      	mov	r3, r9
   2e22c:	9301      	str	r3, [sp, #4]
   2e22e:	4643      	mov	r3, r8
   2e230:	9300      	str	r3, [sp, #0]
   2e232:	0033      	movs	r3, r6
   2e234:	2200      	movs	r2, #0
   2e236:	0029      	movs	r1, r5
   2e238:	4660      	mov	r0, ip
   2e23a:	4c3a      	ldr	r4, [pc, #232]	; (2e324 <MQTTPublish+0x1b0>)
   2e23c:	47a0      	blx	r4
   2e23e:	0003      	movs	r3, r0
   2e240:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e244:	2b00      	cmp	r3, #0
   2e246:	dd5b      	ble.n	2e300 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e248:	2324      	movs	r3, #36	; 0x24
   2e24a:	18fa      	adds	r2, r7, r3
   2e24c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e24e:	68fb      	ldr	r3, [r7, #12]
   2e250:	0018      	movs	r0, r3
   2e252:	4b35      	ldr	r3, [pc, #212]	; (2e328 <MQTTPublish+0x1b4>)
   2e254:	4798      	blx	r3
   2e256:	0003      	movs	r3, r0
   2e258:	637b      	str	r3, [r7, #52]	; 0x34
   2e25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e25c:	2b00      	cmp	r3, #0
   2e25e:	d151      	bne.n	2e304 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e260:	687b      	ldr	r3, [r7, #4]
   2e262:	781b      	ldrb	r3, [r3, #0]
   2e264:	2b01      	cmp	r3, #1
   2e266:	d122      	bne.n	2e2ae <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e268:	2324      	movs	r3, #36	; 0x24
   2e26a:	18fa      	adds	r2, r7, r3
   2e26c:	68fb      	ldr	r3, [r7, #12]
   2e26e:	2104      	movs	r1, #4
   2e270:	0018      	movs	r0, r3
   2e272:	4b2e      	ldr	r3, [pc, #184]	; (2e32c <MQTTPublish+0x1b8>)
   2e274:	4798      	blx	r3
   2e276:	0003      	movs	r3, r0
   2e278:	2b04      	cmp	r3, #4
   2e27a:	d114      	bne.n	2e2a6 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e27c:	68fb      	ldr	r3, [r7, #12]
   2e27e:	695c      	ldr	r4, [r3, #20]
   2e280:	68fb      	ldr	r3, [r7, #12]
   2e282:	68db      	ldr	r3, [r3, #12]
   2e284:	2216      	movs	r2, #22
   2e286:	18ba      	adds	r2, r7, r2
   2e288:	2115      	movs	r1, #21
   2e28a:	1879      	adds	r1, r7, r1
   2e28c:	2014      	movs	r0, #20
   2e28e:	1838      	adds	r0, r7, r0
   2e290:	9300      	str	r3, [sp, #0]
   2e292:	0023      	movs	r3, r4
   2e294:	4c26      	ldr	r4, [pc, #152]	; (2e330 <MQTTPublish+0x1bc>)
   2e296:	47a0      	blx	r4
   2e298:	0003      	movs	r3, r0
   2e29a:	2b01      	cmp	r3, #1
   2e29c:	d033      	beq.n	2e306 <MQTTPublish+0x192>
                rc = FAILURE;
   2e29e:	2301      	movs	r3, #1
   2e2a0:	425b      	negs	r3, r3
   2e2a2:	637b      	str	r3, [r7, #52]	; 0x34
   2e2a4:	e02f      	b.n	2e306 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e2a6:	2301      	movs	r3, #1
   2e2a8:	425b      	negs	r3, r3
   2e2aa:	637b      	str	r3, [r7, #52]	; 0x34
   2e2ac:	e02b      	b.n	2e306 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2e2ae:	687b      	ldr	r3, [r7, #4]
   2e2b0:	781b      	ldrb	r3, [r3, #0]
   2e2b2:	2b02      	cmp	r3, #2
   2e2b4:	d127      	bne.n	2e306 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2e2b6:	2324      	movs	r3, #36	; 0x24
   2e2b8:	18fa      	adds	r2, r7, r3
   2e2ba:	68fb      	ldr	r3, [r7, #12]
   2e2bc:	2107      	movs	r1, #7
   2e2be:	0018      	movs	r0, r3
   2e2c0:	4b1a      	ldr	r3, [pc, #104]	; (2e32c <MQTTPublish+0x1b8>)
   2e2c2:	4798      	blx	r3
   2e2c4:	0003      	movs	r3, r0
   2e2c6:	2b07      	cmp	r3, #7
   2e2c8:	d114      	bne.n	2e2f4 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e2ca:	68fb      	ldr	r3, [r7, #12]
   2e2cc:	695c      	ldr	r4, [r3, #20]
   2e2ce:	68fb      	ldr	r3, [r7, #12]
   2e2d0:	68db      	ldr	r3, [r3, #12]
   2e2d2:	2212      	movs	r2, #18
   2e2d4:	18ba      	adds	r2, r7, r2
   2e2d6:	2111      	movs	r1, #17
   2e2d8:	1879      	adds	r1, r7, r1
   2e2da:	2010      	movs	r0, #16
   2e2dc:	1838      	adds	r0, r7, r0
   2e2de:	9300      	str	r3, [sp, #0]
   2e2e0:	0023      	movs	r3, r4
   2e2e2:	4c13      	ldr	r4, [pc, #76]	; (2e330 <MQTTPublish+0x1bc>)
   2e2e4:	47a0      	blx	r4
   2e2e6:	0003      	movs	r3, r0
   2e2e8:	2b01      	cmp	r3, #1
   2e2ea:	d00c      	beq.n	2e306 <MQTTPublish+0x192>
                rc = FAILURE;
   2e2ec:	2301      	movs	r3, #1
   2e2ee:	425b      	negs	r3, r3
   2e2f0:	637b      	str	r3, [r7, #52]	; 0x34
   2e2f2:	e008      	b.n	2e306 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e2f4:	2301      	movs	r3, #1
   2e2f6:	425b      	negs	r3, r3
   2e2f8:	637b      	str	r3, [r7, #52]	; 0x34
   2e2fa:	e004      	b.n	2e306 <MQTTPublish+0x192>
		goto exit;
   2e2fc:	46c0      	nop			; (mov r8, r8)
   2e2fe:	e002      	b.n	2e306 <MQTTPublish+0x192>
        goto exit;
   2e300:	46c0      	nop			; (mov r8, r8)
   2e302:	e000      	b.n	2e306 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2e304:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2e308:	0018      	movs	r0, r3
   2e30a:	46bd      	mov	sp, r7
   2e30c:	b00f      	add	sp, #60	; 0x3c
   2e30e:	bc0c      	pop	{r2, r3}
   2e310:	4690      	mov	r8, r2
   2e312:	4699      	mov	r9, r3
   2e314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e316:	46c0      	nop			; (mov r8, r8)
   2e318:	0002e57d 	.word	0x0002e57d
   2e31c:	0002e505 	.word	0x0002e505
   2e320:	0002d6c5 	.word	0x0002d6c5
   2e324:	0002f801 	.word	0x0002f801
   2e328:	0002d6f5 	.word	0x0002d6f5
   2e32c:	0002de5d 	.word	0x0002de5d
   2e330:	0002f279 	.word	0x0002f279

0002e334 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2e334:	b580      	push	{r7, lr}
   2e336:	b088      	sub	sp, #32
   2e338:	af00      	add	r7, sp, #0
   2e33a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e33c:	2301      	movs	r3, #1
   2e33e:	425b      	negs	r3, r3
   2e340:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2e342:	2300      	movs	r3, #0
   2e344:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2e346:	230c      	movs	r3, #12
   2e348:	18fb      	adds	r3, r7, r3
   2e34a:	0018      	movs	r0, r3
   2e34c:	4b13      	ldr	r3, [pc, #76]	; (2e39c <MQTTDisconnect+0x68>)
   2e34e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e350:	687b      	ldr	r3, [r7, #4]
   2e352:	685a      	ldr	r2, [r3, #4]
   2e354:	230c      	movs	r3, #12
   2e356:	18fb      	adds	r3, r7, r3
   2e358:	0011      	movs	r1, r2
   2e35a:	0018      	movs	r0, r3
   2e35c:	4b10      	ldr	r3, [pc, #64]	; (2e3a0 <MQTTDisconnect+0x6c>)
   2e35e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2e360:	687b      	ldr	r3, [r7, #4]
   2e362:	691a      	ldr	r2, [r3, #16]
   2e364:	687b      	ldr	r3, [r7, #4]
   2e366:	689b      	ldr	r3, [r3, #8]
   2e368:	0019      	movs	r1, r3
   2e36a:	0010      	movs	r0, r2
   2e36c:	4b0d      	ldr	r3, [pc, #52]	; (2e3a4 <MQTTDisconnect+0x70>)
   2e36e:	4798      	blx	r3
   2e370:	0003      	movs	r3, r0
   2e372:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2e374:	69bb      	ldr	r3, [r7, #24]
   2e376:	2b00      	cmp	r3, #0
   2e378:	dd08      	ble.n	2e38c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2e37a:	230c      	movs	r3, #12
   2e37c:	18fa      	adds	r2, r7, r3
   2e37e:	69b9      	ldr	r1, [r7, #24]
   2e380:	687b      	ldr	r3, [r7, #4]
   2e382:	0018      	movs	r0, r3
   2e384:	4b08      	ldr	r3, [pc, #32]	; (2e3a8 <MQTTDisconnect+0x74>)
   2e386:	4798      	blx	r3
   2e388:	0003      	movs	r3, r0
   2e38a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2e38c:	687b      	ldr	r3, [r7, #4]
   2e38e:	2200      	movs	r2, #0
   2e390:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e392:	69fb      	ldr	r3, [r7, #28]
}
   2e394:	0018      	movs	r0, r3
   2e396:	46bd      	mov	sp, r7
   2e398:	b008      	add	sp, #32
   2e39a:	bd80      	pop	{r7, pc}
   2e39c:	0002e57d 	.word	0x0002e57d
   2e3a0:	0002e505 	.word	0x0002e505
   2e3a4:	0002f12d 	.word	0x0002f12d
   2e3a8:	0002d6f5 	.word	0x0002d6f5

0002e3ac <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2e3ac:	b580      	push	{r7, lr}
   2e3ae:	b084      	sub	sp, #16
   2e3b0:	af00      	add	r7, sp, #0
   2e3b2:	0002      	movs	r2, r0
   2e3b4:	1dfb      	adds	r3, r7, #7
   2e3b6:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e3b8:	2300      	movs	r3, #0
   2e3ba:	60fb      	str	r3, [r7, #12]
   2e3bc:	e01c      	b.n	2e3f8 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2e3be:	4a12      	ldr	r2, [pc, #72]	; (2e408 <isMQTTSocket+0x5c>)
   2e3c0:	68fb      	ldr	r3, [r7, #12]
   2e3c2:	2164      	movs	r1, #100	; 0x64
   2e3c4:	434b      	muls	r3, r1
   2e3c6:	18d3      	adds	r3, r2, r3
   2e3c8:	3360      	adds	r3, #96	; 0x60
   2e3ca:	681b      	ldr	r3, [r3, #0]
   2e3cc:	2b00      	cmp	r3, #0
   2e3ce:	d010      	beq.n	2e3f2 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2e3d0:	4a0d      	ldr	r2, [pc, #52]	; (2e408 <isMQTTSocket+0x5c>)
   2e3d2:	68fb      	ldr	r3, [r7, #12]
   2e3d4:	2164      	movs	r1, #100	; 0x64
   2e3d6:	434b      	muls	r3, r1
   2e3d8:	18d3      	adds	r3, r2, r3
   2e3da:	3360      	adds	r3, #96	; 0x60
   2e3dc:	681b      	ldr	r3, [r3, #0]
   2e3de:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2e3e0:	68bb      	ldr	r3, [r7, #8]
   2e3e2:	6a1a      	ldr	r2, [r3, #32]
   2e3e4:	1dfb      	adds	r3, r7, #7
   2e3e6:	781b      	ldrb	r3, [r3, #0]
   2e3e8:	b25b      	sxtb	r3, r3
   2e3ea:	429a      	cmp	r2, r3
   2e3ec:	d101      	bne.n	2e3f2 <isMQTTSocket+0x46>
				return true;
   2e3ee:	2301      	movs	r3, #1
   2e3f0:	e006      	b.n	2e400 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e3f2:	68fb      	ldr	r3, [r7, #12]
   2e3f4:	3301      	adds	r3, #1
   2e3f6:	60fb      	str	r3, [r7, #12]
   2e3f8:	68fb      	ldr	r3, [r7, #12]
   2e3fa:	2b06      	cmp	r3, #6
   2e3fc:	d9df      	bls.n	2e3be <isMQTTSocket+0x12>
		}
	}
	return false;
   2e3fe:	2300      	movs	r3, #0
}
   2e400:	0018      	movs	r0, r3
   2e402:	46bd      	mov	sp, r7
   2e404:	b004      	add	sp, #16
   2e406:	bd80      	pop	{r7, pc}
   2e408:	20004400 	.word	0x20004400

0002e40c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2e40c:	b580      	push	{r7, lr}
   2e40e:	b082      	sub	sp, #8
   2e410:	af00      	add	r7, sp, #0
   2e412:	6078      	str	r0, [r7, #4]
   2e414:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2e416:	4b0d      	ldr	r3, [pc, #52]	; (2e44c <dnsResolveCallback+0x40>)
   2e418:	781b      	ldrb	r3, [r3, #0]
   2e41a:	2201      	movs	r2, #1
   2e41c:	4053      	eors	r3, r2
   2e41e:	b2db      	uxtb	r3, r3
   2e420:	2b00      	cmp	r3, #0
   2e422:	d00e      	beq.n	2e442 <dnsResolveCallback+0x36>
   2e424:	4b0a      	ldr	r3, [pc, #40]	; (2e450 <dnsResolveCallback+0x44>)
   2e426:	681b      	ldr	r3, [r3, #0]
   2e428:	687a      	ldr	r2, [r7, #4]
   2e42a:	0011      	movs	r1, r2
   2e42c:	0018      	movs	r0, r3
   2e42e:	4b09      	ldr	r3, [pc, #36]	; (2e454 <dnsResolveCallback+0x48>)
   2e430:	4798      	blx	r3
   2e432:	1e03      	subs	r3, r0, #0
   2e434:	d105      	bne.n	2e442 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2e436:	683a      	ldr	r2, [r7, #0]
   2e438:	4b07      	ldr	r3, [pc, #28]	; (2e458 <dnsResolveCallback+0x4c>)
   2e43a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2e43c:	4b03      	ldr	r3, [pc, #12]	; (2e44c <dnsResolveCallback+0x40>)
   2e43e:	2201      	movs	r2, #1
   2e440:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2e442:	46c0      	nop			; (mov r8, r8)
   2e444:	46bd      	mov	sp, r7
   2e446:	b002      	add	sp, #8
   2e448:	bd80      	pop	{r7, pc}
   2e44a:	46c0      	nop			; (mov r8, r8)
   2e44c:	200042f0 	.word	0x200042f0
   2e450:	200043fc 	.word	0x200043fc
   2e454:	0003494d 	.word	0x0003494d
   2e458:	200042e8 	.word	0x200042e8

0002e45c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2e45c:	b580      	push	{r7, lr}
   2e45e:	b084      	sub	sp, #16
   2e460:	af00      	add	r7, sp, #0
   2e462:	603a      	str	r2, [r7, #0]
   2e464:	1dfb      	adds	r3, r7, #7
   2e466:	1c02      	adds	r2, r0, #0
   2e468:	701a      	strb	r2, [r3, #0]
   2e46a:	1dbb      	adds	r3, r7, #6
   2e46c:	1c0a      	adds	r2, r1, #0
   2e46e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2e470:	1dfb      	adds	r3, r7, #7
   2e472:	781b      	ldrb	r3, [r3, #0]
   2e474:	b25b      	sxtb	r3, r3
   2e476:	0018      	movs	r0, r3
   2e478:	4b12      	ldr	r3, [pc, #72]	; (2e4c4 <tcpClientSocketEventHandler+0x68>)
   2e47a:	4798      	blx	r3
   2e47c:	1e03      	subs	r3, r0, #0
   2e47e:	d01c      	beq.n	2e4ba <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2e480:	1dbb      	adds	r3, r7, #6
   2e482:	781b      	ldrb	r3, [r3, #0]
   2e484:	2b06      	cmp	r3, #6
   2e486:	d00c      	beq.n	2e4a2 <tcpClientSocketEventHandler+0x46>
   2e488:	2b07      	cmp	r3, #7
   2e48a:	d006      	beq.n	2e49a <tcpClientSocketEventHandler+0x3e>
   2e48c:	2b05      	cmp	r3, #5
   2e48e:	d000      	beq.n	2e492 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2e490:	e013      	b.n	2e4ba <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2e492:	4b0d      	ldr	r3, [pc, #52]	; (2e4c8 <tcpClientSocketEventHandler+0x6c>)
   2e494:	2201      	movs	r2, #1
   2e496:	701a      	strb	r2, [r3, #0]
			break;
   2e498:	e00f      	b.n	2e4ba <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2e49a:	4b0c      	ldr	r3, [pc, #48]	; (2e4cc <tcpClientSocketEventHandler+0x70>)
   2e49c:	2201      	movs	r2, #1
   2e49e:	701a      	strb	r2, [r3, #0]
			break;
   2e4a0:	e00b      	b.n	2e4ba <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2e4a2:	683b      	ldr	r3, [r7, #0]
   2e4a4:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2e4a6:	68fb      	ldr	r3, [r7, #12]
   2e4a8:	2204      	movs	r2, #4
   2e4aa:	5e9b      	ldrsh	r3, [r3, r2]
   2e4ac:	001a      	movs	r2, r3
   2e4ae:	4b08      	ldr	r3, [pc, #32]	; (2e4d0 <tcpClientSocketEventHandler+0x74>)
   2e4b0:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2e4b2:	4b08      	ldr	r3, [pc, #32]	; (2e4d4 <tcpClientSocketEventHandler+0x78>)
   2e4b4:	2201      	movs	r2, #1
   2e4b6:	701a      	strb	r2, [r3, #0]
			break;
   2e4b8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2e4ba:	46c0      	nop			; (mov r8, r8)
   2e4bc:	46bd      	mov	sp, r7
   2e4be:	b004      	add	sp, #16
   2e4c0:	bd80      	pop	{r7, pc}
   2e4c2:	46c0      	nop			; (mov r8, r8)
   2e4c4:	0002e3ad 	.word	0x0002e3ad
   2e4c8:	200042f1 	.word	0x200042f1
   2e4cc:	200042f2 	.word	0x200042f2
   2e4d0:	200042ec 	.word	0x200042ec
   2e4d4:	200042f3 	.word	0x200042f3

0002e4d8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2e4d8:	b580      	push	{r7, lr}
   2e4da:	b082      	sub	sp, #8
   2e4dc:	af00      	add	r7, sp, #0
   2e4de:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2e4e0:	687b      	ldr	r3, [r7, #4]
   2e4e2:	3304      	adds	r3, #4
   2e4e4:	687a      	ldr	r2, [r7, #4]
   2e4e6:	0011      	movs	r1, r2
   2e4e8:	0018      	movs	r0, r3
   2e4ea:	4b05      	ldr	r3, [pc, #20]	; (2e500 <TimerIsExpired+0x28>)
   2e4ec:	4798      	blx	r3
   2e4ee:	0003      	movs	r3, r0
   2e4f0:	3b01      	subs	r3, #1
   2e4f2:	425a      	negs	r2, r3
   2e4f4:	4153      	adcs	r3, r2
   2e4f6:	b2db      	uxtb	r3, r3
}
   2e4f8:	0018      	movs	r0, r3
   2e4fa:	46bd      	mov	sp, r7
   2e4fc:	b002      	add	sp, #8
   2e4fe:	bd80      	pop	{r7, pc}
   2e500:	0001bbe1 	.word	0x0001bbe1

0002e504 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2e504:	b580      	push	{r7, lr}
   2e506:	b082      	sub	sp, #8
   2e508:	af00      	add	r7, sp, #0
   2e50a:	6078      	str	r0, [r7, #4]
   2e50c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2e50e:	687b      	ldr	r3, [r7, #4]
   2e510:	683a      	ldr	r2, [r7, #0]
   2e512:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2e514:	687b      	ldr	r3, [r7, #4]
   2e516:	3304      	adds	r3, #4
   2e518:	0018      	movs	r0, r3
   2e51a:	4b03      	ldr	r3, [pc, #12]	; (2e528 <TimerCountdownMS+0x24>)
   2e51c:	4798      	blx	r3
}
   2e51e:	46c0      	nop			; (mov r8, r8)
   2e520:	46bd      	mov	sp, r7
   2e522:	b002      	add	sp, #8
   2e524:	bd80      	pop	{r7, pc}
   2e526:	46c0      	nop			; (mov r8, r8)
   2e528:	0001bb75 	.word	0x0001bb75

0002e52c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2e52c:	b580      	push	{r7, lr}
   2e52e:	b082      	sub	sp, #8
   2e530:	af00      	add	r7, sp, #0
   2e532:	6078      	str	r0, [r7, #4]
   2e534:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2e536:	683b      	ldr	r3, [r7, #0]
   2e538:	22fa      	movs	r2, #250	; 0xfa
   2e53a:	0092      	lsls	r2, r2, #2
   2e53c:	435a      	muls	r2, r3
   2e53e:	687b      	ldr	r3, [r7, #4]
   2e540:	0011      	movs	r1, r2
   2e542:	0018      	movs	r0, r3
   2e544:	4b02      	ldr	r3, [pc, #8]	; (2e550 <TimerCountdown+0x24>)
   2e546:	4798      	blx	r3
}
   2e548:	46c0      	nop			; (mov r8, r8)
   2e54a:	46bd      	mov	sp, r7
   2e54c:	b002      	add	sp, #8
   2e54e:	bd80      	pop	{r7, pc}
   2e550:	0002e505 	.word	0x0002e505

0002e554 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2e554:	b580      	push	{r7, lr}
   2e556:	b082      	sub	sp, #8
   2e558:	af00      	add	r7, sp, #0
   2e55a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2e55c:	687b      	ldr	r3, [r7, #4]
   2e55e:	3304      	adds	r3, #4
   2e560:	687a      	ldr	r2, [r7, #4]
   2e562:	0011      	movs	r1, r2
   2e564:	0018      	movs	r0, r3
   2e566:	4b04      	ldr	r3, [pc, #16]	; (2e578 <TimerLeftMS+0x24>)
   2e568:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2e56a:	687b      	ldr	r3, [r7, #4]
   2e56c:	681b      	ldr	r3, [r3, #0]
}
   2e56e:	0018      	movs	r0, r3
   2e570:	46bd      	mov	sp, r7
   2e572:	b002      	add	sp, #8
   2e574:	bd80      	pop	{r7, pc}
   2e576:	46c0      	nop			; (mov r8, r8)
   2e578:	0001bbe1 	.word	0x0001bbe1

0002e57c <TimerInit>:


void TimerInit(Timer* timer) {
   2e57c:	b580      	push	{r7, lr}
   2e57e:	b082      	sub	sp, #8
   2e580:	af00      	add	r7, sp, #0
   2e582:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2e584:	687b      	ldr	r3, [r7, #4]
   2e586:	2200      	movs	r2, #0
   2e588:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2e58a:	687b      	ldr	r3, [r7, #4]
   2e58c:	3304      	adds	r3, #4
   2e58e:	2208      	movs	r2, #8
   2e590:	2100      	movs	r1, #0
   2e592:	0018      	movs	r0, r3
   2e594:	4b02      	ldr	r3, [pc, #8]	; (2e5a0 <TimerInit+0x24>)
   2e596:	4798      	blx	r3
}
   2e598:	46c0      	nop			; (mov r8, r8)
   2e59a:	46bd      	mov	sp, r7
   2e59c:	b002      	add	sp, #8
   2e59e:	bd80      	pop	{r7, pc}
   2e5a0:	0003460f 	.word	0x0003460f

0002e5a4 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2e5a4:	b590      	push	{r4, r7, lr}
   2e5a6:	b085      	sub	sp, #20
   2e5a8:	af00      	add	r7, sp, #0
   2e5aa:	60f8      	str	r0, [r7, #12]
   2e5ac:	60b9      	str	r1, [r7, #8]
   2e5ae:	607a      	str	r2, [r7, #4]
   2e5b0:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2e5b2:	683b      	ldr	r3, [r7, #0]
   2e5b4:	2b00      	cmp	r3, #0
   2e5b6:	d101      	bne.n	2e5bc <WINC1500_read+0x18>
   2e5b8:	230a      	movs	r3, #10
   2e5ba:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2e5bc:	4b2c      	ldr	r3, [pc, #176]	; (2e670 <WINC1500_read+0xcc>)
   2e5be:	681b      	ldr	r3, [r3, #0]
   2e5c0:	2b00      	cmp	r3, #0
   2e5c2:	d131      	bne.n	2e628 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2e5c4:	4b2b      	ldr	r3, [pc, #172]	; (2e674 <WINC1500_read+0xd0>)
   2e5c6:	2200      	movs	r2, #0
   2e5c8:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2e5ca:	68fb      	ldr	r3, [r7, #12]
   2e5cc:	681b      	ldr	r3, [r3, #0]
   2e5ce:	b258      	sxtb	r0, r3
   2e5d0:	683c      	ldr	r4, [r7, #0]
   2e5d2:	2380      	movs	r3, #128	; 0x80
   2e5d4:	005a      	lsls	r2, r3, #1
   2e5d6:	4928      	ldr	r1, [pc, #160]	; (2e678 <WINC1500_read+0xd4>)
   2e5d8:	0023      	movs	r3, r4
   2e5da:	4c28      	ldr	r4, [pc, #160]	; (2e67c <WINC1500_read+0xd8>)
   2e5dc:	47a0      	blx	r4
   2e5de:	1e03      	subs	r3, r0, #0
   2e5e0:	d005      	beq.n	2e5ee <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2e5e2:	2301      	movs	r3, #1
   2e5e4:	425b      	negs	r3, r3
   2e5e6:	e03e      	b.n	2e666 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2e5e8:	2000      	movs	r0, #0
   2e5ea:	4b25      	ldr	r3, [pc, #148]	; (2e680 <WINC1500_read+0xdc>)
   2e5ec:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2e5ee:	4b21      	ldr	r3, [pc, #132]	; (2e674 <WINC1500_read+0xd0>)
   2e5f0:	781b      	ldrb	r3, [r3, #0]
   2e5f2:	2201      	movs	r2, #1
   2e5f4:	4053      	eors	r3, r2
   2e5f6:	b2db      	uxtb	r3, r3
   2e5f8:	2b00      	cmp	r3, #0
   2e5fa:	d1f5      	bne.n	2e5e8 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2e5fc:	4b21      	ldr	r3, [pc, #132]	; (2e684 <WINC1500_read+0xe0>)
   2e5fe:	681b      	ldr	r3, [r3, #0]
   2e600:	2b00      	cmp	r3, #0
   2e602:	dd08      	ble.n	2e616 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2e604:	4b1f      	ldr	r3, [pc, #124]	; (2e684 <WINC1500_read+0xe0>)
   2e606:	681b      	ldr	r3, [r3, #0]
   2e608:	001a      	movs	r2, r3
   2e60a:	4b19      	ldr	r3, [pc, #100]	; (2e670 <WINC1500_read+0xcc>)
   2e60c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2e60e:	4b1e      	ldr	r3, [pc, #120]	; (2e688 <WINC1500_read+0xe4>)
   2e610:	2200      	movs	r2, #0
   2e612:	601a      	str	r2, [r3, #0]
   2e614:	e008      	b.n	2e628 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2e616:	4b16      	ldr	r3, [pc, #88]	; (2e670 <WINC1500_read+0xcc>)
   2e618:	2200      	movs	r2, #0
   2e61a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2e61c:	4b1a      	ldr	r3, [pc, #104]	; (2e688 <WINC1500_read+0xe4>)
   2e61e:	2200      	movs	r2, #0
   2e620:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2e622:	4b18      	ldr	r3, [pc, #96]	; (2e684 <WINC1500_read+0xe0>)
   2e624:	681b      	ldr	r3, [r3, #0]
   2e626:	e01e      	b.n	2e666 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2e628:	4b11      	ldr	r3, [pc, #68]	; (2e670 <WINC1500_read+0xcc>)
   2e62a:	681b      	ldr	r3, [r3, #0]
   2e62c:	001a      	movs	r2, r3
   2e62e:	687b      	ldr	r3, [r7, #4]
   2e630:	4293      	cmp	r3, r2
   2e632:	dd02      	ble.n	2e63a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2e634:	2301      	movs	r3, #1
   2e636:	425b      	negs	r3, r3
   2e638:	e015      	b.n	2e666 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2e63a:	4b13      	ldr	r3, [pc, #76]	; (2e688 <WINC1500_read+0xe4>)
   2e63c:	681a      	ldr	r2, [r3, #0]
   2e63e:	4b0e      	ldr	r3, [pc, #56]	; (2e678 <WINC1500_read+0xd4>)
   2e640:	18d1      	adds	r1, r2, r3
   2e642:	687a      	ldr	r2, [r7, #4]
   2e644:	68bb      	ldr	r3, [r7, #8]
   2e646:	0018      	movs	r0, r3
   2e648:	4b10      	ldr	r3, [pc, #64]	; (2e68c <WINC1500_read+0xe8>)
   2e64a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2e64c:	4b08      	ldr	r3, [pc, #32]	; (2e670 <WINC1500_read+0xcc>)
   2e64e:	681a      	ldr	r2, [r3, #0]
   2e650:	687b      	ldr	r3, [r7, #4]
   2e652:	1ad2      	subs	r2, r2, r3
   2e654:	4b06      	ldr	r3, [pc, #24]	; (2e670 <WINC1500_read+0xcc>)
   2e656:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2e658:	4b0b      	ldr	r3, [pc, #44]	; (2e688 <WINC1500_read+0xe4>)
   2e65a:	681a      	ldr	r2, [r3, #0]
   2e65c:	687b      	ldr	r3, [r7, #4]
   2e65e:	18d2      	adds	r2, r2, r3
   2e660:	4b09      	ldr	r3, [pc, #36]	; (2e688 <WINC1500_read+0xe4>)
   2e662:	601a      	str	r2, [r3, #0]
  
  return len;
   2e664:	687b      	ldr	r3, [r7, #4]
}
   2e666:	0018      	movs	r0, r3
   2e668:	46bd      	mov	sp, r7
   2e66a:	b005      	add	sp, #20
   2e66c:	bd90      	pop	{r4, r7, pc}
   2e66e:	46c0      	nop			; (mov r8, r8)
   2e670:	200043f8 	.word	0x200043f8
   2e674:	200042f3 	.word	0x200042f3
   2e678:	200042f4 	.word	0x200042f4
   2e67c:	00024b2d 	.word	0x00024b2d
   2e680:	00021075 	.word	0x00021075
   2e684:	200042ec 	.word	0x200042ec
   2e688:	200043f4 	.word	0x200043f4
   2e68c:	000345d9 	.word	0x000345d9

0002e690 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2e690:	b590      	push	{r4, r7, lr}
   2e692:	b085      	sub	sp, #20
   2e694:	af00      	add	r7, sp, #0
   2e696:	60f8      	str	r0, [r7, #12]
   2e698:	60b9      	str	r1, [r7, #8]
   2e69a:	607a      	str	r2, [r7, #4]
   2e69c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2e69e:	4b10      	ldr	r3, [pc, #64]	; (2e6e0 <WINC1500_write+0x50>)
   2e6a0:	2200      	movs	r2, #0
   2e6a2:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2e6a4:	68fb      	ldr	r3, [r7, #12]
   2e6a6:	681b      	ldr	r3, [r3, #0]
   2e6a8:	b258      	sxtb	r0, r3
   2e6aa:	687b      	ldr	r3, [r7, #4]
   2e6ac:	b29a      	uxth	r2, r3
   2e6ae:	68b9      	ldr	r1, [r7, #8]
   2e6b0:	2300      	movs	r3, #0
   2e6b2:	4c0c      	ldr	r4, [pc, #48]	; (2e6e4 <WINC1500_write+0x54>)
   2e6b4:	47a0      	blx	r4
   2e6b6:	1e03      	subs	r3, r0, #0
   2e6b8:	d005      	beq.n	2e6c6 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2e6ba:	2301      	movs	r3, #1
   2e6bc:	425b      	negs	r3, r3
   2e6be:	e00a      	b.n	2e6d6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2e6c0:	2000      	movs	r0, #0
   2e6c2:	4b09      	ldr	r3, [pc, #36]	; (2e6e8 <WINC1500_write+0x58>)
   2e6c4:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2e6c6:	4b06      	ldr	r3, [pc, #24]	; (2e6e0 <WINC1500_write+0x50>)
   2e6c8:	781b      	ldrb	r3, [r3, #0]
   2e6ca:	2201      	movs	r2, #1
   2e6cc:	4053      	eors	r3, r2
   2e6ce:	b2db      	uxtb	r3, r3
   2e6d0:	2b00      	cmp	r3, #0
   2e6d2:	d1f5      	bne.n	2e6c0 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2e6d4:	687b      	ldr	r3, [r7, #4]
}
   2e6d6:	0018      	movs	r0, r3
   2e6d8:	46bd      	mov	sp, r7
   2e6da:	b005      	add	sp, #20
   2e6dc:	bd90      	pop	{r4, r7, pc}
   2e6de:	46c0      	nop			; (mov r8, r8)
   2e6e0:	200042f2 	.word	0x200042f2
   2e6e4:	000249c9 	.word	0x000249c9
   2e6e8:	00021075 	.word	0x00021075

0002e6ec <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2e6ec:	b580      	push	{r7, lr}
   2e6ee:	b082      	sub	sp, #8
   2e6f0:	af00      	add	r7, sp, #0
   2e6f2:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2e6f4:	687b      	ldr	r3, [r7, #4]
   2e6f6:	681b      	ldr	r3, [r3, #0]
   2e6f8:	b25b      	sxtb	r3, r3
   2e6fa:	0018      	movs	r0, r3
   2e6fc:	4b06      	ldr	r3, [pc, #24]	; (2e718 <WINC1500_disconnect+0x2c>)
   2e6fe:	4798      	blx	r3
	n->socket=-1;
   2e700:	687b      	ldr	r3, [r7, #4]
   2e702:	2201      	movs	r2, #1
   2e704:	4252      	negs	r2, r2
   2e706:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2e708:	4b04      	ldr	r3, [pc, #16]	; (2e71c <WINC1500_disconnect+0x30>)
   2e70a:	2200      	movs	r2, #0
   2e70c:	701a      	strb	r2, [r3, #0]
}
   2e70e:	46c0      	nop			; (mov r8, r8)
   2e710:	46bd      	mov	sp, r7
   2e712:	b002      	add	sp, #8
   2e714:	bd80      	pop	{r7, pc}
   2e716:	46c0      	nop			; (mov r8, r8)
   2e718:	00024cad 	.word	0x00024cad
   2e71c:	200042f1 	.word	0x200042f1

0002e720 <NetworkInit>:


void NetworkInit(Network* n) {
   2e720:	b580      	push	{r7, lr}
   2e722:	b082      	sub	sp, #8
   2e724:	af00      	add	r7, sp, #0
   2e726:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2e728:	687b      	ldr	r3, [r7, #4]
   2e72a:	2201      	movs	r2, #1
   2e72c:	4252      	negs	r2, r2
   2e72e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2e730:	687b      	ldr	r3, [r7, #4]
   2e732:	4a06      	ldr	r2, [pc, #24]	; (2e74c <NetworkInit+0x2c>)
   2e734:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2e736:	687b      	ldr	r3, [r7, #4]
   2e738:	4a05      	ldr	r2, [pc, #20]	; (2e750 <NetworkInit+0x30>)
   2e73a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2e73c:	687b      	ldr	r3, [r7, #4]
   2e73e:	4a05      	ldr	r2, [pc, #20]	; (2e754 <NetworkInit+0x34>)
   2e740:	611a      	str	r2, [r3, #16]
}
   2e742:	46c0      	nop			; (mov r8, r8)
   2e744:	46bd      	mov	sp, r7
   2e746:	b002      	add	sp, #8
   2e748:	bd80      	pop	{r7, pc}
   2e74a:	46c0      	nop			; (mov r8, r8)
   2e74c:	0002e5a5 	.word	0x0002e5a5
   2e750:	0002e691 	.word	0x0002e691
   2e754:	0002e6ed 	.word	0x0002e6ed

0002e758 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2e758:	b580      	push	{r7, lr}
   2e75a:	b088      	sub	sp, #32
   2e75c:	af00      	add	r7, sp, #0
   2e75e:	60f8      	str	r0, [r7, #12]
   2e760:	60b9      	str	r1, [r7, #8]
   2e762:	607a      	str	r2, [r7, #4]
   2e764:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2e766:	4b37      	ldr	r3, [pc, #220]	; (2e844 <ConnectNetwork+0xec>)
   2e768:	2200      	movs	r2, #0
   2e76a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2e76c:	4b36      	ldr	r3, [pc, #216]	; (2e848 <ConnectNetwork+0xf0>)
   2e76e:	68ba      	ldr	r2, [r7, #8]
   2e770:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2e772:	68bb      	ldr	r3, [r7, #8]
   2e774:	0018      	movs	r0, r3
   2e776:	4b35      	ldr	r3, [pc, #212]	; (2e84c <ConnectNetwork+0xf4>)
   2e778:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2e77a:	e002      	b.n	2e782 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2e77c:	2000      	movs	r0, #0
   2e77e:	4b34      	ldr	r3, [pc, #208]	; (2e850 <ConnectNetwork+0xf8>)
   2e780:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2e782:	4b30      	ldr	r3, [pc, #192]	; (2e844 <ConnectNetwork+0xec>)
   2e784:	781b      	ldrb	r3, [r3, #0]
   2e786:	2201      	movs	r2, #1
   2e788:	4053      	eors	r3, r2
   2e78a:	b2db      	uxtb	r3, r3
   2e78c:	2b00      	cmp	r3, #0
   2e78e:	d1f5      	bne.n	2e77c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2e790:	4b30      	ldr	r3, [pc, #192]	; (2e854 <ConnectNetwork+0xfc>)
   2e792:	681a      	ldr	r2, [r3, #0]
   2e794:	68fb      	ldr	r3, [r7, #12]
   2e796:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2e798:	2310      	movs	r3, #16
   2e79a:	18fb      	adds	r3, r7, r3
   2e79c:	2202      	movs	r2, #2
   2e79e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2e7a0:	687b      	ldr	r3, [r7, #4]
   2e7a2:	b29b      	uxth	r3, r3
   2e7a4:	021b      	lsls	r3, r3, #8
   2e7a6:	b21a      	sxth	r2, r3
   2e7a8:	687b      	ldr	r3, [r7, #4]
   2e7aa:	b29b      	uxth	r3, r3
   2e7ac:	0a1b      	lsrs	r3, r3, #8
   2e7ae:	b29b      	uxth	r3, r3
   2e7b0:	b21b      	sxth	r3, r3
   2e7b2:	4313      	orrs	r3, r2
   2e7b4:	b21b      	sxth	r3, r3
   2e7b6:	b29a      	uxth	r2, r3
   2e7b8:	2310      	movs	r3, #16
   2e7ba:	18fb      	adds	r3, r7, r3
   2e7bc:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2e7be:	4b25      	ldr	r3, [pc, #148]	; (2e854 <ConnectNetwork+0xfc>)
   2e7c0:	681b      	ldr	r3, [r3, #0]
   2e7c2:	001a      	movs	r2, r3
   2e7c4:	2310      	movs	r3, #16
   2e7c6:	18fb      	adds	r3, r7, r3
   2e7c8:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2e7ca:	68fb      	ldr	r3, [r7, #12]
   2e7cc:	681b      	ldr	r3, [r3, #0]
   2e7ce:	2b00      	cmp	r3, #0
   2e7d0:	da0a      	bge.n	2e7e8 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2e7d2:	683b      	ldr	r3, [r7, #0]
   2e7d4:	b2db      	uxtb	r3, r3
   2e7d6:	001a      	movs	r2, r3
   2e7d8:	2101      	movs	r1, #1
   2e7da:	2002      	movs	r0, #2
   2e7dc:	4b1e      	ldr	r3, [pc, #120]	; (2e858 <ConnectNetwork+0x100>)
   2e7de:	4798      	blx	r3
   2e7e0:	0003      	movs	r3, r0
   2e7e2:	001a      	movs	r2, r3
   2e7e4:	68fb      	ldr	r3, [r7, #12]
   2e7e6:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2e7e8:	68fb      	ldr	r3, [r7, #12]
   2e7ea:	681b      	ldr	r3, [r3, #0]
   2e7ec:	3301      	adds	r3, #1
   2e7ee:	d108      	bne.n	2e802 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2e7f0:	68fb      	ldr	r3, [r7, #12]
   2e7f2:	681b      	ldr	r3, [r3, #0]
   2e7f4:	b25b      	sxtb	r3, r3
   2e7f6:	0018      	movs	r0, r3
   2e7f8:	4b18      	ldr	r3, [pc, #96]	; (2e85c <ConnectNetwork+0x104>)
   2e7fa:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2e7fc:	2309      	movs	r3, #9
   2e7fe:	425b      	negs	r3, r3
   2e800:	e01c      	b.n	2e83c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2e802:	68fb      	ldr	r3, [r7, #12]
   2e804:	681b      	ldr	r3, [r3, #0]
   2e806:	b25b      	sxtb	r3, r3
   2e808:	2210      	movs	r2, #16
   2e80a:	18b9      	adds	r1, r7, r2
   2e80c:	2210      	movs	r2, #16
   2e80e:	0018      	movs	r0, r3
   2e810:	4b13      	ldr	r3, [pc, #76]	; (2e860 <ConnectNetwork+0x108>)
   2e812:	4798      	blx	r3
   2e814:	1e03      	subs	r3, r0, #0
   2e816:	d002      	beq.n	2e81e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2e818:	2309      	movs	r3, #9
   2e81a:	425b      	negs	r3, r3
   2e81c:	e00e      	b.n	2e83c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2e81e:	4b11      	ldr	r3, [pc, #68]	; (2e864 <ConnectNetwork+0x10c>)
   2e820:	2200      	movs	r2, #0
   2e822:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2e824:	e002      	b.n	2e82c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2e826:	2000      	movs	r0, #0
   2e828:	4b09      	ldr	r3, [pc, #36]	; (2e850 <ConnectNetwork+0xf8>)
   2e82a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2e82c:	4b0d      	ldr	r3, [pc, #52]	; (2e864 <ConnectNetwork+0x10c>)
   2e82e:	781b      	ldrb	r3, [r3, #0]
   2e830:	2201      	movs	r2, #1
   2e832:	4053      	eors	r3, r2
   2e834:	b2db      	uxtb	r3, r3
   2e836:	2b00      	cmp	r3, #0
   2e838:	d1f5      	bne.n	2e826 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2e83a:	2300      	movs	r3, #0
   2e83c:	0018      	movs	r0, r3
   2e83e:	46bd      	mov	sp, r7
   2e840:	b008      	add	sp, #32
   2e842:	bd80      	pop	{r7, pc}
   2e844:	200042f0 	.word	0x200042f0
   2e848:	200043fc 	.word	0x200043fc
   2e84c:	00024ef5 	.word	0x00024ef5
   2e850:	00021075 	.word	0x00021075
   2e854:	200042e8 	.word	0x200042e8
   2e858:	000246a1 	.word	0x000246a1
   2e85c:	00024cad 	.word	0x00024cad
   2e860:	000248b5 	.word	0x000248b5
   2e864:	200042f1 	.word	0x200042f1

0002e868 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2e868:	b580      	push	{r7, lr}
   2e86a:	b084      	sub	sp, #16
   2e86c:	af00      	add	r7, sp, #0
   2e86e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2e870:	687b      	ldr	r3, [r7, #4]
   2e872:	2b00      	cmp	r3, #0
   2e874:	d022      	beq.n	2e8bc <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e876:	2300      	movs	r3, #0
   2e878:	60fb      	str	r3, [r7, #12]
   2e87a:	e01b      	b.n	2e8b4 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2e87c:	4a11      	ldr	r2, [pc, #68]	; (2e8c4 <allocateClient+0x5c>)
   2e87e:	68fb      	ldr	r3, [r7, #12]
   2e880:	2164      	movs	r1, #100	; 0x64
   2e882:	434b      	muls	r3, r1
   2e884:	18d3      	adds	r3, r2, r3
   2e886:	3360      	adds	r3, #96	; 0x60
   2e888:	681b      	ldr	r3, [r3, #0]
   2e88a:	2b00      	cmp	r3, #0
   2e88c:	d10f      	bne.n	2e8ae <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2e88e:	4a0d      	ldr	r2, [pc, #52]	; (2e8c4 <allocateClient+0x5c>)
   2e890:	68fb      	ldr	r3, [r7, #12]
   2e892:	2164      	movs	r1, #100	; 0x64
   2e894:	434b      	muls	r3, r1
   2e896:	18d3      	adds	r3, r2, r3
   2e898:	3360      	adds	r3, #96	; 0x60
   2e89a:	687a      	ldr	r2, [r7, #4]
   2e89c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2e89e:	68fb      	ldr	r3, [r7, #12]
   2e8a0:	2264      	movs	r2, #100	; 0x64
   2e8a2:	435a      	muls	r2, r3
   2e8a4:	4b07      	ldr	r3, [pc, #28]	; (2e8c4 <allocateClient+0x5c>)
   2e8a6:	18d2      	adds	r2, r2, r3
   2e8a8:	687b      	ldr	r3, [r7, #4]
   2e8aa:	61da      	str	r2, [r3, #28]
			return;
   2e8ac:	e007      	b.n	2e8be <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e8ae:	68fb      	ldr	r3, [r7, #12]
   2e8b0:	3301      	adds	r3, #1
   2e8b2:	60fb      	str	r3, [r7, #12]
   2e8b4:	68fb      	ldr	r3, [r7, #12]
   2e8b6:	2b06      	cmp	r3, #6
   2e8b8:	d9e0      	bls.n	2e87c <allocateClient+0x14>
   2e8ba:	e000      	b.n	2e8be <allocateClient+0x56>
		return;
   2e8bc:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2e8be:	46bd      	mov	sp, r7
   2e8c0:	b004      	add	sp, #16
   2e8c2:	bd80      	pop	{r7, pc}
   2e8c4:	20004400 	.word	0x20004400

0002e8c8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2e8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e8ca:	b089      	sub	sp, #36	; 0x24
   2e8cc:	af04      	add	r7, sp, #16
   2e8ce:	6078      	str	r0, [r7, #4]
   2e8d0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2e8d2:	687b      	ldr	r3, [r7, #4]
   2e8d4:	2b00      	cmp	r3, #0
   2e8d6:	d00a      	beq.n	2e8ee <mqtt_init+0x26>
   2e8d8:	683b      	ldr	r3, [r7, #0]
   2e8da:	2b00      	cmp	r3, #0
   2e8dc:	d007      	beq.n	2e8ee <mqtt_init+0x26>
   2e8de:	683b      	ldr	r3, [r7, #0]
   2e8e0:	691b      	ldr	r3, [r3, #16]
   2e8e2:	2b00      	cmp	r3, #0
   2e8e4:	d003      	beq.n	2e8ee <mqtt_init+0x26>
   2e8e6:	683b      	ldr	r3, [r7, #0]
   2e8e8:	689b      	ldr	r3, [r3, #8]
   2e8ea:	2b00      	cmp	r3, #0
   2e8ec:	d102      	bne.n	2e8f4 <mqtt_init+0x2c>
		return FAILURE;
   2e8ee:	2301      	movs	r3, #1
   2e8f0:	425b      	negs	r3, r3
   2e8f2:	e034      	b.n	2e95e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2e8f4:	683b      	ldr	r3, [r7, #0]
   2e8f6:	889b      	ldrh	r3, [r3, #4]
   2e8f8:	001a      	movs	r2, r3
   2e8fa:	23fa      	movs	r3, #250	; 0xfa
   2e8fc:	009b      	lsls	r3, r3, #2
   2e8fe:	4353      	muls	r3, r2
   2e900:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2e902:	687b      	ldr	r3, [r7, #4]
   2e904:	3320      	adds	r3, #32
   2e906:	0018      	movs	r0, r3
   2e908:	4b17      	ldr	r3, [pc, #92]	; (2e968 <mqtt_init+0xa0>)
   2e90a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2e90c:	687b      	ldr	r3, [r7, #4]
   2e90e:	3304      	adds	r3, #4
   2e910:	6839      	ldr	r1, [r7, #0]
   2e912:	2218      	movs	r2, #24
   2e914:	0018      	movs	r0, r3
   2e916:	4b15      	ldr	r3, [pc, #84]	; (2e96c <mqtt_init+0xa4>)
   2e918:	4798      	blx	r3
	allocateClient(module);
   2e91a:	687b      	ldr	r3, [r7, #4]
   2e91c:	0018      	movs	r0, r3
   2e91e:	4b14      	ldr	r3, [pc, #80]	; (2e970 <mqtt_init+0xa8>)
   2e920:	4798      	blx	r3
	
	if(module->client)
   2e922:	687b      	ldr	r3, [r7, #4]
   2e924:	69db      	ldr	r3, [r3, #28]
   2e926:	2b00      	cmp	r3, #0
   2e928:	d017      	beq.n	2e95a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2e92a:	687b      	ldr	r3, [r7, #4]
   2e92c:	69d8      	ldr	r0, [r3, #28]
   2e92e:	687b      	ldr	r3, [r7, #4]
   2e930:	3320      	adds	r3, #32
   2e932:	001c      	movs	r4, r3
   2e934:	683b      	ldr	r3, [r7, #0]
   2e936:	691e      	ldr	r6, [r3, #16]
   2e938:	683b      	ldr	r3, [r7, #0]
   2e93a:	695a      	ldr	r2, [r3, #20]
   2e93c:	683b      	ldr	r3, [r7, #0]
   2e93e:	6899      	ldr	r1, [r3, #8]
   2e940:	683b      	ldr	r3, [r7, #0]
   2e942:	68db      	ldr	r3, [r3, #12]
   2e944:	68fd      	ldr	r5, [r7, #12]
   2e946:	9302      	str	r3, [sp, #8]
   2e948:	9101      	str	r1, [sp, #4]
   2e94a:	9200      	str	r2, [sp, #0]
   2e94c:	0033      	movs	r3, r6
   2e94e:	002a      	movs	r2, r5
   2e950:	0021      	movs	r1, r4
   2e952:	4c08      	ldr	r4, [pc, #32]	; (2e974 <mqtt_init+0xac>)
   2e954:	47a0      	blx	r4
		return SUCCESS;
   2e956:	2300      	movs	r3, #0
   2e958:	e001      	b.n	2e95e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2e95a:	2301      	movs	r3, #1
   2e95c:	425b      	negs	r3, r3
}
   2e95e:	0018      	movs	r0, r3
   2e960:	46bd      	mov	sp, r7
   2e962:	b005      	add	sp, #20
   2e964:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e966:	46c0      	nop			; (mov r8, r8)
   2e968:	0002e721 	.word	0x0002e721
   2e96c:	000345d9 	.word	0x000345d9
   2e970:	0002e869 	.word	0x0002e869
   2e974:	0002d799 	.word	0x0002d799

0002e978 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2e978:	b580      	push	{r7, lr}
   2e97a:	b082      	sub	sp, #8
   2e97c:	af00      	add	r7, sp, #0
   2e97e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2e980:	687b      	ldr	r3, [r7, #4]
   2e982:	4a0c      	ldr	r2, [pc, #48]	; (2e9b4 <mqtt_get_config_defaults+0x3c>)
   2e984:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2e986:	687b      	ldr	r3, [r7, #4]
   2e988:	2200      	movs	r2, #0
   2e98a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2e98c:	687b      	ldr	r3, [r7, #4]
   2e98e:	223c      	movs	r2, #60	; 0x3c
   2e990:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2e992:	687b      	ldr	r3, [r7, #4]
   2e994:	2200      	movs	r2, #0
   2e996:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2e998:	687b      	ldr	r3, [r7, #4]
   2e99a:	2200      	movs	r2, #0
   2e99c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2e99e:	687b      	ldr	r3, [r7, #4]
   2e9a0:	2200      	movs	r2, #0
   2e9a2:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2e9a4:	687b      	ldr	r3, [r7, #4]
   2e9a6:	2200      	movs	r2, #0
   2e9a8:	615a      	str	r2, [r3, #20]
}
   2e9aa:	46c0      	nop			; (mov r8, r8)
   2e9ac:	46bd      	mov	sp, r7
   2e9ae:	b002      	add	sp, #8
   2e9b0:	bd80      	pop	{r7, pc}
   2e9b2:	46c0      	nop			; (mov r8, r8)
   2e9b4:	0000075b 	.word	0x0000075b

0002e9b8 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2e9b8:	b580      	push	{r7, lr}
   2e9ba:	b082      	sub	sp, #8
   2e9bc:	af00      	add	r7, sp, #0
   2e9be:	6078      	str	r0, [r7, #4]
   2e9c0:	6039      	str	r1, [r7, #0]
	if(module)
   2e9c2:	687b      	ldr	r3, [r7, #4]
   2e9c4:	2b00      	cmp	r3, #0
   2e9c6:	d004      	beq.n	2e9d2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2e9c8:	687b      	ldr	r3, [r7, #4]
   2e9ca:	683a      	ldr	r2, [r7, #0]
   2e9cc:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2e9ce:	2300      	movs	r3, #0
   2e9d0:	e001      	b.n	2e9d6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2e9d2:	2301      	movs	r3, #1
   2e9d4:	425b      	negs	r3, r3
}
   2e9d6:	0018      	movs	r0, r3
   2e9d8:	46bd      	mov	sp, r7
   2e9da:	b002      	add	sp, #8
   2e9dc:	bd80      	pop	{r7, pc}
	...

0002e9e0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e9e0:	b580      	push	{r7, lr}
   2e9e2:	b082      	sub	sp, #8
   2e9e4:	af00      	add	r7, sp, #0
   2e9e6:	603a      	str	r2, [r7, #0]
   2e9e8:	1dfb      	adds	r3, r7, #7
   2e9ea:	1c02      	adds	r2, r0, #0
   2e9ec:	701a      	strb	r2, [r3, #0]
   2e9ee:	1dbb      	adds	r3, r7, #6
   2e9f0:	1c0a      	adds	r2, r1, #0
   2e9f2:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2e9f4:	683a      	ldr	r2, [r7, #0]
   2e9f6:	1dbb      	adds	r3, r7, #6
   2e9f8:	7819      	ldrb	r1, [r3, #0]
   2e9fa:	1dfb      	adds	r3, r7, #7
   2e9fc:	781b      	ldrb	r3, [r3, #0]
   2e9fe:	b25b      	sxtb	r3, r3
   2ea00:	0018      	movs	r0, r3
   2ea02:	4b03      	ldr	r3, [pc, #12]	; (2ea10 <mqtt_socket_event_handler+0x30>)
   2ea04:	4798      	blx	r3
}
   2ea06:	46c0      	nop			; (mov r8, r8)
   2ea08:	46bd      	mov	sp, r7
   2ea0a:	b002      	add	sp, #8
   2ea0c:	bd80      	pop	{r7, pc}
   2ea0e:	46c0      	nop			; (mov r8, r8)
   2ea10:	0002e45d 	.word	0x0002e45d

0002ea14 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2ea14:	b580      	push	{r7, lr}
   2ea16:	b082      	sub	sp, #8
   2ea18:	af00      	add	r7, sp, #0
   2ea1a:	6078      	str	r0, [r7, #4]
   2ea1c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2ea1e:	683a      	ldr	r2, [r7, #0]
   2ea20:	687b      	ldr	r3, [r7, #4]
   2ea22:	0011      	movs	r1, r2
   2ea24:	0018      	movs	r0, r3
   2ea26:	4b03      	ldr	r3, [pc, #12]	; (2ea34 <mqtt_socket_resolve_handler+0x20>)
   2ea28:	4798      	blx	r3
}
   2ea2a:	46c0      	nop			; (mov r8, r8)
   2ea2c:	46bd      	mov	sp, r7
   2ea2e:	b002      	add	sp, #8
   2ea30:	bd80      	pop	{r7, pc}
   2ea32:	46c0      	nop			; (mov r8, r8)
   2ea34:	0002e40d 	.word	0x0002e40d

0002ea38 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2ea38:	b590      	push	{r4, r7, lr}
   2ea3a:	b085      	sub	sp, #20
   2ea3c:	af00      	add	r7, sp, #0
   2ea3e:	6078      	str	r0, [r7, #4]
   2ea40:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2ea42:	687b      	ldr	r3, [r7, #4]
   2ea44:	3320      	adds	r3, #32
   2ea46:	0018      	movs	r0, r3
   2ea48:	687b      	ldr	r3, [r7, #4]
   2ea4a:	889b      	ldrh	r3, [r3, #4]
   2ea4c:	001a      	movs	r2, r3
   2ea4e:	687b      	ldr	r3, [r7, #4]
   2ea50:	799b      	ldrb	r3, [r3, #6]
   2ea52:	6839      	ldr	r1, [r7, #0]
   2ea54:	4c09      	ldr	r4, [pc, #36]	; (2ea7c <mqtt_connect+0x44>)
   2ea56:	47a0      	blx	r4
   2ea58:	0003      	movs	r3, r0
   2ea5a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2ea5c:	687b      	ldr	r3, [r7, #4]
   2ea5e:	681b      	ldr	r3, [r3, #0]
   2ea60:	2b00      	cmp	r3, #0
   2ea62:	d006      	beq.n	2ea72 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2ea64:	687b      	ldr	r3, [r7, #4]
   2ea66:	681b      	ldr	r3, [r3, #0]
   2ea68:	220c      	movs	r2, #12
   2ea6a:	18ba      	adds	r2, r7, r2
   2ea6c:	6878      	ldr	r0, [r7, #4]
   2ea6e:	2100      	movs	r1, #0
   2ea70:	4798      	blx	r3
	return connResult.sock_connected.result;
   2ea72:	68fb      	ldr	r3, [r7, #12]
}
   2ea74:	0018      	movs	r0, r3
   2ea76:	46bd      	mov	sp, r7
   2ea78:	b005      	add	sp, #20
   2ea7a:	bd90      	pop	{r4, r7, pc}
   2ea7c:	0002e759 	.word	0x0002e759

0002ea80 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2ea80:	b580      	push	{r7, lr}
   2ea82:	b09c      	sub	sp, #112	; 0x70
   2ea84:	af00      	add	r7, sp, #0
   2ea86:	60f8      	str	r0, [r7, #12]
   2ea88:	607a      	str	r2, [r7, #4]
   2ea8a:	603b      	str	r3, [r7, #0]
   2ea8c:	230b      	movs	r3, #11
   2ea8e:	18fb      	adds	r3, r7, r3
   2ea90:	1c0a      	adds	r2, r1, #0
   2ea92:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2ea94:	2310      	movs	r3, #16
   2ea96:	18fa      	adds	r2, r7, r3
   2ea98:	4b31      	ldr	r3, [pc, #196]	; (2eb60 <mqtt_connect_broker+0xe0>)
   2ea9a:	0010      	movs	r0, r2
   2ea9c:	0019      	movs	r1, r3
   2ea9e:	2358      	movs	r3, #88	; 0x58
   2eaa0:	001a      	movs	r2, r3
   2eaa2:	4b30      	ldr	r3, [pc, #192]	; (2eb64 <mqtt_connect_broker+0xe4>)
   2eaa4:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2eaa6:	2310      	movs	r3, #16
   2eaa8:	18fb      	adds	r3, r7, r3
   2eaaa:	2204      	movs	r2, #4
   2eaac:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2eaae:	2310      	movs	r3, #16
   2eab0:	18fb      	adds	r3, r7, r3
   2eab2:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2eab4:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2eab6:	2310      	movs	r3, #16
   2eab8:	18fb      	adds	r3, r7, r3
   2eaba:	687a      	ldr	r2, [r7, #4]
   2eabc:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2eabe:	2310      	movs	r3, #16
   2eac0:	18fb      	adds	r3, r7, r3
   2eac2:	683a      	ldr	r2, [r7, #0]
   2eac4:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2eac6:	2310      	movs	r3, #16
   2eac8:	18fb      	adds	r3, r7, r3
   2eaca:	220b      	movs	r2, #11
   2eacc:	18ba      	adds	r2, r7, r2
   2eace:	7812      	ldrb	r2, [r2, #0]
   2ead0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2ead2:	2310      	movs	r3, #16
   2ead4:	18fb      	adds	r3, r7, r3
   2ead6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2ead8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2eada:	2310      	movs	r3, #16
   2eadc:	18fb      	adds	r3, r7, r3
   2eade:	2280      	movs	r2, #128	; 0x80
   2eae0:	18ba      	adds	r2, r7, r2
   2eae2:	6812      	ldr	r2, [r2, #0]
   2eae4:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2eae6:	2310      	movs	r3, #16
   2eae8:	18fb      	adds	r3, r7, r3
   2eaea:	228c      	movs	r2, #140	; 0x8c
   2eaec:	18ba      	adds	r2, r7, r2
   2eaee:	213c      	movs	r1, #60	; 0x3c
   2eaf0:	7812      	ldrb	r2, [r2, #0]
   2eaf2:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2eaf4:	2310      	movs	r3, #16
   2eaf6:	18fb      	adds	r3, r7, r3
   2eaf8:	2288      	movs	r2, #136	; 0x88
   2eafa:	18ba      	adds	r2, r7, r2
   2eafc:	213d      	movs	r1, #61	; 0x3d
   2eafe:	7812      	ldrb	r2, [r2, #0]
   2eb00:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2eb02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2eb04:	2b00      	cmp	r3, #0
   2eb06:	d008      	beq.n	2eb1a <mqtt_connect_broker+0x9a>
   2eb08:	2380      	movs	r3, #128	; 0x80
   2eb0a:	18fb      	adds	r3, r7, r3
   2eb0c:	681b      	ldr	r3, [r3, #0]
   2eb0e:	2b00      	cmp	r3, #0
   2eb10:	d003      	beq.n	2eb1a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2eb12:	2310      	movs	r3, #16
   2eb14:	18fb      	adds	r3, r7, r3
   2eb16:	2201      	movs	r2, #1
   2eb18:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2eb1a:	68fb      	ldr	r3, [r7, #12]
   2eb1c:	69db      	ldr	r3, [r3, #28]
   2eb1e:	2210      	movs	r2, #16
   2eb20:	18ba      	adds	r2, r7, r2
   2eb22:	0011      	movs	r1, r2
   2eb24:	0018      	movs	r0, r3
   2eb26:	4b10      	ldr	r3, [pc, #64]	; (2eb68 <mqtt_connect_broker+0xe8>)
   2eb28:	4798      	blx	r3
   2eb2a:	0003      	movs	r3, r0
   2eb2c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2eb2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2eb30:	b2da      	uxtb	r2, r3
   2eb32:	2368      	movs	r3, #104	; 0x68
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2eb38:	68fb      	ldr	r3, [r7, #12]
   2eb3a:	681b      	ldr	r3, [r3, #0]
   2eb3c:	2b00      	cmp	r3, #0
   2eb3e:	d006      	beq.n	2eb4e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2eb40:	68fb      	ldr	r3, [r7, #12]
   2eb42:	681b      	ldr	r3, [r3, #0]
   2eb44:	2268      	movs	r2, #104	; 0x68
   2eb46:	18ba      	adds	r2, r7, r2
   2eb48:	68f8      	ldr	r0, [r7, #12]
   2eb4a:	2101      	movs	r1, #1
   2eb4c:	4798      	blx	r3
	
	module->isConnected = true;
   2eb4e:	68fb      	ldr	r3, [r7, #12]
   2eb50:	2234      	movs	r2, #52	; 0x34
   2eb52:	2101      	movs	r1, #1
   2eb54:	5499      	strb	r1, [r3, r2]
	return rc;
   2eb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2eb58:	0018      	movs	r0, r3
   2eb5a:	46bd      	mov	sp, r7
   2eb5c:	b01c      	add	sp, #112	; 0x70
   2eb5e:	bd80      	pop	{r7, pc}
   2eb60:	000396a0 	.word	0x000396a0
   2eb64:	000345d9 	.word	0x000345d9
   2eb68:	0002dea9 	.word	0x0002dea9

0002eb6c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2eb6c:	b580      	push	{r7, lr}
   2eb6e:	b084      	sub	sp, #16
   2eb70:	af00      	add	r7, sp, #0
   2eb72:	6078      	str	r0, [r7, #4]
   2eb74:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2eb76:	687b      	ldr	r3, [r7, #4]
   2eb78:	69db      	ldr	r3, [r3, #28]
   2eb7a:	0018      	movs	r0, r3
   2eb7c:	4b0c      	ldr	r3, [pc, #48]	; (2ebb0 <mqtt_disconnect+0x44>)
   2eb7e:	4798      	blx	r3
   2eb80:	0003      	movs	r3, r0
   2eb82:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2eb84:	68fb      	ldr	r3, [r7, #12]
   2eb86:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2eb88:	687b      	ldr	r3, [r7, #4]
   2eb8a:	681b      	ldr	r3, [r3, #0]
   2eb8c:	2b00      	cmp	r3, #0
   2eb8e:	d006      	beq.n	2eb9e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2eb90:	687b      	ldr	r3, [r7, #4]
   2eb92:	681b      	ldr	r3, [r3, #0]
   2eb94:	2208      	movs	r2, #8
   2eb96:	18ba      	adds	r2, r7, r2
   2eb98:	6878      	ldr	r0, [r7, #4]
   2eb9a:	2105      	movs	r1, #5
   2eb9c:	4798      	blx	r3
	
	module->isConnected = false;
   2eb9e:	687b      	ldr	r3, [r7, #4]
   2eba0:	2234      	movs	r2, #52	; 0x34
   2eba2:	2100      	movs	r1, #0
   2eba4:	5499      	strb	r1, [r3, r2]
	return rc;
   2eba6:	68fb      	ldr	r3, [r7, #12]
}
   2eba8:	0018      	movs	r0, r3
   2ebaa:	46bd      	mov	sp, r7
   2ebac:	b004      	add	sp, #16
   2ebae:	bd80      	pop	{r7, pc}
   2ebb0:	0002e335 	.word	0x0002e335

0002ebb4 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2ebb4:	b580      	push	{r7, lr}
   2ebb6:	b08a      	sub	sp, #40	; 0x28
   2ebb8:	af00      	add	r7, sp, #0
   2ebba:	60f8      	str	r0, [r7, #12]
   2ebbc:	60b9      	str	r1, [r7, #8]
   2ebbe:	607a      	str	r2, [r7, #4]
   2ebc0:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2ebc2:	2314      	movs	r3, #20
   2ebc4:	18fb      	adds	r3, r7, r3
   2ebc6:	2230      	movs	r2, #48	; 0x30
   2ebc8:	18ba      	adds	r2, r7, r2
   2ebca:	7812      	ldrb	r2, [r2, #0]
   2ebcc:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2ebce:	2314      	movs	r3, #20
   2ebd0:	18fb      	adds	r3, r7, r3
   2ebd2:	687a      	ldr	r2, [r7, #4]
   2ebd4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2ebd6:	2314      	movs	r3, #20
   2ebd8:	18fb      	adds	r3, r7, r3
   2ebda:	683a      	ldr	r2, [r7, #0]
   2ebdc:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2ebde:	2314      	movs	r3, #20
   2ebe0:	18fb      	adds	r3, r7, r3
   2ebe2:	2234      	movs	r2, #52	; 0x34
   2ebe4:	18ba      	adds	r2, r7, r2
   2ebe6:	7812      	ldrb	r2, [r2, #0]
   2ebe8:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2ebea:	68fb      	ldr	r3, [r7, #12]
   2ebec:	69db      	ldr	r3, [r3, #28]
   2ebee:	2214      	movs	r2, #20
   2ebf0:	18ba      	adds	r2, r7, r2
   2ebf2:	68b9      	ldr	r1, [r7, #8]
   2ebf4:	0018      	movs	r0, r3
   2ebf6:	4b09      	ldr	r3, [pc, #36]	; (2ec1c <mqtt_publish+0x68>)
   2ebf8:	4798      	blx	r3
   2ebfa:	0003      	movs	r3, r0
   2ebfc:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2ebfe:	68fb      	ldr	r3, [r7, #12]
   2ec00:	681b      	ldr	r3, [r3, #0]
   2ec02:	2b00      	cmp	r3, #0
   2ec04:	d005      	beq.n	2ec12 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2ec06:	68fb      	ldr	r3, [r7, #12]
   2ec08:	681b      	ldr	r3, [r3, #0]
   2ec0a:	68f8      	ldr	r0, [r7, #12]
   2ec0c:	2200      	movs	r2, #0
   2ec0e:	2102      	movs	r1, #2
   2ec10:	4798      	blx	r3
	
	return rc;
   2ec12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ec14:	0018      	movs	r0, r3
   2ec16:	46bd      	mov	sp, r7
   2ec18:	b00a      	add	sp, #40	; 0x28
   2ec1a:	bd80      	pop	{r7, pc}
   2ec1c:	0002e175 	.word	0x0002e175

0002ec20 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2ec20:	b590      	push	{r4, r7, lr}
   2ec22:	b087      	sub	sp, #28
   2ec24:	af00      	add	r7, sp, #0
   2ec26:	60f8      	str	r0, [r7, #12]
   2ec28:	60b9      	str	r1, [r7, #8]
   2ec2a:	603b      	str	r3, [r7, #0]
   2ec2c:	1dfb      	adds	r3, r7, #7
   2ec2e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2ec30:	68fb      	ldr	r3, [r7, #12]
   2ec32:	69d8      	ldr	r0, [r3, #28]
   2ec34:	683c      	ldr	r4, [r7, #0]
   2ec36:	1dfb      	adds	r3, r7, #7
   2ec38:	781a      	ldrb	r2, [r3, #0]
   2ec3a:	68b9      	ldr	r1, [r7, #8]
   2ec3c:	0023      	movs	r3, r4
   2ec3e:	4c09      	ldr	r4, [pc, #36]	; (2ec64 <mqtt_subscribe+0x44>)
   2ec40:	47a0      	blx	r4
   2ec42:	0003      	movs	r3, r0
   2ec44:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2ec46:	68fb      	ldr	r3, [r7, #12]
   2ec48:	681b      	ldr	r3, [r3, #0]
   2ec4a:	2b00      	cmp	r3, #0
   2ec4c:	d005      	beq.n	2ec5a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2ec4e:	68fb      	ldr	r3, [r7, #12]
   2ec50:	681b      	ldr	r3, [r3, #0]
   2ec52:	68f8      	ldr	r0, [r7, #12]
   2ec54:	2200      	movs	r2, #0
   2ec56:	2103      	movs	r1, #3
   2ec58:	4798      	blx	r3
	
	return rc;
   2ec5a:	697b      	ldr	r3, [r7, #20]
}
   2ec5c:	0018      	movs	r0, r3
   2ec5e:	46bd      	mov	sp, r7
   2ec60:	b007      	add	sp, #28
   2ec62:	bd90      	pop	{r4, r7, pc}
   2ec64:	0002dfe9 	.word	0x0002dfe9

0002ec68 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2ec68:	b580      	push	{r7, lr}
   2ec6a:	b082      	sub	sp, #8
   2ec6c:	af00      	add	r7, sp, #0
   2ec6e:	6078      	str	r0, [r7, #4]
   2ec70:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2ec72:	687b      	ldr	r3, [r7, #4]
   2ec74:	69db      	ldr	r3, [r3, #28]
   2ec76:	683a      	ldr	r2, [r7, #0]
   2ec78:	0011      	movs	r1, r2
   2ec7a:	0018      	movs	r0, r3
   2ec7c:	4b03      	ldr	r3, [pc, #12]	; (2ec8c <mqtt_yield+0x24>)
   2ec7e:	4798      	blx	r3
   2ec80:	0003      	movs	r3, r0
   2ec82:	0018      	movs	r0, r3
   2ec84:	46bd      	mov	sp, r7
   2ec86:	b002      	add	sp, #8
   2ec88:	bd80      	pop	{r7, pc}
   2ec8a:	46c0      	nop			; (mov r8, r8)
   2ec8c:	0002ddf1 	.word	0x0002ddf1

0002ec90 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ec90:	b590      	push	{r4, r7, lr}
   2ec92:	b085      	sub	sp, #20
   2ec94:	af00      	add	r7, sp, #0
   2ec96:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ec98:	2300      	movs	r3, #0
   2ec9a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2ec9c:	687b      	ldr	r3, [r7, #4]
   2ec9e:	7a1b      	ldrb	r3, [r3, #8]
   2eca0:	2b03      	cmp	r3, #3
   2eca2:	d102      	bne.n	2ecaa <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2eca4:	230c      	movs	r3, #12
   2eca6:	60fb      	str	r3, [r7, #12]
   2eca8:	e005      	b.n	2ecb6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2ecaa:	687b      	ldr	r3, [r7, #4]
   2ecac:	7a1b      	ldrb	r3, [r3, #8]
   2ecae:	2b04      	cmp	r3, #4
   2ecb0:	d101      	bne.n	2ecb6 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2ecb2:	230a      	movs	r3, #10
   2ecb4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2ecb6:	687b      	ldr	r3, [r7, #4]
   2ecb8:	68d8      	ldr	r0, [r3, #12]
   2ecba:	6919      	ldr	r1, [r3, #16]
   2ecbc:	695a      	ldr	r2, [r3, #20]
   2ecbe:	4b25      	ldr	r3, [pc, #148]	; (2ed54 <MQTTSerialize_connectLength+0xc4>)
   2ecc0:	4798      	blx	r3
   2ecc2:	0003      	movs	r3, r0
   2ecc4:	3302      	adds	r3, #2
   2ecc6:	68fa      	ldr	r2, [r7, #12]
   2ecc8:	18d3      	adds	r3, r2, r3
   2ecca:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2eccc:	687b      	ldr	r3, [r7, #4]
   2ecce:	7edb      	ldrb	r3, [r3, #27]
   2ecd0:	2b00      	cmp	r3, #0
   2ecd2:	d013      	beq.n	2ecfc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2ecd4:	687b      	ldr	r3, [r7, #4]
   2ecd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2ecd8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2ecda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ecdc:	4b1d      	ldr	r3, [pc, #116]	; (2ed54 <MQTTSerialize_connectLength+0xc4>)
   2ecde:	4798      	blx	r3
   2ece0:	0003      	movs	r3, r0
   2ece2:	1c9c      	adds	r4, r3, #2
   2ece4:	687b      	ldr	r3, [r7, #4]
   2ece6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2ece8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2ecea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ecec:	4b19      	ldr	r3, [pc, #100]	; (2ed54 <MQTTSerialize_connectLength+0xc4>)
   2ecee:	4798      	blx	r3
   2ecf0:	0003      	movs	r3, r0
   2ecf2:	18e3      	adds	r3, r4, r3
   2ecf4:	3302      	adds	r3, #2
   2ecf6:	68fa      	ldr	r2, [r7, #12]
   2ecf8:	18d3      	adds	r3, r2, r3
   2ecfa:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2ecfc:	687b      	ldr	r3, [r7, #4]
   2ecfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ed00:	2b00      	cmp	r3, #0
   2ed02:	d103      	bne.n	2ed0c <MQTTSerialize_connectLength+0x7c>
   2ed04:	687b      	ldr	r3, [r7, #4]
   2ed06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ed08:	2b00      	cmp	r3, #0
   2ed0a:	d00a      	beq.n	2ed22 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2ed0c:	687b      	ldr	r3, [r7, #4]
   2ed0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2ed10:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2ed12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2ed14:	4b0f      	ldr	r3, [pc, #60]	; (2ed54 <MQTTSerialize_connectLength+0xc4>)
   2ed16:	4798      	blx	r3
   2ed18:	0003      	movs	r3, r0
   2ed1a:	3302      	adds	r3, #2
   2ed1c:	68fa      	ldr	r2, [r7, #12]
   2ed1e:	18d3      	adds	r3, r2, r3
   2ed20:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2ed22:	687b      	ldr	r3, [r7, #4]
   2ed24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ed26:	2b00      	cmp	r3, #0
   2ed28:	d103      	bne.n	2ed32 <MQTTSerialize_connectLength+0xa2>
   2ed2a:	687b      	ldr	r3, [r7, #4]
   2ed2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ed2e:	2b00      	cmp	r3, #0
   2ed30:	d00a      	beq.n	2ed48 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2ed32:	687b      	ldr	r3, [r7, #4]
   2ed34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2ed36:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2ed38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2ed3a:	4b06      	ldr	r3, [pc, #24]	; (2ed54 <MQTTSerialize_connectLength+0xc4>)
   2ed3c:	4798      	blx	r3
   2ed3e:	0003      	movs	r3, r0
   2ed40:	3302      	adds	r3, #2
   2ed42:	68fa      	ldr	r2, [r7, #12]
   2ed44:	18d3      	adds	r3, r2, r3
   2ed46:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2ed48:	68fb      	ldr	r3, [r7, #12]
}
   2ed4a:	0018      	movs	r0, r3
   2ed4c:	46bd      	mov	sp, r7
   2ed4e:	b005      	add	sp, #20
   2ed50:	bd90      	pop	{r4, r7, pc}
   2ed52:	46c0      	nop			; (mov r8, r8)
   2ed54:	0002f701 	.word	0x0002f701

0002ed58 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2ed58:	b590      	push	{r4, r7, lr}
   2ed5a:	b08b      	sub	sp, #44	; 0x2c
   2ed5c:	af00      	add	r7, sp, #0
   2ed5e:	60f8      	str	r0, [r7, #12]
   2ed60:	60b9      	str	r1, [r7, #8]
   2ed62:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2ed64:	68fb      	ldr	r3, [r7, #12]
   2ed66:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2ed68:	2300      	movs	r3, #0
   2ed6a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2ed6c:	2300      	movs	r3, #0
   2ed6e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2ed70:	2300      	movs	r3, #0
   2ed72:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2ed74:	2301      	movs	r3, #1
   2ed76:	425b      	negs	r3, r3
   2ed78:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2ed7a:	687b      	ldr	r3, [r7, #4]
   2ed7c:	0018      	movs	r0, r3
   2ed7e:	4b8c      	ldr	r3, [pc, #560]	; (2efb0 <MQTTSerialize_connect+0x258>)
   2ed80:	4798      	blx	r3
   2ed82:	0003      	movs	r3, r0
   2ed84:	623b      	str	r3, [r7, #32]
   2ed86:	6a3b      	ldr	r3, [r7, #32]
   2ed88:	0018      	movs	r0, r3
   2ed8a:	4b8a      	ldr	r3, [pc, #552]	; (2efb4 <MQTTSerialize_connect+0x25c>)
   2ed8c:	4798      	blx	r3
   2ed8e:	0002      	movs	r2, r0
   2ed90:	68bb      	ldr	r3, [r7, #8]
   2ed92:	429a      	cmp	r2, r3
   2ed94:	dd03      	ble.n	2ed9e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ed96:	2302      	movs	r3, #2
   2ed98:	425b      	negs	r3, r3
   2ed9a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2ed9c:	e103      	b.n	2efa6 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2ed9e:	2318      	movs	r3, #24
   2eda0:	18fb      	adds	r3, r7, r3
   2eda2:	2200      	movs	r2, #0
   2eda4:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2eda6:	2318      	movs	r3, #24
   2eda8:	18fb      	adds	r3, r7, r3
   2edaa:	781a      	ldrb	r2, [r3, #0]
   2edac:	210f      	movs	r1, #15
   2edae:	400a      	ands	r2, r1
   2edb0:	1c11      	adds	r1, r2, #0
   2edb2:	2210      	movs	r2, #16
   2edb4:	430a      	orrs	r2, r1
   2edb6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2edb8:	2318      	movs	r3, #24
   2edba:	18fb      	adds	r3, r7, r3
   2edbc:	781a      	ldrb	r2, [r3, #0]
   2edbe:	231c      	movs	r3, #28
   2edc0:	18fb      	adds	r3, r7, r3
   2edc2:	0011      	movs	r1, r2
   2edc4:	0018      	movs	r0, r3
   2edc6:	4b7c      	ldr	r3, [pc, #496]	; (2efb8 <MQTTSerialize_connect+0x260>)
   2edc8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2edca:	69fb      	ldr	r3, [r7, #28]
   2edcc:	6a3a      	ldr	r2, [r7, #32]
   2edce:	0011      	movs	r1, r2
   2edd0:	0018      	movs	r0, r3
   2edd2:	4b7a      	ldr	r3, [pc, #488]	; (2efbc <MQTTSerialize_connect+0x264>)
   2edd4:	4798      	blx	r3
   2edd6:	0002      	movs	r2, r0
   2edd8:	69fb      	ldr	r3, [r7, #28]
   2edda:	189b      	adds	r3, r3, r2
   2eddc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2edde:	687b      	ldr	r3, [r7, #4]
   2ede0:	7a1b      	ldrb	r3, [r3, #8]
   2ede2:	2b04      	cmp	r3, #4
   2ede4:	d10d      	bne.n	2ee02 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2ede6:	4a76      	ldr	r2, [pc, #472]	; (2efc0 <MQTTSerialize_connect+0x268>)
   2ede8:	231c      	movs	r3, #28
   2edea:	18fb      	adds	r3, r7, r3
   2edec:	0011      	movs	r1, r2
   2edee:	0018      	movs	r0, r3
   2edf0:	4b74      	ldr	r3, [pc, #464]	; (2efc4 <MQTTSerialize_connect+0x26c>)
   2edf2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2edf4:	231c      	movs	r3, #28
   2edf6:	18fb      	adds	r3, r7, r3
   2edf8:	2104      	movs	r1, #4
   2edfa:	0018      	movs	r0, r3
   2edfc:	4b6e      	ldr	r3, [pc, #440]	; (2efb8 <MQTTSerialize_connect+0x260>)
   2edfe:	4798      	blx	r3
   2ee00:	e00c      	b.n	2ee1c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2ee02:	4a71      	ldr	r2, [pc, #452]	; (2efc8 <MQTTSerialize_connect+0x270>)
   2ee04:	231c      	movs	r3, #28
   2ee06:	18fb      	adds	r3, r7, r3
   2ee08:	0011      	movs	r1, r2
   2ee0a:	0018      	movs	r0, r3
   2ee0c:	4b6d      	ldr	r3, [pc, #436]	; (2efc4 <MQTTSerialize_connect+0x26c>)
   2ee0e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2ee10:	231c      	movs	r3, #28
   2ee12:	18fb      	adds	r3, r7, r3
   2ee14:	2103      	movs	r1, #3
   2ee16:	0018      	movs	r0, r3
   2ee18:	4b67      	ldr	r3, [pc, #412]	; (2efb8 <MQTTSerialize_connect+0x260>)
   2ee1a:	4798      	blx	r3
	}

	flags.all = 0;
   2ee1c:	2314      	movs	r3, #20
   2ee1e:	18fb      	adds	r3, r7, r3
   2ee20:	2200      	movs	r2, #0
   2ee22:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2ee24:	687b      	ldr	r3, [r7, #4]
   2ee26:	7e9b      	ldrb	r3, [r3, #26]
   2ee28:	1c1a      	adds	r2, r3, #0
   2ee2a:	2301      	movs	r3, #1
   2ee2c:	4013      	ands	r3, r2
   2ee2e:	b2da      	uxtb	r2, r3
   2ee30:	2314      	movs	r3, #20
   2ee32:	18fb      	adds	r3, r7, r3
   2ee34:	2101      	movs	r1, #1
   2ee36:	400a      	ands	r2, r1
   2ee38:	1890      	adds	r0, r2, r2
   2ee3a:	781a      	ldrb	r2, [r3, #0]
   2ee3c:	2102      	movs	r1, #2
   2ee3e:	438a      	bics	r2, r1
   2ee40:	1c11      	adds	r1, r2, #0
   2ee42:	1c02      	adds	r2, r0, #0
   2ee44:	430a      	orrs	r2, r1
   2ee46:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2ee48:	687b      	ldr	r3, [r7, #4]
   2ee4a:	7edb      	ldrb	r3, [r3, #27]
   2ee4c:	1e5a      	subs	r2, r3, #1
   2ee4e:	4193      	sbcs	r3, r2
   2ee50:	b2da      	uxtb	r2, r3
   2ee52:	2314      	movs	r3, #20
   2ee54:	18fb      	adds	r3, r7, r3
   2ee56:	2101      	movs	r1, #1
   2ee58:	400a      	ands	r2, r1
   2ee5a:	0090      	lsls	r0, r2, #2
   2ee5c:	781a      	ldrb	r2, [r3, #0]
   2ee5e:	2104      	movs	r1, #4
   2ee60:	438a      	bics	r2, r1
   2ee62:	1c11      	adds	r1, r2, #0
   2ee64:	1c02      	adds	r2, r0, #0
   2ee66:	430a      	orrs	r2, r1
   2ee68:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2ee6a:	2314      	movs	r3, #20
   2ee6c:	18fb      	adds	r3, r7, r3
   2ee6e:	781b      	ldrb	r3, [r3, #0]
   2ee70:	2204      	movs	r2, #4
   2ee72:	4013      	ands	r3, r2
   2ee74:	b2db      	uxtb	r3, r3
   2ee76:	2b00      	cmp	r3, #0
   2ee78:	d025      	beq.n	2eec6 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2ee7a:	687b      	ldr	r3, [r7, #4]
   2ee7c:	223d      	movs	r2, #61	; 0x3d
   2ee7e:	5c9b      	ldrb	r3, [r3, r2]
   2ee80:	1c1a      	adds	r2, r3, #0
   2ee82:	2303      	movs	r3, #3
   2ee84:	4013      	ands	r3, r2
   2ee86:	b2da      	uxtb	r2, r3
   2ee88:	2314      	movs	r3, #20
   2ee8a:	18fb      	adds	r3, r7, r3
   2ee8c:	2103      	movs	r1, #3
   2ee8e:	400a      	ands	r2, r1
   2ee90:	00d0      	lsls	r0, r2, #3
   2ee92:	781a      	ldrb	r2, [r3, #0]
   2ee94:	2118      	movs	r1, #24
   2ee96:	438a      	bics	r2, r1
   2ee98:	1c11      	adds	r1, r2, #0
   2ee9a:	1c02      	adds	r2, r0, #0
   2ee9c:	430a      	orrs	r2, r1
   2ee9e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2eea0:	687b      	ldr	r3, [r7, #4]
   2eea2:	223c      	movs	r2, #60	; 0x3c
   2eea4:	5c9b      	ldrb	r3, [r3, r2]
   2eea6:	1c1a      	adds	r2, r3, #0
   2eea8:	2301      	movs	r3, #1
   2eeaa:	4013      	ands	r3, r2
   2eeac:	b2da      	uxtb	r2, r3
   2eeae:	2314      	movs	r3, #20
   2eeb0:	18fb      	adds	r3, r7, r3
   2eeb2:	2101      	movs	r1, #1
   2eeb4:	400a      	ands	r2, r1
   2eeb6:	0150      	lsls	r0, r2, #5
   2eeb8:	781a      	ldrb	r2, [r3, #0]
   2eeba:	2120      	movs	r1, #32
   2eebc:	438a      	bics	r2, r1
   2eebe:	1c11      	adds	r1, r2, #0
   2eec0:	1c02      	adds	r2, r0, #0
   2eec2:	430a      	orrs	r2, r1
   2eec4:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2eec6:	687b      	ldr	r3, [r7, #4]
   2eec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2eeca:	2b00      	cmp	r3, #0
   2eecc:	d103      	bne.n	2eed6 <MQTTSerialize_connect+0x17e>
   2eece:	687b      	ldr	r3, [r7, #4]
   2eed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2eed2:	2b00      	cmp	r3, #0
   2eed4:	d006      	beq.n	2eee4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2eed6:	2314      	movs	r3, #20
   2eed8:	18fb      	adds	r3, r7, r3
   2eeda:	781a      	ldrb	r2, [r3, #0]
   2eedc:	2180      	movs	r1, #128	; 0x80
   2eede:	4249      	negs	r1, r1
   2eee0:	430a      	orrs	r2, r1
   2eee2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2eee4:	687b      	ldr	r3, [r7, #4]
   2eee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2eee8:	2b00      	cmp	r3, #0
   2eeea:	d103      	bne.n	2eef4 <MQTTSerialize_connect+0x19c>
   2eeec:	687b      	ldr	r3, [r7, #4]
   2eeee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2eef0:	2b00      	cmp	r3, #0
   2eef2:	d005      	beq.n	2ef00 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2eef4:	2314      	movs	r3, #20
   2eef6:	18fb      	adds	r3, r7, r3
   2eef8:	781a      	ldrb	r2, [r3, #0]
   2eefa:	2140      	movs	r1, #64	; 0x40
   2eefc:	430a      	orrs	r2, r1
   2eefe:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2ef00:	2314      	movs	r3, #20
   2ef02:	18fb      	adds	r3, r7, r3
   2ef04:	781a      	ldrb	r2, [r3, #0]
   2ef06:	231c      	movs	r3, #28
   2ef08:	18fb      	adds	r3, r7, r3
   2ef0a:	0011      	movs	r1, r2
   2ef0c:	0018      	movs	r0, r3
   2ef0e:	4b2a      	ldr	r3, [pc, #168]	; (2efb8 <MQTTSerialize_connect+0x260>)
   2ef10:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2ef12:	687b      	ldr	r3, [r7, #4]
   2ef14:	8b1b      	ldrh	r3, [r3, #24]
   2ef16:	001a      	movs	r2, r3
   2ef18:	231c      	movs	r3, #28
   2ef1a:	18fb      	adds	r3, r7, r3
   2ef1c:	0011      	movs	r1, r2
   2ef1e:	0018      	movs	r0, r3
   2ef20:	4b2a      	ldr	r3, [pc, #168]	; (2efcc <MQTTSerialize_connect+0x274>)
   2ef22:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2ef24:	687b      	ldr	r3, [r7, #4]
   2ef26:	221c      	movs	r2, #28
   2ef28:	18b8      	adds	r0, r7, r2
   2ef2a:	68d9      	ldr	r1, [r3, #12]
   2ef2c:	691a      	ldr	r2, [r3, #16]
   2ef2e:	695b      	ldr	r3, [r3, #20]
   2ef30:	4c27      	ldr	r4, [pc, #156]	; (2efd0 <MQTTSerialize_connect+0x278>)
   2ef32:	47a0      	blx	r4
	if (options->willFlag)
   2ef34:	687b      	ldr	r3, [r7, #4]
   2ef36:	7edb      	ldrb	r3, [r3, #27]
   2ef38:	2b00      	cmp	r3, #0
   2ef3a:	d00f      	beq.n	2ef5c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2ef3c:	687b      	ldr	r3, [r7, #4]
   2ef3e:	221c      	movs	r2, #28
   2ef40:	18b8      	adds	r0, r7, r2
   2ef42:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2ef44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ef48:	4c21      	ldr	r4, [pc, #132]	; (2efd0 <MQTTSerialize_connect+0x278>)
   2ef4a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2ef4c:	687b      	ldr	r3, [r7, #4]
   2ef4e:	221c      	movs	r2, #28
   2ef50:	18b8      	adds	r0, r7, r2
   2ef52:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2ef54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ef56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ef58:	4c1d      	ldr	r4, [pc, #116]	; (2efd0 <MQTTSerialize_connect+0x278>)
   2ef5a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2ef5c:	2314      	movs	r3, #20
   2ef5e:	18fb      	adds	r3, r7, r3
   2ef60:	781b      	ldrb	r3, [r3, #0]
   2ef62:	227f      	movs	r2, #127	; 0x7f
   2ef64:	4393      	bics	r3, r2
   2ef66:	b2db      	uxtb	r3, r3
   2ef68:	2b00      	cmp	r3, #0
   2ef6a:	d007      	beq.n	2ef7c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2ef6c:	687b      	ldr	r3, [r7, #4]
   2ef6e:	221c      	movs	r2, #28
   2ef70:	18b8      	adds	r0, r7, r2
   2ef72:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2ef74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2ef76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ef78:	4c15      	ldr	r4, [pc, #84]	; (2efd0 <MQTTSerialize_connect+0x278>)
   2ef7a:	47a0      	blx	r4
	if (flags.bits.password)
   2ef7c:	2314      	movs	r3, #20
   2ef7e:	18fb      	adds	r3, r7, r3
   2ef80:	781b      	ldrb	r3, [r3, #0]
   2ef82:	2240      	movs	r2, #64	; 0x40
   2ef84:	4013      	ands	r3, r2
   2ef86:	b2db      	uxtb	r3, r3
   2ef88:	2b00      	cmp	r3, #0
   2ef8a:	d007      	beq.n	2ef9c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2ef8c:	687b      	ldr	r3, [r7, #4]
   2ef8e:	221c      	movs	r2, #28
   2ef90:	18b8      	adds	r0, r7, r2
   2ef92:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2ef94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2ef96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ef98:	4c0d      	ldr	r4, [pc, #52]	; (2efd0 <MQTTSerialize_connect+0x278>)
   2ef9a:	47a0      	blx	r4

	rc = ptr - buf;
   2ef9c:	69fb      	ldr	r3, [r7, #28]
   2ef9e:	001a      	movs	r2, r3
   2efa0:	68fb      	ldr	r3, [r7, #12]
   2efa2:	1ad3      	subs	r3, r2, r3
   2efa4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2efa8:	0018      	movs	r0, r3
   2efaa:	46bd      	mov	sp, r7
   2efac:	b00b      	add	sp, #44	; 0x2c
   2efae:	bd90      	pop	{r4, r7, pc}
   2efb0:	0002ec91 	.word	0x0002ec91
   2efb4:	0002f425 	.word	0x0002f425
   2efb8:	0002f547 	.word	0x0002f547
   2efbc:	0002f32d 	.word	0x0002f32d
   2efc0:	000396f8 	.word	0x000396f8
   2efc4:	0002f5c9 	.word	0x0002f5c9
   2efc8:	00039700 	.word	0x00039700
   2efcc:	0002f571 	.word	0x0002f571
   2efd0:	0002f619 	.word	0x0002f619

0002efd4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2efd4:	b580      	push	{r7, lr}
   2efd6:	b08a      	sub	sp, #40	; 0x28
   2efd8:	af00      	add	r7, sp, #0
   2efda:	60f8      	str	r0, [r7, #12]
   2efdc:	60b9      	str	r1, [r7, #8]
   2efde:	607a      	str	r2, [r7, #4]
   2efe0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2efe2:	2300      	movs	r3, #0
   2efe4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2efe6:	687b      	ldr	r3, [r7, #4]
   2efe8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2efea:	2300      	movs	r3, #0
   2efec:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2efee:	2300      	movs	r3, #0
   2eff0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2eff2:	2300      	movs	r3, #0
   2eff4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2eff6:	2318      	movs	r3, #24
   2eff8:	18fb      	adds	r3, r7, r3
   2effa:	0018      	movs	r0, r3
   2effc:	4b25      	ldr	r3, [pc, #148]	; (2f094 <MQTTDeserialize_connack+0xc0>)
   2effe:	4798      	blx	r3
   2f000:	0003      	movs	r3, r0
   2f002:	001a      	movs	r2, r3
   2f004:	231c      	movs	r3, #28
   2f006:	18fb      	adds	r3, r7, r3
   2f008:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f00a:	231c      	movs	r3, #28
   2f00c:	18fb      	adds	r3, r7, r3
   2f00e:	781b      	ldrb	r3, [r3, #0]
   2f010:	220f      	movs	r2, #15
   2f012:	4393      	bics	r3, r2
   2f014:	b2db      	uxtb	r3, r3
   2f016:	2b20      	cmp	r3, #32
   2f018:	d134      	bne.n	2f084 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f01a:	69bb      	ldr	r3, [r7, #24]
   2f01c:	2214      	movs	r2, #20
   2f01e:	18ba      	adds	r2, r7, r2
   2f020:	0011      	movs	r1, r2
   2f022:	0018      	movs	r0, r3
   2f024:	4b1c      	ldr	r3, [pc, #112]	; (2f098 <MQTTDeserialize_connack+0xc4>)
   2f026:	4798      	blx	r3
   2f028:	0003      	movs	r3, r0
   2f02a:	627b      	str	r3, [r7, #36]	; 0x24
   2f02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f02e:	69bb      	ldr	r3, [r7, #24]
   2f030:	189b      	adds	r3, r3, r2
   2f032:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f034:	69bb      	ldr	r3, [r7, #24]
   2f036:	697a      	ldr	r2, [r7, #20]
   2f038:	189b      	adds	r3, r3, r2
   2f03a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f03c:	6a3b      	ldr	r3, [r7, #32]
   2f03e:	69ba      	ldr	r2, [r7, #24]
   2f040:	1a9b      	subs	r3, r3, r2
   2f042:	2b01      	cmp	r3, #1
   2f044:	dd20      	ble.n	2f088 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f046:	2318      	movs	r3, #24
   2f048:	18fb      	adds	r3, r7, r3
   2f04a:	0018      	movs	r0, r3
   2f04c:	4b11      	ldr	r3, [pc, #68]	; (2f094 <MQTTDeserialize_connack+0xc0>)
   2f04e:	4798      	blx	r3
   2f050:	0003      	movs	r3, r0
   2f052:	001a      	movs	r2, r3
   2f054:	2310      	movs	r3, #16
   2f056:	18fb      	adds	r3, r7, r3
   2f058:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f05a:	2310      	movs	r3, #16
   2f05c:	18fb      	adds	r3, r7, r3
   2f05e:	781b      	ldrb	r3, [r3, #0]
   2f060:	061b      	lsls	r3, r3, #24
   2f062:	0fdb      	lsrs	r3, r3, #31
   2f064:	b2db      	uxtb	r3, r3
   2f066:	001a      	movs	r2, r3
   2f068:	68fb      	ldr	r3, [r7, #12]
   2f06a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f06c:	2318      	movs	r3, #24
   2f06e:	18fb      	adds	r3, r7, r3
   2f070:	0018      	movs	r0, r3
   2f072:	4b08      	ldr	r3, [pc, #32]	; (2f094 <MQTTDeserialize_connack+0xc0>)
   2f074:	4798      	blx	r3
   2f076:	0003      	movs	r3, r0
   2f078:	001a      	movs	r2, r3
   2f07a:	68bb      	ldr	r3, [r7, #8]
   2f07c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f07e:	2301      	movs	r3, #1
   2f080:	627b      	str	r3, [r7, #36]	; 0x24
   2f082:	e002      	b.n	2f08a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f084:	46c0      	nop			; (mov r8, r8)
   2f086:	e000      	b.n	2f08a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f088:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f08c:	0018      	movs	r0, r3
   2f08e:	46bd      	mov	sp, r7
   2f090:	b00a      	add	sp, #40	; 0x28
   2f092:	bd80      	pop	{r7, pc}
   2f094:	0002f51b 	.word	0x0002f51b
   2f098:	0002f4b5 	.word	0x0002f4b5

0002f09c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f09c:	b580      	push	{r7, lr}
   2f09e:	b088      	sub	sp, #32
   2f0a0:	af00      	add	r7, sp, #0
   2f0a2:	60f8      	str	r0, [r7, #12]
   2f0a4:	60b9      	str	r1, [r7, #8]
   2f0a6:	1dfb      	adds	r3, r7, #7
   2f0a8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f0aa:	2300      	movs	r3, #0
   2f0ac:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f0ae:	2301      	movs	r3, #1
   2f0b0:	425b      	negs	r3, r3
   2f0b2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f0b4:	68fb      	ldr	r3, [r7, #12]
   2f0b6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f0b8:	68bb      	ldr	r3, [r7, #8]
   2f0ba:	2b01      	cmp	r3, #1
   2f0bc:	dc03      	bgt.n	2f0c6 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f0be:	2302      	movs	r3, #2
   2f0c0:	425b      	negs	r3, r3
   2f0c2:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f0c4:	e029      	b.n	2f11a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f0c6:	2318      	movs	r3, #24
   2f0c8:	18fb      	adds	r3, r7, r3
   2f0ca:	2200      	movs	r2, #0
   2f0cc:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f0ce:	1dfb      	adds	r3, r7, #7
   2f0d0:	781b      	ldrb	r3, [r3, #0]
   2f0d2:	220f      	movs	r2, #15
   2f0d4:	4013      	ands	r3, r2
   2f0d6:	b2da      	uxtb	r2, r3
   2f0d8:	2318      	movs	r3, #24
   2f0da:	18fb      	adds	r3, r7, r3
   2f0dc:	0110      	lsls	r0, r2, #4
   2f0de:	781a      	ldrb	r2, [r3, #0]
   2f0e0:	210f      	movs	r1, #15
   2f0e2:	400a      	ands	r2, r1
   2f0e4:	1c11      	adds	r1, r2, #0
   2f0e6:	1c02      	adds	r2, r0, #0
   2f0e8:	430a      	orrs	r2, r1
   2f0ea:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f0ec:	2318      	movs	r3, #24
   2f0ee:	18fb      	adds	r3, r7, r3
   2f0f0:	781a      	ldrb	r2, [r3, #0]
   2f0f2:	2314      	movs	r3, #20
   2f0f4:	18fb      	adds	r3, r7, r3
   2f0f6:	0011      	movs	r1, r2
   2f0f8:	0018      	movs	r0, r3
   2f0fa:	4b0a      	ldr	r3, [pc, #40]	; (2f124 <MQTTSerialize_zero+0x88>)
   2f0fc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f0fe:	697b      	ldr	r3, [r7, #20]
   2f100:	2100      	movs	r1, #0
   2f102:	0018      	movs	r0, r3
   2f104:	4b08      	ldr	r3, [pc, #32]	; (2f128 <MQTTSerialize_zero+0x8c>)
   2f106:	4798      	blx	r3
   2f108:	0002      	movs	r2, r0
   2f10a:	697b      	ldr	r3, [r7, #20]
   2f10c:	189b      	adds	r3, r3, r2
   2f10e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f110:	697b      	ldr	r3, [r7, #20]
   2f112:	001a      	movs	r2, r3
   2f114:	68fb      	ldr	r3, [r7, #12]
   2f116:	1ad3      	subs	r3, r2, r3
   2f118:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f11a:	69fb      	ldr	r3, [r7, #28]
}
   2f11c:	0018      	movs	r0, r3
   2f11e:	46bd      	mov	sp, r7
   2f120:	b008      	add	sp, #32
   2f122:	bd80      	pop	{r7, pc}
   2f124:	0002f547 	.word	0x0002f547
   2f128:	0002f32d 	.word	0x0002f32d

0002f12c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f12c:	b580      	push	{r7, lr}
   2f12e:	b082      	sub	sp, #8
   2f130:	af00      	add	r7, sp, #0
   2f132:	6078      	str	r0, [r7, #4]
   2f134:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f136:	6839      	ldr	r1, [r7, #0]
   2f138:	687b      	ldr	r3, [r7, #4]
   2f13a:	220e      	movs	r2, #14
   2f13c:	0018      	movs	r0, r3
   2f13e:	4b03      	ldr	r3, [pc, #12]	; (2f14c <MQTTSerialize_disconnect+0x20>)
   2f140:	4798      	blx	r3
   2f142:	0003      	movs	r3, r0
}
   2f144:	0018      	movs	r0, r3
   2f146:	46bd      	mov	sp, r7
   2f148:	b002      	add	sp, #8
   2f14a:	bd80      	pop	{r7, pc}
   2f14c:	0002f09d 	.word	0x0002f09d

0002f150 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f150:	b580      	push	{r7, lr}
   2f152:	b082      	sub	sp, #8
   2f154:	af00      	add	r7, sp, #0
   2f156:	6078      	str	r0, [r7, #4]
   2f158:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f15a:	6839      	ldr	r1, [r7, #0]
   2f15c:	687b      	ldr	r3, [r7, #4]
   2f15e:	220c      	movs	r2, #12
   2f160:	0018      	movs	r0, r3
   2f162:	4b03      	ldr	r3, [pc, #12]	; (2f170 <MQTTSerialize_pingreq+0x20>)
   2f164:	4798      	blx	r3
   2f166:	0003      	movs	r3, r0
}
   2f168:	0018      	movs	r0, r3
   2f16a:	46bd      	mov	sp, r7
   2f16c:	b002      	add	sp, #8
   2f16e:	bd80      	pop	{r7, pc}
   2f170:	0002f09d 	.word	0x0002f09d

0002f174 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f174:	b580      	push	{r7, lr}
   2f176:	b08a      	sub	sp, #40	; 0x28
   2f178:	af00      	add	r7, sp, #0
   2f17a:	60f8      	str	r0, [r7, #12]
   2f17c:	60b9      	str	r1, [r7, #8]
   2f17e:	607a      	str	r2, [r7, #4]
   2f180:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f182:	2300      	movs	r3, #0
   2f184:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f188:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f18a:	2300      	movs	r3, #0
   2f18c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f18e:	2300      	movs	r3, #0
   2f190:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f192:	2300      	movs	r3, #0
   2f194:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f196:	2318      	movs	r3, #24
   2f198:	18fb      	adds	r3, r7, r3
   2f19a:	0018      	movs	r0, r3
   2f19c:	4b32      	ldr	r3, [pc, #200]	; (2f268 <MQTTDeserialize_publish+0xf4>)
   2f19e:	4798      	blx	r3
   2f1a0:	0003      	movs	r3, r0
   2f1a2:	001a      	movs	r2, r3
   2f1a4:	231c      	movs	r3, #28
   2f1a6:	18fb      	adds	r3, r7, r3
   2f1a8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f1aa:	231c      	movs	r3, #28
   2f1ac:	18fb      	adds	r3, r7, r3
   2f1ae:	781b      	ldrb	r3, [r3, #0]
   2f1b0:	220f      	movs	r2, #15
   2f1b2:	4393      	bics	r3, r2
   2f1b4:	b2db      	uxtb	r3, r3
   2f1b6:	2b30      	cmp	r3, #48	; 0x30
   2f1b8:	d150      	bne.n	2f25c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f1ba:	231c      	movs	r3, #28
   2f1bc:	18fb      	adds	r3, r7, r3
   2f1be:	781b      	ldrb	r3, [r3, #0]
   2f1c0:	071b      	lsls	r3, r3, #28
   2f1c2:	0fdb      	lsrs	r3, r3, #31
   2f1c4:	b2db      	uxtb	r3, r3
   2f1c6:	001a      	movs	r2, r3
   2f1c8:	68fb      	ldr	r3, [r7, #12]
   2f1ca:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f1cc:	231c      	movs	r3, #28
   2f1ce:	18fb      	adds	r3, r7, r3
   2f1d0:	781b      	ldrb	r3, [r3, #0]
   2f1d2:	075b      	lsls	r3, r3, #29
   2f1d4:	0f9b      	lsrs	r3, r3, #30
   2f1d6:	b2db      	uxtb	r3, r3
   2f1d8:	001a      	movs	r2, r3
   2f1da:	68bb      	ldr	r3, [r7, #8]
   2f1dc:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f1de:	231c      	movs	r3, #28
   2f1e0:	18fb      	adds	r3, r7, r3
   2f1e2:	781b      	ldrb	r3, [r3, #0]
   2f1e4:	07db      	lsls	r3, r3, #31
   2f1e6:	0fdb      	lsrs	r3, r3, #31
   2f1e8:	b2db      	uxtb	r3, r3
   2f1ea:	001a      	movs	r2, r3
   2f1ec:	687b      	ldr	r3, [r7, #4]
   2f1ee:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f1f0:	69bb      	ldr	r3, [r7, #24]
   2f1f2:	2214      	movs	r2, #20
   2f1f4:	18ba      	adds	r2, r7, r2
   2f1f6:	0011      	movs	r1, r2
   2f1f8:	0018      	movs	r0, r3
   2f1fa:	4b1c      	ldr	r3, [pc, #112]	; (2f26c <MQTTDeserialize_publish+0xf8>)
   2f1fc:	4798      	blx	r3
   2f1fe:	0003      	movs	r3, r0
   2f200:	627b      	str	r3, [r7, #36]	; 0x24
   2f202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f204:	69bb      	ldr	r3, [r7, #24]
   2f206:	189b      	adds	r3, r3, r2
   2f208:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f20a:	69bb      	ldr	r3, [r7, #24]
   2f20c:	697a      	ldr	r2, [r7, #20]
   2f20e:	189b      	adds	r3, r3, r2
   2f210:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f212:	6a3a      	ldr	r2, [r7, #32]
   2f214:	2318      	movs	r3, #24
   2f216:	18f9      	adds	r1, r7, r3
   2f218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f21a:	0018      	movs	r0, r3
   2f21c:	4b14      	ldr	r3, [pc, #80]	; (2f270 <MQTTDeserialize_publish+0xfc>)
   2f21e:	4798      	blx	r3
   2f220:	1e03      	subs	r3, r0, #0
   2f222:	d01c      	beq.n	2f25e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f224:	6a3b      	ldr	r3, [r7, #32]
   2f226:	69ba      	ldr	r2, [r7, #24]
   2f228:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f22a:	d418      	bmi.n	2f25e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f22c:	68bb      	ldr	r3, [r7, #8]
   2f22e:	681b      	ldr	r3, [r3, #0]
   2f230:	2b00      	cmp	r3, #0
   2f232:	dd08      	ble.n	2f246 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f234:	2318      	movs	r3, #24
   2f236:	18fb      	adds	r3, r7, r3
   2f238:	0018      	movs	r0, r3
   2f23a:	4b0e      	ldr	r3, [pc, #56]	; (2f274 <MQTTDeserialize_publish+0x100>)
   2f23c:	4798      	blx	r3
   2f23e:	0003      	movs	r3, r0
   2f240:	b29a      	uxth	r2, r3
   2f242:	683b      	ldr	r3, [r7, #0]
   2f244:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f246:	6a3b      	ldr	r3, [r7, #32]
   2f248:	69ba      	ldr	r2, [r7, #24]
   2f24a:	1a9a      	subs	r2, r3, r2
   2f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f24e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f250:	69ba      	ldr	r2, [r7, #24]
   2f252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f254:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f256:	2301      	movs	r3, #1
   2f258:	627b      	str	r3, [r7, #36]	; 0x24
   2f25a:	e000      	b.n	2f25e <MQTTDeserialize_publish+0xea>
		goto exit;
   2f25c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f260:	0018      	movs	r0, r3
   2f262:	46bd      	mov	sp, r7
   2f264:	b00a      	add	sp, #40	; 0x28
   2f266:	bd80      	pop	{r7, pc}
   2f268:	0002f51b 	.word	0x0002f51b
   2f26c:	0002f4b5 	.word	0x0002f4b5
   2f270:	0002f699 	.word	0x0002f699
   2f274:	0002f4e9 	.word	0x0002f4e9

0002f278 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f278:	b580      	push	{r7, lr}
   2f27a:	b08a      	sub	sp, #40	; 0x28
   2f27c:	af00      	add	r7, sp, #0
   2f27e:	60f8      	str	r0, [r7, #12]
   2f280:	60b9      	str	r1, [r7, #8]
   2f282:	607a      	str	r2, [r7, #4]
   2f284:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f286:	2300      	movs	r3, #0
   2f288:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f28a:	683b      	ldr	r3, [r7, #0]
   2f28c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f28e:	2300      	movs	r3, #0
   2f290:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f292:	2300      	movs	r3, #0
   2f294:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f296:	2318      	movs	r3, #24
   2f298:	18fb      	adds	r3, r7, r3
   2f29a:	0018      	movs	r0, r3
   2f29c:	4b20      	ldr	r3, [pc, #128]	; (2f320 <MQTTDeserialize_ack+0xa8>)
   2f29e:	4798      	blx	r3
   2f2a0:	0003      	movs	r3, r0
   2f2a2:	001a      	movs	r2, r3
   2f2a4:	231c      	movs	r3, #28
   2f2a6:	18fb      	adds	r3, r7, r3
   2f2a8:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2f2aa:	231c      	movs	r3, #28
   2f2ac:	18fb      	adds	r3, r7, r3
   2f2ae:	781b      	ldrb	r3, [r3, #0]
   2f2b0:	071b      	lsls	r3, r3, #28
   2f2b2:	0fdb      	lsrs	r3, r3, #31
   2f2b4:	b2db      	uxtb	r3, r3
   2f2b6:	001a      	movs	r2, r3
   2f2b8:	68bb      	ldr	r3, [r7, #8]
   2f2ba:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2f2bc:	231c      	movs	r3, #28
   2f2be:	18fb      	adds	r3, r7, r3
   2f2c0:	781b      	ldrb	r3, [r3, #0]
   2f2c2:	061b      	lsls	r3, r3, #24
   2f2c4:	0f1b      	lsrs	r3, r3, #28
   2f2c6:	b2db      	uxtb	r3, r3
   2f2c8:	001a      	movs	r2, r3
   2f2ca:	68fb      	ldr	r3, [r7, #12]
   2f2cc:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f2ce:	69bb      	ldr	r3, [r7, #24]
   2f2d0:	2214      	movs	r2, #20
   2f2d2:	18ba      	adds	r2, r7, r2
   2f2d4:	0011      	movs	r1, r2
   2f2d6:	0018      	movs	r0, r3
   2f2d8:	4b12      	ldr	r3, [pc, #72]	; (2f324 <MQTTDeserialize_ack+0xac>)
   2f2da:	4798      	blx	r3
   2f2dc:	0003      	movs	r3, r0
   2f2de:	627b      	str	r3, [r7, #36]	; 0x24
   2f2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f2e2:	69bb      	ldr	r3, [r7, #24]
   2f2e4:	189b      	adds	r3, r3, r2
   2f2e6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f2e8:	69bb      	ldr	r3, [r7, #24]
   2f2ea:	697a      	ldr	r2, [r7, #20]
   2f2ec:	189b      	adds	r3, r3, r2
   2f2ee:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2f2f0:	6a3b      	ldr	r3, [r7, #32]
   2f2f2:	69ba      	ldr	r2, [r7, #24]
   2f2f4:	1a9b      	subs	r3, r3, r2
   2f2f6:	2b01      	cmp	r3, #1
   2f2f8:	dd0b      	ble.n	2f312 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2f2fa:	2318      	movs	r3, #24
   2f2fc:	18fb      	adds	r3, r7, r3
   2f2fe:	0018      	movs	r0, r3
   2f300:	4b09      	ldr	r3, [pc, #36]	; (2f328 <MQTTDeserialize_ack+0xb0>)
   2f302:	4798      	blx	r3
   2f304:	0003      	movs	r3, r0
   2f306:	b29a      	uxth	r2, r3
   2f308:	687b      	ldr	r3, [r7, #4]
   2f30a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2f30c:	2301      	movs	r3, #1
   2f30e:	627b      	str	r3, [r7, #36]	; 0x24
   2f310:	e000      	b.n	2f314 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2f312:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f316:	0018      	movs	r0, r3
   2f318:	46bd      	mov	sp, r7
   2f31a:	b00a      	add	sp, #40	; 0x28
   2f31c:	bd80      	pop	{r7, pc}
   2f31e:	46c0      	nop			; (mov r8, r8)
   2f320:	0002f51b 	.word	0x0002f51b
   2f324:	0002f4b5 	.word	0x0002f4b5
   2f328:	0002f4e9 	.word	0x0002f4e9

0002f32c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2f32c:	b580      	push	{r7, lr}
   2f32e:	b084      	sub	sp, #16
   2f330:	af00      	add	r7, sp, #0
   2f332:	6078      	str	r0, [r7, #4]
   2f334:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2f336:	2300      	movs	r3, #0
   2f338:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2f33a:	683b      	ldr	r3, [r7, #0]
   2f33c:	4a17      	ldr	r2, [pc, #92]	; (2f39c <MQTTPacket_encode+0x70>)
   2f33e:	4013      	ands	r3, r2
   2f340:	d504      	bpl.n	2f34c <MQTTPacket_encode+0x20>
   2f342:	3b01      	subs	r3, #1
   2f344:	2280      	movs	r2, #128	; 0x80
   2f346:	4252      	negs	r2, r2
   2f348:	4313      	orrs	r3, r2
   2f34a:	3301      	adds	r3, #1
   2f34c:	001a      	movs	r2, r3
   2f34e:	230b      	movs	r3, #11
   2f350:	18fb      	adds	r3, r7, r3
   2f352:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2f354:	683b      	ldr	r3, [r7, #0]
   2f356:	2b00      	cmp	r3, #0
   2f358:	da00      	bge.n	2f35c <MQTTPacket_encode+0x30>
   2f35a:	337f      	adds	r3, #127	; 0x7f
   2f35c:	11db      	asrs	r3, r3, #7
   2f35e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2f360:	683b      	ldr	r3, [r7, #0]
   2f362:	2b00      	cmp	r3, #0
   2f364:	dd08      	ble.n	2f378 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2f366:	230b      	movs	r3, #11
   2f368:	18fb      	adds	r3, r7, r3
   2f36a:	220b      	movs	r2, #11
   2f36c:	18ba      	adds	r2, r7, r2
   2f36e:	7812      	ldrb	r2, [r2, #0]
   2f370:	2180      	movs	r1, #128	; 0x80
   2f372:	4249      	negs	r1, r1
   2f374:	430a      	orrs	r2, r1
   2f376:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2f378:	68fb      	ldr	r3, [r7, #12]
   2f37a:	1c5a      	adds	r2, r3, #1
   2f37c:	60fa      	str	r2, [r7, #12]
   2f37e:	001a      	movs	r2, r3
   2f380:	687b      	ldr	r3, [r7, #4]
   2f382:	189b      	adds	r3, r3, r2
   2f384:	220b      	movs	r2, #11
   2f386:	18ba      	adds	r2, r7, r2
   2f388:	7812      	ldrb	r2, [r2, #0]
   2f38a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2f38c:	683b      	ldr	r3, [r7, #0]
   2f38e:	2b00      	cmp	r3, #0
   2f390:	dcd3      	bgt.n	2f33a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2f392:	68fb      	ldr	r3, [r7, #12]
}
   2f394:	0018      	movs	r0, r3
   2f396:	46bd      	mov	sp, r7
   2f398:	b004      	add	sp, #16
   2f39a:	bd80      	pop	{r7, pc}
   2f39c:	8000007f 	.word	0x8000007f

0002f3a0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2f3a0:	b580      	push	{r7, lr}
   2f3a2:	b086      	sub	sp, #24
   2f3a4:	af00      	add	r7, sp, #0
   2f3a6:	6078      	str	r0, [r7, #4]
   2f3a8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2f3aa:	2301      	movs	r3, #1
   2f3ac:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f3ae:	2300      	movs	r3, #0
   2f3b0:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2f3b2:	683b      	ldr	r3, [r7, #0]
   2f3b4:	2200      	movs	r2, #0
   2f3b6:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2f3b8:	2301      	movs	r3, #1
   2f3ba:	425b      	negs	r3, r3
   2f3bc:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f3be:	693b      	ldr	r3, [r7, #16]
   2f3c0:	3301      	adds	r3, #1
   2f3c2:	613b      	str	r3, [r7, #16]
   2f3c4:	693b      	ldr	r3, [r7, #16]
   2f3c6:	2b04      	cmp	r3, #4
   2f3c8:	dd03      	ble.n	2f3d2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2f3ca:	2301      	movs	r3, #1
   2f3cc:	425b      	negs	r3, r3
   2f3ce:	60fb      	str	r3, [r7, #12]
			goto exit;
   2f3d0:	e022      	b.n	2f418 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2f3d2:	230b      	movs	r3, #11
   2f3d4:	18fa      	adds	r2, r7, r3
   2f3d6:	687b      	ldr	r3, [r7, #4]
   2f3d8:	2101      	movs	r1, #1
   2f3da:	0010      	movs	r0, r2
   2f3dc:	4798      	blx	r3
   2f3de:	0003      	movs	r3, r0
   2f3e0:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2f3e2:	68fb      	ldr	r3, [r7, #12]
   2f3e4:	2b01      	cmp	r3, #1
   2f3e6:	d116      	bne.n	2f416 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2f3e8:	683b      	ldr	r3, [r7, #0]
   2f3ea:	681a      	ldr	r2, [r3, #0]
   2f3ec:	230b      	movs	r3, #11
   2f3ee:	18fb      	adds	r3, r7, r3
   2f3f0:	781b      	ldrb	r3, [r3, #0]
   2f3f2:	0019      	movs	r1, r3
   2f3f4:	237f      	movs	r3, #127	; 0x7f
   2f3f6:	400b      	ands	r3, r1
   2f3f8:	6979      	ldr	r1, [r7, #20]
   2f3fa:	434b      	muls	r3, r1
   2f3fc:	18d2      	adds	r2, r2, r3
   2f3fe:	683b      	ldr	r3, [r7, #0]
   2f400:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2f402:	697b      	ldr	r3, [r7, #20]
   2f404:	01db      	lsls	r3, r3, #7
   2f406:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2f408:	230b      	movs	r3, #11
   2f40a:	18fb      	adds	r3, r7, r3
   2f40c:	781b      	ldrb	r3, [r3, #0]
   2f40e:	b25b      	sxtb	r3, r3
   2f410:	2b00      	cmp	r3, #0
   2f412:	dbd1      	blt.n	2f3b8 <MQTTPacket_decode+0x18>
   2f414:	e000      	b.n	2f418 <MQTTPacket_decode+0x78>
			goto exit;
   2f416:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2f418:	693b      	ldr	r3, [r7, #16]
}
   2f41a:	0018      	movs	r0, r3
   2f41c:	46bd      	mov	sp, r7
   2f41e:	b006      	add	sp, #24
   2f420:	bd80      	pop	{r7, pc}
	...

0002f424 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2f424:	b580      	push	{r7, lr}
   2f426:	b082      	sub	sp, #8
   2f428:	af00      	add	r7, sp, #0
   2f42a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2f42c:	687b      	ldr	r3, [r7, #4]
   2f42e:	3301      	adds	r3, #1
   2f430:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2f432:	687b      	ldr	r3, [r7, #4]
   2f434:	2b7f      	cmp	r3, #127	; 0x7f
   2f436:	dc03      	bgt.n	2f440 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2f438:	687b      	ldr	r3, [r7, #4]
   2f43a:	3301      	adds	r3, #1
   2f43c:	607b      	str	r3, [r7, #4]
   2f43e:	e012      	b.n	2f466 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2f440:	687b      	ldr	r3, [r7, #4]
   2f442:	4a0b      	ldr	r2, [pc, #44]	; (2f470 <MQTTPacket_len+0x4c>)
   2f444:	4293      	cmp	r3, r2
   2f446:	dc03      	bgt.n	2f450 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2f448:	687b      	ldr	r3, [r7, #4]
   2f44a:	3302      	adds	r3, #2
   2f44c:	607b      	str	r3, [r7, #4]
   2f44e:	e00a      	b.n	2f466 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2f450:	687b      	ldr	r3, [r7, #4]
   2f452:	4a08      	ldr	r2, [pc, #32]	; (2f474 <MQTTPacket_len+0x50>)
   2f454:	4293      	cmp	r3, r2
   2f456:	dc03      	bgt.n	2f460 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2f458:	687b      	ldr	r3, [r7, #4]
   2f45a:	3303      	adds	r3, #3
   2f45c:	607b      	str	r3, [r7, #4]
   2f45e:	e002      	b.n	2f466 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2f460:	687b      	ldr	r3, [r7, #4]
   2f462:	3304      	adds	r3, #4
   2f464:	607b      	str	r3, [r7, #4]
	return rem_len;
   2f466:	687b      	ldr	r3, [r7, #4]
}
   2f468:	0018      	movs	r0, r3
   2f46a:	46bd      	mov	sp, r7
   2f46c:	b002      	add	sp, #8
   2f46e:	bd80      	pop	{r7, pc}
   2f470:	00003fff 	.word	0x00003fff
   2f474:	001ffffe 	.word	0x001ffffe

0002f478 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2f478:	b580      	push	{r7, lr}
   2f47a:	b084      	sub	sp, #16
   2f47c:	af00      	add	r7, sp, #0
   2f47e:	6078      	str	r0, [r7, #4]
   2f480:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2f482:	2300      	movs	r3, #0
   2f484:	60fb      	str	r3, [r7, #12]
   2f486:	e00a      	b.n	2f49e <bufchar+0x26>
		*c = *bufptr++;
   2f488:	4b09      	ldr	r3, [pc, #36]	; (2f4b0 <bufchar+0x38>)
   2f48a:	681b      	ldr	r3, [r3, #0]
   2f48c:	1c59      	adds	r1, r3, #1
   2f48e:	4a08      	ldr	r2, [pc, #32]	; (2f4b0 <bufchar+0x38>)
   2f490:	6011      	str	r1, [r2, #0]
   2f492:	781a      	ldrb	r2, [r3, #0]
   2f494:	687b      	ldr	r3, [r7, #4]
   2f496:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2f498:	68fb      	ldr	r3, [r7, #12]
   2f49a:	3301      	adds	r3, #1
   2f49c:	60fb      	str	r3, [r7, #12]
   2f49e:	68fa      	ldr	r2, [r7, #12]
   2f4a0:	683b      	ldr	r3, [r7, #0]
   2f4a2:	429a      	cmp	r2, r3
   2f4a4:	dbf0      	blt.n	2f488 <bufchar+0x10>
	return count;
   2f4a6:	683b      	ldr	r3, [r7, #0]
}
   2f4a8:	0018      	movs	r0, r3
   2f4aa:	46bd      	mov	sp, r7
   2f4ac:	b004      	add	sp, #16
   2f4ae:	bd80      	pop	{r7, pc}
   2f4b0:	200046bc 	.word	0x200046bc

0002f4b4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2f4b4:	b580      	push	{r7, lr}
   2f4b6:	b082      	sub	sp, #8
   2f4b8:	af00      	add	r7, sp, #0
   2f4ba:	6078      	str	r0, [r7, #4]
   2f4bc:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2f4be:	4b07      	ldr	r3, [pc, #28]	; (2f4dc <MQTTPacket_decodeBuf+0x28>)
   2f4c0:	687a      	ldr	r2, [r7, #4]
   2f4c2:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2f4c4:	683a      	ldr	r2, [r7, #0]
   2f4c6:	4b06      	ldr	r3, [pc, #24]	; (2f4e0 <MQTTPacket_decodeBuf+0x2c>)
   2f4c8:	0011      	movs	r1, r2
   2f4ca:	0018      	movs	r0, r3
   2f4cc:	4b05      	ldr	r3, [pc, #20]	; (2f4e4 <MQTTPacket_decodeBuf+0x30>)
   2f4ce:	4798      	blx	r3
   2f4d0:	0003      	movs	r3, r0
}
   2f4d2:	0018      	movs	r0, r3
   2f4d4:	46bd      	mov	sp, r7
   2f4d6:	b002      	add	sp, #8
   2f4d8:	bd80      	pop	{r7, pc}
   2f4da:	46c0      	nop			; (mov r8, r8)
   2f4dc:	200046bc 	.word	0x200046bc
   2f4e0:	0002f479 	.word	0x0002f479
   2f4e4:	0002f3a1 	.word	0x0002f3a1

0002f4e8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2f4e8:	b580      	push	{r7, lr}
   2f4ea:	b084      	sub	sp, #16
   2f4ec:	af00      	add	r7, sp, #0
   2f4ee:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	681b      	ldr	r3, [r3, #0]
   2f4f4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2f4f6:	68fb      	ldr	r3, [r7, #12]
   2f4f8:	781b      	ldrb	r3, [r3, #0]
   2f4fa:	021b      	lsls	r3, r3, #8
   2f4fc:	68fa      	ldr	r2, [r7, #12]
   2f4fe:	3201      	adds	r2, #1
   2f500:	7812      	ldrb	r2, [r2, #0]
   2f502:	189b      	adds	r3, r3, r2
   2f504:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2f506:	687b      	ldr	r3, [r7, #4]
   2f508:	681b      	ldr	r3, [r3, #0]
   2f50a:	1c9a      	adds	r2, r3, #2
   2f50c:	687b      	ldr	r3, [r7, #4]
   2f50e:	601a      	str	r2, [r3, #0]
	return len;
   2f510:	68bb      	ldr	r3, [r7, #8]
}
   2f512:	0018      	movs	r0, r3
   2f514:	46bd      	mov	sp, r7
   2f516:	b004      	add	sp, #16
   2f518:	bd80      	pop	{r7, pc}

0002f51a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2f51a:	b580      	push	{r7, lr}
   2f51c:	b084      	sub	sp, #16
   2f51e:	af00      	add	r7, sp, #0
   2f520:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2f522:	687b      	ldr	r3, [r7, #4]
   2f524:	681a      	ldr	r2, [r3, #0]
   2f526:	230f      	movs	r3, #15
   2f528:	18fb      	adds	r3, r7, r3
   2f52a:	7812      	ldrb	r2, [r2, #0]
   2f52c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f52e:	687b      	ldr	r3, [r7, #4]
   2f530:	681b      	ldr	r3, [r3, #0]
   2f532:	1c5a      	adds	r2, r3, #1
   2f534:	687b      	ldr	r3, [r7, #4]
   2f536:	601a      	str	r2, [r3, #0]
	return c;
   2f538:	230f      	movs	r3, #15
   2f53a:	18fb      	adds	r3, r7, r3
   2f53c:	781b      	ldrb	r3, [r3, #0]
}
   2f53e:	0018      	movs	r0, r3
   2f540:	46bd      	mov	sp, r7
   2f542:	b004      	add	sp, #16
   2f544:	bd80      	pop	{r7, pc}

0002f546 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2f546:	b580      	push	{r7, lr}
   2f548:	b082      	sub	sp, #8
   2f54a:	af00      	add	r7, sp, #0
   2f54c:	6078      	str	r0, [r7, #4]
   2f54e:	000a      	movs	r2, r1
   2f550:	1cfb      	adds	r3, r7, #3
   2f552:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2f554:	687b      	ldr	r3, [r7, #4]
   2f556:	681b      	ldr	r3, [r3, #0]
   2f558:	1cfa      	adds	r2, r7, #3
   2f55a:	7812      	ldrb	r2, [r2, #0]
   2f55c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f55e:	687b      	ldr	r3, [r7, #4]
   2f560:	681b      	ldr	r3, [r3, #0]
   2f562:	1c5a      	adds	r2, r3, #1
   2f564:	687b      	ldr	r3, [r7, #4]
   2f566:	601a      	str	r2, [r3, #0]
}
   2f568:	46c0      	nop			; (mov r8, r8)
   2f56a:	46bd      	mov	sp, r7
   2f56c:	b002      	add	sp, #8
   2f56e:	bd80      	pop	{r7, pc}

0002f570 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2f570:	b580      	push	{r7, lr}
   2f572:	b082      	sub	sp, #8
   2f574:	af00      	add	r7, sp, #0
   2f576:	6078      	str	r0, [r7, #4]
   2f578:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2f57a:	687b      	ldr	r3, [r7, #4]
   2f57c:	681a      	ldr	r2, [r3, #0]
   2f57e:	683b      	ldr	r3, [r7, #0]
   2f580:	2b00      	cmp	r3, #0
   2f582:	da00      	bge.n	2f586 <writeInt+0x16>
   2f584:	33ff      	adds	r3, #255	; 0xff
   2f586:	121b      	asrs	r3, r3, #8
   2f588:	b2db      	uxtb	r3, r3
   2f58a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f58c:	687b      	ldr	r3, [r7, #4]
   2f58e:	681b      	ldr	r3, [r3, #0]
   2f590:	1c5a      	adds	r2, r3, #1
   2f592:	687b      	ldr	r3, [r7, #4]
   2f594:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2f596:	687b      	ldr	r3, [r7, #4]
   2f598:	681a      	ldr	r2, [r3, #0]
   2f59a:	683b      	ldr	r3, [r7, #0]
   2f59c:	4908      	ldr	r1, [pc, #32]	; (2f5c0 <writeInt+0x50>)
   2f59e:	400b      	ands	r3, r1
   2f5a0:	d503      	bpl.n	2f5aa <writeInt+0x3a>
   2f5a2:	3b01      	subs	r3, #1
   2f5a4:	4907      	ldr	r1, [pc, #28]	; (2f5c4 <writeInt+0x54>)
   2f5a6:	430b      	orrs	r3, r1
   2f5a8:	3301      	adds	r3, #1
   2f5aa:	b2db      	uxtb	r3, r3
   2f5ac:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f5ae:	687b      	ldr	r3, [r7, #4]
   2f5b0:	681b      	ldr	r3, [r3, #0]
   2f5b2:	1c5a      	adds	r2, r3, #1
   2f5b4:	687b      	ldr	r3, [r7, #4]
   2f5b6:	601a      	str	r2, [r3, #0]
}
   2f5b8:	46c0      	nop			; (mov r8, r8)
   2f5ba:	46bd      	mov	sp, r7
   2f5bc:	b002      	add	sp, #8
   2f5be:	bd80      	pop	{r7, pc}
   2f5c0:	800000ff 	.word	0x800000ff
   2f5c4:	ffffff00 	.word	0xffffff00

0002f5c8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2f5c8:	b580      	push	{r7, lr}
   2f5ca:	b084      	sub	sp, #16
   2f5cc:	af00      	add	r7, sp, #0
   2f5ce:	6078      	str	r0, [r7, #4]
   2f5d0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2f5d2:	683b      	ldr	r3, [r7, #0]
   2f5d4:	0018      	movs	r0, r3
   2f5d6:	4b0d      	ldr	r3, [pc, #52]	; (2f60c <writeCString+0x44>)
   2f5d8:	4798      	blx	r3
   2f5da:	0003      	movs	r3, r0
   2f5dc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2f5de:	68fa      	ldr	r2, [r7, #12]
   2f5e0:	687b      	ldr	r3, [r7, #4]
   2f5e2:	0011      	movs	r1, r2
   2f5e4:	0018      	movs	r0, r3
   2f5e6:	4b0a      	ldr	r3, [pc, #40]	; (2f610 <writeCString+0x48>)
   2f5e8:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2f5ea:	687b      	ldr	r3, [r7, #4]
   2f5ec:	681b      	ldr	r3, [r3, #0]
   2f5ee:	68fa      	ldr	r2, [r7, #12]
   2f5f0:	6839      	ldr	r1, [r7, #0]
   2f5f2:	0018      	movs	r0, r3
   2f5f4:	4b07      	ldr	r3, [pc, #28]	; (2f614 <writeCString+0x4c>)
   2f5f6:	4798      	blx	r3
	*pptr += len;
   2f5f8:	687b      	ldr	r3, [r7, #4]
   2f5fa:	681a      	ldr	r2, [r3, #0]
   2f5fc:	68fb      	ldr	r3, [r7, #12]
   2f5fe:	18d2      	adds	r2, r2, r3
   2f600:	687b      	ldr	r3, [r7, #4]
   2f602:	601a      	str	r2, [r3, #0]
}
   2f604:	46c0      	nop			; (mov r8, r8)
   2f606:	46bd      	mov	sp, r7
   2f608:	b004      	add	sp, #16
   2f60a:	bd80      	pop	{r7, pc}
   2f60c:	000349ab 	.word	0x000349ab
   2f610:	0002f571 	.word	0x0002f571
   2f614:	000345d9 	.word	0x000345d9

0002f618 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2f618:	b580      	push	{r7, lr}
   2f61a:	b084      	sub	sp, #16
   2f61c:	af00      	add	r7, sp, #0
   2f61e:	60f8      	str	r0, [r7, #12]
   2f620:	0038      	movs	r0, r7
   2f622:	6001      	str	r1, [r0, #0]
   2f624:	6042      	str	r2, [r0, #4]
   2f626:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2f628:	003b      	movs	r3, r7
   2f62a:	685b      	ldr	r3, [r3, #4]
   2f62c:	2b00      	cmp	r3, #0
   2f62e:	dd17      	ble.n	2f660 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2f630:	003b      	movs	r3, r7
   2f632:	685a      	ldr	r2, [r3, #4]
   2f634:	68fb      	ldr	r3, [r7, #12]
   2f636:	0011      	movs	r1, r2
   2f638:	0018      	movs	r0, r3
   2f63a:	4b14      	ldr	r3, [pc, #80]	; (2f68c <writeMQTTString+0x74>)
   2f63c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2f63e:	68fb      	ldr	r3, [r7, #12]
   2f640:	6818      	ldr	r0, [r3, #0]
   2f642:	003b      	movs	r3, r7
   2f644:	6899      	ldr	r1, [r3, #8]
   2f646:	003b      	movs	r3, r7
   2f648:	685b      	ldr	r3, [r3, #4]
   2f64a:	001a      	movs	r2, r3
   2f64c:	4b10      	ldr	r3, [pc, #64]	; (2f690 <writeMQTTString+0x78>)
   2f64e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2f650:	68fb      	ldr	r3, [r7, #12]
   2f652:	681a      	ldr	r2, [r3, #0]
   2f654:	003b      	movs	r3, r7
   2f656:	685b      	ldr	r3, [r3, #4]
   2f658:	18d2      	adds	r2, r2, r3
   2f65a:	68fb      	ldr	r3, [r7, #12]
   2f65c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2f65e:	e010      	b.n	2f682 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2f660:	003b      	movs	r3, r7
   2f662:	681b      	ldr	r3, [r3, #0]
   2f664:	2b00      	cmp	r3, #0
   2f666:	d007      	beq.n	2f678 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2f668:	003b      	movs	r3, r7
   2f66a:	681a      	ldr	r2, [r3, #0]
   2f66c:	68fb      	ldr	r3, [r7, #12]
   2f66e:	0011      	movs	r1, r2
   2f670:	0018      	movs	r0, r3
   2f672:	4b08      	ldr	r3, [pc, #32]	; (2f694 <writeMQTTString+0x7c>)
   2f674:	4798      	blx	r3
}
   2f676:	e004      	b.n	2f682 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2f678:	68fb      	ldr	r3, [r7, #12]
   2f67a:	2100      	movs	r1, #0
   2f67c:	0018      	movs	r0, r3
   2f67e:	4b03      	ldr	r3, [pc, #12]	; (2f68c <writeMQTTString+0x74>)
   2f680:	4798      	blx	r3
}
   2f682:	46c0      	nop			; (mov r8, r8)
   2f684:	46bd      	mov	sp, r7
   2f686:	b004      	add	sp, #16
   2f688:	bd80      	pop	{r7, pc}
   2f68a:	46c0      	nop			; (mov r8, r8)
   2f68c:	0002f571 	.word	0x0002f571
   2f690:	000345d9 	.word	0x000345d9
   2f694:	0002f5c9 	.word	0x0002f5c9

0002f698 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2f698:	b580      	push	{r7, lr}
   2f69a:	b086      	sub	sp, #24
   2f69c:	af00      	add	r7, sp, #0
   2f69e:	60f8      	str	r0, [r7, #12]
   2f6a0:	60b9      	str	r1, [r7, #8]
   2f6a2:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2f6a4:	2300      	movs	r3, #0
   2f6a6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2f6a8:	687a      	ldr	r2, [r7, #4]
   2f6aa:	68bb      	ldr	r3, [r7, #8]
   2f6ac:	681b      	ldr	r3, [r3, #0]
   2f6ae:	1ad3      	subs	r3, r2, r3
   2f6b0:	2b01      	cmp	r3, #1
   2f6b2:	dd1b      	ble.n	2f6ec <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2f6b4:	68bb      	ldr	r3, [r7, #8]
   2f6b6:	0018      	movs	r0, r3
   2f6b8:	4b10      	ldr	r3, [pc, #64]	; (2f6fc <readMQTTLenString+0x64>)
   2f6ba:	4798      	blx	r3
   2f6bc:	0002      	movs	r2, r0
   2f6be:	68fb      	ldr	r3, [r7, #12]
   2f6c0:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2f6c2:	68bb      	ldr	r3, [r7, #8]
   2f6c4:	681a      	ldr	r2, [r3, #0]
   2f6c6:	68fb      	ldr	r3, [r7, #12]
   2f6c8:	685b      	ldr	r3, [r3, #4]
   2f6ca:	18d2      	adds	r2, r2, r3
   2f6cc:	687b      	ldr	r3, [r7, #4]
   2f6ce:	429a      	cmp	r2, r3
   2f6d0:	d80c      	bhi.n	2f6ec <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2f6d2:	68bb      	ldr	r3, [r7, #8]
   2f6d4:	681a      	ldr	r2, [r3, #0]
   2f6d6:	68fb      	ldr	r3, [r7, #12]
   2f6d8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2f6da:	68bb      	ldr	r3, [r7, #8]
   2f6dc:	681a      	ldr	r2, [r3, #0]
   2f6de:	68fb      	ldr	r3, [r7, #12]
   2f6e0:	685b      	ldr	r3, [r3, #4]
   2f6e2:	18d2      	adds	r2, r2, r3
   2f6e4:	68bb      	ldr	r3, [r7, #8]
   2f6e6:	601a      	str	r2, [r3, #0]
			rc = 1;
   2f6e8:	2301      	movs	r3, #1
   2f6ea:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2f6ec:	68fb      	ldr	r3, [r7, #12]
   2f6ee:	2200      	movs	r2, #0
   2f6f0:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2f6f2:	697b      	ldr	r3, [r7, #20]
}
   2f6f4:	0018      	movs	r0, r3
   2f6f6:	46bd      	mov	sp, r7
   2f6f8:	b006      	add	sp, #24
   2f6fa:	bd80      	pop	{r7, pc}
   2f6fc:	0002f4e9 	.word	0x0002f4e9

0002f700 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2f700:	b580      	push	{r7, lr}
   2f702:	b086      	sub	sp, #24
   2f704:	af00      	add	r7, sp, #0
   2f706:	1d3b      	adds	r3, r7, #4
   2f708:	6018      	str	r0, [r3, #0]
   2f70a:	6059      	str	r1, [r3, #4]
   2f70c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2f70e:	2300      	movs	r3, #0
   2f710:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2f712:	1d3b      	adds	r3, r7, #4
   2f714:	681b      	ldr	r3, [r3, #0]
   2f716:	2b00      	cmp	r3, #0
   2f718:	d007      	beq.n	2f72a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2f71a:	1d3b      	adds	r3, r7, #4
   2f71c:	681b      	ldr	r3, [r3, #0]
   2f71e:	0018      	movs	r0, r3
   2f720:	4b06      	ldr	r3, [pc, #24]	; (2f73c <MQTTstrlen+0x3c>)
   2f722:	4798      	blx	r3
   2f724:	0003      	movs	r3, r0
   2f726:	617b      	str	r3, [r7, #20]
   2f728:	e002      	b.n	2f730 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2f72a:	1d3b      	adds	r3, r7, #4
   2f72c:	685b      	ldr	r3, [r3, #4]
   2f72e:	617b      	str	r3, [r7, #20]
	return rc;
   2f730:	697b      	ldr	r3, [r7, #20]
}
   2f732:	0018      	movs	r0, r3
   2f734:	46bd      	mov	sp, r7
   2f736:	b006      	add	sp, #24
   2f738:	bd80      	pop	{r7, pc}
   2f73a:	46c0      	nop			; (mov r8, r8)
   2f73c:	000349ab 	.word	0x000349ab

0002f740 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2f740:	b580      	push	{r7, lr}
   2f742:	b086      	sub	sp, #24
   2f744:	af00      	add	r7, sp, #0
   2f746:	6078      	str	r0, [r7, #4]
   2f748:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2f74a:	2300      	movs	r3, #0
   2f74c:	617b      	str	r3, [r7, #20]
		blen = 0;
   2f74e:	2300      	movs	r3, #0
   2f750:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2f752:	687b      	ldr	r3, [r7, #4]
   2f754:	681b      	ldr	r3, [r3, #0]
   2f756:	2b00      	cmp	r3, #0
   2f758:	d00a      	beq.n	2f770 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2f75a:	687b      	ldr	r3, [r7, #4]
   2f75c:	681b      	ldr	r3, [r3, #0]
   2f75e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2f760:	687b      	ldr	r3, [r7, #4]
   2f762:	681b      	ldr	r3, [r3, #0]
   2f764:	0018      	movs	r0, r3
   2f766:	4b12      	ldr	r3, [pc, #72]	; (2f7b0 <MQTTPacket_equals+0x70>)
   2f768:	4798      	blx	r3
   2f76a:	0003      	movs	r3, r0
   2f76c:	617b      	str	r3, [r7, #20]
   2f76e:	e005      	b.n	2f77c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2f770:	687b      	ldr	r3, [r7, #4]
   2f772:	689b      	ldr	r3, [r3, #8]
   2f774:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2f776:	687b      	ldr	r3, [r7, #4]
   2f778:	685b      	ldr	r3, [r3, #4]
   2f77a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2f77c:	683b      	ldr	r3, [r7, #0]
   2f77e:	0018      	movs	r0, r3
   2f780:	4b0b      	ldr	r3, [pc, #44]	; (2f7b0 <MQTTPacket_equals+0x70>)
   2f782:	4798      	blx	r3
   2f784:	0003      	movs	r3, r0
   2f786:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2f788:	697a      	ldr	r2, [r7, #20]
   2f78a:	68fb      	ldr	r3, [r7, #12]
   2f78c:	429a      	cmp	r2, r3
   2f78e:	d109      	bne.n	2f7a4 <MQTTPacket_equals+0x64>
   2f790:	697a      	ldr	r2, [r7, #20]
   2f792:	6839      	ldr	r1, [r7, #0]
   2f794:	693b      	ldr	r3, [r7, #16]
   2f796:	0018      	movs	r0, r3
   2f798:	4b06      	ldr	r3, [pc, #24]	; (2f7b4 <MQTTPacket_equals+0x74>)
   2f79a:	4798      	blx	r3
   2f79c:	1e03      	subs	r3, r0, #0
   2f79e:	d101      	bne.n	2f7a4 <MQTTPacket_equals+0x64>
   2f7a0:	2301      	movs	r3, #1
   2f7a2:	e000      	b.n	2f7a6 <MQTTPacket_equals+0x66>
   2f7a4:	2300      	movs	r3, #0
}
   2f7a6:	0018      	movs	r0, r3
   2f7a8:	46bd      	mov	sp, r7
   2f7aa:	b006      	add	sp, #24
   2f7ac:	bd80      	pop	{r7, pc}
   2f7ae:	46c0      	nop			; (mov r8, r8)
   2f7b0:	000349ab 	.word	0x000349ab
   2f7b4:	000349b9 	.word	0x000349b9

0002f7b8 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2f7b8:	b580      	push	{r7, lr}
   2f7ba:	b086      	sub	sp, #24
   2f7bc:	af00      	add	r7, sp, #0
   2f7be:	60f8      	str	r0, [r7, #12]
   2f7c0:	0038      	movs	r0, r7
   2f7c2:	6001      	str	r1, [r0, #0]
   2f7c4:	6042      	str	r2, [r0, #4]
   2f7c6:	6083      	str	r3, [r0, #8]
	int len = 0;
   2f7c8:	2300      	movs	r3, #0
   2f7ca:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2f7cc:	003b      	movs	r3, r7
   2f7ce:	6818      	ldr	r0, [r3, #0]
   2f7d0:	6859      	ldr	r1, [r3, #4]
   2f7d2:	689a      	ldr	r2, [r3, #8]
   2f7d4:	4b09      	ldr	r3, [pc, #36]	; (2f7fc <MQTTSerialize_publishLength+0x44>)
   2f7d6:	4798      	blx	r3
   2f7d8:	0003      	movs	r3, r0
   2f7da:	1c9a      	adds	r2, r3, #2
   2f7dc:	6a3b      	ldr	r3, [r7, #32]
   2f7de:	18d3      	adds	r3, r2, r3
   2f7e0:	697a      	ldr	r2, [r7, #20]
   2f7e2:	18d3      	adds	r3, r2, r3
   2f7e4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2f7e6:	68fb      	ldr	r3, [r7, #12]
   2f7e8:	2b00      	cmp	r3, #0
   2f7ea:	dd02      	ble.n	2f7f2 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2f7ec:	697b      	ldr	r3, [r7, #20]
   2f7ee:	3302      	adds	r3, #2
   2f7f0:	617b      	str	r3, [r7, #20]
	return len;
   2f7f2:	697b      	ldr	r3, [r7, #20]
}
   2f7f4:	0018      	movs	r0, r3
   2f7f6:	46bd      	mov	sp, r7
   2f7f8:	b006      	add	sp, #24
   2f7fa:	bd80      	pop	{r7, pc}
   2f7fc:	0002f701 	.word	0x0002f701

0002f800 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2f800:	b590      	push	{r4, r7, lr}
   2f802:	b08b      	sub	sp, #44	; 0x2c
   2f804:	af02      	add	r7, sp, #8
   2f806:	60f8      	str	r0, [r7, #12]
   2f808:	60b9      	str	r1, [r7, #8]
   2f80a:	603b      	str	r3, [r7, #0]
   2f80c:	1dfb      	adds	r3, r7, #7
   2f80e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f810:	68fb      	ldr	r3, [r7, #12]
   2f812:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2f814:	2300      	movs	r3, #0
   2f816:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2f818:	2300      	movs	r3, #0
   2f81a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f81c:	2300      	movs	r3, #0
   2f81e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2f820:	2308      	movs	r3, #8
   2f822:	2230      	movs	r2, #48	; 0x30
   2f824:	4694      	mov	ip, r2
   2f826:	44bc      	add	ip, r7
   2f828:	4463      	add	r3, ip
   2f82a:	6838      	ldr	r0, [r7, #0]
   2f82c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f82e:	9200      	str	r2, [sp, #0]
   2f830:	6819      	ldr	r1, [r3, #0]
   2f832:	685a      	ldr	r2, [r3, #4]
   2f834:	689b      	ldr	r3, [r3, #8]
   2f836:	4c46      	ldr	r4, [pc, #280]	; (2f950 <MQTTSerialize_publish+0x150>)
   2f838:	47a0      	blx	r4
   2f83a:	0003      	movs	r3, r0
   2f83c:	61bb      	str	r3, [r7, #24]
   2f83e:	69bb      	ldr	r3, [r7, #24]
   2f840:	0018      	movs	r0, r3
   2f842:	4b44      	ldr	r3, [pc, #272]	; (2f954 <MQTTSerialize_publish+0x154>)
   2f844:	4798      	blx	r3
   2f846:	0002      	movs	r2, r0
   2f848:	68bb      	ldr	r3, [r7, #8]
   2f84a:	429a      	cmp	r2, r3
   2f84c:	dd03      	ble.n	2f856 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f84e:	2302      	movs	r3, #2
   2f850:	425b      	negs	r3, r3
   2f852:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f854:	e077      	b.n	2f946 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2f856:	2310      	movs	r3, #16
   2f858:	18fb      	adds	r3, r7, r3
   2f85a:	781a      	ldrb	r2, [r3, #0]
   2f85c:	210f      	movs	r1, #15
   2f85e:	400a      	ands	r2, r1
   2f860:	1c11      	adds	r1, r2, #0
   2f862:	2230      	movs	r2, #48	; 0x30
   2f864:	430a      	orrs	r2, r1
   2f866:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f868:	1dfb      	adds	r3, r7, #7
   2f86a:	781b      	ldrb	r3, [r3, #0]
   2f86c:	2201      	movs	r2, #1
   2f86e:	4013      	ands	r3, r2
   2f870:	b2da      	uxtb	r2, r3
   2f872:	2310      	movs	r3, #16
   2f874:	18fb      	adds	r3, r7, r3
   2f876:	2101      	movs	r1, #1
   2f878:	400a      	ands	r2, r1
   2f87a:	00d0      	lsls	r0, r2, #3
   2f87c:	781a      	ldrb	r2, [r3, #0]
   2f87e:	2108      	movs	r1, #8
   2f880:	438a      	bics	r2, r1
   2f882:	1c11      	adds	r1, r2, #0
   2f884:	1c02      	adds	r2, r0, #0
   2f886:	430a      	orrs	r2, r1
   2f888:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2f88a:	683b      	ldr	r3, [r7, #0]
   2f88c:	b2db      	uxtb	r3, r3
   2f88e:	1c1a      	adds	r2, r3, #0
   2f890:	2303      	movs	r3, #3
   2f892:	4013      	ands	r3, r2
   2f894:	b2da      	uxtb	r2, r3
   2f896:	2310      	movs	r3, #16
   2f898:	18fb      	adds	r3, r7, r3
   2f89a:	2103      	movs	r1, #3
   2f89c:	400a      	ands	r2, r1
   2f89e:	1890      	adds	r0, r2, r2
   2f8a0:	781a      	ldrb	r2, [r3, #0]
   2f8a2:	2106      	movs	r1, #6
   2f8a4:	438a      	bics	r2, r1
   2f8a6:	1c11      	adds	r1, r2, #0
   2f8a8:	1c02      	adds	r2, r0, #0
   2f8aa:	430a      	orrs	r2, r1
   2f8ac:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2f8ae:	2330      	movs	r3, #48	; 0x30
   2f8b0:	18fb      	adds	r3, r7, r3
   2f8b2:	781b      	ldrb	r3, [r3, #0]
   2f8b4:	2201      	movs	r2, #1
   2f8b6:	4013      	ands	r3, r2
   2f8b8:	b2da      	uxtb	r2, r3
   2f8ba:	2310      	movs	r3, #16
   2f8bc:	18fb      	adds	r3, r7, r3
   2f8be:	2101      	movs	r1, #1
   2f8c0:	400a      	ands	r2, r1
   2f8c2:	0010      	movs	r0, r2
   2f8c4:	781a      	ldrb	r2, [r3, #0]
   2f8c6:	2101      	movs	r1, #1
   2f8c8:	438a      	bics	r2, r1
   2f8ca:	1c11      	adds	r1, r2, #0
   2f8cc:	1c02      	adds	r2, r0, #0
   2f8ce:	430a      	orrs	r2, r1
   2f8d0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f8d2:	2310      	movs	r3, #16
   2f8d4:	18fb      	adds	r3, r7, r3
   2f8d6:	781a      	ldrb	r2, [r3, #0]
   2f8d8:	2314      	movs	r3, #20
   2f8da:	18fb      	adds	r3, r7, r3
   2f8dc:	0011      	movs	r1, r2
   2f8de:	0018      	movs	r0, r3
   2f8e0:	4b1d      	ldr	r3, [pc, #116]	; (2f958 <MQTTSerialize_publish+0x158>)
   2f8e2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2f8e4:	697b      	ldr	r3, [r7, #20]
   2f8e6:	69ba      	ldr	r2, [r7, #24]
   2f8e8:	0011      	movs	r1, r2
   2f8ea:	0018      	movs	r0, r3
   2f8ec:	4b1b      	ldr	r3, [pc, #108]	; (2f95c <MQTTSerialize_publish+0x15c>)
   2f8ee:	4798      	blx	r3
   2f8f0:	0002      	movs	r2, r0
   2f8f2:	697b      	ldr	r3, [r7, #20]
   2f8f4:	189b      	adds	r3, r3, r2
   2f8f6:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2f8f8:	2308      	movs	r3, #8
   2f8fa:	2230      	movs	r2, #48	; 0x30
   2f8fc:	4694      	mov	ip, r2
   2f8fe:	44bc      	add	ip, r7
   2f900:	4463      	add	r3, ip
   2f902:	2214      	movs	r2, #20
   2f904:	18b8      	adds	r0, r7, r2
   2f906:	6819      	ldr	r1, [r3, #0]
   2f908:	685a      	ldr	r2, [r3, #4]
   2f90a:	689b      	ldr	r3, [r3, #8]
   2f90c:	4c14      	ldr	r4, [pc, #80]	; (2f960 <MQTTSerialize_publish+0x160>)
   2f90e:	47a0      	blx	r4

	if (qos > 0)
   2f910:	683b      	ldr	r3, [r7, #0]
   2f912:	2b00      	cmp	r3, #0
   2f914:	dd08      	ble.n	2f928 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2f916:	2334      	movs	r3, #52	; 0x34
   2f918:	18fb      	adds	r3, r7, r3
   2f91a:	881a      	ldrh	r2, [r3, #0]
   2f91c:	2314      	movs	r3, #20
   2f91e:	18fb      	adds	r3, r7, r3
   2f920:	0011      	movs	r1, r2
   2f922:	0018      	movs	r0, r3
   2f924:	4b0f      	ldr	r3, [pc, #60]	; (2f964 <MQTTSerialize_publish+0x164>)
   2f926:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2f928:	697b      	ldr	r3, [r7, #20]
   2f92a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f92c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2f92e:	0018      	movs	r0, r3
   2f930:	4b0d      	ldr	r3, [pc, #52]	; (2f968 <MQTTSerialize_publish+0x168>)
   2f932:	4798      	blx	r3
	ptr += payloadlen;
   2f934:	697a      	ldr	r2, [r7, #20]
   2f936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f938:	18d3      	adds	r3, r2, r3
   2f93a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2f93c:	697b      	ldr	r3, [r7, #20]
   2f93e:	001a      	movs	r2, r3
   2f940:	68fb      	ldr	r3, [r7, #12]
   2f942:	1ad3      	subs	r3, r2, r3
   2f944:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f946:	69fb      	ldr	r3, [r7, #28]
}
   2f948:	0018      	movs	r0, r3
   2f94a:	46bd      	mov	sp, r7
   2f94c:	b009      	add	sp, #36	; 0x24
   2f94e:	bd90      	pop	{r4, r7, pc}
   2f950:	0002f7b9 	.word	0x0002f7b9
   2f954:	0002f425 	.word	0x0002f425
   2f958:	0002f547 	.word	0x0002f547
   2f95c:	0002f32d 	.word	0x0002f32d
   2f960:	0002f619 	.word	0x0002f619
   2f964:	0002f571 	.word	0x0002f571
   2f968:	000345d9 	.word	0x000345d9

0002f96c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2f96c:	b580      	push	{r7, lr}
   2f96e:	b088      	sub	sp, #32
   2f970:	af00      	add	r7, sp, #0
   2f972:	60f8      	str	r0, [r7, #12]
   2f974:	60b9      	str	r1, [r7, #8]
   2f976:	0019      	movs	r1, r3
   2f978:	1dfb      	adds	r3, r7, #7
   2f97a:	701a      	strb	r2, [r3, #0]
   2f97c:	1dbb      	adds	r3, r7, #6
   2f97e:	1c0a      	adds	r2, r1, #0
   2f980:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f982:	2300      	movs	r3, #0
   2f984:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f986:	2300      	movs	r3, #0
   2f988:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f98a:	68fb      	ldr	r3, [r7, #12]
   2f98c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2f98e:	68bb      	ldr	r3, [r7, #8]
   2f990:	2b03      	cmp	r3, #3
   2f992:	dc03      	bgt.n	2f99c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f994:	2302      	movs	r3, #2
   2f996:	425b      	negs	r3, r3
   2f998:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f99a:	e055      	b.n	2fa48 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2f99c:	1dfb      	adds	r3, r7, #7
   2f99e:	781b      	ldrb	r3, [r3, #0]
   2f9a0:	220f      	movs	r2, #15
   2f9a2:	4013      	ands	r3, r2
   2f9a4:	b2da      	uxtb	r2, r3
   2f9a6:	2318      	movs	r3, #24
   2f9a8:	18fb      	adds	r3, r7, r3
   2f9aa:	0110      	lsls	r0, r2, #4
   2f9ac:	781a      	ldrb	r2, [r3, #0]
   2f9ae:	210f      	movs	r1, #15
   2f9b0:	400a      	ands	r2, r1
   2f9b2:	1c11      	adds	r1, r2, #0
   2f9b4:	1c02      	adds	r2, r0, #0
   2f9b6:	430a      	orrs	r2, r1
   2f9b8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f9ba:	1dbb      	adds	r3, r7, #6
   2f9bc:	781b      	ldrb	r3, [r3, #0]
   2f9be:	2201      	movs	r2, #1
   2f9c0:	4013      	ands	r3, r2
   2f9c2:	b2da      	uxtb	r2, r3
   2f9c4:	2318      	movs	r3, #24
   2f9c6:	18fb      	adds	r3, r7, r3
   2f9c8:	2101      	movs	r1, #1
   2f9ca:	400a      	ands	r2, r1
   2f9cc:	00d0      	lsls	r0, r2, #3
   2f9ce:	781a      	ldrb	r2, [r3, #0]
   2f9d0:	2108      	movs	r1, #8
   2f9d2:	438a      	bics	r2, r1
   2f9d4:	1c11      	adds	r1, r2, #0
   2f9d6:	1c02      	adds	r2, r0, #0
   2f9d8:	430a      	orrs	r2, r1
   2f9da:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2f9dc:	1dfb      	adds	r3, r7, #7
   2f9de:	781b      	ldrb	r3, [r3, #0]
   2f9e0:	3b06      	subs	r3, #6
   2f9e2:	425a      	negs	r2, r3
   2f9e4:	4153      	adcs	r3, r2
   2f9e6:	b2db      	uxtb	r3, r3
   2f9e8:	1c1a      	adds	r2, r3, #0
   2f9ea:	2303      	movs	r3, #3
   2f9ec:	4013      	ands	r3, r2
   2f9ee:	b2da      	uxtb	r2, r3
   2f9f0:	2318      	movs	r3, #24
   2f9f2:	18fb      	adds	r3, r7, r3
   2f9f4:	2103      	movs	r1, #3
   2f9f6:	400a      	ands	r2, r1
   2f9f8:	1890      	adds	r0, r2, r2
   2f9fa:	781a      	ldrb	r2, [r3, #0]
   2f9fc:	2106      	movs	r1, #6
   2f9fe:	438a      	bics	r2, r1
   2fa00:	1c11      	adds	r1, r2, #0
   2fa02:	1c02      	adds	r2, r0, #0
   2fa04:	430a      	orrs	r2, r1
   2fa06:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fa08:	2318      	movs	r3, #24
   2fa0a:	18fb      	adds	r3, r7, r3
   2fa0c:	781a      	ldrb	r2, [r3, #0]
   2fa0e:	2314      	movs	r3, #20
   2fa10:	18fb      	adds	r3, r7, r3
   2fa12:	0011      	movs	r1, r2
   2fa14:	0018      	movs	r0, r3
   2fa16:	4b0f      	ldr	r3, [pc, #60]	; (2fa54 <MQTTSerialize_ack+0xe8>)
   2fa18:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2fa1a:	697b      	ldr	r3, [r7, #20]
   2fa1c:	2102      	movs	r1, #2
   2fa1e:	0018      	movs	r0, r3
   2fa20:	4b0d      	ldr	r3, [pc, #52]	; (2fa58 <MQTTSerialize_ack+0xec>)
   2fa22:	4798      	blx	r3
   2fa24:	0002      	movs	r2, r0
   2fa26:	697b      	ldr	r3, [r7, #20]
   2fa28:	189b      	adds	r3, r3, r2
   2fa2a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2fa2c:	2328      	movs	r3, #40	; 0x28
   2fa2e:	18fb      	adds	r3, r7, r3
   2fa30:	881a      	ldrh	r2, [r3, #0]
   2fa32:	2314      	movs	r3, #20
   2fa34:	18fb      	adds	r3, r7, r3
   2fa36:	0011      	movs	r1, r2
   2fa38:	0018      	movs	r0, r3
   2fa3a:	4b08      	ldr	r3, [pc, #32]	; (2fa5c <MQTTSerialize_ack+0xf0>)
   2fa3c:	4798      	blx	r3
	rc = ptr - buf;
   2fa3e:	697b      	ldr	r3, [r7, #20]
   2fa40:	001a      	movs	r2, r3
   2fa42:	68fb      	ldr	r3, [r7, #12]
   2fa44:	1ad3      	subs	r3, r2, r3
   2fa46:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fa48:	69fb      	ldr	r3, [r7, #28]
}
   2fa4a:	0018      	movs	r0, r3
   2fa4c:	46bd      	mov	sp, r7
   2fa4e:	b008      	add	sp, #32
   2fa50:	bd80      	pop	{r7, pc}
   2fa52:	46c0      	nop			; (mov r8, r8)
   2fa54:	0002f547 	.word	0x0002f547
   2fa58:	0002f32d 	.word	0x0002f32d
   2fa5c:	0002f571 	.word	0x0002f571

0002fa60 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2fa60:	b580      	push	{r7, lr}
   2fa62:	b084      	sub	sp, #16
   2fa64:	af00      	add	r7, sp, #0
   2fa66:	6078      	str	r0, [r7, #4]
   2fa68:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2fa6a:	2302      	movs	r3, #2
   2fa6c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2fa6e:	2300      	movs	r3, #0
   2fa70:	60fb      	str	r3, [r7, #12]
   2fa72:	e014      	b.n	2fa9e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2fa74:	68fa      	ldr	r2, [r7, #12]
   2fa76:	0013      	movs	r3, r2
   2fa78:	005b      	lsls	r3, r3, #1
   2fa7a:	189b      	adds	r3, r3, r2
   2fa7c:	009b      	lsls	r3, r3, #2
   2fa7e:	001a      	movs	r2, r3
   2fa80:	683b      	ldr	r3, [r7, #0]
   2fa82:	189b      	adds	r3, r3, r2
   2fa84:	6818      	ldr	r0, [r3, #0]
   2fa86:	6859      	ldr	r1, [r3, #4]
   2fa88:	689a      	ldr	r2, [r3, #8]
   2fa8a:	4b09      	ldr	r3, [pc, #36]	; (2fab0 <MQTTSerialize_subscribeLength+0x50>)
   2fa8c:	4798      	blx	r3
   2fa8e:	0003      	movs	r3, r0
   2fa90:	3303      	adds	r3, #3
   2fa92:	68ba      	ldr	r2, [r7, #8]
   2fa94:	18d3      	adds	r3, r2, r3
   2fa96:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2fa98:	68fb      	ldr	r3, [r7, #12]
   2fa9a:	3301      	adds	r3, #1
   2fa9c:	60fb      	str	r3, [r7, #12]
   2fa9e:	68fa      	ldr	r2, [r7, #12]
   2faa0:	687b      	ldr	r3, [r7, #4]
   2faa2:	429a      	cmp	r2, r3
   2faa4:	dbe6      	blt.n	2fa74 <MQTTSerialize_subscribeLength+0x14>
	return len;
   2faa6:	68bb      	ldr	r3, [r7, #8]
}
   2faa8:	0018      	movs	r0, r3
   2faaa:	46bd      	mov	sp, r7
   2faac:	b004      	add	sp, #16
   2faae:	bd80      	pop	{r7, pc}
   2fab0:	0002f701 	.word	0x0002f701

0002fab4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2fab4:	b590      	push	{r4, r7, lr}
   2fab6:	b08b      	sub	sp, #44	; 0x2c
   2fab8:	af00      	add	r7, sp, #0
   2faba:	60f8      	str	r0, [r7, #12]
   2fabc:	60b9      	str	r1, [r7, #8]
   2fabe:	0019      	movs	r1, r3
   2fac0:	1dfb      	adds	r3, r7, #7
   2fac2:	701a      	strb	r2, [r3, #0]
   2fac4:	1d3b      	adds	r3, r7, #4
   2fac6:	1c0a      	adds	r2, r1, #0
   2fac8:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2faca:	68fb      	ldr	r3, [r7, #12]
   2facc:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2face:	2300      	movs	r3, #0
   2fad0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2fad2:	2300      	movs	r3, #0
   2fad4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2fad6:	2300      	movs	r3, #0
   2fad8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2fada:	2300      	movs	r3, #0
   2fadc:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2fade:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fae2:	0011      	movs	r1, r2
   2fae4:	0018      	movs	r0, r3
   2fae6:	4b41      	ldr	r3, [pc, #260]	; (2fbec <MQTTSerialize_subscribe+0x138>)
   2fae8:	4798      	blx	r3
   2faea:	0003      	movs	r3, r0
   2faec:	61fb      	str	r3, [r7, #28]
   2faee:	69fb      	ldr	r3, [r7, #28]
   2faf0:	0018      	movs	r0, r3
   2faf2:	4b3f      	ldr	r3, [pc, #252]	; (2fbf0 <MQTTSerialize_subscribe+0x13c>)
   2faf4:	4798      	blx	r3
   2faf6:	0002      	movs	r2, r0
   2faf8:	68bb      	ldr	r3, [r7, #8]
   2fafa:	429a      	cmp	r2, r3
   2fafc:	dd03      	ble.n	2fb06 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fafe:	2302      	movs	r3, #2
   2fb00:	425b      	negs	r3, r3
   2fb02:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fb04:	e06c      	b.n	2fbe0 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2fb06:	2314      	movs	r3, #20
   2fb08:	18fb      	adds	r3, r7, r3
   2fb0a:	2200      	movs	r2, #0
   2fb0c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2fb0e:	2314      	movs	r3, #20
   2fb10:	18fb      	adds	r3, r7, r3
   2fb12:	781a      	ldrb	r2, [r3, #0]
   2fb14:	210f      	movs	r1, #15
   2fb16:	400a      	ands	r2, r1
   2fb18:	1c11      	adds	r1, r2, #0
   2fb1a:	2280      	movs	r2, #128	; 0x80
   2fb1c:	4252      	negs	r2, r2
   2fb1e:	430a      	orrs	r2, r1
   2fb20:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fb22:	1dfb      	adds	r3, r7, #7
   2fb24:	781b      	ldrb	r3, [r3, #0]
   2fb26:	2201      	movs	r2, #1
   2fb28:	4013      	ands	r3, r2
   2fb2a:	b2da      	uxtb	r2, r3
   2fb2c:	2314      	movs	r3, #20
   2fb2e:	18fb      	adds	r3, r7, r3
   2fb30:	2101      	movs	r1, #1
   2fb32:	400a      	ands	r2, r1
   2fb34:	00d0      	lsls	r0, r2, #3
   2fb36:	781a      	ldrb	r2, [r3, #0]
   2fb38:	2108      	movs	r1, #8
   2fb3a:	438a      	bics	r2, r1
   2fb3c:	1c11      	adds	r1, r2, #0
   2fb3e:	1c02      	adds	r2, r0, #0
   2fb40:	430a      	orrs	r2, r1
   2fb42:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2fb44:	2314      	movs	r3, #20
   2fb46:	18fb      	adds	r3, r7, r3
   2fb48:	781a      	ldrb	r2, [r3, #0]
   2fb4a:	2106      	movs	r1, #6
   2fb4c:	438a      	bics	r2, r1
   2fb4e:	1c11      	adds	r1, r2, #0
   2fb50:	2202      	movs	r2, #2
   2fb52:	430a      	orrs	r2, r1
   2fb54:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fb56:	2314      	movs	r3, #20
   2fb58:	18fb      	adds	r3, r7, r3
   2fb5a:	781a      	ldrb	r2, [r3, #0]
   2fb5c:	2318      	movs	r3, #24
   2fb5e:	18fb      	adds	r3, r7, r3
   2fb60:	0011      	movs	r1, r2
   2fb62:	0018      	movs	r0, r3
   2fb64:	4b23      	ldr	r3, [pc, #140]	; (2fbf4 <MQTTSerialize_subscribe+0x140>)
   2fb66:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fb68:	69bb      	ldr	r3, [r7, #24]
   2fb6a:	69fa      	ldr	r2, [r7, #28]
   2fb6c:	0011      	movs	r1, r2
   2fb6e:	0018      	movs	r0, r3
   2fb70:	4b21      	ldr	r3, [pc, #132]	; (2fbf8 <MQTTSerialize_subscribe+0x144>)
   2fb72:	4798      	blx	r3
   2fb74:	0002      	movs	r2, r0
   2fb76:	69bb      	ldr	r3, [r7, #24]
   2fb78:	189b      	adds	r3, r3, r2
   2fb7a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2fb7c:	1d3b      	adds	r3, r7, #4
   2fb7e:	881a      	ldrh	r2, [r3, #0]
   2fb80:	2318      	movs	r3, #24
   2fb82:	18fb      	adds	r3, r7, r3
   2fb84:	0011      	movs	r1, r2
   2fb86:	0018      	movs	r0, r3
   2fb88:	4b1c      	ldr	r3, [pc, #112]	; (2fbfc <MQTTSerialize_subscribe+0x148>)
   2fb8a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2fb8c:	2300      	movs	r3, #0
   2fb8e:	623b      	str	r3, [r7, #32]
   2fb90:	e01d      	b.n	2fbce <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2fb92:	6a3a      	ldr	r2, [r7, #32]
   2fb94:	0013      	movs	r3, r2
   2fb96:	005b      	lsls	r3, r3, #1
   2fb98:	189b      	adds	r3, r3, r2
   2fb9a:	009b      	lsls	r3, r3, #2
   2fb9c:	001a      	movs	r2, r3
   2fb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fba0:	189b      	adds	r3, r3, r2
   2fba2:	2218      	movs	r2, #24
   2fba4:	18b8      	adds	r0, r7, r2
   2fba6:	6819      	ldr	r1, [r3, #0]
   2fba8:	685a      	ldr	r2, [r3, #4]
   2fbaa:	689b      	ldr	r3, [r3, #8]
   2fbac:	4c14      	ldr	r4, [pc, #80]	; (2fc00 <MQTTSerialize_subscribe+0x14c>)
   2fbae:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2fbb0:	6a3b      	ldr	r3, [r7, #32]
   2fbb2:	009b      	lsls	r3, r3, #2
   2fbb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2fbb6:	18d3      	adds	r3, r2, r3
   2fbb8:	681b      	ldr	r3, [r3, #0]
   2fbba:	b2da      	uxtb	r2, r3
   2fbbc:	2318      	movs	r3, #24
   2fbbe:	18fb      	adds	r3, r7, r3
   2fbc0:	0011      	movs	r1, r2
   2fbc2:	0018      	movs	r0, r3
   2fbc4:	4b0b      	ldr	r3, [pc, #44]	; (2fbf4 <MQTTSerialize_subscribe+0x140>)
   2fbc6:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2fbc8:	6a3b      	ldr	r3, [r7, #32]
   2fbca:	3301      	adds	r3, #1
   2fbcc:	623b      	str	r3, [r7, #32]
   2fbce:	6a3a      	ldr	r2, [r7, #32]
   2fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fbd2:	429a      	cmp	r2, r3
   2fbd4:	dbdd      	blt.n	2fb92 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2fbd6:	69bb      	ldr	r3, [r7, #24]
   2fbd8:	001a      	movs	r2, r3
   2fbda:	68fb      	ldr	r3, [r7, #12]
   2fbdc:	1ad3      	subs	r3, r2, r3
   2fbde:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fbe2:	0018      	movs	r0, r3
   2fbe4:	46bd      	mov	sp, r7
   2fbe6:	b00b      	add	sp, #44	; 0x2c
   2fbe8:	bd90      	pop	{r4, r7, pc}
   2fbea:	46c0      	nop			; (mov r8, r8)
   2fbec:	0002fa61 	.word	0x0002fa61
   2fbf0:	0002f425 	.word	0x0002f425
   2fbf4:	0002f547 	.word	0x0002f547
   2fbf8:	0002f32d 	.word	0x0002f32d
   2fbfc:	0002f571 	.word	0x0002f571
   2fc00:	0002f619 	.word	0x0002f619

0002fc04 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2fc04:	b590      	push	{r4, r7, lr}
   2fc06:	b08b      	sub	sp, #44	; 0x2c
   2fc08:	af00      	add	r7, sp, #0
   2fc0a:	60f8      	str	r0, [r7, #12]
   2fc0c:	60b9      	str	r1, [r7, #8]
   2fc0e:	607a      	str	r2, [r7, #4]
   2fc10:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fc12:	2300      	movs	r3, #0
   2fc14:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fc18:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fc1a:	2300      	movs	r3, #0
   2fc1c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fc1e:	2300      	movs	r3, #0
   2fc20:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fc22:	2318      	movs	r3, #24
   2fc24:	18fb      	adds	r3, r7, r3
   2fc26:	0018      	movs	r0, r3
   2fc28:	4b2c      	ldr	r3, [pc, #176]	; (2fcdc <MQTTDeserialize_suback+0xd8>)
   2fc2a:	4798      	blx	r3
   2fc2c:	0003      	movs	r3, r0
   2fc2e:	001a      	movs	r2, r3
   2fc30:	231c      	movs	r3, #28
   2fc32:	18fb      	adds	r3, r7, r3
   2fc34:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2fc36:	231c      	movs	r3, #28
   2fc38:	18fb      	adds	r3, r7, r3
   2fc3a:	781b      	ldrb	r3, [r3, #0]
   2fc3c:	220f      	movs	r2, #15
   2fc3e:	4393      	bics	r3, r2
   2fc40:	b2db      	uxtb	r3, r3
   2fc42:	2b90      	cmp	r3, #144	; 0x90
   2fc44:	d142      	bne.n	2fccc <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fc46:	69bb      	ldr	r3, [r7, #24]
   2fc48:	2214      	movs	r2, #20
   2fc4a:	18ba      	adds	r2, r7, r2
   2fc4c:	0011      	movs	r1, r2
   2fc4e:	0018      	movs	r0, r3
   2fc50:	4b23      	ldr	r3, [pc, #140]	; (2fce0 <MQTTDeserialize_suback+0xdc>)
   2fc52:	4798      	blx	r3
   2fc54:	0003      	movs	r3, r0
   2fc56:	627b      	str	r3, [r7, #36]	; 0x24
   2fc58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fc5a:	69bb      	ldr	r3, [r7, #24]
   2fc5c:	189b      	adds	r3, r3, r2
   2fc5e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fc60:	69bb      	ldr	r3, [r7, #24]
   2fc62:	697a      	ldr	r2, [r7, #20]
   2fc64:	189b      	adds	r3, r3, r2
   2fc66:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fc68:	6a3b      	ldr	r3, [r7, #32]
   2fc6a:	69ba      	ldr	r2, [r7, #24]
   2fc6c:	1a9b      	subs	r3, r3, r2
   2fc6e:	2b01      	cmp	r3, #1
   2fc70:	dd2e      	ble.n	2fcd0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2fc72:	2318      	movs	r3, #24
   2fc74:	18fb      	adds	r3, r7, r3
   2fc76:	0018      	movs	r0, r3
   2fc78:	4b1a      	ldr	r3, [pc, #104]	; (2fce4 <MQTTDeserialize_suback+0xe0>)
   2fc7a:	4798      	blx	r3
   2fc7c:	0003      	movs	r3, r0
   2fc7e:	b29a      	uxth	r2, r3
   2fc80:	68fb      	ldr	r3, [r7, #12]
   2fc82:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2fc84:	687b      	ldr	r3, [r7, #4]
   2fc86:	2200      	movs	r2, #0
   2fc88:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2fc8a:	e018      	b.n	2fcbe <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2fc8c:	687b      	ldr	r3, [r7, #4]
   2fc8e:	681a      	ldr	r2, [r3, #0]
   2fc90:	68bb      	ldr	r3, [r7, #8]
   2fc92:	429a      	cmp	r2, r3
   2fc94:	dd03      	ble.n	2fc9e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2fc96:	2301      	movs	r3, #1
   2fc98:	425b      	negs	r3, r3
   2fc9a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2fc9c:	e019      	b.n	2fcd2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2fc9e:	687b      	ldr	r3, [r7, #4]
   2fca0:	681a      	ldr	r2, [r3, #0]
   2fca2:	1c51      	adds	r1, r2, #1
   2fca4:	687b      	ldr	r3, [r7, #4]
   2fca6:	6019      	str	r1, [r3, #0]
   2fca8:	0013      	movs	r3, r2
   2fcaa:	009b      	lsls	r3, r3, #2
   2fcac:	683a      	ldr	r2, [r7, #0]
   2fcae:	18d4      	adds	r4, r2, r3
   2fcb0:	2318      	movs	r3, #24
   2fcb2:	18fb      	adds	r3, r7, r3
   2fcb4:	0018      	movs	r0, r3
   2fcb6:	4b09      	ldr	r3, [pc, #36]	; (2fcdc <MQTTDeserialize_suback+0xd8>)
   2fcb8:	4798      	blx	r3
   2fcba:	0003      	movs	r3, r0
   2fcbc:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2fcbe:	69ba      	ldr	r2, [r7, #24]
   2fcc0:	6a3b      	ldr	r3, [r7, #32]
   2fcc2:	429a      	cmp	r2, r3
   2fcc4:	d3e2      	bcc.n	2fc8c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2fcc6:	2301      	movs	r3, #1
   2fcc8:	627b      	str	r3, [r7, #36]	; 0x24
   2fcca:	e002      	b.n	2fcd2 <MQTTDeserialize_suback+0xce>
		goto exit;
   2fccc:	46c0      	nop			; (mov r8, r8)
   2fcce:	e000      	b.n	2fcd2 <MQTTDeserialize_suback+0xce>
		goto exit;
   2fcd0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fcd4:	0018      	movs	r0, r3
   2fcd6:	46bd      	mov	sp, r7
   2fcd8:	b00b      	add	sp, #44	; 0x2c
   2fcda:	bd90      	pop	{r4, r7, pc}
   2fcdc:	0002f51b 	.word	0x0002f51b
   2fce0:	0002f4b5 	.word	0x0002f4b5
   2fce4:	0002f4e9 	.word	0x0002f4e9

0002fce8 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2fce8:	b580      	push	{r7, lr}
   2fcea:	b082      	sub	sp, #8
   2fcec:	af00      	add	r7, sp, #0
   2fcee:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2fcf0:	687b      	ldr	r3, [r7, #4]
   2fcf2:	2250      	movs	r2, #80	; 0x50
   2fcf4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fcf6:	687b      	ldr	r3, [r7, #4]
   2fcf8:	2200      	movs	r2, #0
   2fcfa:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2fcfc:	687b      	ldr	r3, [r7, #4]
   2fcfe:	4a0b      	ldr	r2, [pc, #44]	; (2fd2c <http_client_get_config_defaults+0x44>)
   2fd00:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2fd02:	687b      	ldr	r3, [r7, #4]
   2fd04:	2200      	movs	r2, #0
   2fd06:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2fd08:	687b      	ldr	r3, [r7, #4]
   2fd0a:	2200      	movs	r2, #0
   2fd0c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2fd0e:	687b      	ldr	r3, [r7, #4]
   2fd10:	2280      	movs	r2, #128	; 0x80
   2fd12:	0052      	lsls	r2, r2, #1
   2fd14:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2fd16:	687b      	ldr	r3, [r7, #4]
   2fd18:	2252      	movs	r2, #82	; 0x52
   2fd1a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2fd1c:	687b      	ldr	r3, [r7, #4]
   2fd1e:	4a04      	ldr	r2, [pc, #16]	; (2fd30 <http_client_get_config_defaults+0x48>)
   2fd20:	619a      	str	r2, [r3, #24]
}
   2fd22:	46c0      	nop			; (mov r8, r8)
   2fd24:	46bd      	mov	sp, r7
   2fd26:	b002      	add	sp, #8
   2fd28:	bd80      	pop	{r7, pc}
   2fd2a:	46c0      	nop			; (mov r8, r8)
   2fd2c:	00004e20 	.word	0x00004e20
   2fd30:	00039708 	.word	0x00039708

0002fd34 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2fd34:	b590      	push	{r4, r7, lr}
   2fd36:	b083      	sub	sp, #12
   2fd38:	af00      	add	r7, sp, #0
   2fd3a:	6078      	str	r0, [r7, #4]
   2fd3c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2fd3e:	687b      	ldr	r3, [r7, #4]
   2fd40:	2b00      	cmp	r3, #0
   2fd42:	d002      	beq.n	2fd4a <http_client_init+0x16>
   2fd44:	683b      	ldr	r3, [r7, #0]
   2fd46:	2b00      	cmp	r3, #0
   2fd48:	d102      	bne.n	2fd50 <http_client_init+0x1c>
		return -EINVAL;
   2fd4a:	2316      	movs	r3, #22
   2fd4c:	425b      	negs	r3, r3
   2fd4e:	e058      	b.n	2fe02 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2fd50:	683b      	ldr	r3, [r7, #0]
   2fd52:	691b      	ldr	r3, [r3, #16]
   2fd54:	2b00      	cmp	r3, #0
   2fd56:	d102      	bne.n	2fd5e <http_client_init+0x2a>
		return -EINVAL;
   2fd58:	2316      	movs	r3, #22
   2fd5a:	425b      	negs	r3, r3
   2fd5c:	e051      	b.n	2fe02 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2fd5e:	683b      	ldr	r3, [r7, #0]
   2fd60:	685b      	ldr	r3, [r3, #4]
   2fd62:	2b00      	cmp	r3, #0
   2fd64:	d102      	bne.n	2fd6c <http_client_init+0x38>
		return -EINVAL;
   2fd66:	2316      	movs	r3, #22
   2fd68:	425b      	negs	r3, r3
   2fd6a:	e04a      	b.n	2fe02 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2fd6c:	683b      	ldr	r3, [r7, #0]
   2fd6e:	695b      	ldr	r3, [r3, #20]
   2fd70:	2b51      	cmp	r3, #81	; 0x51
   2fd72:	d802      	bhi.n	2fd7a <http_client_init+0x46>
		return -EINVAL;
   2fd74:	2316      	movs	r3, #22
   2fd76:	425b      	negs	r3, r3
   2fd78:	e043      	b.n	2fe02 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2fd7a:	687b      	ldr	r3, [r7, #4]
   2fd7c:	22e8      	movs	r2, #232	; 0xe8
   2fd7e:	2100      	movs	r1, #0
   2fd80:	0018      	movs	r0, r3
   2fd82:	4b22      	ldr	r3, [pc, #136]	; (2fe0c <http_client_init+0xd8>)
   2fd84:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2fd86:	687b      	ldr	r3, [r7, #4]
   2fd88:	3350      	adds	r3, #80	; 0x50
   2fd8a:	6839      	ldr	r1, [r7, #0]
   2fd8c:	221c      	movs	r2, #28
   2fd8e:	0018      	movs	r0, r3
   2fd90:	4b1f      	ldr	r3, [pc, #124]	; (2fe10 <http_client_init+0xdc>)
   2fd92:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2fd94:	687b      	ldr	r3, [r7, #4]
   2fd96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fd98:	2b00      	cmp	r3, #0
   2fd9a:	d115      	bne.n	2fdc8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2fd9c:	683b      	ldr	r3, [r7, #0]
   2fd9e:	691b      	ldr	r3, [r3, #16]
   2fda0:	0018      	movs	r0, r3
   2fda2:	4b1c      	ldr	r3, [pc, #112]	; (2fe14 <http_client_init+0xe0>)
   2fda4:	4798      	blx	r3
   2fda6:	0003      	movs	r3, r0
   2fda8:	001a      	movs	r2, r3
   2fdaa:	687b      	ldr	r3, [r7, #4]
   2fdac:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2fdae:	687b      	ldr	r3, [r7, #4]
   2fdb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2fdb2:	2b00      	cmp	r3, #0
   2fdb4:	d102      	bne.n	2fdbc <http_client_init+0x88>
			return -ENOMEM;
   2fdb6:	230c      	movs	r3, #12
   2fdb8:	425b      	negs	r3, r3
   2fdba:	e022      	b.n	2fe02 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2fdbc:	687b      	ldr	r3, [r7, #4]
   2fdbe:	2241      	movs	r2, #65	; 0x41
   2fdc0:	5c99      	ldrb	r1, [r3, r2]
   2fdc2:	2004      	movs	r0, #4
   2fdc4:	4301      	orrs	r1, r0
   2fdc6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2fdc8:	683b      	ldr	r3, [r7, #0]
   2fdca:	891b      	ldrh	r3, [r3, #8]
   2fdcc:	2b00      	cmp	r3, #0
   2fdce:	d010      	beq.n	2fdf2 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2fdd0:	683b      	ldr	r3, [r7, #0]
   2fdd2:	6858      	ldr	r0, [r3, #4]
   2fdd4:	687a      	ldr	r2, [r7, #4]
   2fdd6:	4910      	ldr	r1, [pc, #64]	; (2fe18 <http_client_init+0xe4>)
   2fdd8:	2300      	movs	r3, #0
   2fdda:	4c10      	ldr	r4, [pc, #64]	; (2fe1c <http_client_init+0xe8>)
   2fddc:	47a0      	blx	r4
   2fdde:	0002      	movs	r2, r0
   2fde0:	687b      	ldr	r3, [r7, #4]
   2fde2:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2fde4:	687b      	ldr	r3, [r7, #4]
   2fde6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fde8:	2b00      	cmp	r3, #0
   2fdea:	da02      	bge.n	2fdf2 <http_client_init+0xbe>
			return -ENOSPC;
   2fdec:	231c      	movs	r3, #28
   2fdee:	425b      	negs	r3, r3
   2fdf0:	e007      	b.n	2fe02 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2fdf2:	687b      	ldr	r3, [r7, #4]
   2fdf4:	2200      	movs	r2, #0
   2fdf6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2fdf8:	687b      	ldr	r3, [r7, #4]
   2fdfa:	22d8      	movs	r2, #216	; 0xd8
   2fdfc:	2100      	movs	r1, #0
   2fdfe:	5099      	str	r1, [r3, r2]

	return 0;
   2fe00:	2300      	movs	r3, #0
}
   2fe02:	0018      	movs	r0, r3
   2fe04:	46bd      	mov	sp, r7
   2fe06:	b003      	add	sp, #12
   2fe08:	bd90      	pop	{r4, r7, pc}
   2fe0a:	46c0      	nop			; (mov r8, r8)
   2fe0c:	0003460f 	.word	0x0003460f
   2fe10:	000345d9 	.word	0x000345d9
   2fe14:	000345b1 	.word	0x000345b1
   2fe18:	000300e5 	.word	0x000300e5
   2fe1c:	00031789 	.word	0x00031789

0002fe20 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2fe20:	b580      	push	{r7, lr}
   2fe22:	b082      	sub	sp, #8
   2fe24:	af00      	add	r7, sp, #0
   2fe26:	6078      	str	r0, [r7, #4]
   2fe28:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2fe2a:	687b      	ldr	r3, [r7, #4]
   2fe2c:	2b00      	cmp	r3, #0
   2fe2e:	d102      	bne.n	2fe36 <http_client_register_callback+0x16>
		return -EINVAL;
   2fe30:	2316      	movs	r3, #22
   2fe32:	425b      	negs	r3, r3
   2fe34:	e003      	b.n	2fe3e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2fe36:	687b      	ldr	r3, [r7, #4]
   2fe38:	683a      	ldr	r2, [r7, #0]
   2fe3a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2fe3c:	2300      	movs	r3, #0
}
   2fe3e:	0018      	movs	r0, r3
   2fe40:	46bd      	mov	sp, r7
   2fe42:	b002      	add	sp, #8
   2fe44:	bd80      	pop	{r7, pc}
	...

0002fe48 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2fe48:	b580      	push	{r7, lr}
   2fe4a:	b082      	sub	sp, #8
   2fe4c:	af00      	add	r7, sp, #0
   2fe4e:	6078      	str	r0, [r7, #4]
	switch (err) {
   2fe50:	687b      	ldr	r3, [r7, #4]
   2fe52:	330e      	adds	r3, #14
   2fe54:	2b0e      	cmp	r3, #14
   2fe56:	d825      	bhi.n	2fea4 <_hwerr_to_stderr+0x5c>
   2fe58:	009a      	lsls	r2, r3, #2
   2fe5a:	4b18      	ldr	r3, [pc, #96]	; (2febc <_hwerr_to_stderr+0x74>)
   2fe5c:	18d3      	adds	r3, r2, r3
   2fe5e:	681b      	ldr	r3, [r3, #0]
   2fe60:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2fe62:	2305      	movs	r3, #5
   2fe64:	425b      	negs	r3, r3
   2fe66:	e024      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2fe68:	2302      	movs	r3, #2
   2fe6a:	425b      	negs	r3, r3
   2fe6c:	e021      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2fe6e:	2370      	movs	r3, #112	; 0x70
   2fe70:	425b      	negs	r3, r3
   2fe72:	e01e      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2fe74:	230c      	movs	r3, #12
   2fe76:	425b      	negs	r3, r3
   2fe78:	e01b      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2fe7a:	2316      	movs	r3, #22
   2fe7c:	425b      	negs	r3, r3
   2fe7e:	e018      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2fe80:	230c      	movs	r3, #12
   2fe82:	425b      	negs	r3, r3
   2fe84:	e015      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2fe86:	2305      	movs	r3, #5
   2fe88:	425b      	negs	r3, r3
   2fe8a:	e012      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2fe8c:	2379      	movs	r3, #121	; 0x79
   2fe8e:	425b      	negs	r3, r3
   2fe90:	e00f      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2fe92:	2368      	movs	r3, #104	; 0x68
   2fe94:	425b      	negs	r3, r3
   2fe96:	e00c      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2fe98:	230b      	movs	r3, #11
   2fe9a:	425b      	negs	r3, r3
   2fe9c:	e009      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2fe9e:	2310      	movs	r3, #16
   2fea0:	425b      	negs	r3, r3
   2fea2:	e006      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2fea4:	687b      	ldr	r3, [r7, #4]
   2fea6:	2b00      	cmp	r3, #0
   2fea8:	da02      	bge.n	2feb0 <_hwerr_to_stderr+0x68>
				return -EIO;
   2feaa:	2305      	movs	r3, #5
   2feac:	425b      	negs	r3, r3
   2feae:	e000      	b.n	2feb2 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2feb0:	2300      	movs	r3, #0
	}
}
   2feb2:	0018      	movs	r0, r3
   2feb4:	46bd      	mov	sp, r7
   2feb6:	b002      	add	sp, #8
   2feb8:	bd80      	pop	{r7, pc}
   2feba:	46c0      	nop			; (mov r8, r8)
   2febc:	00039844 	.word	0x00039844

0002fec0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2fec0:	b580      	push	{r7, lr}
   2fec2:	b08a      	sub	sp, #40	; 0x28
   2fec4:	af00      	add	r7, sp, #0
   2fec6:	603a      	str	r2, [r7, #0]
   2fec8:	1dfb      	adds	r3, r7, #7
   2feca:	1c02      	adds	r2, r0, #0
   2fecc:	701a      	strb	r2, [r3, #0]
   2fece:	1dbb      	adds	r3, r7, #6
   2fed0:	1c0a      	adds	r2, r1, #0
   2fed2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2fed4:	1dfb      	adds	r3, r7, #7
   2fed6:	2200      	movs	r2, #0
   2fed8:	569a      	ldrsb	r2, [r3, r2]
   2feda:	4b4b      	ldr	r3, [pc, #300]	; (30008 <http_client_socket_event_handler+0x148>)
   2fedc:	0092      	lsls	r2, r2, #2
   2fede:	58d3      	ldr	r3, [r2, r3]
   2fee0:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fee4:	2b00      	cmp	r3, #0
   2fee6:	d100      	bne.n	2feea <http_client_socket_event_handler+0x2a>
   2fee8:	e08a      	b.n	30000 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2feea:	1dbb      	adds	r3, r7, #6
   2feec:	781b      	ldrb	r3, [r3, #0]
   2feee:	2b06      	cmp	r3, #6
   2fef0:	d040      	beq.n	2ff74 <http_client_socket_event_handler+0xb4>
   2fef2:	2b07      	cmp	r3, #7
   2fef4:	d060      	beq.n	2ffb8 <http_client_socket_event_handler+0xf8>
   2fef6:	2b05      	cmp	r3, #5
   2fef8:	d000      	beq.n	2fefc <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2fefa:	e082      	b.n	30002 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2fefc:	683b      	ldr	r3, [r7, #0]
   2fefe:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2ff00:	6a3b      	ldr	r3, [r7, #32]
   2ff02:	785b      	ldrb	r3, [r3, #1]
   2ff04:	b25b      	sxtb	r3, r3
   2ff06:	001a      	movs	r2, r3
   2ff08:	230c      	movs	r3, #12
   2ff0a:	18fb      	adds	r3, r7, r3
   2ff0c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2ff0e:	6a3b      	ldr	r3, [r7, #32]
   2ff10:	785b      	ldrb	r3, [r3, #1]
   2ff12:	b25b      	sxtb	r3, r3
   2ff14:	2b00      	cmp	r3, #0
   2ff16:	da0c      	bge.n	2ff32 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2ff18:	6a3b      	ldr	r3, [r7, #32]
   2ff1a:	785b      	ldrb	r3, [r3, #1]
   2ff1c:	b25b      	sxtb	r3, r3
   2ff1e:	0018      	movs	r0, r3
   2ff20:	4b3a      	ldr	r3, [pc, #232]	; (3000c <http_client_socket_event_handler+0x14c>)
   2ff22:	4798      	blx	r3
   2ff24:	0002      	movs	r2, r0
   2ff26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff28:	0011      	movs	r1, r2
   2ff2a:	0018      	movs	r0, r3
   2ff2c:	4b38      	ldr	r3, [pc, #224]	; (30010 <http_client_socket_event_handler+0x150>)
   2ff2e:	4798      	blx	r3
    	break;
   2ff30:	e067      	b.n	30002 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2ff32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ff36:	2b00      	cmp	r3, #0
   2ff38:	d006      	beq.n	2ff48 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ff3e:	220c      	movs	r2, #12
   2ff40:	18ba      	adds	r2, r7, r2
   2ff42:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2ff44:	2100      	movs	r1, #0
   2ff46:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff4a:	2203      	movs	r2, #3
   2ff4c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff50:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff54:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff58:	2258      	movs	r2, #88	; 0x58
   2ff5a:	5a9b      	ldrh	r3, [r3, r2]
   2ff5c:	001a      	movs	r2, r3
   2ff5e:	4b2d      	ldr	r3, [pc, #180]	; (30014 <http_client_socket_event_handler+0x154>)
   2ff60:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff64:	0018      	movs	r0, r3
   2ff66:	4b2c      	ldr	r3, [pc, #176]	; (30018 <http_client_socket_event_handler+0x158>)
   2ff68:	4798      	blx	r3
			_http_client_request(module);
   2ff6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff6c:	0018      	movs	r0, r3
   2ff6e:	4b2b      	ldr	r3, [pc, #172]	; (3001c <http_client_socket_event_handler+0x15c>)
   2ff70:	4798      	blx	r3
    	break;
   2ff72:	e046      	b.n	30002 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2ff74:	683b      	ldr	r3, [r7, #0]
   2ff76:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2ff78:	69fb      	ldr	r3, [r7, #28]
   2ff7a:	2204      	movs	r2, #4
   2ff7c:	5e9b      	ldrsh	r3, [r3, r2]
   2ff7e:	2b00      	cmp	r3, #0
   2ff80:	dd09      	ble.n	2ff96 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2ff82:	69fb      	ldr	r3, [r7, #28]
   2ff84:	2204      	movs	r2, #4
   2ff86:	5e9b      	ldrsh	r3, [r3, r2]
   2ff88:	001a      	movs	r2, r3
   2ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ff8c:	0011      	movs	r1, r2
   2ff8e:	0018      	movs	r0, r3
   2ff90:	4b23      	ldr	r3, [pc, #140]	; (30020 <http_client_socket_event_handler+0x160>)
   2ff92:	4798      	blx	r3
   2ff94:	e00b      	b.n	2ffae <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2ff96:	69fb      	ldr	r3, [r7, #28]
   2ff98:	2204      	movs	r2, #4
   2ff9a:	5e9b      	ldrsh	r3, [r3, r2]
   2ff9c:	0018      	movs	r0, r3
   2ff9e:	4b1b      	ldr	r3, [pc, #108]	; (3000c <http_client_socket_event_handler+0x14c>)
   2ffa0:	4798      	blx	r3
   2ffa2:	0002      	movs	r2, r0
   2ffa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffa6:	0011      	movs	r1, r2
   2ffa8:	0018      	movs	r0, r3
   2ffaa:	4b19      	ldr	r3, [pc, #100]	; (30010 <http_client_socket_event_handler+0x150>)
   2ffac:	4798      	blx	r3
		_http_client_recv_packet(module);
   2ffae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffb0:	0018      	movs	r0, r3
   2ffb2:	4b19      	ldr	r3, [pc, #100]	; (30018 <http_client_socket_event_handler+0x158>)
   2ffb4:	4798      	blx	r3
		break;
   2ffb6:	e024      	b.n	30002 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2ffb8:	231a      	movs	r3, #26
   2ffba:	18fb      	adds	r3, r7, r3
   2ffbc:	683a      	ldr	r2, [r7, #0]
   2ffbe:	8812      	ldrh	r2, [r2, #0]
   2ffc0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2ffc2:	231a      	movs	r3, #26
   2ffc4:	18fb      	adds	r3, r7, r3
   2ffc6:	2200      	movs	r2, #0
   2ffc8:	5e9b      	ldrsh	r3, [r3, r2]
   2ffca:	2b00      	cmp	r3, #0
   2ffcc:	da0d      	bge.n	2ffea <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2ffce:	231a      	movs	r3, #26
   2ffd0:	18fb      	adds	r3, r7, r3
   2ffd2:	2200      	movs	r2, #0
   2ffd4:	5e9b      	ldrsh	r3, [r3, r2]
   2ffd6:	0018      	movs	r0, r3
   2ffd8:	4b0c      	ldr	r3, [pc, #48]	; (3000c <http_client_socket_event_handler+0x14c>)
   2ffda:	4798      	blx	r3
   2ffdc:	0002      	movs	r2, r0
   2ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffe0:	0011      	movs	r1, r2
   2ffe2:	0018      	movs	r0, r3
   2ffe4:	4b0a      	ldr	r3, [pc, #40]	; (30010 <http_client_socket_event_handler+0x150>)
   2ffe6:	4798      	blx	r3
   2ffe8:	e003      	b.n	2fff2 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ffec:	0018      	movs	r0, r3
   2ffee:	4b0b      	ldr	r3, [pc, #44]	; (3001c <http_client_socket_event_handler+0x15c>)
   2fff0:	4798      	blx	r3
		module->sending = 0;
   2fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fff4:	2241      	movs	r2, #65	; 0x41
   2fff6:	5c99      	ldrb	r1, [r3, r2]
   2fff8:	2001      	movs	r0, #1
   2fffa:	4381      	bics	r1, r0
   2fffc:	5499      	strb	r1, [r3, r2]
    	break;
   2fffe:	e000      	b.n	30002 <http_client_socket_event_handler+0x142>
		return;
   30000:	46c0      	nop			; (mov r8, r8)
	}

}
   30002:	46bd      	mov	sp, r7
   30004:	b00a      	add	sp, #40	; 0x28
   30006:	bd80      	pop	{r7, pc}
   30008:	200046c0 	.word	0x200046c0
   3000c:	0002fe49 	.word	0x0002fe49
   30010:	000304bd 	.word	0x000304bd
   30014:	00031819 	.word	0x00031819
   30018:	00030d49 	.word	0x00030d49
   3001c:	00030611 	.word	0x00030611
   30020:	00030dad 	.word	0x00030dad

00030024 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   30024:	b580      	push	{r7, lr}
   30026:	b088      	sub	sp, #32
   30028:	af00      	add	r7, sp, #0
   3002a:	6078      	str	r0, [r7, #4]
   3002c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   3002e:	2300      	movs	r3, #0
   30030:	61fb      	str	r3, [r7, #28]
   30032:	e048      	b.n	300c6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30034:	4b27      	ldr	r3, [pc, #156]	; (300d4 <http_client_socket_resolve_handler+0xb0>)
   30036:	69fa      	ldr	r2, [r7, #28]
   30038:	0092      	lsls	r2, r2, #2
   3003a:	58d3      	ldr	r3, [r2, r3]
   3003c:	2b00      	cmp	r3, #0
   3003e:	d03f      	beq.n	300c0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30040:	4b24      	ldr	r3, [pc, #144]	; (300d4 <http_client_socket_resolve_handler+0xb0>)
   30042:	69fa      	ldr	r2, [r7, #28]
   30044:	0092      	lsls	r2, r2, #2
   30046:	58d3      	ldr	r3, [r2, r3]
   30048:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   3004a:	69bb      	ldr	r3, [r7, #24]
   3004c:	1c5a      	adds	r2, r3, #1
   3004e:	687b      	ldr	r3, [r7, #4]
   30050:	0011      	movs	r1, r2
   30052:	0018      	movs	r0, r3
   30054:	4b20      	ldr	r3, [pc, #128]	; (300d8 <http_client_socket_resolve_handler+0xb4>)
   30056:	4798      	blx	r3
   30058:	1e03      	subs	r3, r0, #0
   3005a:	d131      	bne.n	300c0 <http_client_socket_resolve_handler+0x9c>
   3005c:	69bb      	ldr	r3, [r7, #24]
   3005e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30060:	2b01      	cmp	r3, #1
   30062:	d12d      	bne.n	300c0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30064:	683b      	ldr	r3, [r7, #0]
   30066:	2b00      	cmp	r3, #0
   30068:	d107      	bne.n	3007a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3006a:	2376      	movs	r3, #118	; 0x76
   3006c:	425a      	negs	r2, r3
   3006e:	69bb      	ldr	r3, [r7, #24]
   30070:	0011      	movs	r1, r2
   30072:	0018      	movs	r0, r3
   30074:	4b19      	ldr	r3, [pc, #100]	; (300dc <http_client_socket_resolve_handler+0xb8>)
   30076:	4798      	blx	r3
					return;
   30078:	e028      	b.n	300cc <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3007a:	2308      	movs	r3, #8
   3007c:	18fb      	adds	r3, r7, r3
   3007e:	2202      	movs	r2, #2
   30080:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30082:	69bb      	ldr	r3, [r7, #24]
   30084:	2250      	movs	r2, #80	; 0x50
   30086:	5a9b      	ldrh	r3, [r3, r2]
   30088:	021b      	lsls	r3, r3, #8
   3008a:	b21a      	sxth	r2, r3
   3008c:	69bb      	ldr	r3, [r7, #24]
   3008e:	2150      	movs	r1, #80	; 0x50
   30090:	5a5b      	ldrh	r3, [r3, r1]
   30092:	0a1b      	lsrs	r3, r3, #8
   30094:	b29b      	uxth	r3, r3
   30096:	b21b      	sxth	r3, r3
   30098:	4313      	orrs	r3, r2
   3009a:	b21b      	sxth	r3, r3
   3009c:	b29a      	uxth	r2, r3
   3009e:	2308      	movs	r3, #8
   300a0:	18fb      	adds	r3, r7, r3
   300a2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   300a4:	2308      	movs	r3, #8
   300a6:	18fb      	adds	r3, r7, r3
   300a8:	683a      	ldr	r2, [r7, #0]
   300aa:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   300ac:	69bb      	ldr	r3, [r7, #24]
   300ae:	781b      	ldrb	r3, [r3, #0]
   300b0:	b25b      	sxtb	r3, r3
   300b2:	2208      	movs	r2, #8
   300b4:	18b9      	adds	r1, r7, r2
   300b6:	2210      	movs	r2, #16
   300b8:	0018      	movs	r0, r3
   300ba:	4b09      	ldr	r3, [pc, #36]	; (300e0 <http_client_socket_resolve_handler+0xbc>)
   300bc:	4798      	blx	r3
				return;
   300be:	e005      	b.n	300cc <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   300c0:	69fb      	ldr	r3, [r7, #28]
   300c2:	3301      	adds	r3, #1
   300c4:	61fb      	str	r3, [r7, #28]
   300c6:	69fb      	ldr	r3, [r7, #28]
   300c8:	2b06      	cmp	r3, #6
   300ca:	ddb3      	ble.n	30034 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   300cc:	46bd      	mov	sp, r7
   300ce:	b008      	add	sp, #32
   300d0:	bd80      	pop	{r7, pc}
   300d2:	46c0      	nop			; (mov r8, r8)
   300d4:	200046c0 	.word	0x200046c0
   300d8:	0003494d 	.word	0x0003494d
   300dc:	000304bd 	.word	0x000304bd
   300e0:	000248b5 	.word	0x000248b5

000300e4 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   300e4:	b580      	push	{r7, lr}
   300e6:	b086      	sub	sp, #24
   300e8:	af00      	add	r7, sp, #0
   300ea:	60f8      	str	r0, [r7, #12]
   300ec:	60b9      	str	r1, [r7, #8]
   300ee:	607a      	str	r2, [r7, #4]
   300f0:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   300f2:	687b      	ldr	r3, [r7, #4]
   300f4:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   300f6:	697b      	ldr	r3, [r7, #20]
   300f8:	2b00      	cmp	r3, #0
   300fa:	d007      	beq.n	3010c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   300fc:	233e      	movs	r3, #62	; 0x3e
   300fe:	425a      	negs	r2, r3
   30100:	697b      	ldr	r3, [r7, #20]
   30102:	0011      	movs	r1, r2
   30104:	0018      	movs	r0, r3
   30106:	4b03      	ldr	r3, [pc, #12]	; (30114 <http_client_timer_callback+0x30>)
   30108:	4798      	blx	r3
   3010a:	e000      	b.n	3010e <http_client_timer_callback+0x2a>
		return;
   3010c:	46c0      	nop			; (mov r8, r8)
}
   3010e:	46bd      	mov	sp, r7
   30110:	b006      	add	sp, #24
   30112:	bd80      	pop	{r7, pc}
   30114:	000304bd 	.word	0x000304bd

00030118 <_is_ip>:

static int _is_ip(const char *host)
{
   30118:	b580      	push	{r7, lr}
   3011a:	b084      	sub	sp, #16
   3011c:	af00      	add	r7, sp, #0
   3011e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30120:	2300      	movs	r3, #0
   30122:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30124:	e03a      	b.n	3019c <_is_ip+0x84>
		ch = *host++;
   30126:	687b      	ldr	r3, [r7, #4]
   30128:	1c5a      	adds	r2, r3, #1
   3012a:	607a      	str	r2, [r7, #4]
   3012c:	220b      	movs	r2, #11
   3012e:	18ba      	adds	r2, r7, r2
   30130:	781b      	ldrb	r3, [r3, #0]
   30132:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30134:	230b      	movs	r3, #11
   30136:	18fb      	adds	r3, r7, r3
   30138:	781b      	ldrb	r3, [r3, #0]
   3013a:	2b60      	cmp	r3, #96	; 0x60
   3013c:	d904      	bls.n	30148 <_is_ip+0x30>
   3013e:	230b      	movs	r3, #11
   30140:	18fb      	adds	r3, r7, r3
   30142:	781b      	ldrb	r3, [r3, #0]
   30144:	2b66      	cmp	r3, #102	; 0x66
   30146:	d913      	bls.n	30170 <_is_ip+0x58>
   30148:	230b      	movs	r3, #11
   3014a:	18fb      	adds	r3, r7, r3
   3014c:	781b      	ldrb	r3, [r3, #0]
   3014e:	2b40      	cmp	r3, #64	; 0x40
   30150:	d904      	bls.n	3015c <_is_ip+0x44>
   30152:	230b      	movs	r3, #11
   30154:	18fb      	adds	r3, r7, r3
   30156:	781b      	ldrb	r3, [r3, #0]
   30158:	2b46      	cmp	r3, #70	; 0x46
   3015a:	d909      	bls.n	30170 <_is_ip+0x58>
   3015c:	230b      	movs	r3, #11
   3015e:	18fb      	adds	r3, r7, r3
   30160:	781b      	ldrb	r3, [r3, #0]
   30162:	2b3a      	cmp	r3, #58	; 0x3a
   30164:	d004      	beq.n	30170 <_is_ip+0x58>
   30166:	230b      	movs	r3, #11
   30168:	18fb      	adds	r3, r7, r3
   3016a:	781b      	ldrb	r3, [r3, #0]
   3016c:	2b2f      	cmp	r3, #47	; 0x2f
   3016e:	d102      	bne.n	30176 <_is_ip+0x5e>
			isv6 = 1;
   30170:	2301      	movs	r3, #1
   30172:	60fb      	str	r3, [r7, #12]
   30174:	e012      	b.n	3019c <_is_ip+0x84>
		} else if (ch == '.') {
   30176:	230b      	movs	r3, #11
   30178:	18fb      	adds	r3, r7, r3
   3017a:	781b      	ldrb	r3, [r3, #0]
   3017c:	2b2e      	cmp	r3, #46	; 0x2e
   3017e:	d104      	bne.n	3018a <_is_ip+0x72>
			if (isv6) {
   30180:	68fb      	ldr	r3, [r7, #12]
   30182:	2b00      	cmp	r3, #0
   30184:	d00a      	beq.n	3019c <_is_ip+0x84>
				return 0;
   30186:	2300      	movs	r3, #0
   30188:	e00d      	b.n	301a6 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3018a:	230b      	movs	r3, #11
   3018c:	18fb      	adds	r3, r7, r3
   3018e:	781b      	ldrb	r3, [r3, #0]
   30190:	2230      	movs	r2, #48	; 0x30
   30192:	4013      	ands	r3, r2
   30194:	2b30      	cmp	r3, #48	; 0x30
   30196:	d001      	beq.n	3019c <_is_ip+0x84>
			return 0;
   30198:	2300      	movs	r3, #0
   3019a:	e004      	b.n	301a6 <_is_ip+0x8e>
	while (*host != '\0') {
   3019c:	687b      	ldr	r3, [r7, #4]
   3019e:	781b      	ldrb	r3, [r3, #0]
   301a0:	2b00      	cmp	r3, #0
   301a2:	d1c0      	bne.n	30126 <_is_ip+0xe>
		}
	}
	return 1;
   301a4:	2301      	movs	r3, #1
}
   301a6:	0018      	movs	r0, r3
   301a8:	46bd      	mov	sp, r7
   301aa:	b004      	add	sp, #16
   301ac:	bd80      	pop	{r7, pc}
	...

000301b0 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   301b0:	b5b0      	push	{r4, r5, r7, lr}
   301b2:	b08e      	sub	sp, #56	; 0x38
   301b4:	af00      	add	r7, sp, #0
   301b6:	60f8      	str	r0, [r7, #12]
   301b8:	60b9      	str	r1, [r7, #8]
   301ba:	603b      	str	r3, [r7, #0]
   301bc:	1dfb      	adds	r3, r7, #7
   301be:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   301c0:	2337      	movs	r3, #55	; 0x37
   301c2:	18fb      	adds	r3, r7, r3
   301c4:	2200      	movs	r2, #0
   301c6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   301c8:	2300      	movs	r3, #0
   301ca:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   301cc:	2300      	movs	r3, #0
   301ce:	633b      	str	r3, [r7, #48]	; 0x30
   301d0:	2300      	movs	r3, #0
   301d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   301d4:	2300      	movs	r3, #0
   301d6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   301d8:	68fb      	ldr	r3, [r7, #12]
   301da:	2b00      	cmp	r3, #0
   301dc:	d102      	bne.n	301e4 <http_client_send_request+0x34>
		return -EINVAL;
   301de:	2316      	movs	r3, #22
   301e0:	425b      	negs	r3, r3
   301e2:	e145      	b.n	30470 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   301e4:	68fb      	ldr	r3, [r7, #12]
   301e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   301e8:	2b02      	cmp	r3, #2
   301ea:	d902      	bls.n	301f2 <http_client_send_request+0x42>
		return -EBUSY;
   301ec:	2310      	movs	r3, #16
   301ee:	425b      	negs	r3, r3
   301f0:	e13e      	b.n	30470 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   301f2:	49a1      	ldr	r1, [pc, #644]	; (30478 <http_client_send_request+0x2c8>)
   301f4:	68bb      	ldr	r3, [r7, #8]
   301f6:	2207      	movs	r2, #7
   301f8:	0018      	movs	r0, r3
   301fa:	4ba0      	ldr	r3, [pc, #640]	; (3047c <http_client_send_request+0x2cc>)
   301fc:	4798      	blx	r3
   301fe:	1e03      	subs	r3, r0, #0
   30200:	d102      	bne.n	30208 <http_client_send_request+0x58>
		i = 7;
   30202:	2307      	movs	r3, #7
   30204:	633b      	str	r3, [r7, #48]	; 0x30
   30206:	e009      	b.n	3021c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30208:	499d      	ldr	r1, [pc, #628]	; (30480 <http_client_send_request+0x2d0>)
   3020a:	68bb      	ldr	r3, [r7, #8]
   3020c:	2208      	movs	r2, #8
   3020e:	0018      	movs	r0, r3
   30210:	4b9a      	ldr	r3, [pc, #616]	; (3047c <http_client_send_request+0x2cc>)
   30212:	4798      	blx	r3
   30214:	1e03      	subs	r3, r0, #0
   30216:	d101      	bne.n	3021c <http_client_send_request+0x6c>
		i = 8;
   30218:	2308      	movs	r3, #8
   3021a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   3021c:	68fb      	ldr	r3, [r7, #12]
   3021e:	1c5c      	adds	r4, r3, #1
   30220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30222:	68ba      	ldr	r2, [r7, #8]
   30224:	18d5      	adds	r5, r2, r3
   30226:	68fb      	ldr	r3, [r7, #12]
   30228:	3301      	adds	r3, #1
   3022a:	0018      	movs	r0, r3
   3022c:	4b95      	ldr	r3, [pc, #596]	; (30484 <http_client_send_request+0x2d4>)
   3022e:	4798      	blx	r3
   30230:	0003      	movs	r3, r0
   30232:	001a      	movs	r2, r3
   30234:	0029      	movs	r1, r5
   30236:	0020      	movs	r0, r4
   30238:	4b90      	ldr	r3, [pc, #576]	; (3047c <http_client_send_request+0x2cc>)
   3023a:	4798      	blx	r3
   3023c:	0003      	movs	r3, r0
   3023e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30240:	e00d      	b.n	3025e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   30242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30244:	1c5a      	adds	r2, r3, #1
   30246:	62fa      	str	r2, [r7, #44]	; 0x2c
   30248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   3024a:	68b9      	ldr	r1, [r7, #8]
   3024c:	188a      	adds	r2, r1, r2
   3024e:	7811      	ldrb	r1, [r2, #0]
   30250:	68fa      	ldr	r2, [r7, #12]
   30252:	18d3      	adds	r3, r2, r3
   30254:	1c0a      	adds	r2, r1, #0
   30256:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3025a:	3301      	adds	r3, #1
   3025c:	633b      	str	r3, [r7, #48]	; 0x30
   3025e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30260:	68ba      	ldr	r2, [r7, #8]
   30262:	18d3      	adds	r3, r2, r3
   30264:	781b      	ldrb	r3, [r3, #0]
   30266:	2b00      	cmp	r3, #0
   30268:	d005      	beq.n	30276 <http_client_send_request+0xc6>
   3026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3026c:	68ba      	ldr	r2, [r7, #8]
   3026e:	18d3      	adds	r3, r2, r3
   30270:	781b      	ldrb	r3, [r3, #0]
   30272:	2b2f      	cmp	r3, #47	; 0x2f
   30274:	d1e5      	bne.n	30242 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30276:	68fa      	ldr	r2, [r7, #12]
   30278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3027a:	18d3      	adds	r3, r2, r3
   3027c:	3301      	adds	r3, #1
   3027e:	2200      	movs	r2, #0
   30280:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30284:	68ba      	ldr	r2, [r7, #8]
   30286:	18d3      	adds	r3, r2, r3
   30288:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   3028a:	68fb      	ldr	r3, [r7, #12]
   3028c:	3301      	adds	r3, #1
   3028e:	781b      	ldrb	r3, [r3, #0]
   30290:	2b00      	cmp	r3, #0
   30292:	d102      	bne.n	3029a <http_client_send_request+0xea>
		return -EINVAL;
   30294:	2316      	movs	r3, #22
   30296:	425b      	negs	r3, r3
   30298:	e0ea      	b.n	30470 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   3029a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3029c:	0018      	movs	r0, r3
   3029e:	4b79      	ldr	r3, [pc, #484]	; (30484 <http_client_send_request+0x2d4>)
   302a0:	4798      	blx	r3
   302a2:	0003      	movs	r3, r0
   302a4:	2b3f      	cmp	r3, #63	; 0x3f
   302a6:	d902      	bls.n	302ae <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   302a8:	235b      	movs	r3, #91	; 0x5b
   302aa:	425b      	negs	r3, r3
   302ac:	e0e0      	b.n	30470 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   302ae:	68fb      	ldr	r3, [r7, #12]
   302b0:	22d4      	movs	r2, #212	; 0xd4
   302b2:	589b      	ldr	r3, [r3, r2]
   302b4:	2b00      	cmp	r3, #0
   302b6:	d005      	beq.n	302c4 <http_client_send_request+0x114>
		free(module->req.ext_header);
   302b8:	68fb      	ldr	r3, [r7, #12]
   302ba:	22d4      	movs	r2, #212	; 0xd4
   302bc:	589b      	ldr	r3, [r3, r2]
   302be:	0018      	movs	r0, r3
   302c0:	4b71      	ldr	r3, [pc, #452]	; (30488 <http_client_send_request+0x2d8>)
   302c2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   302c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   302c6:	2b00      	cmp	r3, #0
   302c8:	d010      	beq.n	302ec <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   302ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   302cc:	0018      	movs	r0, r3
   302ce:	4b6f      	ldr	r3, [pc, #444]	; (3048c <http_client_send_request+0x2dc>)
   302d0:	4798      	blx	r3
   302d2:	0003      	movs	r3, r0
   302d4:	0019      	movs	r1, r3
   302d6:	68fb      	ldr	r3, [r7, #12]
   302d8:	22d4      	movs	r2, #212	; 0xd4
   302da:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   302dc:	68fb      	ldr	r3, [r7, #12]
   302de:	22d4      	movs	r2, #212	; 0xd4
   302e0:	589b      	ldr	r3, [r3, r2]
   302e2:	2b00      	cmp	r3, #0
   302e4:	d106      	bne.n	302f4 <http_client_send_request+0x144>
			return -ENOMEM;
   302e6:	230c      	movs	r3, #12
   302e8:	425b      	negs	r3, r3
   302ea:	e0c1      	b.n	30470 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   302ec:	68fb      	ldr	r3, [r7, #12]
   302ee:	22d4      	movs	r2, #212	; 0xd4
   302f0:	2100      	movs	r1, #0
   302f2:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   302f4:	68fb      	ldr	r3, [r7, #12]
   302f6:	2241      	movs	r2, #65	; 0x41
   302f8:	5c99      	ldrb	r1, [r3, r2]
   302fa:	2001      	movs	r0, #1
   302fc:	4381      	bics	r1, r0
   302fe:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30300:	68fb      	ldr	r3, [r7, #12]
   30302:	2200      	movs	r2, #0
   30304:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30306:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30308:	781b      	ldrb	r3, [r3, #0]
   3030a:	2b2f      	cmp	r3, #47	; 0x2f
   3030c:	d107      	bne.n	3031e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   3030e:	68fb      	ldr	r3, [r7, #12]
   30310:	3370      	adds	r3, #112	; 0x70
   30312:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30314:	0011      	movs	r1, r2
   30316:	0018      	movs	r0, r3
   30318:	4b5d      	ldr	r3, [pc, #372]	; (30490 <http_client_send_request+0x2e0>)
   3031a:	4798      	blx	r3
   3031c:	e00f      	b.n	3033e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   3031e:	68fb      	ldr	r3, [r7, #12]
   30320:	2270      	movs	r2, #112	; 0x70
   30322:	212f      	movs	r1, #47	; 0x2f
   30324:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30326:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30328:	781b      	ldrb	r3, [r3, #0]
   3032a:	2b00      	cmp	r3, #0
   3032c:	d007      	beq.n	3033e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   3032e:	68fb      	ldr	r3, [r7, #12]
   30330:	3370      	adds	r3, #112	; 0x70
   30332:	3301      	adds	r3, #1
   30334:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30336:	0011      	movs	r1, r2
   30338:	0018      	movs	r0, r3
   3033a:	4b55      	ldr	r3, [pc, #340]	; (30490 <http_client_send_request+0x2e0>)
   3033c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   3033e:	683b      	ldr	r3, [r7, #0]
   30340:	2b00      	cmp	r3, #0
   30342:	d007      	beq.n	30354 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30344:	68fb      	ldr	r3, [r7, #12]
   30346:	33b0      	adds	r3, #176	; 0xb0
   30348:	6839      	ldr	r1, [r7, #0]
   3034a:	2218      	movs	r2, #24
   3034c:	0018      	movs	r0, r3
   3034e:	4b51      	ldr	r3, [pc, #324]	; (30494 <http_client_send_request+0x2e4>)
   30350:	4798      	blx	r3
   30352:	e006      	b.n	30362 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30354:	68fb      	ldr	r3, [r7, #12]
   30356:	33b0      	adds	r3, #176	; 0xb0
   30358:	2218      	movs	r2, #24
   3035a:	2100      	movs	r1, #0
   3035c:	0018      	movs	r0, r3
   3035e:	4b4e      	ldr	r3, [pc, #312]	; (30498 <http_client_send_request+0x2e8>)
   30360:	4798      	blx	r3
	}

	module->req.method = method;
   30362:	68fb      	ldr	r3, [r7, #12]
   30364:	1dfa      	adds	r2, r7, #7
   30366:	21c8      	movs	r1, #200	; 0xc8
   30368:	7812      	ldrb	r2, [r2, #0]
   3036a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   3036c:	68fb      	ldr	r3, [r7, #12]
   3036e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30370:	2b01      	cmp	r3, #1
   30372:	d003      	beq.n	3037c <http_client_send_request+0x1cc>
   30374:	d316      	bcc.n	303a4 <http_client_send_request+0x1f4>
   30376:	2b02      	cmp	r3, #2
   30378:	d004      	beq.n	30384 <http_client_send_request+0x1d4>
   3037a:	e074      	b.n	30466 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   3037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3037e:	2b00      	cmp	r3, #0
   30380:	d100      	bne.n	30384 <http_client_send_request+0x1d4>
   30382:	e073      	b.n	3046c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30386:	2b00      	cmp	r3, #0
   30388:	d107      	bne.n	3039a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   3038a:	68fb      	ldr	r3, [r7, #12]
   3038c:	2203      	movs	r2, #3
   3038e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30390:	68fb      	ldr	r3, [r7, #12]
   30392:	0018      	movs	r0, r3
   30394:	4b41      	ldr	r3, [pc, #260]	; (3049c <http_client_send_request+0x2ec>)
   30396:	4798      	blx	r3
			break;
   30398:	e069      	b.n	3046e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   3039a:	68fb      	ldr	r3, [r7, #12]
   3039c:	2100      	movs	r1, #0
   3039e:	0018      	movs	r0, r3
   303a0:	4b3f      	ldr	r3, [pc, #252]	; (304a0 <http_client_send_request+0x2f0>)
   303a2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   303a4:	68fb      	ldr	r3, [r7, #12]
   303a6:	2252      	movs	r2, #82	; 0x52
   303a8:	5c9b      	ldrb	r3, [r3, r2]
   303aa:	2b00      	cmp	r3, #0
   303ac:	d007      	beq.n	303be <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   303ae:	2337      	movs	r3, #55	; 0x37
   303b0:	18fb      	adds	r3, r7, r3
   303b2:	2237      	movs	r2, #55	; 0x37
   303b4:	18ba      	adds	r2, r7, r2
   303b6:	7812      	ldrb	r2, [r2, #0]
   303b8:	2101      	movs	r1, #1
   303ba:	430a      	orrs	r2, r1
   303bc:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   303be:	2337      	movs	r3, #55	; 0x37
   303c0:	18fb      	adds	r3, r7, r3
   303c2:	781b      	ldrb	r3, [r3, #0]
   303c4:	001a      	movs	r2, r3
   303c6:	2101      	movs	r1, #1
   303c8:	2002      	movs	r0, #2
   303ca:	4b36      	ldr	r3, [pc, #216]	; (304a4 <http_client_send_request+0x2f4>)
   303cc:	4798      	blx	r3
   303ce:	0003      	movs	r3, r0
   303d0:	001a      	movs	r2, r3
   303d2:	68fb      	ldr	r3, [r7, #12]
   303d4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   303d6:	68fb      	ldr	r3, [r7, #12]
   303d8:	781b      	ldrb	r3, [r3, #0]
   303da:	b25b      	sxtb	r3, r3
   303dc:	2b00      	cmp	r3, #0
   303de:	db3f      	blt.n	30460 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   303e0:	68fb      	ldr	r3, [r7, #12]
   303e2:	781b      	ldrb	r3, [r3, #0]
   303e4:	b25b      	sxtb	r3, r3
   303e6:	001a      	movs	r2, r3
   303e8:	4b2f      	ldr	r3, [pc, #188]	; (304a8 <http_client_send_request+0x2f8>)
   303ea:	0092      	lsls	r2, r2, #2
   303ec:	68f9      	ldr	r1, [r7, #12]
   303ee:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   303f0:	68fb      	ldr	r3, [r7, #12]
   303f2:	3301      	adds	r3, #1
   303f4:	0018      	movs	r0, r3
   303f6:	4b2d      	ldr	r3, [pc, #180]	; (304ac <http_client_send_request+0x2fc>)
   303f8:	4798      	blx	r3
   303fa:	1e03      	subs	r3, r0, #0
   303fc:	d027      	beq.n	3044e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   303fe:	2314      	movs	r3, #20
   30400:	18fb      	adds	r3, r7, r3
   30402:	2202      	movs	r2, #2
   30404:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30406:	68fb      	ldr	r3, [r7, #12]
   30408:	2250      	movs	r2, #80	; 0x50
   3040a:	5a9b      	ldrh	r3, [r3, r2]
   3040c:	021b      	lsls	r3, r3, #8
   3040e:	b21a      	sxth	r2, r3
   30410:	68fb      	ldr	r3, [r7, #12]
   30412:	2150      	movs	r1, #80	; 0x50
   30414:	5a5b      	ldrh	r3, [r3, r1]
   30416:	0a1b      	lsrs	r3, r3, #8
   30418:	b29b      	uxth	r3, r3
   3041a:	b21b      	sxth	r3, r3
   3041c:	4313      	orrs	r3, r2
   3041e:	b21b      	sxth	r3, r3
   30420:	b29a      	uxth	r2, r3
   30422:	2314      	movs	r3, #20
   30424:	18fb      	adds	r3, r7, r3
   30426:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30428:	68fb      	ldr	r3, [r7, #12]
   3042a:	3301      	adds	r3, #1
   3042c:	0018      	movs	r0, r3
   3042e:	4b20      	ldr	r3, [pc, #128]	; (304b0 <http_client_send_request+0x300>)
   30430:	4798      	blx	r3
   30432:	0002      	movs	r2, r0
   30434:	2314      	movs	r3, #20
   30436:	18fb      	adds	r3, r7, r3
   30438:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3043a:	68fb      	ldr	r3, [r7, #12]
   3043c:	781b      	ldrb	r3, [r3, #0]
   3043e:	b25b      	sxtb	r3, r3
   30440:	2214      	movs	r2, #20
   30442:	18b9      	adds	r1, r7, r2
   30444:	2210      	movs	r2, #16
   30446:	0018      	movs	r0, r3
   30448:	4b1a      	ldr	r3, [pc, #104]	; (304b4 <http_client_send_request+0x304>)
   3044a:	4798      	blx	r3
   3044c:	e004      	b.n	30458 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   3044e:	68fb      	ldr	r3, [r7, #12]
   30450:	3301      	adds	r3, #1
   30452:	0018      	movs	r0, r3
   30454:	4b18      	ldr	r3, [pc, #96]	; (304b8 <http_client_send_request+0x308>)
   30456:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30458:	68fb      	ldr	r3, [r7, #12]
   3045a:	2201      	movs	r2, #1
   3045c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   3045e:	e006      	b.n	3046e <http_client_send_request+0x2be>
			return -ENOSPC;
   30460:	231c      	movs	r3, #28
   30462:	425b      	negs	r3, r3
   30464:	e004      	b.n	30470 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30466:	230b      	movs	r3, #11
   30468:	425b      	negs	r3, r3
   3046a:	e001      	b.n	30470 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   3046c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   3046e:	2300      	movs	r3, #0
}
   30470:	0018      	movs	r0, r3
   30472:	46bd      	mov	sp, r7
   30474:	b00e      	add	sp, #56	; 0x38
   30476:	bdb0      	pop	{r4, r5, r7, pc}
   30478:	00039714 	.word	0x00039714
   3047c:	000349b9 	.word	0x000349b9
   30480:	0003971c 	.word	0x0003971c
   30484:	000349ab 	.word	0x000349ab
   30488:	000345c5 	.word	0x000345c5
   3048c:	00034971 	.word	0x00034971
   30490:	00034961 	.word	0x00034961
   30494:	000345d9 	.word	0x000345d9
   30498:	0003460f 	.word	0x0003460f
   3049c:	00030611 	.word	0x00030611
   304a0:	000304bd 	.word	0x000304bd
   304a4:	000246a1 	.word	0x000246a1
   304a8:	200046c0 	.word	0x200046c0
   304ac:	00030119 	.word	0x00030119
   304b0:	00024ded 	.word	0x00024ded
   304b4:	000248b5 	.word	0x000248b5
   304b8:	00024ef5 	.word	0x00024ef5

000304bc <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   304bc:	b580      	push	{r7, lr}
   304be:	b086      	sub	sp, #24
   304c0:	af00      	add	r7, sp, #0
   304c2:	6078      	str	r0, [r7, #4]
   304c4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   304c6:	687b      	ldr	r3, [r7, #4]
   304c8:	22c0      	movs	r2, #192	; 0xc0
   304ca:	589b      	ldr	r3, [r3, r2]
   304cc:	2b00      	cmp	r3, #0
   304ce:	d007      	beq.n	304e0 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   304d0:	687b      	ldr	r3, [r7, #4]
   304d2:	22c0      	movs	r2, #192	; 0xc0
   304d4:	589b      	ldr	r3, [r3, r2]
   304d6:	687a      	ldr	r2, [r7, #4]
   304d8:	21c4      	movs	r1, #196	; 0xc4
   304da:	5852      	ldr	r2, [r2, r1]
   304dc:	0010      	movs	r0, r2
   304de:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   304e0:	687b      	ldr	r3, [r7, #4]
   304e2:	33b0      	adds	r3, #176	; 0xb0
   304e4:	2218      	movs	r2, #24
   304e6:	2100      	movs	r1, #0
   304e8:	0018      	movs	r0, r3
   304ea:	4b24      	ldr	r3, [pc, #144]	; (3057c <_http_client_clear_conn+0xc0>)
   304ec:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   304ee:	687b      	ldr	r3, [r7, #4]
   304f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   304f2:	2b00      	cmp	r3, #0
   304f4:	d005      	beq.n	30502 <_http_client_clear_conn+0x46>
		close(module->sock);
   304f6:	687b      	ldr	r3, [r7, #4]
   304f8:	781b      	ldrb	r3, [r3, #0]
   304fa:	b25b      	sxtb	r3, r3
   304fc:	0018      	movs	r0, r3
   304fe:	4b20      	ldr	r3, [pc, #128]	; (30580 <_http_client_clear_conn+0xc4>)
   30500:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30502:	687b      	ldr	r3, [r7, #4]
   30504:	781b      	ldrb	r3, [r3, #0]
   30506:	b25b      	sxtb	r3, r3
   30508:	001a      	movs	r2, r3
   3050a:	4b1e      	ldr	r3, [pc, #120]	; (30584 <_http_client_clear_conn+0xc8>)
   3050c:	0092      	lsls	r2, r2, #2
   3050e:	2100      	movs	r1, #0
   30510:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30512:	687b      	ldr	r3, [r7, #4]
   30514:	336c      	adds	r3, #108	; 0x6c
   30516:	226c      	movs	r2, #108	; 0x6c
   30518:	2100      	movs	r1, #0
   3051a:	0018      	movs	r0, r3
   3051c:	4b17      	ldr	r3, [pc, #92]	; (3057c <_http_client_clear_conn+0xc0>)
   3051e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30520:	687b      	ldr	r3, [r7, #4]
   30522:	33d8      	adds	r3, #216	; 0xd8
   30524:	2210      	movs	r2, #16
   30526:	2100      	movs	r1, #0
   30528:	0018      	movs	r0, r3
   3052a:	4b14      	ldr	r3, [pc, #80]	; (3057c <_http_client_clear_conn+0xc0>)
   3052c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3052e:	687b      	ldr	r3, [r7, #4]
   30530:	2200      	movs	r2, #0
   30532:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30534:	687b      	ldr	r3, [r7, #4]
   30536:	22d8      	movs	r2, #216	; 0xd8
   30538:	2100      	movs	r1, #0
   3053a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3053c:	687b      	ldr	r3, [r7, #4]
   3053e:	2241      	movs	r2, #65	; 0x41
   30540:	5c99      	ldrb	r1, [r3, r2]
   30542:	2001      	movs	r0, #1
   30544:	4381      	bics	r1, r0
   30546:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30548:	687b      	ldr	r3, [r7, #4]
   3054a:	2241      	movs	r2, #65	; 0x41
   3054c:	5c99      	ldrb	r1, [r3, r2]
   3054e:	2002      	movs	r0, #2
   30550:	4381      	bics	r1, r0
   30552:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30554:	230c      	movs	r3, #12
   30556:	18fb      	adds	r3, r7, r3
   30558:	683a      	ldr	r2, [r7, #0]
   3055a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   3055c:	687b      	ldr	r3, [r7, #4]
   3055e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30560:	2b00      	cmp	r3, #0
   30562:	d006      	beq.n	30572 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30564:	687b      	ldr	r3, [r7, #4]
   30566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30568:	220c      	movs	r2, #12
   3056a:	18ba      	adds	r2, r7, r2
   3056c:	6878      	ldr	r0, [r7, #4]
   3056e:	2104      	movs	r1, #4
   30570:	4798      	blx	r3
	}
}
   30572:	46c0      	nop			; (mov r8, r8)
   30574:	46bd      	mov	sp, r7
   30576:	b006      	add	sp, #24
   30578:	bd80      	pop	{r7, pc}
   3057a:	46c0      	nop			; (mov r8, r8)
   3057c:	0003460f 	.word	0x0003460f
   30580:	00024cad 	.word	0x00024cad
   30584:	200046c0 	.word	0x200046c0

00030588 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30588:	b590      	push	{r4, r7, lr}
   3058a:	b087      	sub	sp, #28
   3058c:	af00      	add	r7, sp, #0
   3058e:	60f8      	str	r0, [r7, #12]
   30590:	60b9      	str	r1, [r7, #8]
   30592:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30594:	68fb      	ldr	r3, [r7, #12]
   30596:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30598:	697b      	ldr	r3, [r7, #20]
   3059a:	2241      	movs	r2, #65	; 0x41
   3059c:	5c99      	ldrb	r1, [r3, r2]
   3059e:	2001      	movs	r0, #1
   305a0:	4301      	orrs	r1, r0
   305a2:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   305a4:	697b      	ldr	r3, [r7, #20]
   305a6:	2000      	movs	r0, #0
   305a8:	5618      	ldrsb	r0, [r3, r0]
   305aa:	687b      	ldr	r3, [r7, #4]
   305ac:	b29a      	uxth	r2, r3
   305ae:	68b9      	ldr	r1, [r7, #8]
   305b0:	2300      	movs	r3, #0
   305b2:	4c14      	ldr	r4, [pc, #80]	; (30604 <_http_client_send_wait+0x7c>)
   305b4:	47a0      	blx	r4
   305b6:	0003      	movs	r3, r0
   305b8:	613b      	str	r3, [r7, #16]
   305ba:	693b      	ldr	r3, [r7, #16]
   305bc:	2b00      	cmp	r3, #0
   305be:	da0f      	bge.n	305e0 <_http_client_send_wait+0x58>
		module->sending = 0;
   305c0:	697b      	ldr	r3, [r7, #20]
   305c2:	2241      	movs	r2, #65	; 0x41
   305c4:	5c99      	ldrb	r1, [r3, r2]
   305c6:	2001      	movs	r0, #1
   305c8:	4381      	bics	r1, r0
   305ca:	5499      	strb	r1, [r3, r2]
		return result;
   305cc:	693b      	ldr	r3, [r7, #16]
   305ce:	e014      	b.n	305fa <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   305d0:	2000      	movs	r0, #0
   305d2:	4b0d      	ldr	r3, [pc, #52]	; (30608 <_http_client_send_wait+0x80>)
   305d4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   305d6:	697b      	ldr	r3, [r7, #20]
   305d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   305da:	0018      	movs	r0, r3
   305dc:	4b0b      	ldr	r3, [pc, #44]	; (3060c <_http_client_send_wait+0x84>)
   305de:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   305e0:	697b      	ldr	r3, [r7, #20]
   305e2:	2241      	movs	r2, #65	; 0x41
   305e4:	5c9b      	ldrb	r3, [r3, r2]
   305e6:	2201      	movs	r2, #1
   305e8:	4013      	ands	r3, r2
   305ea:	b2db      	uxtb	r3, r3
   305ec:	2b00      	cmp	r3, #0
   305ee:	d003      	beq.n	305f8 <_http_client_send_wait+0x70>
   305f0:	697b      	ldr	r3, [r7, #20]
   305f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   305f4:	2b02      	cmp	r3, #2
   305f6:	d8eb      	bhi.n	305d0 <_http_client_send_wait+0x48>
	}

	return 0;
   305f8:	2300      	movs	r3, #0
}
   305fa:	0018      	movs	r0, r3
   305fc:	46bd      	mov	sp, r7
   305fe:	b007      	add	sp, #28
   30600:	bd90      	pop	{r4, r7, pc}
   30602:	46c0      	nop			; (mov r8, r8)
   30604:	000249c9 	.word	0x000249c9
   30608:	00021075 	.word	0x00021075
   3060c:	00031895 	.word	0x00031895

00030610 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   30610:	b5f0      	push	{r4, r5, r6, r7, lr}
   30612:	46c6      	mov	lr, r8
   30614:	b500      	push	{lr}
   30616:	b0a0      	sub	sp, #128	; 0x80
   30618:	af02      	add	r7, sp, #8
   3061a:	61f8      	str	r0, [r7, #28]
   3061c:	4668      	mov	r0, sp
   3061e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30620:	2318      	movs	r3, #24
   30622:	2218      	movs	r2, #24
   30624:	18ba      	adds	r2, r7, r2
   30626:	18d0      	adds	r0, r2, r3
   30628:	4bbd      	ldr	r3, [pc, #756]	; (30920 <_http_client_request+0x310>)
   3062a:	469c      	mov	ip, r3
   3062c:	4663      	mov	r3, ip
   3062e:	cb16      	ldmia	r3!, {r1, r2, r4}
   30630:	c016      	stmia	r0!, {r1, r2, r4}
   30632:	469c      	mov	ip, r3
   30634:	4663      	mov	r3, ip
   30636:	681b      	ldr	r3, [r3, #0]
   30638:	469c      	mov	ip, r3
   3063a:	4663      	mov	r3, ip
   3063c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3063e:	69f8      	ldr	r0, [r7, #28]
   30640:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30642:	4684      	mov	ip, r0
   30644:	2301      	movs	r3, #1
   30646:	425b      	negs	r3, r3
   30648:	4698      	mov	r8, r3
   3064a:	44c4      	add	ip, r8
   3064c:	4663      	mov	r3, ip
   3064e:	66fb      	str	r3, [r7, #108]	; 0x6c
   30650:	6038      	str	r0, [r7, #0]
   30652:	2300      	movs	r3, #0
   30654:	607b      	str	r3, [r7, #4]
   30656:	6839      	ldr	r1, [r7, #0]
   30658:	687a      	ldr	r2, [r7, #4]
   3065a:	000b      	movs	r3, r1
   3065c:	0f5b      	lsrs	r3, r3, #29
   3065e:	469c      	mov	ip, r3
   30660:	0013      	movs	r3, r2
   30662:	00db      	lsls	r3, r3, #3
   30664:	617b      	str	r3, [r7, #20]
   30666:	4663      	mov	r3, ip
   30668:	697c      	ldr	r4, [r7, #20]
   3066a:	431c      	orrs	r4, r3
   3066c:	617c      	str	r4, [r7, #20]
   3066e:	000b      	movs	r3, r1
   30670:	00db      	lsls	r3, r3, #3
   30672:	613b      	str	r3, [r7, #16]
   30674:	0005      	movs	r5, r0
   30676:	2200      	movs	r2, #0
   30678:	0016      	movs	r6, r2
   3067a:	0f6a      	lsrs	r2, r5, #29
   3067c:	00f3      	lsls	r3, r6, #3
   3067e:	60fb      	str	r3, [r7, #12]
   30680:	68fb      	ldr	r3, [r7, #12]
   30682:	4313      	orrs	r3, r2
   30684:	60fb      	str	r3, [r7, #12]
   30686:	00eb      	lsls	r3, r5, #3
   30688:	60bb      	str	r3, [r7, #8]
   3068a:	1dc3      	adds	r3, r0, #7
   3068c:	08db      	lsrs	r3, r3, #3
   3068e:	00db      	lsls	r3, r3, #3
   30690:	466a      	mov	r2, sp
   30692:	1ad3      	subs	r3, r2, r3
   30694:	469d      	mov	sp, r3
   30696:	ab02      	add	r3, sp, #8
   30698:	3300      	adds	r3, #0
   3069a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3069c:	69fb      	ldr	r3, [r7, #28]
   3069e:	2b00      	cmp	r3, #0
   306a0:	d100      	bne.n	306a4 <_http_client_request+0x94>
   306a2:	e346      	b.n	30d32 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   306a4:	69fb      	ldr	r3, [r7, #28]
   306a6:	2241      	movs	r2, #65	; 0x41
   306a8:	5c9b      	ldrb	r3, [r3, r2]
   306aa:	2201      	movs	r2, #1
   306ac:	4013      	ands	r3, r2
   306ae:	b2db      	uxtb	r3, r3
   306b0:	2b00      	cmp	r3, #0
   306b2:	d000      	beq.n	306b6 <_http_client_request+0xa6>
   306b4:	e33f      	b.n	30d36 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   306b6:	69fb      	ldr	r3, [r7, #28]
   306b8:	33b0      	adds	r3, #176	; 0xb0
   306ba:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   306bc:	69fb      	ldr	r3, [r7, #28]
   306be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   306c0:	2b03      	cmp	r3, #3
   306c2:	d003      	beq.n	306cc <_http_client_request+0xbc>
   306c4:	2b04      	cmp	r3, #4
   306c6:	d100      	bne.n	306ca <_http_client_request+0xba>
   306c8:	e1b3      	b.n	30a32 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   306ca:	e32f      	b.n	30d2c <_http_client_request+0x71c>
		module->req.content_length = 0;
   306cc:	69fb      	ldr	r3, [r7, #28]
   306ce:	22cc      	movs	r2, #204	; 0xcc
   306d0:	2100      	movs	r1, #0
   306d2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   306d4:	69fb      	ldr	r3, [r7, #28]
   306d6:	22d0      	movs	r2, #208	; 0xd0
   306d8:	2100      	movs	r1, #0
   306da:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   306dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   306de:	69fb      	ldr	r3, [r7, #28]
   306e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   306e2:	4c90      	ldr	r4, [pc, #576]	; (30924 <_http_client_request+0x314>)
   306e4:	2334      	movs	r3, #52	; 0x34
   306e6:	2018      	movs	r0, #24
   306e8:	1838      	adds	r0, r7, r0
   306ea:	18c0      	adds	r0, r0, r3
   306ec:	69fb      	ldr	r3, [r7, #28]
   306ee:	9300      	str	r3, [sp, #0]
   306f0:	0023      	movs	r3, r4
   306f2:	4c8d      	ldr	r4, [pc, #564]	; (30928 <_http_client_request+0x318>)
   306f4:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   306f6:	69fb      	ldr	r3, [r7, #28]
   306f8:	22c8      	movs	r2, #200	; 0xc8
   306fa:	5c9b      	ldrb	r3, [r3, r2]
   306fc:	2b01      	cmp	r3, #1
   306fe:	d10a      	bne.n	30716 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   30700:	498a      	ldr	r1, [pc, #552]	; (3092c <_http_client_request+0x31c>)
   30702:	2334      	movs	r3, #52	; 0x34
   30704:	2218      	movs	r2, #24
   30706:	4694      	mov	ip, r2
   30708:	44bc      	add	ip, r7
   3070a:	4463      	add	r3, ip
   3070c:	2204      	movs	r2, #4
   3070e:	0018      	movs	r0, r3
   30710:	4b87      	ldr	r3, [pc, #540]	; (30930 <_http_client_request+0x320>)
   30712:	4798      	blx	r3
   30714:	e04e      	b.n	307b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30716:	69fb      	ldr	r3, [r7, #28]
   30718:	22c8      	movs	r2, #200	; 0xc8
   3071a:	5c9b      	ldrb	r3, [r3, r2]
   3071c:	2b02      	cmp	r3, #2
   3071e:	d10a      	bne.n	30736 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30720:	4984      	ldr	r1, [pc, #528]	; (30934 <_http_client_request+0x324>)
   30722:	2334      	movs	r3, #52	; 0x34
   30724:	2218      	movs	r2, #24
   30726:	4694      	mov	ip, r2
   30728:	44bc      	add	ip, r7
   3072a:	4463      	add	r3, ip
   3072c:	2205      	movs	r2, #5
   3072e:	0018      	movs	r0, r3
   30730:	4b7f      	ldr	r3, [pc, #508]	; (30930 <_http_client_request+0x320>)
   30732:	4798      	blx	r3
   30734:	e03e      	b.n	307b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30736:	69fb      	ldr	r3, [r7, #28]
   30738:	22c8      	movs	r2, #200	; 0xc8
   3073a:	5c9b      	ldrb	r3, [r3, r2]
   3073c:	2b03      	cmp	r3, #3
   3073e:	d10a      	bne.n	30756 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30740:	497d      	ldr	r1, [pc, #500]	; (30938 <_http_client_request+0x328>)
   30742:	2334      	movs	r3, #52	; 0x34
   30744:	2218      	movs	r2, #24
   30746:	4694      	mov	ip, r2
   30748:	44bc      	add	ip, r7
   3074a:	4463      	add	r3, ip
   3074c:	2207      	movs	r2, #7
   3074e:	0018      	movs	r0, r3
   30750:	4b77      	ldr	r3, [pc, #476]	; (30930 <_http_client_request+0x320>)
   30752:	4798      	blx	r3
   30754:	e02e      	b.n	307b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30756:	69fb      	ldr	r3, [r7, #28]
   30758:	22c8      	movs	r2, #200	; 0xc8
   3075a:	5c9b      	ldrb	r3, [r3, r2]
   3075c:	2b04      	cmp	r3, #4
   3075e:	d10a      	bne.n	30776 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30760:	4976      	ldr	r1, [pc, #472]	; (3093c <_http_client_request+0x32c>)
   30762:	2334      	movs	r3, #52	; 0x34
   30764:	2218      	movs	r2, #24
   30766:	4694      	mov	ip, r2
   30768:	44bc      	add	ip, r7
   3076a:	4463      	add	r3, ip
   3076c:	2204      	movs	r2, #4
   3076e:	0018      	movs	r0, r3
   30770:	4b6f      	ldr	r3, [pc, #444]	; (30930 <_http_client_request+0x320>)
   30772:	4798      	blx	r3
   30774:	e01e      	b.n	307b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30776:	69fb      	ldr	r3, [r7, #28]
   30778:	22c8      	movs	r2, #200	; 0xc8
   3077a:	5c9b      	ldrb	r3, [r3, r2]
   3077c:	2b05      	cmp	r3, #5
   3077e:	d10a      	bne.n	30796 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30780:	496f      	ldr	r1, [pc, #444]	; (30940 <_http_client_request+0x330>)
   30782:	2334      	movs	r3, #52	; 0x34
   30784:	2218      	movs	r2, #24
   30786:	4694      	mov	ip, r2
   30788:	44bc      	add	ip, r7
   3078a:	4463      	add	r3, ip
   3078c:	2208      	movs	r2, #8
   3078e:	0018      	movs	r0, r3
   30790:	4b67      	ldr	r3, [pc, #412]	; (30930 <_http_client_request+0x320>)
   30792:	4798      	blx	r3
   30794:	e00e      	b.n	307b4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30796:	69fb      	ldr	r3, [r7, #28]
   30798:	22c8      	movs	r2, #200	; 0xc8
   3079a:	5c9b      	ldrb	r3, [r3, r2]
   3079c:	2b06      	cmp	r3, #6
   3079e:	d109      	bne.n	307b4 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   307a0:	4968      	ldr	r1, [pc, #416]	; (30944 <_http_client_request+0x334>)
   307a2:	2334      	movs	r3, #52	; 0x34
   307a4:	2218      	movs	r2, #24
   307a6:	4694      	mov	ip, r2
   307a8:	44bc      	add	ip, r7
   307aa:	4463      	add	r3, ip
   307ac:	2205      	movs	r2, #5
   307ae:	0018      	movs	r0, r3
   307b0:	4b5f      	ldr	r3, [pc, #380]	; (30930 <_http_client_request+0x320>)
   307b2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   307b4:	69fb      	ldr	r3, [r7, #28]
   307b6:	3370      	adds	r3, #112	; 0x70
   307b8:	001c      	movs	r4, r3
   307ba:	69fb      	ldr	r3, [r7, #28]
   307bc:	3370      	adds	r3, #112	; 0x70
   307be:	0018      	movs	r0, r3
   307c0:	4b61      	ldr	r3, [pc, #388]	; (30948 <_http_client_request+0x338>)
   307c2:	4798      	blx	r3
   307c4:	0002      	movs	r2, r0
   307c6:	2334      	movs	r3, #52	; 0x34
   307c8:	2118      	movs	r1, #24
   307ca:	468c      	mov	ip, r1
   307cc:	44bc      	add	ip, r7
   307ce:	4463      	add	r3, ip
   307d0:	0021      	movs	r1, r4
   307d2:	0018      	movs	r0, r3
   307d4:	4b56      	ldr	r3, [pc, #344]	; (30930 <_http_client_request+0x320>)
   307d6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   307d8:	495c      	ldr	r1, [pc, #368]	; (3094c <_http_client_request+0x33c>)
   307da:	2334      	movs	r3, #52	; 0x34
   307dc:	2218      	movs	r2, #24
   307de:	4694      	mov	ip, r2
   307e0:	44bc      	add	ip, r7
   307e2:	4463      	add	r3, ip
   307e4:	220b      	movs	r2, #11
   307e6:	0018      	movs	r0, r3
   307e8:	4b51      	ldr	r3, [pc, #324]	; (30930 <_http_client_request+0x320>)
   307ea:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   307ec:	4958      	ldr	r1, [pc, #352]	; (30950 <_http_client_request+0x340>)
   307ee:	2334      	movs	r3, #52	; 0x34
   307f0:	2218      	movs	r2, #24
   307f2:	4694      	mov	ip, r2
   307f4:	44bc      	add	ip, r7
   307f6:	4463      	add	r3, ip
   307f8:	220c      	movs	r2, #12
   307fa:	0018      	movs	r0, r3
   307fc:	4b4c      	ldr	r3, [pc, #304]	; (30930 <_http_client_request+0x320>)
   307fe:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   30800:	69fb      	ldr	r3, [r7, #28]
   30802:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30804:	69fb      	ldr	r3, [r7, #28]
   30806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30808:	0018      	movs	r0, r3
   3080a:	4b4f      	ldr	r3, [pc, #316]	; (30948 <_http_client_request+0x338>)
   3080c:	4798      	blx	r3
   3080e:	0002      	movs	r2, r0
   30810:	2334      	movs	r3, #52	; 0x34
   30812:	2118      	movs	r1, #24
   30814:	468c      	mov	ip, r1
   30816:	44bc      	add	ip, r7
   30818:	4463      	add	r3, ip
   3081a:	0021      	movs	r1, r4
   3081c:	0018      	movs	r0, r3
   3081e:	4b44      	ldr	r3, [pc, #272]	; (30930 <_http_client_request+0x320>)
   30820:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30822:	494c      	ldr	r1, [pc, #304]	; (30954 <_http_client_request+0x344>)
   30824:	2334      	movs	r3, #52	; 0x34
   30826:	2218      	movs	r2, #24
   30828:	4694      	mov	ip, r2
   3082a:	44bc      	add	ip, r7
   3082c:	4463      	add	r3, ip
   3082e:	2202      	movs	r2, #2
   30830:	0018      	movs	r0, r3
   30832:	4b3f      	ldr	r3, [pc, #252]	; (30930 <_http_client_request+0x320>)
   30834:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30836:	4948      	ldr	r1, [pc, #288]	; (30958 <_http_client_request+0x348>)
   30838:	2334      	movs	r3, #52	; 0x34
   3083a:	2218      	movs	r2, #24
   3083c:	4694      	mov	ip, r2
   3083e:	44bc      	add	ip, r7
   30840:	4463      	add	r3, ip
   30842:	2206      	movs	r2, #6
   30844:	0018      	movs	r0, r3
   30846:	4b3a      	ldr	r3, [pc, #232]	; (30930 <_http_client_request+0x320>)
   30848:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3084a:	69fb      	ldr	r3, [r7, #28]
   3084c:	1c5c      	adds	r4, r3, #1
   3084e:	69fb      	ldr	r3, [r7, #28]
   30850:	3301      	adds	r3, #1
   30852:	0018      	movs	r0, r3
   30854:	4b3c      	ldr	r3, [pc, #240]	; (30948 <_http_client_request+0x338>)
   30856:	4798      	blx	r3
   30858:	0002      	movs	r2, r0
   3085a:	2334      	movs	r3, #52	; 0x34
   3085c:	2118      	movs	r1, #24
   3085e:	468c      	mov	ip, r1
   30860:	44bc      	add	ip, r7
   30862:	4463      	add	r3, ip
   30864:	0021      	movs	r1, r4
   30866:	0018      	movs	r0, r3
   30868:	4b31      	ldr	r3, [pc, #196]	; (30930 <_http_client_request+0x320>)
   3086a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3086c:	4939      	ldr	r1, [pc, #228]	; (30954 <_http_client_request+0x344>)
   3086e:	2334      	movs	r3, #52	; 0x34
   30870:	2218      	movs	r2, #24
   30872:	4694      	mov	ip, r2
   30874:	44bc      	add	ip, r7
   30876:	4463      	add	r3, ip
   30878:	2202      	movs	r2, #2
   3087a:	0018      	movs	r0, r3
   3087c:	4b2c      	ldr	r3, [pc, #176]	; (30930 <_http_client_request+0x320>)
   3087e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   30880:	4936      	ldr	r1, [pc, #216]	; (3095c <_http_client_request+0x34c>)
   30882:	2334      	movs	r3, #52	; 0x34
   30884:	2218      	movs	r2, #24
   30886:	4694      	mov	ip, r2
   30888:	44bc      	add	ip, r7
   3088a:	4463      	add	r3, ip
   3088c:	2218      	movs	r2, #24
   3088e:	0018      	movs	r0, r3
   30890:	4b27      	ldr	r3, [pc, #156]	; (30930 <_http_client_request+0x320>)
   30892:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   30894:	4932      	ldr	r1, [pc, #200]	; (30960 <_http_client_request+0x350>)
   30896:	2334      	movs	r3, #52	; 0x34
   30898:	2218      	movs	r2, #24
   3089a:	4694      	mov	ip, r2
   3089c:	44bc      	add	ip, r7
   3089e:	4463      	add	r3, ip
   308a0:	2213      	movs	r2, #19
   308a2:	0018      	movs	r0, r3
   308a4:	4b22      	ldr	r3, [pc, #136]	; (30930 <_http_client_request+0x320>)
   308a6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   308a8:	492e      	ldr	r1, [pc, #184]	; (30964 <_http_client_request+0x354>)
   308aa:	2334      	movs	r3, #52	; 0x34
   308ac:	2218      	movs	r2, #24
   308ae:	4694      	mov	ip, r2
   308b0:	44bc      	add	ip, r7
   308b2:	4463      	add	r3, ip
   308b4:	2217      	movs	r2, #23
   308b6:	0018      	movs	r0, r3
   308b8:	4b1d      	ldr	r3, [pc, #116]	; (30930 <_http_client_request+0x320>)
   308ba:	4798      	blx	r3
		if (entity->read != NULL) {
   308bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308be:	68db      	ldr	r3, [r3, #12]
   308c0:	2b00      	cmp	r3, #0
   308c2:	d100      	bne.n	308c6 <_http_client_request+0x2b6>
   308c4:	e088      	b.n	309d8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   308c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308c8:	781b      	ldrb	r3, [r3, #0]
   308ca:	2b00      	cmp	r3, #0
   308cc:	d00f      	beq.n	308ee <_http_client_request+0x2de>
				module->req.content_length = -1;
   308ce:	69fb      	ldr	r3, [r7, #28]
   308d0:	21cc      	movs	r1, #204	; 0xcc
   308d2:	2201      	movs	r2, #1
   308d4:	4252      	negs	r2, r2
   308d6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   308d8:	4923      	ldr	r1, [pc, #140]	; (30968 <_http_client_request+0x358>)
   308da:	2334      	movs	r3, #52	; 0x34
   308dc:	2218      	movs	r2, #24
   308de:	4694      	mov	ip, r2
   308e0:	44bc      	add	ip, r7
   308e2:	4463      	add	r3, ip
   308e4:	221c      	movs	r2, #28
   308e6:	0018      	movs	r0, r3
   308e8:	4b11      	ldr	r3, [pc, #68]	; (30930 <_http_client_request+0x320>)
   308ea:	4798      	blx	r3
   308ec:	e074      	b.n	309d8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   308ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308f0:	689b      	ldr	r3, [r3, #8]
   308f2:	2b00      	cmp	r3, #0
   308f4:	d070      	beq.n	309d8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   308f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308f8:	689a      	ldr	r2, [r3, #8]
   308fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   308fc:	695b      	ldr	r3, [r3, #20]
   308fe:	0018      	movs	r0, r3
   30900:	4790      	blx	r2
   30902:	0001      	movs	r1, r0
   30904:	69fb      	ldr	r3, [r7, #28]
   30906:	22cc      	movs	r2, #204	; 0xcc
   30908:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3090a:	69fb      	ldr	r3, [r7, #28]
   3090c:	22cc      	movs	r2, #204	; 0xcc
   3090e:	589b      	ldr	r3, [r3, r2]
   30910:	2b00      	cmp	r3, #0
   30912:	da2b      	bge.n	3096c <_http_client_request+0x35c>
					module->req.content_length = 0;
   30914:	69fb      	ldr	r3, [r7, #28]
   30916:	22cc      	movs	r2, #204	; 0xcc
   30918:	2100      	movs	r1, #0
   3091a:	5099      	str	r1, [r3, r2]
   3091c:	e05c      	b.n	309d8 <_http_client_request+0x3c8>
   3091e:	46c0      	nop			; (mov r8, r8)
   30920:	00039804 	.word	0x00039804
   30924:	00030589 	.word	0x00030589
   30928:	000314f1 	.word	0x000314f1
   3092c:	00039728 	.word	0x00039728
   30930:	00031571 	.word	0x00031571
   30934:	00039730 	.word	0x00039730
   30938:	00039738 	.word	0x00039738
   3093c:	00039740 	.word	0x00039740
   30940:	00039748 	.word	0x00039748
   30944:	00039754 	.word	0x00039754
   30948:	000349ab 	.word	0x000349ab
   3094c:	0003975c 	.word	0x0003975c
   30950:	00039768 	.word	0x00039768
   30954:	00039778 	.word	0x00039778
   30958:	0003977c 	.word	0x0003977c
   3095c:	00039784 	.word	0x00039784
   30960:	000397a0 	.word	0x000397a0
   30964:	000397b4 	.word	0x000397b4
   30968:	000397cc 	.word	0x000397cc
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3096c:	69fb      	ldr	r3, [r7, #28]
   3096e:	22cc      	movs	r2, #204	; 0xcc
   30970:	589b      	ldr	r3, [r3, r2]
   30972:	001a      	movs	r2, r3
   30974:	49e0      	ldr	r1, [pc, #896]	; (30cf8 <_http_client_request+0x6e8>)
   30976:	2328      	movs	r3, #40	; 0x28
   30978:	2018      	movs	r0, #24
   3097a:	4684      	mov	ip, r0
   3097c:	44bc      	add	ip, r7
   3097e:	4463      	add	r3, ip
   30980:	0018      	movs	r0, r3
   30982:	4bde      	ldr	r3, [pc, #888]	; (30cfc <_http_client_request+0x6ec>)
   30984:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   30986:	49de      	ldr	r1, [pc, #888]	; (30d00 <_http_client_request+0x6f0>)
   30988:	2334      	movs	r3, #52	; 0x34
   3098a:	2218      	movs	r2, #24
   3098c:	4694      	mov	ip, r2
   3098e:	44bc      	add	ip, r7
   30990:	4463      	add	r3, ip
   30992:	2210      	movs	r2, #16
   30994:	0018      	movs	r0, r3
   30996:	4bdb      	ldr	r3, [pc, #876]	; (30d04 <_http_client_request+0x6f4>)
   30998:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   3099a:	2328      	movs	r3, #40	; 0x28
   3099c:	2218      	movs	r2, #24
   3099e:	4694      	mov	ip, r2
   309a0:	44bc      	add	ip, r7
   309a2:	4463      	add	r3, ip
   309a4:	0018      	movs	r0, r3
   309a6:	4bd8      	ldr	r3, [pc, #864]	; (30d08 <_http_client_request+0x6f8>)
   309a8:	4798      	blx	r3
   309aa:	0002      	movs	r2, r0
   309ac:	2328      	movs	r3, #40	; 0x28
   309ae:	2118      	movs	r1, #24
   309b0:	1879      	adds	r1, r7, r1
   309b2:	18c9      	adds	r1, r1, r3
   309b4:	2334      	movs	r3, #52	; 0x34
   309b6:	2018      	movs	r0, #24
   309b8:	4684      	mov	ip, r0
   309ba:	44bc      	add	ip, r7
   309bc:	4463      	add	r3, ip
   309be:	0018      	movs	r0, r3
   309c0:	4bd0      	ldr	r3, [pc, #832]	; (30d04 <_http_client_request+0x6f4>)
   309c2:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   309c4:	49d1      	ldr	r1, [pc, #836]	; (30d0c <_http_client_request+0x6fc>)
   309c6:	2334      	movs	r3, #52	; 0x34
   309c8:	2218      	movs	r2, #24
   309ca:	4694      	mov	ip, r2
   309cc:	44bc      	add	ip, r7
   309ce:	4463      	add	r3, ip
   309d0:	2202      	movs	r2, #2
   309d2:	0018      	movs	r0, r3
   309d4:	4bcb      	ldr	r3, [pc, #812]	; (30d04 <_http_client_request+0x6f4>)
   309d6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   309d8:	69fb      	ldr	r3, [r7, #28]
   309da:	22d4      	movs	r2, #212	; 0xd4
   309dc:	589b      	ldr	r3, [r3, r2]
   309de:	2b00      	cmp	r3, #0
   309e0:	d012      	beq.n	30a08 <_http_client_request+0x3f8>
				module->req.ext_header,
   309e2:	69fb      	ldr	r3, [r7, #28]
   309e4:	22d4      	movs	r2, #212	; 0xd4
   309e6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   309e8:	69fb      	ldr	r3, [r7, #28]
   309ea:	22d4      	movs	r2, #212	; 0xd4
   309ec:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   309ee:	0018      	movs	r0, r3
   309f0:	4bc5      	ldr	r3, [pc, #788]	; (30d08 <_http_client_request+0x6f8>)
   309f2:	4798      	blx	r3
   309f4:	0002      	movs	r2, r0
   309f6:	2334      	movs	r3, #52	; 0x34
   309f8:	2118      	movs	r1, #24
   309fa:	468c      	mov	ip, r1
   309fc:	44bc      	add	ip, r7
   309fe:	4463      	add	r3, ip
   30a00:	0021      	movs	r1, r4
   30a02:	0018      	movs	r0, r3
   30a04:	4bbf      	ldr	r3, [pc, #764]	; (30d04 <_http_client_request+0x6f4>)
   30a06:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30a08:	49c0      	ldr	r1, [pc, #768]	; (30d0c <_http_client_request+0x6fc>)
   30a0a:	2334      	movs	r3, #52	; 0x34
   30a0c:	2218      	movs	r2, #24
   30a0e:	4694      	mov	ip, r2
   30a10:	44bc      	add	ip, r7
   30a12:	4463      	add	r3, ip
   30a14:	2202      	movs	r2, #2
   30a16:	0018      	movs	r0, r3
   30a18:	4bba      	ldr	r3, [pc, #744]	; (30d04 <_http_client_request+0x6f4>)
   30a1a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   30a1c:	2334      	movs	r3, #52	; 0x34
   30a1e:	2218      	movs	r2, #24
   30a20:	4694      	mov	ip, r2
   30a22:	44bc      	add	ip, r7
   30a24:	4463      	add	r3, ip
   30a26:	0018      	movs	r0, r3
   30a28:	4bb9      	ldr	r3, [pc, #740]	; (30d10 <_http_client_request+0x700>)
   30a2a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   30a2c:	69fb      	ldr	r3, [r7, #28]
   30a2e:	2204      	movs	r2, #4
   30a30:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   30a32:	69fb      	ldr	r3, [r7, #28]
   30a34:	22cc      	movs	r2, #204	; 0xcc
   30a36:	589b      	ldr	r3, [r3, r2]
   30a38:	2b00      	cmp	r3, #0
   30a3a:	db00      	blt.n	30a3e <_http_client_request+0x42e>
   30a3c:	e0c6      	b.n	30bcc <_http_client_request+0x5bc>
   30a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a40:	68db      	ldr	r3, [r3, #12]
   30a42:	2b00      	cmp	r3, #0
   30a44:	d100      	bne.n	30a48 <_http_client_request+0x438>
   30a46:	e0c1      	b.n	30bcc <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a4a:	68dc      	ldr	r4, [r3, #12]
   30a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a4e:	6958      	ldr	r0, [r3, #20]
   30a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a52:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30a54:	69fb      	ldr	r3, [r7, #28]
   30a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30a58:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30a5a:	69fb      	ldr	r3, [r7, #28]
   30a5c:	22d0      	movs	r2, #208	; 0xd0
   30a5e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30a60:	002a      	movs	r2, r5
   30a62:	47a0      	blx	r4
   30a64:	0003      	movs	r3, r0
   30a66:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a6a:	2b00      	cmp	r3, #0
   30a6c:	da01      	bge.n	30a72 <_http_client_request+0x462>
				size = 0;
   30a6e:	2300      	movs	r3, #0
   30a70:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   30a72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a74:	220a      	movs	r2, #10
   30a76:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   30a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a7a:	220d      	movs	r2, #13
   30a7c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   30a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a80:	3305      	adds	r3, #5
   30a82:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30a84:	210d      	movs	r1, #13
   30a86:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   30a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a8a:	3306      	adds	r3, #6
   30a8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30a8e:	210a      	movs	r1, #10
   30a90:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   30a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30a94:	2b00      	cmp	r3, #0
   30a96:	db14      	blt.n	30ac2 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   30a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30a9a:	3302      	adds	r3, #2
   30a9c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   30a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30aa0:	4a9c      	ldr	r2, [pc, #624]	; (30d14 <_http_client_request+0x704>)
   30aa2:	4013      	ands	r3, r2
   30aa4:	d504      	bpl.n	30ab0 <_http_client_request+0x4a0>
   30aa6:	3b01      	subs	r3, #1
   30aa8:	2210      	movs	r2, #16
   30aaa:	4252      	negs	r2, r2
   30aac:	4313      	orrs	r3, r2
   30aae:	3301      	adds	r3, #1
   30ab0:	001a      	movs	r2, r3
   30ab2:	2318      	movs	r3, #24
   30ab4:	2118      	movs	r1, #24
   30ab6:	468c      	mov	ip, r1
   30ab8:	44bc      	add	ip, r7
   30aba:	4463      	add	r3, ip
   30abc:	5c9a      	ldrb	r2, [r3, r2]
   30abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30ac0:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   30ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ac4:	2b0f      	cmp	r3, #15
   30ac6:	dd19      	ble.n	30afc <_http_client_request+0x4ec>
				ptr = buffer + 1;
   30ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30aca:	3301      	adds	r3, #1
   30acc:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   30ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ad0:	2b00      	cmp	r3, #0
   30ad2:	da00      	bge.n	30ad6 <_http_client_request+0x4c6>
   30ad4:	330f      	adds	r3, #15
   30ad6:	111b      	asrs	r3, r3, #4
   30ad8:	001a      	movs	r2, r3
   30ada:	4b8e      	ldr	r3, [pc, #568]	; (30d14 <_http_client_request+0x704>)
   30adc:	4013      	ands	r3, r2
   30ade:	d504      	bpl.n	30aea <_http_client_request+0x4da>
   30ae0:	3b01      	subs	r3, #1
   30ae2:	2210      	movs	r2, #16
   30ae4:	4252      	negs	r2, r2
   30ae6:	4313      	orrs	r3, r2
   30ae8:	3301      	adds	r3, #1
   30aea:	001a      	movs	r2, r3
   30aec:	2318      	movs	r3, #24
   30aee:	2118      	movs	r1, #24
   30af0:	468c      	mov	ip, r1
   30af2:	44bc      	add	ip, r7
   30af4:	4463      	add	r3, ip
   30af6:	5c9a      	ldrb	r2, [r3, r2]
   30af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30afa:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   30afc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30afe:	2bff      	cmp	r3, #255	; 0xff
   30b00:	dd18      	ble.n	30b34 <_http_client_request+0x524>
				ptr = buffer;
   30b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30b04:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   30b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b08:	2b00      	cmp	r3, #0
   30b0a:	da00      	bge.n	30b0e <_http_client_request+0x4fe>
   30b0c:	33ff      	adds	r3, #255	; 0xff
   30b0e:	121b      	asrs	r3, r3, #8
   30b10:	001a      	movs	r2, r3
   30b12:	4b80      	ldr	r3, [pc, #512]	; (30d14 <_http_client_request+0x704>)
   30b14:	4013      	ands	r3, r2
   30b16:	d504      	bpl.n	30b22 <_http_client_request+0x512>
   30b18:	3b01      	subs	r3, #1
   30b1a:	2210      	movs	r2, #16
   30b1c:	4252      	negs	r2, r2
   30b1e:	4313      	orrs	r3, r2
   30b20:	3301      	adds	r3, #1
   30b22:	001a      	movs	r2, r3
   30b24:	2318      	movs	r3, #24
   30b26:	2118      	movs	r1, #24
   30b28:	468c      	mov	ip, r1
   30b2a:	44bc      	add	ip, r7
   30b2c:	4463      	add	r3, ip
   30b2e:	5c9a      	ldrb	r2, [r3, r2]
   30b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30b32:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   30b34:	69fb      	ldr	r3, [r7, #28]
   30b36:	2000      	movs	r0, #0
   30b38:	5618      	ldrsb	r0, [r3, r0]
   30b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30b3c:	3303      	adds	r3, #3
   30b3e:	001a      	movs	r2, r3
   30b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30b42:	1ad3      	subs	r3, r2, r3
   30b44:	b29a      	uxth	r2, r3
   30b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b48:	b29b      	uxth	r3, r3
   30b4a:	18d3      	adds	r3, r2, r3
   30b4c:	b29b      	uxth	r3, r3
   30b4e:	3304      	adds	r3, #4
   30b50:	b29a      	uxth	r2, r3
   30b52:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30b54:	2300      	movs	r3, #0
   30b56:	4c70      	ldr	r4, [pc, #448]	; (30d18 <_http_client_request+0x708>)
   30b58:	47a0      	blx	r4
   30b5a:	0003      	movs	r3, r0
   30b5c:	663b      	str	r3, [r7, #96]	; 0x60
   30b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30b60:	2b00      	cmp	r3, #0
   30b62:	da07      	bge.n	30b74 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   30b64:	2305      	movs	r3, #5
   30b66:	425a      	negs	r2, r3
   30b68:	69fb      	ldr	r3, [r7, #28]
   30b6a:	0011      	movs	r1, r2
   30b6c:	0018      	movs	r0, r3
   30b6e:	4b6b      	ldr	r3, [pc, #428]	; (30d1c <_http_client_request+0x70c>)
   30b70:	4798      	blx	r3
				return;
   30b72:	e0e1      	b.n	30d38 <_http_client_request+0x728>
			module->req.sent_length += size;
   30b74:	69fb      	ldr	r3, [r7, #28]
   30b76:	22d0      	movs	r2, #208	; 0xd0
   30b78:	589a      	ldr	r2, [r3, r2]
   30b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b7c:	18d2      	adds	r2, r2, r3
   30b7e:	69fb      	ldr	r3, [r7, #28]
   30b80:	21d0      	movs	r1, #208	; 0xd0
   30b82:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   30b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30b86:	2b00      	cmp	r3, #0
   30b88:	d000      	beq.n	30b8c <_http_client_request+0x57c>
   30b8a:	e0c9      	b.n	30d20 <_http_client_request+0x710>
				if (module->req.entity.close) {
   30b8c:	69fb      	ldr	r3, [r7, #28]
   30b8e:	22c0      	movs	r2, #192	; 0xc0
   30b90:	589b      	ldr	r3, [r3, r2]
   30b92:	2b00      	cmp	r3, #0
   30b94:	d007      	beq.n	30ba6 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   30b96:	69fb      	ldr	r3, [r7, #28]
   30b98:	22c0      	movs	r2, #192	; 0xc0
   30b9a:	589b      	ldr	r3, [r3, r2]
   30b9c:	69fa      	ldr	r2, [r7, #28]
   30b9e:	21c4      	movs	r1, #196	; 0xc4
   30ba0:	5852      	ldr	r2, [r2, r1]
   30ba2:	0010      	movs	r0, r2
   30ba4:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30ba6:	69fb      	ldr	r3, [r7, #28]
   30ba8:	2202      	movs	r2, #2
   30baa:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30bac:	69fb      	ldr	r3, [r7, #28]
   30bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30bb0:	2b00      	cmp	r3, #0
   30bb2:	d100      	bne.n	30bb6 <_http_client_request+0x5a6>
   30bb4:	e0b5      	b.n	30d22 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30bb6:	69fb      	ldr	r3, [r7, #28]
   30bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30bba:	220c      	movs	r2, #12
   30bbc:	2118      	movs	r1, #24
   30bbe:	468c      	mov	ip, r1
   30bc0:	44bc      	add	ip, r7
   30bc2:	4462      	add	r2, ip
   30bc4:	69f8      	ldr	r0, [r7, #28]
   30bc6:	2101      	movs	r1, #1
   30bc8:	4798      	blx	r3
				break;
   30bca:	e0aa      	b.n	30d22 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   30bcc:	69fb      	ldr	r3, [r7, #28]
   30bce:	22cc      	movs	r2, #204	; 0xcc
   30bd0:	589b      	ldr	r3, [r3, r2]
   30bd2:	2b00      	cmp	r3, #0
   30bd4:	dc00      	bgt.n	30bd8 <_http_client_request+0x5c8>
   30bd6:	e07c      	b.n	30cd2 <_http_client_request+0x6c2>
   30bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30bda:	68db      	ldr	r3, [r3, #12]
   30bdc:	2b00      	cmp	r3, #0
   30bde:	d100      	bne.n	30be2 <_http_client_request+0x5d2>
   30be0:	e077      	b.n	30cd2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   30be2:	69fb      	ldr	r3, [r7, #28]
   30be4:	22d0      	movs	r2, #208	; 0xd0
   30be6:	589a      	ldr	r2, [r3, r2]
   30be8:	69fb      	ldr	r3, [r7, #28]
   30bea:	21cc      	movs	r1, #204	; 0xcc
   30bec:	585b      	ldr	r3, [r3, r1]
   30bee:	429a      	cmp	r2, r3
   30bf0:	db1f      	blt.n	30c32 <_http_client_request+0x622>
				if (module->req.entity.close) {
   30bf2:	69fb      	ldr	r3, [r7, #28]
   30bf4:	22c0      	movs	r2, #192	; 0xc0
   30bf6:	589b      	ldr	r3, [r3, r2]
   30bf8:	2b00      	cmp	r3, #0
   30bfa:	d007      	beq.n	30c0c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   30bfc:	69fb      	ldr	r3, [r7, #28]
   30bfe:	22c0      	movs	r2, #192	; 0xc0
   30c00:	589b      	ldr	r3, [r3, r2]
   30c02:	69fa      	ldr	r2, [r7, #28]
   30c04:	21c4      	movs	r1, #196	; 0xc4
   30c06:	5852      	ldr	r2, [r2, r1]
   30c08:	0010      	movs	r0, r2
   30c0a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30c0c:	69fb      	ldr	r3, [r7, #28]
   30c0e:	2202      	movs	r2, #2
   30c10:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30c12:	69fb      	ldr	r3, [r7, #28]
   30c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30c16:	2b00      	cmp	r3, #0
   30c18:	d100      	bne.n	30c1c <_http_client_request+0x60c>
   30c1a:	e084      	b.n	30d26 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30c1c:	69fb      	ldr	r3, [r7, #28]
   30c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30c20:	220c      	movs	r2, #12
   30c22:	2118      	movs	r1, #24
   30c24:	468c      	mov	ip, r1
   30c26:	44bc      	add	ip, r7
   30c28:	4462      	add	r2, ip
   30c2a:	69f8      	ldr	r0, [r7, #28]
   30c2c:	2101      	movs	r1, #1
   30c2e:	4798      	blx	r3
				break;
   30c30:	e079      	b.n	30d26 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   30c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c34:	68dc      	ldr	r4, [r3, #12]
   30c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c38:	6958      	ldr	r0, [r3, #20]
   30c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30c3c:	69fb      	ldr	r3, [r7, #28]
   30c3e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30c40:	69fb      	ldr	r3, [r7, #28]
   30c42:	22d0      	movs	r2, #208	; 0xd0
   30c44:	589b      	ldr	r3, [r3, r2]
   30c46:	002a      	movs	r2, r5
   30c48:	47a0      	blx	r4
   30c4a:	0003      	movs	r3, r0
   30c4c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c50:	2b00      	cmp	r3, #0
   30c52:	da0d      	bge.n	30c70 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   30c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c56:	2b00      	cmp	r3, #0
   30c58:	d102      	bne.n	30c60 <_http_client_request+0x650>
   30c5a:	234d      	movs	r3, #77	; 0x4d
   30c5c:	425b      	negs	r3, r3
   30c5e:	e001      	b.n	30c64 <_http_client_request+0x654>
   30c60:	2305      	movs	r3, #5
   30c62:	425b      	negs	r3, r3
   30c64:	69fa      	ldr	r2, [r7, #28]
   30c66:	0019      	movs	r1, r3
   30c68:	0010      	movs	r0, r2
   30c6a:	4b2c      	ldr	r3, [pc, #176]	; (30d1c <_http_client_request+0x70c>)
   30c6c:	4798      	blx	r3
			if (size < 0) {
   30c6e:	e057      	b.n	30d20 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   30c70:	69fb      	ldr	r3, [r7, #28]
   30c72:	22cc      	movs	r2, #204	; 0xcc
   30c74:	589a      	ldr	r2, [r3, r2]
   30c76:	69fb      	ldr	r3, [r7, #28]
   30c78:	21d0      	movs	r1, #208	; 0xd0
   30c7a:	585b      	ldr	r3, [r3, r1]
   30c7c:	1ad2      	subs	r2, r2, r3
   30c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c80:	429a      	cmp	r2, r3
   30c82:	da07      	bge.n	30c94 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   30c84:	69fb      	ldr	r3, [r7, #28]
   30c86:	22cc      	movs	r2, #204	; 0xcc
   30c88:	589a      	ldr	r2, [r3, r2]
   30c8a:	69fb      	ldr	r3, [r7, #28]
   30c8c:	21d0      	movs	r1, #208	; 0xd0
   30c8e:	585b      	ldr	r3, [r3, r1]
   30c90:	1ad3      	subs	r3, r2, r3
   30c92:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   30c94:	69fb      	ldr	r3, [r7, #28]
   30c96:	2000      	movs	r0, #0
   30c98:	5618      	ldrsb	r0, [r3, r0]
   30c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c9e:	b29a      	uxth	r2, r3
   30ca0:	2300      	movs	r3, #0
   30ca2:	4c1d      	ldr	r4, [pc, #116]	; (30d18 <_http_client_request+0x708>)
   30ca4:	47a0      	blx	r4
   30ca6:	0003      	movs	r3, r0
   30ca8:	663b      	str	r3, [r7, #96]	; 0x60
   30caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30cac:	2b00      	cmp	r3, #0
   30cae:	da07      	bge.n	30cc0 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   30cb0:	2305      	movs	r3, #5
   30cb2:	425a      	negs	r2, r3
   30cb4:	69fb      	ldr	r3, [r7, #28]
   30cb6:	0011      	movs	r1, r2
   30cb8:	0018      	movs	r0, r3
   30cba:	4b18      	ldr	r3, [pc, #96]	; (30d1c <_http_client_request+0x70c>)
   30cbc:	4798      	blx	r3
					return;
   30cbe:	e03b      	b.n	30d38 <_http_client_request+0x728>
				module->req.sent_length += size;
   30cc0:	69fb      	ldr	r3, [r7, #28]
   30cc2:	22d0      	movs	r2, #208	; 0xd0
   30cc4:	589a      	ldr	r2, [r3, r2]
   30cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30cc8:	18d2      	adds	r2, r2, r3
   30cca:	69fb      	ldr	r3, [r7, #28]
   30ccc:	21d0      	movs	r1, #208	; 0xd0
   30cce:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   30cd0:	e026      	b.n	30d20 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   30cd2:	69fb      	ldr	r3, [r7, #28]
   30cd4:	2202      	movs	r2, #2
   30cd6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   30cd8:	69fb      	ldr	r3, [r7, #28]
   30cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30cdc:	2b00      	cmp	r3, #0
   30cde:	d024      	beq.n	30d2a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30ce0:	69fb      	ldr	r3, [r7, #28]
   30ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ce4:	220c      	movs	r2, #12
   30ce6:	2118      	movs	r1, #24
   30ce8:	468c      	mov	ip, r1
   30cea:	44bc      	add	ip, r7
   30cec:	4462      	add	r2, ip
   30cee:	69f8      	ldr	r0, [r7, #28]
   30cf0:	2101      	movs	r1, #1
   30cf2:	4798      	blx	r3
			break;
   30cf4:	e019      	b.n	30d2a <_http_client_request+0x71a>
   30cf6:	46c0      	nop			; (mov r8, r8)
   30cf8:	000397ec 	.word	0x000397ec
   30cfc:	000348cd 	.word	0x000348cd
   30d00:	000397f0 	.word	0x000397f0
   30d04:	00031571 	.word	0x00031571
   30d08:	000349ab 	.word	0x000349ab
   30d0c:	00039778 	.word	0x00039778
   30d10:	000315ad 	.word	0x000315ad
   30d14:	8000000f 	.word	0x8000000f
   30d18:	000249c9 	.word	0x000249c9
   30d1c:	000304bd 	.word	0x000304bd
		break;
   30d20:	e004      	b.n	30d2c <_http_client_request+0x71c>
				break;
   30d22:	46c0      	nop			; (mov r8, r8)
   30d24:	e002      	b.n	30d2c <_http_client_request+0x71c>
				break;
   30d26:	46c0      	nop			; (mov r8, r8)
   30d28:	e000      	b.n	30d2c <_http_client_request+0x71c>
			break;
   30d2a:	46c0      	nop			; (mov r8, r8)
   30d2c:	69bb      	ldr	r3, [r7, #24]
   30d2e:	469d      	mov	sp, r3
   30d30:	e004      	b.n	30d3c <_http_client_request+0x72c>
		return;
   30d32:	46c0      	nop			; (mov r8, r8)
   30d34:	e000      	b.n	30d38 <_http_client_request+0x728>
		return;
   30d36:	46c0      	nop			; (mov r8, r8)
   30d38:	69bb      	ldr	r3, [r7, #24]
   30d3a:	469d      	mov	sp, r3
	}
}
   30d3c:	46bd      	mov	sp, r7
   30d3e:	b01e      	add	sp, #120	; 0x78
   30d40:	bc04      	pop	{r2}
   30d42:	4690      	mov	r8, r2
   30d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30d46:	46c0      	nop			; (mov r8, r8)

00030d48 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   30d48:	b590      	push	{r4, r7, lr}
   30d4a:	b083      	sub	sp, #12
   30d4c:	af00      	add	r7, sp, #0
   30d4e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30d50:	687b      	ldr	r3, [r7, #4]
   30d52:	2b00      	cmp	r3, #0
   30d54:	d021      	beq.n	30d9a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   30d56:	687b      	ldr	r3, [r7, #4]
   30d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30d5a:	687b      	ldr	r3, [r7, #4]
   30d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30d5e:	429a      	cmp	r2, r3
   30d60:	d307      	bcc.n	30d72 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   30d62:	238b      	movs	r3, #139	; 0x8b
   30d64:	425a      	negs	r2, r3
   30d66:	687b      	ldr	r3, [r7, #4]
   30d68:	0011      	movs	r1, r2
   30d6a:	0018      	movs	r0, r3
   30d6c:	4b0d      	ldr	r3, [pc, #52]	; (30da4 <_http_client_recv_packet+0x5c>)
   30d6e:	4798      	blx	r3
		return;
   30d70:	e014      	b.n	30d9c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   30d72:	687b      	ldr	r3, [r7, #4]
   30d74:	2000      	movs	r0, #0
   30d76:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   30d78:	687b      	ldr	r3, [r7, #4]
   30d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30d7c:	687b      	ldr	r3, [r7, #4]
   30d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30d80:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30d82:	687b      	ldr	r3, [r7, #4]
   30d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   30d86:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30d88:	687b      	ldr	r3, [r7, #4]
   30d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   30d8c:	b29b      	uxth	r3, r3
   30d8e:	1ad3      	subs	r3, r2, r3
   30d90:	b29a      	uxth	r2, r3
   30d92:	2300      	movs	r3, #0
   30d94:	4c04      	ldr	r4, [pc, #16]	; (30da8 <_http_client_recv_packet+0x60>)
   30d96:	47a0      	blx	r4
   30d98:	e000      	b.n	30d9c <_http_client_recv_packet+0x54>
		return;
   30d9a:	46c0      	nop			; (mov r8, r8)
}
   30d9c:	46bd      	mov	sp, r7
   30d9e:	b003      	add	sp, #12
   30da0:	bd90      	pop	{r4, r7, pc}
   30da2:	46c0      	nop			; (mov r8, r8)
   30da4:	000304bd 	.word	0x000304bd
   30da8:	00024b2d 	.word	0x00024b2d

00030dac <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   30dac:	b580      	push	{r7, lr}
   30dae:	b082      	sub	sp, #8
   30db0:	af00      	add	r7, sp, #0
   30db2:	6078      	str	r0, [r7, #4]
   30db4:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   30db6:	687b      	ldr	r3, [r7, #4]
   30db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30dba:	683b      	ldr	r3, [r7, #0]
   30dbc:	18d2      	adds	r2, r2, r3
   30dbe:	687b      	ldr	r3, [r7, #4]
   30dc0:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   30dc2:	687b      	ldr	r3, [r7, #4]
   30dc4:	2258      	movs	r2, #88	; 0x58
   30dc6:	5a9b      	ldrh	r3, [r3, r2]
   30dc8:	2b00      	cmp	r3, #0
   30dca:	d007      	beq.n	30ddc <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   30dcc:	687b      	ldr	r3, [r7, #4]
   30dce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30dd0:	687b      	ldr	r3, [r7, #4]
   30dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30dd4:	0019      	movs	r1, r3
   30dd6:	0010      	movs	r0, r2
   30dd8:	4b06      	ldr	r3, [pc, #24]	; (30df4 <_http_client_recved_packet+0x48>)
   30dda:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   30ddc:	46c0      	nop			; (mov r8, r8)
   30dde:	687b      	ldr	r3, [r7, #4]
   30de0:	0018      	movs	r0, r3
   30de2:	4b05      	ldr	r3, [pc, #20]	; (30df8 <_http_client_recved_packet+0x4c>)
   30de4:	4798      	blx	r3
   30de6:	1e03      	subs	r3, r0, #0
   30de8:	d1f9      	bne.n	30dde <_http_client_recved_packet+0x32>
}
   30dea:	46c0      	nop			; (mov r8, r8)
   30dec:	46bd      	mov	sp, r7
   30dee:	b002      	add	sp, #8
   30df0:	bd80      	pop	{r7, pc}
   30df2:	46c0      	nop			; (mov r8, r8)
   30df4:	00031869 	.word	0x00031869
   30df8:	00030dfd 	.word	0x00030dfd

00030dfc <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   30dfc:	b580      	push	{r7, lr}
   30dfe:	b082      	sub	sp, #8
   30e00:	af00      	add	r7, sp, #0
   30e02:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   30e04:	687b      	ldr	r3, [r7, #4]
   30e06:	22d8      	movs	r2, #216	; 0xd8
   30e08:	589b      	ldr	r3, [r3, r2]
   30e0a:	2b00      	cmp	r3, #0
   30e0c:	d002      	beq.n	30e14 <_http_client_handle_response+0x18>
   30e0e:	2b01      	cmp	r3, #1
   30e10:	d006      	beq.n	30e20 <_http_client_handle_response+0x24>
   30e12:	e00b      	b.n	30e2c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   30e14:	687b      	ldr	r3, [r7, #4]
   30e16:	0018      	movs	r0, r3
   30e18:	4b07      	ldr	r3, [pc, #28]	; (30e38 <_http_client_handle_response+0x3c>)
   30e1a:	4798      	blx	r3
   30e1c:	0003      	movs	r3, r0
   30e1e:	e006      	b.n	30e2e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   30e20:	687b      	ldr	r3, [r7, #4]
   30e22:	0018      	movs	r0, r3
   30e24:	4b05      	ldr	r3, [pc, #20]	; (30e3c <_http_client_handle_response+0x40>)
   30e26:	4798      	blx	r3
   30e28:	0003      	movs	r3, r0
   30e2a:	e000      	b.n	30e2e <_http_client_handle_response+0x32>
	}
	return 0;
   30e2c:	2300      	movs	r3, #0
}
   30e2e:	0018      	movs	r0, r3
   30e30:	46bd      	mov	sp, r7
   30e32:	b002      	add	sp, #8
   30e34:	bd80      	pop	{r7, pc}
   30e36:	46c0      	nop			; (mov r8, r8)
   30e38:	00030e41 	.word	0x00030e41
   30e3c:	000312f9 	.word	0x000312f9

00030e40 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   30e40:	b590      	push	{r4, r7, lr}
   30e42:	b08b      	sub	sp, #44	; 0x2c
   30e44:	af00      	add	r7, sp, #0
   30e46:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   30e48:	687b      	ldr	r3, [r7, #4]
   30e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30e4c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30e4e:	4b9a      	ldr	r3, [pc, #616]	; (310b8 <_http_client_handle_header+0x278>)
   30e50:	681a      	ldr	r2, [r3, #0]
   30e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e54:	0011      	movs	r1, r2
   30e56:	0018      	movs	r0, r3
   30e58:	4b98      	ldr	r3, [pc, #608]	; (310bc <_http_client_handle_header+0x27c>)
   30e5a:	4798      	blx	r3
   30e5c:	0003      	movs	r3, r0
   30e5e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   30e60:	69bb      	ldr	r3, [r7, #24]
   30e62:	2b00      	cmp	r3, #0
   30e64:	d007      	beq.n	30e76 <_http_client_handle_header+0x36>
   30e66:	687b      	ldr	r3, [r7, #4]
   30e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30e6a:	687b      	ldr	r3, [r7, #4]
   30e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30e6e:	18d2      	adds	r2, r2, r3
   30e70:	69bb      	ldr	r3, [r7, #24]
   30e72:	429a      	cmp	r2, r3
   30e74:	d807      	bhi.n	30e86 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   30e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30e78:	687b      	ldr	r3, [r7, #4]
   30e7a:	0011      	movs	r1, r2
   30e7c:	0018      	movs	r0, r3
   30e7e:	4b90      	ldr	r3, [pc, #576]	; (310c0 <_http_client_handle_header+0x280>)
   30e80:	4798      	blx	r3
			return 0;
   30e82:	2300      	movs	r3, #0
   30e84:	e114      	b.n	310b0 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   30e86:	4b8c      	ldr	r3, [pc, #560]	; (310b8 <_http_client_handle_header+0x278>)
   30e88:	681c      	ldr	r4, [r3, #0]
   30e8a:	4b8b      	ldr	r3, [pc, #556]	; (310b8 <_http_client_handle_header+0x278>)
   30e8c:	681b      	ldr	r3, [r3, #0]
   30e8e:	0018      	movs	r0, r3
   30e90:	4b8c      	ldr	r3, [pc, #560]	; (310c4 <_http_client_handle_header+0x284>)
   30e92:	4798      	blx	r3
   30e94:	0002      	movs	r2, r0
   30e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30e98:	0021      	movs	r1, r4
   30e9a:	0018      	movs	r0, r3
   30e9c:	4b8a      	ldr	r3, [pc, #552]	; (310c8 <_http_client_handle_header+0x288>)
   30e9e:	4798      	blx	r3
   30ea0:	1e03      	subs	r3, r0, #0
   30ea2:	d15d      	bne.n	30f60 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   30ea4:	4b84      	ldr	r3, [pc, #528]	; (310b8 <_http_client_handle_header+0x278>)
   30ea6:	681b      	ldr	r3, [r3, #0]
   30ea8:	0018      	movs	r0, r3
   30eaa:	4b86      	ldr	r3, [pc, #536]	; (310c4 <_http_client_handle_header+0x284>)
   30eac:	4798      	blx	r3
   30eae:	0002      	movs	r2, r0
   30eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30eb2:	189a      	adds	r2, r3, r2
   30eb4:	687b      	ldr	r3, [r7, #4]
   30eb6:	0011      	movs	r1, r2
   30eb8:	0018      	movs	r0, r3
   30eba:	4b81      	ldr	r3, [pc, #516]	; (310c0 <_http_client_handle_header+0x280>)
   30ebc:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   30ebe:	687b      	ldr	r3, [r7, #4]
   30ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ec2:	2b00      	cmp	r3, #0
   30ec4:	d046      	beq.n	30f54 <_http_client_handle_header+0x114>
   30ec6:	687b      	ldr	r3, [r7, #4]
   30ec8:	22e4      	movs	r2, #228	; 0xe4
   30eca:	5a9b      	ldrh	r3, [r3, r2]
   30ecc:	2b00      	cmp	r3, #0
   30ece:	d041      	beq.n	30f54 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   30ed0:	687b      	ldr	r3, [r7, #4]
   30ed2:	22dc      	movs	r2, #220	; 0xdc
   30ed4:	589b      	ldr	r3, [r3, r2]
   30ed6:	2b00      	cmp	r3, #0
   30ed8:	da19      	bge.n	30f0e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   30eda:	687b      	ldr	r3, [r7, #4]
   30edc:	22e4      	movs	r2, #228	; 0xe4
   30ede:	5a9a      	ldrh	r2, [r3, r2]
   30ee0:	230c      	movs	r3, #12
   30ee2:	18fb      	adds	r3, r7, r3
   30ee4:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   30ee6:	230c      	movs	r3, #12
   30ee8:	18fb      	adds	r3, r7, r3
   30eea:	2201      	movs	r2, #1
   30eec:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   30eee:	687b      	ldr	r3, [r7, #4]
   30ef0:	22e0      	movs	r2, #224	; 0xe0
   30ef2:	2100      	movs	r1, #0
   30ef4:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   30ef6:	230c      	movs	r3, #12
   30ef8:	18fb      	adds	r3, r7, r3
   30efa:	2200      	movs	r2, #0
   30efc:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30efe:	687b      	ldr	r3, [r7, #4]
   30f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f02:	220c      	movs	r2, #12
   30f04:	18ba      	adds	r2, r7, r2
   30f06:	6878      	ldr	r0, [r7, #4]
   30f08:	2102      	movs	r1, #2
   30f0a:	4798      	blx	r3
   30f0c:	e022      	b.n	30f54 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   30f0e:	687b      	ldr	r3, [r7, #4]
   30f10:	22dc      	movs	r2, #220	; 0xdc
   30f12:	589a      	ldr	r2, [r3, r2]
   30f14:	687b      	ldr	r3, [r7, #4]
   30f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30f18:	429a      	cmp	r2, r3
   30f1a:	dd1b      	ble.n	30f54 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   30f1c:	687b      	ldr	r3, [r7, #4]
   30f1e:	22e4      	movs	r2, #228	; 0xe4
   30f20:	5a9a      	ldrh	r2, [r3, r2]
   30f22:	230c      	movs	r3, #12
   30f24:	18fb      	adds	r3, r7, r3
   30f26:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   30f28:	687b      	ldr	r3, [r7, #4]
   30f2a:	22dc      	movs	r2, #220	; 0xdc
   30f2c:	589b      	ldr	r3, [r3, r2]
   30f2e:	001a      	movs	r2, r3
   30f30:	230c      	movs	r3, #12
   30f32:	18fb      	adds	r3, r7, r3
   30f34:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   30f36:	230c      	movs	r3, #12
   30f38:	18fb      	adds	r3, r7, r3
   30f3a:	2200      	movs	r2, #0
   30f3c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   30f3e:	687b      	ldr	r3, [r7, #4]
   30f40:	22e0      	movs	r2, #224	; 0xe0
   30f42:	2100      	movs	r1, #0
   30f44:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30f46:	687b      	ldr	r3, [r7, #4]
   30f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f4a:	220c      	movs	r2, #12
   30f4c:	18ba      	adds	r2, r7, r2
   30f4e:	6878      	ldr	r0, [r7, #4]
   30f50:	2102      	movs	r1, #2
   30f52:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   30f54:	687b      	ldr	r3, [r7, #4]
   30f56:	22d8      	movs	r2, #216	; 0xd8
   30f58:	2101      	movs	r1, #1
   30f5a:	5099      	str	r1, [r3, r2]
			return 1;
   30f5c:	2301      	movs	r3, #1
   30f5e:	e0a7      	b.n	310b0 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   30f60:	495a      	ldr	r1, [pc, #360]	; (310cc <_http_client_handle_header+0x28c>)
   30f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f64:	2210      	movs	r2, #16
   30f66:	0018      	movs	r0, r3
   30f68:	4b57      	ldr	r3, [pc, #348]	; (310c8 <_http_client_handle_header+0x288>)
   30f6a:	4798      	blx	r3
   30f6c:	1e03      	subs	r3, r0, #0
   30f6e:	d109      	bne.n	30f84 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   30f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f72:	3310      	adds	r3, #16
   30f74:	0018      	movs	r0, r3
   30f76:	4b56      	ldr	r3, [pc, #344]	; (310d0 <_http_client_handle_header+0x290>)
   30f78:	4798      	blx	r3
   30f7a:	0001      	movs	r1, r0
   30f7c:	687b      	ldr	r3, [r7, #4]
   30f7e:	22dc      	movs	r2, #220	; 0xdc
   30f80:	5099      	str	r1, [r3, r2]
   30f82:	e08b      	b.n	3109c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   30f84:	4953      	ldr	r1, [pc, #332]	; (310d4 <_http_client_handle_header+0x294>)
   30f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f88:	2213      	movs	r2, #19
   30f8a:	0018      	movs	r0, r3
   30f8c:	4b4e      	ldr	r3, [pc, #312]	; (310c8 <_http_client_handle_header+0x288>)
   30f8e:	4798      	blx	r3
   30f90:	1e03      	subs	r3, r0, #0
   30f92:	d127      	bne.n	30fe4 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   30f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f96:	3313      	adds	r3, #19
   30f98:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30f9a:	e01e      	b.n	30fda <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   30f9c:	6a3b      	ldr	r3, [r7, #32]
   30f9e:	781b      	ldrb	r3, [r3, #0]
   30fa0:	2b20      	cmp	r3, #32
   30fa2:	d103      	bne.n	30fac <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30fa4:	6a3b      	ldr	r3, [r7, #32]
   30fa6:	3301      	adds	r3, #1
   30fa8:	623b      	str	r3, [r7, #32]
   30faa:	e016      	b.n	30fda <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   30fac:	6a3b      	ldr	r3, [r7, #32]
   30fae:	781b      	ldrb	r3, [r3, #0]
   30fb0:	2b43      	cmp	r3, #67	; 0x43
   30fb2:	d003      	beq.n	30fbc <_http_client_handle_header+0x17c>
   30fb4:	6a3b      	ldr	r3, [r7, #32]
   30fb6:	781b      	ldrb	r3, [r3, #0]
   30fb8:	2b63      	cmp	r3, #99	; 0x63
   30fba:	d105      	bne.n	30fc8 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   30fbc:	687b      	ldr	r3, [r7, #4]
   30fbe:	21cc      	movs	r1, #204	; 0xcc
   30fc0:	2201      	movs	r2, #1
   30fc2:	4252      	negs	r2, r2
   30fc4:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   30fc6:	e069      	b.n	3109c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   30fc8:	2386      	movs	r3, #134	; 0x86
   30fca:	425a      	negs	r2, r3
   30fcc:	687b      	ldr	r3, [r7, #4]
   30fce:	0011      	movs	r1, r2
   30fd0:	0018      	movs	r0, r3
   30fd2:	4b41      	ldr	r3, [pc, #260]	; (310d8 <_http_client_handle_header+0x298>)
   30fd4:	4798      	blx	r3
					return 0;
   30fd6:	2300      	movs	r3, #0
   30fd8:	e06a      	b.n	310b0 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30fda:	69ba      	ldr	r2, [r7, #24]
   30fdc:	6a3b      	ldr	r3, [r7, #32]
   30fde:	429a      	cmp	r2, r3
   30fe0:	d8dc      	bhi.n	30f9c <_http_client_handle_header+0x15c>
   30fe2:	e05b      	b.n	3109c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   30fe4:	493d      	ldr	r1, [pc, #244]	; (310dc <_http_client_handle_header+0x29c>)
   30fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fe8:	220c      	movs	r2, #12
   30fea:	0018      	movs	r0, r3
   30fec:	4b36      	ldr	r3, [pc, #216]	; (310c8 <_http_client_handle_header+0x288>)
   30fee:	4798      	blx	r3
   30ff0:	1e03      	subs	r3, r0, #0
   30ff2:	d126      	bne.n	31042 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   30ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ff6:	330c      	adds	r3, #12
   30ff8:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30ffa:	e01d      	b.n	31038 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   30ffc:	69fb      	ldr	r3, [r7, #28]
   30ffe:	781b      	ldrb	r3, [r3, #0]
   31000:	2b20      	cmp	r3, #32
   31002:	d103      	bne.n	3100c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31004:	69fb      	ldr	r3, [r7, #28]
   31006:	3301      	adds	r3, #1
   31008:	61fb      	str	r3, [r7, #28]
   3100a:	e015      	b.n	31038 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   3100c:	69fb      	ldr	r3, [r7, #28]
   3100e:	781b      	ldrb	r3, [r3, #0]
   31010:	2b4b      	cmp	r3, #75	; 0x4b
   31012:	d003      	beq.n	3101c <_http_client_handle_header+0x1dc>
   31014:	69fb      	ldr	r3, [r7, #28]
   31016:	781b      	ldrb	r3, [r3, #0]
   31018:	2b6b      	cmp	r3, #107	; 0x6b
   3101a:	d106      	bne.n	3102a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   3101c:	687b      	ldr	r3, [r7, #4]
   3101e:	2241      	movs	r2, #65	; 0x41
   31020:	5c99      	ldrb	r1, [r3, r2]
   31022:	2002      	movs	r0, #2
   31024:	4301      	orrs	r1, r0
   31026:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   31028:	e038      	b.n	3109c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   3102a:	687b      	ldr	r3, [r7, #4]
   3102c:	2241      	movs	r2, #65	; 0x41
   3102e:	5c99      	ldrb	r1, [r3, r2]
   31030:	2002      	movs	r0, #2
   31032:	4381      	bics	r1, r0
   31034:	5499      	strb	r1, [r3, r2]
				break;
   31036:	e031      	b.n	3109c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31038:	69ba      	ldr	r2, [r7, #24]
   3103a:	69fb      	ldr	r3, [r7, #28]
   3103c:	429a      	cmp	r2, r3
   3103e:	d8dd      	bhi.n	30ffc <_http_client_handle_header+0x1bc>
   31040:	e02c      	b.n	3109c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31042:	4927      	ldr	r1, [pc, #156]	; (310e0 <_http_client_handle_header+0x2a0>)
   31044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31046:	2205      	movs	r2, #5
   31048:	0018      	movs	r0, r3
   3104a:	4b1f      	ldr	r3, [pc, #124]	; (310c8 <_http_client_handle_header+0x288>)
   3104c:	4798      	blx	r3
   3104e:	1e03      	subs	r3, r0, #0
   31050:	d124      	bne.n	3109c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31054:	3309      	adds	r3, #9
   31056:	0018      	movs	r0, r3
   31058:	4b1d      	ldr	r3, [pc, #116]	; (310d0 <_http_client_handle_header+0x290>)
   3105a:	4798      	blx	r3
   3105c:	0003      	movs	r3, r0
   3105e:	b299      	uxth	r1, r3
   31060:	687b      	ldr	r3, [r7, #4]
   31062:	22e4      	movs	r2, #228	; 0xe4
   31064:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31066:	687b      	ldr	r3, [r7, #4]
   31068:	22dc      	movs	r2, #220	; 0xdc
   3106a:	2100      	movs	r1, #0
   3106c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   3106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31070:	3305      	adds	r3, #5
   31072:	781b      	ldrb	r3, [r3, #0]
   31074:	2b31      	cmp	r3, #49	; 0x31
   31076:	d804      	bhi.n	31082 <_http_client_handle_header+0x242>
   31078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3107a:	3307      	adds	r3, #7
   3107c:	781b      	ldrb	r3, [r3, #0]
   3107e:	2b30      	cmp	r3, #48	; 0x30
   31080:	d906      	bls.n	31090 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31082:	687b      	ldr	r3, [r7, #4]
   31084:	2241      	movs	r2, #65	; 0x41
   31086:	5c99      	ldrb	r1, [r3, r2]
   31088:	2002      	movs	r0, #2
   3108a:	4301      	orrs	r1, r0
   3108c:	5499      	strb	r1, [r3, r2]
   3108e:	e005      	b.n	3109c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31090:	687b      	ldr	r3, [r7, #4]
   31092:	2241      	movs	r2, #65	; 0x41
   31094:	5c99      	ldrb	r1, [r3, r2]
   31096:	2002      	movs	r0, #2
   31098:	4381      	bics	r1, r0
   3109a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   3109c:	4b06      	ldr	r3, [pc, #24]	; (310b8 <_http_client_handle_header+0x278>)
   3109e:	681b      	ldr	r3, [r3, #0]
   310a0:	0018      	movs	r0, r3
   310a2:	4b08      	ldr	r3, [pc, #32]	; (310c4 <_http_client_handle_header+0x284>)
   310a4:	4798      	blx	r3
   310a6:	0002      	movs	r2, r0
   310a8:	69bb      	ldr	r3, [r7, #24]
   310aa:	189b      	adds	r3, r3, r2
   310ac:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   310ae:	e6ce      	b.n	30e4e <_http_client_handle_header+0xe>
	}
}
   310b0:	0018      	movs	r0, r3
   310b2:	46bd      	mov	sp, r7
   310b4:	b00b      	add	sp, #44	; 0x2c
   310b6:	bd90      	pop	{r4, r7, pc}
   310b8:	2000011c 	.word	0x2000011c
   310bc:	00034a29 	.word	0x00034a29
   310c0:	000314a5 	.word	0x000314a5
   310c4:	000349ab 	.word	0x000349ab
   310c8:	000349b9 	.word	0x000349b9
   310cc:	000397f0 	.word	0x000397f0
   310d0:	0003455d 	.word	0x0003455d
   310d4:	00039814 	.word	0x00039814
   310d8:	000304bd 	.word	0x000304bd
   310dc:	00039828 	.word	0x00039828
   310e0:	00039838 	.word	0x00039838

000310e4 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   310e4:	b580      	push	{r7, lr}
   310e6:	b088      	sub	sp, #32
   310e8:	af00      	add	r7, sp, #0
   310ea:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   310ec:	687b      	ldr	r3, [r7, #4]
   310ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   310f0:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   310f2:	2300      	movs	r3, #0
   310f4:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   310f6:	687b      	ldr	r3, [r7, #4]
   310f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   310fa:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   310fc:	687b      	ldr	r3, [r7, #4]
   310fe:	22e0      	movs	r2, #224	; 0xe0
   31100:	589b      	ldr	r3, [r3, r2]
   31102:	2b00      	cmp	r3, #0
   31104:	db71      	blt.n	311ea <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31106:	687b      	ldr	r3, [r7, #4]
   31108:	22e0      	movs	r2, #224	; 0xe0
   3110a:	589b      	ldr	r3, [r3, r2]
   3110c:	2b00      	cmp	r3, #0
   3110e:	d134      	bne.n	3117a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31110:	687b      	ldr	r3, [r7, #4]
   31112:	22d8      	movs	r2, #216	; 0xd8
   31114:	2100      	movs	r1, #0
   31116:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31118:	687b      	ldr	r3, [r7, #4]
   3111a:	22e4      	movs	r2, #228	; 0xe4
   3111c:	2100      	movs	r1, #0
   3111e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31120:	2308      	movs	r3, #8
   31122:	18fb      	adds	r3, r7, r3
   31124:	2201      	movs	r2, #1
   31126:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31128:	2308      	movs	r3, #8
   3112a:	18fb      	adds	r3, r7, r3
   3112c:	2200      	movs	r2, #0
   3112e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31130:	2308      	movs	r3, #8
   31132:	18fb      	adds	r3, r7, r3
   31134:	2200      	movs	r2, #0
   31136:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31138:	687b      	ldr	r3, [r7, #4]
   3113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3113c:	2b00      	cmp	r3, #0
   3113e:	d006      	beq.n	3114e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31140:	687b      	ldr	r3, [r7, #4]
   31142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31144:	2208      	movs	r2, #8
   31146:	18ba      	adds	r2, r7, r2
   31148:	6878      	ldr	r0, [r7, #4]
   3114a:	2103      	movs	r1, #3
   3114c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   3114e:	687b      	ldr	r3, [r7, #4]
   31150:	2241      	movs	r2, #65	; 0x41
   31152:	5c9b      	ldrb	r3, [r3, r2]
   31154:	2202      	movs	r2, #2
   31156:	4013      	ands	r3, r2
   31158:	b2db      	uxtb	r3, r3
   3115a:	2b00      	cmp	r3, #0
   3115c:	d105      	bne.n	3116a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   3115e:	687b      	ldr	r3, [r7, #4]
   31160:	2100      	movs	r1, #0
   31162:	0018      	movs	r0, r3
   31164:	4b62      	ldr	r3, [pc, #392]	; (312f0 <_http_client_read_chuked_entity+0x20c>)
   31166:	4798      	blx	r3
					return;
   31168:	e0bf      	b.n	312ea <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3116a:	697b      	ldr	r3, [r7, #20]
   3116c:	1c9a      	adds	r2, r3, #2
   3116e:	687b      	ldr	r3, [r7, #4]
   31170:	0011      	movs	r1, r2
   31172:	0018      	movs	r0, r3
   31174:	4b5f      	ldr	r3, [pc, #380]	; (312f4 <_http_client_read_chuked_entity+0x210>)
   31176:	4798      	blx	r3
   31178:	e0b2      	b.n	312e0 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3117a:	687b      	ldr	r3, [r7, #4]
   3117c:	22e0      	movs	r2, #224	; 0xe0
   3117e:	589a      	ldr	r2, [r3, r2]
   31180:	69fb      	ldr	r3, [r7, #28]
   31182:	429a      	cmp	r2, r3
   31184:	dd00      	ble.n	31188 <_http_client_read_chuked_entity+0xa4>
   31186:	e0ab      	b.n	312e0 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31188:	687b      	ldr	r3, [r7, #4]
   3118a:	22e0      	movs	r2, #224	; 0xe0
   3118c:	589b      	ldr	r3, [r3, r2]
   3118e:	001a      	movs	r2, r3
   31190:	2308      	movs	r3, #8
   31192:	18fb      	adds	r3, r7, r3
   31194:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31196:	2308      	movs	r3, #8
   31198:	18fb      	adds	r3, r7, r3
   3119a:	697a      	ldr	r2, [r7, #20]
   3119c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3119e:	2308      	movs	r3, #8
   311a0:	18fb      	adds	r3, r7, r3
   311a2:	2200      	movs	r2, #0
   311a4:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   311a6:	687b      	ldr	r3, [r7, #4]
   311a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   311aa:	2b00      	cmp	r3, #0
   311ac:	d006      	beq.n	311bc <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   311ae:	687b      	ldr	r3, [r7, #4]
   311b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   311b2:	2208      	movs	r2, #8
   311b4:	18ba      	adds	r2, r7, r2
   311b6:	6878      	ldr	r0, [r7, #4]
   311b8:	2103      	movs	r1, #3
   311ba:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   311bc:	687b      	ldr	r3, [r7, #4]
   311be:	22e0      	movs	r2, #224	; 0xe0
   311c0:	589b      	ldr	r3, [r3, r2]
   311c2:	3302      	adds	r3, #2
   311c4:	697a      	ldr	r2, [r7, #20]
   311c6:	18d2      	adds	r2, r2, r3
   311c8:	687b      	ldr	r3, [r7, #4]
   311ca:	0011      	movs	r1, r2
   311cc:	0018      	movs	r0, r3
   311ce:	4b49      	ldr	r3, [pc, #292]	; (312f4 <_http_client_read_chuked_entity+0x210>)
   311d0:	4798      	blx	r3
				length = (int)module->recved_size;
   311d2:	687b      	ldr	r3, [r7, #4]
   311d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   311d6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   311d8:	687b      	ldr	r3, [r7, #4]
   311da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   311dc:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   311de:	687b      	ldr	r3, [r7, #4]
   311e0:	21e0      	movs	r1, #224	; 0xe0
   311e2:	2201      	movs	r2, #1
   311e4:	4252      	negs	r2, r2
   311e6:	505a      	str	r2, [r3, r1]
   311e8:	e07a      	b.n	312e0 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   311ea:	687b      	ldr	r3, [r7, #4]
   311ec:	22e0      	movs	r2, #224	; 0xe0
   311ee:	2100      	movs	r1, #0
   311f0:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   311f2:	e05a      	b.n	312aa <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   311f4:	697b      	ldr	r3, [r7, #20]
   311f6:	781b      	ldrb	r3, [r3, #0]
   311f8:	2b0a      	cmp	r3, #10
   311fa:	d106      	bne.n	3120a <_http_client_read_chuked_entity+0x126>
					buffer++;
   311fc:	697b      	ldr	r3, [r7, #20]
   311fe:	3301      	adds	r3, #1
   31200:	617b      	str	r3, [r7, #20]
					length--;
   31202:	69fb      	ldr	r3, [r7, #28]
   31204:	3b01      	subs	r3, #1
   31206:	61fb      	str	r3, [r7, #28]
					break;
   31208:	e052      	b.n	312b0 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   3120a:	69bb      	ldr	r3, [r7, #24]
   3120c:	2b00      	cmp	r3, #0
   3120e:	d145      	bne.n	3129c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   31210:	697b      	ldr	r3, [r7, #20]
   31212:	781b      	ldrb	r3, [r3, #0]
   31214:	2b2f      	cmp	r3, #47	; 0x2f
   31216:	d910      	bls.n	3123a <_http_client_read_chuked_entity+0x156>
   31218:	697b      	ldr	r3, [r7, #20]
   3121a:	781b      	ldrb	r3, [r3, #0]
   3121c:	2b39      	cmp	r3, #57	; 0x39
   3121e:	d80c      	bhi.n	3123a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   31220:	687b      	ldr	r3, [r7, #4]
   31222:	22e0      	movs	r2, #224	; 0xe0
   31224:	589b      	ldr	r3, [r3, r2]
   31226:	011b      	lsls	r3, r3, #4
   31228:	697a      	ldr	r2, [r7, #20]
   3122a:	7812      	ldrb	r2, [r2, #0]
   3122c:	189b      	adds	r3, r3, r2
   3122e:	3b30      	subs	r3, #48	; 0x30
   31230:	001a      	movs	r2, r3
   31232:	687b      	ldr	r3, [r7, #4]
   31234:	21e0      	movs	r1, #224	; 0xe0
   31236:	505a      	str	r2, [r3, r1]
   31238:	e031      	b.n	3129e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   3123a:	697b      	ldr	r3, [r7, #20]
   3123c:	781b      	ldrb	r3, [r3, #0]
   3123e:	2b60      	cmp	r3, #96	; 0x60
   31240:	d910      	bls.n	31264 <_http_client_read_chuked_entity+0x180>
   31242:	697b      	ldr	r3, [r7, #20]
   31244:	781b      	ldrb	r3, [r3, #0]
   31246:	2b66      	cmp	r3, #102	; 0x66
   31248:	d80c      	bhi.n	31264 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   3124a:	687b      	ldr	r3, [r7, #4]
   3124c:	22e0      	movs	r2, #224	; 0xe0
   3124e:	589b      	ldr	r3, [r3, r2]
   31250:	011b      	lsls	r3, r3, #4
   31252:	697a      	ldr	r2, [r7, #20]
   31254:	7812      	ldrb	r2, [r2, #0]
   31256:	189b      	adds	r3, r3, r2
   31258:	3b61      	subs	r3, #97	; 0x61
   3125a:	001a      	movs	r2, r3
   3125c:	687b      	ldr	r3, [r7, #4]
   3125e:	21e0      	movs	r1, #224	; 0xe0
   31260:	505a      	str	r2, [r3, r1]
   31262:	e01c      	b.n	3129e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31264:	697b      	ldr	r3, [r7, #20]
   31266:	781b      	ldrb	r3, [r3, #0]
   31268:	2b40      	cmp	r3, #64	; 0x40
   3126a:	d910      	bls.n	3128e <_http_client_read_chuked_entity+0x1aa>
   3126c:	697b      	ldr	r3, [r7, #20]
   3126e:	781b      	ldrb	r3, [r3, #0]
   31270:	2b46      	cmp	r3, #70	; 0x46
   31272:	d80c      	bhi.n	3128e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31274:	687b      	ldr	r3, [r7, #4]
   31276:	22e0      	movs	r2, #224	; 0xe0
   31278:	589b      	ldr	r3, [r3, r2]
   3127a:	011b      	lsls	r3, r3, #4
   3127c:	697a      	ldr	r2, [r7, #20]
   3127e:	7812      	ldrb	r2, [r2, #0]
   31280:	189b      	adds	r3, r3, r2
   31282:	3b41      	subs	r3, #65	; 0x41
   31284:	001a      	movs	r2, r3
   31286:	687b      	ldr	r3, [r7, #4]
   31288:	21e0      	movs	r1, #224	; 0xe0
   3128a:	505a      	str	r2, [r3, r1]
   3128c:	e007      	b.n	3129e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   3128e:	697b      	ldr	r3, [r7, #20]
   31290:	781b      	ldrb	r3, [r3, #0]
   31292:	2b3b      	cmp	r3, #59	; 0x3b
   31294:	d103      	bne.n	3129e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31296:	2301      	movs	r3, #1
   31298:	61bb      	str	r3, [r7, #24]
   3129a:	e000      	b.n	3129e <_http_client_read_chuked_entity+0x1ba>
					continue;
   3129c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3129e:	697b      	ldr	r3, [r7, #20]
   312a0:	3301      	adds	r3, #1
   312a2:	617b      	str	r3, [r7, #20]
   312a4:	69fb      	ldr	r3, [r7, #28]
   312a6:	3b01      	subs	r3, #1
   312a8:	61fb      	str	r3, [r7, #28]
   312aa:	69fb      	ldr	r3, [r7, #28]
   312ac:	2b00      	cmp	r3, #0
   312ae:	dca1      	bgt.n	311f4 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   312b0:	687b      	ldr	r3, [r7, #4]
   312b2:	22e0      	movs	r2, #224	; 0xe0
   312b4:	589a      	ldr	r2, [r3, r2]
   312b6:	687b      	ldr	r3, [r7, #4]
   312b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   312ba:	429a      	cmp	r2, r3
   312bc:	dd07      	ble.n	312ce <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   312be:	238b      	movs	r3, #139	; 0x8b
   312c0:	425a      	negs	r2, r3
   312c2:	687b      	ldr	r3, [r7, #4]
   312c4:	0011      	movs	r1, r2
   312c6:	0018      	movs	r0, r3
   312c8:	4b09      	ldr	r3, [pc, #36]	; (312f0 <_http_client_read_chuked_entity+0x20c>)
   312ca:	4798      	blx	r3
				return;
   312cc:	e00d      	b.n	312ea <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   312ce:	69fb      	ldr	r3, [r7, #28]
   312d0:	2b00      	cmp	r3, #0
   312d2:	d105      	bne.n	312e0 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   312d4:	687b      	ldr	r3, [r7, #4]
   312d6:	21e0      	movs	r1, #224	; 0xe0
   312d8:	2201      	movs	r2, #1
   312da:	4252      	negs	r2, r2
   312dc:	505a      	str	r2, [r3, r1]
				return;
   312de:	e004      	b.n	312ea <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   312e0:	687b      	ldr	r3, [r7, #4]
   312e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   312e4:	2b00      	cmp	r3, #0
   312e6:	d000      	beq.n	312ea <_http_client_read_chuked_entity+0x206>
   312e8:	e708      	b.n	310fc <_http_client_read_chuked_entity+0x18>
}
   312ea:	46bd      	mov	sp, r7
   312ec:	b008      	add	sp, #32
   312ee:	bd80      	pop	{r7, pc}
   312f0:	000304bd 	.word	0x000304bd
   312f4:	000314a5 	.word	0x000314a5

000312f8 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   312f8:	b580      	push	{r7, lr}
   312fa:	b086      	sub	sp, #24
   312fc:	af00      	add	r7, sp, #0
   312fe:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31300:	687b      	ldr	r3, [r7, #4]
   31302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31304:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31306:	687b      	ldr	r3, [r7, #4]
   31308:	22dc      	movs	r2, #220	; 0xdc
   3130a:	589b      	ldr	r3, [r3, r2]
   3130c:	2b00      	cmp	r3, #0
   3130e:	db58      	blt.n	313c2 <_http_client_handle_entity+0xca>
   31310:	687b      	ldr	r3, [r7, #4]
   31312:	22dc      	movs	r2, #220	; 0xdc
   31314:	589a      	ldr	r2, [r3, r2]
   31316:	687b      	ldr	r3, [r7, #4]
   31318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3131a:	429a      	cmp	r2, r3
   3131c:	dc51      	bgt.n	313c2 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   3131e:	687b      	ldr	r3, [r7, #4]
   31320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31322:	0019      	movs	r1, r3
   31324:	687b      	ldr	r3, [r7, #4]
   31326:	22dc      	movs	r2, #220	; 0xdc
   31328:	589b      	ldr	r3, [r3, r2]
   3132a:	4299      	cmp	r1, r3
   3132c:	da00      	bge.n	31330 <_http_client_handle_entity+0x38>
   3132e:	e0a9      	b.n	31484 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31330:	687b      	ldr	r3, [r7, #4]
   31332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31334:	2b00      	cmp	r3, #0
   31336:	d020      	beq.n	3137a <_http_client_handle_entity+0x82>
   31338:	687b      	ldr	r3, [r7, #4]
   3133a:	22e4      	movs	r2, #228	; 0xe4
   3133c:	5a9b      	ldrh	r3, [r3, r2]
   3133e:	2b00      	cmp	r3, #0
   31340:	d01b      	beq.n	3137a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31342:	687b      	ldr	r3, [r7, #4]
   31344:	22e4      	movs	r2, #228	; 0xe4
   31346:	5a9a      	ldrh	r2, [r3, r2]
   31348:	2308      	movs	r3, #8
   3134a:	18fb      	adds	r3, r7, r3
   3134c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   3134e:	2308      	movs	r3, #8
   31350:	18fb      	adds	r3, r7, r3
   31352:	2200      	movs	r2, #0
   31354:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31356:	687b      	ldr	r3, [r7, #4]
   31358:	22dc      	movs	r2, #220	; 0xdc
   3135a:	589b      	ldr	r3, [r3, r2]
   3135c:	001a      	movs	r2, r3
   3135e:	2308      	movs	r3, #8
   31360:	18fb      	adds	r3, r7, r3
   31362:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31364:	2308      	movs	r3, #8
   31366:	18fb      	adds	r3, r7, r3
   31368:	697a      	ldr	r2, [r7, #20]
   3136a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3136c:	687b      	ldr	r3, [r7, #4]
   3136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31370:	2208      	movs	r2, #8
   31372:	18ba      	adds	r2, r7, r2
   31374:	6878      	ldr	r0, [r7, #4]
   31376:	2102      	movs	r1, #2
   31378:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   3137a:	687b      	ldr	r3, [r7, #4]
   3137c:	22d8      	movs	r2, #216	; 0xd8
   3137e:	2100      	movs	r1, #0
   31380:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31382:	687b      	ldr	r3, [r7, #4]
   31384:	22e4      	movs	r2, #228	; 0xe4
   31386:	2100      	movs	r1, #0
   31388:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   3138a:	687b      	ldr	r3, [r7, #4]
   3138c:	2241      	movs	r2, #65	; 0x41
   3138e:	5c9b      	ldrb	r3, [r3, r2]
   31390:	2202      	movs	r2, #2
   31392:	4013      	ands	r3, r2
   31394:	b2db      	uxtb	r3, r3
   31396:	2b00      	cmp	r3, #0
   31398:	d105      	bne.n	313a6 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   3139a:	687b      	ldr	r3, [r7, #4]
   3139c:	2100      	movs	r1, #0
   3139e:	0018      	movs	r0, r3
   313a0:	4b3b      	ldr	r3, [pc, #236]	; (31490 <_http_client_handle_entity+0x198>)
   313a2:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   313a4:	e06e      	b.n	31484 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   313a6:	687b      	ldr	r3, [r7, #4]
   313a8:	22dc      	movs	r2, #220	; 0xdc
   313aa:	589b      	ldr	r3, [r3, r2]
   313ac:	001a      	movs	r2, r3
   313ae:	697b      	ldr	r3, [r7, #20]
   313b0:	189a      	adds	r2, r3, r2
   313b2:	687b      	ldr	r3, [r7, #4]
   313b4:	0011      	movs	r1, r2
   313b6:	0018      	movs	r0, r3
   313b8:	4b36      	ldr	r3, [pc, #216]	; (31494 <_http_client_handle_entity+0x19c>)
   313ba:	4798      	blx	r3
				return module->recved_size;
   313bc:	687b      	ldr	r3, [r7, #4]
   313be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   313c0:	e061      	b.n	31486 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   313c2:	687b      	ldr	r3, [r7, #4]
   313c4:	22dc      	movs	r2, #220	; 0xdc
   313c6:	589b      	ldr	r3, [r3, r2]
   313c8:	2b00      	cmp	r3, #0
   313ca:	db57      	blt.n	3147c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   313cc:	687b      	ldr	r3, [r7, #4]
   313ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   313d0:	2308      	movs	r3, #8
   313d2:	18fb      	adds	r3, r7, r3
   313d4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   313d6:	2308      	movs	r3, #8
   313d8:	18fb      	adds	r3, r7, r3
   313da:	697a      	ldr	r2, [r7, #20]
   313dc:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   313de:	687b      	ldr	r3, [r7, #4]
   313e0:	22e0      	movs	r2, #224	; 0xe0
   313e2:	589a      	ldr	r2, [r3, r2]
   313e4:	687b      	ldr	r3, [r7, #4]
   313e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   313e8:	18d2      	adds	r2, r2, r3
   313ea:	687b      	ldr	r3, [r7, #4]
   313ec:	21e0      	movs	r1, #224	; 0xe0
   313ee:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   313f0:	687b      	ldr	r3, [r7, #4]
   313f2:	22dc      	movs	r2, #220	; 0xdc
   313f4:	589a      	ldr	r2, [r3, r2]
   313f6:	687b      	ldr	r3, [r7, #4]
   313f8:	21e0      	movs	r1, #224	; 0xe0
   313fa:	585b      	ldr	r3, [r3, r1]
   313fc:	429a      	cmp	r2, r3
   313fe:	dc0c      	bgt.n	3141a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31400:	687b      	ldr	r3, [r7, #4]
   31402:	22d8      	movs	r2, #216	; 0xd8
   31404:	2100      	movs	r1, #0
   31406:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31408:	687b      	ldr	r3, [r7, #4]
   3140a:	22e4      	movs	r2, #228	; 0xe4
   3140c:	2100      	movs	r1, #0
   3140e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31410:	2308      	movs	r3, #8
   31412:	18fb      	adds	r3, r7, r3
   31414:	2201      	movs	r2, #1
   31416:	721a      	strb	r2, [r3, #8]
   31418:	e003      	b.n	31422 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   3141a:	2308      	movs	r3, #8
   3141c:	18fb      	adds	r3, r7, r3
   3141e:	2200      	movs	r2, #0
   31420:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31422:	687b      	ldr	r3, [r7, #4]
   31424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31426:	2b00      	cmp	r3, #0
   31428:	d006      	beq.n	31438 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3142a:	687b      	ldr	r3, [r7, #4]
   3142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3142e:	2208      	movs	r2, #8
   31430:	18ba      	adds	r2, r7, r2
   31432:	6878      	ldr	r0, [r7, #4]
   31434:	2103      	movs	r1, #3
   31436:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31438:	2308      	movs	r3, #8
   3143a:	18fb      	adds	r3, r7, r3
   3143c:	7a1b      	ldrb	r3, [r3, #8]
   3143e:	2b01      	cmp	r3, #1
   31440:	d112      	bne.n	31468 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31442:	687b      	ldr	r3, [r7, #4]
   31444:	2241      	movs	r2, #65	; 0x41
   31446:	5c9b      	ldrb	r3, [r3, r2]
   31448:	2202      	movs	r2, #2
   3144a:	4013      	ands	r3, r2
   3144c:	b2db      	uxtb	r3, r3
   3144e:	2b00      	cmp	r3, #0
   31450:	d10a      	bne.n	31468 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31452:	4b11      	ldr	r3, [pc, #68]	; (31498 <_http_client_handle_entity+0x1a0>)
   31454:	0018      	movs	r0, r3
   31456:	4b11      	ldr	r3, [pc, #68]	; (3149c <_http_client_handle_entity+0x1a4>)
   31458:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   3145a:	687b      	ldr	r3, [r7, #4]
   3145c:	2100      	movs	r1, #0
   3145e:	0018      	movs	r0, r3
   31460:	4b0b      	ldr	r3, [pc, #44]	; (31490 <_http_client_handle_entity+0x198>)
   31462:	4798      	blx	r3
					return 0;
   31464:	2300      	movs	r3, #0
   31466:	e00e      	b.n	31486 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31468:	687b      	ldr	r3, [r7, #4]
   3146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3146c:	697a      	ldr	r2, [r7, #20]
   3146e:	18d2      	adds	r2, r2, r3
   31470:	687b      	ldr	r3, [r7, #4]
   31472:	0011      	movs	r1, r2
   31474:	0018      	movs	r0, r3
   31476:	4b07      	ldr	r3, [pc, #28]	; (31494 <_http_client_handle_entity+0x19c>)
   31478:	4798      	blx	r3
   3147a:	e003      	b.n	31484 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   3147c:	687b      	ldr	r3, [r7, #4]
   3147e:	0018      	movs	r0, r3
   31480:	4b07      	ldr	r3, [pc, #28]	; (314a0 <_http_client_handle_entity+0x1a8>)
   31482:	4798      	blx	r3
		}
	}

	return 0;
   31484:	2300      	movs	r3, #0
}
   31486:	0018      	movs	r0, r3
   31488:	46bd      	mov	sp, r7
   3148a:	b006      	add	sp, #24
   3148c:	bd80      	pop	{r7, pc}
   3148e:	46c0      	nop			; (mov r8, r8)
   31490:	000304bd 	.word	0x000304bd
   31494:	000314a5 	.word	0x000314a5
   31498:	00039840 	.word	0x00039840
   3149c:	00034831 	.word	0x00034831
   314a0:	000310e5 	.word	0x000310e5

000314a4 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   314a4:	b580      	push	{r7, lr}
   314a6:	b084      	sub	sp, #16
   314a8:	af00      	add	r7, sp, #0
   314aa:	6078      	str	r0, [r7, #4]
   314ac:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   314ae:	687b      	ldr	r3, [r7, #4]
   314b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   314b2:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   314b4:	687b      	ldr	r3, [r7, #4]
   314b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   314b8:	001a      	movs	r2, r3
   314ba:	683b      	ldr	r3, [r7, #0]
   314bc:	1ad2      	subs	r2, r2, r3
   314be:	68fb      	ldr	r3, [r7, #12]
   314c0:	18d3      	adds	r3, r2, r3
   314c2:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   314c4:	68bb      	ldr	r3, [r7, #8]
   314c6:	2b00      	cmp	r3, #0
   314c8:	dd09      	ble.n	314de <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   314ca:	68ba      	ldr	r2, [r7, #8]
   314cc:	6839      	ldr	r1, [r7, #0]
   314ce:	68fb      	ldr	r3, [r7, #12]
   314d0:	0018      	movs	r0, r3
   314d2:	4b06      	ldr	r3, [pc, #24]	; (314ec <_http_client_move_buffer+0x48>)
   314d4:	4798      	blx	r3
		module->recved_size = remain;
   314d6:	68ba      	ldr	r2, [r7, #8]
   314d8:	687b      	ldr	r3, [r7, #4]
   314da:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   314dc:	e002      	b.n	314e4 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   314de:	687b      	ldr	r3, [r7, #4]
   314e0:	2200      	movs	r2, #0
   314e2:	645a      	str	r2, [r3, #68]	; 0x44
}
   314e4:	46c0      	nop			; (mov r8, r8)
   314e6:	46bd      	mov	sp, r7
   314e8:	b004      	add	sp, #16
   314ea:	bd80      	pop	{r7, pc}
   314ec:	000345eb 	.word	0x000345eb

000314f0 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   314f0:	b580      	push	{r7, lr}
   314f2:	b084      	sub	sp, #16
   314f4:	af00      	add	r7, sp, #0
   314f6:	60f8      	str	r0, [r7, #12]
   314f8:	60b9      	str	r1, [r7, #8]
   314fa:	607a      	str	r2, [r7, #4]
   314fc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   314fe:	68fb      	ldr	r3, [r7, #12]
   31500:	687a      	ldr	r2, [r7, #4]
   31502:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31504:	68fb      	ldr	r3, [r7, #12]
   31506:	68ba      	ldr	r2, [r7, #8]
   31508:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   3150a:	68fb      	ldr	r3, [r7, #12]
   3150c:	2200      	movs	r2, #0
   3150e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31510:	68fb      	ldr	r3, [r7, #12]
   31512:	683a      	ldr	r2, [r7, #0]
   31514:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31516:	68fb      	ldr	r3, [r7, #12]
   31518:	69ba      	ldr	r2, [r7, #24]
   3151a:	60da      	str	r2, [r3, #12]
}
   3151c:	46c0      	nop			; (mov r8, r8)
   3151e:	46bd      	mov	sp, r7
   31520:	b004      	add	sp, #16
   31522:	bd80      	pop	{r7, pc}

00031524 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31524:	b580      	push	{r7, lr}
   31526:	b084      	sub	sp, #16
   31528:	af00      	add	r7, sp, #0
   3152a:	6078      	str	r0, [r7, #4]
   3152c:	000a      	movs	r2, r1
   3152e:	1cfb      	adds	r3, r7, #3
   31530:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31532:	687b      	ldr	r3, [r7, #4]
   31534:	681a      	ldr	r2, [r3, #0]
   31536:	687b      	ldr	r3, [r7, #4]
   31538:	685b      	ldr	r3, [r3, #4]
   3153a:	1ad3      	subs	r3, r2, r3
   3153c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3153e:	68fb      	ldr	r3, [r7, #12]
   31540:	2b00      	cmp	r3, #0
   31542:	dc03      	bgt.n	3154c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31544:	687b      	ldr	r3, [r7, #4]
   31546:	0018      	movs	r0, r3
   31548:	4b08      	ldr	r3, [pc, #32]	; (3156c <stream_writer_send_8+0x48>)
   3154a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3154c:	687b      	ldr	r3, [r7, #4]
   3154e:	6919      	ldr	r1, [r3, #16]
   31550:	687b      	ldr	r3, [r7, #4]
   31552:	685b      	ldr	r3, [r3, #4]
   31554:	1c58      	adds	r0, r3, #1
   31556:	687a      	ldr	r2, [r7, #4]
   31558:	6050      	str	r0, [r2, #4]
   3155a:	18cb      	adds	r3, r1, r3
   3155c:	1cfa      	adds	r2, r7, #3
   3155e:	7812      	ldrb	r2, [r2, #0]
   31560:	701a      	strb	r2, [r3, #0]
}
   31562:	46c0      	nop			; (mov r8, r8)
   31564:	46bd      	mov	sp, r7
   31566:	b004      	add	sp, #16
   31568:	bd80      	pop	{r7, pc}
   3156a:	46c0      	nop			; (mov r8, r8)
   3156c:	000315ad 	.word	0x000315ad

00031570 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31570:	b580      	push	{r7, lr}
   31572:	b084      	sub	sp, #16
   31574:	af00      	add	r7, sp, #0
   31576:	60f8      	str	r0, [r7, #12]
   31578:	60b9      	str	r1, [r7, #8]
   3157a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3157c:	e00d      	b.n	3159a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3157e:	68bb      	ldr	r3, [r7, #8]
   31580:	781b      	ldrb	r3, [r3, #0]
   31582:	b25a      	sxtb	r2, r3
   31584:	68fb      	ldr	r3, [r7, #12]
   31586:	0011      	movs	r1, r2
   31588:	0018      	movs	r0, r3
   3158a:	4b07      	ldr	r3, [pc, #28]	; (315a8 <stream_writer_send_buffer+0x38>)
   3158c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3158e:	687b      	ldr	r3, [r7, #4]
   31590:	3b01      	subs	r3, #1
   31592:	607b      	str	r3, [r7, #4]
   31594:	68bb      	ldr	r3, [r7, #8]
   31596:	3301      	adds	r3, #1
   31598:	60bb      	str	r3, [r7, #8]
   3159a:	687b      	ldr	r3, [r7, #4]
   3159c:	2b00      	cmp	r3, #0
   3159e:	d1ee      	bne.n	3157e <stream_writer_send_buffer+0xe>
	}
}
   315a0:	46c0      	nop			; (mov r8, r8)
   315a2:	46bd      	mov	sp, r7
   315a4:	b004      	add	sp, #16
   315a6:	bd80      	pop	{r7, pc}
   315a8:	00031525 	.word	0x00031525

000315ac <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   315ac:	b590      	push	{r4, r7, lr}
   315ae:	b083      	sub	sp, #12
   315b0:	af00      	add	r7, sp, #0
   315b2:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   315b4:	687b      	ldr	r3, [r7, #4]
   315b6:	685b      	ldr	r3, [r3, #4]
   315b8:	2b00      	cmp	r3, #0
   315ba:	d00c      	beq.n	315d6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   315bc:	687b      	ldr	r3, [r7, #4]
   315be:	689c      	ldr	r4, [r3, #8]
   315c0:	687b      	ldr	r3, [r7, #4]
   315c2:	68d8      	ldr	r0, [r3, #12]
   315c4:	687b      	ldr	r3, [r7, #4]
   315c6:	6919      	ldr	r1, [r3, #16]
   315c8:	687b      	ldr	r3, [r7, #4]
   315ca:	685b      	ldr	r3, [r3, #4]
   315cc:	001a      	movs	r2, r3
   315ce:	47a0      	blx	r4
		writer->written = 0;
   315d0:	687b      	ldr	r3, [r7, #4]
   315d2:	2200      	movs	r2, #0
   315d4:	605a      	str	r2, [r3, #4]
	}
}
   315d6:	46c0      	nop			; (mov r8, r8)
   315d8:	46bd      	mov	sp, r7
   315da:	b003      	add	sp, #12
   315dc:	bd90      	pop	{r4, r7, pc}
	...

000315e0 <system_cpu_clock_get_hz>:
{
   315e0:	b580      	push	{r7, lr}
   315e2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   315e4:	2000      	movs	r0, #0
   315e6:	4b05      	ldr	r3, [pc, #20]	; (315fc <system_cpu_clock_get_hz+0x1c>)
   315e8:	4798      	blx	r3
   315ea:	0002      	movs	r2, r0
   315ec:	4b04      	ldr	r3, [pc, #16]	; (31600 <system_cpu_clock_get_hz+0x20>)
   315ee:	7a1b      	ldrb	r3, [r3, #8]
   315f0:	b2db      	uxtb	r3, r3
   315f2:	40da      	lsrs	r2, r3
   315f4:	0013      	movs	r3, r2
}
   315f6:	0018      	movs	r0, r3
   315f8:	46bd      	mov	sp, r7
   315fa:	bd80      	pop	{r7, pc}
   315fc:	00028e95 	.word	0x00028e95
   31600:	40000400 	.word	0x40000400

00031604 <tcc_enable>:
{
   31604:	b580      	push	{r7, lr}
   31606:	b084      	sub	sp, #16
   31608:	af00      	add	r7, sp, #0
   3160a:	6078      	str	r0, [r7, #4]
	Tcc *const tcc_module = module_inst->hw;
   3160c:	687b      	ldr	r3, [r7, #4]
   3160e:	681b      	ldr	r3, [r3, #0]
   31610:	60fb      	str	r3, [r7, #12]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   31612:	46c0      	nop			; (mov r8, r8)
   31614:	68fb      	ldr	r3, [r7, #12]
   31616:	689b      	ldr	r3, [r3, #8]
   31618:	2202      	movs	r2, #2
   3161a:	4013      	ands	r3, r2
   3161c:	d1fa      	bne.n	31614 <tcc_enable+0x10>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3161e:	68fb      	ldr	r3, [r7, #12]
   31620:	681b      	ldr	r3, [r3, #0]
   31622:	2202      	movs	r2, #2
   31624:	431a      	orrs	r2, r3
   31626:	68fb      	ldr	r3, [r7, #12]
   31628:	601a      	str	r2, [r3, #0]
}
   3162a:	46c0      	nop			; (mov r8, r8)
   3162c:	46bd      	mov	sp, r7
   3162e:	b004      	add	sp, #16
   31630:	bd80      	pop	{r7, pc}
	...

00031634 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31634:	b580      	push	{r7, lr}
   31636:	b082      	sub	sp, #8
   31638:	af00      	add	r7, sp, #0
   3163a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3163c:	4b04      	ldr	r3, [pc, #16]	; (31650 <sw_timer_tcc_callback+0x1c>)
   3163e:	681b      	ldr	r3, [r3, #0]
   31640:	1c5a      	adds	r2, r3, #1
   31642:	4b03      	ldr	r3, [pc, #12]	; (31650 <sw_timer_tcc_callback+0x1c>)
   31644:	601a      	str	r2, [r3, #0]
}
   31646:	46c0      	nop			; (mov r8, r8)
   31648:	46bd      	mov	sp, r7
   3164a:	b002      	add	sp, #8
   3164c:	bd80      	pop	{r7, pc}
   3164e:	46c0      	nop			; (mov r8, r8)
   31650:	200046dc 	.word	0x200046dc

00031654 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31654:	b580      	push	{r7, lr}
   31656:	b082      	sub	sp, #8
   31658:	af00      	add	r7, sp, #0
   3165a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3165c:	687b      	ldr	r3, [r7, #4]
   3165e:	2264      	movs	r2, #100	; 0x64
   31660:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31662:	687b      	ldr	r3, [r7, #4]
   31664:	2200      	movs	r2, #0
   31666:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31668:	687b      	ldr	r3, [r7, #4]
   3166a:	2200      	movs	r2, #0
   3166c:	705a      	strb	r2, [r3, #1]
}
   3166e:	46c0      	nop			; (mov r8, r8)
   31670:	46bd      	mov	sp, r7
   31672:	b002      	add	sp, #8
   31674:	bd80      	pop	{r7, pc}
	...

00031678 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31678:	b590      	push	{r4, r7, lr}
   3167a:	b0b1      	sub	sp, #196	; 0xc4
   3167c:	af00      	add	r7, sp, #0
   3167e:	6078      	str	r0, [r7, #4]
   31680:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31682:	230c      	movs	r3, #12
   31684:	18fb      	adds	r3, r7, r3
   31686:	4a2e      	ldr	r2, [pc, #184]	; (31740 <sw_timer_init+0xc8>)
   31688:	ca13      	ldmia	r2!, {r0, r1, r4}
   3168a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3168c:	683b      	ldr	r3, [r7, #0]
   3168e:	885b      	ldrh	r3, [r3, #2]
   31690:	001a      	movs	r2, r3
   31692:	687b      	ldr	r3, [r7, #4]
   31694:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31696:	687b      	ldr	r3, [r7, #4]
   31698:	3314      	adds	r3, #20
   3169a:	22bc      	movs	r2, #188	; 0xbc
   3169c:	18ba      	adds	r2, r7, r2
   3169e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   316a0:	683b      	ldr	r3, [r7, #0]
   316a2:	781b      	ldrb	r3, [r3, #0]
   316a4:	001a      	movs	r2, r3
   316a6:	230c      	movs	r3, #12
   316a8:	18fb      	adds	r3, r7, r3
   316aa:	0092      	lsls	r2, r2, #2
   316ac:	58d2      	ldr	r2, [r2, r3]
   316ae:	2318      	movs	r3, #24
   316b0:	18fb      	adds	r3, r7, r3
   316b2:	0011      	movs	r1, r2
   316b4:	0018      	movs	r0, r3
   316b6:	4b23      	ldr	r3, [pc, #140]	; (31744 <sw_timer_init+0xcc>)
   316b8:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   316ba:	4b23      	ldr	r3, [pc, #140]	; (31748 <sw_timer_init+0xd0>)
   316bc:	4798      	blx	r3
   316be:	0004      	movs	r4, r0
   316c0:	683b      	ldr	r3, [r7, #0]
   316c2:	885b      	ldrh	r3, [r3, #2]
   316c4:	001a      	movs	r2, r3
   316c6:	4b21      	ldr	r3, [pc, #132]	; (3174c <sw_timer_init+0xd4>)
   316c8:	0011      	movs	r1, r2
   316ca:	22fa      	movs	r2, #250	; 0xfa
   316cc:	0210      	lsls	r0, r2, #8
   316ce:	4798      	blx	r3
   316d0:	0003      	movs	r3, r0
   316d2:	001a      	movs	r2, r3
   316d4:	4b1e      	ldr	r3, [pc, #120]	; (31750 <sw_timer_init+0xd8>)
   316d6:	0011      	movs	r1, r2
   316d8:	0020      	movs	r0, r4
   316da:	4798      	blx	r3
   316dc:	0003      	movs	r3, r0
   316de:	001a      	movs	r2, r3
   316e0:	2318      	movs	r3, #24
   316e2:	18fb      	adds	r3, r7, r3
   316e4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   316e6:	2318      	movs	r3, #24
   316e8:	18fb      	adds	r3, r7, r3
   316ea:	2205      	movs	r2, #5
   316ec:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   316ee:	683b      	ldr	r3, [r7, #0]
   316f0:	781b      	ldrb	r3, [r3, #0]
   316f2:	001a      	movs	r2, r3
   316f4:	230c      	movs	r3, #12
   316f6:	18fb      	adds	r3, r7, r3
   316f8:	0092      	lsls	r2, r2, #2
   316fa:	58d1      	ldr	r1, [r2, r3]
   316fc:	2318      	movs	r3, #24
   316fe:	18fa      	adds	r2, r7, r3
   31700:	23bc      	movs	r3, #188	; 0xbc
   31702:	18fb      	adds	r3, r7, r3
   31704:	681b      	ldr	r3, [r3, #0]
   31706:	0018      	movs	r0, r3
   31708:	4b12      	ldr	r3, [pc, #72]	; (31754 <sw_timer_init+0xdc>)
   3170a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3170c:	683b      	ldr	r3, [r7, #0]
   3170e:	785b      	ldrb	r3, [r3, #1]
   31710:	3308      	adds	r3, #8
   31712:	b2da      	uxtb	r2, r3
   31714:	4910      	ldr	r1, [pc, #64]	; (31758 <sw_timer_init+0xe0>)
   31716:	23bc      	movs	r3, #188	; 0xbc
   31718:	18fb      	adds	r3, r7, r3
   3171a:	681b      	ldr	r3, [r3, #0]
   3171c:	0018      	movs	r0, r3
   3171e:	4b0f      	ldr	r3, [pc, #60]	; (3175c <sw_timer_init+0xe4>)
   31720:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31722:	683b      	ldr	r3, [r7, #0]
   31724:	785b      	ldrb	r3, [r3, #1]
   31726:	3308      	adds	r3, #8
   31728:	b2da      	uxtb	r2, r3
   3172a:	23bc      	movs	r3, #188	; 0xbc
   3172c:	18fb      	adds	r3, r7, r3
   3172e:	681b      	ldr	r3, [r3, #0]
   31730:	0011      	movs	r1, r2
   31732:	0018      	movs	r0, r3
   31734:	4b0a      	ldr	r3, [pc, #40]	; (31760 <sw_timer_init+0xe8>)
   31736:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31738:	46c0      	nop			; (mov r8, r8)
   3173a:	46bd      	mov	sp, r7
   3173c:	b031      	add	sp, #196	; 0xc4
   3173e:	bd90      	pop	{r4, r7, pc}
   31740:	00039880 	.word	0x00039880
   31744:	0002942d 	.word	0x0002942d
   31748:	000315e1 	.word	0x000315e1
   3174c:	00031c69 	.word	0x00031c69
   31750:	00031b55 	.word	0x00031b55
   31754:	00029a89 	.word	0x00029a89
   31758:	00031635 	.word	0x00031635
   3175c:	00029fcd 	.word	0x00029fcd
   31760:	0002a00d 	.word	0x0002a00d

00031764 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31764:	b580      	push	{r7, lr}
   31766:	b084      	sub	sp, #16
   31768:	af00      	add	r7, sp, #0
   3176a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3176c:	687b      	ldr	r3, [r7, #4]
   3176e:	3314      	adds	r3, #20
   31770:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31772:	68fb      	ldr	r3, [r7, #12]
   31774:	0018      	movs	r0, r3
   31776:	4b03      	ldr	r3, [pc, #12]	; (31784 <sw_timer_enable+0x20>)
   31778:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3177a:	46c0      	nop			; (mov r8, r8)
   3177c:	46bd      	mov	sp, r7
   3177e:	b004      	add	sp, #16
   31780:	bd80      	pop	{r7, pc}
   31782:	46c0      	nop			; (mov r8, r8)
   31784:	00031605 	.word	0x00031605

00031788 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31788:	b580      	push	{r7, lr}
   3178a:	b086      	sub	sp, #24
   3178c:	af00      	add	r7, sp, #0
   3178e:	60f8      	str	r0, [r7, #12]
   31790:	60b9      	str	r1, [r7, #8]
   31792:	607a      	str	r2, [r7, #4]
   31794:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31796:	2300      	movs	r3, #0
   31798:	617b      	str	r3, [r7, #20]
   3179a:	e032      	b.n	31802 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3179c:	68f9      	ldr	r1, [r7, #12]
   3179e:	697a      	ldr	r2, [r7, #20]
   317a0:	0013      	movs	r3, r2
   317a2:	009b      	lsls	r3, r3, #2
   317a4:	189b      	adds	r3, r3, r2
   317a6:	009b      	lsls	r3, r3, #2
   317a8:	5c5b      	ldrb	r3, [r3, r1]
   317aa:	07db      	lsls	r3, r3, #31
   317ac:	0fdb      	lsrs	r3, r3, #31
   317ae:	b2db      	uxtb	r3, r3
   317b0:	2b00      	cmp	r3, #0
   317b2:	d123      	bne.n	317fc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   317b4:	697a      	ldr	r2, [r7, #20]
   317b6:	0013      	movs	r3, r2
   317b8:	009b      	lsls	r3, r3, #2
   317ba:	189b      	adds	r3, r3, r2
   317bc:	009b      	lsls	r3, r3, #2
   317be:	68fa      	ldr	r2, [r7, #12]
   317c0:	18d3      	adds	r3, r2, r3
   317c2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   317c4:	693b      	ldr	r3, [r7, #16]
   317c6:	68ba      	ldr	r2, [r7, #8]
   317c8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   317ca:	693b      	ldr	r3, [r7, #16]
   317cc:	781a      	ldrb	r2, [r3, #0]
   317ce:	2102      	movs	r1, #2
   317d0:	438a      	bics	r2, r1
   317d2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   317d4:	693b      	ldr	r3, [r7, #16]
   317d6:	687a      	ldr	r2, [r7, #4]
   317d8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   317da:	68fb      	ldr	r3, [r7, #12]
   317dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   317de:	4b0d      	ldr	r3, [pc, #52]	; (31814 <sw_timer_register_callback+0x8c>)
   317e0:	0011      	movs	r1, r2
   317e2:	6838      	ldr	r0, [r7, #0]
   317e4:	4798      	blx	r3
   317e6:	0003      	movs	r3, r0
   317e8:	001a      	movs	r2, r3
   317ea:	693b      	ldr	r3, [r7, #16]
   317ec:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   317ee:	693b      	ldr	r3, [r7, #16]
   317f0:	781a      	ldrb	r2, [r3, #0]
   317f2:	2101      	movs	r1, #1
   317f4:	430a      	orrs	r2, r1
   317f6:	701a      	strb	r2, [r3, #0]
			return index;
   317f8:	697b      	ldr	r3, [r7, #20]
   317fa:	e007      	b.n	3180c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   317fc:	697b      	ldr	r3, [r7, #20]
   317fe:	3301      	adds	r3, #1
   31800:	617b      	str	r3, [r7, #20]
   31802:	697b      	ldr	r3, [r7, #20]
   31804:	2b00      	cmp	r3, #0
   31806:	ddc9      	ble.n	3179c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31808:	2301      	movs	r3, #1
   3180a:	425b      	negs	r3, r3
}
   3180c:	0018      	movs	r0, r3
   3180e:	46bd      	mov	sp, r7
   31810:	b006      	add	sp, #24
   31812:	bd80      	pop	{r7, pc}
   31814:	00031b55 	.word	0x00031b55

00031818 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31818:	b580      	push	{r7, lr}
   3181a:	b086      	sub	sp, #24
   3181c:	af00      	add	r7, sp, #0
   3181e:	60f8      	str	r0, [r7, #12]
   31820:	60b9      	str	r1, [r7, #8]
   31822:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31824:	68ba      	ldr	r2, [r7, #8]
   31826:	0013      	movs	r3, r2
   31828:	009b      	lsls	r3, r3, #2
   3182a:	189b      	adds	r3, r3, r2
   3182c:	009b      	lsls	r3, r3, #2
   3182e:	68fa      	ldr	r2, [r7, #12]
   31830:	18d3      	adds	r3, r2, r3
   31832:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31834:	697b      	ldr	r3, [r7, #20]
   31836:	781a      	ldrb	r2, [r3, #0]
   31838:	2102      	movs	r1, #2
   3183a:	430a      	orrs	r2, r1
   3183c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3183e:	68fb      	ldr	r3, [r7, #12]
   31840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31842:	4b07      	ldr	r3, [pc, #28]	; (31860 <sw_timer_enable_callback+0x48>)
   31844:	0011      	movs	r1, r2
   31846:	6878      	ldr	r0, [r7, #4]
   31848:	4798      	blx	r3
   3184a:	0003      	movs	r3, r0
   3184c:	001a      	movs	r2, r3
   3184e:	4b05      	ldr	r3, [pc, #20]	; (31864 <sw_timer_enable_callback+0x4c>)
   31850:	681b      	ldr	r3, [r3, #0]
   31852:	18d2      	adds	r2, r2, r3
   31854:	697b      	ldr	r3, [r7, #20]
   31856:	611a      	str	r2, [r3, #16]
}
   31858:	46c0      	nop			; (mov r8, r8)
   3185a:	46bd      	mov	sp, r7
   3185c:	b006      	add	sp, #24
   3185e:	bd80      	pop	{r7, pc}
   31860:	00031b55 	.word	0x00031b55
   31864:	200046dc 	.word	0x200046dc

00031868 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   31868:	b580      	push	{r7, lr}
   3186a:	b084      	sub	sp, #16
   3186c:	af00      	add	r7, sp, #0
   3186e:	6078      	str	r0, [r7, #4]
   31870:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31872:	683a      	ldr	r2, [r7, #0]
   31874:	0013      	movs	r3, r2
   31876:	009b      	lsls	r3, r3, #2
   31878:	189b      	adds	r3, r3, r2
   3187a:	009b      	lsls	r3, r3, #2
   3187c:	687a      	ldr	r2, [r7, #4]
   3187e:	18d3      	adds	r3, r2, r3
   31880:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   31882:	68fb      	ldr	r3, [r7, #12]
   31884:	781a      	ldrb	r2, [r3, #0]
   31886:	2102      	movs	r1, #2
   31888:	438a      	bics	r2, r1
   3188a:	701a      	strb	r2, [r3, #0]
}
   3188c:	46c0      	nop			; (mov r8, r8)
   3188e:	46bd      	mov	sp, r7
   31890:	b004      	add	sp, #16
   31892:	bd80      	pop	{r7, pc}

00031894 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   31894:	b590      	push	{r4, r7, lr}
   31896:	b085      	sub	sp, #20
   31898:	af00      	add	r7, sp, #0
   3189a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3189c:	2300      	movs	r3, #0
   3189e:	60fb      	str	r3, [r7, #12]
   318a0:	e053      	b.n	3194a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   318a2:	6879      	ldr	r1, [r7, #4]
   318a4:	68fa      	ldr	r2, [r7, #12]
   318a6:	0013      	movs	r3, r2
   318a8:	009b      	lsls	r3, r3, #2
   318aa:	189b      	adds	r3, r3, r2
   318ac:	009b      	lsls	r3, r3, #2
   318ae:	5c5b      	ldrb	r3, [r3, r1]
   318b0:	07db      	lsls	r3, r3, #31
   318b2:	0fdb      	lsrs	r3, r3, #31
   318b4:	b2db      	uxtb	r3, r3
   318b6:	2b00      	cmp	r3, #0
   318b8:	d044      	beq.n	31944 <sw_timer_task+0xb0>
   318ba:	6879      	ldr	r1, [r7, #4]
   318bc:	68fa      	ldr	r2, [r7, #12]
   318be:	0013      	movs	r3, r2
   318c0:	009b      	lsls	r3, r3, #2
   318c2:	189b      	adds	r3, r3, r2
   318c4:	009b      	lsls	r3, r3, #2
   318c6:	5c5b      	ldrb	r3, [r3, r1]
   318c8:	079b      	lsls	r3, r3, #30
   318ca:	0fdb      	lsrs	r3, r3, #31
   318cc:	b2db      	uxtb	r3, r3
   318ce:	2b00      	cmp	r3, #0
   318d0:	d038      	beq.n	31944 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   318d2:	68fa      	ldr	r2, [r7, #12]
   318d4:	0013      	movs	r3, r2
   318d6:	009b      	lsls	r3, r3, #2
   318d8:	189b      	adds	r3, r3, r2
   318da:	009b      	lsls	r3, r3, #2
   318dc:	687a      	ldr	r2, [r7, #4]
   318de:	18d3      	adds	r3, r2, r3
   318e0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   318e2:	68bb      	ldr	r3, [r7, #8]
   318e4:	691a      	ldr	r2, [r3, #16]
   318e6:	4b1c      	ldr	r3, [pc, #112]	; (31958 <sw_timer_task+0xc4>)
   318e8:	681b      	ldr	r3, [r3, #0]
   318ea:	1ad3      	subs	r3, r2, r3
   318ec:	d52a      	bpl.n	31944 <sw_timer_task+0xb0>
   318ee:	68bb      	ldr	r3, [r7, #8]
   318f0:	781b      	ldrb	r3, [r3, #0]
   318f2:	2204      	movs	r2, #4
   318f4:	4013      	ands	r3, r2
   318f6:	b2db      	uxtb	r3, r3
   318f8:	2b00      	cmp	r3, #0
   318fa:	d123      	bne.n	31944 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   318fc:	68bb      	ldr	r3, [r7, #8]
   318fe:	781a      	ldrb	r2, [r3, #0]
   31900:	2104      	movs	r1, #4
   31902:	430a      	orrs	r2, r1
   31904:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   31906:	68bb      	ldr	r3, [r7, #8]
   31908:	68db      	ldr	r3, [r3, #12]
   3190a:	2b00      	cmp	r3, #0
   3190c:	d007      	beq.n	3191e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3190e:	68bb      	ldr	r3, [r7, #8]
   31910:	68da      	ldr	r2, [r3, #12]
   31912:	4b11      	ldr	r3, [pc, #68]	; (31958 <sw_timer_task+0xc4>)
   31914:	681b      	ldr	r3, [r3, #0]
   31916:	18d2      	adds	r2, r2, r3
   31918:	68bb      	ldr	r3, [r7, #8]
   3191a:	611a      	str	r2, [r3, #16]
   3191c:	e004      	b.n	31928 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3191e:	68bb      	ldr	r3, [r7, #8]
   31920:	781a      	ldrb	r2, [r3, #0]
   31922:	2102      	movs	r1, #2
   31924:	438a      	bics	r2, r1
   31926:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   31928:	68bb      	ldr	r3, [r7, #8]
   3192a:	685c      	ldr	r4, [r3, #4]
   3192c:	68bb      	ldr	r3, [r7, #8]
   3192e:	689a      	ldr	r2, [r3, #8]
   31930:	68bb      	ldr	r3, [r7, #8]
   31932:	68db      	ldr	r3, [r3, #12]
   31934:	68f9      	ldr	r1, [r7, #12]
   31936:	6878      	ldr	r0, [r7, #4]
   31938:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3193a:	68bb      	ldr	r3, [r7, #8]
   3193c:	781a      	ldrb	r2, [r3, #0]
   3193e:	2104      	movs	r1, #4
   31940:	438a      	bics	r2, r1
   31942:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31944:	68fb      	ldr	r3, [r7, #12]
   31946:	3301      	adds	r3, #1
   31948:	60fb      	str	r3, [r7, #12]
   3194a:	68fb      	ldr	r3, [r7, #12]
   3194c:	2b00      	cmp	r3, #0
   3194e:	dda8      	ble.n	318a2 <sw_timer_task+0xe>
			}
		}
	}
}
   31950:	46c0      	nop			; (mov r8, r8)
   31952:	46bd      	mov	sp, r7
   31954:	b005      	add	sp, #20
   31956:	bd90      	pop	{r4, r7, pc}
   31958:	200046dc 	.word	0x200046dc

0003195c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3195c:	b580      	push	{r7, lr}
   3195e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   31960:	4b06      	ldr	r3, [pc, #24]	; (3197c <main+0x20>)
   31962:	4798      	blx	r3
		//delay_ms(2000);
		//servo_setDuty(3);
		//delay_ms(2000);
	//}
    /* Initialize the UART console. */
    InitializeSerialConsole();
   31964:	4b06      	ldr	r3, [pc, #24]	; (31980 <main+0x24>)
   31966:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   31968:	2001      	movs	r0, #1
   3196a:	4b06      	ldr	r3, [pc, #24]	; (31984 <main+0x28>)
   3196c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3196e:	4b06      	ldr	r3, [pc, #24]	; (31988 <main+0x2c>)
   31970:	4798      	blx	r3

    return 0;  // Will not get here
   31972:	2300      	movs	r3, #0
}
   31974:	0018      	movs	r0, r3
   31976:	46bd      	mov	sp, r7
   31978:	bd80      	pop	{r7, pc}
   3197a:	46c0      	nop			; (mov r8, r8)
   3197c:	00029321 	.word	0x00029321
   31980:	0001cdc5 	.word	0x0001cdc5
   31984:	00017491 	.word	0x00017491
   31988:	0001b41d 	.word	0x0001b41d

0003198c <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   3198c:	b580      	push	{r7, lr}
   3198e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   31990:	4b0f      	ldr	r3, [pc, #60]	; (319d0 <vApplicationDaemonTaskStartupHook+0x44>)
   31992:	0018      	movs	r0, r3
   31994:	4b0f      	ldr	r3, [pc, #60]	; (319d4 <vApplicationDaemonTaskStartupHook+0x48>)
   31996:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   31998:	4b0f      	ldr	r3, [pc, #60]	; (319d8 <vApplicationDaemonTaskStartupHook+0x4c>)
   3199a:	0018      	movs	r0, r3
   3199c:	4b0d      	ldr	r3, [pc, #52]	; (319d4 <vApplicationDaemonTaskStartupHook+0x48>)
   3199e:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   319a0:	4b0e      	ldr	r3, [pc, #56]	; (319dc <vApplicationDaemonTaskStartupHook+0x50>)
   319a2:	4798      	blx	r3
   319a4:	1e03      	subs	r3, r0, #0
   319a6:	d004      	beq.n	319b2 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   319a8:	4b0d      	ldr	r3, [pc, #52]	; (319e0 <vApplicationDaemonTaskStartupHook+0x54>)
   319aa:	0018      	movs	r0, r3
   319ac:	4b09      	ldr	r3, [pc, #36]	; (319d4 <vApplicationDaemonTaskStartupHook+0x48>)
   319ae:	4798      	blx	r3
   319b0:	e003      	b.n	319ba <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   319b2:	4b0c      	ldr	r3, [pc, #48]	; (319e4 <vApplicationDaemonTaskStartupHook+0x58>)
   319b4:	0018      	movs	r0, r3
   319b6:	4b07      	ldr	r3, [pc, #28]	; (319d4 <vApplicationDaemonTaskStartupHook+0x48>)
   319b8:	4798      	blx	r3
    }

    StartTasks();
   319ba:	4b0b      	ldr	r3, [pc, #44]	; (319e8 <vApplicationDaemonTaskStartupHook+0x5c>)
   319bc:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   319be:	4b0b      	ldr	r3, [pc, #44]	; (319ec <vApplicationDaemonTaskStartupHook+0x60>)
   319c0:	681b      	ldr	r3, [r3, #0]
   319c2:	0018      	movs	r0, r3
   319c4:	4b0a      	ldr	r3, [pc, #40]	; (319f0 <vApplicationDaemonTaskStartupHook+0x64>)
   319c6:	4798      	blx	r3
}
   319c8:	46c0      	nop			; (mov r8, r8)
   319ca:	46bd      	mov	sp, r7
   319cc:	bd80      	pop	{r7, pc}
   319ce:	46c0      	nop			; (mov r8, r8)
   319d0:	0003988c 	.word	0x0003988c
   319d4:	0001ce35 	.word	0x0001ce35
   319d8:	000398b0 	.word	0x000398b0
   319dc:	000142c5 	.word	0x000142c5
   319e0:	000398c8 	.word	0x000398c8
   319e4:	000398ec 	.word	0x000398ec
   319e8:	000319f5 	.word	0x000319f5
   319ec:	200046e4 	.word	0x200046e4
   319f0:	0001b2c1 	.word	0x0001b2c1

000319f4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   319f4:	b590      	push	{r4, r7, lr}
   319f6:	b083      	sub	sp, #12
   319f8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   319fa:	4b34      	ldr	r3, [pc, #208]	; (31acc <StartTasks+0xd8>)
   319fc:	4798      	blx	r3
   319fe:	0003      	movs	r3, r0
   31a00:	4a33      	ldr	r2, [pc, #204]	; (31ad0 <StartTasks+0xdc>)
   31a02:	4834      	ldr	r0, [pc, #208]	; (31ad4 <StartTasks+0xe0>)
   31a04:	2140      	movs	r1, #64	; 0x40
   31a06:	4c34      	ldr	r4, [pc, #208]	; (31ad8 <StartTasks+0xe4>)
   31a08:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a0a:	4b32      	ldr	r3, [pc, #200]	; (31ad4 <StartTasks+0xe0>)
   31a0c:	0018      	movs	r0, r3
   31a0e:	4b33      	ldr	r3, [pc, #204]	; (31adc <StartTasks+0xe8>)
   31a10:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   31a12:	23c8      	movs	r3, #200	; 0xc8
   31a14:	005a      	lsls	r2, r3, #1
   31a16:	4932      	ldr	r1, [pc, #200]	; (31ae0 <StartTasks+0xec>)
   31a18:	4832      	ldr	r0, [pc, #200]	; (31ae4 <StartTasks+0xf0>)
   31a1a:	4b33      	ldr	r3, [pc, #204]	; (31ae8 <StartTasks+0xf4>)
   31a1c:	9301      	str	r3, [sp, #4]
   31a1e:	2304      	movs	r3, #4
   31a20:	9300      	str	r3, [sp, #0]
   31a22:	2300      	movs	r3, #0
   31a24:	4c31      	ldr	r4, [pc, #196]	; (31aec <StartTasks+0xf8>)
   31a26:	47a0      	blx	r4
   31a28:	0003      	movs	r3, r0
   31a2a:	2b01      	cmp	r3, #1
   31a2c:	d003      	beq.n	31a36 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   31a2e:	4b30      	ldr	r3, [pc, #192]	; (31af0 <StartTasks+0xfc>)
   31a30:	0018      	movs	r0, r3
   31a32:	4b2a      	ldr	r3, [pc, #168]	; (31adc <StartTasks+0xe8>)
   31a34:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   31a36:	4b25      	ldr	r3, [pc, #148]	; (31acc <StartTasks+0xd8>)
   31a38:	4798      	blx	r3
   31a3a:	0003      	movs	r3, r0
   31a3c:	4a2d      	ldr	r2, [pc, #180]	; (31af4 <StartTasks+0x100>)
   31a3e:	4825      	ldr	r0, [pc, #148]	; (31ad4 <StartTasks+0xe0>)
   31a40:	2140      	movs	r1, #64	; 0x40
   31a42:	4c25      	ldr	r4, [pc, #148]	; (31ad8 <StartTasks+0xe4>)
   31a44:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a46:	4b23      	ldr	r3, [pc, #140]	; (31ad4 <StartTasks+0xe0>)
   31a48:	0018      	movs	r0, r3
   31a4a:	4b24      	ldr	r3, [pc, #144]	; (31adc <StartTasks+0xe8>)
   31a4c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   31a4e:	4a2a      	ldr	r2, [pc, #168]	; (31af8 <StartTasks+0x104>)
   31a50:	492a      	ldr	r1, [pc, #168]	; (31afc <StartTasks+0x108>)
   31a52:	482b      	ldr	r0, [pc, #172]	; (31b00 <StartTasks+0x10c>)
   31a54:	4b2b      	ldr	r3, [pc, #172]	; (31b04 <StartTasks+0x110>)
   31a56:	9301      	str	r3, [sp, #4]
   31a58:	2303      	movs	r3, #3
   31a5a:	9300      	str	r3, [sp, #0]
   31a5c:	2300      	movs	r3, #0
   31a5e:	4c23      	ldr	r4, [pc, #140]	; (31aec <StartTasks+0xf8>)
   31a60:	47a0      	blx	r4
   31a62:	0003      	movs	r3, r0
   31a64:	2b01      	cmp	r3, #1
   31a66:	d003      	beq.n	31a70 <StartTasks+0x7c>
	    SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   31a68:	4b27      	ldr	r3, [pc, #156]	; (31b08 <StartTasks+0x114>)
   31a6a:	0018      	movs	r0, r3
   31a6c:	4b1b      	ldr	r3, [pc, #108]	; (31adc <StartTasks+0xe8>)
   31a6e:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   31a70:	4b16      	ldr	r3, [pc, #88]	; (31acc <StartTasks+0xd8>)
   31a72:	4798      	blx	r3
   31a74:	0003      	movs	r3, r0
   31a76:	4a25      	ldr	r2, [pc, #148]	; (31b0c <StartTasks+0x118>)
   31a78:	4816      	ldr	r0, [pc, #88]	; (31ad4 <StartTasks+0xe0>)
   31a7a:	2140      	movs	r1, #64	; 0x40
   31a7c:	4c16      	ldr	r4, [pc, #88]	; (31ad8 <StartTasks+0xe4>)
   31a7e:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31a80:	4b14      	ldr	r3, [pc, #80]	; (31ad4 <StartTasks+0xe0>)
   31a82:	0018      	movs	r0, r3
   31a84:	4b15      	ldr	r3, [pc, #84]	; (31adc <StartTasks+0xe8>)
   31a86:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   31a88:	23c8      	movs	r3, #200	; 0xc8
   31a8a:	005a      	lsls	r2, r3, #1
   31a8c:	4920      	ldr	r1, [pc, #128]	; (31b10 <StartTasks+0x11c>)
   31a8e:	4821      	ldr	r0, [pc, #132]	; (31b14 <StartTasks+0x120>)
   31a90:	4b21      	ldr	r3, [pc, #132]	; (31b18 <StartTasks+0x124>)
   31a92:	9301      	str	r3, [sp, #4]
   31a94:	2304      	movs	r3, #4
   31a96:	9300      	str	r3, [sp, #0]
   31a98:	2300      	movs	r3, #0
   31a9a:	4c14      	ldr	r4, [pc, #80]	; (31aec <StartTasks+0xf8>)
   31a9c:	47a0      	blx	r4
   31a9e:	0003      	movs	r3, r0
   31aa0:	2b01      	cmp	r3, #1
   31aa2:	d003      	beq.n	31aac <StartTasks+0xb8>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   31aa4:	4b1d      	ldr	r3, [pc, #116]	; (31b1c <StartTasks+0x128>)
   31aa6:	0018      	movs	r0, r3
   31aa8:	4b0c      	ldr	r3, [pc, #48]	; (31adc <StartTasks+0xe8>)
   31aaa:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   31aac:	4b07      	ldr	r3, [pc, #28]	; (31acc <StartTasks+0xd8>)
   31aae:	4798      	blx	r3
   31ab0:	0003      	movs	r3, r0
   31ab2:	4a1b      	ldr	r2, [pc, #108]	; (31b20 <StartTasks+0x12c>)
   31ab4:	4807      	ldr	r0, [pc, #28]	; (31ad4 <StartTasks+0xe0>)
   31ab6:	2140      	movs	r1, #64	; 0x40
   31ab8:	4c07      	ldr	r4, [pc, #28]	; (31ad8 <StartTasks+0xe4>)
   31aba:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31abc:	4b05      	ldr	r3, [pc, #20]	; (31ad4 <StartTasks+0xe0>)
   31abe:	0018      	movs	r0, r3
   31ac0:	4b06      	ldr	r3, [pc, #24]	; (31adc <StartTasks+0xe8>)
   31ac2:	4798      	blx	r3
    //if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
        //SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
    //}
    //snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
    //SerialConsoleWriteString(bufferPrint);
}
   31ac4:	46c0      	nop			; (mov r8, r8)
   31ac6:	46bd      	mov	sp, r7
   31ac8:	b001      	add	sp, #4
   31aca:	bd90      	pop	{r4, r7, pc}
   31acc:	00019401 	.word	0x00019401
   31ad0:	00039908 	.word	0x00039908
   31ad4:	20005c14 	.word	0x20005c14
   31ad8:	00034869 	.word	0x00034869
   31adc:	0001ce35 	.word	0x0001ce35
   31ae0:	0003992c 	.word	0x0003992c
   31ae4:	00013819 	.word	0x00013819
   31ae8:	200046e0 	.word	0x200046e0
   31aec:	0001ae45 	.word	0x0001ae45
   31af0:	00039938 	.word	0x00039938
   31af4:	00039964 	.word	0x00039964
   31af8:	000005dc 	.word	0x000005dc
   31afc:	00039984 	.word	0x00039984
   31b00:	0001628d 	.word	0x0001628d
   31b04:	200046e8 	.word	0x200046e8
   31b08:	00039990 	.word	0x00039990
   31b0c:	000399bc 	.word	0x000399bc
   31b10:	000399dc 	.word	0x000399dc
   31b14:	00014d91 	.word	0x00014d91
   31b18:	200046ec 	.word	0x200046ec
   31b1c:	000399e4 	.word	0x000399e4
   31b20:	00039a10 	.word	0x00039a10

00031b24 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   31b24:	b580      	push	{r7, lr}
   31b26:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   31b28:	4b02      	ldr	r3, [pc, #8]	; (31b34 <vApplicationMallocFailedHook+0x10>)
   31b2a:	0018      	movs	r0, r3
   31b2c:	4b02      	ldr	r3, [pc, #8]	; (31b38 <vApplicationMallocFailedHook+0x14>)
   31b2e:	4798      	blx	r3
    while (1)
   31b30:	e7fe      	b.n	31b30 <vApplicationMallocFailedHook+0xc>
   31b32:	46c0      	nop			; (mov r8, r8)
   31b34:	00039a34 	.word	0x00039a34
   31b38:	0001ce35 	.word	0x0001ce35

00031b3c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   31b3c:	b580      	push	{r7, lr}
   31b3e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   31b40:	4b02      	ldr	r3, [pc, #8]	; (31b4c <vApplicationStackOverflowHook+0x10>)
   31b42:	0018      	movs	r0, r3
   31b44:	4b02      	ldr	r3, [pc, #8]	; (31b50 <vApplicationStackOverflowHook+0x14>)
   31b46:	4798      	blx	r3
    while (1)
   31b48:	e7fe      	b.n	31b48 <vApplicationStackOverflowHook+0xc>
   31b4a:	46c0      	nop			; (mov r8, r8)
   31b4c:	00039a60 	.word	0x00039a60
   31b50:	0001ce35 	.word	0x0001ce35

00031b54 <__udivsi3>:
   31b54:	2200      	movs	r2, #0
   31b56:	0843      	lsrs	r3, r0, #1
   31b58:	428b      	cmp	r3, r1
   31b5a:	d374      	bcc.n	31c46 <__udivsi3+0xf2>
   31b5c:	0903      	lsrs	r3, r0, #4
   31b5e:	428b      	cmp	r3, r1
   31b60:	d35f      	bcc.n	31c22 <__udivsi3+0xce>
   31b62:	0a03      	lsrs	r3, r0, #8
   31b64:	428b      	cmp	r3, r1
   31b66:	d344      	bcc.n	31bf2 <__udivsi3+0x9e>
   31b68:	0b03      	lsrs	r3, r0, #12
   31b6a:	428b      	cmp	r3, r1
   31b6c:	d328      	bcc.n	31bc0 <__udivsi3+0x6c>
   31b6e:	0c03      	lsrs	r3, r0, #16
   31b70:	428b      	cmp	r3, r1
   31b72:	d30d      	bcc.n	31b90 <__udivsi3+0x3c>
   31b74:	22ff      	movs	r2, #255	; 0xff
   31b76:	0209      	lsls	r1, r1, #8
   31b78:	ba12      	rev	r2, r2
   31b7a:	0c03      	lsrs	r3, r0, #16
   31b7c:	428b      	cmp	r3, r1
   31b7e:	d302      	bcc.n	31b86 <__udivsi3+0x32>
   31b80:	1212      	asrs	r2, r2, #8
   31b82:	0209      	lsls	r1, r1, #8
   31b84:	d065      	beq.n	31c52 <__udivsi3+0xfe>
   31b86:	0b03      	lsrs	r3, r0, #12
   31b88:	428b      	cmp	r3, r1
   31b8a:	d319      	bcc.n	31bc0 <__udivsi3+0x6c>
   31b8c:	e000      	b.n	31b90 <__udivsi3+0x3c>
   31b8e:	0a09      	lsrs	r1, r1, #8
   31b90:	0bc3      	lsrs	r3, r0, #15
   31b92:	428b      	cmp	r3, r1
   31b94:	d301      	bcc.n	31b9a <__udivsi3+0x46>
   31b96:	03cb      	lsls	r3, r1, #15
   31b98:	1ac0      	subs	r0, r0, r3
   31b9a:	4152      	adcs	r2, r2
   31b9c:	0b83      	lsrs	r3, r0, #14
   31b9e:	428b      	cmp	r3, r1
   31ba0:	d301      	bcc.n	31ba6 <__udivsi3+0x52>
   31ba2:	038b      	lsls	r3, r1, #14
   31ba4:	1ac0      	subs	r0, r0, r3
   31ba6:	4152      	adcs	r2, r2
   31ba8:	0b43      	lsrs	r3, r0, #13
   31baa:	428b      	cmp	r3, r1
   31bac:	d301      	bcc.n	31bb2 <__udivsi3+0x5e>
   31bae:	034b      	lsls	r3, r1, #13
   31bb0:	1ac0      	subs	r0, r0, r3
   31bb2:	4152      	adcs	r2, r2
   31bb4:	0b03      	lsrs	r3, r0, #12
   31bb6:	428b      	cmp	r3, r1
   31bb8:	d301      	bcc.n	31bbe <__udivsi3+0x6a>
   31bba:	030b      	lsls	r3, r1, #12
   31bbc:	1ac0      	subs	r0, r0, r3
   31bbe:	4152      	adcs	r2, r2
   31bc0:	0ac3      	lsrs	r3, r0, #11
   31bc2:	428b      	cmp	r3, r1
   31bc4:	d301      	bcc.n	31bca <__udivsi3+0x76>
   31bc6:	02cb      	lsls	r3, r1, #11
   31bc8:	1ac0      	subs	r0, r0, r3
   31bca:	4152      	adcs	r2, r2
   31bcc:	0a83      	lsrs	r3, r0, #10
   31bce:	428b      	cmp	r3, r1
   31bd0:	d301      	bcc.n	31bd6 <__udivsi3+0x82>
   31bd2:	028b      	lsls	r3, r1, #10
   31bd4:	1ac0      	subs	r0, r0, r3
   31bd6:	4152      	adcs	r2, r2
   31bd8:	0a43      	lsrs	r3, r0, #9
   31bda:	428b      	cmp	r3, r1
   31bdc:	d301      	bcc.n	31be2 <__udivsi3+0x8e>
   31bde:	024b      	lsls	r3, r1, #9
   31be0:	1ac0      	subs	r0, r0, r3
   31be2:	4152      	adcs	r2, r2
   31be4:	0a03      	lsrs	r3, r0, #8
   31be6:	428b      	cmp	r3, r1
   31be8:	d301      	bcc.n	31bee <__udivsi3+0x9a>
   31bea:	020b      	lsls	r3, r1, #8
   31bec:	1ac0      	subs	r0, r0, r3
   31bee:	4152      	adcs	r2, r2
   31bf0:	d2cd      	bcs.n	31b8e <__udivsi3+0x3a>
   31bf2:	09c3      	lsrs	r3, r0, #7
   31bf4:	428b      	cmp	r3, r1
   31bf6:	d301      	bcc.n	31bfc <__udivsi3+0xa8>
   31bf8:	01cb      	lsls	r3, r1, #7
   31bfa:	1ac0      	subs	r0, r0, r3
   31bfc:	4152      	adcs	r2, r2
   31bfe:	0983      	lsrs	r3, r0, #6
   31c00:	428b      	cmp	r3, r1
   31c02:	d301      	bcc.n	31c08 <__udivsi3+0xb4>
   31c04:	018b      	lsls	r3, r1, #6
   31c06:	1ac0      	subs	r0, r0, r3
   31c08:	4152      	adcs	r2, r2
   31c0a:	0943      	lsrs	r3, r0, #5
   31c0c:	428b      	cmp	r3, r1
   31c0e:	d301      	bcc.n	31c14 <__udivsi3+0xc0>
   31c10:	014b      	lsls	r3, r1, #5
   31c12:	1ac0      	subs	r0, r0, r3
   31c14:	4152      	adcs	r2, r2
   31c16:	0903      	lsrs	r3, r0, #4
   31c18:	428b      	cmp	r3, r1
   31c1a:	d301      	bcc.n	31c20 <__udivsi3+0xcc>
   31c1c:	010b      	lsls	r3, r1, #4
   31c1e:	1ac0      	subs	r0, r0, r3
   31c20:	4152      	adcs	r2, r2
   31c22:	08c3      	lsrs	r3, r0, #3
   31c24:	428b      	cmp	r3, r1
   31c26:	d301      	bcc.n	31c2c <__udivsi3+0xd8>
   31c28:	00cb      	lsls	r3, r1, #3
   31c2a:	1ac0      	subs	r0, r0, r3
   31c2c:	4152      	adcs	r2, r2
   31c2e:	0883      	lsrs	r3, r0, #2
   31c30:	428b      	cmp	r3, r1
   31c32:	d301      	bcc.n	31c38 <__udivsi3+0xe4>
   31c34:	008b      	lsls	r3, r1, #2
   31c36:	1ac0      	subs	r0, r0, r3
   31c38:	4152      	adcs	r2, r2
   31c3a:	0843      	lsrs	r3, r0, #1
   31c3c:	428b      	cmp	r3, r1
   31c3e:	d301      	bcc.n	31c44 <__udivsi3+0xf0>
   31c40:	004b      	lsls	r3, r1, #1
   31c42:	1ac0      	subs	r0, r0, r3
   31c44:	4152      	adcs	r2, r2
   31c46:	1a41      	subs	r1, r0, r1
   31c48:	d200      	bcs.n	31c4c <__udivsi3+0xf8>
   31c4a:	4601      	mov	r1, r0
   31c4c:	4152      	adcs	r2, r2
   31c4e:	4610      	mov	r0, r2
   31c50:	4770      	bx	lr
   31c52:	e7ff      	b.n	31c54 <__udivsi3+0x100>
   31c54:	b501      	push	{r0, lr}
   31c56:	2000      	movs	r0, #0
   31c58:	f000 f8f0 	bl	31e3c <__aeabi_idiv0>
   31c5c:	bd02      	pop	{r1, pc}
   31c5e:	46c0      	nop			; (mov r8, r8)

00031c60 <__aeabi_uidivmod>:
   31c60:	2900      	cmp	r1, #0
   31c62:	d0f7      	beq.n	31c54 <__udivsi3+0x100>
   31c64:	e776      	b.n	31b54 <__udivsi3>
   31c66:	4770      	bx	lr

00031c68 <__divsi3>:
   31c68:	4603      	mov	r3, r0
   31c6a:	430b      	orrs	r3, r1
   31c6c:	d47f      	bmi.n	31d6e <__divsi3+0x106>
   31c6e:	2200      	movs	r2, #0
   31c70:	0843      	lsrs	r3, r0, #1
   31c72:	428b      	cmp	r3, r1
   31c74:	d374      	bcc.n	31d60 <__divsi3+0xf8>
   31c76:	0903      	lsrs	r3, r0, #4
   31c78:	428b      	cmp	r3, r1
   31c7a:	d35f      	bcc.n	31d3c <__divsi3+0xd4>
   31c7c:	0a03      	lsrs	r3, r0, #8
   31c7e:	428b      	cmp	r3, r1
   31c80:	d344      	bcc.n	31d0c <__divsi3+0xa4>
   31c82:	0b03      	lsrs	r3, r0, #12
   31c84:	428b      	cmp	r3, r1
   31c86:	d328      	bcc.n	31cda <__divsi3+0x72>
   31c88:	0c03      	lsrs	r3, r0, #16
   31c8a:	428b      	cmp	r3, r1
   31c8c:	d30d      	bcc.n	31caa <__divsi3+0x42>
   31c8e:	22ff      	movs	r2, #255	; 0xff
   31c90:	0209      	lsls	r1, r1, #8
   31c92:	ba12      	rev	r2, r2
   31c94:	0c03      	lsrs	r3, r0, #16
   31c96:	428b      	cmp	r3, r1
   31c98:	d302      	bcc.n	31ca0 <__divsi3+0x38>
   31c9a:	1212      	asrs	r2, r2, #8
   31c9c:	0209      	lsls	r1, r1, #8
   31c9e:	d065      	beq.n	31d6c <__divsi3+0x104>
   31ca0:	0b03      	lsrs	r3, r0, #12
   31ca2:	428b      	cmp	r3, r1
   31ca4:	d319      	bcc.n	31cda <__divsi3+0x72>
   31ca6:	e000      	b.n	31caa <__divsi3+0x42>
   31ca8:	0a09      	lsrs	r1, r1, #8
   31caa:	0bc3      	lsrs	r3, r0, #15
   31cac:	428b      	cmp	r3, r1
   31cae:	d301      	bcc.n	31cb4 <__divsi3+0x4c>
   31cb0:	03cb      	lsls	r3, r1, #15
   31cb2:	1ac0      	subs	r0, r0, r3
   31cb4:	4152      	adcs	r2, r2
   31cb6:	0b83      	lsrs	r3, r0, #14
   31cb8:	428b      	cmp	r3, r1
   31cba:	d301      	bcc.n	31cc0 <__divsi3+0x58>
   31cbc:	038b      	lsls	r3, r1, #14
   31cbe:	1ac0      	subs	r0, r0, r3
   31cc0:	4152      	adcs	r2, r2
   31cc2:	0b43      	lsrs	r3, r0, #13
   31cc4:	428b      	cmp	r3, r1
   31cc6:	d301      	bcc.n	31ccc <__divsi3+0x64>
   31cc8:	034b      	lsls	r3, r1, #13
   31cca:	1ac0      	subs	r0, r0, r3
   31ccc:	4152      	adcs	r2, r2
   31cce:	0b03      	lsrs	r3, r0, #12
   31cd0:	428b      	cmp	r3, r1
   31cd2:	d301      	bcc.n	31cd8 <__divsi3+0x70>
   31cd4:	030b      	lsls	r3, r1, #12
   31cd6:	1ac0      	subs	r0, r0, r3
   31cd8:	4152      	adcs	r2, r2
   31cda:	0ac3      	lsrs	r3, r0, #11
   31cdc:	428b      	cmp	r3, r1
   31cde:	d301      	bcc.n	31ce4 <__divsi3+0x7c>
   31ce0:	02cb      	lsls	r3, r1, #11
   31ce2:	1ac0      	subs	r0, r0, r3
   31ce4:	4152      	adcs	r2, r2
   31ce6:	0a83      	lsrs	r3, r0, #10
   31ce8:	428b      	cmp	r3, r1
   31cea:	d301      	bcc.n	31cf0 <__divsi3+0x88>
   31cec:	028b      	lsls	r3, r1, #10
   31cee:	1ac0      	subs	r0, r0, r3
   31cf0:	4152      	adcs	r2, r2
   31cf2:	0a43      	lsrs	r3, r0, #9
   31cf4:	428b      	cmp	r3, r1
   31cf6:	d301      	bcc.n	31cfc <__divsi3+0x94>
   31cf8:	024b      	lsls	r3, r1, #9
   31cfa:	1ac0      	subs	r0, r0, r3
   31cfc:	4152      	adcs	r2, r2
   31cfe:	0a03      	lsrs	r3, r0, #8
   31d00:	428b      	cmp	r3, r1
   31d02:	d301      	bcc.n	31d08 <__divsi3+0xa0>
   31d04:	020b      	lsls	r3, r1, #8
   31d06:	1ac0      	subs	r0, r0, r3
   31d08:	4152      	adcs	r2, r2
   31d0a:	d2cd      	bcs.n	31ca8 <__divsi3+0x40>
   31d0c:	09c3      	lsrs	r3, r0, #7
   31d0e:	428b      	cmp	r3, r1
   31d10:	d301      	bcc.n	31d16 <__divsi3+0xae>
   31d12:	01cb      	lsls	r3, r1, #7
   31d14:	1ac0      	subs	r0, r0, r3
   31d16:	4152      	adcs	r2, r2
   31d18:	0983      	lsrs	r3, r0, #6
   31d1a:	428b      	cmp	r3, r1
   31d1c:	d301      	bcc.n	31d22 <__divsi3+0xba>
   31d1e:	018b      	lsls	r3, r1, #6
   31d20:	1ac0      	subs	r0, r0, r3
   31d22:	4152      	adcs	r2, r2
   31d24:	0943      	lsrs	r3, r0, #5
   31d26:	428b      	cmp	r3, r1
   31d28:	d301      	bcc.n	31d2e <__divsi3+0xc6>
   31d2a:	014b      	lsls	r3, r1, #5
   31d2c:	1ac0      	subs	r0, r0, r3
   31d2e:	4152      	adcs	r2, r2
   31d30:	0903      	lsrs	r3, r0, #4
   31d32:	428b      	cmp	r3, r1
   31d34:	d301      	bcc.n	31d3a <__divsi3+0xd2>
   31d36:	010b      	lsls	r3, r1, #4
   31d38:	1ac0      	subs	r0, r0, r3
   31d3a:	4152      	adcs	r2, r2
   31d3c:	08c3      	lsrs	r3, r0, #3
   31d3e:	428b      	cmp	r3, r1
   31d40:	d301      	bcc.n	31d46 <__divsi3+0xde>
   31d42:	00cb      	lsls	r3, r1, #3
   31d44:	1ac0      	subs	r0, r0, r3
   31d46:	4152      	adcs	r2, r2
   31d48:	0883      	lsrs	r3, r0, #2
   31d4a:	428b      	cmp	r3, r1
   31d4c:	d301      	bcc.n	31d52 <__divsi3+0xea>
   31d4e:	008b      	lsls	r3, r1, #2
   31d50:	1ac0      	subs	r0, r0, r3
   31d52:	4152      	adcs	r2, r2
   31d54:	0843      	lsrs	r3, r0, #1
   31d56:	428b      	cmp	r3, r1
   31d58:	d301      	bcc.n	31d5e <__divsi3+0xf6>
   31d5a:	004b      	lsls	r3, r1, #1
   31d5c:	1ac0      	subs	r0, r0, r3
   31d5e:	4152      	adcs	r2, r2
   31d60:	1a41      	subs	r1, r0, r1
   31d62:	d200      	bcs.n	31d66 <__divsi3+0xfe>
   31d64:	4601      	mov	r1, r0
   31d66:	4152      	adcs	r2, r2
   31d68:	4610      	mov	r0, r2
   31d6a:	4770      	bx	lr
   31d6c:	e05d      	b.n	31e2a <__divsi3+0x1c2>
   31d6e:	0fca      	lsrs	r2, r1, #31
   31d70:	d000      	beq.n	31d74 <__divsi3+0x10c>
   31d72:	4249      	negs	r1, r1
   31d74:	1003      	asrs	r3, r0, #32
   31d76:	d300      	bcc.n	31d7a <__divsi3+0x112>
   31d78:	4240      	negs	r0, r0
   31d7a:	4053      	eors	r3, r2
   31d7c:	2200      	movs	r2, #0
   31d7e:	469c      	mov	ip, r3
   31d80:	0903      	lsrs	r3, r0, #4
   31d82:	428b      	cmp	r3, r1
   31d84:	d32d      	bcc.n	31de2 <__divsi3+0x17a>
   31d86:	0a03      	lsrs	r3, r0, #8
   31d88:	428b      	cmp	r3, r1
   31d8a:	d312      	bcc.n	31db2 <__divsi3+0x14a>
   31d8c:	22fc      	movs	r2, #252	; 0xfc
   31d8e:	0189      	lsls	r1, r1, #6
   31d90:	ba12      	rev	r2, r2
   31d92:	0a03      	lsrs	r3, r0, #8
   31d94:	428b      	cmp	r3, r1
   31d96:	d30c      	bcc.n	31db2 <__divsi3+0x14a>
   31d98:	0189      	lsls	r1, r1, #6
   31d9a:	1192      	asrs	r2, r2, #6
   31d9c:	428b      	cmp	r3, r1
   31d9e:	d308      	bcc.n	31db2 <__divsi3+0x14a>
   31da0:	0189      	lsls	r1, r1, #6
   31da2:	1192      	asrs	r2, r2, #6
   31da4:	428b      	cmp	r3, r1
   31da6:	d304      	bcc.n	31db2 <__divsi3+0x14a>
   31da8:	0189      	lsls	r1, r1, #6
   31daa:	d03a      	beq.n	31e22 <__divsi3+0x1ba>
   31dac:	1192      	asrs	r2, r2, #6
   31dae:	e000      	b.n	31db2 <__divsi3+0x14a>
   31db0:	0989      	lsrs	r1, r1, #6
   31db2:	09c3      	lsrs	r3, r0, #7
   31db4:	428b      	cmp	r3, r1
   31db6:	d301      	bcc.n	31dbc <__divsi3+0x154>
   31db8:	01cb      	lsls	r3, r1, #7
   31dba:	1ac0      	subs	r0, r0, r3
   31dbc:	4152      	adcs	r2, r2
   31dbe:	0983      	lsrs	r3, r0, #6
   31dc0:	428b      	cmp	r3, r1
   31dc2:	d301      	bcc.n	31dc8 <__divsi3+0x160>
   31dc4:	018b      	lsls	r3, r1, #6
   31dc6:	1ac0      	subs	r0, r0, r3
   31dc8:	4152      	adcs	r2, r2
   31dca:	0943      	lsrs	r3, r0, #5
   31dcc:	428b      	cmp	r3, r1
   31dce:	d301      	bcc.n	31dd4 <__divsi3+0x16c>
   31dd0:	014b      	lsls	r3, r1, #5
   31dd2:	1ac0      	subs	r0, r0, r3
   31dd4:	4152      	adcs	r2, r2
   31dd6:	0903      	lsrs	r3, r0, #4
   31dd8:	428b      	cmp	r3, r1
   31dda:	d301      	bcc.n	31de0 <__divsi3+0x178>
   31ddc:	010b      	lsls	r3, r1, #4
   31dde:	1ac0      	subs	r0, r0, r3
   31de0:	4152      	adcs	r2, r2
   31de2:	08c3      	lsrs	r3, r0, #3
   31de4:	428b      	cmp	r3, r1
   31de6:	d301      	bcc.n	31dec <__divsi3+0x184>
   31de8:	00cb      	lsls	r3, r1, #3
   31dea:	1ac0      	subs	r0, r0, r3
   31dec:	4152      	adcs	r2, r2
   31dee:	0883      	lsrs	r3, r0, #2
   31df0:	428b      	cmp	r3, r1
   31df2:	d301      	bcc.n	31df8 <__divsi3+0x190>
   31df4:	008b      	lsls	r3, r1, #2
   31df6:	1ac0      	subs	r0, r0, r3
   31df8:	4152      	adcs	r2, r2
   31dfa:	d2d9      	bcs.n	31db0 <__divsi3+0x148>
   31dfc:	0843      	lsrs	r3, r0, #1
   31dfe:	428b      	cmp	r3, r1
   31e00:	d301      	bcc.n	31e06 <__divsi3+0x19e>
   31e02:	004b      	lsls	r3, r1, #1
   31e04:	1ac0      	subs	r0, r0, r3
   31e06:	4152      	adcs	r2, r2
   31e08:	1a41      	subs	r1, r0, r1
   31e0a:	d200      	bcs.n	31e0e <__divsi3+0x1a6>
   31e0c:	4601      	mov	r1, r0
   31e0e:	4663      	mov	r3, ip
   31e10:	4152      	adcs	r2, r2
   31e12:	105b      	asrs	r3, r3, #1
   31e14:	4610      	mov	r0, r2
   31e16:	d301      	bcc.n	31e1c <__divsi3+0x1b4>
   31e18:	4240      	negs	r0, r0
   31e1a:	2b00      	cmp	r3, #0
   31e1c:	d500      	bpl.n	31e20 <__divsi3+0x1b8>
   31e1e:	4249      	negs	r1, r1
   31e20:	4770      	bx	lr
   31e22:	4663      	mov	r3, ip
   31e24:	105b      	asrs	r3, r3, #1
   31e26:	d300      	bcc.n	31e2a <__divsi3+0x1c2>
   31e28:	4240      	negs	r0, r0
   31e2a:	b501      	push	{r0, lr}
   31e2c:	2000      	movs	r0, #0
   31e2e:	f000 f805 	bl	31e3c <__aeabi_idiv0>
   31e32:	bd02      	pop	{r1, pc}

00031e34 <__aeabi_idivmod>:
   31e34:	2900      	cmp	r1, #0
   31e36:	d0f8      	beq.n	31e2a <__divsi3+0x1c2>
   31e38:	e716      	b.n	31c68 <__divsi3>
   31e3a:	4770      	bx	lr

00031e3c <__aeabi_idiv0>:
   31e3c:	4770      	bx	lr
   31e3e:	46c0      	nop			; (mov r8, r8)

00031e40 <__aeabi_lmul>:
   31e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   31e42:	46ce      	mov	lr, r9
   31e44:	4647      	mov	r7, r8
   31e46:	0415      	lsls	r5, r2, #16
   31e48:	0c2d      	lsrs	r5, r5, #16
   31e4a:	002e      	movs	r6, r5
   31e4c:	b580      	push	{r7, lr}
   31e4e:	0407      	lsls	r7, r0, #16
   31e50:	0c14      	lsrs	r4, r2, #16
   31e52:	0c3f      	lsrs	r7, r7, #16
   31e54:	4699      	mov	r9, r3
   31e56:	0c03      	lsrs	r3, r0, #16
   31e58:	437e      	muls	r6, r7
   31e5a:	435d      	muls	r5, r3
   31e5c:	4367      	muls	r7, r4
   31e5e:	4363      	muls	r3, r4
   31e60:	197f      	adds	r7, r7, r5
   31e62:	0c34      	lsrs	r4, r6, #16
   31e64:	19e4      	adds	r4, r4, r7
   31e66:	469c      	mov	ip, r3
   31e68:	42a5      	cmp	r5, r4
   31e6a:	d903      	bls.n	31e74 <__aeabi_lmul+0x34>
   31e6c:	2380      	movs	r3, #128	; 0x80
   31e6e:	025b      	lsls	r3, r3, #9
   31e70:	4698      	mov	r8, r3
   31e72:	44c4      	add	ip, r8
   31e74:	464b      	mov	r3, r9
   31e76:	4351      	muls	r1, r2
   31e78:	4343      	muls	r3, r0
   31e7a:	0436      	lsls	r6, r6, #16
   31e7c:	0c36      	lsrs	r6, r6, #16
   31e7e:	0c25      	lsrs	r5, r4, #16
   31e80:	0424      	lsls	r4, r4, #16
   31e82:	4465      	add	r5, ip
   31e84:	19a4      	adds	r4, r4, r6
   31e86:	1859      	adds	r1, r3, r1
   31e88:	1949      	adds	r1, r1, r5
   31e8a:	0020      	movs	r0, r4
   31e8c:	bc0c      	pop	{r2, r3}
   31e8e:	4690      	mov	r8, r2
   31e90:	4699      	mov	r9, r3
   31e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00031e94 <__aeabi_f2uiz>:
   31e94:	219e      	movs	r1, #158	; 0x9e
   31e96:	b510      	push	{r4, lr}
   31e98:	05c9      	lsls	r1, r1, #23
   31e9a:	1c04      	adds	r4, r0, #0
   31e9c:	f002 fa8e 	bl	343bc <__aeabi_fcmpge>
   31ea0:	2800      	cmp	r0, #0
   31ea2:	d103      	bne.n	31eac <__aeabi_f2uiz+0x18>
   31ea4:	1c20      	adds	r0, r4, #0
   31ea6:	f000 fda3 	bl	329f0 <__aeabi_f2iz>
   31eaa:	bd10      	pop	{r4, pc}
   31eac:	219e      	movs	r1, #158	; 0x9e
   31eae:	1c20      	adds	r0, r4, #0
   31eb0:	05c9      	lsls	r1, r1, #23
   31eb2:	f000 fc01 	bl	326b8 <__aeabi_fsub>
   31eb6:	f000 fd9b 	bl	329f0 <__aeabi_f2iz>
   31eba:	2380      	movs	r3, #128	; 0x80
   31ebc:	061b      	lsls	r3, r3, #24
   31ebe:	469c      	mov	ip, r3
   31ec0:	4460      	add	r0, ip
   31ec2:	e7f2      	b.n	31eaa <__aeabi_f2uiz+0x16>

00031ec4 <__aeabi_fadd>:
   31ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   31ec6:	46c6      	mov	lr, r8
   31ec8:	024e      	lsls	r6, r1, #9
   31eca:	0247      	lsls	r7, r0, #9
   31ecc:	0a76      	lsrs	r6, r6, #9
   31ece:	0a7b      	lsrs	r3, r7, #9
   31ed0:	0044      	lsls	r4, r0, #1
   31ed2:	0fc5      	lsrs	r5, r0, #31
   31ed4:	00f7      	lsls	r7, r6, #3
   31ed6:	0048      	lsls	r0, r1, #1
   31ed8:	4698      	mov	r8, r3
   31eda:	b500      	push	{lr}
   31edc:	0e24      	lsrs	r4, r4, #24
   31ede:	002a      	movs	r2, r5
   31ee0:	00db      	lsls	r3, r3, #3
   31ee2:	0e00      	lsrs	r0, r0, #24
   31ee4:	0fc9      	lsrs	r1, r1, #31
   31ee6:	46bc      	mov	ip, r7
   31ee8:	428d      	cmp	r5, r1
   31eea:	d067      	beq.n	31fbc <__aeabi_fadd+0xf8>
   31eec:	1a22      	subs	r2, r4, r0
   31eee:	2a00      	cmp	r2, #0
   31ef0:	dc00      	bgt.n	31ef4 <__aeabi_fadd+0x30>
   31ef2:	e0a5      	b.n	32040 <__aeabi_fadd+0x17c>
   31ef4:	2800      	cmp	r0, #0
   31ef6:	d13a      	bne.n	31f6e <__aeabi_fadd+0xaa>
   31ef8:	2f00      	cmp	r7, #0
   31efa:	d100      	bne.n	31efe <__aeabi_fadd+0x3a>
   31efc:	e093      	b.n	32026 <__aeabi_fadd+0x162>
   31efe:	1e51      	subs	r1, r2, #1
   31f00:	2900      	cmp	r1, #0
   31f02:	d000      	beq.n	31f06 <__aeabi_fadd+0x42>
   31f04:	e0bc      	b.n	32080 <__aeabi_fadd+0x1bc>
   31f06:	2401      	movs	r4, #1
   31f08:	1bdb      	subs	r3, r3, r7
   31f0a:	015a      	lsls	r2, r3, #5
   31f0c:	d546      	bpl.n	31f9c <__aeabi_fadd+0xd8>
   31f0e:	019b      	lsls	r3, r3, #6
   31f10:	099e      	lsrs	r6, r3, #6
   31f12:	0030      	movs	r0, r6
   31f14:	f002 fa5c 	bl	343d0 <__clzsi2>
   31f18:	3805      	subs	r0, #5
   31f1a:	4086      	lsls	r6, r0
   31f1c:	4284      	cmp	r4, r0
   31f1e:	dd00      	ble.n	31f22 <__aeabi_fadd+0x5e>
   31f20:	e09d      	b.n	3205e <__aeabi_fadd+0x19a>
   31f22:	1b04      	subs	r4, r0, r4
   31f24:	0032      	movs	r2, r6
   31f26:	2020      	movs	r0, #32
   31f28:	3401      	adds	r4, #1
   31f2a:	40e2      	lsrs	r2, r4
   31f2c:	1b04      	subs	r4, r0, r4
   31f2e:	40a6      	lsls	r6, r4
   31f30:	0033      	movs	r3, r6
   31f32:	1e5e      	subs	r6, r3, #1
   31f34:	41b3      	sbcs	r3, r6
   31f36:	2400      	movs	r4, #0
   31f38:	4313      	orrs	r3, r2
   31f3a:	075a      	lsls	r2, r3, #29
   31f3c:	d004      	beq.n	31f48 <__aeabi_fadd+0x84>
   31f3e:	220f      	movs	r2, #15
   31f40:	401a      	ands	r2, r3
   31f42:	2a04      	cmp	r2, #4
   31f44:	d000      	beq.n	31f48 <__aeabi_fadd+0x84>
   31f46:	3304      	adds	r3, #4
   31f48:	015a      	lsls	r2, r3, #5
   31f4a:	d529      	bpl.n	31fa0 <__aeabi_fadd+0xdc>
   31f4c:	3401      	adds	r4, #1
   31f4e:	2cff      	cmp	r4, #255	; 0xff
   31f50:	d100      	bne.n	31f54 <__aeabi_fadd+0x90>
   31f52:	e081      	b.n	32058 <__aeabi_fadd+0x194>
   31f54:	002a      	movs	r2, r5
   31f56:	019b      	lsls	r3, r3, #6
   31f58:	0a5b      	lsrs	r3, r3, #9
   31f5a:	b2e4      	uxtb	r4, r4
   31f5c:	025b      	lsls	r3, r3, #9
   31f5e:	05e4      	lsls	r4, r4, #23
   31f60:	0a58      	lsrs	r0, r3, #9
   31f62:	07d2      	lsls	r2, r2, #31
   31f64:	4320      	orrs	r0, r4
   31f66:	4310      	orrs	r0, r2
   31f68:	bc04      	pop	{r2}
   31f6a:	4690      	mov	r8, r2
   31f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31f6e:	2cff      	cmp	r4, #255	; 0xff
   31f70:	d0e3      	beq.n	31f3a <__aeabi_fadd+0x76>
   31f72:	2180      	movs	r1, #128	; 0x80
   31f74:	0038      	movs	r0, r7
   31f76:	04c9      	lsls	r1, r1, #19
   31f78:	4308      	orrs	r0, r1
   31f7a:	4684      	mov	ip, r0
   31f7c:	2a1b      	cmp	r2, #27
   31f7e:	dd00      	ble.n	31f82 <__aeabi_fadd+0xbe>
   31f80:	e082      	b.n	32088 <__aeabi_fadd+0x1c4>
   31f82:	2020      	movs	r0, #32
   31f84:	4661      	mov	r1, ip
   31f86:	40d1      	lsrs	r1, r2
   31f88:	1a82      	subs	r2, r0, r2
   31f8a:	4660      	mov	r0, ip
   31f8c:	4090      	lsls	r0, r2
   31f8e:	0002      	movs	r2, r0
   31f90:	1e50      	subs	r0, r2, #1
   31f92:	4182      	sbcs	r2, r0
   31f94:	430a      	orrs	r2, r1
   31f96:	1a9b      	subs	r3, r3, r2
   31f98:	015a      	lsls	r2, r3, #5
   31f9a:	d4b8      	bmi.n	31f0e <__aeabi_fadd+0x4a>
   31f9c:	075a      	lsls	r2, r3, #29
   31f9e:	d1ce      	bne.n	31f3e <__aeabi_fadd+0x7a>
   31fa0:	08de      	lsrs	r6, r3, #3
   31fa2:	002a      	movs	r2, r5
   31fa4:	2cff      	cmp	r4, #255	; 0xff
   31fa6:	d13a      	bne.n	3201e <__aeabi_fadd+0x15a>
   31fa8:	2e00      	cmp	r6, #0
   31faa:	d100      	bne.n	31fae <__aeabi_fadd+0xea>
   31fac:	e0ae      	b.n	3210c <__aeabi_fadd+0x248>
   31fae:	2380      	movs	r3, #128	; 0x80
   31fb0:	03db      	lsls	r3, r3, #15
   31fb2:	4333      	orrs	r3, r6
   31fb4:	025b      	lsls	r3, r3, #9
   31fb6:	0a5b      	lsrs	r3, r3, #9
   31fb8:	24ff      	movs	r4, #255	; 0xff
   31fba:	e7cf      	b.n	31f5c <__aeabi_fadd+0x98>
   31fbc:	1a21      	subs	r1, r4, r0
   31fbe:	2900      	cmp	r1, #0
   31fc0:	dd52      	ble.n	32068 <__aeabi_fadd+0x1a4>
   31fc2:	2800      	cmp	r0, #0
   31fc4:	d031      	beq.n	3202a <__aeabi_fadd+0x166>
   31fc6:	2cff      	cmp	r4, #255	; 0xff
   31fc8:	d0b7      	beq.n	31f3a <__aeabi_fadd+0x76>
   31fca:	2080      	movs	r0, #128	; 0x80
   31fcc:	003e      	movs	r6, r7
   31fce:	04c0      	lsls	r0, r0, #19
   31fd0:	4306      	orrs	r6, r0
   31fd2:	46b4      	mov	ip, r6
   31fd4:	291b      	cmp	r1, #27
   31fd6:	dd00      	ble.n	31fda <__aeabi_fadd+0x116>
   31fd8:	e0aa      	b.n	32130 <__aeabi_fadd+0x26c>
   31fda:	2620      	movs	r6, #32
   31fdc:	4660      	mov	r0, ip
   31fde:	40c8      	lsrs	r0, r1
   31fe0:	1a71      	subs	r1, r6, r1
   31fe2:	4666      	mov	r6, ip
   31fe4:	408e      	lsls	r6, r1
   31fe6:	0031      	movs	r1, r6
   31fe8:	1e4e      	subs	r6, r1, #1
   31fea:	41b1      	sbcs	r1, r6
   31fec:	4301      	orrs	r1, r0
   31fee:	185b      	adds	r3, r3, r1
   31ff0:	0159      	lsls	r1, r3, #5
   31ff2:	d5d3      	bpl.n	31f9c <__aeabi_fadd+0xd8>
   31ff4:	3401      	adds	r4, #1
   31ff6:	2cff      	cmp	r4, #255	; 0xff
   31ff8:	d100      	bne.n	31ffc <__aeabi_fadd+0x138>
   31ffa:	e087      	b.n	3210c <__aeabi_fadd+0x248>
   31ffc:	2201      	movs	r2, #1
   31ffe:	4978      	ldr	r1, [pc, #480]	; (321e0 <__aeabi_fadd+0x31c>)
   32000:	401a      	ands	r2, r3
   32002:	085b      	lsrs	r3, r3, #1
   32004:	400b      	ands	r3, r1
   32006:	4313      	orrs	r3, r2
   32008:	e797      	b.n	31f3a <__aeabi_fadd+0x76>
   3200a:	2c00      	cmp	r4, #0
   3200c:	d000      	beq.n	32010 <__aeabi_fadd+0x14c>
   3200e:	e0a7      	b.n	32160 <__aeabi_fadd+0x29c>
   32010:	2b00      	cmp	r3, #0
   32012:	d000      	beq.n	32016 <__aeabi_fadd+0x152>
   32014:	e0b6      	b.n	32184 <__aeabi_fadd+0x2c0>
   32016:	1e3b      	subs	r3, r7, #0
   32018:	d162      	bne.n	320e0 <__aeabi_fadd+0x21c>
   3201a:	2600      	movs	r6, #0
   3201c:	2200      	movs	r2, #0
   3201e:	0273      	lsls	r3, r6, #9
   32020:	0a5b      	lsrs	r3, r3, #9
   32022:	b2e4      	uxtb	r4, r4
   32024:	e79a      	b.n	31f5c <__aeabi_fadd+0x98>
   32026:	0014      	movs	r4, r2
   32028:	e787      	b.n	31f3a <__aeabi_fadd+0x76>
   3202a:	2f00      	cmp	r7, #0
   3202c:	d04d      	beq.n	320ca <__aeabi_fadd+0x206>
   3202e:	1e48      	subs	r0, r1, #1
   32030:	2800      	cmp	r0, #0
   32032:	d157      	bne.n	320e4 <__aeabi_fadd+0x220>
   32034:	4463      	add	r3, ip
   32036:	2401      	movs	r4, #1
   32038:	015a      	lsls	r2, r3, #5
   3203a:	d5af      	bpl.n	31f9c <__aeabi_fadd+0xd8>
   3203c:	2402      	movs	r4, #2
   3203e:	e7dd      	b.n	31ffc <__aeabi_fadd+0x138>
   32040:	2a00      	cmp	r2, #0
   32042:	d124      	bne.n	3208e <__aeabi_fadd+0x1ca>
   32044:	1c62      	adds	r2, r4, #1
   32046:	b2d2      	uxtb	r2, r2
   32048:	2a01      	cmp	r2, #1
   3204a:	ddde      	ble.n	3200a <__aeabi_fadd+0x146>
   3204c:	1bde      	subs	r6, r3, r7
   3204e:	0172      	lsls	r2, r6, #5
   32050:	d535      	bpl.n	320be <__aeabi_fadd+0x1fa>
   32052:	1afe      	subs	r6, r7, r3
   32054:	000d      	movs	r5, r1
   32056:	e75c      	b.n	31f12 <__aeabi_fadd+0x4e>
   32058:	002a      	movs	r2, r5
   3205a:	2300      	movs	r3, #0
   3205c:	e77e      	b.n	31f5c <__aeabi_fadd+0x98>
   3205e:	0033      	movs	r3, r6
   32060:	4a60      	ldr	r2, [pc, #384]	; (321e4 <__aeabi_fadd+0x320>)
   32062:	1a24      	subs	r4, r4, r0
   32064:	4013      	ands	r3, r2
   32066:	e768      	b.n	31f3a <__aeabi_fadd+0x76>
   32068:	2900      	cmp	r1, #0
   3206a:	d163      	bne.n	32134 <__aeabi_fadd+0x270>
   3206c:	1c61      	adds	r1, r4, #1
   3206e:	b2c8      	uxtb	r0, r1
   32070:	2801      	cmp	r0, #1
   32072:	dd4e      	ble.n	32112 <__aeabi_fadd+0x24e>
   32074:	29ff      	cmp	r1, #255	; 0xff
   32076:	d049      	beq.n	3210c <__aeabi_fadd+0x248>
   32078:	4463      	add	r3, ip
   3207a:	085b      	lsrs	r3, r3, #1
   3207c:	000c      	movs	r4, r1
   3207e:	e75c      	b.n	31f3a <__aeabi_fadd+0x76>
   32080:	2aff      	cmp	r2, #255	; 0xff
   32082:	d041      	beq.n	32108 <__aeabi_fadd+0x244>
   32084:	000a      	movs	r2, r1
   32086:	e779      	b.n	31f7c <__aeabi_fadd+0xb8>
   32088:	2201      	movs	r2, #1
   3208a:	1a9b      	subs	r3, r3, r2
   3208c:	e784      	b.n	31f98 <__aeabi_fadd+0xd4>
   3208e:	2c00      	cmp	r4, #0
   32090:	d01d      	beq.n	320ce <__aeabi_fadd+0x20a>
   32092:	28ff      	cmp	r0, #255	; 0xff
   32094:	d022      	beq.n	320dc <__aeabi_fadd+0x218>
   32096:	2480      	movs	r4, #128	; 0x80
   32098:	04e4      	lsls	r4, r4, #19
   3209a:	4252      	negs	r2, r2
   3209c:	4323      	orrs	r3, r4
   3209e:	2a1b      	cmp	r2, #27
   320a0:	dd00      	ble.n	320a4 <__aeabi_fadd+0x1e0>
   320a2:	e08a      	b.n	321ba <__aeabi_fadd+0x2f6>
   320a4:	001c      	movs	r4, r3
   320a6:	2520      	movs	r5, #32
   320a8:	40d4      	lsrs	r4, r2
   320aa:	1aaa      	subs	r2, r5, r2
   320ac:	4093      	lsls	r3, r2
   320ae:	1e5a      	subs	r2, r3, #1
   320b0:	4193      	sbcs	r3, r2
   320b2:	4323      	orrs	r3, r4
   320b4:	4662      	mov	r2, ip
   320b6:	0004      	movs	r4, r0
   320b8:	1ad3      	subs	r3, r2, r3
   320ba:	000d      	movs	r5, r1
   320bc:	e725      	b.n	31f0a <__aeabi_fadd+0x46>
   320be:	2e00      	cmp	r6, #0
   320c0:	d000      	beq.n	320c4 <__aeabi_fadd+0x200>
   320c2:	e726      	b.n	31f12 <__aeabi_fadd+0x4e>
   320c4:	2200      	movs	r2, #0
   320c6:	2400      	movs	r4, #0
   320c8:	e7a9      	b.n	3201e <__aeabi_fadd+0x15a>
   320ca:	000c      	movs	r4, r1
   320cc:	e735      	b.n	31f3a <__aeabi_fadd+0x76>
   320ce:	2b00      	cmp	r3, #0
   320d0:	d04d      	beq.n	3216e <__aeabi_fadd+0x2aa>
   320d2:	43d2      	mvns	r2, r2
   320d4:	2a00      	cmp	r2, #0
   320d6:	d0ed      	beq.n	320b4 <__aeabi_fadd+0x1f0>
   320d8:	28ff      	cmp	r0, #255	; 0xff
   320da:	d1e0      	bne.n	3209e <__aeabi_fadd+0x1da>
   320dc:	4663      	mov	r3, ip
   320de:	24ff      	movs	r4, #255	; 0xff
   320e0:	000d      	movs	r5, r1
   320e2:	e72a      	b.n	31f3a <__aeabi_fadd+0x76>
   320e4:	29ff      	cmp	r1, #255	; 0xff
   320e6:	d00f      	beq.n	32108 <__aeabi_fadd+0x244>
   320e8:	0001      	movs	r1, r0
   320ea:	e773      	b.n	31fd4 <__aeabi_fadd+0x110>
   320ec:	2b00      	cmp	r3, #0
   320ee:	d061      	beq.n	321b4 <__aeabi_fadd+0x2f0>
   320f0:	24ff      	movs	r4, #255	; 0xff
   320f2:	2f00      	cmp	r7, #0
   320f4:	d100      	bne.n	320f8 <__aeabi_fadd+0x234>
   320f6:	e720      	b.n	31f3a <__aeabi_fadd+0x76>
   320f8:	2280      	movs	r2, #128	; 0x80
   320fa:	4641      	mov	r1, r8
   320fc:	03d2      	lsls	r2, r2, #15
   320fe:	4211      	tst	r1, r2
   32100:	d002      	beq.n	32108 <__aeabi_fadd+0x244>
   32102:	4216      	tst	r6, r2
   32104:	d100      	bne.n	32108 <__aeabi_fadd+0x244>
   32106:	003b      	movs	r3, r7
   32108:	24ff      	movs	r4, #255	; 0xff
   3210a:	e716      	b.n	31f3a <__aeabi_fadd+0x76>
   3210c:	24ff      	movs	r4, #255	; 0xff
   3210e:	2300      	movs	r3, #0
   32110:	e724      	b.n	31f5c <__aeabi_fadd+0x98>
   32112:	2c00      	cmp	r4, #0
   32114:	d1ea      	bne.n	320ec <__aeabi_fadd+0x228>
   32116:	2b00      	cmp	r3, #0
   32118:	d058      	beq.n	321cc <__aeabi_fadd+0x308>
   3211a:	2f00      	cmp	r7, #0
   3211c:	d100      	bne.n	32120 <__aeabi_fadd+0x25c>
   3211e:	e70c      	b.n	31f3a <__aeabi_fadd+0x76>
   32120:	4463      	add	r3, ip
   32122:	015a      	lsls	r2, r3, #5
   32124:	d400      	bmi.n	32128 <__aeabi_fadd+0x264>
   32126:	e739      	b.n	31f9c <__aeabi_fadd+0xd8>
   32128:	4a2e      	ldr	r2, [pc, #184]	; (321e4 <__aeabi_fadd+0x320>)
   3212a:	000c      	movs	r4, r1
   3212c:	4013      	ands	r3, r2
   3212e:	e704      	b.n	31f3a <__aeabi_fadd+0x76>
   32130:	2101      	movs	r1, #1
   32132:	e75c      	b.n	31fee <__aeabi_fadd+0x12a>
   32134:	2c00      	cmp	r4, #0
   32136:	d11e      	bne.n	32176 <__aeabi_fadd+0x2b2>
   32138:	2b00      	cmp	r3, #0
   3213a:	d040      	beq.n	321be <__aeabi_fadd+0x2fa>
   3213c:	43c9      	mvns	r1, r1
   3213e:	2900      	cmp	r1, #0
   32140:	d00b      	beq.n	3215a <__aeabi_fadd+0x296>
   32142:	28ff      	cmp	r0, #255	; 0xff
   32144:	d036      	beq.n	321b4 <__aeabi_fadd+0x2f0>
   32146:	291b      	cmp	r1, #27
   32148:	dc47      	bgt.n	321da <__aeabi_fadd+0x316>
   3214a:	001c      	movs	r4, r3
   3214c:	2620      	movs	r6, #32
   3214e:	40cc      	lsrs	r4, r1
   32150:	1a71      	subs	r1, r6, r1
   32152:	408b      	lsls	r3, r1
   32154:	1e59      	subs	r1, r3, #1
   32156:	418b      	sbcs	r3, r1
   32158:	4323      	orrs	r3, r4
   3215a:	4463      	add	r3, ip
   3215c:	0004      	movs	r4, r0
   3215e:	e747      	b.n	31ff0 <__aeabi_fadd+0x12c>
   32160:	2b00      	cmp	r3, #0
   32162:	d118      	bne.n	32196 <__aeabi_fadd+0x2d2>
   32164:	1e3b      	subs	r3, r7, #0
   32166:	d02d      	beq.n	321c4 <__aeabi_fadd+0x300>
   32168:	000d      	movs	r5, r1
   3216a:	24ff      	movs	r4, #255	; 0xff
   3216c:	e6e5      	b.n	31f3a <__aeabi_fadd+0x76>
   3216e:	003b      	movs	r3, r7
   32170:	0004      	movs	r4, r0
   32172:	000d      	movs	r5, r1
   32174:	e6e1      	b.n	31f3a <__aeabi_fadd+0x76>
   32176:	28ff      	cmp	r0, #255	; 0xff
   32178:	d01c      	beq.n	321b4 <__aeabi_fadd+0x2f0>
   3217a:	2480      	movs	r4, #128	; 0x80
   3217c:	04e4      	lsls	r4, r4, #19
   3217e:	4249      	negs	r1, r1
   32180:	4323      	orrs	r3, r4
   32182:	e7e0      	b.n	32146 <__aeabi_fadd+0x282>
   32184:	2f00      	cmp	r7, #0
   32186:	d100      	bne.n	3218a <__aeabi_fadd+0x2c6>
   32188:	e6d7      	b.n	31f3a <__aeabi_fadd+0x76>
   3218a:	1bde      	subs	r6, r3, r7
   3218c:	0172      	lsls	r2, r6, #5
   3218e:	d51f      	bpl.n	321d0 <__aeabi_fadd+0x30c>
   32190:	1afb      	subs	r3, r7, r3
   32192:	000d      	movs	r5, r1
   32194:	e6d1      	b.n	31f3a <__aeabi_fadd+0x76>
   32196:	24ff      	movs	r4, #255	; 0xff
   32198:	2f00      	cmp	r7, #0
   3219a:	d100      	bne.n	3219e <__aeabi_fadd+0x2da>
   3219c:	e6cd      	b.n	31f3a <__aeabi_fadd+0x76>
   3219e:	2280      	movs	r2, #128	; 0x80
   321a0:	4640      	mov	r0, r8
   321a2:	03d2      	lsls	r2, r2, #15
   321a4:	4210      	tst	r0, r2
   321a6:	d0af      	beq.n	32108 <__aeabi_fadd+0x244>
   321a8:	4216      	tst	r6, r2
   321aa:	d1ad      	bne.n	32108 <__aeabi_fadd+0x244>
   321ac:	003b      	movs	r3, r7
   321ae:	000d      	movs	r5, r1
   321b0:	24ff      	movs	r4, #255	; 0xff
   321b2:	e6c2      	b.n	31f3a <__aeabi_fadd+0x76>
   321b4:	4663      	mov	r3, ip
   321b6:	24ff      	movs	r4, #255	; 0xff
   321b8:	e6bf      	b.n	31f3a <__aeabi_fadd+0x76>
   321ba:	2301      	movs	r3, #1
   321bc:	e77a      	b.n	320b4 <__aeabi_fadd+0x1f0>
   321be:	003b      	movs	r3, r7
   321c0:	0004      	movs	r4, r0
   321c2:	e6ba      	b.n	31f3a <__aeabi_fadd+0x76>
   321c4:	2680      	movs	r6, #128	; 0x80
   321c6:	2200      	movs	r2, #0
   321c8:	03f6      	lsls	r6, r6, #15
   321ca:	e6f0      	b.n	31fae <__aeabi_fadd+0xea>
   321cc:	003b      	movs	r3, r7
   321ce:	e6b4      	b.n	31f3a <__aeabi_fadd+0x76>
   321d0:	1e33      	subs	r3, r6, #0
   321d2:	d000      	beq.n	321d6 <__aeabi_fadd+0x312>
   321d4:	e6e2      	b.n	31f9c <__aeabi_fadd+0xd8>
   321d6:	2200      	movs	r2, #0
   321d8:	e721      	b.n	3201e <__aeabi_fadd+0x15a>
   321da:	2301      	movs	r3, #1
   321dc:	e7bd      	b.n	3215a <__aeabi_fadd+0x296>
   321de:	46c0      	nop			; (mov r8, r8)
   321e0:	7dffffff 	.word	0x7dffffff
   321e4:	fbffffff 	.word	0xfbffffff

000321e8 <__aeabi_fdiv>:
   321e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   321ea:	4657      	mov	r7, sl
   321ec:	464e      	mov	r6, r9
   321ee:	46de      	mov	lr, fp
   321f0:	4645      	mov	r5, r8
   321f2:	b5e0      	push	{r5, r6, r7, lr}
   321f4:	0244      	lsls	r4, r0, #9
   321f6:	0043      	lsls	r3, r0, #1
   321f8:	0fc6      	lsrs	r6, r0, #31
   321fa:	b083      	sub	sp, #12
   321fc:	1c0f      	adds	r7, r1, #0
   321fe:	0a64      	lsrs	r4, r4, #9
   32200:	0e1b      	lsrs	r3, r3, #24
   32202:	46b2      	mov	sl, r6
   32204:	d053      	beq.n	322ae <__aeabi_fdiv+0xc6>
   32206:	2bff      	cmp	r3, #255	; 0xff
   32208:	d027      	beq.n	3225a <__aeabi_fdiv+0x72>
   3220a:	2280      	movs	r2, #128	; 0x80
   3220c:	00e4      	lsls	r4, r4, #3
   3220e:	04d2      	lsls	r2, r2, #19
   32210:	4314      	orrs	r4, r2
   32212:	227f      	movs	r2, #127	; 0x7f
   32214:	4252      	negs	r2, r2
   32216:	4690      	mov	r8, r2
   32218:	4498      	add	r8, r3
   3221a:	2300      	movs	r3, #0
   3221c:	4699      	mov	r9, r3
   3221e:	469b      	mov	fp, r3
   32220:	027d      	lsls	r5, r7, #9
   32222:	0078      	lsls	r0, r7, #1
   32224:	0ffb      	lsrs	r3, r7, #31
   32226:	0a6d      	lsrs	r5, r5, #9
   32228:	0e00      	lsrs	r0, r0, #24
   3222a:	9300      	str	r3, [sp, #0]
   3222c:	d024      	beq.n	32278 <__aeabi_fdiv+0x90>
   3222e:	28ff      	cmp	r0, #255	; 0xff
   32230:	d046      	beq.n	322c0 <__aeabi_fdiv+0xd8>
   32232:	2380      	movs	r3, #128	; 0x80
   32234:	2100      	movs	r1, #0
   32236:	00ed      	lsls	r5, r5, #3
   32238:	04db      	lsls	r3, r3, #19
   3223a:	431d      	orrs	r5, r3
   3223c:	387f      	subs	r0, #127	; 0x7f
   3223e:	4647      	mov	r7, r8
   32240:	1a38      	subs	r0, r7, r0
   32242:	464f      	mov	r7, r9
   32244:	430f      	orrs	r7, r1
   32246:	00bf      	lsls	r7, r7, #2
   32248:	46b9      	mov	r9, r7
   3224a:	0033      	movs	r3, r6
   3224c:	9a00      	ldr	r2, [sp, #0]
   3224e:	4f87      	ldr	r7, [pc, #540]	; (3246c <__aeabi_fdiv+0x284>)
   32250:	4053      	eors	r3, r2
   32252:	464a      	mov	r2, r9
   32254:	58ba      	ldr	r2, [r7, r2]
   32256:	9301      	str	r3, [sp, #4]
   32258:	4697      	mov	pc, r2
   3225a:	2c00      	cmp	r4, #0
   3225c:	d14e      	bne.n	322fc <__aeabi_fdiv+0x114>
   3225e:	2308      	movs	r3, #8
   32260:	4699      	mov	r9, r3
   32262:	33f7      	adds	r3, #247	; 0xf7
   32264:	4698      	mov	r8, r3
   32266:	3bfd      	subs	r3, #253	; 0xfd
   32268:	469b      	mov	fp, r3
   3226a:	027d      	lsls	r5, r7, #9
   3226c:	0078      	lsls	r0, r7, #1
   3226e:	0ffb      	lsrs	r3, r7, #31
   32270:	0a6d      	lsrs	r5, r5, #9
   32272:	0e00      	lsrs	r0, r0, #24
   32274:	9300      	str	r3, [sp, #0]
   32276:	d1da      	bne.n	3222e <__aeabi_fdiv+0x46>
   32278:	2d00      	cmp	r5, #0
   3227a:	d126      	bne.n	322ca <__aeabi_fdiv+0xe2>
   3227c:	2000      	movs	r0, #0
   3227e:	2101      	movs	r1, #1
   32280:	0033      	movs	r3, r6
   32282:	9a00      	ldr	r2, [sp, #0]
   32284:	4f7a      	ldr	r7, [pc, #488]	; (32470 <__aeabi_fdiv+0x288>)
   32286:	4053      	eors	r3, r2
   32288:	4642      	mov	r2, r8
   3228a:	1a10      	subs	r0, r2, r0
   3228c:	464a      	mov	r2, r9
   3228e:	430a      	orrs	r2, r1
   32290:	0092      	lsls	r2, r2, #2
   32292:	58ba      	ldr	r2, [r7, r2]
   32294:	001d      	movs	r5, r3
   32296:	4697      	mov	pc, r2
   32298:	9b00      	ldr	r3, [sp, #0]
   3229a:	002c      	movs	r4, r5
   3229c:	469a      	mov	sl, r3
   3229e:	468b      	mov	fp, r1
   322a0:	465b      	mov	r3, fp
   322a2:	2b02      	cmp	r3, #2
   322a4:	d131      	bne.n	3230a <__aeabi_fdiv+0x122>
   322a6:	4653      	mov	r3, sl
   322a8:	21ff      	movs	r1, #255	; 0xff
   322aa:	2400      	movs	r4, #0
   322ac:	e038      	b.n	32320 <__aeabi_fdiv+0x138>
   322ae:	2c00      	cmp	r4, #0
   322b0:	d117      	bne.n	322e2 <__aeabi_fdiv+0xfa>
   322b2:	2304      	movs	r3, #4
   322b4:	4699      	mov	r9, r3
   322b6:	2300      	movs	r3, #0
   322b8:	4698      	mov	r8, r3
   322ba:	3301      	adds	r3, #1
   322bc:	469b      	mov	fp, r3
   322be:	e7af      	b.n	32220 <__aeabi_fdiv+0x38>
   322c0:	20ff      	movs	r0, #255	; 0xff
   322c2:	2d00      	cmp	r5, #0
   322c4:	d10b      	bne.n	322de <__aeabi_fdiv+0xf6>
   322c6:	2102      	movs	r1, #2
   322c8:	e7da      	b.n	32280 <__aeabi_fdiv+0x98>
   322ca:	0028      	movs	r0, r5
   322cc:	f002 f880 	bl	343d0 <__clzsi2>
   322d0:	1f43      	subs	r3, r0, #5
   322d2:	409d      	lsls	r5, r3
   322d4:	2376      	movs	r3, #118	; 0x76
   322d6:	425b      	negs	r3, r3
   322d8:	1a18      	subs	r0, r3, r0
   322da:	2100      	movs	r1, #0
   322dc:	e7af      	b.n	3223e <__aeabi_fdiv+0x56>
   322de:	2103      	movs	r1, #3
   322e0:	e7ad      	b.n	3223e <__aeabi_fdiv+0x56>
   322e2:	0020      	movs	r0, r4
   322e4:	f002 f874 	bl	343d0 <__clzsi2>
   322e8:	1f43      	subs	r3, r0, #5
   322ea:	409c      	lsls	r4, r3
   322ec:	2376      	movs	r3, #118	; 0x76
   322ee:	425b      	negs	r3, r3
   322f0:	1a1b      	subs	r3, r3, r0
   322f2:	4698      	mov	r8, r3
   322f4:	2300      	movs	r3, #0
   322f6:	4699      	mov	r9, r3
   322f8:	469b      	mov	fp, r3
   322fa:	e791      	b.n	32220 <__aeabi_fdiv+0x38>
   322fc:	230c      	movs	r3, #12
   322fe:	4699      	mov	r9, r3
   32300:	33f3      	adds	r3, #243	; 0xf3
   32302:	4698      	mov	r8, r3
   32304:	3bfc      	subs	r3, #252	; 0xfc
   32306:	469b      	mov	fp, r3
   32308:	e78a      	b.n	32220 <__aeabi_fdiv+0x38>
   3230a:	2b03      	cmp	r3, #3
   3230c:	d100      	bne.n	32310 <__aeabi_fdiv+0x128>
   3230e:	e0a5      	b.n	3245c <__aeabi_fdiv+0x274>
   32310:	4655      	mov	r5, sl
   32312:	2b01      	cmp	r3, #1
   32314:	d000      	beq.n	32318 <__aeabi_fdiv+0x130>
   32316:	e081      	b.n	3241c <__aeabi_fdiv+0x234>
   32318:	2301      	movs	r3, #1
   3231a:	2100      	movs	r1, #0
   3231c:	2400      	movs	r4, #0
   3231e:	402b      	ands	r3, r5
   32320:	0264      	lsls	r4, r4, #9
   32322:	05c9      	lsls	r1, r1, #23
   32324:	0a60      	lsrs	r0, r4, #9
   32326:	07db      	lsls	r3, r3, #31
   32328:	4308      	orrs	r0, r1
   3232a:	4318      	orrs	r0, r3
   3232c:	b003      	add	sp, #12
   3232e:	bc3c      	pop	{r2, r3, r4, r5}
   32330:	4690      	mov	r8, r2
   32332:	4699      	mov	r9, r3
   32334:	46a2      	mov	sl, r4
   32336:	46ab      	mov	fp, r5
   32338:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3233a:	2480      	movs	r4, #128	; 0x80
   3233c:	2300      	movs	r3, #0
   3233e:	03e4      	lsls	r4, r4, #15
   32340:	21ff      	movs	r1, #255	; 0xff
   32342:	e7ed      	b.n	32320 <__aeabi_fdiv+0x138>
   32344:	21ff      	movs	r1, #255	; 0xff
   32346:	2400      	movs	r4, #0
   32348:	e7ea      	b.n	32320 <__aeabi_fdiv+0x138>
   3234a:	2301      	movs	r3, #1
   3234c:	1a59      	subs	r1, r3, r1
   3234e:	291b      	cmp	r1, #27
   32350:	dd66      	ble.n	32420 <__aeabi_fdiv+0x238>
   32352:	9a01      	ldr	r2, [sp, #4]
   32354:	4013      	ands	r3, r2
   32356:	2100      	movs	r1, #0
   32358:	2400      	movs	r4, #0
   3235a:	e7e1      	b.n	32320 <__aeabi_fdiv+0x138>
   3235c:	2380      	movs	r3, #128	; 0x80
   3235e:	03db      	lsls	r3, r3, #15
   32360:	421c      	tst	r4, r3
   32362:	d038      	beq.n	323d6 <__aeabi_fdiv+0x1ee>
   32364:	421d      	tst	r5, r3
   32366:	d051      	beq.n	3240c <__aeabi_fdiv+0x224>
   32368:	431c      	orrs	r4, r3
   3236a:	0264      	lsls	r4, r4, #9
   3236c:	0a64      	lsrs	r4, r4, #9
   3236e:	0033      	movs	r3, r6
   32370:	21ff      	movs	r1, #255	; 0xff
   32372:	e7d5      	b.n	32320 <__aeabi_fdiv+0x138>
   32374:	0163      	lsls	r3, r4, #5
   32376:	016c      	lsls	r4, r5, #5
   32378:	42a3      	cmp	r3, r4
   3237a:	d23b      	bcs.n	323f4 <__aeabi_fdiv+0x20c>
   3237c:	261b      	movs	r6, #27
   3237e:	2100      	movs	r1, #0
   32380:	3801      	subs	r0, #1
   32382:	2501      	movs	r5, #1
   32384:	001f      	movs	r7, r3
   32386:	0049      	lsls	r1, r1, #1
   32388:	005b      	lsls	r3, r3, #1
   3238a:	2f00      	cmp	r7, #0
   3238c:	db01      	blt.n	32392 <__aeabi_fdiv+0x1aa>
   3238e:	429c      	cmp	r4, r3
   32390:	d801      	bhi.n	32396 <__aeabi_fdiv+0x1ae>
   32392:	1b1b      	subs	r3, r3, r4
   32394:	4329      	orrs	r1, r5
   32396:	3e01      	subs	r6, #1
   32398:	2e00      	cmp	r6, #0
   3239a:	d1f3      	bne.n	32384 <__aeabi_fdiv+0x19c>
   3239c:	001c      	movs	r4, r3
   3239e:	1e63      	subs	r3, r4, #1
   323a0:	419c      	sbcs	r4, r3
   323a2:	430c      	orrs	r4, r1
   323a4:	0001      	movs	r1, r0
   323a6:	317f      	adds	r1, #127	; 0x7f
   323a8:	2900      	cmp	r1, #0
   323aa:	ddce      	ble.n	3234a <__aeabi_fdiv+0x162>
   323ac:	0763      	lsls	r3, r4, #29
   323ae:	d004      	beq.n	323ba <__aeabi_fdiv+0x1d2>
   323b0:	230f      	movs	r3, #15
   323b2:	4023      	ands	r3, r4
   323b4:	2b04      	cmp	r3, #4
   323b6:	d000      	beq.n	323ba <__aeabi_fdiv+0x1d2>
   323b8:	3404      	adds	r4, #4
   323ba:	0123      	lsls	r3, r4, #4
   323bc:	d503      	bpl.n	323c6 <__aeabi_fdiv+0x1de>
   323be:	0001      	movs	r1, r0
   323c0:	4b2c      	ldr	r3, [pc, #176]	; (32474 <__aeabi_fdiv+0x28c>)
   323c2:	3180      	adds	r1, #128	; 0x80
   323c4:	401c      	ands	r4, r3
   323c6:	29fe      	cmp	r1, #254	; 0xfe
   323c8:	dd0d      	ble.n	323e6 <__aeabi_fdiv+0x1fe>
   323ca:	2301      	movs	r3, #1
   323cc:	9a01      	ldr	r2, [sp, #4]
   323ce:	21ff      	movs	r1, #255	; 0xff
   323d0:	4013      	ands	r3, r2
   323d2:	2400      	movs	r4, #0
   323d4:	e7a4      	b.n	32320 <__aeabi_fdiv+0x138>
   323d6:	2380      	movs	r3, #128	; 0x80
   323d8:	03db      	lsls	r3, r3, #15
   323da:	431c      	orrs	r4, r3
   323dc:	0264      	lsls	r4, r4, #9
   323de:	0a64      	lsrs	r4, r4, #9
   323e0:	0033      	movs	r3, r6
   323e2:	21ff      	movs	r1, #255	; 0xff
   323e4:	e79c      	b.n	32320 <__aeabi_fdiv+0x138>
   323e6:	2301      	movs	r3, #1
   323e8:	9a01      	ldr	r2, [sp, #4]
   323ea:	01a4      	lsls	r4, r4, #6
   323ec:	0a64      	lsrs	r4, r4, #9
   323ee:	b2c9      	uxtb	r1, r1
   323f0:	4013      	ands	r3, r2
   323f2:	e795      	b.n	32320 <__aeabi_fdiv+0x138>
   323f4:	1b1b      	subs	r3, r3, r4
   323f6:	261a      	movs	r6, #26
   323f8:	2101      	movs	r1, #1
   323fa:	e7c2      	b.n	32382 <__aeabi_fdiv+0x19a>
   323fc:	9b00      	ldr	r3, [sp, #0]
   323fe:	468b      	mov	fp, r1
   32400:	469a      	mov	sl, r3
   32402:	2400      	movs	r4, #0
   32404:	e74c      	b.n	322a0 <__aeabi_fdiv+0xb8>
   32406:	0263      	lsls	r3, r4, #9
   32408:	d5e5      	bpl.n	323d6 <__aeabi_fdiv+0x1ee>
   3240a:	2500      	movs	r5, #0
   3240c:	2480      	movs	r4, #128	; 0x80
   3240e:	03e4      	lsls	r4, r4, #15
   32410:	432c      	orrs	r4, r5
   32412:	0264      	lsls	r4, r4, #9
   32414:	0a64      	lsrs	r4, r4, #9
   32416:	9b00      	ldr	r3, [sp, #0]
   32418:	21ff      	movs	r1, #255	; 0xff
   3241a:	e781      	b.n	32320 <__aeabi_fdiv+0x138>
   3241c:	9501      	str	r5, [sp, #4]
   3241e:	e7c1      	b.n	323a4 <__aeabi_fdiv+0x1bc>
   32420:	0023      	movs	r3, r4
   32422:	2020      	movs	r0, #32
   32424:	40cb      	lsrs	r3, r1
   32426:	1a41      	subs	r1, r0, r1
   32428:	408c      	lsls	r4, r1
   3242a:	1e61      	subs	r1, r4, #1
   3242c:	418c      	sbcs	r4, r1
   3242e:	431c      	orrs	r4, r3
   32430:	0763      	lsls	r3, r4, #29
   32432:	d004      	beq.n	3243e <__aeabi_fdiv+0x256>
   32434:	230f      	movs	r3, #15
   32436:	4023      	ands	r3, r4
   32438:	2b04      	cmp	r3, #4
   3243a:	d000      	beq.n	3243e <__aeabi_fdiv+0x256>
   3243c:	3404      	adds	r4, #4
   3243e:	0163      	lsls	r3, r4, #5
   32440:	d505      	bpl.n	3244e <__aeabi_fdiv+0x266>
   32442:	2301      	movs	r3, #1
   32444:	9a01      	ldr	r2, [sp, #4]
   32446:	2101      	movs	r1, #1
   32448:	4013      	ands	r3, r2
   3244a:	2400      	movs	r4, #0
   3244c:	e768      	b.n	32320 <__aeabi_fdiv+0x138>
   3244e:	2301      	movs	r3, #1
   32450:	9a01      	ldr	r2, [sp, #4]
   32452:	01a4      	lsls	r4, r4, #6
   32454:	0a64      	lsrs	r4, r4, #9
   32456:	4013      	ands	r3, r2
   32458:	2100      	movs	r1, #0
   3245a:	e761      	b.n	32320 <__aeabi_fdiv+0x138>
   3245c:	2380      	movs	r3, #128	; 0x80
   3245e:	03db      	lsls	r3, r3, #15
   32460:	431c      	orrs	r4, r3
   32462:	0264      	lsls	r4, r4, #9
   32464:	0a64      	lsrs	r4, r4, #9
   32466:	4653      	mov	r3, sl
   32468:	21ff      	movs	r1, #255	; 0xff
   3246a:	e759      	b.n	32320 <__aeabi_fdiv+0x138>
   3246c:	00039a88 	.word	0x00039a88
   32470:	00039ac8 	.word	0x00039ac8
   32474:	f7ffffff 	.word	0xf7ffffff

00032478 <__aeabi_fmul>:
   32478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3247a:	4657      	mov	r7, sl
   3247c:	464e      	mov	r6, r9
   3247e:	4645      	mov	r5, r8
   32480:	46de      	mov	lr, fp
   32482:	b5e0      	push	{r5, r6, r7, lr}
   32484:	0247      	lsls	r7, r0, #9
   32486:	0046      	lsls	r6, r0, #1
   32488:	4688      	mov	r8, r1
   3248a:	0a7f      	lsrs	r7, r7, #9
   3248c:	0e36      	lsrs	r6, r6, #24
   3248e:	0fc4      	lsrs	r4, r0, #31
   32490:	2e00      	cmp	r6, #0
   32492:	d047      	beq.n	32524 <__aeabi_fmul+0xac>
   32494:	2eff      	cmp	r6, #255	; 0xff
   32496:	d024      	beq.n	324e2 <__aeabi_fmul+0x6a>
   32498:	00fb      	lsls	r3, r7, #3
   3249a:	2780      	movs	r7, #128	; 0x80
   3249c:	04ff      	lsls	r7, r7, #19
   3249e:	431f      	orrs	r7, r3
   324a0:	2300      	movs	r3, #0
   324a2:	4699      	mov	r9, r3
   324a4:	469a      	mov	sl, r3
   324a6:	3e7f      	subs	r6, #127	; 0x7f
   324a8:	4643      	mov	r3, r8
   324aa:	025d      	lsls	r5, r3, #9
   324ac:	0058      	lsls	r0, r3, #1
   324ae:	0fdb      	lsrs	r3, r3, #31
   324b0:	0a6d      	lsrs	r5, r5, #9
   324b2:	0e00      	lsrs	r0, r0, #24
   324b4:	4698      	mov	r8, r3
   324b6:	d043      	beq.n	32540 <__aeabi_fmul+0xc8>
   324b8:	28ff      	cmp	r0, #255	; 0xff
   324ba:	d03b      	beq.n	32534 <__aeabi_fmul+0xbc>
   324bc:	00eb      	lsls	r3, r5, #3
   324be:	2580      	movs	r5, #128	; 0x80
   324c0:	2200      	movs	r2, #0
   324c2:	04ed      	lsls	r5, r5, #19
   324c4:	431d      	orrs	r5, r3
   324c6:	387f      	subs	r0, #127	; 0x7f
   324c8:	1836      	adds	r6, r6, r0
   324ca:	1c73      	adds	r3, r6, #1
   324cc:	4641      	mov	r1, r8
   324ce:	469b      	mov	fp, r3
   324d0:	464b      	mov	r3, r9
   324d2:	4061      	eors	r1, r4
   324d4:	4313      	orrs	r3, r2
   324d6:	2b0f      	cmp	r3, #15
   324d8:	d864      	bhi.n	325a4 <__aeabi_fmul+0x12c>
   324da:	4875      	ldr	r0, [pc, #468]	; (326b0 <__aeabi_fmul+0x238>)
   324dc:	009b      	lsls	r3, r3, #2
   324de:	58c3      	ldr	r3, [r0, r3]
   324e0:	469f      	mov	pc, r3
   324e2:	2f00      	cmp	r7, #0
   324e4:	d142      	bne.n	3256c <__aeabi_fmul+0xf4>
   324e6:	2308      	movs	r3, #8
   324e8:	4699      	mov	r9, r3
   324ea:	3b06      	subs	r3, #6
   324ec:	26ff      	movs	r6, #255	; 0xff
   324ee:	469a      	mov	sl, r3
   324f0:	e7da      	b.n	324a8 <__aeabi_fmul+0x30>
   324f2:	4641      	mov	r1, r8
   324f4:	2a02      	cmp	r2, #2
   324f6:	d028      	beq.n	3254a <__aeabi_fmul+0xd2>
   324f8:	2a03      	cmp	r2, #3
   324fa:	d100      	bne.n	324fe <__aeabi_fmul+0x86>
   324fc:	e0ce      	b.n	3269c <__aeabi_fmul+0x224>
   324fe:	2a01      	cmp	r2, #1
   32500:	d000      	beq.n	32504 <__aeabi_fmul+0x8c>
   32502:	e0ac      	b.n	3265e <__aeabi_fmul+0x1e6>
   32504:	4011      	ands	r1, r2
   32506:	2000      	movs	r0, #0
   32508:	2200      	movs	r2, #0
   3250a:	b2cc      	uxtb	r4, r1
   3250c:	0240      	lsls	r0, r0, #9
   3250e:	05d2      	lsls	r2, r2, #23
   32510:	0a40      	lsrs	r0, r0, #9
   32512:	07e4      	lsls	r4, r4, #31
   32514:	4310      	orrs	r0, r2
   32516:	4320      	orrs	r0, r4
   32518:	bc3c      	pop	{r2, r3, r4, r5}
   3251a:	4690      	mov	r8, r2
   3251c:	4699      	mov	r9, r3
   3251e:	46a2      	mov	sl, r4
   32520:	46ab      	mov	fp, r5
   32522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32524:	2f00      	cmp	r7, #0
   32526:	d115      	bne.n	32554 <__aeabi_fmul+0xdc>
   32528:	2304      	movs	r3, #4
   3252a:	4699      	mov	r9, r3
   3252c:	3b03      	subs	r3, #3
   3252e:	2600      	movs	r6, #0
   32530:	469a      	mov	sl, r3
   32532:	e7b9      	b.n	324a8 <__aeabi_fmul+0x30>
   32534:	20ff      	movs	r0, #255	; 0xff
   32536:	2202      	movs	r2, #2
   32538:	2d00      	cmp	r5, #0
   3253a:	d0c5      	beq.n	324c8 <__aeabi_fmul+0x50>
   3253c:	2203      	movs	r2, #3
   3253e:	e7c3      	b.n	324c8 <__aeabi_fmul+0x50>
   32540:	2d00      	cmp	r5, #0
   32542:	d119      	bne.n	32578 <__aeabi_fmul+0x100>
   32544:	2000      	movs	r0, #0
   32546:	2201      	movs	r2, #1
   32548:	e7be      	b.n	324c8 <__aeabi_fmul+0x50>
   3254a:	2401      	movs	r4, #1
   3254c:	22ff      	movs	r2, #255	; 0xff
   3254e:	400c      	ands	r4, r1
   32550:	2000      	movs	r0, #0
   32552:	e7db      	b.n	3250c <__aeabi_fmul+0x94>
   32554:	0038      	movs	r0, r7
   32556:	f001 ff3b 	bl	343d0 <__clzsi2>
   3255a:	2676      	movs	r6, #118	; 0x76
   3255c:	1f43      	subs	r3, r0, #5
   3255e:	409f      	lsls	r7, r3
   32560:	2300      	movs	r3, #0
   32562:	4276      	negs	r6, r6
   32564:	1a36      	subs	r6, r6, r0
   32566:	4699      	mov	r9, r3
   32568:	469a      	mov	sl, r3
   3256a:	e79d      	b.n	324a8 <__aeabi_fmul+0x30>
   3256c:	230c      	movs	r3, #12
   3256e:	4699      	mov	r9, r3
   32570:	3b09      	subs	r3, #9
   32572:	26ff      	movs	r6, #255	; 0xff
   32574:	469a      	mov	sl, r3
   32576:	e797      	b.n	324a8 <__aeabi_fmul+0x30>
   32578:	0028      	movs	r0, r5
   3257a:	f001 ff29 	bl	343d0 <__clzsi2>
   3257e:	1f43      	subs	r3, r0, #5
   32580:	409d      	lsls	r5, r3
   32582:	2376      	movs	r3, #118	; 0x76
   32584:	425b      	negs	r3, r3
   32586:	1a18      	subs	r0, r3, r0
   32588:	2200      	movs	r2, #0
   3258a:	e79d      	b.n	324c8 <__aeabi_fmul+0x50>
   3258c:	2080      	movs	r0, #128	; 0x80
   3258e:	2400      	movs	r4, #0
   32590:	03c0      	lsls	r0, r0, #15
   32592:	22ff      	movs	r2, #255	; 0xff
   32594:	e7ba      	b.n	3250c <__aeabi_fmul+0x94>
   32596:	003d      	movs	r5, r7
   32598:	4652      	mov	r2, sl
   3259a:	e7ab      	b.n	324f4 <__aeabi_fmul+0x7c>
   3259c:	003d      	movs	r5, r7
   3259e:	0021      	movs	r1, r4
   325a0:	4652      	mov	r2, sl
   325a2:	e7a7      	b.n	324f4 <__aeabi_fmul+0x7c>
   325a4:	0c3b      	lsrs	r3, r7, #16
   325a6:	469c      	mov	ip, r3
   325a8:	042a      	lsls	r2, r5, #16
   325aa:	0c12      	lsrs	r2, r2, #16
   325ac:	0c2b      	lsrs	r3, r5, #16
   325ae:	0014      	movs	r4, r2
   325b0:	4660      	mov	r0, ip
   325b2:	4665      	mov	r5, ip
   325b4:	043f      	lsls	r7, r7, #16
   325b6:	0c3f      	lsrs	r7, r7, #16
   325b8:	437c      	muls	r4, r7
   325ba:	4342      	muls	r2, r0
   325bc:	435d      	muls	r5, r3
   325be:	437b      	muls	r3, r7
   325c0:	0c27      	lsrs	r7, r4, #16
   325c2:	189b      	adds	r3, r3, r2
   325c4:	18ff      	adds	r7, r7, r3
   325c6:	42ba      	cmp	r2, r7
   325c8:	d903      	bls.n	325d2 <__aeabi_fmul+0x15a>
   325ca:	2380      	movs	r3, #128	; 0x80
   325cc:	025b      	lsls	r3, r3, #9
   325ce:	469c      	mov	ip, r3
   325d0:	4465      	add	r5, ip
   325d2:	0424      	lsls	r4, r4, #16
   325d4:	043a      	lsls	r2, r7, #16
   325d6:	0c24      	lsrs	r4, r4, #16
   325d8:	1912      	adds	r2, r2, r4
   325da:	0193      	lsls	r3, r2, #6
   325dc:	1e5c      	subs	r4, r3, #1
   325de:	41a3      	sbcs	r3, r4
   325e0:	0c3f      	lsrs	r7, r7, #16
   325e2:	0e92      	lsrs	r2, r2, #26
   325e4:	197d      	adds	r5, r7, r5
   325e6:	431a      	orrs	r2, r3
   325e8:	01ad      	lsls	r5, r5, #6
   325ea:	4315      	orrs	r5, r2
   325ec:	012b      	lsls	r3, r5, #4
   325ee:	d504      	bpl.n	325fa <__aeabi_fmul+0x182>
   325f0:	2301      	movs	r3, #1
   325f2:	465e      	mov	r6, fp
   325f4:	086a      	lsrs	r2, r5, #1
   325f6:	401d      	ands	r5, r3
   325f8:	4315      	orrs	r5, r2
   325fa:	0032      	movs	r2, r6
   325fc:	327f      	adds	r2, #127	; 0x7f
   325fe:	2a00      	cmp	r2, #0
   32600:	dd25      	ble.n	3264e <__aeabi_fmul+0x1d6>
   32602:	076b      	lsls	r3, r5, #29
   32604:	d004      	beq.n	32610 <__aeabi_fmul+0x198>
   32606:	230f      	movs	r3, #15
   32608:	402b      	ands	r3, r5
   3260a:	2b04      	cmp	r3, #4
   3260c:	d000      	beq.n	32610 <__aeabi_fmul+0x198>
   3260e:	3504      	adds	r5, #4
   32610:	012b      	lsls	r3, r5, #4
   32612:	d503      	bpl.n	3261c <__aeabi_fmul+0x1a4>
   32614:	0032      	movs	r2, r6
   32616:	4b27      	ldr	r3, [pc, #156]	; (326b4 <__aeabi_fmul+0x23c>)
   32618:	3280      	adds	r2, #128	; 0x80
   3261a:	401d      	ands	r5, r3
   3261c:	2afe      	cmp	r2, #254	; 0xfe
   3261e:	dc94      	bgt.n	3254a <__aeabi_fmul+0xd2>
   32620:	2401      	movs	r4, #1
   32622:	01a8      	lsls	r0, r5, #6
   32624:	0a40      	lsrs	r0, r0, #9
   32626:	b2d2      	uxtb	r2, r2
   32628:	400c      	ands	r4, r1
   3262a:	e76f      	b.n	3250c <__aeabi_fmul+0x94>
   3262c:	2080      	movs	r0, #128	; 0x80
   3262e:	03c0      	lsls	r0, r0, #15
   32630:	4207      	tst	r7, r0
   32632:	d007      	beq.n	32644 <__aeabi_fmul+0x1cc>
   32634:	4205      	tst	r5, r0
   32636:	d105      	bne.n	32644 <__aeabi_fmul+0x1cc>
   32638:	4328      	orrs	r0, r5
   3263a:	0240      	lsls	r0, r0, #9
   3263c:	0a40      	lsrs	r0, r0, #9
   3263e:	4644      	mov	r4, r8
   32640:	22ff      	movs	r2, #255	; 0xff
   32642:	e763      	b.n	3250c <__aeabi_fmul+0x94>
   32644:	4338      	orrs	r0, r7
   32646:	0240      	lsls	r0, r0, #9
   32648:	0a40      	lsrs	r0, r0, #9
   3264a:	22ff      	movs	r2, #255	; 0xff
   3264c:	e75e      	b.n	3250c <__aeabi_fmul+0x94>
   3264e:	2401      	movs	r4, #1
   32650:	1aa3      	subs	r3, r4, r2
   32652:	2b1b      	cmp	r3, #27
   32654:	dd05      	ble.n	32662 <__aeabi_fmul+0x1ea>
   32656:	400c      	ands	r4, r1
   32658:	2200      	movs	r2, #0
   3265a:	2000      	movs	r0, #0
   3265c:	e756      	b.n	3250c <__aeabi_fmul+0x94>
   3265e:	465e      	mov	r6, fp
   32660:	e7cb      	b.n	325fa <__aeabi_fmul+0x182>
   32662:	002a      	movs	r2, r5
   32664:	2020      	movs	r0, #32
   32666:	40da      	lsrs	r2, r3
   32668:	1ac3      	subs	r3, r0, r3
   3266a:	409d      	lsls	r5, r3
   3266c:	002b      	movs	r3, r5
   3266e:	1e5d      	subs	r5, r3, #1
   32670:	41ab      	sbcs	r3, r5
   32672:	4313      	orrs	r3, r2
   32674:	075a      	lsls	r2, r3, #29
   32676:	d004      	beq.n	32682 <__aeabi_fmul+0x20a>
   32678:	220f      	movs	r2, #15
   3267a:	401a      	ands	r2, r3
   3267c:	2a04      	cmp	r2, #4
   3267e:	d000      	beq.n	32682 <__aeabi_fmul+0x20a>
   32680:	3304      	adds	r3, #4
   32682:	015a      	lsls	r2, r3, #5
   32684:	d504      	bpl.n	32690 <__aeabi_fmul+0x218>
   32686:	2401      	movs	r4, #1
   32688:	2201      	movs	r2, #1
   3268a:	400c      	ands	r4, r1
   3268c:	2000      	movs	r0, #0
   3268e:	e73d      	b.n	3250c <__aeabi_fmul+0x94>
   32690:	2401      	movs	r4, #1
   32692:	019b      	lsls	r3, r3, #6
   32694:	0a58      	lsrs	r0, r3, #9
   32696:	400c      	ands	r4, r1
   32698:	2200      	movs	r2, #0
   3269a:	e737      	b.n	3250c <__aeabi_fmul+0x94>
   3269c:	2080      	movs	r0, #128	; 0x80
   3269e:	2401      	movs	r4, #1
   326a0:	03c0      	lsls	r0, r0, #15
   326a2:	4328      	orrs	r0, r5
   326a4:	0240      	lsls	r0, r0, #9
   326a6:	0a40      	lsrs	r0, r0, #9
   326a8:	400c      	ands	r4, r1
   326aa:	22ff      	movs	r2, #255	; 0xff
   326ac:	e72e      	b.n	3250c <__aeabi_fmul+0x94>
   326ae:	46c0      	nop			; (mov r8, r8)
   326b0:	00039b08 	.word	0x00039b08
   326b4:	f7ffffff 	.word	0xf7ffffff

000326b8 <__aeabi_fsub>:
   326b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   326ba:	464f      	mov	r7, r9
   326bc:	46d6      	mov	lr, sl
   326be:	4646      	mov	r6, r8
   326c0:	0044      	lsls	r4, r0, #1
   326c2:	b5c0      	push	{r6, r7, lr}
   326c4:	0fc2      	lsrs	r2, r0, #31
   326c6:	0247      	lsls	r7, r0, #9
   326c8:	0248      	lsls	r0, r1, #9
   326ca:	0a40      	lsrs	r0, r0, #9
   326cc:	4684      	mov	ip, r0
   326ce:	4666      	mov	r6, ip
   326d0:	0a7b      	lsrs	r3, r7, #9
   326d2:	0048      	lsls	r0, r1, #1
   326d4:	0fc9      	lsrs	r1, r1, #31
   326d6:	469a      	mov	sl, r3
   326d8:	0e24      	lsrs	r4, r4, #24
   326da:	0015      	movs	r5, r2
   326dc:	00db      	lsls	r3, r3, #3
   326de:	0e00      	lsrs	r0, r0, #24
   326e0:	4689      	mov	r9, r1
   326e2:	00f6      	lsls	r6, r6, #3
   326e4:	28ff      	cmp	r0, #255	; 0xff
   326e6:	d100      	bne.n	326ea <__aeabi_fsub+0x32>
   326e8:	e08f      	b.n	3280a <__aeabi_fsub+0x152>
   326ea:	2101      	movs	r1, #1
   326ec:	464f      	mov	r7, r9
   326ee:	404f      	eors	r7, r1
   326f0:	0039      	movs	r1, r7
   326f2:	4291      	cmp	r1, r2
   326f4:	d066      	beq.n	327c4 <__aeabi_fsub+0x10c>
   326f6:	1a22      	subs	r2, r4, r0
   326f8:	2a00      	cmp	r2, #0
   326fa:	dc00      	bgt.n	326fe <__aeabi_fsub+0x46>
   326fc:	e09d      	b.n	3283a <__aeabi_fsub+0x182>
   326fe:	2800      	cmp	r0, #0
   32700:	d13d      	bne.n	3277e <__aeabi_fsub+0xc6>
   32702:	2e00      	cmp	r6, #0
   32704:	d100      	bne.n	32708 <__aeabi_fsub+0x50>
   32706:	e08b      	b.n	32820 <__aeabi_fsub+0x168>
   32708:	1e51      	subs	r1, r2, #1
   3270a:	2900      	cmp	r1, #0
   3270c:	d000      	beq.n	32710 <__aeabi_fsub+0x58>
   3270e:	e0b5      	b.n	3287c <__aeabi_fsub+0x1c4>
   32710:	2401      	movs	r4, #1
   32712:	1b9b      	subs	r3, r3, r6
   32714:	015a      	lsls	r2, r3, #5
   32716:	d544      	bpl.n	327a2 <__aeabi_fsub+0xea>
   32718:	019b      	lsls	r3, r3, #6
   3271a:	099f      	lsrs	r7, r3, #6
   3271c:	0038      	movs	r0, r7
   3271e:	f001 fe57 	bl	343d0 <__clzsi2>
   32722:	3805      	subs	r0, #5
   32724:	4087      	lsls	r7, r0
   32726:	4284      	cmp	r4, r0
   32728:	dd00      	ble.n	3272c <__aeabi_fsub+0x74>
   3272a:	e096      	b.n	3285a <__aeabi_fsub+0x1a2>
   3272c:	1b04      	subs	r4, r0, r4
   3272e:	003a      	movs	r2, r7
   32730:	2020      	movs	r0, #32
   32732:	3401      	adds	r4, #1
   32734:	40e2      	lsrs	r2, r4
   32736:	1b04      	subs	r4, r0, r4
   32738:	40a7      	lsls	r7, r4
   3273a:	003b      	movs	r3, r7
   3273c:	1e5f      	subs	r7, r3, #1
   3273e:	41bb      	sbcs	r3, r7
   32740:	2400      	movs	r4, #0
   32742:	4313      	orrs	r3, r2
   32744:	075a      	lsls	r2, r3, #29
   32746:	d004      	beq.n	32752 <__aeabi_fsub+0x9a>
   32748:	220f      	movs	r2, #15
   3274a:	401a      	ands	r2, r3
   3274c:	2a04      	cmp	r2, #4
   3274e:	d000      	beq.n	32752 <__aeabi_fsub+0x9a>
   32750:	3304      	adds	r3, #4
   32752:	015a      	lsls	r2, r3, #5
   32754:	d527      	bpl.n	327a6 <__aeabi_fsub+0xee>
   32756:	3401      	adds	r4, #1
   32758:	2cff      	cmp	r4, #255	; 0xff
   3275a:	d100      	bne.n	3275e <__aeabi_fsub+0xa6>
   3275c:	e079      	b.n	32852 <__aeabi_fsub+0x19a>
   3275e:	2201      	movs	r2, #1
   32760:	019b      	lsls	r3, r3, #6
   32762:	0a5b      	lsrs	r3, r3, #9
   32764:	b2e4      	uxtb	r4, r4
   32766:	402a      	ands	r2, r5
   32768:	025b      	lsls	r3, r3, #9
   3276a:	05e4      	lsls	r4, r4, #23
   3276c:	0a58      	lsrs	r0, r3, #9
   3276e:	07d2      	lsls	r2, r2, #31
   32770:	4320      	orrs	r0, r4
   32772:	4310      	orrs	r0, r2
   32774:	bc1c      	pop	{r2, r3, r4}
   32776:	4690      	mov	r8, r2
   32778:	4699      	mov	r9, r3
   3277a:	46a2      	mov	sl, r4
   3277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3277e:	2cff      	cmp	r4, #255	; 0xff
   32780:	d0e0      	beq.n	32744 <__aeabi_fsub+0x8c>
   32782:	2180      	movs	r1, #128	; 0x80
   32784:	04c9      	lsls	r1, r1, #19
   32786:	430e      	orrs	r6, r1
   32788:	2a1b      	cmp	r2, #27
   3278a:	dc7b      	bgt.n	32884 <__aeabi_fsub+0x1cc>
   3278c:	0031      	movs	r1, r6
   3278e:	2020      	movs	r0, #32
   32790:	40d1      	lsrs	r1, r2
   32792:	1a82      	subs	r2, r0, r2
   32794:	4096      	lsls	r6, r2
   32796:	1e72      	subs	r2, r6, #1
   32798:	4196      	sbcs	r6, r2
   3279a:	430e      	orrs	r6, r1
   3279c:	1b9b      	subs	r3, r3, r6
   3279e:	015a      	lsls	r2, r3, #5
   327a0:	d4ba      	bmi.n	32718 <__aeabi_fsub+0x60>
   327a2:	075a      	lsls	r2, r3, #29
   327a4:	d1d0      	bne.n	32748 <__aeabi_fsub+0x90>
   327a6:	2201      	movs	r2, #1
   327a8:	08df      	lsrs	r7, r3, #3
   327aa:	402a      	ands	r2, r5
   327ac:	2cff      	cmp	r4, #255	; 0xff
   327ae:	d133      	bne.n	32818 <__aeabi_fsub+0x160>
   327b0:	2f00      	cmp	r7, #0
   327b2:	d100      	bne.n	327b6 <__aeabi_fsub+0xfe>
   327b4:	e0a8      	b.n	32908 <__aeabi_fsub+0x250>
   327b6:	2380      	movs	r3, #128	; 0x80
   327b8:	03db      	lsls	r3, r3, #15
   327ba:	433b      	orrs	r3, r7
   327bc:	025b      	lsls	r3, r3, #9
   327be:	0a5b      	lsrs	r3, r3, #9
   327c0:	24ff      	movs	r4, #255	; 0xff
   327c2:	e7d1      	b.n	32768 <__aeabi_fsub+0xb0>
   327c4:	1a21      	subs	r1, r4, r0
   327c6:	2900      	cmp	r1, #0
   327c8:	dd4c      	ble.n	32864 <__aeabi_fsub+0x1ac>
   327ca:	2800      	cmp	r0, #0
   327cc:	d02a      	beq.n	32824 <__aeabi_fsub+0x16c>
   327ce:	2cff      	cmp	r4, #255	; 0xff
   327d0:	d0b8      	beq.n	32744 <__aeabi_fsub+0x8c>
   327d2:	2080      	movs	r0, #128	; 0x80
   327d4:	04c0      	lsls	r0, r0, #19
   327d6:	4306      	orrs	r6, r0
   327d8:	291b      	cmp	r1, #27
   327da:	dd00      	ble.n	327de <__aeabi_fsub+0x126>
   327dc:	e0af      	b.n	3293e <__aeabi_fsub+0x286>
   327de:	0030      	movs	r0, r6
   327e0:	2720      	movs	r7, #32
   327e2:	40c8      	lsrs	r0, r1
   327e4:	1a79      	subs	r1, r7, r1
   327e6:	408e      	lsls	r6, r1
   327e8:	1e71      	subs	r1, r6, #1
   327ea:	418e      	sbcs	r6, r1
   327ec:	4306      	orrs	r6, r0
   327ee:	199b      	adds	r3, r3, r6
   327f0:	0159      	lsls	r1, r3, #5
   327f2:	d5d6      	bpl.n	327a2 <__aeabi_fsub+0xea>
   327f4:	3401      	adds	r4, #1
   327f6:	2cff      	cmp	r4, #255	; 0xff
   327f8:	d100      	bne.n	327fc <__aeabi_fsub+0x144>
   327fa:	e085      	b.n	32908 <__aeabi_fsub+0x250>
   327fc:	2201      	movs	r2, #1
   327fe:	497a      	ldr	r1, [pc, #488]	; (329e8 <__aeabi_fsub+0x330>)
   32800:	401a      	ands	r2, r3
   32802:	085b      	lsrs	r3, r3, #1
   32804:	400b      	ands	r3, r1
   32806:	4313      	orrs	r3, r2
   32808:	e79c      	b.n	32744 <__aeabi_fsub+0x8c>
   3280a:	2e00      	cmp	r6, #0
   3280c:	d000      	beq.n	32810 <__aeabi_fsub+0x158>
   3280e:	e770      	b.n	326f2 <__aeabi_fsub+0x3a>
   32810:	e76b      	b.n	326ea <__aeabi_fsub+0x32>
   32812:	1e3b      	subs	r3, r7, #0
   32814:	d1c5      	bne.n	327a2 <__aeabi_fsub+0xea>
   32816:	2200      	movs	r2, #0
   32818:	027b      	lsls	r3, r7, #9
   3281a:	0a5b      	lsrs	r3, r3, #9
   3281c:	b2e4      	uxtb	r4, r4
   3281e:	e7a3      	b.n	32768 <__aeabi_fsub+0xb0>
   32820:	0014      	movs	r4, r2
   32822:	e78f      	b.n	32744 <__aeabi_fsub+0x8c>
   32824:	2e00      	cmp	r6, #0
   32826:	d04d      	beq.n	328c4 <__aeabi_fsub+0x20c>
   32828:	1e48      	subs	r0, r1, #1
   3282a:	2800      	cmp	r0, #0
   3282c:	d157      	bne.n	328de <__aeabi_fsub+0x226>
   3282e:	199b      	adds	r3, r3, r6
   32830:	2401      	movs	r4, #1
   32832:	015a      	lsls	r2, r3, #5
   32834:	d5b5      	bpl.n	327a2 <__aeabi_fsub+0xea>
   32836:	2402      	movs	r4, #2
   32838:	e7e0      	b.n	327fc <__aeabi_fsub+0x144>
   3283a:	2a00      	cmp	r2, #0
   3283c:	d125      	bne.n	3288a <__aeabi_fsub+0x1d2>
   3283e:	1c62      	adds	r2, r4, #1
   32840:	b2d2      	uxtb	r2, r2
   32842:	2a01      	cmp	r2, #1
   32844:	dd72      	ble.n	3292c <__aeabi_fsub+0x274>
   32846:	1b9f      	subs	r7, r3, r6
   32848:	017a      	lsls	r2, r7, #5
   3284a:	d535      	bpl.n	328b8 <__aeabi_fsub+0x200>
   3284c:	1af7      	subs	r7, r6, r3
   3284e:	000d      	movs	r5, r1
   32850:	e764      	b.n	3271c <__aeabi_fsub+0x64>
   32852:	2201      	movs	r2, #1
   32854:	2300      	movs	r3, #0
   32856:	402a      	ands	r2, r5
   32858:	e786      	b.n	32768 <__aeabi_fsub+0xb0>
   3285a:	003b      	movs	r3, r7
   3285c:	4a63      	ldr	r2, [pc, #396]	; (329ec <__aeabi_fsub+0x334>)
   3285e:	1a24      	subs	r4, r4, r0
   32860:	4013      	ands	r3, r2
   32862:	e76f      	b.n	32744 <__aeabi_fsub+0x8c>
   32864:	2900      	cmp	r1, #0
   32866:	d16c      	bne.n	32942 <__aeabi_fsub+0x28a>
   32868:	1c61      	adds	r1, r4, #1
   3286a:	b2c8      	uxtb	r0, r1
   3286c:	2801      	cmp	r0, #1
   3286e:	dd4e      	ble.n	3290e <__aeabi_fsub+0x256>
   32870:	29ff      	cmp	r1, #255	; 0xff
   32872:	d049      	beq.n	32908 <__aeabi_fsub+0x250>
   32874:	199b      	adds	r3, r3, r6
   32876:	085b      	lsrs	r3, r3, #1
   32878:	000c      	movs	r4, r1
   3287a:	e763      	b.n	32744 <__aeabi_fsub+0x8c>
   3287c:	2aff      	cmp	r2, #255	; 0xff
   3287e:	d041      	beq.n	32904 <__aeabi_fsub+0x24c>
   32880:	000a      	movs	r2, r1
   32882:	e781      	b.n	32788 <__aeabi_fsub+0xd0>
   32884:	2601      	movs	r6, #1
   32886:	1b9b      	subs	r3, r3, r6
   32888:	e789      	b.n	3279e <__aeabi_fsub+0xe6>
   3288a:	2c00      	cmp	r4, #0
   3288c:	d01c      	beq.n	328c8 <__aeabi_fsub+0x210>
   3288e:	28ff      	cmp	r0, #255	; 0xff
   32890:	d021      	beq.n	328d6 <__aeabi_fsub+0x21e>
   32892:	2480      	movs	r4, #128	; 0x80
   32894:	04e4      	lsls	r4, r4, #19
   32896:	4252      	negs	r2, r2
   32898:	4323      	orrs	r3, r4
   3289a:	2a1b      	cmp	r2, #27
   3289c:	dd00      	ble.n	328a0 <__aeabi_fsub+0x1e8>
   3289e:	e096      	b.n	329ce <__aeabi_fsub+0x316>
   328a0:	001c      	movs	r4, r3
   328a2:	2520      	movs	r5, #32
   328a4:	40d4      	lsrs	r4, r2
   328a6:	1aaa      	subs	r2, r5, r2
   328a8:	4093      	lsls	r3, r2
   328aa:	1e5a      	subs	r2, r3, #1
   328ac:	4193      	sbcs	r3, r2
   328ae:	4323      	orrs	r3, r4
   328b0:	1af3      	subs	r3, r6, r3
   328b2:	0004      	movs	r4, r0
   328b4:	000d      	movs	r5, r1
   328b6:	e72d      	b.n	32714 <__aeabi_fsub+0x5c>
   328b8:	2f00      	cmp	r7, #0
   328ba:	d000      	beq.n	328be <__aeabi_fsub+0x206>
   328bc:	e72e      	b.n	3271c <__aeabi_fsub+0x64>
   328be:	2200      	movs	r2, #0
   328c0:	2400      	movs	r4, #0
   328c2:	e7a9      	b.n	32818 <__aeabi_fsub+0x160>
   328c4:	000c      	movs	r4, r1
   328c6:	e73d      	b.n	32744 <__aeabi_fsub+0x8c>
   328c8:	2b00      	cmp	r3, #0
   328ca:	d058      	beq.n	3297e <__aeabi_fsub+0x2c6>
   328cc:	43d2      	mvns	r2, r2
   328ce:	2a00      	cmp	r2, #0
   328d0:	d0ee      	beq.n	328b0 <__aeabi_fsub+0x1f8>
   328d2:	28ff      	cmp	r0, #255	; 0xff
   328d4:	d1e1      	bne.n	3289a <__aeabi_fsub+0x1e2>
   328d6:	0033      	movs	r3, r6
   328d8:	24ff      	movs	r4, #255	; 0xff
   328da:	000d      	movs	r5, r1
   328dc:	e732      	b.n	32744 <__aeabi_fsub+0x8c>
   328de:	29ff      	cmp	r1, #255	; 0xff
   328e0:	d010      	beq.n	32904 <__aeabi_fsub+0x24c>
   328e2:	0001      	movs	r1, r0
   328e4:	e778      	b.n	327d8 <__aeabi_fsub+0x120>
   328e6:	2b00      	cmp	r3, #0
   328e8:	d06e      	beq.n	329c8 <__aeabi_fsub+0x310>
   328ea:	24ff      	movs	r4, #255	; 0xff
   328ec:	2e00      	cmp	r6, #0
   328ee:	d100      	bne.n	328f2 <__aeabi_fsub+0x23a>
   328f0:	e728      	b.n	32744 <__aeabi_fsub+0x8c>
   328f2:	2280      	movs	r2, #128	; 0x80
   328f4:	4651      	mov	r1, sl
   328f6:	03d2      	lsls	r2, r2, #15
   328f8:	4211      	tst	r1, r2
   328fa:	d003      	beq.n	32904 <__aeabi_fsub+0x24c>
   328fc:	4661      	mov	r1, ip
   328fe:	4211      	tst	r1, r2
   32900:	d100      	bne.n	32904 <__aeabi_fsub+0x24c>
   32902:	0033      	movs	r3, r6
   32904:	24ff      	movs	r4, #255	; 0xff
   32906:	e71d      	b.n	32744 <__aeabi_fsub+0x8c>
   32908:	24ff      	movs	r4, #255	; 0xff
   3290a:	2300      	movs	r3, #0
   3290c:	e72c      	b.n	32768 <__aeabi_fsub+0xb0>
   3290e:	2c00      	cmp	r4, #0
   32910:	d1e9      	bne.n	328e6 <__aeabi_fsub+0x22e>
   32912:	2b00      	cmp	r3, #0
   32914:	d063      	beq.n	329de <__aeabi_fsub+0x326>
   32916:	2e00      	cmp	r6, #0
   32918:	d100      	bne.n	3291c <__aeabi_fsub+0x264>
   3291a:	e713      	b.n	32744 <__aeabi_fsub+0x8c>
   3291c:	199b      	adds	r3, r3, r6
   3291e:	015a      	lsls	r2, r3, #5
   32920:	d400      	bmi.n	32924 <__aeabi_fsub+0x26c>
   32922:	e73e      	b.n	327a2 <__aeabi_fsub+0xea>
   32924:	4a31      	ldr	r2, [pc, #196]	; (329ec <__aeabi_fsub+0x334>)
   32926:	000c      	movs	r4, r1
   32928:	4013      	ands	r3, r2
   3292a:	e70b      	b.n	32744 <__aeabi_fsub+0x8c>
   3292c:	2c00      	cmp	r4, #0
   3292e:	d11e      	bne.n	3296e <__aeabi_fsub+0x2b6>
   32930:	2b00      	cmp	r3, #0
   32932:	d12f      	bne.n	32994 <__aeabi_fsub+0x2dc>
   32934:	2e00      	cmp	r6, #0
   32936:	d04f      	beq.n	329d8 <__aeabi_fsub+0x320>
   32938:	0033      	movs	r3, r6
   3293a:	000d      	movs	r5, r1
   3293c:	e702      	b.n	32744 <__aeabi_fsub+0x8c>
   3293e:	2601      	movs	r6, #1
   32940:	e755      	b.n	327ee <__aeabi_fsub+0x136>
   32942:	2c00      	cmp	r4, #0
   32944:	d11f      	bne.n	32986 <__aeabi_fsub+0x2ce>
   32946:	2b00      	cmp	r3, #0
   32948:	d043      	beq.n	329d2 <__aeabi_fsub+0x31a>
   3294a:	43c9      	mvns	r1, r1
   3294c:	2900      	cmp	r1, #0
   3294e:	d00b      	beq.n	32968 <__aeabi_fsub+0x2b0>
   32950:	28ff      	cmp	r0, #255	; 0xff
   32952:	d039      	beq.n	329c8 <__aeabi_fsub+0x310>
   32954:	291b      	cmp	r1, #27
   32956:	dc44      	bgt.n	329e2 <__aeabi_fsub+0x32a>
   32958:	001c      	movs	r4, r3
   3295a:	2720      	movs	r7, #32
   3295c:	40cc      	lsrs	r4, r1
   3295e:	1a79      	subs	r1, r7, r1
   32960:	408b      	lsls	r3, r1
   32962:	1e59      	subs	r1, r3, #1
   32964:	418b      	sbcs	r3, r1
   32966:	4323      	orrs	r3, r4
   32968:	199b      	adds	r3, r3, r6
   3296a:	0004      	movs	r4, r0
   3296c:	e740      	b.n	327f0 <__aeabi_fsub+0x138>
   3296e:	2b00      	cmp	r3, #0
   32970:	d11a      	bne.n	329a8 <__aeabi_fsub+0x2f0>
   32972:	2e00      	cmp	r6, #0
   32974:	d124      	bne.n	329c0 <__aeabi_fsub+0x308>
   32976:	2780      	movs	r7, #128	; 0x80
   32978:	2200      	movs	r2, #0
   3297a:	03ff      	lsls	r7, r7, #15
   3297c:	e71b      	b.n	327b6 <__aeabi_fsub+0xfe>
   3297e:	0033      	movs	r3, r6
   32980:	0004      	movs	r4, r0
   32982:	000d      	movs	r5, r1
   32984:	e6de      	b.n	32744 <__aeabi_fsub+0x8c>
   32986:	28ff      	cmp	r0, #255	; 0xff
   32988:	d01e      	beq.n	329c8 <__aeabi_fsub+0x310>
   3298a:	2480      	movs	r4, #128	; 0x80
   3298c:	04e4      	lsls	r4, r4, #19
   3298e:	4249      	negs	r1, r1
   32990:	4323      	orrs	r3, r4
   32992:	e7df      	b.n	32954 <__aeabi_fsub+0x29c>
   32994:	2e00      	cmp	r6, #0
   32996:	d100      	bne.n	3299a <__aeabi_fsub+0x2e2>
   32998:	e6d4      	b.n	32744 <__aeabi_fsub+0x8c>
   3299a:	1b9f      	subs	r7, r3, r6
   3299c:	017a      	lsls	r2, r7, #5
   3299e:	d400      	bmi.n	329a2 <__aeabi_fsub+0x2ea>
   329a0:	e737      	b.n	32812 <__aeabi_fsub+0x15a>
   329a2:	1af3      	subs	r3, r6, r3
   329a4:	000d      	movs	r5, r1
   329a6:	e6cd      	b.n	32744 <__aeabi_fsub+0x8c>
   329a8:	24ff      	movs	r4, #255	; 0xff
   329aa:	2e00      	cmp	r6, #0
   329ac:	d100      	bne.n	329b0 <__aeabi_fsub+0x2f8>
   329ae:	e6c9      	b.n	32744 <__aeabi_fsub+0x8c>
   329b0:	2280      	movs	r2, #128	; 0x80
   329b2:	4650      	mov	r0, sl
   329b4:	03d2      	lsls	r2, r2, #15
   329b6:	4210      	tst	r0, r2
   329b8:	d0a4      	beq.n	32904 <__aeabi_fsub+0x24c>
   329ba:	4660      	mov	r0, ip
   329bc:	4210      	tst	r0, r2
   329be:	d1a1      	bne.n	32904 <__aeabi_fsub+0x24c>
   329c0:	0033      	movs	r3, r6
   329c2:	000d      	movs	r5, r1
   329c4:	24ff      	movs	r4, #255	; 0xff
   329c6:	e6bd      	b.n	32744 <__aeabi_fsub+0x8c>
   329c8:	0033      	movs	r3, r6
   329ca:	24ff      	movs	r4, #255	; 0xff
   329cc:	e6ba      	b.n	32744 <__aeabi_fsub+0x8c>
   329ce:	2301      	movs	r3, #1
   329d0:	e76e      	b.n	328b0 <__aeabi_fsub+0x1f8>
   329d2:	0033      	movs	r3, r6
   329d4:	0004      	movs	r4, r0
   329d6:	e6b5      	b.n	32744 <__aeabi_fsub+0x8c>
   329d8:	2700      	movs	r7, #0
   329da:	2200      	movs	r2, #0
   329dc:	e71c      	b.n	32818 <__aeabi_fsub+0x160>
   329de:	0033      	movs	r3, r6
   329e0:	e6b0      	b.n	32744 <__aeabi_fsub+0x8c>
   329e2:	2301      	movs	r3, #1
   329e4:	e7c0      	b.n	32968 <__aeabi_fsub+0x2b0>
   329e6:	46c0      	nop			; (mov r8, r8)
   329e8:	7dffffff 	.word	0x7dffffff
   329ec:	fbffffff 	.word	0xfbffffff

000329f0 <__aeabi_f2iz>:
   329f0:	0241      	lsls	r1, r0, #9
   329f2:	0043      	lsls	r3, r0, #1
   329f4:	0fc2      	lsrs	r2, r0, #31
   329f6:	0a49      	lsrs	r1, r1, #9
   329f8:	0e1b      	lsrs	r3, r3, #24
   329fa:	2000      	movs	r0, #0
   329fc:	2b7e      	cmp	r3, #126	; 0x7e
   329fe:	dd0d      	ble.n	32a1c <__aeabi_f2iz+0x2c>
   32a00:	2b9d      	cmp	r3, #157	; 0x9d
   32a02:	dc0c      	bgt.n	32a1e <__aeabi_f2iz+0x2e>
   32a04:	2080      	movs	r0, #128	; 0x80
   32a06:	0400      	lsls	r0, r0, #16
   32a08:	4301      	orrs	r1, r0
   32a0a:	2b95      	cmp	r3, #149	; 0x95
   32a0c:	dc0a      	bgt.n	32a24 <__aeabi_f2iz+0x34>
   32a0e:	2096      	movs	r0, #150	; 0x96
   32a10:	1ac3      	subs	r3, r0, r3
   32a12:	40d9      	lsrs	r1, r3
   32a14:	4248      	negs	r0, r1
   32a16:	2a00      	cmp	r2, #0
   32a18:	d100      	bne.n	32a1c <__aeabi_f2iz+0x2c>
   32a1a:	0008      	movs	r0, r1
   32a1c:	4770      	bx	lr
   32a1e:	4b03      	ldr	r3, [pc, #12]	; (32a2c <__aeabi_f2iz+0x3c>)
   32a20:	18d0      	adds	r0, r2, r3
   32a22:	e7fb      	b.n	32a1c <__aeabi_f2iz+0x2c>
   32a24:	3b96      	subs	r3, #150	; 0x96
   32a26:	4099      	lsls	r1, r3
   32a28:	e7f4      	b.n	32a14 <__aeabi_f2iz+0x24>
   32a2a:	46c0      	nop			; (mov r8, r8)
   32a2c:	7fffffff 	.word	0x7fffffff

00032a30 <__aeabi_i2f>:
   32a30:	b570      	push	{r4, r5, r6, lr}
   32a32:	2800      	cmp	r0, #0
   32a34:	d030      	beq.n	32a98 <__aeabi_i2f+0x68>
   32a36:	17c3      	asrs	r3, r0, #31
   32a38:	18c4      	adds	r4, r0, r3
   32a3a:	405c      	eors	r4, r3
   32a3c:	0fc5      	lsrs	r5, r0, #31
   32a3e:	0020      	movs	r0, r4
   32a40:	f001 fcc6 	bl	343d0 <__clzsi2>
   32a44:	239e      	movs	r3, #158	; 0x9e
   32a46:	1a1b      	subs	r3, r3, r0
   32a48:	2b96      	cmp	r3, #150	; 0x96
   32a4a:	dc0d      	bgt.n	32a68 <__aeabi_i2f+0x38>
   32a4c:	2296      	movs	r2, #150	; 0x96
   32a4e:	1ad2      	subs	r2, r2, r3
   32a50:	4094      	lsls	r4, r2
   32a52:	002a      	movs	r2, r5
   32a54:	0264      	lsls	r4, r4, #9
   32a56:	0a64      	lsrs	r4, r4, #9
   32a58:	b2db      	uxtb	r3, r3
   32a5a:	0264      	lsls	r4, r4, #9
   32a5c:	05db      	lsls	r3, r3, #23
   32a5e:	0a60      	lsrs	r0, r4, #9
   32a60:	07d2      	lsls	r2, r2, #31
   32a62:	4318      	orrs	r0, r3
   32a64:	4310      	orrs	r0, r2
   32a66:	bd70      	pop	{r4, r5, r6, pc}
   32a68:	2b99      	cmp	r3, #153	; 0x99
   32a6a:	dc19      	bgt.n	32aa0 <__aeabi_i2f+0x70>
   32a6c:	2299      	movs	r2, #153	; 0x99
   32a6e:	1ad2      	subs	r2, r2, r3
   32a70:	2a00      	cmp	r2, #0
   32a72:	dd29      	ble.n	32ac8 <__aeabi_i2f+0x98>
   32a74:	4094      	lsls	r4, r2
   32a76:	0022      	movs	r2, r4
   32a78:	4c14      	ldr	r4, [pc, #80]	; (32acc <__aeabi_i2f+0x9c>)
   32a7a:	4014      	ands	r4, r2
   32a7c:	0751      	lsls	r1, r2, #29
   32a7e:	d004      	beq.n	32a8a <__aeabi_i2f+0x5a>
   32a80:	210f      	movs	r1, #15
   32a82:	400a      	ands	r2, r1
   32a84:	2a04      	cmp	r2, #4
   32a86:	d000      	beq.n	32a8a <__aeabi_i2f+0x5a>
   32a88:	3404      	adds	r4, #4
   32a8a:	0162      	lsls	r2, r4, #5
   32a8c:	d413      	bmi.n	32ab6 <__aeabi_i2f+0x86>
   32a8e:	01a4      	lsls	r4, r4, #6
   32a90:	0a64      	lsrs	r4, r4, #9
   32a92:	b2db      	uxtb	r3, r3
   32a94:	002a      	movs	r2, r5
   32a96:	e7e0      	b.n	32a5a <__aeabi_i2f+0x2a>
   32a98:	2200      	movs	r2, #0
   32a9a:	2300      	movs	r3, #0
   32a9c:	2400      	movs	r4, #0
   32a9e:	e7dc      	b.n	32a5a <__aeabi_i2f+0x2a>
   32aa0:	2205      	movs	r2, #5
   32aa2:	0021      	movs	r1, r4
   32aa4:	1a12      	subs	r2, r2, r0
   32aa6:	40d1      	lsrs	r1, r2
   32aa8:	22b9      	movs	r2, #185	; 0xb9
   32aaa:	1ad2      	subs	r2, r2, r3
   32aac:	4094      	lsls	r4, r2
   32aae:	1e62      	subs	r2, r4, #1
   32ab0:	4194      	sbcs	r4, r2
   32ab2:	430c      	orrs	r4, r1
   32ab4:	e7da      	b.n	32a6c <__aeabi_i2f+0x3c>
   32ab6:	4b05      	ldr	r3, [pc, #20]	; (32acc <__aeabi_i2f+0x9c>)
   32ab8:	002a      	movs	r2, r5
   32aba:	401c      	ands	r4, r3
   32abc:	239f      	movs	r3, #159	; 0x9f
   32abe:	01a4      	lsls	r4, r4, #6
   32ac0:	1a1b      	subs	r3, r3, r0
   32ac2:	0a64      	lsrs	r4, r4, #9
   32ac4:	b2db      	uxtb	r3, r3
   32ac6:	e7c8      	b.n	32a5a <__aeabi_i2f+0x2a>
   32ac8:	0022      	movs	r2, r4
   32aca:	e7d5      	b.n	32a78 <__aeabi_i2f+0x48>
   32acc:	fbffffff 	.word	0xfbffffff

00032ad0 <__aeabi_dadd>:
   32ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32ad2:	4645      	mov	r5, r8
   32ad4:	46de      	mov	lr, fp
   32ad6:	4657      	mov	r7, sl
   32ad8:	464e      	mov	r6, r9
   32ada:	030c      	lsls	r4, r1, #12
   32adc:	b5e0      	push	{r5, r6, r7, lr}
   32ade:	004e      	lsls	r6, r1, #1
   32ae0:	0fc9      	lsrs	r1, r1, #31
   32ae2:	4688      	mov	r8, r1
   32ae4:	000d      	movs	r5, r1
   32ae6:	0a61      	lsrs	r1, r4, #9
   32ae8:	0f44      	lsrs	r4, r0, #29
   32aea:	430c      	orrs	r4, r1
   32aec:	00c7      	lsls	r7, r0, #3
   32aee:	0319      	lsls	r1, r3, #12
   32af0:	0058      	lsls	r0, r3, #1
   32af2:	0fdb      	lsrs	r3, r3, #31
   32af4:	469b      	mov	fp, r3
   32af6:	0a4b      	lsrs	r3, r1, #9
   32af8:	0f51      	lsrs	r1, r2, #29
   32afa:	430b      	orrs	r3, r1
   32afc:	0d76      	lsrs	r6, r6, #21
   32afe:	0d40      	lsrs	r0, r0, #21
   32b00:	0019      	movs	r1, r3
   32b02:	00d2      	lsls	r2, r2, #3
   32b04:	45d8      	cmp	r8, fp
   32b06:	d100      	bne.n	32b0a <__aeabi_dadd+0x3a>
   32b08:	e0ae      	b.n	32c68 <__aeabi_dadd+0x198>
   32b0a:	1a35      	subs	r5, r6, r0
   32b0c:	2d00      	cmp	r5, #0
   32b0e:	dc00      	bgt.n	32b12 <__aeabi_dadd+0x42>
   32b10:	e0f6      	b.n	32d00 <__aeabi_dadd+0x230>
   32b12:	2800      	cmp	r0, #0
   32b14:	d10f      	bne.n	32b36 <__aeabi_dadd+0x66>
   32b16:	4313      	orrs	r3, r2
   32b18:	d100      	bne.n	32b1c <__aeabi_dadd+0x4c>
   32b1a:	e0db      	b.n	32cd4 <__aeabi_dadd+0x204>
   32b1c:	1e6b      	subs	r3, r5, #1
   32b1e:	2b00      	cmp	r3, #0
   32b20:	d000      	beq.n	32b24 <__aeabi_dadd+0x54>
   32b22:	e137      	b.n	32d94 <__aeabi_dadd+0x2c4>
   32b24:	1aba      	subs	r2, r7, r2
   32b26:	4297      	cmp	r7, r2
   32b28:	41bf      	sbcs	r7, r7
   32b2a:	1a64      	subs	r4, r4, r1
   32b2c:	427f      	negs	r7, r7
   32b2e:	1be4      	subs	r4, r4, r7
   32b30:	2601      	movs	r6, #1
   32b32:	0017      	movs	r7, r2
   32b34:	e024      	b.n	32b80 <__aeabi_dadd+0xb0>
   32b36:	4bc6      	ldr	r3, [pc, #792]	; (32e50 <__aeabi_dadd+0x380>)
   32b38:	429e      	cmp	r6, r3
   32b3a:	d04d      	beq.n	32bd8 <__aeabi_dadd+0x108>
   32b3c:	2380      	movs	r3, #128	; 0x80
   32b3e:	041b      	lsls	r3, r3, #16
   32b40:	4319      	orrs	r1, r3
   32b42:	2d38      	cmp	r5, #56	; 0x38
   32b44:	dd00      	ble.n	32b48 <__aeabi_dadd+0x78>
   32b46:	e107      	b.n	32d58 <__aeabi_dadd+0x288>
   32b48:	2d1f      	cmp	r5, #31
   32b4a:	dd00      	ble.n	32b4e <__aeabi_dadd+0x7e>
   32b4c:	e138      	b.n	32dc0 <__aeabi_dadd+0x2f0>
   32b4e:	2020      	movs	r0, #32
   32b50:	1b43      	subs	r3, r0, r5
   32b52:	469a      	mov	sl, r3
   32b54:	000b      	movs	r3, r1
   32b56:	4650      	mov	r0, sl
   32b58:	4083      	lsls	r3, r0
   32b5a:	4699      	mov	r9, r3
   32b5c:	0013      	movs	r3, r2
   32b5e:	4648      	mov	r0, r9
   32b60:	40eb      	lsrs	r3, r5
   32b62:	4318      	orrs	r0, r3
   32b64:	0003      	movs	r3, r0
   32b66:	4650      	mov	r0, sl
   32b68:	4082      	lsls	r2, r0
   32b6a:	1e50      	subs	r0, r2, #1
   32b6c:	4182      	sbcs	r2, r0
   32b6e:	40e9      	lsrs	r1, r5
   32b70:	431a      	orrs	r2, r3
   32b72:	1aba      	subs	r2, r7, r2
   32b74:	1a61      	subs	r1, r4, r1
   32b76:	4297      	cmp	r7, r2
   32b78:	41a4      	sbcs	r4, r4
   32b7a:	0017      	movs	r7, r2
   32b7c:	4264      	negs	r4, r4
   32b7e:	1b0c      	subs	r4, r1, r4
   32b80:	0223      	lsls	r3, r4, #8
   32b82:	d562      	bpl.n	32c4a <__aeabi_dadd+0x17a>
   32b84:	0264      	lsls	r4, r4, #9
   32b86:	0a65      	lsrs	r5, r4, #9
   32b88:	2d00      	cmp	r5, #0
   32b8a:	d100      	bne.n	32b8e <__aeabi_dadd+0xbe>
   32b8c:	e0df      	b.n	32d4e <__aeabi_dadd+0x27e>
   32b8e:	0028      	movs	r0, r5
   32b90:	f001 fc1e 	bl	343d0 <__clzsi2>
   32b94:	0003      	movs	r3, r0
   32b96:	3b08      	subs	r3, #8
   32b98:	2b1f      	cmp	r3, #31
   32b9a:	dd00      	ble.n	32b9e <__aeabi_dadd+0xce>
   32b9c:	e0d2      	b.n	32d44 <__aeabi_dadd+0x274>
   32b9e:	2220      	movs	r2, #32
   32ba0:	003c      	movs	r4, r7
   32ba2:	1ad2      	subs	r2, r2, r3
   32ba4:	409d      	lsls	r5, r3
   32ba6:	40d4      	lsrs	r4, r2
   32ba8:	409f      	lsls	r7, r3
   32baa:	4325      	orrs	r5, r4
   32bac:	429e      	cmp	r6, r3
   32bae:	dd00      	ble.n	32bb2 <__aeabi_dadd+0xe2>
   32bb0:	e0c4      	b.n	32d3c <__aeabi_dadd+0x26c>
   32bb2:	1b9e      	subs	r6, r3, r6
   32bb4:	1c73      	adds	r3, r6, #1
   32bb6:	2b1f      	cmp	r3, #31
   32bb8:	dd00      	ble.n	32bbc <__aeabi_dadd+0xec>
   32bba:	e0f1      	b.n	32da0 <__aeabi_dadd+0x2d0>
   32bbc:	2220      	movs	r2, #32
   32bbe:	0038      	movs	r0, r7
   32bc0:	0029      	movs	r1, r5
   32bc2:	1ad2      	subs	r2, r2, r3
   32bc4:	40d8      	lsrs	r0, r3
   32bc6:	4091      	lsls	r1, r2
   32bc8:	4097      	lsls	r7, r2
   32bca:	002c      	movs	r4, r5
   32bcc:	4301      	orrs	r1, r0
   32bce:	1e78      	subs	r0, r7, #1
   32bd0:	4187      	sbcs	r7, r0
   32bd2:	40dc      	lsrs	r4, r3
   32bd4:	2600      	movs	r6, #0
   32bd6:	430f      	orrs	r7, r1
   32bd8:	077b      	lsls	r3, r7, #29
   32bda:	d009      	beq.n	32bf0 <__aeabi_dadd+0x120>
   32bdc:	230f      	movs	r3, #15
   32bde:	403b      	ands	r3, r7
   32be0:	2b04      	cmp	r3, #4
   32be2:	d005      	beq.n	32bf0 <__aeabi_dadd+0x120>
   32be4:	1d3b      	adds	r3, r7, #4
   32be6:	42bb      	cmp	r3, r7
   32be8:	41bf      	sbcs	r7, r7
   32bea:	427f      	negs	r7, r7
   32bec:	19e4      	adds	r4, r4, r7
   32bee:	001f      	movs	r7, r3
   32bf0:	0223      	lsls	r3, r4, #8
   32bf2:	d52c      	bpl.n	32c4e <__aeabi_dadd+0x17e>
   32bf4:	4b96      	ldr	r3, [pc, #600]	; (32e50 <__aeabi_dadd+0x380>)
   32bf6:	3601      	adds	r6, #1
   32bf8:	429e      	cmp	r6, r3
   32bfa:	d100      	bne.n	32bfe <__aeabi_dadd+0x12e>
   32bfc:	e09a      	b.n	32d34 <__aeabi_dadd+0x264>
   32bfe:	4645      	mov	r5, r8
   32c00:	4b94      	ldr	r3, [pc, #592]	; (32e54 <__aeabi_dadd+0x384>)
   32c02:	08ff      	lsrs	r7, r7, #3
   32c04:	401c      	ands	r4, r3
   32c06:	0760      	lsls	r0, r4, #29
   32c08:	0576      	lsls	r6, r6, #21
   32c0a:	0264      	lsls	r4, r4, #9
   32c0c:	4307      	orrs	r7, r0
   32c0e:	0b24      	lsrs	r4, r4, #12
   32c10:	0d76      	lsrs	r6, r6, #21
   32c12:	2100      	movs	r1, #0
   32c14:	0324      	lsls	r4, r4, #12
   32c16:	0b23      	lsrs	r3, r4, #12
   32c18:	0d0c      	lsrs	r4, r1, #20
   32c1a:	4a8f      	ldr	r2, [pc, #572]	; (32e58 <__aeabi_dadd+0x388>)
   32c1c:	0524      	lsls	r4, r4, #20
   32c1e:	431c      	orrs	r4, r3
   32c20:	4014      	ands	r4, r2
   32c22:	0533      	lsls	r3, r6, #20
   32c24:	4323      	orrs	r3, r4
   32c26:	005b      	lsls	r3, r3, #1
   32c28:	07ed      	lsls	r5, r5, #31
   32c2a:	085b      	lsrs	r3, r3, #1
   32c2c:	432b      	orrs	r3, r5
   32c2e:	0038      	movs	r0, r7
   32c30:	0019      	movs	r1, r3
   32c32:	bc3c      	pop	{r2, r3, r4, r5}
   32c34:	4690      	mov	r8, r2
   32c36:	4699      	mov	r9, r3
   32c38:	46a2      	mov	sl, r4
   32c3a:	46ab      	mov	fp, r5
   32c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32c3e:	4664      	mov	r4, ip
   32c40:	4304      	orrs	r4, r0
   32c42:	d100      	bne.n	32c46 <__aeabi_dadd+0x176>
   32c44:	e211      	b.n	3306a <__aeabi_dadd+0x59a>
   32c46:	0004      	movs	r4, r0
   32c48:	4667      	mov	r7, ip
   32c4a:	077b      	lsls	r3, r7, #29
   32c4c:	d1c6      	bne.n	32bdc <__aeabi_dadd+0x10c>
   32c4e:	4645      	mov	r5, r8
   32c50:	0760      	lsls	r0, r4, #29
   32c52:	08ff      	lsrs	r7, r7, #3
   32c54:	4307      	orrs	r7, r0
   32c56:	08e4      	lsrs	r4, r4, #3
   32c58:	4b7d      	ldr	r3, [pc, #500]	; (32e50 <__aeabi_dadd+0x380>)
   32c5a:	429e      	cmp	r6, r3
   32c5c:	d030      	beq.n	32cc0 <__aeabi_dadd+0x1f0>
   32c5e:	0324      	lsls	r4, r4, #12
   32c60:	0576      	lsls	r6, r6, #21
   32c62:	0b24      	lsrs	r4, r4, #12
   32c64:	0d76      	lsrs	r6, r6, #21
   32c66:	e7d4      	b.n	32c12 <__aeabi_dadd+0x142>
   32c68:	1a33      	subs	r3, r6, r0
   32c6a:	469a      	mov	sl, r3
   32c6c:	2b00      	cmp	r3, #0
   32c6e:	dd78      	ble.n	32d62 <__aeabi_dadd+0x292>
   32c70:	2800      	cmp	r0, #0
   32c72:	d031      	beq.n	32cd8 <__aeabi_dadd+0x208>
   32c74:	4876      	ldr	r0, [pc, #472]	; (32e50 <__aeabi_dadd+0x380>)
   32c76:	4286      	cmp	r6, r0
   32c78:	d0ae      	beq.n	32bd8 <__aeabi_dadd+0x108>
   32c7a:	2080      	movs	r0, #128	; 0x80
   32c7c:	0400      	lsls	r0, r0, #16
   32c7e:	4301      	orrs	r1, r0
   32c80:	4653      	mov	r3, sl
   32c82:	2b38      	cmp	r3, #56	; 0x38
   32c84:	dc00      	bgt.n	32c88 <__aeabi_dadd+0x1b8>
   32c86:	e0e9      	b.n	32e5c <__aeabi_dadd+0x38c>
   32c88:	430a      	orrs	r2, r1
   32c8a:	1e51      	subs	r1, r2, #1
   32c8c:	418a      	sbcs	r2, r1
   32c8e:	2100      	movs	r1, #0
   32c90:	19d2      	adds	r2, r2, r7
   32c92:	42ba      	cmp	r2, r7
   32c94:	41bf      	sbcs	r7, r7
   32c96:	1909      	adds	r1, r1, r4
   32c98:	427c      	negs	r4, r7
   32c9a:	0017      	movs	r7, r2
   32c9c:	190c      	adds	r4, r1, r4
   32c9e:	0223      	lsls	r3, r4, #8
   32ca0:	d5d3      	bpl.n	32c4a <__aeabi_dadd+0x17a>
   32ca2:	4b6b      	ldr	r3, [pc, #428]	; (32e50 <__aeabi_dadd+0x380>)
   32ca4:	3601      	adds	r6, #1
   32ca6:	429e      	cmp	r6, r3
   32ca8:	d100      	bne.n	32cac <__aeabi_dadd+0x1dc>
   32caa:	e13a      	b.n	32f22 <__aeabi_dadd+0x452>
   32cac:	2001      	movs	r0, #1
   32cae:	4b69      	ldr	r3, [pc, #420]	; (32e54 <__aeabi_dadd+0x384>)
   32cb0:	401c      	ands	r4, r3
   32cb2:	087b      	lsrs	r3, r7, #1
   32cb4:	4007      	ands	r7, r0
   32cb6:	431f      	orrs	r7, r3
   32cb8:	07e0      	lsls	r0, r4, #31
   32cba:	4307      	orrs	r7, r0
   32cbc:	0864      	lsrs	r4, r4, #1
   32cbe:	e78b      	b.n	32bd8 <__aeabi_dadd+0x108>
   32cc0:	0023      	movs	r3, r4
   32cc2:	433b      	orrs	r3, r7
   32cc4:	d100      	bne.n	32cc8 <__aeabi_dadd+0x1f8>
   32cc6:	e1cb      	b.n	33060 <__aeabi_dadd+0x590>
   32cc8:	2280      	movs	r2, #128	; 0x80
   32cca:	0312      	lsls	r2, r2, #12
   32ccc:	4314      	orrs	r4, r2
   32cce:	0324      	lsls	r4, r4, #12
   32cd0:	0b24      	lsrs	r4, r4, #12
   32cd2:	e79e      	b.n	32c12 <__aeabi_dadd+0x142>
   32cd4:	002e      	movs	r6, r5
   32cd6:	e77f      	b.n	32bd8 <__aeabi_dadd+0x108>
   32cd8:	0008      	movs	r0, r1
   32cda:	4310      	orrs	r0, r2
   32cdc:	d100      	bne.n	32ce0 <__aeabi_dadd+0x210>
   32cde:	e0b4      	b.n	32e4a <__aeabi_dadd+0x37a>
   32ce0:	1e58      	subs	r0, r3, #1
   32ce2:	2800      	cmp	r0, #0
   32ce4:	d000      	beq.n	32ce8 <__aeabi_dadd+0x218>
   32ce6:	e0de      	b.n	32ea6 <__aeabi_dadd+0x3d6>
   32ce8:	18ba      	adds	r2, r7, r2
   32cea:	42ba      	cmp	r2, r7
   32cec:	419b      	sbcs	r3, r3
   32cee:	1864      	adds	r4, r4, r1
   32cf0:	425b      	negs	r3, r3
   32cf2:	18e4      	adds	r4, r4, r3
   32cf4:	0017      	movs	r7, r2
   32cf6:	2601      	movs	r6, #1
   32cf8:	0223      	lsls	r3, r4, #8
   32cfa:	d5a6      	bpl.n	32c4a <__aeabi_dadd+0x17a>
   32cfc:	2602      	movs	r6, #2
   32cfe:	e7d5      	b.n	32cac <__aeabi_dadd+0x1dc>
   32d00:	2d00      	cmp	r5, #0
   32d02:	d16e      	bne.n	32de2 <__aeabi_dadd+0x312>
   32d04:	1c70      	adds	r0, r6, #1
   32d06:	0540      	lsls	r0, r0, #21
   32d08:	0d40      	lsrs	r0, r0, #21
   32d0a:	2801      	cmp	r0, #1
   32d0c:	dc00      	bgt.n	32d10 <__aeabi_dadd+0x240>
   32d0e:	e0f9      	b.n	32f04 <__aeabi_dadd+0x434>
   32d10:	1ab8      	subs	r0, r7, r2
   32d12:	4684      	mov	ip, r0
   32d14:	4287      	cmp	r7, r0
   32d16:	4180      	sbcs	r0, r0
   32d18:	1ae5      	subs	r5, r4, r3
   32d1a:	4240      	negs	r0, r0
   32d1c:	1a2d      	subs	r5, r5, r0
   32d1e:	0228      	lsls	r0, r5, #8
   32d20:	d400      	bmi.n	32d24 <__aeabi_dadd+0x254>
   32d22:	e089      	b.n	32e38 <__aeabi_dadd+0x368>
   32d24:	1bd7      	subs	r7, r2, r7
   32d26:	42ba      	cmp	r2, r7
   32d28:	4192      	sbcs	r2, r2
   32d2a:	1b1c      	subs	r4, r3, r4
   32d2c:	4252      	negs	r2, r2
   32d2e:	1aa5      	subs	r5, r4, r2
   32d30:	46d8      	mov	r8, fp
   32d32:	e729      	b.n	32b88 <__aeabi_dadd+0xb8>
   32d34:	4645      	mov	r5, r8
   32d36:	2400      	movs	r4, #0
   32d38:	2700      	movs	r7, #0
   32d3a:	e76a      	b.n	32c12 <__aeabi_dadd+0x142>
   32d3c:	4c45      	ldr	r4, [pc, #276]	; (32e54 <__aeabi_dadd+0x384>)
   32d3e:	1af6      	subs	r6, r6, r3
   32d40:	402c      	ands	r4, r5
   32d42:	e749      	b.n	32bd8 <__aeabi_dadd+0x108>
   32d44:	003d      	movs	r5, r7
   32d46:	3828      	subs	r0, #40	; 0x28
   32d48:	4085      	lsls	r5, r0
   32d4a:	2700      	movs	r7, #0
   32d4c:	e72e      	b.n	32bac <__aeabi_dadd+0xdc>
   32d4e:	0038      	movs	r0, r7
   32d50:	f001 fb3e 	bl	343d0 <__clzsi2>
   32d54:	3020      	adds	r0, #32
   32d56:	e71d      	b.n	32b94 <__aeabi_dadd+0xc4>
   32d58:	430a      	orrs	r2, r1
   32d5a:	1e51      	subs	r1, r2, #1
   32d5c:	418a      	sbcs	r2, r1
   32d5e:	2100      	movs	r1, #0
   32d60:	e707      	b.n	32b72 <__aeabi_dadd+0xa2>
   32d62:	2b00      	cmp	r3, #0
   32d64:	d000      	beq.n	32d68 <__aeabi_dadd+0x298>
   32d66:	e0f3      	b.n	32f50 <__aeabi_dadd+0x480>
   32d68:	1c70      	adds	r0, r6, #1
   32d6a:	0543      	lsls	r3, r0, #21
   32d6c:	0d5b      	lsrs	r3, r3, #21
   32d6e:	2b01      	cmp	r3, #1
   32d70:	dc00      	bgt.n	32d74 <__aeabi_dadd+0x2a4>
   32d72:	e0ad      	b.n	32ed0 <__aeabi_dadd+0x400>
   32d74:	4b36      	ldr	r3, [pc, #216]	; (32e50 <__aeabi_dadd+0x380>)
   32d76:	4298      	cmp	r0, r3
   32d78:	d100      	bne.n	32d7c <__aeabi_dadd+0x2ac>
   32d7a:	e0d1      	b.n	32f20 <__aeabi_dadd+0x450>
   32d7c:	18ba      	adds	r2, r7, r2
   32d7e:	42ba      	cmp	r2, r7
   32d80:	41bf      	sbcs	r7, r7
   32d82:	1864      	adds	r4, r4, r1
   32d84:	427f      	negs	r7, r7
   32d86:	19e4      	adds	r4, r4, r7
   32d88:	07e7      	lsls	r7, r4, #31
   32d8a:	0852      	lsrs	r2, r2, #1
   32d8c:	4317      	orrs	r7, r2
   32d8e:	0864      	lsrs	r4, r4, #1
   32d90:	0006      	movs	r6, r0
   32d92:	e721      	b.n	32bd8 <__aeabi_dadd+0x108>
   32d94:	482e      	ldr	r0, [pc, #184]	; (32e50 <__aeabi_dadd+0x380>)
   32d96:	4285      	cmp	r5, r0
   32d98:	d100      	bne.n	32d9c <__aeabi_dadd+0x2cc>
   32d9a:	e093      	b.n	32ec4 <__aeabi_dadd+0x3f4>
   32d9c:	001d      	movs	r5, r3
   32d9e:	e6d0      	b.n	32b42 <__aeabi_dadd+0x72>
   32da0:	0029      	movs	r1, r5
   32da2:	3e1f      	subs	r6, #31
   32da4:	40f1      	lsrs	r1, r6
   32da6:	2b20      	cmp	r3, #32
   32da8:	d100      	bne.n	32dac <__aeabi_dadd+0x2dc>
   32daa:	e08d      	b.n	32ec8 <__aeabi_dadd+0x3f8>
   32dac:	2240      	movs	r2, #64	; 0x40
   32dae:	1ad3      	subs	r3, r2, r3
   32db0:	409d      	lsls	r5, r3
   32db2:	432f      	orrs	r7, r5
   32db4:	1e7d      	subs	r5, r7, #1
   32db6:	41af      	sbcs	r7, r5
   32db8:	2400      	movs	r4, #0
   32dba:	430f      	orrs	r7, r1
   32dbc:	2600      	movs	r6, #0
   32dbe:	e744      	b.n	32c4a <__aeabi_dadd+0x17a>
   32dc0:	002b      	movs	r3, r5
   32dc2:	0008      	movs	r0, r1
   32dc4:	3b20      	subs	r3, #32
   32dc6:	40d8      	lsrs	r0, r3
   32dc8:	0003      	movs	r3, r0
   32dca:	2d20      	cmp	r5, #32
   32dcc:	d100      	bne.n	32dd0 <__aeabi_dadd+0x300>
   32dce:	e07d      	b.n	32ecc <__aeabi_dadd+0x3fc>
   32dd0:	2040      	movs	r0, #64	; 0x40
   32dd2:	1b45      	subs	r5, r0, r5
   32dd4:	40a9      	lsls	r1, r5
   32dd6:	430a      	orrs	r2, r1
   32dd8:	1e51      	subs	r1, r2, #1
   32dda:	418a      	sbcs	r2, r1
   32ddc:	2100      	movs	r1, #0
   32dde:	431a      	orrs	r2, r3
   32de0:	e6c7      	b.n	32b72 <__aeabi_dadd+0xa2>
   32de2:	2e00      	cmp	r6, #0
   32de4:	d050      	beq.n	32e88 <__aeabi_dadd+0x3b8>
   32de6:	4e1a      	ldr	r6, [pc, #104]	; (32e50 <__aeabi_dadd+0x380>)
   32de8:	42b0      	cmp	r0, r6
   32dea:	d057      	beq.n	32e9c <__aeabi_dadd+0x3cc>
   32dec:	2680      	movs	r6, #128	; 0x80
   32dee:	426b      	negs	r3, r5
   32df0:	4699      	mov	r9, r3
   32df2:	0436      	lsls	r6, r6, #16
   32df4:	4334      	orrs	r4, r6
   32df6:	464b      	mov	r3, r9
   32df8:	2b38      	cmp	r3, #56	; 0x38
   32dfa:	dd00      	ble.n	32dfe <__aeabi_dadd+0x32e>
   32dfc:	e0d6      	b.n	32fac <__aeabi_dadd+0x4dc>
   32dfe:	2b1f      	cmp	r3, #31
   32e00:	dd00      	ble.n	32e04 <__aeabi_dadd+0x334>
   32e02:	e135      	b.n	33070 <__aeabi_dadd+0x5a0>
   32e04:	2620      	movs	r6, #32
   32e06:	1af5      	subs	r5, r6, r3
   32e08:	0026      	movs	r6, r4
   32e0a:	40ae      	lsls	r6, r5
   32e0c:	46b2      	mov	sl, r6
   32e0e:	003e      	movs	r6, r7
   32e10:	40de      	lsrs	r6, r3
   32e12:	46ac      	mov	ip, r5
   32e14:	0035      	movs	r5, r6
   32e16:	4656      	mov	r6, sl
   32e18:	432e      	orrs	r6, r5
   32e1a:	4665      	mov	r5, ip
   32e1c:	40af      	lsls	r7, r5
   32e1e:	1e7d      	subs	r5, r7, #1
   32e20:	41af      	sbcs	r7, r5
   32e22:	40dc      	lsrs	r4, r3
   32e24:	4337      	orrs	r7, r6
   32e26:	1bd7      	subs	r7, r2, r7
   32e28:	42ba      	cmp	r2, r7
   32e2a:	4192      	sbcs	r2, r2
   32e2c:	1b0c      	subs	r4, r1, r4
   32e2e:	4252      	negs	r2, r2
   32e30:	1aa4      	subs	r4, r4, r2
   32e32:	0006      	movs	r6, r0
   32e34:	46d8      	mov	r8, fp
   32e36:	e6a3      	b.n	32b80 <__aeabi_dadd+0xb0>
   32e38:	4664      	mov	r4, ip
   32e3a:	4667      	mov	r7, ip
   32e3c:	432c      	orrs	r4, r5
   32e3e:	d000      	beq.n	32e42 <__aeabi_dadd+0x372>
   32e40:	e6a2      	b.n	32b88 <__aeabi_dadd+0xb8>
   32e42:	2500      	movs	r5, #0
   32e44:	2600      	movs	r6, #0
   32e46:	2700      	movs	r7, #0
   32e48:	e706      	b.n	32c58 <__aeabi_dadd+0x188>
   32e4a:	001e      	movs	r6, r3
   32e4c:	e6c4      	b.n	32bd8 <__aeabi_dadd+0x108>
   32e4e:	46c0      	nop			; (mov r8, r8)
   32e50:	000007ff 	.word	0x000007ff
   32e54:	ff7fffff 	.word	0xff7fffff
   32e58:	800fffff 	.word	0x800fffff
   32e5c:	2b1f      	cmp	r3, #31
   32e5e:	dc63      	bgt.n	32f28 <__aeabi_dadd+0x458>
   32e60:	2020      	movs	r0, #32
   32e62:	1ac3      	subs	r3, r0, r3
   32e64:	0008      	movs	r0, r1
   32e66:	4098      	lsls	r0, r3
   32e68:	469c      	mov	ip, r3
   32e6a:	4683      	mov	fp, r0
   32e6c:	4653      	mov	r3, sl
   32e6e:	0010      	movs	r0, r2
   32e70:	40d8      	lsrs	r0, r3
   32e72:	0003      	movs	r3, r0
   32e74:	4658      	mov	r0, fp
   32e76:	4318      	orrs	r0, r3
   32e78:	4663      	mov	r3, ip
   32e7a:	409a      	lsls	r2, r3
   32e7c:	1e53      	subs	r3, r2, #1
   32e7e:	419a      	sbcs	r2, r3
   32e80:	4653      	mov	r3, sl
   32e82:	4302      	orrs	r2, r0
   32e84:	40d9      	lsrs	r1, r3
   32e86:	e703      	b.n	32c90 <__aeabi_dadd+0x1c0>
   32e88:	0026      	movs	r6, r4
   32e8a:	433e      	orrs	r6, r7
   32e8c:	d006      	beq.n	32e9c <__aeabi_dadd+0x3cc>
   32e8e:	43eb      	mvns	r3, r5
   32e90:	4699      	mov	r9, r3
   32e92:	2b00      	cmp	r3, #0
   32e94:	d0c7      	beq.n	32e26 <__aeabi_dadd+0x356>
   32e96:	4e94      	ldr	r6, [pc, #592]	; (330e8 <__aeabi_dadd+0x618>)
   32e98:	42b0      	cmp	r0, r6
   32e9a:	d1ac      	bne.n	32df6 <__aeabi_dadd+0x326>
   32e9c:	000c      	movs	r4, r1
   32e9e:	0017      	movs	r7, r2
   32ea0:	0006      	movs	r6, r0
   32ea2:	46d8      	mov	r8, fp
   32ea4:	e698      	b.n	32bd8 <__aeabi_dadd+0x108>
   32ea6:	4b90      	ldr	r3, [pc, #576]	; (330e8 <__aeabi_dadd+0x618>)
   32ea8:	459a      	cmp	sl, r3
   32eaa:	d00b      	beq.n	32ec4 <__aeabi_dadd+0x3f4>
   32eac:	4682      	mov	sl, r0
   32eae:	e6e7      	b.n	32c80 <__aeabi_dadd+0x1b0>
   32eb0:	2800      	cmp	r0, #0
   32eb2:	d000      	beq.n	32eb6 <__aeabi_dadd+0x3e6>
   32eb4:	e09e      	b.n	32ff4 <__aeabi_dadd+0x524>
   32eb6:	0018      	movs	r0, r3
   32eb8:	4310      	orrs	r0, r2
   32eba:	d100      	bne.n	32ebe <__aeabi_dadd+0x3ee>
   32ebc:	e0e9      	b.n	33092 <__aeabi_dadd+0x5c2>
   32ebe:	001c      	movs	r4, r3
   32ec0:	0017      	movs	r7, r2
   32ec2:	46d8      	mov	r8, fp
   32ec4:	4e88      	ldr	r6, [pc, #544]	; (330e8 <__aeabi_dadd+0x618>)
   32ec6:	e687      	b.n	32bd8 <__aeabi_dadd+0x108>
   32ec8:	2500      	movs	r5, #0
   32eca:	e772      	b.n	32db2 <__aeabi_dadd+0x2e2>
   32ecc:	2100      	movs	r1, #0
   32ece:	e782      	b.n	32dd6 <__aeabi_dadd+0x306>
   32ed0:	0023      	movs	r3, r4
   32ed2:	433b      	orrs	r3, r7
   32ed4:	2e00      	cmp	r6, #0
   32ed6:	d000      	beq.n	32eda <__aeabi_dadd+0x40a>
   32ed8:	e0ab      	b.n	33032 <__aeabi_dadd+0x562>
   32eda:	2b00      	cmp	r3, #0
   32edc:	d100      	bne.n	32ee0 <__aeabi_dadd+0x410>
   32ede:	e0e7      	b.n	330b0 <__aeabi_dadd+0x5e0>
   32ee0:	000b      	movs	r3, r1
   32ee2:	4313      	orrs	r3, r2
   32ee4:	d100      	bne.n	32ee8 <__aeabi_dadd+0x418>
   32ee6:	e677      	b.n	32bd8 <__aeabi_dadd+0x108>
   32ee8:	18ba      	adds	r2, r7, r2
   32eea:	42ba      	cmp	r2, r7
   32eec:	41bf      	sbcs	r7, r7
   32eee:	1864      	adds	r4, r4, r1
   32ef0:	427f      	negs	r7, r7
   32ef2:	19e4      	adds	r4, r4, r7
   32ef4:	0223      	lsls	r3, r4, #8
   32ef6:	d400      	bmi.n	32efa <__aeabi_dadd+0x42a>
   32ef8:	e0f2      	b.n	330e0 <__aeabi_dadd+0x610>
   32efa:	4b7c      	ldr	r3, [pc, #496]	; (330ec <__aeabi_dadd+0x61c>)
   32efc:	0017      	movs	r7, r2
   32efe:	401c      	ands	r4, r3
   32f00:	0006      	movs	r6, r0
   32f02:	e669      	b.n	32bd8 <__aeabi_dadd+0x108>
   32f04:	0020      	movs	r0, r4
   32f06:	4338      	orrs	r0, r7
   32f08:	2e00      	cmp	r6, #0
   32f0a:	d1d1      	bne.n	32eb0 <__aeabi_dadd+0x3e0>
   32f0c:	2800      	cmp	r0, #0
   32f0e:	d15b      	bne.n	32fc8 <__aeabi_dadd+0x4f8>
   32f10:	001c      	movs	r4, r3
   32f12:	4314      	orrs	r4, r2
   32f14:	d100      	bne.n	32f18 <__aeabi_dadd+0x448>
   32f16:	e0a8      	b.n	3306a <__aeabi_dadd+0x59a>
   32f18:	001c      	movs	r4, r3
   32f1a:	0017      	movs	r7, r2
   32f1c:	46d8      	mov	r8, fp
   32f1e:	e65b      	b.n	32bd8 <__aeabi_dadd+0x108>
   32f20:	0006      	movs	r6, r0
   32f22:	2400      	movs	r4, #0
   32f24:	2700      	movs	r7, #0
   32f26:	e697      	b.n	32c58 <__aeabi_dadd+0x188>
   32f28:	4650      	mov	r0, sl
   32f2a:	000b      	movs	r3, r1
   32f2c:	3820      	subs	r0, #32
   32f2e:	40c3      	lsrs	r3, r0
   32f30:	4699      	mov	r9, r3
   32f32:	4653      	mov	r3, sl
   32f34:	2b20      	cmp	r3, #32
   32f36:	d100      	bne.n	32f3a <__aeabi_dadd+0x46a>
   32f38:	e095      	b.n	33066 <__aeabi_dadd+0x596>
   32f3a:	2340      	movs	r3, #64	; 0x40
   32f3c:	4650      	mov	r0, sl
   32f3e:	1a1b      	subs	r3, r3, r0
   32f40:	4099      	lsls	r1, r3
   32f42:	430a      	orrs	r2, r1
   32f44:	1e51      	subs	r1, r2, #1
   32f46:	418a      	sbcs	r2, r1
   32f48:	464b      	mov	r3, r9
   32f4a:	2100      	movs	r1, #0
   32f4c:	431a      	orrs	r2, r3
   32f4e:	e69f      	b.n	32c90 <__aeabi_dadd+0x1c0>
   32f50:	2e00      	cmp	r6, #0
   32f52:	d130      	bne.n	32fb6 <__aeabi_dadd+0x4e6>
   32f54:	0026      	movs	r6, r4
   32f56:	433e      	orrs	r6, r7
   32f58:	d067      	beq.n	3302a <__aeabi_dadd+0x55a>
   32f5a:	43db      	mvns	r3, r3
   32f5c:	469a      	mov	sl, r3
   32f5e:	2b00      	cmp	r3, #0
   32f60:	d01c      	beq.n	32f9c <__aeabi_dadd+0x4cc>
   32f62:	4e61      	ldr	r6, [pc, #388]	; (330e8 <__aeabi_dadd+0x618>)
   32f64:	42b0      	cmp	r0, r6
   32f66:	d060      	beq.n	3302a <__aeabi_dadd+0x55a>
   32f68:	4653      	mov	r3, sl
   32f6a:	2b38      	cmp	r3, #56	; 0x38
   32f6c:	dd00      	ble.n	32f70 <__aeabi_dadd+0x4a0>
   32f6e:	e096      	b.n	3309e <__aeabi_dadd+0x5ce>
   32f70:	2b1f      	cmp	r3, #31
   32f72:	dd00      	ble.n	32f76 <__aeabi_dadd+0x4a6>
   32f74:	e09f      	b.n	330b6 <__aeabi_dadd+0x5e6>
   32f76:	2620      	movs	r6, #32
   32f78:	1af3      	subs	r3, r6, r3
   32f7a:	0026      	movs	r6, r4
   32f7c:	409e      	lsls	r6, r3
   32f7e:	469c      	mov	ip, r3
   32f80:	46b3      	mov	fp, r6
   32f82:	4653      	mov	r3, sl
   32f84:	003e      	movs	r6, r7
   32f86:	40de      	lsrs	r6, r3
   32f88:	0033      	movs	r3, r6
   32f8a:	465e      	mov	r6, fp
   32f8c:	431e      	orrs	r6, r3
   32f8e:	4663      	mov	r3, ip
   32f90:	409f      	lsls	r7, r3
   32f92:	1e7b      	subs	r3, r7, #1
   32f94:	419f      	sbcs	r7, r3
   32f96:	4653      	mov	r3, sl
   32f98:	40dc      	lsrs	r4, r3
   32f9a:	4337      	orrs	r7, r6
   32f9c:	18bf      	adds	r7, r7, r2
   32f9e:	4297      	cmp	r7, r2
   32fa0:	4192      	sbcs	r2, r2
   32fa2:	1864      	adds	r4, r4, r1
   32fa4:	4252      	negs	r2, r2
   32fa6:	18a4      	adds	r4, r4, r2
   32fa8:	0006      	movs	r6, r0
   32faa:	e678      	b.n	32c9e <__aeabi_dadd+0x1ce>
   32fac:	4327      	orrs	r7, r4
   32fae:	1e7c      	subs	r4, r7, #1
   32fb0:	41a7      	sbcs	r7, r4
   32fb2:	2400      	movs	r4, #0
   32fb4:	e737      	b.n	32e26 <__aeabi_dadd+0x356>
   32fb6:	4e4c      	ldr	r6, [pc, #304]	; (330e8 <__aeabi_dadd+0x618>)
   32fb8:	42b0      	cmp	r0, r6
   32fba:	d036      	beq.n	3302a <__aeabi_dadd+0x55a>
   32fbc:	2680      	movs	r6, #128	; 0x80
   32fbe:	425b      	negs	r3, r3
   32fc0:	0436      	lsls	r6, r6, #16
   32fc2:	469a      	mov	sl, r3
   32fc4:	4334      	orrs	r4, r6
   32fc6:	e7cf      	b.n	32f68 <__aeabi_dadd+0x498>
   32fc8:	0018      	movs	r0, r3
   32fca:	4310      	orrs	r0, r2
   32fcc:	d100      	bne.n	32fd0 <__aeabi_dadd+0x500>
   32fce:	e603      	b.n	32bd8 <__aeabi_dadd+0x108>
   32fd0:	1ab8      	subs	r0, r7, r2
   32fd2:	4684      	mov	ip, r0
   32fd4:	4567      	cmp	r7, ip
   32fd6:	41ad      	sbcs	r5, r5
   32fd8:	1ae0      	subs	r0, r4, r3
   32fda:	426d      	negs	r5, r5
   32fdc:	1b40      	subs	r0, r0, r5
   32fde:	0205      	lsls	r5, r0, #8
   32fe0:	d400      	bmi.n	32fe4 <__aeabi_dadd+0x514>
   32fe2:	e62c      	b.n	32c3e <__aeabi_dadd+0x16e>
   32fe4:	1bd7      	subs	r7, r2, r7
   32fe6:	42ba      	cmp	r2, r7
   32fe8:	4192      	sbcs	r2, r2
   32fea:	1b1c      	subs	r4, r3, r4
   32fec:	4252      	negs	r2, r2
   32fee:	1aa4      	subs	r4, r4, r2
   32ff0:	46d8      	mov	r8, fp
   32ff2:	e5f1      	b.n	32bd8 <__aeabi_dadd+0x108>
   32ff4:	0018      	movs	r0, r3
   32ff6:	4310      	orrs	r0, r2
   32ff8:	d100      	bne.n	32ffc <__aeabi_dadd+0x52c>
   32ffa:	e763      	b.n	32ec4 <__aeabi_dadd+0x3f4>
   32ffc:	08f8      	lsrs	r0, r7, #3
   32ffe:	0767      	lsls	r7, r4, #29
   33000:	4307      	orrs	r7, r0
   33002:	2080      	movs	r0, #128	; 0x80
   33004:	08e4      	lsrs	r4, r4, #3
   33006:	0300      	lsls	r0, r0, #12
   33008:	4204      	tst	r4, r0
   3300a:	d008      	beq.n	3301e <__aeabi_dadd+0x54e>
   3300c:	08dd      	lsrs	r5, r3, #3
   3300e:	4205      	tst	r5, r0
   33010:	d105      	bne.n	3301e <__aeabi_dadd+0x54e>
   33012:	08d2      	lsrs	r2, r2, #3
   33014:	0759      	lsls	r1, r3, #29
   33016:	4311      	orrs	r1, r2
   33018:	000f      	movs	r7, r1
   3301a:	002c      	movs	r4, r5
   3301c:	46d8      	mov	r8, fp
   3301e:	0f7b      	lsrs	r3, r7, #29
   33020:	00e4      	lsls	r4, r4, #3
   33022:	431c      	orrs	r4, r3
   33024:	00ff      	lsls	r7, r7, #3
   33026:	4e30      	ldr	r6, [pc, #192]	; (330e8 <__aeabi_dadd+0x618>)
   33028:	e5d6      	b.n	32bd8 <__aeabi_dadd+0x108>
   3302a:	000c      	movs	r4, r1
   3302c:	0017      	movs	r7, r2
   3302e:	0006      	movs	r6, r0
   33030:	e5d2      	b.n	32bd8 <__aeabi_dadd+0x108>
   33032:	2b00      	cmp	r3, #0
   33034:	d038      	beq.n	330a8 <__aeabi_dadd+0x5d8>
   33036:	000b      	movs	r3, r1
   33038:	4313      	orrs	r3, r2
   3303a:	d100      	bne.n	3303e <__aeabi_dadd+0x56e>
   3303c:	e742      	b.n	32ec4 <__aeabi_dadd+0x3f4>
   3303e:	08f8      	lsrs	r0, r7, #3
   33040:	0767      	lsls	r7, r4, #29
   33042:	4307      	orrs	r7, r0
   33044:	2080      	movs	r0, #128	; 0x80
   33046:	08e4      	lsrs	r4, r4, #3
   33048:	0300      	lsls	r0, r0, #12
   3304a:	4204      	tst	r4, r0
   3304c:	d0e7      	beq.n	3301e <__aeabi_dadd+0x54e>
   3304e:	08cb      	lsrs	r3, r1, #3
   33050:	4203      	tst	r3, r0
   33052:	d1e4      	bne.n	3301e <__aeabi_dadd+0x54e>
   33054:	08d2      	lsrs	r2, r2, #3
   33056:	0749      	lsls	r1, r1, #29
   33058:	4311      	orrs	r1, r2
   3305a:	000f      	movs	r7, r1
   3305c:	001c      	movs	r4, r3
   3305e:	e7de      	b.n	3301e <__aeabi_dadd+0x54e>
   33060:	2700      	movs	r7, #0
   33062:	2400      	movs	r4, #0
   33064:	e5d5      	b.n	32c12 <__aeabi_dadd+0x142>
   33066:	2100      	movs	r1, #0
   33068:	e76b      	b.n	32f42 <__aeabi_dadd+0x472>
   3306a:	2500      	movs	r5, #0
   3306c:	2700      	movs	r7, #0
   3306e:	e5f3      	b.n	32c58 <__aeabi_dadd+0x188>
   33070:	464e      	mov	r6, r9
   33072:	0025      	movs	r5, r4
   33074:	3e20      	subs	r6, #32
   33076:	40f5      	lsrs	r5, r6
   33078:	464b      	mov	r3, r9
   3307a:	002e      	movs	r6, r5
   3307c:	2b20      	cmp	r3, #32
   3307e:	d02d      	beq.n	330dc <__aeabi_dadd+0x60c>
   33080:	2540      	movs	r5, #64	; 0x40
   33082:	1aed      	subs	r5, r5, r3
   33084:	40ac      	lsls	r4, r5
   33086:	4327      	orrs	r7, r4
   33088:	1e7c      	subs	r4, r7, #1
   3308a:	41a7      	sbcs	r7, r4
   3308c:	2400      	movs	r4, #0
   3308e:	4337      	orrs	r7, r6
   33090:	e6c9      	b.n	32e26 <__aeabi_dadd+0x356>
   33092:	2480      	movs	r4, #128	; 0x80
   33094:	2500      	movs	r5, #0
   33096:	0324      	lsls	r4, r4, #12
   33098:	4e13      	ldr	r6, [pc, #76]	; (330e8 <__aeabi_dadd+0x618>)
   3309a:	2700      	movs	r7, #0
   3309c:	e5dc      	b.n	32c58 <__aeabi_dadd+0x188>
   3309e:	4327      	orrs	r7, r4
   330a0:	1e7c      	subs	r4, r7, #1
   330a2:	41a7      	sbcs	r7, r4
   330a4:	2400      	movs	r4, #0
   330a6:	e779      	b.n	32f9c <__aeabi_dadd+0x4cc>
   330a8:	000c      	movs	r4, r1
   330aa:	0017      	movs	r7, r2
   330ac:	4e0e      	ldr	r6, [pc, #56]	; (330e8 <__aeabi_dadd+0x618>)
   330ae:	e593      	b.n	32bd8 <__aeabi_dadd+0x108>
   330b0:	000c      	movs	r4, r1
   330b2:	0017      	movs	r7, r2
   330b4:	e590      	b.n	32bd8 <__aeabi_dadd+0x108>
   330b6:	4656      	mov	r6, sl
   330b8:	0023      	movs	r3, r4
   330ba:	3e20      	subs	r6, #32
   330bc:	40f3      	lsrs	r3, r6
   330be:	4699      	mov	r9, r3
   330c0:	4653      	mov	r3, sl
   330c2:	2b20      	cmp	r3, #32
   330c4:	d00e      	beq.n	330e4 <__aeabi_dadd+0x614>
   330c6:	2340      	movs	r3, #64	; 0x40
   330c8:	4656      	mov	r6, sl
   330ca:	1b9b      	subs	r3, r3, r6
   330cc:	409c      	lsls	r4, r3
   330ce:	4327      	orrs	r7, r4
   330d0:	1e7c      	subs	r4, r7, #1
   330d2:	41a7      	sbcs	r7, r4
   330d4:	464b      	mov	r3, r9
   330d6:	2400      	movs	r4, #0
   330d8:	431f      	orrs	r7, r3
   330da:	e75f      	b.n	32f9c <__aeabi_dadd+0x4cc>
   330dc:	2400      	movs	r4, #0
   330de:	e7d2      	b.n	33086 <__aeabi_dadd+0x5b6>
   330e0:	0017      	movs	r7, r2
   330e2:	e5b2      	b.n	32c4a <__aeabi_dadd+0x17a>
   330e4:	2400      	movs	r4, #0
   330e6:	e7f2      	b.n	330ce <__aeabi_dadd+0x5fe>
   330e8:	000007ff 	.word	0x000007ff
   330ec:	ff7fffff 	.word	0xff7fffff

000330f0 <__aeabi_ddiv>:
   330f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   330f2:	4657      	mov	r7, sl
   330f4:	4645      	mov	r5, r8
   330f6:	46de      	mov	lr, fp
   330f8:	464e      	mov	r6, r9
   330fa:	b5e0      	push	{r5, r6, r7, lr}
   330fc:	004c      	lsls	r4, r1, #1
   330fe:	030e      	lsls	r6, r1, #12
   33100:	b087      	sub	sp, #28
   33102:	4683      	mov	fp, r0
   33104:	4692      	mov	sl, r2
   33106:	001d      	movs	r5, r3
   33108:	4680      	mov	r8, r0
   3310a:	0b36      	lsrs	r6, r6, #12
   3310c:	0d64      	lsrs	r4, r4, #21
   3310e:	0fcf      	lsrs	r7, r1, #31
   33110:	2c00      	cmp	r4, #0
   33112:	d04f      	beq.n	331b4 <__aeabi_ddiv+0xc4>
   33114:	4b6f      	ldr	r3, [pc, #444]	; (332d4 <__aeabi_ddiv+0x1e4>)
   33116:	429c      	cmp	r4, r3
   33118:	d035      	beq.n	33186 <__aeabi_ddiv+0x96>
   3311a:	2380      	movs	r3, #128	; 0x80
   3311c:	0f42      	lsrs	r2, r0, #29
   3311e:	041b      	lsls	r3, r3, #16
   33120:	00f6      	lsls	r6, r6, #3
   33122:	4313      	orrs	r3, r2
   33124:	4333      	orrs	r3, r6
   33126:	4699      	mov	r9, r3
   33128:	00c3      	lsls	r3, r0, #3
   3312a:	4698      	mov	r8, r3
   3312c:	4b6a      	ldr	r3, [pc, #424]	; (332d8 <__aeabi_ddiv+0x1e8>)
   3312e:	2600      	movs	r6, #0
   33130:	469c      	mov	ip, r3
   33132:	2300      	movs	r3, #0
   33134:	4464      	add	r4, ip
   33136:	9303      	str	r3, [sp, #12]
   33138:	032b      	lsls	r3, r5, #12
   3313a:	0b1b      	lsrs	r3, r3, #12
   3313c:	469b      	mov	fp, r3
   3313e:	006b      	lsls	r3, r5, #1
   33140:	0fed      	lsrs	r5, r5, #31
   33142:	4650      	mov	r0, sl
   33144:	0d5b      	lsrs	r3, r3, #21
   33146:	9501      	str	r5, [sp, #4]
   33148:	d05e      	beq.n	33208 <__aeabi_ddiv+0x118>
   3314a:	4a62      	ldr	r2, [pc, #392]	; (332d4 <__aeabi_ddiv+0x1e4>)
   3314c:	4293      	cmp	r3, r2
   3314e:	d053      	beq.n	331f8 <__aeabi_ddiv+0x108>
   33150:	465a      	mov	r2, fp
   33152:	00d1      	lsls	r1, r2, #3
   33154:	2280      	movs	r2, #128	; 0x80
   33156:	0f40      	lsrs	r0, r0, #29
   33158:	0412      	lsls	r2, r2, #16
   3315a:	4302      	orrs	r2, r0
   3315c:	430a      	orrs	r2, r1
   3315e:	4693      	mov	fp, r2
   33160:	4652      	mov	r2, sl
   33162:	00d1      	lsls	r1, r2, #3
   33164:	4a5c      	ldr	r2, [pc, #368]	; (332d8 <__aeabi_ddiv+0x1e8>)
   33166:	4694      	mov	ip, r2
   33168:	2200      	movs	r2, #0
   3316a:	4463      	add	r3, ip
   3316c:	0038      	movs	r0, r7
   3316e:	4068      	eors	r0, r5
   33170:	4684      	mov	ip, r0
   33172:	9002      	str	r0, [sp, #8]
   33174:	1ae4      	subs	r4, r4, r3
   33176:	4316      	orrs	r6, r2
   33178:	2e0f      	cmp	r6, #15
   3317a:	d900      	bls.n	3317e <__aeabi_ddiv+0x8e>
   3317c:	e0b4      	b.n	332e8 <__aeabi_ddiv+0x1f8>
   3317e:	4b57      	ldr	r3, [pc, #348]	; (332dc <__aeabi_ddiv+0x1ec>)
   33180:	00b6      	lsls	r6, r6, #2
   33182:	599b      	ldr	r3, [r3, r6]
   33184:	469f      	mov	pc, r3
   33186:	0003      	movs	r3, r0
   33188:	4333      	orrs	r3, r6
   3318a:	4699      	mov	r9, r3
   3318c:	d16c      	bne.n	33268 <__aeabi_ddiv+0x178>
   3318e:	2300      	movs	r3, #0
   33190:	4698      	mov	r8, r3
   33192:	3302      	adds	r3, #2
   33194:	2608      	movs	r6, #8
   33196:	9303      	str	r3, [sp, #12]
   33198:	e7ce      	b.n	33138 <__aeabi_ddiv+0x48>
   3319a:	46cb      	mov	fp, r9
   3319c:	4641      	mov	r1, r8
   3319e:	9a03      	ldr	r2, [sp, #12]
   331a0:	9701      	str	r7, [sp, #4]
   331a2:	2a02      	cmp	r2, #2
   331a4:	d165      	bne.n	33272 <__aeabi_ddiv+0x182>
   331a6:	9b01      	ldr	r3, [sp, #4]
   331a8:	4c4a      	ldr	r4, [pc, #296]	; (332d4 <__aeabi_ddiv+0x1e4>)
   331aa:	469c      	mov	ip, r3
   331ac:	2300      	movs	r3, #0
   331ae:	2200      	movs	r2, #0
   331b0:	4698      	mov	r8, r3
   331b2:	e06b      	b.n	3328c <__aeabi_ddiv+0x19c>
   331b4:	0003      	movs	r3, r0
   331b6:	4333      	orrs	r3, r6
   331b8:	4699      	mov	r9, r3
   331ba:	d04e      	beq.n	3325a <__aeabi_ddiv+0x16a>
   331bc:	2e00      	cmp	r6, #0
   331be:	d100      	bne.n	331c2 <__aeabi_ddiv+0xd2>
   331c0:	e1bc      	b.n	3353c <__aeabi_ddiv+0x44c>
   331c2:	0030      	movs	r0, r6
   331c4:	f001 f904 	bl	343d0 <__clzsi2>
   331c8:	0003      	movs	r3, r0
   331ca:	3b0b      	subs	r3, #11
   331cc:	2b1c      	cmp	r3, #28
   331ce:	dd00      	ble.n	331d2 <__aeabi_ddiv+0xe2>
   331d0:	e1ac      	b.n	3352c <__aeabi_ddiv+0x43c>
   331d2:	221d      	movs	r2, #29
   331d4:	1ad3      	subs	r3, r2, r3
   331d6:	465a      	mov	r2, fp
   331d8:	0001      	movs	r1, r0
   331da:	40da      	lsrs	r2, r3
   331dc:	3908      	subs	r1, #8
   331de:	408e      	lsls	r6, r1
   331e0:	0013      	movs	r3, r2
   331e2:	4333      	orrs	r3, r6
   331e4:	4699      	mov	r9, r3
   331e6:	465b      	mov	r3, fp
   331e8:	408b      	lsls	r3, r1
   331ea:	4698      	mov	r8, r3
   331ec:	2300      	movs	r3, #0
   331ee:	4c3c      	ldr	r4, [pc, #240]	; (332e0 <__aeabi_ddiv+0x1f0>)
   331f0:	2600      	movs	r6, #0
   331f2:	1a24      	subs	r4, r4, r0
   331f4:	9303      	str	r3, [sp, #12]
   331f6:	e79f      	b.n	33138 <__aeabi_ddiv+0x48>
   331f8:	4651      	mov	r1, sl
   331fa:	465a      	mov	r2, fp
   331fc:	4311      	orrs	r1, r2
   331fe:	d129      	bne.n	33254 <__aeabi_ddiv+0x164>
   33200:	2200      	movs	r2, #0
   33202:	4693      	mov	fp, r2
   33204:	3202      	adds	r2, #2
   33206:	e7b1      	b.n	3316c <__aeabi_ddiv+0x7c>
   33208:	4659      	mov	r1, fp
   3320a:	4301      	orrs	r1, r0
   3320c:	d01e      	beq.n	3324c <__aeabi_ddiv+0x15c>
   3320e:	465b      	mov	r3, fp
   33210:	2b00      	cmp	r3, #0
   33212:	d100      	bne.n	33216 <__aeabi_ddiv+0x126>
   33214:	e19e      	b.n	33554 <__aeabi_ddiv+0x464>
   33216:	4658      	mov	r0, fp
   33218:	f001 f8da 	bl	343d0 <__clzsi2>
   3321c:	0003      	movs	r3, r0
   3321e:	3b0b      	subs	r3, #11
   33220:	2b1c      	cmp	r3, #28
   33222:	dd00      	ble.n	33226 <__aeabi_ddiv+0x136>
   33224:	e18f      	b.n	33546 <__aeabi_ddiv+0x456>
   33226:	0002      	movs	r2, r0
   33228:	4659      	mov	r1, fp
   3322a:	3a08      	subs	r2, #8
   3322c:	4091      	lsls	r1, r2
   3322e:	468b      	mov	fp, r1
   33230:	211d      	movs	r1, #29
   33232:	1acb      	subs	r3, r1, r3
   33234:	4651      	mov	r1, sl
   33236:	40d9      	lsrs	r1, r3
   33238:	000b      	movs	r3, r1
   3323a:	4659      	mov	r1, fp
   3323c:	430b      	orrs	r3, r1
   3323e:	4651      	mov	r1, sl
   33240:	469b      	mov	fp, r3
   33242:	4091      	lsls	r1, r2
   33244:	4b26      	ldr	r3, [pc, #152]	; (332e0 <__aeabi_ddiv+0x1f0>)
   33246:	2200      	movs	r2, #0
   33248:	1a1b      	subs	r3, r3, r0
   3324a:	e78f      	b.n	3316c <__aeabi_ddiv+0x7c>
   3324c:	2300      	movs	r3, #0
   3324e:	2201      	movs	r2, #1
   33250:	469b      	mov	fp, r3
   33252:	e78b      	b.n	3316c <__aeabi_ddiv+0x7c>
   33254:	4651      	mov	r1, sl
   33256:	2203      	movs	r2, #3
   33258:	e788      	b.n	3316c <__aeabi_ddiv+0x7c>
   3325a:	2300      	movs	r3, #0
   3325c:	4698      	mov	r8, r3
   3325e:	3301      	adds	r3, #1
   33260:	2604      	movs	r6, #4
   33262:	2400      	movs	r4, #0
   33264:	9303      	str	r3, [sp, #12]
   33266:	e767      	b.n	33138 <__aeabi_ddiv+0x48>
   33268:	2303      	movs	r3, #3
   3326a:	46b1      	mov	r9, r6
   3326c:	9303      	str	r3, [sp, #12]
   3326e:	260c      	movs	r6, #12
   33270:	e762      	b.n	33138 <__aeabi_ddiv+0x48>
   33272:	2a03      	cmp	r2, #3
   33274:	d100      	bne.n	33278 <__aeabi_ddiv+0x188>
   33276:	e25c      	b.n	33732 <__aeabi_ddiv+0x642>
   33278:	9b01      	ldr	r3, [sp, #4]
   3327a:	2a01      	cmp	r2, #1
   3327c:	d000      	beq.n	33280 <__aeabi_ddiv+0x190>
   3327e:	e1e4      	b.n	3364a <__aeabi_ddiv+0x55a>
   33280:	4013      	ands	r3, r2
   33282:	469c      	mov	ip, r3
   33284:	2300      	movs	r3, #0
   33286:	2400      	movs	r4, #0
   33288:	2200      	movs	r2, #0
   3328a:	4698      	mov	r8, r3
   3328c:	2100      	movs	r1, #0
   3328e:	0312      	lsls	r2, r2, #12
   33290:	0b13      	lsrs	r3, r2, #12
   33292:	0d0a      	lsrs	r2, r1, #20
   33294:	0512      	lsls	r2, r2, #20
   33296:	431a      	orrs	r2, r3
   33298:	0523      	lsls	r3, r4, #20
   3329a:	4c12      	ldr	r4, [pc, #72]	; (332e4 <__aeabi_ddiv+0x1f4>)
   3329c:	4640      	mov	r0, r8
   3329e:	4022      	ands	r2, r4
   332a0:	4313      	orrs	r3, r2
   332a2:	4662      	mov	r2, ip
   332a4:	005b      	lsls	r3, r3, #1
   332a6:	07d2      	lsls	r2, r2, #31
   332a8:	085b      	lsrs	r3, r3, #1
   332aa:	4313      	orrs	r3, r2
   332ac:	0019      	movs	r1, r3
   332ae:	b007      	add	sp, #28
   332b0:	bc3c      	pop	{r2, r3, r4, r5}
   332b2:	4690      	mov	r8, r2
   332b4:	4699      	mov	r9, r3
   332b6:	46a2      	mov	sl, r4
   332b8:	46ab      	mov	fp, r5
   332ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   332bc:	2300      	movs	r3, #0
   332be:	2280      	movs	r2, #128	; 0x80
   332c0:	469c      	mov	ip, r3
   332c2:	0312      	lsls	r2, r2, #12
   332c4:	4698      	mov	r8, r3
   332c6:	4c03      	ldr	r4, [pc, #12]	; (332d4 <__aeabi_ddiv+0x1e4>)
   332c8:	e7e0      	b.n	3328c <__aeabi_ddiv+0x19c>
   332ca:	2300      	movs	r3, #0
   332cc:	4c01      	ldr	r4, [pc, #4]	; (332d4 <__aeabi_ddiv+0x1e4>)
   332ce:	2200      	movs	r2, #0
   332d0:	4698      	mov	r8, r3
   332d2:	e7db      	b.n	3328c <__aeabi_ddiv+0x19c>
   332d4:	000007ff 	.word	0x000007ff
   332d8:	fffffc01 	.word	0xfffffc01
   332dc:	00039b48 	.word	0x00039b48
   332e0:	fffffc0d 	.word	0xfffffc0d
   332e4:	800fffff 	.word	0x800fffff
   332e8:	45d9      	cmp	r9, fp
   332ea:	d900      	bls.n	332ee <__aeabi_ddiv+0x1fe>
   332ec:	e139      	b.n	33562 <__aeabi_ddiv+0x472>
   332ee:	d100      	bne.n	332f2 <__aeabi_ddiv+0x202>
   332f0:	e134      	b.n	3355c <__aeabi_ddiv+0x46c>
   332f2:	2300      	movs	r3, #0
   332f4:	4646      	mov	r6, r8
   332f6:	464d      	mov	r5, r9
   332f8:	469a      	mov	sl, r3
   332fa:	3c01      	subs	r4, #1
   332fc:	465b      	mov	r3, fp
   332fe:	0e0a      	lsrs	r2, r1, #24
   33300:	021b      	lsls	r3, r3, #8
   33302:	431a      	orrs	r2, r3
   33304:	020b      	lsls	r3, r1, #8
   33306:	0c17      	lsrs	r7, r2, #16
   33308:	9303      	str	r3, [sp, #12]
   3330a:	0413      	lsls	r3, r2, #16
   3330c:	0c1b      	lsrs	r3, r3, #16
   3330e:	0039      	movs	r1, r7
   33310:	0028      	movs	r0, r5
   33312:	4690      	mov	r8, r2
   33314:	9301      	str	r3, [sp, #4]
   33316:	f7fe fc1d 	bl	31b54 <__udivsi3>
   3331a:	0002      	movs	r2, r0
   3331c:	9b01      	ldr	r3, [sp, #4]
   3331e:	4683      	mov	fp, r0
   33320:	435a      	muls	r2, r3
   33322:	0028      	movs	r0, r5
   33324:	0039      	movs	r1, r7
   33326:	4691      	mov	r9, r2
   33328:	f7fe fc9a 	bl	31c60 <__aeabi_uidivmod>
   3332c:	0c35      	lsrs	r5, r6, #16
   3332e:	0409      	lsls	r1, r1, #16
   33330:	430d      	orrs	r5, r1
   33332:	45a9      	cmp	r9, r5
   33334:	d90d      	bls.n	33352 <__aeabi_ddiv+0x262>
   33336:	465b      	mov	r3, fp
   33338:	4445      	add	r5, r8
   3333a:	3b01      	subs	r3, #1
   3333c:	45a8      	cmp	r8, r5
   3333e:	d900      	bls.n	33342 <__aeabi_ddiv+0x252>
   33340:	e13a      	b.n	335b8 <__aeabi_ddiv+0x4c8>
   33342:	45a9      	cmp	r9, r5
   33344:	d800      	bhi.n	33348 <__aeabi_ddiv+0x258>
   33346:	e137      	b.n	335b8 <__aeabi_ddiv+0x4c8>
   33348:	2302      	movs	r3, #2
   3334a:	425b      	negs	r3, r3
   3334c:	469c      	mov	ip, r3
   3334e:	4445      	add	r5, r8
   33350:	44e3      	add	fp, ip
   33352:	464b      	mov	r3, r9
   33354:	1aeb      	subs	r3, r5, r3
   33356:	0039      	movs	r1, r7
   33358:	0018      	movs	r0, r3
   3335a:	9304      	str	r3, [sp, #16]
   3335c:	f7fe fbfa 	bl	31b54 <__udivsi3>
   33360:	9b01      	ldr	r3, [sp, #4]
   33362:	0005      	movs	r5, r0
   33364:	4343      	muls	r3, r0
   33366:	0039      	movs	r1, r7
   33368:	9804      	ldr	r0, [sp, #16]
   3336a:	4699      	mov	r9, r3
   3336c:	f7fe fc78 	bl	31c60 <__aeabi_uidivmod>
   33370:	0433      	lsls	r3, r6, #16
   33372:	0409      	lsls	r1, r1, #16
   33374:	0c1b      	lsrs	r3, r3, #16
   33376:	430b      	orrs	r3, r1
   33378:	4599      	cmp	r9, r3
   3337a:	d909      	bls.n	33390 <__aeabi_ddiv+0x2a0>
   3337c:	4443      	add	r3, r8
   3337e:	1e6a      	subs	r2, r5, #1
   33380:	4598      	cmp	r8, r3
   33382:	d900      	bls.n	33386 <__aeabi_ddiv+0x296>
   33384:	e11a      	b.n	335bc <__aeabi_ddiv+0x4cc>
   33386:	4599      	cmp	r9, r3
   33388:	d800      	bhi.n	3338c <__aeabi_ddiv+0x29c>
   3338a:	e117      	b.n	335bc <__aeabi_ddiv+0x4cc>
   3338c:	3d02      	subs	r5, #2
   3338e:	4443      	add	r3, r8
   33390:	464a      	mov	r2, r9
   33392:	1a9b      	subs	r3, r3, r2
   33394:	465a      	mov	r2, fp
   33396:	0412      	lsls	r2, r2, #16
   33398:	432a      	orrs	r2, r5
   3339a:	9903      	ldr	r1, [sp, #12]
   3339c:	4693      	mov	fp, r2
   3339e:	0c10      	lsrs	r0, r2, #16
   333a0:	0c0a      	lsrs	r2, r1, #16
   333a2:	4691      	mov	r9, r2
   333a4:	0409      	lsls	r1, r1, #16
   333a6:	465a      	mov	r2, fp
   333a8:	0c09      	lsrs	r1, r1, #16
   333aa:	464e      	mov	r6, r9
   333ac:	000d      	movs	r5, r1
   333ae:	0412      	lsls	r2, r2, #16
   333b0:	0c12      	lsrs	r2, r2, #16
   333b2:	4345      	muls	r5, r0
   333b4:	9105      	str	r1, [sp, #20]
   333b6:	4351      	muls	r1, r2
   333b8:	4372      	muls	r2, r6
   333ba:	4370      	muls	r0, r6
   333bc:	1952      	adds	r2, r2, r5
   333be:	0c0e      	lsrs	r6, r1, #16
   333c0:	18b2      	adds	r2, r6, r2
   333c2:	4295      	cmp	r5, r2
   333c4:	d903      	bls.n	333ce <__aeabi_ddiv+0x2de>
   333c6:	2580      	movs	r5, #128	; 0x80
   333c8:	026d      	lsls	r5, r5, #9
   333ca:	46ac      	mov	ip, r5
   333cc:	4460      	add	r0, ip
   333ce:	0c15      	lsrs	r5, r2, #16
   333d0:	0409      	lsls	r1, r1, #16
   333d2:	0412      	lsls	r2, r2, #16
   333d4:	0c09      	lsrs	r1, r1, #16
   333d6:	1828      	adds	r0, r5, r0
   333d8:	1852      	adds	r2, r2, r1
   333da:	4283      	cmp	r3, r0
   333dc:	d200      	bcs.n	333e0 <__aeabi_ddiv+0x2f0>
   333de:	e0ce      	b.n	3357e <__aeabi_ddiv+0x48e>
   333e0:	d100      	bne.n	333e4 <__aeabi_ddiv+0x2f4>
   333e2:	e0c8      	b.n	33576 <__aeabi_ddiv+0x486>
   333e4:	1a1d      	subs	r5, r3, r0
   333e6:	4653      	mov	r3, sl
   333e8:	1a9e      	subs	r6, r3, r2
   333ea:	45b2      	cmp	sl, r6
   333ec:	4192      	sbcs	r2, r2
   333ee:	4252      	negs	r2, r2
   333f0:	1aab      	subs	r3, r5, r2
   333f2:	469a      	mov	sl, r3
   333f4:	4598      	cmp	r8, r3
   333f6:	d100      	bne.n	333fa <__aeabi_ddiv+0x30a>
   333f8:	e117      	b.n	3362a <__aeabi_ddiv+0x53a>
   333fa:	0039      	movs	r1, r7
   333fc:	0018      	movs	r0, r3
   333fe:	f7fe fba9 	bl	31b54 <__udivsi3>
   33402:	9b01      	ldr	r3, [sp, #4]
   33404:	0005      	movs	r5, r0
   33406:	4343      	muls	r3, r0
   33408:	0039      	movs	r1, r7
   3340a:	4650      	mov	r0, sl
   3340c:	9304      	str	r3, [sp, #16]
   3340e:	f7fe fc27 	bl	31c60 <__aeabi_uidivmod>
   33412:	9804      	ldr	r0, [sp, #16]
   33414:	040b      	lsls	r3, r1, #16
   33416:	0c31      	lsrs	r1, r6, #16
   33418:	4319      	orrs	r1, r3
   3341a:	4288      	cmp	r0, r1
   3341c:	d909      	bls.n	33432 <__aeabi_ddiv+0x342>
   3341e:	4441      	add	r1, r8
   33420:	1e6b      	subs	r3, r5, #1
   33422:	4588      	cmp	r8, r1
   33424:	d900      	bls.n	33428 <__aeabi_ddiv+0x338>
   33426:	e107      	b.n	33638 <__aeabi_ddiv+0x548>
   33428:	4288      	cmp	r0, r1
   3342a:	d800      	bhi.n	3342e <__aeabi_ddiv+0x33e>
   3342c:	e104      	b.n	33638 <__aeabi_ddiv+0x548>
   3342e:	3d02      	subs	r5, #2
   33430:	4441      	add	r1, r8
   33432:	9b04      	ldr	r3, [sp, #16]
   33434:	1acb      	subs	r3, r1, r3
   33436:	0018      	movs	r0, r3
   33438:	0039      	movs	r1, r7
   3343a:	9304      	str	r3, [sp, #16]
   3343c:	f7fe fb8a 	bl	31b54 <__udivsi3>
   33440:	9b01      	ldr	r3, [sp, #4]
   33442:	4682      	mov	sl, r0
   33444:	4343      	muls	r3, r0
   33446:	0039      	movs	r1, r7
   33448:	9804      	ldr	r0, [sp, #16]
   3344a:	9301      	str	r3, [sp, #4]
   3344c:	f7fe fc08 	bl	31c60 <__aeabi_uidivmod>
   33450:	9801      	ldr	r0, [sp, #4]
   33452:	040b      	lsls	r3, r1, #16
   33454:	0431      	lsls	r1, r6, #16
   33456:	0c09      	lsrs	r1, r1, #16
   33458:	4319      	orrs	r1, r3
   3345a:	4288      	cmp	r0, r1
   3345c:	d90d      	bls.n	3347a <__aeabi_ddiv+0x38a>
   3345e:	4653      	mov	r3, sl
   33460:	4441      	add	r1, r8
   33462:	3b01      	subs	r3, #1
   33464:	4588      	cmp	r8, r1
   33466:	d900      	bls.n	3346a <__aeabi_ddiv+0x37a>
   33468:	e0e8      	b.n	3363c <__aeabi_ddiv+0x54c>
   3346a:	4288      	cmp	r0, r1
   3346c:	d800      	bhi.n	33470 <__aeabi_ddiv+0x380>
   3346e:	e0e5      	b.n	3363c <__aeabi_ddiv+0x54c>
   33470:	2302      	movs	r3, #2
   33472:	425b      	negs	r3, r3
   33474:	469c      	mov	ip, r3
   33476:	4441      	add	r1, r8
   33478:	44e2      	add	sl, ip
   3347a:	9b01      	ldr	r3, [sp, #4]
   3347c:	042d      	lsls	r5, r5, #16
   3347e:	1ace      	subs	r6, r1, r3
   33480:	4651      	mov	r1, sl
   33482:	4329      	orrs	r1, r5
   33484:	9d05      	ldr	r5, [sp, #20]
   33486:	464f      	mov	r7, r9
   33488:	002a      	movs	r2, r5
   3348a:	040b      	lsls	r3, r1, #16
   3348c:	0c08      	lsrs	r0, r1, #16
   3348e:	0c1b      	lsrs	r3, r3, #16
   33490:	435a      	muls	r2, r3
   33492:	4345      	muls	r5, r0
   33494:	437b      	muls	r3, r7
   33496:	4378      	muls	r0, r7
   33498:	195b      	adds	r3, r3, r5
   3349a:	0c17      	lsrs	r7, r2, #16
   3349c:	18fb      	adds	r3, r7, r3
   3349e:	429d      	cmp	r5, r3
   334a0:	d903      	bls.n	334aa <__aeabi_ddiv+0x3ba>
   334a2:	2580      	movs	r5, #128	; 0x80
   334a4:	026d      	lsls	r5, r5, #9
   334a6:	46ac      	mov	ip, r5
   334a8:	4460      	add	r0, ip
   334aa:	0c1d      	lsrs	r5, r3, #16
   334ac:	0412      	lsls	r2, r2, #16
   334ae:	041b      	lsls	r3, r3, #16
   334b0:	0c12      	lsrs	r2, r2, #16
   334b2:	1828      	adds	r0, r5, r0
   334b4:	189b      	adds	r3, r3, r2
   334b6:	4286      	cmp	r6, r0
   334b8:	d200      	bcs.n	334bc <__aeabi_ddiv+0x3cc>
   334ba:	e093      	b.n	335e4 <__aeabi_ddiv+0x4f4>
   334bc:	d100      	bne.n	334c0 <__aeabi_ddiv+0x3d0>
   334be:	e08e      	b.n	335de <__aeabi_ddiv+0x4ee>
   334c0:	2301      	movs	r3, #1
   334c2:	4319      	orrs	r1, r3
   334c4:	4ba0      	ldr	r3, [pc, #640]	; (33748 <__aeabi_ddiv+0x658>)
   334c6:	18e3      	adds	r3, r4, r3
   334c8:	2b00      	cmp	r3, #0
   334ca:	dc00      	bgt.n	334ce <__aeabi_ddiv+0x3de>
   334cc:	e099      	b.n	33602 <__aeabi_ddiv+0x512>
   334ce:	074a      	lsls	r2, r1, #29
   334d0:	d000      	beq.n	334d4 <__aeabi_ddiv+0x3e4>
   334d2:	e09e      	b.n	33612 <__aeabi_ddiv+0x522>
   334d4:	465a      	mov	r2, fp
   334d6:	01d2      	lsls	r2, r2, #7
   334d8:	d506      	bpl.n	334e8 <__aeabi_ddiv+0x3f8>
   334da:	465a      	mov	r2, fp
   334dc:	4b9b      	ldr	r3, [pc, #620]	; (3374c <__aeabi_ddiv+0x65c>)
   334de:	401a      	ands	r2, r3
   334e0:	2380      	movs	r3, #128	; 0x80
   334e2:	4693      	mov	fp, r2
   334e4:	00db      	lsls	r3, r3, #3
   334e6:	18e3      	adds	r3, r4, r3
   334e8:	4a99      	ldr	r2, [pc, #612]	; (33750 <__aeabi_ddiv+0x660>)
   334ea:	4293      	cmp	r3, r2
   334ec:	dd68      	ble.n	335c0 <__aeabi_ddiv+0x4d0>
   334ee:	2301      	movs	r3, #1
   334f0:	9a02      	ldr	r2, [sp, #8]
   334f2:	4c98      	ldr	r4, [pc, #608]	; (33754 <__aeabi_ddiv+0x664>)
   334f4:	401a      	ands	r2, r3
   334f6:	2300      	movs	r3, #0
   334f8:	4694      	mov	ip, r2
   334fa:	4698      	mov	r8, r3
   334fc:	2200      	movs	r2, #0
   334fe:	e6c5      	b.n	3328c <__aeabi_ddiv+0x19c>
   33500:	2280      	movs	r2, #128	; 0x80
   33502:	464b      	mov	r3, r9
   33504:	0312      	lsls	r2, r2, #12
   33506:	4213      	tst	r3, r2
   33508:	d00a      	beq.n	33520 <__aeabi_ddiv+0x430>
   3350a:	465b      	mov	r3, fp
   3350c:	4213      	tst	r3, r2
   3350e:	d106      	bne.n	3351e <__aeabi_ddiv+0x42e>
   33510:	431a      	orrs	r2, r3
   33512:	0312      	lsls	r2, r2, #12
   33514:	0b12      	lsrs	r2, r2, #12
   33516:	46ac      	mov	ip, r5
   33518:	4688      	mov	r8, r1
   3351a:	4c8e      	ldr	r4, [pc, #568]	; (33754 <__aeabi_ddiv+0x664>)
   3351c:	e6b6      	b.n	3328c <__aeabi_ddiv+0x19c>
   3351e:	464b      	mov	r3, r9
   33520:	431a      	orrs	r2, r3
   33522:	0312      	lsls	r2, r2, #12
   33524:	0b12      	lsrs	r2, r2, #12
   33526:	46bc      	mov	ip, r7
   33528:	4c8a      	ldr	r4, [pc, #552]	; (33754 <__aeabi_ddiv+0x664>)
   3352a:	e6af      	b.n	3328c <__aeabi_ddiv+0x19c>
   3352c:	0003      	movs	r3, r0
   3352e:	465a      	mov	r2, fp
   33530:	3b28      	subs	r3, #40	; 0x28
   33532:	409a      	lsls	r2, r3
   33534:	2300      	movs	r3, #0
   33536:	4691      	mov	r9, r2
   33538:	4698      	mov	r8, r3
   3353a:	e657      	b.n	331ec <__aeabi_ddiv+0xfc>
   3353c:	4658      	mov	r0, fp
   3353e:	f000 ff47 	bl	343d0 <__clzsi2>
   33542:	3020      	adds	r0, #32
   33544:	e640      	b.n	331c8 <__aeabi_ddiv+0xd8>
   33546:	0003      	movs	r3, r0
   33548:	4652      	mov	r2, sl
   3354a:	3b28      	subs	r3, #40	; 0x28
   3354c:	409a      	lsls	r2, r3
   3354e:	2100      	movs	r1, #0
   33550:	4693      	mov	fp, r2
   33552:	e677      	b.n	33244 <__aeabi_ddiv+0x154>
   33554:	f000 ff3c 	bl	343d0 <__clzsi2>
   33558:	3020      	adds	r0, #32
   3355a:	e65f      	b.n	3321c <__aeabi_ddiv+0x12c>
   3355c:	4588      	cmp	r8, r1
   3355e:	d200      	bcs.n	33562 <__aeabi_ddiv+0x472>
   33560:	e6c7      	b.n	332f2 <__aeabi_ddiv+0x202>
   33562:	464b      	mov	r3, r9
   33564:	07de      	lsls	r6, r3, #31
   33566:	085d      	lsrs	r5, r3, #1
   33568:	4643      	mov	r3, r8
   3356a:	085b      	lsrs	r3, r3, #1
   3356c:	431e      	orrs	r6, r3
   3356e:	4643      	mov	r3, r8
   33570:	07db      	lsls	r3, r3, #31
   33572:	469a      	mov	sl, r3
   33574:	e6c2      	b.n	332fc <__aeabi_ddiv+0x20c>
   33576:	2500      	movs	r5, #0
   33578:	4592      	cmp	sl, r2
   3357a:	d300      	bcc.n	3357e <__aeabi_ddiv+0x48e>
   3357c:	e733      	b.n	333e6 <__aeabi_ddiv+0x2f6>
   3357e:	9e03      	ldr	r6, [sp, #12]
   33580:	4659      	mov	r1, fp
   33582:	46b4      	mov	ip, r6
   33584:	44e2      	add	sl, ip
   33586:	45b2      	cmp	sl, r6
   33588:	41ad      	sbcs	r5, r5
   3358a:	426d      	negs	r5, r5
   3358c:	4445      	add	r5, r8
   3358e:	18eb      	adds	r3, r5, r3
   33590:	3901      	subs	r1, #1
   33592:	4598      	cmp	r8, r3
   33594:	d207      	bcs.n	335a6 <__aeabi_ddiv+0x4b6>
   33596:	4298      	cmp	r0, r3
   33598:	d900      	bls.n	3359c <__aeabi_ddiv+0x4ac>
   3359a:	e07f      	b.n	3369c <__aeabi_ddiv+0x5ac>
   3359c:	d100      	bne.n	335a0 <__aeabi_ddiv+0x4b0>
   3359e:	e0bc      	b.n	3371a <__aeabi_ddiv+0x62a>
   335a0:	1a1d      	subs	r5, r3, r0
   335a2:	468b      	mov	fp, r1
   335a4:	e71f      	b.n	333e6 <__aeabi_ddiv+0x2f6>
   335a6:	4598      	cmp	r8, r3
   335a8:	d1fa      	bne.n	335a0 <__aeabi_ddiv+0x4b0>
   335aa:	9d03      	ldr	r5, [sp, #12]
   335ac:	4555      	cmp	r5, sl
   335ae:	d9f2      	bls.n	33596 <__aeabi_ddiv+0x4a6>
   335b0:	4643      	mov	r3, r8
   335b2:	468b      	mov	fp, r1
   335b4:	1a1d      	subs	r5, r3, r0
   335b6:	e716      	b.n	333e6 <__aeabi_ddiv+0x2f6>
   335b8:	469b      	mov	fp, r3
   335ba:	e6ca      	b.n	33352 <__aeabi_ddiv+0x262>
   335bc:	0015      	movs	r5, r2
   335be:	e6e7      	b.n	33390 <__aeabi_ddiv+0x2a0>
   335c0:	465a      	mov	r2, fp
   335c2:	08c9      	lsrs	r1, r1, #3
   335c4:	0752      	lsls	r2, r2, #29
   335c6:	430a      	orrs	r2, r1
   335c8:	055b      	lsls	r3, r3, #21
   335ca:	4690      	mov	r8, r2
   335cc:	0d5c      	lsrs	r4, r3, #21
   335ce:	465a      	mov	r2, fp
   335d0:	2301      	movs	r3, #1
   335d2:	9902      	ldr	r1, [sp, #8]
   335d4:	0252      	lsls	r2, r2, #9
   335d6:	4019      	ands	r1, r3
   335d8:	0b12      	lsrs	r2, r2, #12
   335da:	468c      	mov	ip, r1
   335dc:	e656      	b.n	3328c <__aeabi_ddiv+0x19c>
   335de:	2b00      	cmp	r3, #0
   335e0:	d100      	bne.n	335e4 <__aeabi_ddiv+0x4f4>
   335e2:	e76f      	b.n	334c4 <__aeabi_ddiv+0x3d4>
   335e4:	4446      	add	r6, r8
   335e6:	1e4a      	subs	r2, r1, #1
   335e8:	45b0      	cmp	r8, r6
   335ea:	d929      	bls.n	33640 <__aeabi_ddiv+0x550>
   335ec:	0011      	movs	r1, r2
   335ee:	4286      	cmp	r6, r0
   335f0:	d000      	beq.n	335f4 <__aeabi_ddiv+0x504>
   335f2:	e765      	b.n	334c0 <__aeabi_ddiv+0x3d0>
   335f4:	9a03      	ldr	r2, [sp, #12]
   335f6:	4293      	cmp	r3, r2
   335f8:	d000      	beq.n	335fc <__aeabi_ddiv+0x50c>
   335fa:	e761      	b.n	334c0 <__aeabi_ddiv+0x3d0>
   335fc:	e762      	b.n	334c4 <__aeabi_ddiv+0x3d4>
   335fe:	2101      	movs	r1, #1
   33600:	4249      	negs	r1, r1
   33602:	2001      	movs	r0, #1
   33604:	1ac2      	subs	r2, r0, r3
   33606:	2a38      	cmp	r2, #56	; 0x38
   33608:	dd21      	ble.n	3364e <__aeabi_ddiv+0x55e>
   3360a:	9b02      	ldr	r3, [sp, #8]
   3360c:	4003      	ands	r3, r0
   3360e:	469c      	mov	ip, r3
   33610:	e638      	b.n	33284 <__aeabi_ddiv+0x194>
   33612:	220f      	movs	r2, #15
   33614:	400a      	ands	r2, r1
   33616:	2a04      	cmp	r2, #4
   33618:	d100      	bne.n	3361c <__aeabi_ddiv+0x52c>
   3361a:	e75b      	b.n	334d4 <__aeabi_ddiv+0x3e4>
   3361c:	000a      	movs	r2, r1
   3361e:	1d11      	adds	r1, r2, #4
   33620:	4291      	cmp	r1, r2
   33622:	4192      	sbcs	r2, r2
   33624:	4252      	negs	r2, r2
   33626:	4493      	add	fp, r2
   33628:	e754      	b.n	334d4 <__aeabi_ddiv+0x3e4>
   3362a:	4b47      	ldr	r3, [pc, #284]	; (33748 <__aeabi_ddiv+0x658>)
   3362c:	18e3      	adds	r3, r4, r3
   3362e:	2b00      	cmp	r3, #0
   33630:	dde5      	ble.n	335fe <__aeabi_ddiv+0x50e>
   33632:	2201      	movs	r2, #1
   33634:	4252      	negs	r2, r2
   33636:	e7f2      	b.n	3361e <__aeabi_ddiv+0x52e>
   33638:	001d      	movs	r5, r3
   3363a:	e6fa      	b.n	33432 <__aeabi_ddiv+0x342>
   3363c:	469a      	mov	sl, r3
   3363e:	e71c      	b.n	3347a <__aeabi_ddiv+0x38a>
   33640:	42b0      	cmp	r0, r6
   33642:	d839      	bhi.n	336b8 <__aeabi_ddiv+0x5c8>
   33644:	d06e      	beq.n	33724 <__aeabi_ddiv+0x634>
   33646:	0011      	movs	r1, r2
   33648:	e73a      	b.n	334c0 <__aeabi_ddiv+0x3d0>
   3364a:	9302      	str	r3, [sp, #8]
   3364c:	e73a      	b.n	334c4 <__aeabi_ddiv+0x3d4>
   3364e:	2a1f      	cmp	r2, #31
   33650:	dc3c      	bgt.n	336cc <__aeabi_ddiv+0x5dc>
   33652:	2320      	movs	r3, #32
   33654:	1a9b      	subs	r3, r3, r2
   33656:	000c      	movs	r4, r1
   33658:	4658      	mov	r0, fp
   3365a:	4099      	lsls	r1, r3
   3365c:	4098      	lsls	r0, r3
   3365e:	1e4b      	subs	r3, r1, #1
   33660:	4199      	sbcs	r1, r3
   33662:	465b      	mov	r3, fp
   33664:	40d4      	lsrs	r4, r2
   33666:	40d3      	lsrs	r3, r2
   33668:	4320      	orrs	r0, r4
   3366a:	4308      	orrs	r0, r1
   3366c:	001a      	movs	r2, r3
   3366e:	0743      	lsls	r3, r0, #29
   33670:	d009      	beq.n	33686 <__aeabi_ddiv+0x596>
   33672:	230f      	movs	r3, #15
   33674:	4003      	ands	r3, r0
   33676:	2b04      	cmp	r3, #4
   33678:	d005      	beq.n	33686 <__aeabi_ddiv+0x596>
   3367a:	0001      	movs	r1, r0
   3367c:	1d08      	adds	r0, r1, #4
   3367e:	4288      	cmp	r0, r1
   33680:	419b      	sbcs	r3, r3
   33682:	425b      	negs	r3, r3
   33684:	18d2      	adds	r2, r2, r3
   33686:	0213      	lsls	r3, r2, #8
   33688:	d53a      	bpl.n	33700 <__aeabi_ddiv+0x610>
   3368a:	2301      	movs	r3, #1
   3368c:	9a02      	ldr	r2, [sp, #8]
   3368e:	2401      	movs	r4, #1
   33690:	401a      	ands	r2, r3
   33692:	2300      	movs	r3, #0
   33694:	4694      	mov	ip, r2
   33696:	4698      	mov	r8, r3
   33698:	2200      	movs	r2, #0
   3369a:	e5f7      	b.n	3328c <__aeabi_ddiv+0x19c>
   3369c:	2102      	movs	r1, #2
   3369e:	4249      	negs	r1, r1
   336a0:	468c      	mov	ip, r1
   336a2:	9d03      	ldr	r5, [sp, #12]
   336a4:	44e3      	add	fp, ip
   336a6:	46ac      	mov	ip, r5
   336a8:	44e2      	add	sl, ip
   336aa:	45aa      	cmp	sl, r5
   336ac:	41ad      	sbcs	r5, r5
   336ae:	426d      	negs	r5, r5
   336b0:	4445      	add	r5, r8
   336b2:	18ed      	adds	r5, r5, r3
   336b4:	1a2d      	subs	r5, r5, r0
   336b6:	e696      	b.n	333e6 <__aeabi_ddiv+0x2f6>
   336b8:	1e8a      	subs	r2, r1, #2
   336ba:	9903      	ldr	r1, [sp, #12]
   336bc:	004d      	lsls	r5, r1, #1
   336be:	428d      	cmp	r5, r1
   336c0:	4189      	sbcs	r1, r1
   336c2:	4249      	negs	r1, r1
   336c4:	4441      	add	r1, r8
   336c6:	1876      	adds	r6, r6, r1
   336c8:	9503      	str	r5, [sp, #12]
   336ca:	e78f      	b.n	335ec <__aeabi_ddiv+0x4fc>
   336cc:	201f      	movs	r0, #31
   336ce:	4240      	negs	r0, r0
   336d0:	1ac3      	subs	r3, r0, r3
   336d2:	4658      	mov	r0, fp
   336d4:	40d8      	lsrs	r0, r3
   336d6:	0003      	movs	r3, r0
   336d8:	2a20      	cmp	r2, #32
   336da:	d028      	beq.n	3372e <__aeabi_ddiv+0x63e>
   336dc:	2040      	movs	r0, #64	; 0x40
   336de:	465d      	mov	r5, fp
   336e0:	1a82      	subs	r2, r0, r2
   336e2:	4095      	lsls	r5, r2
   336e4:	4329      	orrs	r1, r5
   336e6:	1e4a      	subs	r2, r1, #1
   336e8:	4191      	sbcs	r1, r2
   336ea:	4319      	orrs	r1, r3
   336ec:	2307      	movs	r3, #7
   336ee:	2200      	movs	r2, #0
   336f0:	400b      	ands	r3, r1
   336f2:	d009      	beq.n	33708 <__aeabi_ddiv+0x618>
   336f4:	230f      	movs	r3, #15
   336f6:	2200      	movs	r2, #0
   336f8:	400b      	ands	r3, r1
   336fa:	0008      	movs	r0, r1
   336fc:	2b04      	cmp	r3, #4
   336fe:	d1bd      	bne.n	3367c <__aeabi_ddiv+0x58c>
   33700:	0001      	movs	r1, r0
   33702:	0753      	lsls	r3, r2, #29
   33704:	0252      	lsls	r2, r2, #9
   33706:	0b12      	lsrs	r2, r2, #12
   33708:	08c9      	lsrs	r1, r1, #3
   3370a:	4319      	orrs	r1, r3
   3370c:	2301      	movs	r3, #1
   3370e:	4688      	mov	r8, r1
   33710:	9902      	ldr	r1, [sp, #8]
   33712:	2400      	movs	r4, #0
   33714:	4019      	ands	r1, r3
   33716:	468c      	mov	ip, r1
   33718:	e5b8      	b.n	3328c <__aeabi_ddiv+0x19c>
   3371a:	4552      	cmp	r2, sl
   3371c:	d8be      	bhi.n	3369c <__aeabi_ddiv+0x5ac>
   3371e:	468b      	mov	fp, r1
   33720:	2500      	movs	r5, #0
   33722:	e660      	b.n	333e6 <__aeabi_ddiv+0x2f6>
   33724:	9d03      	ldr	r5, [sp, #12]
   33726:	429d      	cmp	r5, r3
   33728:	d3c6      	bcc.n	336b8 <__aeabi_ddiv+0x5c8>
   3372a:	0011      	movs	r1, r2
   3372c:	e762      	b.n	335f4 <__aeabi_ddiv+0x504>
   3372e:	2500      	movs	r5, #0
   33730:	e7d8      	b.n	336e4 <__aeabi_ddiv+0x5f4>
   33732:	2280      	movs	r2, #128	; 0x80
   33734:	465b      	mov	r3, fp
   33736:	0312      	lsls	r2, r2, #12
   33738:	431a      	orrs	r2, r3
   3373a:	9b01      	ldr	r3, [sp, #4]
   3373c:	0312      	lsls	r2, r2, #12
   3373e:	0b12      	lsrs	r2, r2, #12
   33740:	469c      	mov	ip, r3
   33742:	4688      	mov	r8, r1
   33744:	4c03      	ldr	r4, [pc, #12]	; (33754 <__aeabi_ddiv+0x664>)
   33746:	e5a1      	b.n	3328c <__aeabi_ddiv+0x19c>
   33748:	000003ff 	.word	0x000003ff
   3374c:	feffffff 	.word	0xfeffffff
   33750:	000007fe 	.word	0x000007fe
   33754:	000007ff 	.word	0x000007ff

00033758 <__aeabi_dmul>:
   33758:	b5f0      	push	{r4, r5, r6, r7, lr}
   3375a:	4657      	mov	r7, sl
   3375c:	4645      	mov	r5, r8
   3375e:	46de      	mov	lr, fp
   33760:	464e      	mov	r6, r9
   33762:	b5e0      	push	{r5, r6, r7, lr}
   33764:	030c      	lsls	r4, r1, #12
   33766:	4698      	mov	r8, r3
   33768:	004e      	lsls	r6, r1, #1
   3376a:	0b23      	lsrs	r3, r4, #12
   3376c:	b087      	sub	sp, #28
   3376e:	0007      	movs	r7, r0
   33770:	4692      	mov	sl, r2
   33772:	469b      	mov	fp, r3
   33774:	0d76      	lsrs	r6, r6, #21
   33776:	0fcd      	lsrs	r5, r1, #31
   33778:	2e00      	cmp	r6, #0
   3377a:	d06b      	beq.n	33854 <__aeabi_dmul+0xfc>
   3377c:	4b6d      	ldr	r3, [pc, #436]	; (33934 <__aeabi_dmul+0x1dc>)
   3377e:	429e      	cmp	r6, r3
   33780:	d035      	beq.n	337ee <__aeabi_dmul+0x96>
   33782:	2480      	movs	r4, #128	; 0x80
   33784:	465b      	mov	r3, fp
   33786:	0f42      	lsrs	r2, r0, #29
   33788:	0424      	lsls	r4, r4, #16
   3378a:	00db      	lsls	r3, r3, #3
   3378c:	4314      	orrs	r4, r2
   3378e:	431c      	orrs	r4, r3
   33790:	00c3      	lsls	r3, r0, #3
   33792:	4699      	mov	r9, r3
   33794:	4b68      	ldr	r3, [pc, #416]	; (33938 <__aeabi_dmul+0x1e0>)
   33796:	46a3      	mov	fp, r4
   33798:	469c      	mov	ip, r3
   3379a:	2300      	movs	r3, #0
   3379c:	2700      	movs	r7, #0
   3379e:	4466      	add	r6, ip
   337a0:	9302      	str	r3, [sp, #8]
   337a2:	4643      	mov	r3, r8
   337a4:	031c      	lsls	r4, r3, #12
   337a6:	005a      	lsls	r2, r3, #1
   337a8:	0fdb      	lsrs	r3, r3, #31
   337aa:	4650      	mov	r0, sl
   337ac:	0b24      	lsrs	r4, r4, #12
   337ae:	0d52      	lsrs	r2, r2, #21
   337b0:	4698      	mov	r8, r3
   337b2:	d100      	bne.n	337b6 <__aeabi_dmul+0x5e>
   337b4:	e076      	b.n	338a4 <__aeabi_dmul+0x14c>
   337b6:	4b5f      	ldr	r3, [pc, #380]	; (33934 <__aeabi_dmul+0x1dc>)
   337b8:	429a      	cmp	r2, r3
   337ba:	d06d      	beq.n	33898 <__aeabi_dmul+0x140>
   337bc:	2380      	movs	r3, #128	; 0x80
   337be:	0f41      	lsrs	r1, r0, #29
   337c0:	041b      	lsls	r3, r3, #16
   337c2:	430b      	orrs	r3, r1
   337c4:	495c      	ldr	r1, [pc, #368]	; (33938 <__aeabi_dmul+0x1e0>)
   337c6:	00e4      	lsls	r4, r4, #3
   337c8:	468c      	mov	ip, r1
   337ca:	431c      	orrs	r4, r3
   337cc:	00c3      	lsls	r3, r0, #3
   337ce:	2000      	movs	r0, #0
   337d0:	4462      	add	r2, ip
   337d2:	4641      	mov	r1, r8
   337d4:	18b6      	adds	r6, r6, r2
   337d6:	4069      	eors	r1, r5
   337d8:	1c72      	adds	r2, r6, #1
   337da:	9101      	str	r1, [sp, #4]
   337dc:	4694      	mov	ip, r2
   337de:	4307      	orrs	r7, r0
   337e0:	2f0f      	cmp	r7, #15
   337e2:	d900      	bls.n	337e6 <__aeabi_dmul+0x8e>
   337e4:	e0b0      	b.n	33948 <__aeabi_dmul+0x1f0>
   337e6:	4a55      	ldr	r2, [pc, #340]	; (3393c <__aeabi_dmul+0x1e4>)
   337e8:	00bf      	lsls	r7, r7, #2
   337ea:	59d2      	ldr	r2, [r2, r7]
   337ec:	4697      	mov	pc, r2
   337ee:	465b      	mov	r3, fp
   337f0:	4303      	orrs	r3, r0
   337f2:	4699      	mov	r9, r3
   337f4:	d000      	beq.n	337f8 <__aeabi_dmul+0xa0>
   337f6:	e087      	b.n	33908 <__aeabi_dmul+0x1b0>
   337f8:	2300      	movs	r3, #0
   337fa:	469b      	mov	fp, r3
   337fc:	3302      	adds	r3, #2
   337fe:	2708      	movs	r7, #8
   33800:	9302      	str	r3, [sp, #8]
   33802:	e7ce      	b.n	337a2 <__aeabi_dmul+0x4a>
   33804:	4642      	mov	r2, r8
   33806:	9201      	str	r2, [sp, #4]
   33808:	2802      	cmp	r0, #2
   3380a:	d067      	beq.n	338dc <__aeabi_dmul+0x184>
   3380c:	2803      	cmp	r0, #3
   3380e:	d100      	bne.n	33812 <__aeabi_dmul+0xba>
   33810:	e20e      	b.n	33c30 <__aeabi_dmul+0x4d8>
   33812:	2801      	cmp	r0, #1
   33814:	d000      	beq.n	33818 <__aeabi_dmul+0xc0>
   33816:	e162      	b.n	33ade <__aeabi_dmul+0x386>
   33818:	2300      	movs	r3, #0
   3381a:	2400      	movs	r4, #0
   3381c:	2200      	movs	r2, #0
   3381e:	4699      	mov	r9, r3
   33820:	9901      	ldr	r1, [sp, #4]
   33822:	4001      	ands	r1, r0
   33824:	b2cd      	uxtb	r5, r1
   33826:	2100      	movs	r1, #0
   33828:	0312      	lsls	r2, r2, #12
   3382a:	0d0b      	lsrs	r3, r1, #20
   3382c:	0b12      	lsrs	r2, r2, #12
   3382e:	051b      	lsls	r3, r3, #20
   33830:	4313      	orrs	r3, r2
   33832:	4a43      	ldr	r2, [pc, #268]	; (33940 <__aeabi_dmul+0x1e8>)
   33834:	0524      	lsls	r4, r4, #20
   33836:	4013      	ands	r3, r2
   33838:	431c      	orrs	r4, r3
   3383a:	0064      	lsls	r4, r4, #1
   3383c:	07ed      	lsls	r5, r5, #31
   3383e:	0864      	lsrs	r4, r4, #1
   33840:	432c      	orrs	r4, r5
   33842:	4648      	mov	r0, r9
   33844:	0021      	movs	r1, r4
   33846:	b007      	add	sp, #28
   33848:	bc3c      	pop	{r2, r3, r4, r5}
   3384a:	4690      	mov	r8, r2
   3384c:	4699      	mov	r9, r3
   3384e:	46a2      	mov	sl, r4
   33850:	46ab      	mov	fp, r5
   33852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33854:	4303      	orrs	r3, r0
   33856:	4699      	mov	r9, r3
   33858:	d04f      	beq.n	338fa <__aeabi_dmul+0x1a2>
   3385a:	465b      	mov	r3, fp
   3385c:	2b00      	cmp	r3, #0
   3385e:	d100      	bne.n	33862 <__aeabi_dmul+0x10a>
   33860:	e189      	b.n	33b76 <__aeabi_dmul+0x41e>
   33862:	4658      	mov	r0, fp
   33864:	f000 fdb4 	bl	343d0 <__clzsi2>
   33868:	0003      	movs	r3, r0
   3386a:	3b0b      	subs	r3, #11
   3386c:	2b1c      	cmp	r3, #28
   3386e:	dd00      	ble.n	33872 <__aeabi_dmul+0x11a>
   33870:	e17a      	b.n	33b68 <__aeabi_dmul+0x410>
   33872:	221d      	movs	r2, #29
   33874:	1ad3      	subs	r3, r2, r3
   33876:	003a      	movs	r2, r7
   33878:	0001      	movs	r1, r0
   3387a:	465c      	mov	r4, fp
   3387c:	40da      	lsrs	r2, r3
   3387e:	3908      	subs	r1, #8
   33880:	408c      	lsls	r4, r1
   33882:	0013      	movs	r3, r2
   33884:	408f      	lsls	r7, r1
   33886:	4323      	orrs	r3, r4
   33888:	469b      	mov	fp, r3
   3388a:	46b9      	mov	r9, r7
   3388c:	2300      	movs	r3, #0
   3388e:	4e2d      	ldr	r6, [pc, #180]	; (33944 <__aeabi_dmul+0x1ec>)
   33890:	2700      	movs	r7, #0
   33892:	1a36      	subs	r6, r6, r0
   33894:	9302      	str	r3, [sp, #8]
   33896:	e784      	b.n	337a2 <__aeabi_dmul+0x4a>
   33898:	4653      	mov	r3, sl
   3389a:	4323      	orrs	r3, r4
   3389c:	d12a      	bne.n	338f4 <__aeabi_dmul+0x19c>
   3389e:	2400      	movs	r4, #0
   338a0:	2002      	movs	r0, #2
   338a2:	e796      	b.n	337d2 <__aeabi_dmul+0x7a>
   338a4:	4653      	mov	r3, sl
   338a6:	4323      	orrs	r3, r4
   338a8:	d020      	beq.n	338ec <__aeabi_dmul+0x194>
   338aa:	2c00      	cmp	r4, #0
   338ac:	d100      	bne.n	338b0 <__aeabi_dmul+0x158>
   338ae:	e157      	b.n	33b60 <__aeabi_dmul+0x408>
   338b0:	0020      	movs	r0, r4
   338b2:	f000 fd8d 	bl	343d0 <__clzsi2>
   338b6:	0003      	movs	r3, r0
   338b8:	3b0b      	subs	r3, #11
   338ba:	2b1c      	cmp	r3, #28
   338bc:	dd00      	ble.n	338c0 <__aeabi_dmul+0x168>
   338be:	e149      	b.n	33b54 <__aeabi_dmul+0x3fc>
   338c0:	211d      	movs	r1, #29
   338c2:	1acb      	subs	r3, r1, r3
   338c4:	4651      	mov	r1, sl
   338c6:	0002      	movs	r2, r0
   338c8:	40d9      	lsrs	r1, r3
   338ca:	4653      	mov	r3, sl
   338cc:	3a08      	subs	r2, #8
   338ce:	4094      	lsls	r4, r2
   338d0:	4093      	lsls	r3, r2
   338d2:	430c      	orrs	r4, r1
   338d4:	4a1b      	ldr	r2, [pc, #108]	; (33944 <__aeabi_dmul+0x1ec>)
   338d6:	1a12      	subs	r2, r2, r0
   338d8:	2000      	movs	r0, #0
   338da:	e77a      	b.n	337d2 <__aeabi_dmul+0x7a>
   338dc:	2501      	movs	r5, #1
   338de:	9b01      	ldr	r3, [sp, #4]
   338e0:	4c14      	ldr	r4, [pc, #80]	; (33934 <__aeabi_dmul+0x1dc>)
   338e2:	401d      	ands	r5, r3
   338e4:	2300      	movs	r3, #0
   338e6:	2200      	movs	r2, #0
   338e8:	4699      	mov	r9, r3
   338ea:	e79c      	b.n	33826 <__aeabi_dmul+0xce>
   338ec:	2400      	movs	r4, #0
   338ee:	2200      	movs	r2, #0
   338f0:	2001      	movs	r0, #1
   338f2:	e76e      	b.n	337d2 <__aeabi_dmul+0x7a>
   338f4:	4653      	mov	r3, sl
   338f6:	2003      	movs	r0, #3
   338f8:	e76b      	b.n	337d2 <__aeabi_dmul+0x7a>
   338fa:	2300      	movs	r3, #0
   338fc:	469b      	mov	fp, r3
   338fe:	3301      	adds	r3, #1
   33900:	2704      	movs	r7, #4
   33902:	2600      	movs	r6, #0
   33904:	9302      	str	r3, [sp, #8]
   33906:	e74c      	b.n	337a2 <__aeabi_dmul+0x4a>
   33908:	2303      	movs	r3, #3
   3390a:	4681      	mov	r9, r0
   3390c:	270c      	movs	r7, #12
   3390e:	9302      	str	r3, [sp, #8]
   33910:	e747      	b.n	337a2 <__aeabi_dmul+0x4a>
   33912:	2280      	movs	r2, #128	; 0x80
   33914:	2300      	movs	r3, #0
   33916:	2500      	movs	r5, #0
   33918:	0312      	lsls	r2, r2, #12
   3391a:	4699      	mov	r9, r3
   3391c:	4c05      	ldr	r4, [pc, #20]	; (33934 <__aeabi_dmul+0x1dc>)
   3391e:	e782      	b.n	33826 <__aeabi_dmul+0xce>
   33920:	465c      	mov	r4, fp
   33922:	464b      	mov	r3, r9
   33924:	9802      	ldr	r0, [sp, #8]
   33926:	e76f      	b.n	33808 <__aeabi_dmul+0xb0>
   33928:	465c      	mov	r4, fp
   3392a:	464b      	mov	r3, r9
   3392c:	9501      	str	r5, [sp, #4]
   3392e:	9802      	ldr	r0, [sp, #8]
   33930:	e76a      	b.n	33808 <__aeabi_dmul+0xb0>
   33932:	46c0      	nop			; (mov r8, r8)
   33934:	000007ff 	.word	0x000007ff
   33938:	fffffc01 	.word	0xfffffc01
   3393c:	00039b88 	.word	0x00039b88
   33940:	800fffff 	.word	0x800fffff
   33944:	fffffc0d 	.word	0xfffffc0d
   33948:	464a      	mov	r2, r9
   3394a:	4649      	mov	r1, r9
   3394c:	0c17      	lsrs	r7, r2, #16
   3394e:	0c1a      	lsrs	r2, r3, #16
   33950:	041b      	lsls	r3, r3, #16
   33952:	0c1b      	lsrs	r3, r3, #16
   33954:	0408      	lsls	r0, r1, #16
   33956:	0019      	movs	r1, r3
   33958:	0c00      	lsrs	r0, r0, #16
   3395a:	4341      	muls	r1, r0
   3395c:	0015      	movs	r5, r2
   3395e:	4688      	mov	r8, r1
   33960:	0019      	movs	r1, r3
   33962:	437d      	muls	r5, r7
   33964:	4379      	muls	r1, r7
   33966:	9503      	str	r5, [sp, #12]
   33968:	4689      	mov	r9, r1
   3396a:	0029      	movs	r1, r5
   3396c:	0015      	movs	r5, r2
   3396e:	4345      	muls	r5, r0
   33970:	444d      	add	r5, r9
   33972:	9502      	str	r5, [sp, #8]
   33974:	4645      	mov	r5, r8
   33976:	0c2d      	lsrs	r5, r5, #16
   33978:	46aa      	mov	sl, r5
   3397a:	9d02      	ldr	r5, [sp, #8]
   3397c:	4455      	add	r5, sl
   3397e:	45a9      	cmp	r9, r5
   33980:	d906      	bls.n	33990 <__aeabi_dmul+0x238>
   33982:	468a      	mov	sl, r1
   33984:	2180      	movs	r1, #128	; 0x80
   33986:	0249      	lsls	r1, r1, #9
   33988:	4689      	mov	r9, r1
   3398a:	44ca      	add	sl, r9
   3398c:	4651      	mov	r1, sl
   3398e:	9103      	str	r1, [sp, #12]
   33990:	0c29      	lsrs	r1, r5, #16
   33992:	9104      	str	r1, [sp, #16]
   33994:	4641      	mov	r1, r8
   33996:	0409      	lsls	r1, r1, #16
   33998:	042d      	lsls	r5, r5, #16
   3399a:	0c09      	lsrs	r1, r1, #16
   3399c:	4688      	mov	r8, r1
   3399e:	0029      	movs	r1, r5
   339a0:	0c25      	lsrs	r5, r4, #16
   339a2:	0424      	lsls	r4, r4, #16
   339a4:	4441      	add	r1, r8
   339a6:	0c24      	lsrs	r4, r4, #16
   339a8:	9105      	str	r1, [sp, #20]
   339aa:	0021      	movs	r1, r4
   339ac:	4341      	muls	r1, r0
   339ae:	4688      	mov	r8, r1
   339b0:	0021      	movs	r1, r4
   339b2:	4379      	muls	r1, r7
   339b4:	468a      	mov	sl, r1
   339b6:	4368      	muls	r0, r5
   339b8:	4641      	mov	r1, r8
   339ba:	4450      	add	r0, sl
   339bc:	4681      	mov	r9, r0
   339be:	0c08      	lsrs	r0, r1, #16
   339c0:	4448      	add	r0, r9
   339c2:	436f      	muls	r7, r5
   339c4:	4582      	cmp	sl, r0
   339c6:	d903      	bls.n	339d0 <__aeabi_dmul+0x278>
   339c8:	2180      	movs	r1, #128	; 0x80
   339ca:	0249      	lsls	r1, r1, #9
   339cc:	4689      	mov	r9, r1
   339ce:	444f      	add	r7, r9
   339d0:	0c01      	lsrs	r1, r0, #16
   339d2:	4689      	mov	r9, r1
   339d4:	0039      	movs	r1, r7
   339d6:	4449      	add	r1, r9
   339d8:	9102      	str	r1, [sp, #8]
   339da:	4641      	mov	r1, r8
   339dc:	040f      	lsls	r7, r1, #16
   339de:	9904      	ldr	r1, [sp, #16]
   339e0:	0c3f      	lsrs	r7, r7, #16
   339e2:	4688      	mov	r8, r1
   339e4:	0400      	lsls	r0, r0, #16
   339e6:	19c0      	adds	r0, r0, r7
   339e8:	4480      	add	r8, r0
   339ea:	4641      	mov	r1, r8
   339ec:	9104      	str	r1, [sp, #16]
   339ee:	4659      	mov	r1, fp
   339f0:	0c0f      	lsrs	r7, r1, #16
   339f2:	0409      	lsls	r1, r1, #16
   339f4:	0c09      	lsrs	r1, r1, #16
   339f6:	4688      	mov	r8, r1
   339f8:	4359      	muls	r1, r3
   339fa:	468a      	mov	sl, r1
   339fc:	0039      	movs	r1, r7
   339fe:	4351      	muls	r1, r2
   33a00:	4689      	mov	r9, r1
   33a02:	4641      	mov	r1, r8
   33a04:	434a      	muls	r2, r1
   33a06:	4651      	mov	r1, sl
   33a08:	0c09      	lsrs	r1, r1, #16
   33a0a:	468b      	mov	fp, r1
   33a0c:	437b      	muls	r3, r7
   33a0e:	18d2      	adds	r2, r2, r3
   33a10:	445a      	add	r2, fp
   33a12:	4293      	cmp	r3, r2
   33a14:	d903      	bls.n	33a1e <__aeabi_dmul+0x2c6>
   33a16:	2380      	movs	r3, #128	; 0x80
   33a18:	025b      	lsls	r3, r3, #9
   33a1a:	469b      	mov	fp, r3
   33a1c:	44d9      	add	r9, fp
   33a1e:	4651      	mov	r1, sl
   33a20:	0409      	lsls	r1, r1, #16
   33a22:	0c09      	lsrs	r1, r1, #16
   33a24:	468a      	mov	sl, r1
   33a26:	4641      	mov	r1, r8
   33a28:	4361      	muls	r1, r4
   33a2a:	437c      	muls	r4, r7
   33a2c:	0c13      	lsrs	r3, r2, #16
   33a2e:	0412      	lsls	r2, r2, #16
   33a30:	444b      	add	r3, r9
   33a32:	4452      	add	r2, sl
   33a34:	46a1      	mov	r9, r4
   33a36:	468a      	mov	sl, r1
   33a38:	003c      	movs	r4, r7
   33a3a:	4641      	mov	r1, r8
   33a3c:	436c      	muls	r4, r5
   33a3e:	434d      	muls	r5, r1
   33a40:	4651      	mov	r1, sl
   33a42:	444d      	add	r5, r9
   33a44:	0c0f      	lsrs	r7, r1, #16
   33a46:	197d      	adds	r5, r7, r5
   33a48:	45a9      	cmp	r9, r5
   33a4a:	d903      	bls.n	33a54 <__aeabi_dmul+0x2fc>
   33a4c:	2180      	movs	r1, #128	; 0x80
   33a4e:	0249      	lsls	r1, r1, #9
   33a50:	4688      	mov	r8, r1
   33a52:	4444      	add	r4, r8
   33a54:	9f04      	ldr	r7, [sp, #16]
   33a56:	9903      	ldr	r1, [sp, #12]
   33a58:	46b8      	mov	r8, r7
   33a5a:	4441      	add	r1, r8
   33a5c:	468b      	mov	fp, r1
   33a5e:	4583      	cmp	fp, r0
   33a60:	4180      	sbcs	r0, r0
   33a62:	4241      	negs	r1, r0
   33a64:	4688      	mov	r8, r1
   33a66:	4651      	mov	r1, sl
   33a68:	0408      	lsls	r0, r1, #16
   33a6a:	042f      	lsls	r7, r5, #16
   33a6c:	0c00      	lsrs	r0, r0, #16
   33a6e:	183f      	adds	r7, r7, r0
   33a70:	4658      	mov	r0, fp
   33a72:	9902      	ldr	r1, [sp, #8]
   33a74:	1810      	adds	r0, r2, r0
   33a76:	4689      	mov	r9, r1
   33a78:	4290      	cmp	r0, r2
   33a7a:	4192      	sbcs	r2, r2
   33a7c:	444f      	add	r7, r9
   33a7e:	46ba      	mov	sl, r7
   33a80:	4252      	negs	r2, r2
   33a82:	4699      	mov	r9, r3
   33a84:	4693      	mov	fp, r2
   33a86:	44c2      	add	sl, r8
   33a88:	44d1      	add	r9, sl
   33a8a:	44cb      	add	fp, r9
   33a8c:	428f      	cmp	r7, r1
   33a8e:	41bf      	sbcs	r7, r7
   33a90:	45c2      	cmp	sl, r8
   33a92:	4189      	sbcs	r1, r1
   33a94:	4599      	cmp	r9, r3
   33a96:	419b      	sbcs	r3, r3
   33a98:	4593      	cmp	fp, r2
   33a9a:	4192      	sbcs	r2, r2
   33a9c:	427f      	negs	r7, r7
   33a9e:	4249      	negs	r1, r1
   33aa0:	0c2d      	lsrs	r5, r5, #16
   33aa2:	4252      	negs	r2, r2
   33aa4:	430f      	orrs	r7, r1
   33aa6:	425b      	negs	r3, r3
   33aa8:	4313      	orrs	r3, r2
   33aaa:	197f      	adds	r7, r7, r5
   33aac:	18ff      	adds	r7, r7, r3
   33aae:	465b      	mov	r3, fp
   33ab0:	193c      	adds	r4, r7, r4
   33ab2:	0ddb      	lsrs	r3, r3, #23
   33ab4:	9a05      	ldr	r2, [sp, #20]
   33ab6:	0264      	lsls	r4, r4, #9
   33ab8:	431c      	orrs	r4, r3
   33aba:	0243      	lsls	r3, r0, #9
   33abc:	4313      	orrs	r3, r2
   33abe:	1e5d      	subs	r5, r3, #1
   33ac0:	41ab      	sbcs	r3, r5
   33ac2:	465a      	mov	r2, fp
   33ac4:	0dc0      	lsrs	r0, r0, #23
   33ac6:	4303      	orrs	r3, r0
   33ac8:	0252      	lsls	r2, r2, #9
   33aca:	4313      	orrs	r3, r2
   33acc:	01e2      	lsls	r2, r4, #7
   33ace:	d556      	bpl.n	33b7e <__aeabi_dmul+0x426>
   33ad0:	2001      	movs	r0, #1
   33ad2:	085a      	lsrs	r2, r3, #1
   33ad4:	4003      	ands	r3, r0
   33ad6:	4313      	orrs	r3, r2
   33ad8:	07e2      	lsls	r2, r4, #31
   33ada:	4313      	orrs	r3, r2
   33adc:	0864      	lsrs	r4, r4, #1
   33ade:	485a      	ldr	r0, [pc, #360]	; (33c48 <__aeabi_dmul+0x4f0>)
   33ae0:	4460      	add	r0, ip
   33ae2:	2800      	cmp	r0, #0
   33ae4:	dd4d      	ble.n	33b82 <__aeabi_dmul+0x42a>
   33ae6:	075a      	lsls	r2, r3, #29
   33ae8:	d009      	beq.n	33afe <__aeabi_dmul+0x3a6>
   33aea:	220f      	movs	r2, #15
   33aec:	401a      	ands	r2, r3
   33aee:	2a04      	cmp	r2, #4
   33af0:	d005      	beq.n	33afe <__aeabi_dmul+0x3a6>
   33af2:	1d1a      	adds	r2, r3, #4
   33af4:	429a      	cmp	r2, r3
   33af6:	419b      	sbcs	r3, r3
   33af8:	425b      	negs	r3, r3
   33afa:	18e4      	adds	r4, r4, r3
   33afc:	0013      	movs	r3, r2
   33afe:	01e2      	lsls	r2, r4, #7
   33b00:	d504      	bpl.n	33b0c <__aeabi_dmul+0x3b4>
   33b02:	2080      	movs	r0, #128	; 0x80
   33b04:	4a51      	ldr	r2, [pc, #324]	; (33c4c <__aeabi_dmul+0x4f4>)
   33b06:	00c0      	lsls	r0, r0, #3
   33b08:	4014      	ands	r4, r2
   33b0a:	4460      	add	r0, ip
   33b0c:	4a50      	ldr	r2, [pc, #320]	; (33c50 <__aeabi_dmul+0x4f8>)
   33b0e:	4290      	cmp	r0, r2
   33b10:	dd00      	ble.n	33b14 <__aeabi_dmul+0x3bc>
   33b12:	e6e3      	b.n	338dc <__aeabi_dmul+0x184>
   33b14:	2501      	movs	r5, #1
   33b16:	08db      	lsrs	r3, r3, #3
   33b18:	0762      	lsls	r2, r4, #29
   33b1a:	431a      	orrs	r2, r3
   33b1c:	0264      	lsls	r4, r4, #9
   33b1e:	9b01      	ldr	r3, [sp, #4]
   33b20:	4691      	mov	r9, r2
   33b22:	0b22      	lsrs	r2, r4, #12
   33b24:	0544      	lsls	r4, r0, #21
   33b26:	0d64      	lsrs	r4, r4, #21
   33b28:	401d      	ands	r5, r3
   33b2a:	e67c      	b.n	33826 <__aeabi_dmul+0xce>
   33b2c:	2280      	movs	r2, #128	; 0x80
   33b2e:	4659      	mov	r1, fp
   33b30:	0312      	lsls	r2, r2, #12
   33b32:	4211      	tst	r1, r2
   33b34:	d008      	beq.n	33b48 <__aeabi_dmul+0x3f0>
   33b36:	4214      	tst	r4, r2
   33b38:	d106      	bne.n	33b48 <__aeabi_dmul+0x3f0>
   33b3a:	4322      	orrs	r2, r4
   33b3c:	0312      	lsls	r2, r2, #12
   33b3e:	0b12      	lsrs	r2, r2, #12
   33b40:	4645      	mov	r5, r8
   33b42:	4699      	mov	r9, r3
   33b44:	4c43      	ldr	r4, [pc, #268]	; (33c54 <__aeabi_dmul+0x4fc>)
   33b46:	e66e      	b.n	33826 <__aeabi_dmul+0xce>
   33b48:	465b      	mov	r3, fp
   33b4a:	431a      	orrs	r2, r3
   33b4c:	0312      	lsls	r2, r2, #12
   33b4e:	0b12      	lsrs	r2, r2, #12
   33b50:	4c40      	ldr	r4, [pc, #256]	; (33c54 <__aeabi_dmul+0x4fc>)
   33b52:	e668      	b.n	33826 <__aeabi_dmul+0xce>
   33b54:	0003      	movs	r3, r0
   33b56:	4654      	mov	r4, sl
   33b58:	3b28      	subs	r3, #40	; 0x28
   33b5a:	409c      	lsls	r4, r3
   33b5c:	2300      	movs	r3, #0
   33b5e:	e6b9      	b.n	338d4 <__aeabi_dmul+0x17c>
   33b60:	f000 fc36 	bl	343d0 <__clzsi2>
   33b64:	3020      	adds	r0, #32
   33b66:	e6a6      	b.n	338b6 <__aeabi_dmul+0x15e>
   33b68:	0003      	movs	r3, r0
   33b6a:	3b28      	subs	r3, #40	; 0x28
   33b6c:	409f      	lsls	r7, r3
   33b6e:	2300      	movs	r3, #0
   33b70:	46bb      	mov	fp, r7
   33b72:	4699      	mov	r9, r3
   33b74:	e68a      	b.n	3388c <__aeabi_dmul+0x134>
   33b76:	f000 fc2b 	bl	343d0 <__clzsi2>
   33b7a:	3020      	adds	r0, #32
   33b7c:	e674      	b.n	33868 <__aeabi_dmul+0x110>
   33b7e:	46b4      	mov	ip, r6
   33b80:	e7ad      	b.n	33ade <__aeabi_dmul+0x386>
   33b82:	2501      	movs	r5, #1
   33b84:	1a2a      	subs	r2, r5, r0
   33b86:	2a38      	cmp	r2, #56	; 0x38
   33b88:	dd06      	ble.n	33b98 <__aeabi_dmul+0x440>
   33b8a:	9b01      	ldr	r3, [sp, #4]
   33b8c:	2400      	movs	r4, #0
   33b8e:	401d      	ands	r5, r3
   33b90:	2300      	movs	r3, #0
   33b92:	2200      	movs	r2, #0
   33b94:	4699      	mov	r9, r3
   33b96:	e646      	b.n	33826 <__aeabi_dmul+0xce>
   33b98:	2a1f      	cmp	r2, #31
   33b9a:	dc21      	bgt.n	33be0 <__aeabi_dmul+0x488>
   33b9c:	2520      	movs	r5, #32
   33b9e:	0020      	movs	r0, r4
   33ba0:	1aad      	subs	r5, r5, r2
   33ba2:	001e      	movs	r6, r3
   33ba4:	40ab      	lsls	r3, r5
   33ba6:	40a8      	lsls	r0, r5
   33ba8:	40d6      	lsrs	r6, r2
   33baa:	1e5d      	subs	r5, r3, #1
   33bac:	41ab      	sbcs	r3, r5
   33bae:	4330      	orrs	r0, r6
   33bb0:	4318      	orrs	r0, r3
   33bb2:	40d4      	lsrs	r4, r2
   33bb4:	0743      	lsls	r3, r0, #29
   33bb6:	d009      	beq.n	33bcc <__aeabi_dmul+0x474>
   33bb8:	230f      	movs	r3, #15
   33bba:	4003      	ands	r3, r0
   33bbc:	2b04      	cmp	r3, #4
   33bbe:	d005      	beq.n	33bcc <__aeabi_dmul+0x474>
   33bc0:	0003      	movs	r3, r0
   33bc2:	1d18      	adds	r0, r3, #4
   33bc4:	4298      	cmp	r0, r3
   33bc6:	419b      	sbcs	r3, r3
   33bc8:	425b      	negs	r3, r3
   33bca:	18e4      	adds	r4, r4, r3
   33bcc:	0223      	lsls	r3, r4, #8
   33bce:	d521      	bpl.n	33c14 <__aeabi_dmul+0x4bc>
   33bd0:	2501      	movs	r5, #1
   33bd2:	9b01      	ldr	r3, [sp, #4]
   33bd4:	2401      	movs	r4, #1
   33bd6:	401d      	ands	r5, r3
   33bd8:	2300      	movs	r3, #0
   33bda:	2200      	movs	r2, #0
   33bdc:	4699      	mov	r9, r3
   33bde:	e622      	b.n	33826 <__aeabi_dmul+0xce>
   33be0:	251f      	movs	r5, #31
   33be2:	0021      	movs	r1, r4
   33be4:	426d      	negs	r5, r5
   33be6:	1a28      	subs	r0, r5, r0
   33be8:	40c1      	lsrs	r1, r0
   33bea:	0008      	movs	r0, r1
   33bec:	2a20      	cmp	r2, #32
   33bee:	d01d      	beq.n	33c2c <__aeabi_dmul+0x4d4>
   33bf0:	355f      	adds	r5, #95	; 0x5f
   33bf2:	1aaa      	subs	r2, r5, r2
   33bf4:	4094      	lsls	r4, r2
   33bf6:	4323      	orrs	r3, r4
   33bf8:	1e5c      	subs	r4, r3, #1
   33bfa:	41a3      	sbcs	r3, r4
   33bfc:	2507      	movs	r5, #7
   33bfe:	4303      	orrs	r3, r0
   33c00:	401d      	ands	r5, r3
   33c02:	2200      	movs	r2, #0
   33c04:	2d00      	cmp	r5, #0
   33c06:	d009      	beq.n	33c1c <__aeabi_dmul+0x4c4>
   33c08:	220f      	movs	r2, #15
   33c0a:	2400      	movs	r4, #0
   33c0c:	401a      	ands	r2, r3
   33c0e:	0018      	movs	r0, r3
   33c10:	2a04      	cmp	r2, #4
   33c12:	d1d6      	bne.n	33bc2 <__aeabi_dmul+0x46a>
   33c14:	0003      	movs	r3, r0
   33c16:	0765      	lsls	r5, r4, #29
   33c18:	0264      	lsls	r4, r4, #9
   33c1a:	0b22      	lsrs	r2, r4, #12
   33c1c:	08db      	lsrs	r3, r3, #3
   33c1e:	432b      	orrs	r3, r5
   33c20:	2501      	movs	r5, #1
   33c22:	4699      	mov	r9, r3
   33c24:	9b01      	ldr	r3, [sp, #4]
   33c26:	2400      	movs	r4, #0
   33c28:	401d      	ands	r5, r3
   33c2a:	e5fc      	b.n	33826 <__aeabi_dmul+0xce>
   33c2c:	2400      	movs	r4, #0
   33c2e:	e7e2      	b.n	33bf6 <__aeabi_dmul+0x49e>
   33c30:	2280      	movs	r2, #128	; 0x80
   33c32:	2501      	movs	r5, #1
   33c34:	0312      	lsls	r2, r2, #12
   33c36:	4322      	orrs	r2, r4
   33c38:	9901      	ldr	r1, [sp, #4]
   33c3a:	0312      	lsls	r2, r2, #12
   33c3c:	0b12      	lsrs	r2, r2, #12
   33c3e:	400d      	ands	r5, r1
   33c40:	4699      	mov	r9, r3
   33c42:	4c04      	ldr	r4, [pc, #16]	; (33c54 <__aeabi_dmul+0x4fc>)
   33c44:	e5ef      	b.n	33826 <__aeabi_dmul+0xce>
   33c46:	46c0      	nop			; (mov r8, r8)
   33c48:	000003ff 	.word	0x000003ff
   33c4c:	feffffff 	.word	0xfeffffff
   33c50:	000007fe 	.word	0x000007fe
   33c54:	000007ff 	.word	0x000007ff

00033c58 <__aeabi_dsub>:
   33c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   33c5a:	4646      	mov	r6, r8
   33c5c:	46d6      	mov	lr, sl
   33c5e:	464f      	mov	r7, r9
   33c60:	030c      	lsls	r4, r1, #12
   33c62:	b5c0      	push	{r6, r7, lr}
   33c64:	0fcd      	lsrs	r5, r1, #31
   33c66:	004e      	lsls	r6, r1, #1
   33c68:	0a61      	lsrs	r1, r4, #9
   33c6a:	0f44      	lsrs	r4, r0, #29
   33c6c:	430c      	orrs	r4, r1
   33c6e:	00c1      	lsls	r1, r0, #3
   33c70:	0058      	lsls	r0, r3, #1
   33c72:	0d40      	lsrs	r0, r0, #21
   33c74:	4684      	mov	ip, r0
   33c76:	468a      	mov	sl, r1
   33c78:	000f      	movs	r7, r1
   33c7a:	0319      	lsls	r1, r3, #12
   33c7c:	0f50      	lsrs	r0, r2, #29
   33c7e:	0a49      	lsrs	r1, r1, #9
   33c80:	4301      	orrs	r1, r0
   33c82:	48c6      	ldr	r0, [pc, #792]	; (33f9c <__aeabi_dsub+0x344>)
   33c84:	0d76      	lsrs	r6, r6, #21
   33c86:	46a8      	mov	r8, r5
   33c88:	0fdb      	lsrs	r3, r3, #31
   33c8a:	00d2      	lsls	r2, r2, #3
   33c8c:	4584      	cmp	ip, r0
   33c8e:	d100      	bne.n	33c92 <__aeabi_dsub+0x3a>
   33c90:	e0d8      	b.n	33e44 <__aeabi_dsub+0x1ec>
   33c92:	2001      	movs	r0, #1
   33c94:	4043      	eors	r3, r0
   33c96:	42ab      	cmp	r3, r5
   33c98:	d100      	bne.n	33c9c <__aeabi_dsub+0x44>
   33c9a:	e0a6      	b.n	33dea <__aeabi_dsub+0x192>
   33c9c:	4660      	mov	r0, ip
   33c9e:	1a35      	subs	r5, r6, r0
   33ca0:	2d00      	cmp	r5, #0
   33ca2:	dc00      	bgt.n	33ca6 <__aeabi_dsub+0x4e>
   33ca4:	e105      	b.n	33eb2 <__aeabi_dsub+0x25a>
   33ca6:	2800      	cmp	r0, #0
   33ca8:	d110      	bne.n	33ccc <__aeabi_dsub+0x74>
   33caa:	000b      	movs	r3, r1
   33cac:	4313      	orrs	r3, r2
   33cae:	d100      	bne.n	33cb2 <__aeabi_dsub+0x5a>
   33cb0:	e0d7      	b.n	33e62 <__aeabi_dsub+0x20a>
   33cb2:	1e6b      	subs	r3, r5, #1
   33cb4:	2b00      	cmp	r3, #0
   33cb6:	d000      	beq.n	33cba <__aeabi_dsub+0x62>
   33cb8:	e14b      	b.n	33f52 <__aeabi_dsub+0x2fa>
   33cba:	4653      	mov	r3, sl
   33cbc:	1a9f      	subs	r7, r3, r2
   33cbe:	45ba      	cmp	sl, r7
   33cc0:	4180      	sbcs	r0, r0
   33cc2:	1a64      	subs	r4, r4, r1
   33cc4:	4240      	negs	r0, r0
   33cc6:	1a24      	subs	r4, r4, r0
   33cc8:	2601      	movs	r6, #1
   33cca:	e01e      	b.n	33d0a <__aeabi_dsub+0xb2>
   33ccc:	4bb3      	ldr	r3, [pc, #716]	; (33f9c <__aeabi_dsub+0x344>)
   33cce:	429e      	cmp	r6, r3
   33cd0:	d048      	beq.n	33d64 <__aeabi_dsub+0x10c>
   33cd2:	2380      	movs	r3, #128	; 0x80
   33cd4:	041b      	lsls	r3, r3, #16
   33cd6:	4319      	orrs	r1, r3
   33cd8:	2d38      	cmp	r5, #56	; 0x38
   33cda:	dd00      	ble.n	33cde <__aeabi_dsub+0x86>
   33cdc:	e119      	b.n	33f12 <__aeabi_dsub+0x2ba>
   33cde:	2d1f      	cmp	r5, #31
   33ce0:	dd00      	ble.n	33ce4 <__aeabi_dsub+0x8c>
   33ce2:	e14c      	b.n	33f7e <__aeabi_dsub+0x326>
   33ce4:	2320      	movs	r3, #32
   33ce6:	000f      	movs	r7, r1
   33ce8:	1b5b      	subs	r3, r3, r5
   33cea:	0010      	movs	r0, r2
   33cec:	409a      	lsls	r2, r3
   33cee:	409f      	lsls	r7, r3
   33cf0:	40e8      	lsrs	r0, r5
   33cf2:	1e53      	subs	r3, r2, #1
   33cf4:	419a      	sbcs	r2, r3
   33cf6:	40e9      	lsrs	r1, r5
   33cf8:	4307      	orrs	r7, r0
   33cfa:	4317      	orrs	r7, r2
   33cfc:	4653      	mov	r3, sl
   33cfe:	1bdf      	subs	r7, r3, r7
   33d00:	1a61      	subs	r1, r4, r1
   33d02:	45ba      	cmp	sl, r7
   33d04:	41a4      	sbcs	r4, r4
   33d06:	4264      	negs	r4, r4
   33d08:	1b0c      	subs	r4, r1, r4
   33d0a:	0223      	lsls	r3, r4, #8
   33d0c:	d400      	bmi.n	33d10 <__aeabi_dsub+0xb8>
   33d0e:	e0c5      	b.n	33e9c <__aeabi_dsub+0x244>
   33d10:	0264      	lsls	r4, r4, #9
   33d12:	0a65      	lsrs	r5, r4, #9
   33d14:	2d00      	cmp	r5, #0
   33d16:	d100      	bne.n	33d1a <__aeabi_dsub+0xc2>
   33d18:	e0f6      	b.n	33f08 <__aeabi_dsub+0x2b0>
   33d1a:	0028      	movs	r0, r5
   33d1c:	f000 fb58 	bl	343d0 <__clzsi2>
   33d20:	0003      	movs	r3, r0
   33d22:	3b08      	subs	r3, #8
   33d24:	2b1f      	cmp	r3, #31
   33d26:	dd00      	ble.n	33d2a <__aeabi_dsub+0xd2>
   33d28:	e0e9      	b.n	33efe <__aeabi_dsub+0x2a6>
   33d2a:	2220      	movs	r2, #32
   33d2c:	003c      	movs	r4, r7
   33d2e:	1ad2      	subs	r2, r2, r3
   33d30:	409d      	lsls	r5, r3
   33d32:	40d4      	lsrs	r4, r2
   33d34:	409f      	lsls	r7, r3
   33d36:	4325      	orrs	r5, r4
   33d38:	429e      	cmp	r6, r3
   33d3a:	dd00      	ble.n	33d3e <__aeabi_dsub+0xe6>
   33d3c:	e0db      	b.n	33ef6 <__aeabi_dsub+0x29e>
   33d3e:	1b9e      	subs	r6, r3, r6
   33d40:	1c73      	adds	r3, r6, #1
   33d42:	2b1f      	cmp	r3, #31
   33d44:	dd00      	ble.n	33d48 <__aeabi_dsub+0xf0>
   33d46:	e10a      	b.n	33f5e <__aeabi_dsub+0x306>
   33d48:	2220      	movs	r2, #32
   33d4a:	0038      	movs	r0, r7
   33d4c:	1ad2      	subs	r2, r2, r3
   33d4e:	0029      	movs	r1, r5
   33d50:	4097      	lsls	r7, r2
   33d52:	002c      	movs	r4, r5
   33d54:	4091      	lsls	r1, r2
   33d56:	40d8      	lsrs	r0, r3
   33d58:	1e7a      	subs	r2, r7, #1
   33d5a:	4197      	sbcs	r7, r2
   33d5c:	40dc      	lsrs	r4, r3
   33d5e:	2600      	movs	r6, #0
   33d60:	4301      	orrs	r1, r0
   33d62:	430f      	orrs	r7, r1
   33d64:	077b      	lsls	r3, r7, #29
   33d66:	d009      	beq.n	33d7c <__aeabi_dsub+0x124>
   33d68:	230f      	movs	r3, #15
   33d6a:	403b      	ands	r3, r7
   33d6c:	2b04      	cmp	r3, #4
   33d6e:	d005      	beq.n	33d7c <__aeabi_dsub+0x124>
   33d70:	1d3b      	adds	r3, r7, #4
   33d72:	42bb      	cmp	r3, r7
   33d74:	41bf      	sbcs	r7, r7
   33d76:	427f      	negs	r7, r7
   33d78:	19e4      	adds	r4, r4, r7
   33d7a:	001f      	movs	r7, r3
   33d7c:	0223      	lsls	r3, r4, #8
   33d7e:	d525      	bpl.n	33dcc <__aeabi_dsub+0x174>
   33d80:	4b86      	ldr	r3, [pc, #536]	; (33f9c <__aeabi_dsub+0x344>)
   33d82:	3601      	adds	r6, #1
   33d84:	429e      	cmp	r6, r3
   33d86:	d100      	bne.n	33d8a <__aeabi_dsub+0x132>
   33d88:	e0af      	b.n	33eea <__aeabi_dsub+0x292>
   33d8a:	4b85      	ldr	r3, [pc, #532]	; (33fa0 <__aeabi_dsub+0x348>)
   33d8c:	2501      	movs	r5, #1
   33d8e:	401c      	ands	r4, r3
   33d90:	4643      	mov	r3, r8
   33d92:	0762      	lsls	r2, r4, #29
   33d94:	08ff      	lsrs	r7, r7, #3
   33d96:	0264      	lsls	r4, r4, #9
   33d98:	0576      	lsls	r6, r6, #21
   33d9a:	4317      	orrs	r7, r2
   33d9c:	0b24      	lsrs	r4, r4, #12
   33d9e:	0d76      	lsrs	r6, r6, #21
   33da0:	401d      	ands	r5, r3
   33da2:	2100      	movs	r1, #0
   33da4:	0324      	lsls	r4, r4, #12
   33da6:	0b23      	lsrs	r3, r4, #12
   33da8:	0d0c      	lsrs	r4, r1, #20
   33daa:	4a7e      	ldr	r2, [pc, #504]	; (33fa4 <__aeabi_dsub+0x34c>)
   33dac:	0524      	lsls	r4, r4, #20
   33dae:	431c      	orrs	r4, r3
   33db0:	4014      	ands	r4, r2
   33db2:	0533      	lsls	r3, r6, #20
   33db4:	4323      	orrs	r3, r4
   33db6:	005b      	lsls	r3, r3, #1
   33db8:	07ed      	lsls	r5, r5, #31
   33dba:	085b      	lsrs	r3, r3, #1
   33dbc:	432b      	orrs	r3, r5
   33dbe:	0038      	movs	r0, r7
   33dc0:	0019      	movs	r1, r3
   33dc2:	bc1c      	pop	{r2, r3, r4}
   33dc4:	4690      	mov	r8, r2
   33dc6:	4699      	mov	r9, r3
   33dc8:	46a2      	mov	sl, r4
   33dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33dcc:	2501      	movs	r5, #1
   33dce:	4643      	mov	r3, r8
   33dd0:	0762      	lsls	r2, r4, #29
   33dd2:	08ff      	lsrs	r7, r7, #3
   33dd4:	4317      	orrs	r7, r2
   33dd6:	08e4      	lsrs	r4, r4, #3
   33dd8:	401d      	ands	r5, r3
   33dda:	4b70      	ldr	r3, [pc, #448]	; (33f9c <__aeabi_dsub+0x344>)
   33ddc:	429e      	cmp	r6, r3
   33dde:	d036      	beq.n	33e4e <__aeabi_dsub+0x1f6>
   33de0:	0324      	lsls	r4, r4, #12
   33de2:	0576      	lsls	r6, r6, #21
   33de4:	0b24      	lsrs	r4, r4, #12
   33de6:	0d76      	lsrs	r6, r6, #21
   33de8:	e7db      	b.n	33da2 <__aeabi_dsub+0x14a>
   33dea:	4663      	mov	r3, ip
   33dec:	1af3      	subs	r3, r6, r3
   33dee:	2b00      	cmp	r3, #0
   33df0:	dc00      	bgt.n	33df4 <__aeabi_dsub+0x19c>
   33df2:	e094      	b.n	33f1e <__aeabi_dsub+0x2c6>
   33df4:	4660      	mov	r0, ip
   33df6:	2800      	cmp	r0, #0
   33df8:	d035      	beq.n	33e66 <__aeabi_dsub+0x20e>
   33dfa:	4868      	ldr	r0, [pc, #416]	; (33f9c <__aeabi_dsub+0x344>)
   33dfc:	4286      	cmp	r6, r0
   33dfe:	d0b1      	beq.n	33d64 <__aeabi_dsub+0x10c>
   33e00:	2780      	movs	r7, #128	; 0x80
   33e02:	043f      	lsls	r7, r7, #16
   33e04:	4339      	orrs	r1, r7
   33e06:	2b38      	cmp	r3, #56	; 0x38
   33e08:	dc00      	bgt.n	33e0c <__aeabi_dsub+0x1b4>
   33e0a:	e0fd      	b.n	34008 <__aeabi_dsub+0x3b0>
   33e0c:	430a      	orrs	r2, r1
   33e0e:	0017      	movs	r7, r2
   33e10:	2100      	movs	r1, #0
   33e12:	1e7a      	subs	r2, r7, #1
   33e14:	4197      	sbcs	r7, r2
   33e16:	4457      	add	r7, sl
   33e18:	4557      	cmp	r7, sl
   33e1a:	4180      	sbcs	r0, r0
   33e1c:	1909      	adds	r1, r1, r4
   33e1e:	4244      	negs	r4, r0
   33e20:	190c      	adds	r4, r1, r4
   33e22:	0223      	lsls	r3, r4, #8
   33e24:	d53a      	bpl.n	33e9c <__aeabi_dsub+0x244>
   33e26:	4b5d      	ldr	r3, [pc, #372]	; (33f9c <__aeabi_dsub+0x344>)
   33e28:	3601      	adds	r6, #1
   33e2a:	429e      	cmp	r6, r3
   33e2c:	d100      	bne.n	33e30 <__aeabi_dsub+0x1d8>
   33e2e:	e14b      	b.n	340c8 <__aeabi_dsub+0x470>
   33e30:	2201      	movs	r2, #1
   33e32:	4b5b      	ldr	r3, [pc, #364]	; (33fa0 <__aeabi_dsub+0x348>)
   33e34:	401c      	ands	r4, r3
   33e36:	087b      	lsrs	r3, r7, #1
   33e38:	4017      	ands	r7, r2
   33e3a:	431f      	orrs	r7, r3
   33e3c:	07e2      	lsls	r2, r4, #31
   33e3e:	4317      	orrs	r7, r2
   33e40:	0864      	lsrs	r4, r4, #1
   33e42:	e78f      	b.n	33d64 <__aeabi_dsub+0x10c>
   33e44:	0008      	movs	r0, r1
   33e46:	4310      	orrs	r0, r2
   33e48:	d000      	beq.n	33e4c <__aeabi_dsub+0x1f4>
   33e4a:	e724      	b.n	33c96 <__aeabi_dsub+0x3e>
   33e4c:	e721      	b.n	33c92 <__aeabi_dsub+0x3a>
   33e4e:	0023      	movs	r3, r4
   33e50:	433b      	orrs	r3, r7
   33e52:	d100      	bne.n	33e56 <__aeabi_dsub+0x1fe>
   33e54:	e1b9      	b.n	341ca <__aeabi_dsub+0x572>
   33e56:	2280      	movs	r2, #128	; 0x80
   33e58:	0312      	lsls	r2, r2, #12
   33e5a:	4314      	orrs	r4, r2
   33e5c:	0324      	lsls	r4, r4, #12
   33e5e:	0b24      	lsrs	r4, r4, #12
   33e60:	e79f      	b.n	33da2 <__aeabi_dsub+0x14a>
   33e62:	002e      	movs	r6, r5
   33e64:	e77e      	b.n	33d64 <__aeabi_dsub+0x10c>
   33e66:	0008      	movs	r0, r1
   33e68:	4310      	orrs	r0, r2
   33e6a:	d100      	bne.n	33e6e <__aeabi_dsub+0x216>
   33e6c:	e0ca      	b.n	34004 <__aeabi_dsub+0x3ac>
   33e6e:	1e58      	subs	r0, r3, #1
   33e70:	4684      	mov	ip, r0
   33e72:	2800      	cmp	r0, #0
   33e74:	d000      	beq.n	33e78 <__aeabi_dsub+0x220>
   33e76:	e0e7      	b.n	34048 <__aeabi_dsub+0x3f0>
   33e78:	4452      	add	r2, sl
   33e7a:	4552      	cmp	r2, sl
   33e7c:	4180      	sbcs	r0, r0
   33e7e:	1864      	adds	r4, r4, r1
   33e80:	4240      	negs	r0, r0
   33e82:	1824      	adds	r4, r4, r0
   33e84:	0017      	movs	r7, r2
   33e86:	2601      	movs	r6, #1
   33e88:	0223      	lsls	r3, r4, #8
   33e8a:	d507      	bpl.n	33e9c <__aeabi_dsub+0x244>
   33e8c:	2602      	movs	r6, #2
   33e8e:	e7cf      	b.n	33e30 <__aeabi_dsub+0x1d8>
   33e90:	4664      	mov	r4, ip
   33e92:	432c      	orrs	r4, r5
   33e94:	d100      	bne.n	33e98 <__aeabi_dsub+0x240>
   33e96:	e1b3      	b.n	34200 <__aeabi_dsub+0x5a8>
   33e98:	002c      	movs	r4, r5
   33e9a:	4667      	mov	r7, ip
   33e9c:	077b      	lsls	r3, r7, #29
   33e9e:	d000      	beq.n	33ea2 <__aeabi_dsub+0x24a>
   33ea0:	e762      	b.n	33d68 <__aeabi_dsub+0x110>
   33ea2:	0763      	lsls	r3, r4, #29
   33ea4:	08ff      	lsrs	r7, r7, #3
   33ea6:	431f      	orrs	r7, r3
   33ea8:	2501      	movs	r5, #1
   33eaa:	4643      	mov	r3, r8
   33eac:	08e4      	lsrs	r4, r4, #3
   33eae:	401d      	ands	r5, r3
   33eb0:	e793      	b.n	33dda <__aeabi_dsub+0x182>
   33eb2:	2d00      	cmp	r5, #0
   33eb4:	d178      	bne.n	33fa8 <__aeabi_dsub+0x350>
   33eb6:	1c75      	adds	r5, r6, #1
   33eb8:	056d      	lsls	r5, r5, #21
   33eba:	0d6d      	lsrs	r5, r5, #21
   33ebc:	2d01      	cmp	r5, #1
   33ebe:	dc00      	bgt.n	33ec2 <__aeabi_dsub+0x26a>
   33ec0:	e0f2      	b.n	340a8 <__aeabi_dsub+0x450>
   33ec2:	4650      	mov	r0, sl
   33ec4:	1a80      	subs	r0, r0, r2
   33ec6:	4582      	cmp	sl, r0
   33ec8:	41bf      	sbcs	r7, r7
   33eca:	1a65      	subs	r5, r4, r1
   33ecc:	427f      	negs	r7, r7
   33ece:	1bed      	subs	r5, r5, r7
   33ed0:	4684      	mov	ip, r0
   33ed2:	0228      	lsls	r0, r5, #8
   33ed4:	d400      	bmi.n	33ed8 <__aeabi_dsub+0x280>
   33ed6:	e08c      	b.n	33ff2 <__aeabi_dsub+0x39a>
   33ed8:	4650      	mov	r0, sl
   33eda:	1a17      	subs	r7, r2, r0
   33edc:	42ba      	cmp	r2, r7
   33ede:	4192      	sbcs	r2, r2
   33ee0:	1b0c      	subs	r4, r1, r4
   33ee2:	4255      	negs	r5, r2
   33ee4:	1b65      	subs	r5, r4, r5
   33ee6:	4698      	mov	r8, r3
   33ee8:	e714      	b.n	33d14 <__aeabi_dsub+0xbc>
   33eea:	2501      	movs	r5, #1
   33eec:	4643      	mov	r3, r8
   33eee:	2400      	movs	r4, #0
   33ef0:	401d      	ands	r5, r3
   33ef2:	2700      	movs	r7, #0
   33ef4:	e755      	b.n	33da2 <__aeabi_dsub+0x14a>
   33ef6:	4c2a      	ldr	r4, [pc, #168]	; (33fa0 <__aeabi_dsub+0x348>)
   33ef8:	1af6      	subs	r6, r6, r3
   33efa:	402c      	ands	r4, r5
   33efc:	e732      	b.n	33d64 <__aeabi_dsub+0x10c>
   33efe:	003d      	movs	r5, r7
   33f00:	3828      	subs	r0, #40	; 0x28
   33f02:	4085      	lsls	r5, r0
   33f04:	2700      	movs	r7, #0
   33f06:	e717      	b.n	33d38 <__aeabi_dsub+0xe0>
   33f08:	0038      	movs	r0, r7
   33f0a:	f000 fa61 	bl	343d0 <__clzsi2>
   33f0e:	3020      	adds	r0, #32
   33f10:	e706      	b.n	33d20 <__aeabi_dsub+0xc8>
   33f12:	430a      	orrs	r2, r1
   33f14:	0017      	movs	r7, r2
   33f16:	2100      	movs	r1, #0
   33f18:	1e7a      	subs	r2, r7, #1
   33f1a:	4197      	sbcs	r7, r2
   33f1c:	e6ee      	b.n	33cfc <__aeabi_dsub+0xa4>
   33f1e:	2b00      	cmp	r3, #0
   33f20:	d000      	beq.n	33f24 <__aeabi_dsub+0x2cc>
   33f22:	e0e5      	b.n	340f0 <__aeabi_dsub+0x498>
   33f24:	1c73      	adds	r3, r6, #1
   33f26:	469c      	mov	ip, r3
   33f28:	055b      	lsls	r3, r3, #21
   33f2a:	0d5b      	lsrs	r3, r3, #21
   33f2c:	2b01      	cmp	r3, #1
   33f2e:	dc00      	bgt.n	33f32 <__aeabi_dsub+0x2da>
   33f30:	e09f      	b.n	34072 <__aeabi_dsub+0x41a>
   33f32:	4b1a      	ldr	r3, [pc, #104]	; (33f9c <__aeabi_dsub+0x344>)
   33f34:	459c      	cmp	ip, r3
   33f36:	d100      	bne.n	33f3a <__aeabi_dsub+0x2e2>
   33f38:	e0c5      	b.n	340c6 <__aeabi_dsub+0x46e>
   33f3a:	4452      	add	r2, sl
   33f3c:	4552      	cmp	r2, sl
   33f3e:	4180      	sbcs	r0, r0
   33f40:	1864      	adds	r4, r4, r1
   33f42:	4240      	negs	r0, r0
   33f44:	1824      	adds	r4, r4, r0
   33f46:	07e7      	lsls	r7, r4, #31
   33f48:	0852      	lsrs	r2, r2, #1
   33f4a:	4317      	orrs	r7, r2
   33f4c:	0864      	lsrs	r4, r4, #1
   33f4e:	4666      	mov	r6, ip
   33f50:	e708      	b.n	33d64 <__aeabi_dsub+0x10c>
   33f52:	4812      	ldr	r0, [pc, #72]	; (33f9c <__aeabi_dsub+0x344>)
   33f54:	4285      	cmp	r5, r0
   33f56:	d100      	bne.n	33f5a <__aeabi_dsub+0x302>
   33f58:	e085      	b.n	34066 <__aeabi_dsub+0x40e>
   33f5a:	001d      	movs	r5, r3
   33f5c:	e6bc      	b.n	33cd8 <__aeabi_dsub+0x80>
   33f5e:	0029      	movs	r1, r5
   33f60:	3e1f      	subs	r6, #31
   33f62:	40f1      	lsrs	r1, r6
   33f64:	2b20      	cmp	r3, #32
   33f66:	d100      	bne.n	33f6a <__aeabi_dsub+0x312>
   33f68:	e07f      	b.n	3406a <__aeabi_dsub+0x412>
   33f6a:	2240      	movs	r2, #64	; 0x40
   33f6c:	1ad3      	subs	r3, r2, r3
   33f6e:	409d      	lsls	r5, r3
   33f70:	432f      	orrs	r7, r5
   33f72:	1e7d      	subs	r5, r7, #1
   33f74:	41af      	sbcs	r7, r5
   33f76:	2400      	movs	r4, #0
   33f78:	430f      	orrs	r7, r1
   33f7a:	2600      	movs	r6, #0
   33f7c:	e78e      	b.n	33e9c <__aeabi_dsub+0x244>
   33f7e:	002b      	movs	r3, r5
   33f80:	000f      	movs	r7, r1
   33f82:	3b20      	subs	r3, #32
   33f84:	40df      	lsrs	r7, r3
   33f86:	2d20      	cmp	r5, #32
   33f88:	d071      	beq.n	3406e <__aeabi_dsub+0x416>
   33f8a:	2340      	movs	r3, #64	; 0x40
   33f8c:	1b5d      	subs	r5, r3, r5
   33f8e:	40a9      	lsls	r1, r5
   33f90:	430a      	orrs	r2, r1
   33f92:	1e51      	subs	r1, r2, #1
   33f94:	418a      	sbcs	r2, r1
   33f96:	2100      	movs	r1, #0
   33f98:	4317      	orrs	r7, r2
   33f9a:	e6af      	b.n	33cfc <__aeabi_dsub+0xa4>
   33f9c:	000007ff 	.word	0x000007ff
   33fa0:	ff7fffff 	.word	0xff7fffff
   33fa4:	800fffff 	.word	0x800fffff
   33fa8:	2e00      	cmp	r6, #0
   33faa:	d03e      	beq.n	3402a <__aeabi_dsub+0x3d2>
   33fac:	4eb3      	ldr	r6, [pc, #716]	; (3427c <__aeabi_dsub+0x624>)
   33fae:	45b4      	cmp	ip, r6
   33fb0:	d045      	beq.n	3403e <__aeabi_dsub+0x3e6>
   33fb2:	2680      	movs	r6, #128	; 0x80
   33fb4:	0436      	lsls	r6, r6, #16
   33fb6:	426d      	negs	r5, r5
   33fb8:	4334      	orrs	r4, r6
   33fba:	2d38      	cmp	r5, #56	; 0x38
   33fbc:	dd00      	ble.n	33fc0 <__aeabi_dsub+0x368>
   33fbe:	e0a8      	b.n	34112 <__aeabi_dsub+0x4ba>
   33fc0:	2d1f      	cmp	r5, #31
   33fc2:	dd00      	ble.n	33fc6 <__aeabi_dsub+0x36e>
   33fc4:	e11f      	b.n	34206 <__aeabi_dsub+0x5ae>
   33fc6:	2620      	movs	r6, #32
   33fc8:	0027      	movs	r7, r4
   33fca:	4650      	mov	r0, sl
   33fcc:	1b76      	subs	r6, r6, r5
   33fce:	40b7      	lsls	r7, r6
   33fd0:	40e8      	lsrs	r0, r5
   33fd2:	4307      	orrs	r7, r0
   33fd4:	4650      	mov	r0, sl
   33fd6:	40b0      	lsls	r0, r6
   33fd8:	1e46      	subs	r6, r0, #1
   33fda:	41b0      	sbcs	r0, r6
   33fdc:	40ec      	lsrs	r4, r5
   33fde:	4338      	orrs	r0, r7
   33fe0:	1a17      	subs	r7, r2, r0
   33fe2:	42ba      	cmp	r2, r7
   33fe4:	4192      	sbcs	r2, r2
   33fe6:	1b0c      	subs	r4, r1, r4
   33fe8:	4252      	negs	r2, r2
   33fea:	1aa4      	subs	r4, r4, r2
   33fec:	4666      	mov	r6, ip
   33fee:	4698      	mov	r8, r3
   33ff0:	e68b      	b.n	33d0a <__aeabi_dsub+0xb2>
   33ff2:	4664      	mov	r4, ip
   33ff4:	4667      	mov	r7, ip
   33ff6:	432c      	orrs	r4, r5
   33ff8:	d000      	beq.n	33ffc <__aeabi_dsub+0x3a4>
   33ffa:	e68b      	b.n	33d14 <__aeabi_dsub+0xbc>
   33ffc:	2500      	movs	r5, #0
   33ffe:	2600      	movs	r6, #0
   34000:	2700      	movs	r7, #0
   34002:	e6ea      	b.n	33dda <__aeabi_dsub+0x182>
   34004:	001e      	movs	r6, r3
   34006:	e6ad      	b.n	33d64 <__aeabi_dsub+0x10c>
   34008:	2b1f      	cmp	r3, #31
   3400a:	dc60      	bgt.n	340ce <__aeabi_dsub+0x476>
   3400c:	2720      	movs	r7, #32
   3400e:	1af8      	subs	r0, r7, r3
   34010:	000f      	movs	r7, r1
   34012:	4684      	mov	ip, r0
   34014:	4087      	lsls	r7, r0
   34016:	0010      	movs	r0, r2
   34018:	40d8      	lsrs	r0, r3
   3401a:	4307      	orrs	r7, r0
   3401c:	4660      	mov	r0, ip
   3401e:	4082      	lsls	r2, r0
   34020:	1e50      	subs	r0, r2, #1
   34022:	4182      	sbcs	r2, r0
   34024:	40d9      	lsrs	r1, r3
   34026:	4317      	orrs	r7, r2
   34028:	e6f5      	b.n	33e16 <__aeabi_dsub+0x1be>
   3402a:	0026      	movs	r6, r4
   3402c:	4650      	mov	r0, sl
   3402e:	4306      	orrs	r6, r0
   34030:	d005      	beq.n	3403e <__aeabi_dsub+0x3e6>
   34032:	43ed      	mvns	r5, r5
   34034:	2d00      	cmp	r5, #0
   34036:	d0d3      	beq.n	33fe0 <__aeabi_dsub+0x388>
   34038:	4e90      	ldr	r6, [pc, #576]	; (3427c <__aeabi_dsub+0x624>)
   3403a:	45b4      	cmp	ip, r6
   3403c:	d1bd      	bne.n	33fba <__aeabi_dsub+0x362>
   3403e:	000c      	movs	r4, r1
   34040:	0017      	movs	r7, r2
   34042:	4666      	mov	r6, ip
   34044:	4698      	mov	r8, r3
   34046:	e68d      	b.n	33d64 <__aeabi_dsub+0x10c>
   34048:	488c      	ldr	r0, [pc, #560]	; (3427c <__aeabi_dsub+0x624>)
   3404a:	4283      	cmp	r3, r0
   3404c:	d00b      	beq.n	34066 <__aeabi_dsub+0x40e>
   3404e:	4663      	mov	r3, ip
   34050:	e6d9      	b.n	33e06 <__aeabi_dsub+0x1ae>
   34052:	2d00      	cmp	r5, #0
   34054:	d000      	beq.n	34058 <__aeabi_dsub+0x400>
   34056:	e096      	b.n	34186 <__aeabi_dsub+0x52e>
   34058:	0008      	movs	r0, r1
   3405a:	4310      	orrs	r0, r2
   3405c:	d100      	bne.n	34060 <__aeabi_dsub+0x408>
   3405e:	e0e2      	b.n	34226 <__aeabi_dsub+0x5ce>
   34060:	000c      	movs	r4, r1
   34062:	0017      	movs	r7, r2
   34064:	4698      	mov	r8, r3
   34066:	4e85      	ldr	r6, [pc, #532]	; (3427c <__aeabi_dsub+0x624>)
   34068:	e67c      	b.n	33d64 <__aeabi_dsub+0x10c>
   3406a:	2500      	movs	r5, #0
   3406c:	e780      	b.n	33f70 <__aeabi_dsub+0x318>
   3406e:	2100      	movs	r1, #0
   34070:	e78e      	b.n	33f90 <__aeabi_dsub+0x338>
   34072:	0023      	movs	r3, r4
   34074:	4650      	mov	r0, sl
   34076:	4303      	orrs	r3, r0
   34078:	2e00      	cmp	r6, #0
   3407a:	d000      	beq.n	3407e <__aeabi_dsub+0x426>
   3407c:	e0a8      	b.n	341d0 <__aeabi_dsub+0x578>
   3407e:	2b00      	cmp	r3, #0
   34080:	d100      	bne.n	34084 <__aeabi_dsub+0x42c>
   34082:	e0de      	b.n	34242 <__aeabi_dsub+0x5ea>
   34084:	000b      	movs	r3, r1
   34086:	4313      	orrs	r3, r2
   34088:	d100      	bne.n	3408c <__aeabi_dsub+0x434>
   3408a:	e66b      	b.n	33d64 <__aeabi_dsub+0x10c>
   3408c:	4452      	add	r2, sl
   3408e:	4552      	cmp	r2, sl
   34090:	4180      	sbcs	r0, r0
   34092:	1864      	adds	r4, r4, r1
   34094:	4240      	negs	r0, r0
   34096:	1824      	adds	r4, r4, r0
   34098:	0017      	movs	r7, r2
   3409a:	0223      	lsls	r3, r4, #8
   3409c:	d400      	bmi.n	340a0 <__aeabi_dsub+0x448>
   3409e:	e6fd      	b.n	33e9c <__aeabi_dsub+0x244>
   340a0:	4b77      	ldr	r3, [pc, #476]	; (34280 <__aeabi_dsub+0x628>)
   340a2:	4666      	mov	r6, ip
   340a4:	401c      	ands	r4, r3
   340a6:	e65d      	b.n	33d64 <__aeabi_dsub+0x10c>
   340a8:	0025      	movs	r5, r4
   340aa:	4650      	mov	r0, sl
   340ac:	4305      	orrs	r5, r0
   340ae:	2e00      	cmp	r6, #0
   340b0:	d1cf      	bne.n	34052 <__aeabi_dsub+0x3fa>
   340b2:	2d00      	cmp	r5, #0
   340b4:	d14f      	bne.n	34156 <__aeabi_dsub+0x4fe>
   340b6:	000c      	movs	r4, r1
   340b8:	4314      	orrs	r4, r2
   340ba:	d100      	bne.n	340be <__aeabi_dsub+0x466>
   340bc:	e0a0      	b.n	34200 <__aeabi_dsub+0x5a8>
   340be:	000c      	movs	r4, r1
   340c0:	0017      	movs	r7, r2
   340c2:	4698      	mov	r8, r3
   340c4:	e64e      	b.n	33d64 <__aeabi_dsub+0x10c>
   340c6:	4666      	mov	r6, ip
   340c8:	2400      	movs	r4, #0
   340ca:	2700      	movs	r7, #0
   340cc:	e685      	b.n	33dda <__aeabi_dsub+0x182>
   340ce:	001f      	movs	r7, r3
   340d0:	0008      	movs	r0, r1
   340d2:	3f20      	subs	r7, #32
   340d4:	40f8      	lsrs	r0, r7
   340d6:	0007      	movs	r7, r0
   340d8:	2b20      	cmp	r3, #32
   340da:	d100      	bne.n	340de <__aeabi_dsub+0x486>
   340dc:	e08e      	b.n	341fc <__aeabi_dsub+0x5a4>
   340de:	2040      	movs	r0, #64	; 0x40
   340e0:	1ac3      	subs	r3, r0, r3
   340e2:	4099      	lsls	r1, r3
   340e4:	430a      	orrs	r2, r1
   340e6:	1e51      	subs	r1, r2, #1
   340e8:	418a      	sbcs	r2, r1
   340ea:	2100      	movs	r1, #0
   340ec:	4317      	orrs	r7, r2
   340ee:	e692      	b.n	33e16 <__aeabi_dsub+0x1be>
   340f0:	2e00      	cmp	r6, #0
   340f2:	d114      	bne.n	3411e <__aeabi_dsub+0x4c6>
   340f4:	0026      	movs	r6, r4
   340f6:	4650      	mov	r0, sl
   340f8:	4306      	orrs	r6, r0
   340fa:	d062      	beq.n	341c2 <__aeabi_dsub+0x56a>
   340fc:	43db      	mvns	r3, r3
   340fe:	2b00      	cmp	r3, #0
   34100:	d15c      	bne.n	341bc <__aeabi_dsub+0x564>
   34102:	1887      	adds	r7, r0, r2
   34104:	4297      	cmp	r7, r2
   34106:	4192      	sbcs	r2, r2
   34108:	1864      	adds	r4, r4, r1
   3410a:	4252      	negs	r2, r2
   3410c:	18a4      	adds	r4, r4, r2
   3410e:	4666      	mov	r6, ip
   34110:	e687      	b.n	33e22 <__aeabi_dsub+0x1ca>
   34112:	4650      	mov	r0, sl
   34114:	4320      	orrs	r0, r4
   34116:	1e44      	subs	r4, r0, #1
   34118:	41a0      	sbcs	r0, r4
   3411a:	2400      	movs	r4, #0
   3411c:	e760      	b.n	33fe0 <__aeabi_dsub+0x388>
   3411e:	4e57      	ldr	r6, [pc, #348]	; (3427c <__aeabi_dsub+0x624>)
   34120:	45b4      	cmp	ip, r6
   34122:	d04e      	beq.n	341c2 <__aeabi_dsub+0x56a>
   34124:	2680      	movs	r6, #128	; 0x80
   34126:	0436      	lsls	r6, r6, #16
   34128:	425b      	negs	r3, r3
   3412a:	4334      	orrs	r4, r6
   3412c:	2b38      	cmp	r3, #56	; 0x38
   3412e:	dd00      	ble.n	34132 <__aeabi_dsub+0x4da>
   34130:	e07f      	b.n	34232 <__aeabi_dsub+0x5da>
   34132:	2b1f      	cmp	r3, #31
   34134:	dd00      	ble.n	34138 <__aeabi_dsub+0x4e0>
   34136:	e08b      	b.n	34250 <__aeabi_dsub+0x5f8>
   34138:	2620      	movs	r6, #32
   3413a:	0027      	movs	r7, r4
   3413c:	4650      	mov	r0, sl
   3413e:	1af6      	subs	r6, r6, r3
   34140:	40b7      	lsls	r7, r6
   34142:	40d8      	lsrs	r0, r3
   34144:	4307      	orrs	r7, r0
   34146:	4650      	mov	r0, sl
   34148:	40b0      	lsls	r0, r6
   3414a:	1e46      	subs	r6, r0, #1
   3414c:	41b0      	sbcs	r0, r6
   3414e:	4307      	orrs	r7, r0
   34150:	40dc      	lsrs	r4, r3
   34152:	18bf      	adds	r7, r7, r2
   34154:	e7d6      	b.n	34104 <__aeabi_dsub+0x4ac>
   34156:	000d      	movs	r5, r1
   34158:	4315      	orrs	r5, r2
   3415a:	d100      	bne.n	3415e <__aeabi_dsub+0x506>
   3415c:	e602      	b.n	33d64 <__aeabi_dsub+0x10c>
   3415e:	4650      	mov	r0, sl
   34160:	1a80      	subs	r0, r0, r2
   34162:	4582      	cmp	sl, r0
   34164:	41bf      	sbcs	r7, r7
   34166:	1a65      	subs	r5, r4, r1
   34168:	427f      	negs	r7, r7
   3416a:	1bed      	subs	r5, r5, r7
   3416c:	4684      	mov	ip, r0
   3416e:	0228      	lsls	r0, r5, #8
   34170:	d400      	bmi.n	34174 <__aeabi_dsub+0x51c>
   34172:	e68d      	b.n	33e90 <__aeabi_dsub+0x238>
   34174:	4650      	mov	r0, sl
   34176:	1a17      	subs	r7, r2, r0
   34178:	42ba      	cmp	r2, r7
   3417a:	4192      	sbcs	r2, r2
   3417c:	1b0c      	subs	r4, r1, r4
   3417e:	4252      	negs	r2, r2
   34180:	1aa4      	subs	r4, r4, r2
   34182:	4698      	mov	r8, r3
   34184:	e5ee      	b.n	33d64 <__aeabi_dsub+0x10c>
   34186:	000d      	movs	r5, r1
   34188:	4315      	orrs	r5, r2
   3418a:	d100      	bne.n	3418e <__aeabi_dsub+0x536>
   3418c:	e76b      	b.n	34066 <__aeabi_dsub+0x40e>
   3418e:	4650      	mov	r0, sl
   34190:	0767      	lsls	r7, r4, #29
   34192:	08c0      	lsrs	r0, r0, #3
   34194:	4307      	orrs	r7, r0
   34196:	2080      	movs	r0, #128	; 0x80
   34198:	08e4      	lsrs	r4, r4, #3
   3419a:	0300      	lsls	r0, r0, #12
   3419c:	4204      	tst	r4, r0
   3419e:	d007      	beq.n	341b0 <__aeabi_dsub+0x558>
   341a0:	08cd      	lsrs	r5, r1, #3
   341a2:	4205      	tst	r5, r0
   341a4:	d104      	bne.n	341b0 <__aeabi_dsub+0x558>
   341a6:	002c      	movs	r4, r5
   341a8:	4698      	mov	r8, r3
   341aa:	08d7      	lsrs	r7, r2, #3
   341ac:	0749      	lsls	r1, r1, #29
   341ae:	430f      	orrs	r7, r1
   341b0:	0f7b      	lsrs	r3, r7, #29
   341b2:	00e4      	lsls	r4, r4, #3
   341b4:	431c      	orrs	r4, r3
   341b6:	00ff      	lsls	r7, r7, #3
   341b8:	4e30      	ldr	r6, [pc, #192]	; (3427c <__aeabi_dsub+0x624>)
   341ba:	e5d3      	b.n	33d64 <__aeabi_dsub+0x10c>
   341bc:	4e2f      	ldr	r6, [pc, #188]	; (3427c <__aeabi_dsub+0x624>)
   341be:	45b4      	cmp	ip, r6
   341c0:	d1b4      	bne.n	3412c <__aeabi_dsub+0x4d4>
   341c2:	000c      	movs	r4, r1
   341c4:	0017      	movs	r7, r2
   341c6:	4666      	mov	r6, ip
   341c8:	e5cc      	b.n	33d64 <__aeabi_dsub+0x10c>
   341ca:	2700      	movs	r7, #0
   341cc:	2400      	movs	r4, #0
   341ce:	e5e8      	b.n	33da2 <__aeabi_dsub+0x14a>
   341d0:	2b00      	cmp	r3, #0
   341d2:	d039      	beq.n	34248 <__aeabi_dsub+0x5f0>
   341d4:	000b      	movs	r3, r1
   341d6:	4313      	orrs	r3, r2
   341d8:	d100      	bne.n	341dc <__aeabi_dsub+0x584>
   341da:	e744      	b.n	34066 <__aeabi_dsub+0x40e>
   341dc:	08c0      	lsrs	r0, r0, #3
   341de:	0767      	lsls	r7, r4, #29
   341e0:	4307      	orrs	r7, r0
   341e2:	2080      	movs	r0, #128	; 0x80
   341e4:	08e4      	lsrs	r4, r4, #3
   341e6:	0300      	lsls	r0, r0, #12
   341e8:	4204      	tst	r4, r0
   341ea:	d0e1      	beq.n	341b0 <__aeabi_dsub+0x558>
   341ec:	08cb      	lsrs	r3, r1, #3
   341ee:	4203      	tst	r3, r0
   341f0:	d1de      	bne.n	341b0 <__aeabi_dsub+0x558>
   341f2:	08d7      	lsrs	r7, r2, #3
   341f4:	0749      	lsls	r1, r1, #29
   341f6:	430f      	orrs	r7, r1
   341f8:	001c      	movs	r4, r3
   341fa:	e7d9      	b.n	341b0 <__aeabi_dsub+0x558>
   341fc:	2100      	movs	r1, #0
   341fe:	e771      	b.n	340e4 <__aeabi_dsub+0x48c>
   34200:	2500      	movs	r5, #0
   34202:	2700      	movs	r7, #0
   34204:	e5e9      	b.n	33dda <__aeabi_dsub+0x182>
   34206:	002e      	movs	r6, r5
   34208:	0027      	movs	r7, r4
   3420a:	3e20      	subs	r6, #32
   3420c:	40f7      	lsrs	r7, r6
   3420e:	2d20      	cmp	r5, #32
   34210:	d02f      	beq.n	34272 <__aeabi_dsub+0x61a>
   34212:	2640      	movs	r6, #64	; 0x40
   34214:	1b75      	subs	r5, r6, r5
   34216:	40ac      	lsls	r4, r5
   34218:	4650      	mov	r0, sl
   3421a:	4320      	orrs	r0, r4
   3421c:	1e44      	subs	r4, r0, #1
   3421e:	41a0      	sbcs	r0, r4
   34220:	2400      	movs	r4, #0
   34222:	4338      	orrs	r0, r7
   34224:	e6dc      	b.n	33fe0 <__aeabi_dsub+0x388>
   34226:	2480      	movs	r4, #128	; 0x80
   34228:	2500      	movs	r5, #0
   3422a:	0324      	lsls	r4, r4, #12
   3422c:	4e13      	ldr	r6, [pc, #76]	; (3427c <__aeabi_dsub+0x624>)
   3422e:	2700      	movs	r7, #0
   34230:	e5d3      	b.n	33dda <__aeabi_dsub+0x182>
   34232:	4650      	mov	r0, sl
   34234:	4320      	orrs	r0, r4
   34236:	0007      	movs	r7, r0
   34238:	1e78      	subs	r0, r7, #1
   3423a:	4187      	sbcs	r7, r0
   3423c:	2400      	movs	r4, #0
   3423e:	18bf      	adds	r7, r7, r2
   34240:	e760      	b.n	34104 <__aeabi_dsub+0x4ac>
   34242:	000c      	movs	r4, r1
   34244:	0017      	movs	r7, r2
   34246:	e58d      	b.n	33d64 <__aeabi_dsub+0x10c>
   34248:	000c      	movs	r4, r1
   3424a:	0017      	movs	r7, r2
   3424c:	4e0b      	ldr	r6, [pc, #44]	; (3427c <__aeabi_dsub+0x624>)
   3424e:	e589      	b.n	33d64 <__aeabi_dsub+0x10c>
   34250:	001e      	movs	r6, r3
   34252:	0027      	movs	r7, r4
   34254:	3e20      	subs	r6, #32
   34256:	40f7      	lsrs	r7, r6
   34258:	2b20      	cmp	r3, #32
   3425a:	d00c      	beq.n	34276 <__aeabi_dsub+0x61e>
   3425c:	2640      	movs	r6, #64	; 0x40
   3425e:	1af3      	subs	r3, r6, r3
   34260:	409c      	lsls	r4, r3
   34262:	4650      	mov	r0, sl
   34264:	4320      	orrs	r0, r4
   34266:	1e44      	subs	r4, r0, #1
   34268:	41a0      	sbcs	r0, r4
   3426a:	4307      	orrs	r7, r0
   3426c:	2400      	movs	r4, #0
   3426e:	18bf      	adds	r7, r7, r2
   34270:	e748      	b.n	34104 <__aeabi_dsub+0x4ac>
   34272:	2400      	movs	r4, #0
   34274:	e7d0      	b.n	34218 <__aeabi_dsub+0x5c0>
   34276:	2400      	movs	r4, #0
   34278:	e7f3      	b.n	34262 <__aeabi_dsub+0x60a>
   3427a:	46c0      	nop			; (mov r8, r8)
   3427c:	000007ff 	.word	0x000007ff
   34280:	ff7fffff 	.word	0xff7fffff

00034284 <__aeabi_d2iz>:
   34284:	b530      	push	{r4, r5, lr}
   34286:	4d13      	ldr	r5, [pc, #76]	; (342d4 <__aeabi_d2iz+0x50>)
   34288:	030a      	lsls	r2, r1, #12
   3428a:	004b      	lsls	r3, r1, #1
   3428c:	0b12      	lsrs	r2, r2, #12
   3428e:	0d5b      	lsrs	r3, r3, #21
   34290:	0fc9      	lsrs	r1, r1, #31
   34292:	2400      	movs	r4, #0
   34294:	42ab      	cmp	r3, r5
   34296:	dd10      	ble.n	342ba <__aeabi_d2iz+0x36>
   34298:	4c0f      	ldr	r4, [pc, #60]	; (342d8 <__aeabi_d2iz+0x54>)
   3429a:	42a3      	cmp	r3, r4
   3429c:	dc0f      	bgt.n	342be <__aeabi_d2iz+0x3a>
   3429e:	2480      	movs	r4, #128	; 0x80
   342a0:	4d0e      	ldr	r5, [pc, #56]	; (342dc <__aeabi_d2iz+0x58>)
   342a2:	0364      	lsls	r4, r4, #13
   342a4:	4322      	orrs	r2, r4
   342a6:	1aed      	subs	r5, r5, r3
   342a8:	2d1f      	cmp	r5, #31
   342aa:	dd0b      	ble.n	342c4 <__aeabi_d2iz+0x40>
   342ac:	480c      	ldr	r0, [pc, #48]	; (342e0 <__aeabi_d2iz+0x5c>)
   342ae:	1ac3      	subs	r3, r0, r3
   342b0:	40da      	lsrs	r2, r3
   342b2:	4254      	negs	r4, r2
   342b4:	2900      	cmp	r1, #0
   342b6:	d100      	bne.n	342ba <__aeabi_d2iz+0x36>
   342b8:	0014      	movs	r4, r2
   342ba:	0020      	movs	r0, r4
   342bc:	bd30      	pop	{r4, r5, pc}
   342be:	4b09      	ldr	r3, [pc, #36]	; (342e4 <__aeabi_d2iz+0x60>)
   342c0:	18cc      	adds	r4, r1, r3
   342c2:	e7fa      	b.n	342ba <__aeabi_d2iz+0x36>
   342c4:	4c08      	ldr	r4, [pc, #32]	; (342e8 <__aeabi_d2iz+0x64>)
   342c6:	40e8      	lsrs	r0, r5
   342c8:	46a4      	mov	ip, r4
   342ca:	4463      	add	r3, ip
   342cc:	409a      	lsls	r2, r3
   342ce:	4302      	orrs	r2, r0
   342d0:	e7ef      	b.n	342b2 <__aeabi_d2iz+0x2e>
   342d2:	46c0      	nop			; (mov r8, r8)
   342d4:	000003fe 	.word	0x000003fe
   342d8:	0000041d 	.word	0x0000041d
   342dc:	00000433 	.word	0x00000433
   342e0:	00000413 	.word	0x00000413
   342e4:	7fffffff 	.word	0x7fffffff
   342e8:	fffffbed 	.word	0xfffffbed

000342ec <__aeabi_ui2d>:
   342ec:	b510      	push	{r4, lr}
   342ee:	1e04      	subs	r4, r0, #0
   342f0:	d028      	beq.n	34344 <__aeabi_ui2d+0x58>
   342f2:	f000 f86d 	bl	343d0 <__clzsi2>
   342f6:	4b15      	ldr	r3, [pc, #84]	; (3434c <__aeabi_ui2d+0x60>)
   342f8:	4a15      	ldr	r2, [pc, #84]	; (34350 <__aeabi_ui2d+0x64>)
   342fa:	1a1b      	subs	r3, r3, r0
   342fc:	1ad2      	subs	r2, r2, r3
   342fe:	2a1f      	cmp	r2, #31
   34300:	dd15      	ble.n	3432e <__aeabi_ui2d+0x42>
   34302:	4a14      	ldr	r2, [pc, #80]	; (34354 <__aeabi_ui2d+0x68>)
   34304:	1ad2      	subs	r2, r2, r3
   34306:	4094      	lsls	r4, r2
   34308:	2200      	movs	r2, #0
   3430a:	0324      	lsls	r4, r4, #12
   3430c:	055b      	lsls	r3, r3, #21
   3430e:	0b24      	lsrs	r4, r4, #12
   34310:	0d5b      	lsrs	r3, r3, #21
   34312:	2100      	movs	r1, #0
   34314:	0010      	movs	r0, r2
   34316:	0324      	lsls	r4, r4, #12
   34318:	0d0a      	lsrs	r2, r1, #20
   3431a:	0b24      	lsrs	r4, r4, #12
   3431c:	0512      	lsls	r2, r2, #20
   3431e:	4322      	orrs	r2, r4
   34320:	4c0d      	ldr	r4, [pc, #52]	; (34358 <__aeabi_ui2d+0x6c>)
   34322:	051b      	lsls	r3, r3, #20
   34324:	4022      	ands	r2, r4
   34326:	4313      	orrs	r3, r2
   34328:	005b      	lsls	r3, r3, #1
   3432a:	0859      	lsrs	r1, r3, #1
   3432c:	bd10      	pop	{r4, pc}
   3432e:	0021      	movs	r1, r4
   34330:	4091      	lsls	r1, r2
   34332:	000a      	movs	r2, r1
   34334:	210b      	movs	r1, #11
   34336:	1a08      	subs	r0, r1, r0
   34338:	40c4      	lsrs	r4, r0
   3433a:	055b      	lsls	r3, r3, #21
   3433c:	0324      	lsls	r4, r4, #12
   3433e:	0b24      	lsrs	r4, r4, #12
   34340:	0d5b      	lsrs	r3, r3, #21
   34342:	e7e6      	b.n	34312 <__aeabi_ui2d+0x26>
   34344:	2300      	movs	r3, #0
   34346:	2400      	movs	r4, #0
   34348:	2200      	movs	r2, #0
   3434a:	e7e2      	b.n	34312 <__aeabi_ui2d+0x26>
   3434c:	0000041e 	.word	0x0000041e
   34350:	00000433 	.word	0x00000433
   34354:	00000413 	.word	0x00000413
   34358:	800fffff 	.word	0x800fffff

0003435c <__aeabi_cfrcmple>:
   3435c:	4684      	mov	ip, r0
   3435e:	1c08      	adds	r0, r1, #0
   34360:	4661      	mov	r1, ip
   34362:	e7ff      	b.n	34364 <__aeabi_cfcmpeq>

00034364 <__aeabi_cfcmpeq>:
   34364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34366:	f000 f8b7 	bl	344d8 <__lesf2>
   3436a:	2800      	cmp	r0, #0
   3436c:	d401      	bmi.n	34372 <__aeabi_cfcmpeq+0xe>
   3436e:	2100      	movs	r1, #0
   34370:	42c8      	cmn	r0, r1
   34372:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00034374 <__aeabi_fcmpeq>:
   34374:	b510      	push	{r4, lr}
   34376:	f000 f849 	bl	3440c <__eqsf2>
   3437a:	4240      	negs	r0, r0
   3437c:	3001      	adds	r0, #1
   3437e:	bd10      	pop	{r4, pc}

00034380 <__aeabi_fcmplt>:
   34380:	b510      	push	{r4, lr}
   34382:	f000 f8a9 	bl	344d8 <__lesf2>
   34386:	2800      	cmp	r0, #0
   34388:	db01      	blt.n	3438e <__aeabi_fcmplt+0xe>
   3438a:	2000      	movs	r0, #0
   3438c:	bd10      	pop	{r4, pc}
   3438e:	2001      	movs	r0, #1
   34390:	bd10      	pop	{r4, pc}
   34392:	46c0      	nop			; (mov r8, r8)

00034394 <__aeabi_fcmple>:
   34394:	b510      	push	{r4, lr}
   34396:	f000 f89f 	bl	344d8 <__lesf2>
   3439a:	2800      	cmp	r0, #0
   3439c:	dd01      	ble.n	343a2 <__aeabi_fcmple+0xe>
   3439e:	2000      	movs	r0, #0
   343a0:	bd10      	pop	{r4, pc}
   343a2:	2001      	movs	r0, #1
   343a4:	bd10      	pop	{r4, pc}
   343a6:	46c0      	nop			; (mov r8, r8)

000343a8 <__aeabi_fcmpgt>:
   343a8:	b510      	push	{r4, lr}
   343aa:	f000 f855 	bl	34458 <__gesf2>
   343ae:	2800      	cmp	r0, #0
   343b0:	dc01      	bgt.n	343b6 <__aeabi_fcmpgt+0xe>
   343b2:	2000      	movs	r0, #0
   343b4:	bd10      	pop	{r4, pc}
   343b6:	2001      	movs	r0, #1
   343b8:	bd10      	pop	{r4, pc}
   343ba:	46c0      	nop			; (mov r8, r8)

000343bc <__aeabi_fcmpge>:
   343bc:	b510      	push	{r4, lr}
   343be:	f000 f84b 	bl	34458 <__gesf2>
   343c2:	2800      	cmp	r0, #0
   343c4:	da01      	bge.n	343ca <__aeabi_fcmpge+0xe>
   343c6:	2000      	movs	r0, #0
   343c8:	bd10      	pop	{r4, pc}
   343ca:	2001      	movs	r0, #1
   343cc:	bd10      	pop	{r4, pc}
   343ce:	46c0      	nop			; (mov r8, r8)

000343d0 <__clzsi2>:
   343d0:	211c      	movs	r1, #28
   343d2:	2301      	movs	r3, #1
   343d4:	041b      	lsls	r3, r3, #16
   343d6:	4298      	cmp	r0, r3
   343d8:	d301      	bcc.n	343de <__clzsi2+0xe>
   343da:	0c00      	lsrs	r0, r0, #16
   343dc:	3910      	subs	r1, #16
   343de:	0a1b      	lsrs	r3, r3, #8
   343e0:	4298      	cmp	r0, r3
   343e2:	d301      	bcc.n	343e8 <__clzsi2+0x18>
   343e4:	0a00      	lsrs	r0, r0, #8
   343e6:	3908      	subs	r1, #8
   343e8:	091b      	lsrs	r3, r3, #4
   343ea:	4298      	cmp	r0, r3
   343ec:	d301      	bcc.n	343f2 <__clzsi2+0x22>
   343ee:	0900      	lsrs	r0, r0, #4
   343f0:	3904      	subs	r1, #4
   343f2:	a202      	add	r2, pc, #8	; (adr r2, 343fc <__clzsi2+0x2c>)
   343f4:	5c10      	ldrb	r0, [r2, r0]
   343f6:	1840      	adds	r0, r0, r1
   343f8:	4770      	bx	lr
   343fa:	46c0      	nop			; (mov r8, r8)
   343fc:	02020304 	.word	0x02020304
   34400:	01010101 	.word	0x01010101
	...

0003440c <__eqsf2>:
   3440c:	b570      	push	{r4, r5, r6, lr}
   3440e:	0042      	lsls	r2, r0, #1
   34410:	0245      	lsls	r5, r0, #9
   34412:	024e      	lsls	r6, r1, #9
   34414:	004c      	lsls	r4, r1, #1
   34416:	0fc3      	lsrs	r3, r0, #31
   34418:	0a6d      	lsrs	r5, r5, #9
   3441a:	0e12      	lsrs	r2, r2, #24
   3441c:	0a76      	lsrs	r6, r6, #9
   3441e:	0e24      	lsrs	r4, r4, #24
   34420:	0fc9      	lsrs	r1, r1, #31
   34422:	2001      	movs	r0, #1
   34424:	2aff      	cmp	r2, #255	; 0xff
   34426:	d006      	beq.n	34436 <__eqsf2+0x2a>
   34428:	2cff      	cmp	r4, #255	; 0xff
   3442a:	d003      	beq.n	34434 <__eqsf2+0x28>
   3442c:	42a2      	cmp	r2, r4
   3442e:	d101      	bne.n	34434 <__eqsf2+0x28>
   34430:	42b5      	cmp	r5, r6
   34432:	d006      	beq.n	34442 <__eqsf2+0x36>
   34434:	bd70      	pop	{r4, r5, r6, pc}
   34436:	2d00      	cmp	r5, #0
   34438:	d1fc      	bne.n	34434 <__eqsf2+0x28>
   3443a:	2cff      	cmp	r4, #255	; 0xff
   3443c:	d1fa      	bne.n	34434 <__eqsf2+0x28>
   3443e:	2e00      	cmp	r6, #0
   34440:	d1f8      	bne.n	34434 <__eqsf2+0x28>
   34442:	428b      	cmp	r3, r1
   34444:	d006      	beq.n	34454 <__eqsf2+0x48>
   34446:	2001      	movs	r0, #1
   34448:	2a00      	cmp	r2, #0
   3444a:	d1f3      	bne.n	34434 <__eqsf2+0x28>
   3444c:	0028      	movs	r0, r5
   3444e:	1e45      	subs	r5, r0, #1
   34450:	41a8      	sbcs	r0, r5
   34452:	e7ef      	b.n	34434 <__eqsf2+0x28>
   34454:	2000      	movs	r0, #0
   34456:	e7ed      	b.n	34434 <__eqsf2+0x28>

00034458 <__gesf2>:
   34458:	b5f0      	push	{r4, r5, r6, r7, lr}
   3445a:	0042      	lsls	r2, r0, #1
   3445c:	0245      	lsls	r5, r0, #9
   3445e:	024c      	lsls	r4, r1, #9
   34460:	0fc3      	lsrs	r3, r0, #31
   34462:	0048      	lsls	r0, r1, #1
   34464:	0a6d      	lsrs	r5, r5, #9
   34466:	0e12      	lsrs	r2, r2, #24
   34468:	0a64      	lsrs	r4, r4, #9
   3446a:	0e00      	lsrs	r0, r0, #24
   3446c:	0fc9      	lsrs	r1, r1, #31
   3446e:	2aff      	cmp	r2, #255	; 0xff
   34470:	d01e      	beq.n	344b0 <__gesf2+0x58>
   34472:	28ff      	cmp	r0, #255	; 0xff
   34474:	d021      	beq.n	344ba <__gesf2+0x62>
   34476:	2a00      	cmp	r2, #0
   34478:	d10a      	bne.n	34490 <__gesf2+0x38>
   3447a:	426e      	negs	r6, r5
   3447c:	416e      	adcs	r6, r5
   3447e:	b2f6      	uxtb	r6, r6
   34480:	2800      	cmp	r0, #0
   34482:	d10f      	bne.n	344a4 <__gesf2+0x4c>
   34484:	2c00      	cmp	r4, #0
   34486:	d10d      	bne.n	344a4 <__gesf2+0x4c>
   34488:	2000      	movs	r0, #0
   3448a:	2d00      	cmp	r5, #0
   3448c:	d009      	beq.n	344a2 <__gesf2+0x4a>
   3448e:	e005      	b.n	3449c <__gesf2+0x44>
   34490:	2800      	cmp	r0, #0
   34492:	d101      	bne.n	34498 <__gesf2+0x40>
   34494:	2c00      	cmp	r4, #0
   34496:	d001      	beq.n	3449c <__gesf2+0x44>
   34498:	428b      	cmp	r3, r1
   3449a:	d011      	beq.n	344c0 <__gesf2+0x68>
   3449c:	2101      	movs	r1, #1
   3449e:	4258      	negs	r0, r3
   344a0:	4308      	orrs	r0, r1
   344a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   344a4:	2e00      	cmp	r6, #0
   344a6:	d0f7      	beq.n	34498 <__gesf2+0x40>
   344a8:	2001      	movs	r0, #1
   344aa:	3901      	subs	r1, #1
   344ac:	4308      	orrs	r0, r1
   344ae:	e7f8      	b.n	344a2 <__gesf2+0x4a>
   344b0:	2d00      	cmp	r5, #0
   344b2:	d0de      	beq.n	34472 <__gesf2+0x1a>
   344b4:	2002      	movs	r0, #2
   344b6:	4240      	negs	r0, r0
   344b8:	e7f3      	b.n	344a2 <__gesf2+0x4a>
   344ba:	2c00      	cmp	r4, #0
   344bc:	d0db      	beq.n	34476 <__gesf2+0x1e>
   344be:	e7f9      	b.n	344b4 <__gesf2+0x5c>
   344c0:	4282      	cmp	r2, r0
   344c2:	dceb      	bgt.n	3449c <__gesf2+0x44>
   344c4:	db04      	blt.n	344d0 <__gesf2+0x78>
   344c6:	42a5      	cmp	r5, r4
   344c8:	d8e8      	bhi.n	3449c <__gesf2+0x44>
   344ca:	2000      	movs	r0, #0
   344cc:	42a5      	cmp	r5, r4
   344ce:	d2e8      	bcs.n	344a2 <__gesf2+0x4a>
   344d0:	2101      	movs	r1, #1
   344d2:	1e58      	subs	r0, r3, #1
   344d4:	4308      	orrs	r0, r1
   344d6:	e7e4      	b.n	344a2 <__gesf2+0x4a>

000344d8 <__lesf2>:
   344d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   344da:	0042      	lsls	r2, r0, #1
   344dc:	024d      	lsls	r5, r1, #9
   344de:	004c      	lsls	r4, r1, #1
   344e0:	0246      	lsls	r6, r0, #9
   344e2:	0a76      	lsrs	r6, r6, #9
   344e4:	0e12      	lsrs	r2, r2, #24
   344e6:	0fc3      	lsrs	r3, r0, #31
   344e8:	0a6d      	lsrs	r5, r5, #9
   344ea:	0e24      	lsrs	r4, r4, #24
   344ec:	0fc9      	lsrs	r1, r1, #31
   344ee:	2aff      	cmp	r2, #255	; 0xff
   344f0:	d016      	beq.n	34520 <__lesf2+0x48>
   344f2:	2cff      	cmp	r4, #255	; 0xff
   344f4:	d018      	beq.n	34528 <__lesf2+0x50>
   344f6:	2a00      	cmp	r2, #0
   344f8:	d10a      	bne.n	34510 <__lesf2+0x38>
   344fa:	4270      	negs	r0, r6
   344fc:	4170      	adcs	r0, r6
   344fe:	b2c0      	uxtb	r0, r0
   34500:	2c00      	cmp	r4, #0
   34502:	d015      	beq.n	34530 <__lesf2+0x58>
   34504:	2800      	cmp	r0, #0
   34506:	d005      	beq.n	34514 <__lesf2+0x3c>
   34508:	2001      	movs	r0, #1
   3450a:	3901      	subs	r1, #1
   3450c:	4308      	orrs	r0, r1
   3450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34510:	2c00      	cmp	r4, #0
   34512:	d013      	beq.n	3453c <__lesf2+0x64>
   34514:	4299      	cmp	r1, r3
   34516:	d014      	beq.n	34542 <__lesf2+0x6a>
   34518:	2001      	movs	r0, #1
   3451a:	425b      	negs	r3, r3
   3451c:	4318      	orrs	r0, r3
   3451e:	e7f6      	b.n	3450e <__lesf2+0x36>
   34520:	2002      	movs	r0, #2
   34522:	2e00      	cmp	r6, #0
   34524:	d1f3      	bne.n	3450e <__lesf2+0x36>
   34526:	e7e4      	b.n	344f2 <__lesf2+0x1a>
   34528:	2002      	movs	r0, #2
   3452a:	2d00      	cmp	r5, #0
   3452c:	d1ef      	bne.n	3450e <__lesf2+0x36>
   3452e:	e7e2      	b.n	344f6 <__lesf2+0x1e>
   34530:	2d00      	cmp	r5, #0
   34532:	d1e7      	bne.n	34504 <__lesf2+0x2c>
   34534:	2000      	movs	r0, #0
   34536:	2e00      	cmp	r6, #0
   34538:	d0e9      	beq.n	3450e <__lesf2+0x36>
   3453a:	e7ed      	b.n	34518 <__lesf2+0x40>
   3453c:	2d00      	cmp	r5, #0
   3453e:	d1e9      	bne.n	34514 <__lesf2+0x3c>
   34540:	e7ea      	b.n	34518 <__lesf2+0x40>
   34542:	42a2      	cmp	r2, r4
   34544:	dc06      	bgt.n	34554 <__lesf2+0x7c>
   34546:	dbdf      	blt.n	34508 <__lesf2+0x30>
   34548:	42ae      	cmp	r6, r5
   3454a:	d803      	bhi.n	34554 <__lesf2+0x7c>
   3454c:	2000      	movs	r0, #0
   3454e:	42ae      	cmp	r6, r5
   34550:	d3da      	bcc.n	34508 <__lesf2+0x30>
   34552:	e7dc      	b.n	3450e <__lesf2+0x36>
   34554:	2001      	movs	r0, #1
   34556:	4249      	negs	r1, r1
   34558:	4308      	orrs	r0, r1
   3455a:	e7d8      	b.n	3450e <__lesf2+0x36>

0003455c <atoi>:
   3455c:	b510      	push	{r4, lr}
   3455e:	220a      	movs	r2, #10
   34560:	2100      	movs	r1, #0
   34562:	f000 faff 	bl	34b64 <strtol>
   34566:	bd10      	pop	{r4, pc}

00034568 <__libc_init_array>:
   34568:	b570      	push	{r4, r5, r6, lr}
   3456a:	2600      	movs	r6, #0
   3456c:	4d0c      	ldr	r5, [pc, #48]	; (345a0 <__libc_init_array+0x38>)
   3456e:	4c0d      	ldr	r4, [pc, #52]	; (345a4 <__libc_init_array+0x3c>)
   34570:	1b64      	subs	r4, r4, r5
   34572:	10a4      	asrs	r4, r4, #2
   34574:	42a6      	cmp	r6, r4
   34576:	d109      	bne.n	3458c <__libc_init_array+0x24>
   34578:	2600      	movs	r6, #0
   3457a:	f005 fbf7 	bl	39d6c <_init>
   3457e:	4d0a      	ldr	r5, [pc, #40]	; (345a8 <__libc_init_array+0x40>)
   34580:	4c0a      	ldr	r4, [pc, #40]	; (345ac <__libc_init_array+0x44>)
   34582:	1b64      	subs	r4, r4, r5
   34584:	10a4      	asrs	r4, r4, #2
   34586:	42a6      	cmp	r6, r4
   34588:	d105      	bne.n	34596 <__libc_init_array+0x2e>
   3458a:	bd70      	pop	{r4, r5, r6, pc}
   3458c:	00b3      	lsls	r3, r6, #2
   3458e:	58eb      	ldr	r3, [r5, r3]
   34590:	4798      	blx	r3
   34592:	3601      	adds	r6, #1
   34594:	e7ee      	b.n	34574 <__libc_init_array+0xc>
   34596:	00b3      	lsls	r3, r6, #2
   34598:	58eb      	ldr	r3, [r5, r3]
   3459a:	4798      	blx	r3
   3459c:	3601      	adds	r6, #1
   3459e:	e7f2      	b.n	34586 <__libc_init_array+0x1e>
   345a0:	00039d78 	.word	0x00039d78
   345a4:	00039d78 	.word	0x00039d78
   345a8:	00039d78 	.word	0x00039d78
   345ac:	00039d7c 	.word	0x00039d7c

000345b0 <malloc>:
   345b0:	b510      	push	{r4, lr}
   345b2:	4b03      	ldr	r3, [pc, #12]	; (345c0 <malloc+0x10>)
   345b4:	0001      	movs	r1, r0
   345b6:	6818      	ldr	r0, [r3, #0]
   345b8:	f000 f87c 	bl	346b4 <_malloc_r>
   345bc:	bd10      	pop	{r4, pc}
   345be:	46c0      	nop			; (mov r8, r8)
   345c0:	20000120 	.word	0x20000120

000345c4 <free>:
   345c4:	b510      	push	{r4, lr}
   345c6:	4b03      	ldr	r3, [pc, #12]	; (345d4 <free+0x10>)
   345c8:	0001      	movs	r1, r0
   345ca:	6818      	ldr	r0, [r3, #0]
   345cc:	f000 f828 	bl	34620 <_free_r>
   345d0:	bd10      	pop	{r4, pc}
   345d2:	46c0      	nop			; (mov r8, r8)
   345d4:	20000120 	.word	0x20000120

000345d8 <memcpy>:
   345d8:	2300      	movs	r3, #0
   345da:	b510      	push	{r4, lr}
   345dc:	429a      	cmp	r2, r3
   345de:	d100      	bne.n	345e2 <memcpy+0xa>
   345e0:	bd10      	pop	{r4, pc}
   345e2:	5ccc      	ldrb	r4, [r1, r3]
   345e4:	54c4      	strb	r4, [r0, r3]
   345e6:	3301      	adds	r3, #1
   345e8:	e7f8      	b.n	345dc <memcpy+0x4>

000345ea <memmove>:
   345ea:	b510      	push	{r4, lr}
   345ec:	4288      	cmp	r0, r1
   345ee:	d902      	bls.n	345f6 <memmove+0xc>
   345f0:	188b      	adds	r3, r1, r2
   345f2:	4298      	cmp	r0, r3
   345f4:	d308      	bcc.n	34608 <memmove+0x1e>
   345f6:	2300      	movs	r3, #0
   345f8:	429a      	cmp	r2, r3
   345fa:	d007      	beq.n	3460c <memmove+0x22>
   345fc:	5ccc      	ldrb	r4, [r1, r3]
   345fe:	54c4      	strb	r4, [r0, r3]
   34600:	3301      	adds	r3, #1
   34602:	e7f9      	b.n	345f8 <memmove+0xe>
   34604:	5c8b      	ldrb	r3, [r1, r2]
   34606:	5483      	strb	r3, [r0, r2]
   34608:	3a01      	subs	r2, #1
   3460a:	d2fb      	bcs.n	34604 <memmove+0x1a>
   3460c:	bd10      	pop	{r4, pc}

0003460e <memset>:
   3460e:	0003      	movs	r3, r0
   34610:	1882      	adds	r2, r0, r2
   34612:	4293      	cmp	r3, r2
   34614:	d100      	bne.n	34618 <memset+0xa>
   34616:	4770      	bx	lr
   34618:	7019      	strb	r1, [r3, #0]
   3461a:	3301      	adds	r3, #1
   3461c:	e7f9      	b.n	34612 <memset+0x4>
	...

00034620 <_free_r>:
   34620:	b570      	push	{r4, r5, r6, lr}
   34622:	0005      	movs	r5, r0
   34624:	2900      	cmp	r1, #0
   34626:	d010      	beq.n	3464a <_free_r+0x2a>
   34628:	1f0c      	subs	r4, r1, #4
   3462a:	6823      	ldr	r3, [r4, #0]
   3462c:	2b00      	cmp	r3, #0
   3462e:	da00      	bge.n	34632 <_free_r+0x12>
   34630:	18e4      	adds	r4, r4, r3
   34632:	0028      	movs	r0, r5
   34634:	f000 fdca 	bl	351cc <__malloc_lock>
   34638:	4a1d      	ldr	r2, [pc, #116]	; (346b0 <_free_r+0x90>)
   3463a:	6813      	ldr	r3, [r2, #0]
   3463c:	2b00      	cmp	r3, #0
   3463e:	d105      	bne.n	3464c <_free_r+0x2c>
   34640:	6063      	str	r3, [r4, #4]
   34642:	6014      	str	r4, [r2, #0]
   34644:	0028      	movs	r0, r5
   34646:	f000 fdc2 	bl	351ce <__malloc_unlock>
   3464a:	bd70      	pop	{r4, r5, r6, pc}
   3464c:	42a3      	cmp	r3, r4
   3464e:	d909      	bls.n	34664 <_free_r+0x44>
   34650:	6821      	ldr	r1, [r4, #0]
   34652:	1860      	adds	r0, r4, r1
   34654:	4283      	cmp	r3, r0
   34656:	d1f3      	bne.n	34640 <_free_r+0x20>
   34658:	6818      	ldr	r0, [r3, #0]
   3465a:	685b      	ldr	r3, [r3, #4]
   3465c:	1841      	adds	r1, r0, r1
   3465e:	6021      	str	r1, [r4, #0]
   34660:	e7ee      	b.n	34640 <_free_r+0x20>
   34662:	0013      	movs	r3, r2
   34664:	685a      	ldr	r2, [r3, #4]
   34666:	2a00      	cmp	r2, #0
   34668:	d001      	beq.n	3466e <_free_r+0x4e>
   3466a:	42a2      	cmp	r2, r4
   3466c:	d9f9      	bls.n	34662 <_free_r+0x42>
   3466e:	6819      	ldr	r1, [r3, #0]
   34670:	1858      	adds	r0, r3, r1
   34672:	42a0      	cmp	r0, r4
   34674:	d10b      	bne.n	3468e <_free_r+0x6e>
   34676:	6820      	ldr	r0, [r4, #0]
   34678:	1809      	adds	r1, r1, r0
   3467a:	1858      	adds	r0, r3, r1
   3467c:	6019      	str	r1, [r3, #0]
   3467e:	4282      	cmp	r2, r0
   34680:	d1e0      	bne.n	34644 <_free_r+0x24>
   34682:	6810      	ldr	r0, [r2, #0]
   34684:	6852      	ldr	r2, [r2, #4]
   34686:	1841      	adds	r1, r0, r1
   34688:	6019      	str	r1, [r3, #0]
   3468a:	605a      	str	r2, [r3, #4]
   3468c:	e7da      	b.n	34644 <_free_r+0x24>
   3468e:	42a0      	cmp	r0, r4
   34690:	d902      	bls.n	34698 <_free_r+0x78>
   34692:	230c      	movs	r3, #12
   34694:	602b      	str	r3, [r5, #0]
   34696:	e7d5      	b.n	34644 <_free_r+0x24>
   34698:	6821      	ldr	r1, [r4, #0]
   3469a:	1860      	adds	r0, r4, r1
   3469c:	4282      	cmp	r2, r0
   3469e:	d103      	bne.n	346a8 <_free_r+0x88>
   346a0:	6810      	ldr	r0, [r2, #0]
   346a2:	6852      	ldr	r2, [r2, #4]
   346a4:	1841      	adds	r1, r0, r1
   346a6:	6021      	str	r1, [r4, #0]
   346a8:	6062      	str	r2, [r4, #4]
   346aa:	605c      	str	r4, [r3, #4]
   346ac:	e7ca      	b.n	34644 <_free_r+0x24>
   346ae:	46c0      	nop			; (mov r8, r8)
   346b0:	200046f0 	.word	0x200046f0

000346b4 <_malloc_r>:
   346b4:	2303      	movs	r3, #3
   346b6:	b570      	push	{r4, r5, r6, lr}
   346b8:	1ccd      	adds	r5, r1, #3
   346ba:	439d      	bics	r5, r3
   346bc:	3508      	adds	r5, #8
   346be:	0006      	movs	r6, r0
   346c0:	2d0c      	cmp	r5, #12
   346c2:	d21e      	bcs.n	34702 <_malloc_r+0x4e>
   346c4:	250c      	movs	r5, #12
   346c6:	42a9      	cmp	r1, r5
   346c8:	d81d      	bhi.n	34706 <_malloc_r+0x52>
   346ca:	0030      	movs	r0, r6
   346cc:	f000 fd7e 	bl	351cc <__malloc_lock>
   346d0:	4a25      	ldr	r2, [pc, #148]	; (34768 <_malloc_r+0xb4>)
   346d2:	6814      	ldr	r4, [r2, #0]
   346d4:	0021      	movs	r1, r4
   346d6:	2900      	cmp	r1, #0
   346d8:	d119      	bne.n	3470e <_malloc_r+0x5a>
   346da:	4c24      	ldr	r4, [pc, #144]	; (3476c <_malloc_r+0xb8>)
   346dc:	6823      	ldr	r3, [r4, #0]
   346de:	2b00      	cmp	r3, #0
   346e0:	d103      	bne.n	346ea <_malloc_r+0x36>
   346e2:	0030      	movs	r0, r6
   346e4:	f000 f8ae 	bl	34844 <_sbrk_r>
   346e8:	6020      	str	r0, [r4, #0]
   346ea:	0029      	movs	r1, r5
   346ec:	0030      	movs	r0, r6
   346ee:	f000 f8a9 	bl	34844 <_sbrk_r>
   346f2:	1c43      	adds	r3, r0, #1
   346f4:	d12c      	bne.n	34750 <_malloc_r+0x9c>
   346f6:	230c      	movs	r3, #12
   346f8:	0030      	movs	r0, r6
   346fa:	6033      	str	r3, [r6, #0]
   346fc:	f000 fd67 	bl	351ce <__malloc_unlock>
   34700:	e003      	b.n	3470a <_malloc_r+0x56>
   34702:	2d00      	cmp	r5, #0
   34704:	dadf      	bge.n	346c6 <_malloc_r+0x12>
   34706:	230c      	movs	r3, #12
   34708:	6033      	str	r3, [r6, #0]
   3470a:	2000      	movs	r0, #0
   3470c:	bd70      	pop	{r4, r5, r6, pc}
   3470e:	680b      	ldr	r3, [r1, #0]
   34710:	1b5b      	subs	r3, r3, r5
   34712:	d41a      	bmi.n	3474a <_malloc_r+0x96>
   34714:	2b0b      	cmp	r3, #11
   34716:	d903      	bls.n	34720 <_malloc_r+0x6c>
   34718:	600b      	str	r3, [r1, #0]
   3471a:	18cc      	adds	r4, r1, r3
   3471c:	6025      	str	r5, [r4, #0]
   3471e:	e003      	b.n	34728 <_malloc_r+0x74>
   34720:	428c      	cmp	r4, r1
   34722:	d10e      	bne.n	34742 <_malloc_r+0x8e>
   34724:	6863      	ldr	r3, [r4, #4]
   34726:	6013      	str	r3, [r2, #0]
   34728:	0030      	movs	r0, r6
   3472a:	f000 fd50 	bl	351ce <__malloc_unlock>
   3472e:	0020      	movs	r0, r4
   34730:	2207      	movs	r2, #7
   34732:	300b      	adds	r0, #11
   34734:	1d23      	adds	r3, r4, #4
   34736:	4390      	bics	r0, r2
   34738:	1ac3      	subs	r3, r0, r3
   3473a:	d0e7      	beq.n	3470c <_malloc_r+0x58>
   3473c:	425a      	negs	r2, r3
   3473e:	50e2      	str	r2, [r4, r3]
   34740:	e7e4      	b.n	3470c <_malloc_r+0x58>
   34742:	684b      	ldr	r3, [r1, #4]
   34744:	6063      	str	r3, [r4, #4]
   34746:	000c      	movs	r4, r1
   34748:	e7ee      	b.n	34728 <_malloc_r+0x74>
   3474a:	000c      	movs	r4, r1
   3474c:	6849      	ldr	r1, [r1, #4]
   3474e:	e7c2      	b.n	346d6 <_malloc_r+0x22>
   34750:	2303      	movs	r3, #3
   34752:	1cc4      	adds	r4, r0, #3
   34754:	439c      	bics	r4, r3
   34756:	42a0      	cmp	r0, r4
   34758:	d0e0      	beq.n	3471c <_malloc_r+0x68>
   3475a:	1a21      	subs	r1, r4, r0
   3475c:	0030      	movs	r0, r6
   3475e:	f000 f871 	bl	34844 <_sbrk_r>
   34762:	1c43      	adds	r3, r0, #1
   34764:	d1da      	bne.n	3471c <_malloc_r+0x68>
   34766:	e7c6      	b.n	346f6 <_malloc_r+0x42>
   34768:	200046f0 	.word	0x200046f0
   3476c:	200046f4 	.word	0x200046f4

00034770 <_puts_r>:
   34770:	b570      	push	{r4, r5, r6, lr}
   34772:	0005      	movs	r5, r0
   34774:	000e      	movs	r6, r1
   34776:	2800      	cmp	r0, #0
   34778:	d004      	beq.n	34784 <_puts_r+0x14>
   3477a:	6983      	ldr	r3, [r0, #24]
   3477c:	2b00      	cmp	r3, #0
   3477e:	d101      	bne.n	34784 <_puts_r+0x14>
   34780:	f000 fc00 	bl	34f84 <__sinit>
   34784:	69ab      	ldr	r3, [r5, #24]
   34786:	68ac      	ldr	r4, [r5, #8]
   34788:	2b00      	cmp	r3, #0
   3478a:	d102      	bne.n	34792 <_puts_r+0x22>
   3478c:	0028      	movs	r0, r5
   3478e:	f000 fbf9 	bl	34f84 <__sinit>
   34792:	4b24      	ldr	r3, [pc, #144]	; (34824 <_puts_r+0xb4>)
   34794:	429c      	cmp	r4, r3
   34796:	d10f      	bne.n	347b8 <_puts_r+0x48>
   34798:	686c      	ldr	r4, [r5, #4]
   3479a:	89a3      	ldrh	r3, [r4, #12]
   3479c:	071b      	lsls	r3, r3, #28
   3479e:	d502      	bpl.n	347a6 <_puts_r+0x36>
   347a0:	6923      	ldr	r3, [r4, #16]
   347a2:	2b00      	cmp	r3, #0
   347a4:	d120      	bne.n	347e8 <_puts_r+0x78>
   347a6:	0021      	movs	r1, r4
   347a8:	0028      	movs	r0, r5
   347aa:	f000 fa7d 	bl	34ca8 <__swsetup_r>
   347ae:	2800      	cmp	r0, #0
   347b0:	d01a      	beq.n	347e8 <_puts_r+0x78>
   347b2:	2001      	movs	r0, #1
   347b4:	4240      	negs	r0, r0
   347b6:	bd70      	pop	{r4, r5, r6, pc}
   347b8:	4b1b      	ldr	r3, [pc, #108]	; (34828 <_puts_r+0xb8>)
   347ba:	429c      	cmp	r4, r3
   347bc:	d101      	bne.n	347c2 <_puts_r+0x52>
   347be:	68ac      	ldr	r4, [r5, #8]
   347c0:	e7eb      	b.n	3479a <_puts_r+0x2a>
   347c2:	4b1a      	ldr	r3, [pc, #104]	; (3482c <_puts_r+0xbc>)
   347c4:	429c      	cmp	r4, r3
   347c6:	d1e8      	bne.n	3479a <_puts_r+0x2a>
   347c8:	68ec      	ldr	r4, [r5, #12]
   347ca:	e7e6      	b.n	3479a <_puts_r+0x2a>
   347cc:	3b01      	subs	r3, #1
   347ce:	3601      	adds	r6, #1
   347d0:	60a3      	str	r3, [r4, #8]
   347d2:	2b00      	cmp	r3, #0
   347d4:	da04      	bge.n	347e0 <_puts_r+0x70>
   347d6:	69a2      	ldr	r2, [r4, #24]
   347d8:	4293      	cmp	r3, r2
   347da:	db16      	blt.n	3480a <_puts_r+0x9a>
   347dc:	290a      	cmp	r1, #10
   347de:	d014      	beq.n	3480a <_puts_r+0x9a>
   347e0:	6823      	ldr	r3, [r4, #0]
   347e2:	1c5a      	adds	r2, r3, #1
   347e4:	6022      	str	r2, [r4, #0]
   347e6:	7019      	strb	r1, [r3, #0]
   347e8:	7831      	ldrb	r1, [r6, #0]
   347ea:	68a3      	ldr	r3, [r4, #8]
   347ec:	2900      	cmp	r1, #0
   347ee:	d1ed      	bne.n	347cc <_puts_r+0x5c>
   347f0:	3b01      	subs	r3, #1
   347f2:	60a3      	str	r3, [r4, #8]
   347f4:	2b00      	cmp	r3, #0
   347f6:	da0f      	bge.n	34818 <_puts_r+0xa8>
   347f8:	0022      	movs	r2, r4
   347fa:	310a      	adds	r1, #10
   347fc:	0028      	movs	r0, r5
   347fe:	f000 f9fd 	bl	34bfc <__swbuf_r>
   34802:	1c43      	adds	r3, r0, #1
   34804:	d0d5      	beq.n	347b2 <_puts_r+0x42>
   34806:	200a      	movs	r0, #10
   34808:	e7d5      	b.n	347b6 <_puts_r+0x46>
   3480a:	0022      	movs	r2, r4
   3480c:	0028      	movs	r0, r5
   3480e:	f000 f9f5 	bl	34bfc <__swbuf_r>
   34812:	1c43      	adds	r3, r0, #1
   34814:	d1e8      	bne.n	347e8 <_puts_r+0x78>
   34816:	e7cc      	b.n	347b2 <_puts_r+0x42>
   34818:	200a      	movs	r0, #10
   3481a:	6823      	ldr	r3, [r4, #0]
   3481c:	1c5a      	adds	r2, r3, #1
   3481e:	6022      	str	r2, [r4, #0]
   34820:	7018      	strb	r0, [r3, #0]
   34822:	e7c8      	b.n	347b6 <_puts_r+0x46>
   34824:	00039bec 	.word	0x00039bec
   34828:	00039c0c 	.word	0x00039c0c
   3482c:	00039bcc 	.word	0x00039bcc

00034830 <puts>:
   34830:	b510      	push	{r4, lr}
   34832:	4b03      	ldr	r3, [pc, #12]	; (34840 <puts+0x10>)
   34834:	0001      	movs	r1, r0
   34836:	6818      	ldr	r0, [r3, #0]
   34838:	f7ff ff9a 	bl	34770 <_puts_r>
   3483c:	bd10      	pop	{r4, pc}
   3483e:	46c0      	nop			; (mov r8, r8)
   34840:	20000120 	.word	0x20000120

00034844 <_sbrk_r>:
   34844:	2300      	movs	r3, #0
   34846:	b570      	push	{r4, r5, r6, lr}
   34848:	4c06      	ldr	r4, [pc, #24]	; (34864 <_sbrk_r+0x20>)
   3484a:	0005      	movs	r5, r0
   3484c:	0008      	movs	r0, r1
   3484e:	6023      	str	r3, [r4, #0]
   34850:	f7f5 fd98 	bl	2a384 <_sbrk>
   34854:	1c43      	adds	r3, r0, #1
   34856:	d103      	bne.n	34860 <_sbrk_r+0x1c>
   34858:	6823      	ldr	r3, [r4, #0]
   3485a:	2b00      	cmp	r3, #0
   3485c:	d000      	beq.n	34860 <_sbrk_r+0x1c>
   3485e:	602b      	str	r3, [r5, #0]
   34860:	bd70      	pop	{r4, r5, r6, pc}
   34862:	46c0      	nop			; (mov r8, r8)
   34864:	20005c54 	.word	0x20005c54

00034868 <sniprintf>:
   34868:	b40c      	push	{r2, r3}
   3486a:	b530      	push	{r4, r5, lr}
   3486c:	4b16      	ldr	r3, [pc, #88]	; (348c8 <sniprintf+0x60>)
   3486e:	b09d      	sub	sp, #116	; 0x74
   34870:	1e0c      	subs	r4, r1, #0
   34872:	681d      	ldr	r5, [r3, #0]
   34874:	da08      	bge.n	34888 <sniprintf+0x20>
   34876:	238b      	movs	r3, #139	; 0x8b
   34878:	2001      	movs	r0, #1
   3487a:	602b      	str	r3, [r5, #0]
   3487c:	4240      	negs	r0, r0
   3487e:	b01d      	add	sp, #116	; 0x74
   34880:	bc30      	pop	{r4, r5}
   34882:	bc08      	pop	{r3}
   34884:	b002      	add	sp, #8
   34886:	4718      	bx	r3
   34888:	2382      	movs	r3, #130	; 0x82
   3488a:	a902      	add	r1, sp, #8
   3488c:	009b      	lsls	r3, r3, #2
   3488e:	818b      	strh	r3, [r1, #12]
   34890:	2300      	movs	r3, #0
   34892:	9002      	str	r0, [sp, #8]
   34894:	6108      	str	r0, [r1, #16]
   34896:	429c      	cmp	r4, r3
   34898:	d000      	beq.n	3489c <sniprintf+0x34>
   3489a:	1e63      	subs	r3, r4, #1
   3489c:	608b      	str	r3, [r1, #8]
   3489e:	614b      	str	r3, [r1, #20]
   348a0:	2301      	movs	r3, #1
   348a2:	425b      	negs	r3, r3
   348a4:	81cb      	strh	r3, [r1, #14]
   348a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   348a8:	ab21      	add	r3, sp, #132	; 0x84
   348aa:	0028      	movs	r0, r5
   348ac:	9301      	str	r3, [sp, #4]
   348ae:	f000 fcf1 	bl	35294 <_svfiprintf_r>
   348b2:	1c43      	adds	r3, r0, #1
   348b4:	da01      	bge.n	348ba <sniprintf+0x52>
   348b6:	238b      	movs	r3, #139	; 0x8b
   348b8:	602b      	str	r3, [r5, #0]
   348ba:	2c00      	cmp	r4, #0
   348bc:	d0df      	beq.n	3487e <sniprintf+0x16>
   348be:	2300      	movs	r3, #0
   348c0:	9a02      	ldr	r2, [sp, #8]
   348c2:	7013      	strb	r3, [r2, #0]
   348c4:	e7db      	b.n	3487e <sniprintf+0x16>
   348c6:	46c0      	nop			; (mov r8, r8)
   348c8:	20000120 	.word	0x20000120

000348cc <siprintf>:
   348cc:	b40e      	push	{r1, r2, r3}
   348ce:	b510      	push	{r4, lr}
   348d0:	b09d      	sub	sp, #116	; 0x74
   348d2:	a902      	add	r1, sp, #8
   348d4:	9002      	str	r0, [sp, #8]
   348d6:	6108      	str	r0, [r1, #16]
   348d8:	480b      	ldr	r0, [pc, #44]	; (34908 <siprintf+0x3c>)
   348da:	2482      	movs	r4, #130	; 0x82
   348dc:	6088      	str	r0, [r1, #8]
   348de:	6148      	str	r0, [r1, #20]
   348e0:	2001      	movs	r0, #1
   348e2:	4240      	negs	r0, r0
   348e4:	ab1f      	add	r3, sp, #124	; 0x7c
   348e6:	81c8      	strh	r0, [r1, #14]
   348e8:	4808      	ldr	r0, [pc, #32]	; (3490c <siprintf+0x40>)
   348ea:	cb04      	ldmia	r3!, {r2}
   348ec:	00a4      	lsls	r4, r4, #2
   348ee:	6800      	ldr	r0, [r0, #0]
   348f0:	9301      	str	r3, [sp, #4]
   348f2:	818c      	strh	r4, [r1, #12]
   348f4:	f000 fcce 	bl	35294 <_svfiprintf_r>
   348f8:	2300      	movs	r3, #0
   348fa:	9a02      	ldr	r2, [sp, #8]
   348fc:	7013      	strb	r3, [r2, #0]
   348fe:	b01d      	add	sp, #116	; 0x74
   34900:	bc10      	pop	{r4}
   34902:	bc08      	pop	{r3}
   34904:	b003      	add	sp, #12
   34906:	4718      	bx	r3
   34908:	7fffffff 	.word	0x7fffffff
   3490c:	20000120 	.word	0x20000120

00034910 <strcasecmp>:
   34910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34912:	0007      	movs	r7, r0
   34914:	000e      	movs	r6, r1
   34916:	783c      	ldrb	r4, [r7, #0]
   34918:	f000 fbcc 	bl	350b4 <__locale_ctype_ptr>
   3491c:	2203      	movs	r2, #3
   3491e:	1900      	adds	r0, r0, r4
   34920:	7843      	ldrb	r3, [r0, #1]
   34922:	4013      	ands	r3, r2
   34924:	2b01      	cmp	r3, #1
   34926:	d100      	bne.n	3492a <strcasecmp+0x1a>
   34928:	3420      	adds	r4, #32
   3492a:	7835      	ldrb	r5, [r6, #0]
   3492c:	f000 fbc2 	bl	350b4 <__locale_ctype_ptr>
   34930:	2203      	movs	r2, #3
   34932:	1940      	adds	r0, r0, r5
   34934:	7843      	ldrb	r3, [r0, #1]
   34936:	4013      	ands	r3, r2
   34938:	2b01      	cmp	r3, #1
   3493a:	d100      	bne.n	3493e <strcasecmp+0x2e>
   3493c:	3520      	adds	r5, #32
   3493e:	1b60      	subs	r0, r4, r5
   34940:	d103      	bne.n	3494a <strcasecmp+0x3a>
   34942:	3701      	adds	r7, #1
   34944:	3601      	adds	r6, #1
   34946:	2d00      	cmp	r5, #0
   34948:	d1e5      	bne.n	34916 <strcasecmp+0x6>
   3494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003494c <strcmp>:
   3494c:	7802      	ldrb	r2, [r0, #0]
   3494e:	780b      	ldrb	r3, [r1, #0]
   34950:	2a00      	cmp	r2, #0
   34952:	d003      	beq.n	3495c <strcmp+0x10>
   34954:	3001      	adds	r0, #1
   34956:	3101      	adds	r1, #1
   34958:	429a      	cmp	r2, r3
   3495a:	d0f7      	beq.n	3494c <strcmp>
   3495c:	1ad0      	subs	r0, r2, r3
   3495e:	4770      	bx	lr

00034960 <strcpy>:
   34960:	1c03      	adds	r3, r0, #0
   34962:	780a      	ldrb	r2, [r1, #0]
   34964:	3101      	adds	r1, #1
   34966:	701a      	strb	r2, [r3, #0]
   34968:	3301      	adds	r3, #1
   3496a:	2a00      	cmp	r2, #0
   3496c:	d1f9      	bne.n	34962 <strcpy+0x2>
   3496e:	4770      	bx	lr

00034970 <strdup>:
   34970:	b510      	push	{r4, lr}
   34972:	4b03      	ldr	r3, [pc, #12]	; (34980 <strdup+0x10>)
   34974:	0001      	movs	r1, r0
   34976:	6818      	ldr	r0, [r3, #0]
   34978:	f000 f804 	bl	34984 <_strdup_r>
   3497c:	bd10      	pop	{r4, pc}
   3497e:	46c0      	nop			; (mov r8, r8)
   34980:	20000120 	.word	0x20000120

00034984 <_strdup_r>:
   34984:	b570      	push	{r4, r5, r6, lr}
   34986:	0005      	movs	r5, r0
   34988:	0008      	movs	r0, r1
   3498a:	000e      	movs	r6, r1
   3498c:	f000 f80d 	bl	349aa <strlen>
   34990:	1c44      	adds	r4, r0, #1
   34992:	0021      	movs	r1, r4
   34994:	0028      	movs	r0, r5
   34996:	f7ff fe8d 	bl	346b4 <_malloc_r>
   3499a:	1e05      	subs	r5, r0, #0
   3499c:	d003      	beq.n	349a6 <_strdup_r+0x22>
   3499e:	0022      	movs	r2, r4
   349a0:	0031      	movs	r1, r6
   349a2:	f7ff fe19 	bl	345d8 <memcpy>
   349a6:	0028      	movs	r0, r5
   349a8:	bd70      	pop	{r4, r5, r6, pc}

000349aa <strlen>:
   349aa:	2300      	movs	r3, #0
   349ac:	5cc2      	ldrb	r2, [r0, r3]
   349ae:	3301      	adds	r3, #1
   349b0:	2a00      	cmp	r2, #0
   349b2:	d1fb      	bne.n	349ac <strlen+0x2>
   349b4:	1e58      	subs	r0, r3, #1
   349b6:	4770      	bx	lr

000349b8 <strncmp>:
   349b8:	2300      	movs	r3, #0
   349ba:	b530      	push	{r4, r5, lr}
   349bc:	429a      	cmp	r2, r3
   349be:	d00a      	beq.n	349d6 <strncmp+0x1e>
   349c0:	3a01      	subs	r2, #1
   349c2:	5cc4      	ldrb	r4, [r0, r3]
   349c4:	5ccd      	ldrb	r5, [r1, r3]
   349c6:	42ac      	cmp	r4, r5
   349c8:	d104      	bne.n	349d4 <strncmp+0x1c>
   349ca:	429a      	cmp	r2, r3
   349cc:	d002      	beq.n	349d4 <strncmp+0x1c>
   349ce:	3301      	adds	r3, #1
   349d0:	2c00      	cmp	r4, #0
   349d2:	d1f6      	bne.n	349c2 <strncmp+0xa>
   349d4:	1b63      	subs	r3, r4, r5
   349d6:	0018      	movs	r0, r3
   349d8:	bd30      	pop	{r4, r5, pc}

000349da <strncpy>:
   349da:	b570      	push	{r4, r5, r6, lr}
   349dc:	0004      	movs	r4, r0
   349de:	2a00      	cmp	r2, #0
   349e0:	d100      	bne.n	349e4 <strncpy+0xa>
   349e2:	bd70      	pop	{r4, r5, r6, pc}
   349e4:	780d      	ldrb	r5, [r1, #0]
   349e6:	1e56      	subs	r6, r2, #1
   349e8:	1c63      	adds	r3, r4, #1
   349ea:	7025      	strb	r5, [r4, #0]
   349ec:	3101      	adds	r1, #1
   349ee:	2d00      	cmp	r5, #0
   349f0:	d105      	bne.n	349fe <strncpy+0x24>
   349f2:	18a4      	adds	r4, r4, r2
   349f4:	429c      	cmp	r4, r3
   349f6:	d0f4      	beq.n	349e2 <strncpy+0x8>
   349f8:	701d      	strb	r5, [r3, #0]
   349fa:	3301      	adds	r3, #1
   349fc:	e7fa      	b.n	349f4 <strncpy+0x1a>
   349fe:	001c      	movs	r4, r3
   34a00:	0032      	movs	r2, r6
   34a02:	e7ec      	b.n	349de <strncpy+0x4>

00034a04 <strrchr>:
   34a04:	b570      	push	{r4, r5, r6, lr}
   34a06:	000d      	movs	r5, r1
   34a08:	2400      	movs	r4, #0
   34a0a:	2900      	cmp	r1, #0
   34a0c:	d105      	bne.n	34a1a <strrchr+0x16>
   34a0e:	f000 ff19 	bl	35844 <strchr>
   34a12:	0004      	movs	r4, r0
   34a14:	e006      	b.n	34a24 <strrchr+0x20>
   34a16:	001c      	movs	r4, r3
   34a18:	1c58      	adds	r0, r3, #1
   34a1a:	0029      	movs	r1, r5
   34a1c:	f000 ff12 	bl	35844 <strchr>
   34a20:	1e03      	subs	r3, r0, #0
   34a22:	d1f8      	bne.n	34a16 <strrchr+0x12>
   34a24:	0020      	movs	r0, r4
   34a26:	bd70      	pop	{r4, r5, r6, pc}

00034a28 <strstr>:
   34a28:	b510      	push	{r4, lr}
   34a2a:	0002      	movs	r2, r0
   34a2c:	7800      	ldrb	r0, [r0, #0]
   34a2e:	2800      	cmp	r0, #0
   34a30:	d104      	bne.n	34a3c <strstr+0x14>
   34a32:	7809      	ldrb	r1, [r1, #0]
   34a34:	2900      	cmp	r1, #0
   34a36:	d00d      	beq.n	34a54 <strstr+0x2c>
   34a38:	bd10      	pop	{r4, pc}
   34a3a:	3201      	adds	r2, #1
   34a3c:	7810      	ldrb	r0, [r2, #0]
   34a3e:	2800      	cmp	r0, #0
   34a40:	d0fa      	beq.n	34a38 <strstr+0x10>
   34a42:	2300      	movs	r3, #0
   34a44:	5cc8      	ldrb	r0, [r1, r3]
   34a46:	2800      	cmp	r0, #0
   34a48:	d004      	beq.n	34a54 <strstr+0x2c>
   34a4a:	5cd4      	ldrb	r4, [r2, r3]
   34a4c:	4284      	cmp	r4, r0
   34a4e:	d1f4      	bne.n	34a3a <strstr+0x12>
   34a50:	3301      	adds	r3, #1
   34a52:	e7f7      	b.n	34a44 <strstr+0x1c>
   34a54:	0010      	movs	r0, r2
   34a56:	e7ef      	b.n	34a38 <strstr+0x10>

00034a58 <_strtol_l.isra.0>:
   34a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a5a:	001f      	movs	r7, r3
   34a5c:	000e      	movs	r6, r1
   34a5e:	b087      	sub	sp, #28
   34a60:	9005      	str	r0, [sp, #20]
   34a62:	9103      	str	r1, [sp, #12]
   34a64:	9202      	str	r2, [sp, #8]
   34a66:	980c      	ldr	r0, [sp, #48]	; 0x30
   34a68:	7834      	ldrb	r4, [r6, #0]
   34a6a:	f000 fb20 	bl	350ae <__locale_ctype_ptr_l>
   34a6e:	2208      	movs	r2, #8
   34a70:	1900      	adds	r0, r0, r4
   34a72:	7843      	ldrb	r3, [r0, #1]
   34a74:	1c75      	adds	r5, r6, #1
   34a76:	4013      	ands	r3, r2
   34a78:	d10c      	bne.n	34a94 <_strtol_l.isra.0+0x3c>
   34a7a:	2c2d      	cmp	r4, #45	; 0x2d
   34a7c:	d10c      	bne.n	34a98 <_strtol_l.isra.0+0x40>
   34a7e:	3301      	adds	r3, #1
   34a80:	782c      	ldrb	r4, [r5, #0]
   34a82:	9301      	str	r3, [sp, #4]
   34a84:	1cb5      	adds	r5, r6, #2
   34a86:	2f00      	cmp	r7, #0
   34a88:	d00c      	beq.n	34aa4 <_strtol_l.isra.0+0x4c>
   34a8a:	2f10      	cmp	r7, #16
   34a8c:	d114      	bne.n	34ab8 <_strtol_l.isra.0+0x60>
   34a8e:	2c30      	cmp	r4, #48	; 0x30
   34a90:	d00a      	beq.n	34aa8 <_strtol_l.isra.0+0x50>
   34a92:	e011      	b.n	34ab8 <_strtol_l.isra.0+0x60>
   34a94:	002e      	movs	r6, r5
   34a96:	e7e6      	b.n	34a66 <_strtol_l.isra.0+0xe>
   34a98:	9301      	str	r3, [sp, #4]
   34a9a:	2c2b      	cmp	r4, #43	; 0x2b
   34a9c:	d1f3      	bne.n	34a86 <_strtol_l.isra.0+0x2e>
   34a9e:	782c      	ldrb	r4, [r5, #0]
   34aa0:	1cb5      	adds	r5, r6, #2
   34aa2:	e7f0      	b.n	34a86 <_strtol_l.isra.0+0x2e>
   34aa4:	2c30      	cmp	r4, #48	; 0x30
   34aa6:	d12f      	bne.n	34b08 <_strtol_l.isra.0+0xb0>
   34aa8:	2220      	movs	r2, #32
   34aaa:	782b      	ldrb	r3, [r5, #0]
   34aac:	4393      	bics	r3, r2
   34aae:	2b58      	cmp	r3, #88	; 0x58
   34ab0:	d151      	bne.n	34b56 <_strtol_l.isra.0+0xfe>
   34ab2:	2710      	movs	r7, #16
   34ab4:	786c      	ldrb	r4, [r5, #1]
   34ab6:	3502      	adds	r5, #2
   34ab8:	9b01      	ldr	r3, [sp, #4]
   34aba:	4a29      	ldr	r2, [pc, #164]	; (34b60 <_strtol_l.isra.0+0x108>)
   34abc:	0039      	movs	r1, r7
   34abe:	189e      	adds	r6, r3, r2
   34ac0:	0030      	movs	r0, r6
   34ac2:	f7fd f8cd 	bl	31c60 <__aeabi_uidivmod>
   34ac6:	0030      	movs	r0, r6
   34ac8:	9104      	str	r1, [sp, #16]
   34aca:	0039      	movs	r1, r7
   34acc:	f7fd f842 	bl	31b54 <__udivsi3>
   34ad0:	2101      	movs	r1, #1
   34ad2:	2300      	movs	r3, #0
   34ad4:	4249      	negs	r1, r1
   34ad6:	0002      	movs	r2, r0
   34ad8:	468c      	mov	ip, r1
   34ada:	0018      	movs	r0, r3
   34adc:	0021      	movs	r1, r4
   34ade:	3930      	subs	r1, #48	; 0x30
   34ae0:	2909      	cmp	r1, #9
   34ae2:	d813      	bhi.n	34b0c <_strtol_l.isra.0+0xb4>
   34ae4:	000c      	movs	r4, r1
   34ae6:	42a7      	cmp	r7, r4
   34ae8:	dd1c      	ble.n	34b24 <_strtol_l.isra.0+0xcc>
   34aea:	1c59      	adds	r1, r3, #1
   34aec:	d009      	beq.n	34b02 <_strtol_l.isra.0+0xaa>
   34aee:	4663      	mov	r3, ip
   34af0:	4282      	cmp	r2, r0
   34af2:	d306      	bcc.n	34b02 <_strtol_l.isra.0+0xaa>
   34af4:	d102      	bne.n	34afc <_strtol_l.isra.0+0xa4>
   34af6:	9904      	ldr	r1, [sp, #16]
   34af8:	42a1      	cmp	r1, r4
   34afa:	db02      	blt.n	34b02 <_strtol_l.isra.0+0xaa>
   34afc:	2301      	movs	r3, #1
   34afe:	4378      	muls	r0, r7
   34b00:	1820      	adds	r0, r4, r0
   34b02:	782c      	ldrb	r4, [r5, #0]
   34b04:	3501      	adds	r5, #1
   34b06:	e7e9      	b.n	34adc <_strtol_l.isra.0+0x84>
   34b08:	270a      	movs	r7, #10
   34b0a:	e7d5      	b.n	34ab8 <_strtol_l.isra.0+0x60>
   34b0c:	0021      	movs	r1, r4
   34b0e:	3941      	subs	r1, #65	; 0x41
   34b10:	2919      	cmp	r1, #25
   34b12:	d801      	bhi.n	34b18 <_strtol_l.isra.0+0xc0>
   34b14:	3c37      	subs	r4, #55	; 0x37
   34b16:	e7e6      	b.n	34ae6 <_strtol_l.isra.0+0x8e>
   34b18:	0021      	movs	r1, r4
   34b1a:	3961      	subs	r1, #97	; 0x61
   34b1c:	2919      	cmp	r1, #25
   34b1e:	d801      	bhi.n	34b24 <_strtol_l.isra.0+0xcc>
   34b20:	3c57      	subs	r4, #87	; 0x57
   34b22:	e7e0      	b.n	34ae6 <_strtol_l.isra.0+0x8e>
   34b24:	1c5a      	adds	r2, r3, #1
   34b26:	d108      	bne.n	34b3a <_strtol_l.isra.0+0xe2>
   34b28:	9a05      	ldr	r2, [sp, #20]
   34b2a:	3323      	adds	r3, #35	; 0x23
   34b2c:	6013      	str	r3, [r2, #0]
   34b2e:	9b02      	ldr	r3, [sp, #8]
   34b30:	0030      	movs	r0, r6
   34b32:	2b00      	cmp	r3, #0
   34b34:	d10b      	bne.n	34b4e <_strtol_l.isra.0+0xf6>
   34b36:	b007      	add	sp, #28
   34b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b3a:	9a01      	ldr	r2, [sp, #4]
   34b3c:	2a00      	cmp	r2, #0
   34b3e:	d000      	beq.n	34b42 <_strtol_l.isra.0+0xea>
   34b40:	4240      	negs	r0, r0
   34b42:	9a02      	ldr	r2, [sp, #8]
   34b44:	2a00      	cmp	r2, #0
   34b46:	d0f6      	beq.n	34b36 <_strtol_l.isra.0+0xde>
   34b48:	9a03      	ldr	r2, [sp, #12]
   34b4a:	2b00      	cmp	r3, #0
   34b4c:	d000      	beq.n	34b50 <_strtol_l.isra.0+0xf8>
   34b4e:	1e6a      	subs	r2, r5, #1
   34b50:	9b02      	ldr	r3, [sp, #8]
   34b52:	601a      	str	r2, [r3, #0]
   34b54:	e7ef      	b.n	34b36 <_strtol_l.isra.0+0xde>
   34b56:	2430      	movs	r4, #48	; 0x30
   34b58:	2f00      	cmp	r7, #0
   34b5a:	d1ad      	bne.n	34ab8 <_strtol_l.isra.0+0x60>
   34b5c:	3708      	adds	r7, #8
   34b5e:	e7ab      	b.n	34ab8 <_strtol_l.isra.0+0x60>
   34b60:	7fffffff 	.word	0x7fffffff

00034b64 <strtol>:
   34b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34b66:	0013      	movs	r3, r2
   34b68:	4a06      	ldr	r2, [pc, #24]	; (34b84 <strtol+0x20>)
   34b6a:	0005      	movs	r5, r0
   34b6c:	6810      	ldr	r0, [r2, #0]
   34b6e:	6a04      	ldr	r4, [r0, #32]
   34b70:	2c00      	cmp	r4, #0
   34b72:	d100      	bne.n	34b76 <strtol+0x12>
   34b74:	4c04      	ldr	r4, [pc, #16]	; (34b88 <strtol+0x24>)
   34b76:	000a      	movs	r2, r1
   34b78:	9400      	str	r4, [sp, #0]
   34b7a:	0029      	movs	r1, r5
   34b7c:	f7ff ff6c 	bl	34a58 <_strtol_l.isra.0>
   34b80:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   34b82:	46c0      	nop			; (mov r8, r8)
   34b84:	20000120 	.word	0x20000120
   34b88:	20000184 	.word	0x20000184

00034b8c <_vsniprintf_r>:
   34b8c:	b530      	push	{r4, r5, lr}
   34b8e:	0014      	movs	r4, r2
   34b90:	b09b      	sub	sp, #108	; 0x6c
   34b92:	0005      	movs	r5, r0
   34b94:	001a      	movs	r2, r3
   34b96:	2c00      	cmp	r4, #0
   34b98:	da05      	bge.n	34ba6 <_vsniprintf_r+0x1a>
   34b9a:	238b      	movs	r3, #139	; 0x8b
   34b9c:	6003      	str	r3, [r0, #0]
   34b9e:	2001      	movs	r0, #1
   34ba0:	4240      	negs	r0, r0
   34ba2:	b01b      	add	sp, #108	; 0x6c
   34ba4:	bd30      	pop	{r4, r5, pc}
   34ba6:	2382      	movs	r3, #130	; 0x82
   34ba8:	4668      	mov	r0, sp
   34baa:	009b      	lsls	r3, r3, #2
   34bac:	8183      	strh	r3, [r0, #12]
   34bae:	2300      	movs	r3, #0
   34bb0:	9100      	str	r1, [sp, #0]
   34bb2:	9104      	str	r1, [sp, #16]
   34bb4:	429c      	cmp	r4, r3
   34bb6:	d000      	beq.n	34bba <_vsniprintf_r+0x2e>
   34bb8:	1e63      	subs	r3, r4, #1
   34bba:	9302      	str	r3, [sp, #8]
   34bbc:	9305      	str	r3, [sp, #20]
   34bbe:	2301      	movs	r3, #1
   34bc0:	4669      	mov	r1, sp
   34bc2:	425b      	negs	r3, r3
   34bc4:	81cb      	strh	r3, [r1, #14]
   34bc6:	0028      	movs	r0, r5
   34bc8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34bca:	f000 fb63 	bl	35294 <_svfiprintf_r>
   34bce:	1c43      	adds	r3, r0, #1
   34bd0:	da01      	bge.n	34bd6 <_vsniprintf_r+0x4a>
   34bd2:	238b      	movs	r3, #139	; 0x8b
   34bd4:	602b      	str	r3, [r5, #0]
   34bd6:	2c00      	cmp	r4, #0
   34bd8:	d0e3      	beq.n	34ba2 <_vsniprintf_r+0x16>
   34bda:	2300      	movs	r3, #0
   34bdc:	9a00      	ldr	r2, [sp, #0]
   34bde:	7013      	strb	r3, [r2, #0]
   34be0:	e7df      	b.n	34ba2 <_vsniprintf_r+0x16>
	...

00034be4 <vsniprintf>:
   34be4:	b507      	push	{r0, r1, r2, lr}
   34be6:	9300      	str	r3, [sp, #0]
   34be8:	0013      	movs	r3, r2
   34bea:	000a      	movs	r2, r1
   34bec:	0001      	movs	r1, r0
   34bee:	4802      	ldr	r0, [pc, #8]	; (34bf8 <vsniprintf+0x14>)
   34bf0:	6800      	ldr	r0, [r0, #0]
   34bf2:	f7ff ffcb 	bl	34b8c <_vsniprintf_r>
   34bf6:	bd0e      	pop	{r1, r2, r3, pc}
   34bf8:	20000120 	.word	0x20000120

00034bfc <__swbuf_r>:
   34bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34bfe:	0005      	movs	r5, r0
   34c00:	000e      	movs	r6, r1
   34c02:	0014      	movs	r4, r2
   34c04:	2800      	cmp	r0, #0
   34c06:	d004      	beq.n	34c12 <__swbuf_r+0x16>
   34c08:	6983      	ldr	r3, [r0, #24]
   34c0a:	2b00      	cmp	r3, #0
   34c0c:	d101      	bne.n	34c12 <__swbuf_r+0x16>
   34c0e:	f000 f9b9 	bl	34f84 <__sinit>
   34c12:	4b22      	ldr	r3, [pc, #136]	; (34c9c <__swbuf_r+0xa0>)
   34c14:	429c      	cmp	r4, r3
   34c16:	d12d      	bne.n	34c74 <__swbuf_r+0x78>
   34c18:	686c      	ldr	r4, [r5, #4]
   34c1a:	69a3      	ldr	r3, [r4, #24]
   34c1c:	60a3      	str	r3, [r4, #8]
   34c1e:	89a3      	ldrh	r3, [r4, #12]
   34c20:	071b      	lsls	r3, r3, #28
   34c22:	d531      	bpl.n	34c88 <__swbuf_r+0x8c>
   34c24:	6923      	ldr	r3, [r4, #16]
   34c26:	2b00      	cmp	r3, #0
   34c28:	d02e      	beq.n	34c88 <__swbuf_r+0x8c>
   34c2a:	6823      	ldr	r3, [r4, #0]
   34c2c:	6922      	ldr	r2, [r4, #16]
   34c2e:	b2f7      	uxtb	r7, r6
   34c30:	1a98      	subs	r0, r3, r2
   34c32:	6963      	ldr	r3, [r4, #20]
   34c34:	b2f6      	uxtb	r6, r6
   34c36:	4298      	cmp	r0, r3
   34c38:	db05      	blt.n	34c46 <__swbuf_r+0x4a>
   34c3a:	0021      	movs	r1, r4
   34c3c:	0028      	movs	r0, r5
   34c3e:	f000 f933 	bl	34ea8 <_fflush_r>
   34c42:	2800      	cmp	r0, #0
   34c44:	d126      	bne.n	34c94 <__swbuf_r+0x98>
   34c46:	68a3      	ldr	r3, [r4, #8]
   34c48:	3001      	adds	r0, #1
   34c4a:	3b01      	subs	r3, #1
   34c4c:	60a3      	str	r3, [r4, #8]
   34c4e:	6823      	ldr	r3, [r4, #0]
   34c50:	1c5a      	adds	r2, r3, #1
   34c52:	6022      	str	r2, [r4, #0]
   34c54:	701f      	strb	r7, [r3, #0]
   34c56:	6963      	ldr	r3, [r4, #20]
   34c58:	4298      	cmp	r0, r3
   34c5a:	d004      	beq.n	34c66 <__swbuf_r+0x6a>
   34c5c:	89a3      	ldrh	r3, [r4, #12]
   34c5e:	07db      	lsls	r3, r3, #31
   34c60:	d51a      	bpl.n	34c98 <__swbuf_r+0x9c>
   34c62:	2e0a      	cmp	r6, #10
   34c64:	d118      	bne.n	34c98 <__swbuf_r+0x9c>
   34c66:	0021      	movs	r1, r4
   34c68:	0028      	movs	r0, r5
   34c6a:	f000 f91d 	bl	34ea8 <_fflush_r>
   34c6e:	2800      	cmp	r0, #0
   34c70:	d012      	beq.n	34c98 <__swbuf_r+0x9c>
   34c72:	e00f      	b.n	34c94 <__swbuf_r+0x98>
   34c74:	4b0a      	ldr	r3, [pc, #40]	; (34ca0 <__swbuf_r+0xa4>)
   34c76:	429c      	cmp	r4, r3
   34c78:	d101      	bne.n	34c7e <__swbuf_r+0x82>
   34c7a:	68ac      	ldr	r4, [r5, #8]
   34c7c:	e7cd      	b.n	34c1a <__swbuf_r+0x1e>
   34c7e:	4b09      	ldr	r3, [pc, #36]	; (34ca4 <__swbuf_r+0xa8>)
   34c80:	429c      	cmp	r4, r3
   34c82:	d1ca      	bne.n	34c1a <__swbuf_r+0x1e>
   34c84:	68ec      	ldr	r4, [r5, #12]
   34c86:	e7c8      	b.n	34c1a <__swbuf_r+0x1e>
   34c88:	0021      	movs	r1, r4
   34c8a:	0028      	movs	r0, r5
   34c8c:	f000 f80c 	bl	34ca8 <__swsetup_r>
   34c90:	2800      	cmp	r0, #0
   34c92:	d0ca      	beq.n	34c2a <__swbuf_r+0x2e>
   34c94:	2601      	movs	r6, #1
   34c96:	4276      	negs	r6, r6
   34c98:	0030      	movs	r0, r6
   34c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34c9c:	00039bec 	.word	0x00039bec
   34ca0:	00039c0c 	.word	0x00039c0c
   34ca4:	00039bcc 	.word	0x00039bcc

00034ca8 <__swsetup_r>:
   34ca8:	4b36      	ldr	r3, [pc, #216]	; (34d84 <__swsetup_r+0xdc>)
   34caa:	b570      	push	{r4, r5, r6, lr}
   34cac:	681d      	ldr	r5, [r3, #0]
   34cae:	0006      	movs	r6, r0
   34cb0:	000c      	movs	r4, r1
   34cb2:	2d00      	cmp	r5, #0
   34cb4:	d005      	beq.n	34cc2 <__swsetup_r+0x1a>
   34cb6:	69ab      	ldr	r3, [r5, #24]
   34cb8:	2b00      	cmp	r3, #0
   34cba:	d102      	bne.n	34cc2 <__swsetup_r+0x1a>
   34cbc:	0028      	movs	r0, r5
   34cbe:	f000 f961 	bl	34f84 <__sinit>
   34cc2:	4b31      	ldr	r3, [pc, #196]	; (34d88 <__swsetup_r+0xe0>)
   34cc4:	429c      	cmp	r4, r3
   34cc6:	d10f      	bne.n	34ce8 <__swsetup_r+0x40>
   34cc8:	686c      	ldr	r4, [r5, #4]
   34cca:	230c      	movs	r3, #12
   34ccc:	5ee2      	ldrsh	r2, [r4, r3]
   34cce:	b293      	uxth	r3, r2
   34cd0:	0719      	lsls	r1, r3, #28
   34cd2:	d42d      	bmi.n	34d30 <__swsetup_r+0x88>
   34cd4:	06d9      	lsls	r1, r3, #27
   34cd6:	d411      	bmi.n	34cfc <__swsetup_r+0x54>
   34cd8:	2309      	movs	r3, #9
   34cda:	2001      	movs	r0, #1
   34cdc:	6033      	str	r3, [r6, #0]
   34cde:	3337      	adds	r3, #55	; 0x37
   34ce0:	4313      	orrs	r3, r2
   34ce2:	81a3      	strh	r3, [r4, #12]
   34ce4:	4240      	negs	r0, r0
   34ce6:	bd70      	pop	{r4, r5, r6, pc}
   34ce8:	4b28      	ldr	r3, [pc, #160]	; (34d8c <__swsetup_r+0xe4>)
   34cea:	429c      	cmp	r4, r3
   34cec:	d101      	bne.n	34cf2 <__swsetup_r+0x4a>
   34cee:	68ac      	ldr	r4, [r5, #8]
   34cf0:	e7eb      	b.n	34cca <__swsetup_r+0x22>
   34cf2:	4b27      	ldr	r3, [pc, #156]	; (34d90 <__swsetup_r+0xe8>)
   34cf4:	429c      	cmp	r4, r3
   34cf6:	d1e8      	bne.n	34cca <__swsetup_r+0x22>
   34cf8:	68ec      	ldr	r4, [r5, #12]
   34cfa:	e7e6      	b.n	34cca <__swsetup_r+0x22>
   34cfc:	075b      	lsls	r3, r3, #29
   34cfe:	d513      	bpl.n	34d28 <__swsetup_r+0x80>
   34d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34d02:	2900      	cmp	r1, #0
   34d04:	d008      	beq.n	34d18 <__swsetup_r+0x70>
   34d06:	0023      	movs	r3, r4
   34d08:	3344      	adds	r3, #68	; 0x44
   34d0a:	4299      	cmp	r1, r3
   34d0c:	d002      	beq.n	34d14 <__swsetup_r+0x6c>
   34d0e:	0030      	movs	r0, r6
   34d10:	f7ff fc86 	bl	34620 <_free_r>
   34d14:	2300      	movs	r3, #0
   34d16:	6363      	str	r3, [r4, #52]	; 0x34
   34d18:	2224      	movs	r2, #36	; 0x24
   34d1a:	89a3      	ldrh	r3, [r4, #12]
   34d1c:	4393      	bics	r3, r2
   34d1e:	81a3      	strh	r3, [r4, #12]
   34d20:	2300      	movs	r3, #0
   34d22:	6063      	str	r3, [r4, #4]
   34d24:	6923      	ldr	r3, [r4, #16]
   34d26:	6023      	str	r3, [r4, #0]
   34d28:	2308      	movs	r3, #8
   34d2a:	89a2      	ldrh	r2, [r4, #12]
   34d2c:	4313      	orrs	r3, r2
   34d2e:	81a3      	strh	r3, [r4, #12]
   34d30:	6923      	ldr	r3, [r4, #16]
   34d32:	2b00      	cmp	r3, #0
   34d34:	d10b      	bne.n	34d4e <__swsetup_r+0xa6>
   34d36:	21a0      	movs	r1, #160	; 0xa0
   34d38:	2280      	movs	r2, #128	; 0x80
   34d3a:	89a3      	ldrh	r3, [r4, #12]
   34d3c:	0089      	lsls	r1, r1, #2
   34d3e:	0092      	lsls	r2, r2, #2
   34d40:	400b      	ands	r3, r1
   34d42:	4293      	cmp	r3, r2
   34d44:	d003      	beq.n	34d4e <__swsetup_r+0xa6>
   34d46:	0021      	movs	r1, r4
   34d48:	0030      	movs	r0, r6
   34d4a:	f000 f9e9 	bl	35120 <__smakebuf_r>
   34d4e:	2301      	movs	r3, #1
   34d50:	89a2      	ldrh	r2, [r4, #12]
   34d52:	4013      	ands	r3, r2
   34d54:	d011      	beq.n	34d7a <__swsetup_r+0xd2>
   34d56:	2300      	movs	r3, #0
   34d58:	60a3      	str	r3, [r4, #8]
   34d5a:	6963      	ldr	r3, [r4, #20]
   34d5c:	425b      	negs	r3, r3
   34d5e:	61a3      	str	r3, [r4, #24]
   34d60:	2000      	movs	r0, #0
   34d62:	6923      	ldr	r3, [r4, #16]
   34d64:	4283      	cmp	r3, r0
   34d66:	d1be      	bne.n	34ce6 <__swsetup_r+0x3e>
   34d68:	230c      	movs	r3, #12
   34d6a:	5ee2      	ldrsh	r2, [r4, r3]
   34d6c:	0613      	lsls	r3, r2, #24
   34d6e:	d5ba      	bpl.n	34ce6 <__swsetup_r+0x3e>
   34d70:	2340      	movs	r3, #64	; 0x40
   34d72:	4313      	orrs	r3, r2
   34d74:	81a3      	strh	r3, [r4, #12]
   34d76:	3801      	subs	r0, #1
   34d78:	e7b5      	b.n	34ce6 <__swsetup_r+0x3e>
   34d7a:	0792      	lsls	r2, r2, #30
   34d7c:	d400      	bmi.n	34d80 <__swsetup_r+0xd8>
   34d7e:	6963      	ldr	r3, [r4, #20]
   34d80:	60a3      	str	r3, [r4, #8]
   34d82:	e7ed      	b.n	34d60 <__swsetup_r+0xb8>
   34d84:	20000120 	.word	0x20000120
   34d88:	00039bec 	.word	0x00039bec
   34d8c:	00039c0c 	.word	0x00039c0c
   34d90:	00039bcc 	.word	0x00039bcc

00034d94 <__sflush_r>:
   34d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34d96:	898a      	ldrh	r2, [r1, #12]
   34d98:	0005      	movs	r5, r0
   34d9a:	000c      	movs	r4, r1
   34d9c:	0713      	lsls	r3, r2, #28
   34d9e:	d460      	bmi.n	34e62 <__sflush_r+0xce>
   34da0:	684b      	ldr	r3, [r1, #4]
   34da2:	2b00      	cmp	r3, #0
   34da4:	dc04      	bgt.n	34db0 <__sflush_r+0x1c>
   34da6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34da8:	2b00      	cmp	r3, #0
   34daa:	dc01      	bgt.n	34db0 <__sflush_r+0x1c>
   34dac:	2000      	movs	r0, #0
   34dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34db0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34db2:	2f00      	cmp	r7, #0
   34db4:	d0fa      	beq.n	34dac <__sflush_r+0x18>
   34db6:	2300      	movs	r3, #0
   34db8:	682e      	ldr	r6, [r5, #0]
   34dba:	602b      	str	r3, [r5, #0]
   34dbc:	2380      	movs	r3, #128	; 0x80
   34dbe:	015b      	lsls	r3, r3, #5
   34dc0:	401a      	ands	r2, r3
   34dc2:	d034      	beq.n	34e2e <__sflush_r+0x9a>
   34dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34dc6:	89a3      	ldrh	r3, [r4, #12]
   34dc8:	075b      	lsls	r3, r3, #29
   34dca:	d506      	bpl.n	34dda <__sflush_r+0x46>
   34dcc:	6863      	ldr	r3, [r4, #4]
   34dce:	1ac0      	subs	r0, r0, r3
   34dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34dd2:	2b00      	cmp	r3, #0
   34dd4:	d001      	beq.n	34dda <__sflush_r+0x46>
   34dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34dd8:	1ac0      	subs	r0, r0, r3
   34dda:	0002      	movs	r2, r0
   34ddc:	6a21      	ldr	r1, [r4, #32]
   34dde:	2300      	movs	r3, #0
   34de0:	0028      	movs	r0, r5
   34de2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34de4:	47b8      	blx	r7
   34de6:	89a1      	ldrh	r1, [r4, #12]
   34de8:	1c43      	adds	r3, r0, #1
   34dea:	d106      	bne.n	34dfa <__sflush_r+0x66>
   34dec:	682b      	ldr	r3, [r5, #0]
   34dee:	2b1d      	cmp	r3, #29
   34df0:	d831      	bhi.n	34e56 <__sflush_r+0xc2>
   34df2:	4a2c      	ldr	r2, [pc, #176]	; (34ea4 <__sflush_r+0x110>)
   34df4:	40da      	lsrs	r2, r3
   34df6:	07d3      	lsls	r3, r2, #31
   34df8:	d52d      	bpl.n	34e56 <__sflush_r+0xc2>
   34dfa:	2300      	movs	r3, #0
   34dfc:	6063      	str	r3, [r4, #4]
   34dfe:	6923      	ldr	r3, [r4, #16]
   34e00:	6023      	str	r3, [r4, #0]
   34e02:	04cb      	lsls	r3, r1, #19
   34e04:	d505      	bpl.n	34e12 <__sflush_r+0x7e>
   34e06:	1c43      	adds	r3, r0, #1
   34e08:	d102      	bne.n	34e10 <__sflush_r+0x7c>
   34e0a:	682b      	ldr	r3, [r5, #0]
   34e0c:	2b00      	cmp	r3, #0
   34e0e:	d100      	bne.n	34e12 <__sflush_r+0x7e>
   34e10:	6560      	str	r0, [r4, #84]	; 0x54
   34e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34e14:	602e      	str	r6, [r5, #0]
   34e16:	2900      	cmp	r1, #0
   34e18:	d0c8      	beq.n	34dac <__sflush_r+0x18>
   34e1a:	0023      	movs	r3, r4
   34e1c:	3344      	adds	r3, #68	; 0x44
   34e1e:	4299      	cmp	r1, r3
   34e20:	d002      	beq.n	34e28 <__sflush_r+0x94>
   34e22:	0028      	movs	r0, r5
   34e24:	f7ff fbfc 	bl	34620 <_free_r>
   34e28:	2000      	movs	r0, #0
   34e2a:	6360      	str	r0, [r4, #52]	; 0x34
   34e2c:	e7bf      	b.n	34dae <__sflush_r+0x1a>
   34e2e:	2301      	movs	r3, #1
   34e30:	6a21      	ldr	r1, [r4, #32]
   34e32:	0028      	movs	r0, r5
   34e34:	47b8      	blx	r7
   34e36:	1c43      	adds	r3, r0, #1
   34e38:	d1c5      	bne.n	34dc6 <__sflush_r+0x32>
   34e3a:	682b      	ldr	r3, [r5, #0]
   34e3c:	2b00      	cmp	r3, #0
   34e3e:	d0c2      	beq.n	34dc6 <__sflush_r+0x32>
   34e40:	2b1d      	cmp	r3, #29
   34e42:	d001      	beq.n	34e48 <__sflush_r+0xb4>
   34e44:	2b16      	cmp	r3, #22
   34e46:	d101      	bne.n	34e4c <__sflush_r+0xb8>
   34e48:	602e      	str	r6, [r5, #0]
   34e4a:	e7af      	b.n	34dac <__sflush_r+0x18>
   34e4c:	2340      	movs	r3, #64	; 0x40
   34e4e:	89a2      	ldrh	r2, [r4, #12]
   34e50:	4313      	orrs	r3, r2
   34e52:	81a3      	strh	r3, [r4, #12]
   34e54:	e7ab      	b.n	34dae <__sflush_r+0x1a>
   34e56:	2340      	movs	r3, #64	; 0x40
   34e58:	430b      	orrs	r3, r1
   34e5a:	2001      	movs	r0, #1
   34e5c:	81a3      	strh	r3, [r4, #12]
   34e5e:	4240      	negs	r0, r0
   34e60:	e7a5      	b.n	34dae <__sflush_r+0x1a>
   34e62:	690f      	ldr	r7, [r1, #16]
   34e64:	2f00      	cmp	r7, #0
   34e66:	d0a1      	beq.n	34dac <__sflush_r+0x18>
   34e68:	680b      	ldr	r3, [r1, #0]
   34e6a:	600f      	str	r7, [r1, #0]
   34e6c:	1bdb      	subs	r3, r3, r7
   34e6e:	9301      	str	r3, [sp, #4]
   34e70:	2300      	movs	r3, #0
   34e72:	0792      	lsls	r2, r2, #30
   34e74:	d100      	bne.n	34e78 <__sflush_r+0xe4>
   34e76:	694b      	ldr	r3, [r1, #20]
   34e78:	60a3      	str	r3, [r4, #8]
   34e7a:	9b01      	ldr	r3, [sp, #4]
   34e7c:	2b00      	cmp	r3, #0
   34e7e:	dc00      	bgt.n	34e82 <__sflush_r+0xee>
   34e80:	e794      	b.n	34dac <__sflush_r+0x18>
   34e82:	9b01      	ldr	r3, [sp, #4]
   34e84:	003a      	movs	r2, r7
   34e86:	6a21      	ldr	r1, [r4, #32]
   34e88:	0028      	movs	r0, r5
   34e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34e8c:	47b0      	blx	r6
   34e8e:	2800      	cmp	r0, #0
   34e90:	dc03      	bgt.n	34e9a <__sflush_r+0x106>
   34e92:	2340      	movs	r3, #64	; 0x40
   34e94:	89a2      	ldrh	r2, [r4, #12]
   34e96:	4313      	orrs	r3, r2
   34e98:	e7df      	b.n	34e5a <__sflush_r+0xc6>
   34e9a:	9b01      	ldr	r3, [sp, #4]
   34e9c:	183f      	adds	r7, r7, r0
   34e9e:	1a1b      	subs	r3, r3, r0
   34ea0:	9301      	str	r3, [sp, #4]
   34ea2:	e7ea      	b.n	34e7a <__sflush_r+0xe6>
   34ea4:	20400001 	.word	0x20400001

00034ea8 <_fflush_r>:
   34ea8:	690b      	ldr	r3, [r1, #16]
   34eaa:	b570      	push	{r4, r5, r6, lr}
   34eac:	0005      	movs	r5, r0
   34eae:	000c      	movs	r4, r1
   34eb0:	2b00      	cmp	r3, #0
   34eb2:	d101      	bne.n	34eb8 <_fflush_r+0x10>
   34eb4:	2000      	movs	r0, #0
   34eb6:	bd70      	pop	{r4, r5, r6, pc}
   34eb8:	2800      	cmp	r0, #0
   34eba:	d004      	beq.n	34ec6 <_fflush_r+0x1e>
   34ebc:	6983      	ldr	r3, [r0, #24]
   34ebe:	2b00      	cmp	r3, #0
   34ec0:	d101      	bne.n	34ec6 <_fflush_r+0x1e>
   34ec2:	f000 f85f 	bl	34f84 <__sinit>
   34ec6:	4b0b      	ldr	r3, [pc, #44]	; (34ef4 <_fflush_r+0x4c>)
   34ec8:	429c      	cmp	r4, r3
   34eca:	d109      	bne.n	34ee0 <_fflush_r+0x38>
   34ecc:	686c      	ldr	r4, [r5, #4]
   34ece:	220c      	movs	r2, #12
   34ed0:	5ea3      	ldrsh	r3, [r4, r2]
   34ed2:	2b00      	cmp	r3, #0
   34ed4:	d0ee      	beq.n	34eb4 <_fflush_r+0xc>
   34ed6:	0021      	movs	r1, r4
   34ed8:	0028      	movs	r0, r5
   34eda:	f7ff ff5b 	bl	34d94 <__sflush_r>
   34ede:	e7ea      	b.n	34eb6 <_fflush_r+0xe>
   34ee0:	4b05      	ldr	r3, [pc, #20]	; (34ef8 <_fflush_r+0x50>)
   34ee2:	429c      	cmp	r4, r3
   34ee4:	d101      	bne.n	34eea <_fflush_r+0x42>
   34ee6:	68ac      	ldr	r4, [r5, #8]
   34ee8:	e7f1      	b.n	34ece <_fflush_r+0x26>
   34eea:	4b04      	ldr	r3, [pc, #16]	; (34efc <_fflush_r+0x54>)
   34eec:	429c      	cmp	r4, r3
   34eee:	d1ee      	bne.n	34ece <_fflush_r+0x26>
   34ef0:	68ec      	ldr	r4, [r5, #12]
   34ef2:	e7ec      	b.n	34ece <_fflush_r+0x26>
   34ef4:	00039bec 	.word	0x00039bec
   34ef8:	00039c0c 	.word	0x00039c0c
   34efc:	00039bcc 	.word	0x00039bcc

00034f00 <_cleanup_r>:
   34f00:	b510      	push	{r4, lr}
   34f02:	4902      	ldr	r1, [pc, #8]	; (34f0c <_cleanup_r+0xc>)
   34f04:	f000 f8b2 	bl	3506c <_fwalk_reent>
   34f08:	bd10      	pop	{r4, pc}
   34f0a:	46c0      	nop			; (mov r8, r8)
   34f0c:	00034ea9 	.word	0x00034ea9

00034f10 <std.isra.0>:
   34f10:	2300      	movs	r3, #0
   34f12:	b510      	push	{r4, lr}
   34f14:	0004      	movs	r4, r0
   34f16:	6003      	str	r3, [r0, #0]
   34f18:	6043      	str	r3, [r0, #4]
   34f1a:	6083      	str	r3, [r0, #8]
   34f1c:	8181      	strh	r1, [r0, #12]
   34f1e:	6643      	str	r3, [r0, #100]	; 0x64
   34f20:	81c2      	strh	r2, [r0, #14]
   34f22:	6103      	str	r3, [r0, #16]
   34f24:	6143      	str	r3, [r0, #20]
   34f26:	6183      	str	r3, [r0, #24]
   34f28:	0019      	movs	r1, r3
   34f2a:	2208      	movs	r2, #8
   34f2c:	305c      	adds	r0, #92	; 0x5c
   34f2e:	f7ff fb6e 	bl	3460e <memset>
   34f32:	4b05      	ldr	r3, [pc, #20]	; (34f48 <std.isra.0+0x38>)
   34f34:	6224      	str	r4, [r4, #32]
   34f36:	6263      	str	r3, [r4, #36]	; 0x24
   34f38:	4b04      	ldr	r3, [pc, #16]	; (34f4c <std.isra.0+0x3c>)
   34f3a:	62a3      	str	r3, [r4, #40]	; 0x28
   34f3c:	4b04      	ldr	r3, [pc, #16]	; (34f50 <std.isra.0+0x40>)
   34f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
   34f40:	4b04      	ldr	r3, [pc, #16]	; (34f54 <std.isra.0+0x44>)
   34f42:	6323      	str	r3, [r4, #48]	; 0x30
   34f44:	bd10      	pop	{r4, pc}
   34f46:	46c0      	nop			; (mov r8, r8)
   34f48:	000357ad 	.word	0x000357ad
   34f4c:	000357d5 	.word	0x000357d5
   34f50:	0003580d 	.word	0x0003580d
   34f54:	00035839 	.word	0x00035839

00034f58 <__sfmoreglue>:
   34f58:	b570      	push	{r4, r5, r6, lr}
   34f5a:	2568      	movs	r5, #104	; 0x68
   34f5c:	1e4a      	subs	r2, r1, #1
   34f5e:	4355      	muls	r5, r2
   34f60:	000e      	movs	r6, r1
   34f62:	0029      	movs	r1, r5
   34f64:	3174      	adds	r1, #116	; 0x74
   34f66:	f7ff fba5 	bl	346b4 <_malloc_r>
   34f6a:	1e04      	subs	r4, r0, #0
   34f6c:	d008      	beq.n	34f80 <__sfmoreglue+0x28>
   34f6e:	2100      	movs	r1, #0
   34f70:	002a      	movs	r2, r5
   34f72:	6001      	str	r1, [r0, #0]
   34f74:	6046      	str	r6, [r0, #4]
   34f76:	300c      	adds	r0, #12
   34f78:	60a0      	str	r0, [r4, #8]
   34f7a:	3268      	adds	r2, #104	; 0x68
   34f7c:	f7ff fb47 	bl	3460e <memset>
   34f80:	0020      	movs	r0, r4
   34f82:	bd70      	pop	{r4, r5, r6, pc}

00034f84 <__sinit>:
   34f84:	6983      	ldr	r3, [r0, #24]
   34f86:	b513      	push	{r0, r1, r4, lr}
   34f88:	0004      	movs	r4, r0
   34f8a:	2b00      	cmp	r3, #0
   34f8c:	d128      	bne.n	34fe0 <__sinit+0x5c>
   34f8e:	6483      	str	r3, [r0, #72]	; 0x48
   34f90:	64c3      	str	r3, [r0, #76]	; 0x4c
   34f92:	6503      	str	r3, [r0, #80]	; 0x50
   34f94:	4b13      	ldr	r3, [pc, #76]	; (34fe4 <__sinit+0x60>)
   34f96:	4a14      	ldr	r2, [pc, #80]	; (34fe8 <__sinit+0x64>)
   34f98:	681b      	ldr	r3, [r3, #0]
   34f9a:	6282      	str	r2, [r0, #40]	; 0x28
   34f9c:	9301      	str	r3, [sp, #4]
   34f9e:	4298      	cmp	r0, r3
   34fa0:	d101      	bne.n	34fa6 <__sinit+0x22>
   34fa2:	2301      	movs	r3, #1
   34fa4:	6183      	str	r3, [r0, #24]
   34fa6:	0020      	movs	r0, r4
   34fa8:	f000 f820 	bl	34fec <__sfp>
   34fac:	6060      	str	r0, [r4, #4]
   34fae:	0020      	movs	r0, r4
   34fb0:	f000 f81c 	bl	34fec <__sfp>
   34fb4:	60a0      	str	r0, [r4, #8]
   34fb6:	0020      	movs	r0, r4
   34fb8:	f000 f818 	bl	34fec <__sfp>
   34fbc:	2200      	movs	r2, #0
   34fbe:	60e0      	str	r0, [r4, #12]
   34fc0:	2104      	movs	r1, #4
   34fc2:	6860      	ldr	r0, [r4, #4]
   34fc4:	f7ff ffa4 	bl	34f10 <std.isra.0>
   34fc8:	2201      	movs	r2, #1
   34fca:	2109      	movs	r1, #9
   34fcc:	68a0      	ldr	r0, [r4, #8]
   34fce:	f7ff ff9f 	bl	34f10 <std.isra.0>
   34fd2:	2202      	movs	r2, #2
   34fd4:	2112      	movs	r1, #18
   34fd6:	68e0      	ldr	r0, [r4, #12]
   34fd8:	f7ff ff9a 	bl	34f10 <std.isra.0>
   34fdc:	2301      	movs	r3, #1
   34fde:	61a3      	str	r3, [r4, #24]
   34fe0:	bd13      	pop	{r0, r1, r4, pc}
   34fe2:	46c0      	nop			; (mov r8, r8)
   34fe4:	00039bc8 	.word	0x00039bc8
   34fe8:	00034f01 	.word	0x00034f01

00034fec <__sfp>:
   34fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34fee:	4b1e      	ldr	r3, [pc, #120]	; (35068 <__sfp+0x7c>)
   34ff0:	0007      	movs	r7, r0
   34ff2:	681e      	ldr	r6, [r3, #0]
   34ff4:	69b3      	ldr	r3, [r6, #24]
   34ff6:	2b00      	cmp	r3, #0
   34ff8:	d102      	bne.n	35000 <__sfp+0x14>
   34ffa:	0030      	movs	r0, r6
   34ffc:	f7ff ffc2 	bl	34f84 <__sinit>
   35000:	3648      	adds	r6, #72	; 0x48
   35002:	68b4      	ldr	r4, [r6, #8]
   35004:	6873      	ldr	r3, [r6, #4]
   35006:	3b01      	subs	r3, #1
   35008:	d504      	bpl.n	35014 <__sfp+0x28>
   3500a:	6833      	ldr	r3, [r6, #0]
   3500c:	2b00      	cmp	r3, #0
   3500e:	d007      	beq.n	35020 <__sfp+0x34>
   35010:	6836      	ldr	r6, [r6, #0]
   35012:	e7f6      	b.n	35002 <__sfp+0x16>
   35014:	220c      	movs	r2, #12
   35016:	5ea5      	ldrsh	r5, [r4, r2]
   35018:	2d00      	cmp	r5, #0
   3501a:	d00d      	beq.n	35038 <__sfp+0x4c>
   3501c:	3468      	adds	r4, #104	; 0x68
   3501e:	e7f2      	b.n	35006 <__sfp+0x1a>
   35020:	2104      	movs	r1, #4
   35022:	0038      	movs	r0, r7
   35024:	f7ff ff98 	bl	34f58 <__sfmoreglue>
   35028:	6030      	str	r0, [r6, #0]
   3502a:	2800      	cmp	r0, #0
   3502c:	d1f0      	bne.n	35010 <__sfp+0x24>
   3502e:	230c      	movs	r3, #12
   35030:	0004      	movs	r4, r0
   35032:	603b      	str	r3, [r7, #0]
   35034:	0020      	movs	r0, r4
   35036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35038:	2301      	movs	r3, #1
   3503a:	0020      	movs	r0, r4
   3503c:	425b      	negs	r3, r3
   3503e:	81e3      	strh	r3, [r4, #14]
   35040:	3302      	adds	r3, #2
   35042:	81a3      	strh	r3, [r4, #12]
   35044:	6665      	str	r5, [r4, #100]	; 0x64
   35046:	6025      	str	r5, [r4, #0]
   35048:	60a5      	str	r5, [r4, #8]
   3504a:	6065      	str	r5, [r4, #4]
   3504c:	6125      	str	r5, [r4, #16]
   3504e:	6165      	str	r5, [r4, #20]
   35050:	61a5      	str	r5, [r4, #24]
   35052:	2208      	movs	r2, #8
   35054:	0029      	movs	r1, r5
   35056:	305c      	adds	r0, #92	; 0x5c
   35058:	f7ff fad9 	bl	3460e <memset>
   3505c:	6365      	str	r5, [r4, #52]	; 0x34
   3505e:	63a5      	str	r5, [r4, #56]	; 0x38
   35060:	64a5      	str	r5, [r4, #72]	; 0x48
   35062:	64e5      	str	r5, [r4, #76]	; 0x4c
   35064:	e7e6      	b.n	35034 <__sfp+0x48>
   35066:	46c0      	nop			; (mov r8, r8)
   35068:	00039bc8 	.word	0x00039bc8

0003506c <_fwalk_reent>:
   3506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3506e:	0004      	movs	r4, r0
   35070:	0007      	movs	r7, r0
   35072:	2600      	movs	r6, #0
   35074:	9101      	str	r1, [sp, #4]
   35076:	3448      	adds	r4, #72	; 0x48
   35078:	2c00      	cmp	r4, #0
   3507a:	d101      	bne.n	35080 <_fwalk_reent+0x14>
   3507c:	0030      	movs	r0, r6
   3507e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35080:	6863      	ldr	r3, [r4, #4]
   35082:	68a5      	ldr	r5, [r4, #8]
   35084:	9300      	str	r3, [sp, #0]
   35086:	9b00      	ldr	r3, [sp, #0]
   35088:	3b01      	subs	r3, #1
   3508a:	9300      	str	r3, [sp, #0]
   3508c:	d501      	bpl.n	35092 <_fwalk_reent+0x26>
   3508e:	6824      	ldr	r4, [r4, #0]
   35090:	e7f2      	b.n	35078 <_fwalk_reent+0xc>
   35092:	89ab      	ldrh	r3, [r5, #12]
   35094:	2b01      	cmp	r3, #1
   35096:	d908      	bls.n	350aa <_fwalk_reent+0x3e>
   35098:	220e      	movs	r2, #14
   3509a:	5eab      	ldrsh	r3, [r5, r2]
   3509c:	3301      	adds	r3, #1
   3509e:	d004      	beq.n	350aa <_fwalk_reent+0x3e>
   350a0:	0029      	movs	r1, r5
   350a2:	0038      	movs	r0, r7
   350a4:	9b01      	ldr	r3, [sp, #4]
   350a6:	4798      	blx	r3
   350a8:	4306      	orrs	r6, r0
   350aa:	3568      	adds	r5, #104	; 0x68
   350ac:	e7eb      	b.n	35086 <_fwalk_reent+0x1a>

000350ae <__locale_ctype_ptr_l>:
   350ae:	30ec      	adds	r0, #236	; 0xec
   350b0:	6800      	ldr	r0, [r0, #0]
   350b2:	4770      	bx	lr

000350b4 <__locale_ctype_ptr>:
   350b4:	4b04      	ldr	r3, [pc, #16]	; (350c8 <__locale_ctype_ptr+0x14>)
   350b6:	681b      	ldr	r3, [r3, #0]
   350b8:	6a1b      	ldr	r3, [r3, #32]
   350ba:	2b00      	cmp	r3, #0
   350bc:	d100      	bne.n	350c0 <__locale_ctype_ptr+0xc>
   350be:	4b03      	ldr	r3, [pc, #12]	; (350cc <__locale_ctype_ptr+0x18>)
   350c0:	33ec      	adds	r3, #236	; 0xec
   350c2:	6818      	ldr	r0, [r3, #0]
   350c4:	4770      	bx	lr
   350c6:	46c0      	nop			; (mov r8, r8)
   350c8:	20000120 	.word	0x20000120
   350cc:	20000184 	.word	0x20000184

000350d0 <__swhatbuf_r>:
   350d0:	b570      	push	{r4, r5, r6, lr}
   350d2:	000e      	movs	r6, r1
   350d4:	001d      	movs	r5, r3
   350d6:	230e      	movs	r3, #14
   350d8:	5ec9      	ldrsh	r1, [r1, r3]
   350da:	b090      	sub	sp, #64	; 0x40
   350dc:	0014      	movs	r4, r2
   350de:	2900      	cmp	r1, #0
   350e0:	da07      	bge.n	350f2 <__swhatbuf_r+0x22>
   350e2:	2300      	movs	r3, #0
   350e4:	602b      	str	r3, [r5, #0]
   350e6:	89b3      	ldrh	r3, [r6, #12]
   350e8:	061b      	lsls	r3, r3, #24
   350ea:	d411      	bmi.n	35110 <__swhatbuf_r+0x40>
   350ec:	2380      	movs	r3, #128	; 0x80
   350ee:	00db      	lsls	r3, r3, #3
   350f0:	e00f      	b.n	35112 <__swhatbuf_r+0x42>
   350f2:	aa01      	add	r2, sp, #4
   350f4:	f000 fbe6 	bl	358c4 <_fstat_r>
   350f8:	2800      	cmp	r0, #0
   350fa:	dbf2      	blt.n	350e2 <__swhatbuf_r+0x12>
   350fc:	22f0      	movs	r2, #240	; 0xf0
   350fe:	9b02      	ldr	r3, [sp, #8]
   35100:	0212      	lsls	r2, r2, #8
   35102:	4013      	ands	r3, r2
   35104:	4a05      	ldr	r2, [pc, #20]	; (3511c <__swhatbuf_r+0x4c>)
   35106:	189b      	adds	r3, r3, r2
   35108:	425a      	negs	r2, r3
   3510a:	4153      	adcs	r3, r2
   3510c:	602b      	str	r3, [r5, #0]
   3510e:	e7ed      	b.n	350ec <__swhatbuf_r+0x1c>
   35110:	2340      	movs	r3, #64	; 0x40
   35112:	2000      	movs	r0, #0
   35114:	6023      	str	r3, [r4, #0]
   35116:	b010      	add	sp, #64	; 0x40
   35118:	bd70      	pop	{r4, r5, r6, pc}
   3511a:	46c0      	nop			; (mov r8, r8)
   3511c:	ffffe000 	.word	0xffffe000

00035120 <__smakebuf_r>:
   35120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35122:	2602      	movs	r6, #2
   35124:	898b      	ldrh	r3, [r1, #12]
   35126:	0005      	movs	r5, r0
   35128:	000c      	movs	r4, r1
   3512a:	4233      	tst	r3, r6
   3512c:	d006      	beq.n	3513c <__smakebuf_r+0x1c>
   3512e:	0023      	movs	r3, r4
   35130:	3347      	adds	r3, #71	; 0x47
   35132:	6023      	str	r3, [r4, #0]
   35134:	6123      	str	r3, [r4, #16]
   35136:	2301      	movs	r3, #1
   35138:	6163      	str	r3, [r4, #20]
   3513a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   3513c:	ab01      	add	r3, sp, #4
   3513e:	466a      	mov	r2, sp
   35140:	f7ff ffc6 	bl	350d0 <__swhatbuf_r>
   35144:	9900      	ldr	r1, [sp, #0]
   35146:	0007      	movs	r7, r0
   35148:	0028      	movs	r0, r5
   3514a:	f7ff fab3 	bl	346b4 <_malloc_r>
   3514e:	2800      	cmp	r0, #0
   35150:	d108      	bne.n	35164 <__smakebuf_r+0x44>
   35152:	220c      	movs	r2, #12
   35154:	5ea3      	ldrsh	r3, [r4, r2]
   35156:	059a      	lsls	r2, r3, #22
   35158:	d4ef      	bmi.n	3513a <__smakebuf_r+0x1a>
   3515a:	2203      	movs	r2, #3
   3515c:	4393      	bics	r3, r2
   3515e:	431e      	orrs	r6, r3
   35160:	81a6      	strh	r6, [r4, #12]
   35162:	e7e4      	b.n	3512e <__smakebuf_r+0xe>
   35164:	4b0f      	ldr	r3, [pc, #60]	; (351a4 <__smakebuf_r+0x84>)
   35166:	62ab      	str	r3, [r5, #40]	; 0x28
   35168:	2380      	movs	r3, #128	; 0x80
   3516a:	89a2      	ldrh	r2, [r4, #12]
   3516c:	6020      	str	r0, [r4, #0]
   3516e:	4313      	orrs	r3, r2
   35170:	81a3      	strh	r3, [r4, #12]
   35172:	9b00      	ldr	r3, [sp, #0]
   35174:	6120      	str	r0, [r4, #16]
   35176:	6163      	str	r3, [r4, #20]
   35178:	9b01      	ldr	r3, [sp, #4]
   3517a:	2b00      	cmp	r3, #0
   3517c:	d00d      	beq.n	3519a <__smakebuf_r+0x7a>
   3517e:	230e      	movs	r3, #14
   35180:	5ee1      	ldrsh	r1, [r4, r3]
   35182:	0028      	movs	r0, r5
   35184:	f000 fbb0 	bl	358e8 <_isatty_r>
   35188:	2800      	cmp	r0, #0
   3518a:	d006      	beq.n	3519a <__smakebuf_r+0x7a>
   3518c:	2203      	movs	r2, #3
   3518e:	89a3      	ldrh	r3, [r4, #12]
   35190:	4393      	bics	r3, r2
   35192:	001a      	movs	r2, r3
   35194:	2301      	movs	r3, #1
   35196:	4313      	orrs	r3, r2
   35198:	81a3      	strh	r3, [r4, #12]
   3519a:	89a0      	ldrh	r0, [r4, #12]
   3519c:	4338      	orrs	r0, r7
   3519e:	81a0      	strh	r0, [r4, #12]
   351a0:	e7cb      	b.n	3513a <__smakebuf_r+0x1a>
   351a2:	46c0      	nop			; (mov r8, r8)
   351a4:	00034f01 	.word	0x00034f01

000351a8 <__ascii_mbtowc>:
   351a8:	b082      	sub	sp, #8
   351aa:	2900      	cmp	r1, #0
   351ac:	d100      	bne.n	351b0 <__ascii_mbtowc+0x8>
   351ae:	a901      	add	r1, sp, #4
   351b0:	1e10      	subs	r0, r2, #0
   351b2:	d006      	beq.n	351c2 <__ascii_mbtowc+0x1a>
   351b4:	2b00      	cmp	r3, #0
   351b6:	d006      	beq.n	351c6 <__ascii_mbtowc+0x1e>
   351b8:	7813      	ldrb	r3, [r2, #0]
   351ba:	600b      	str	r3, [r1, #0]
   351bc:	7810      	ldrb	r0, [r2, #0]
   351be:	1e43      	subs	r3, r0, #1
   351c0:	4198      	sbcs	r0, r3
   351c2:	b002      	add	sp, #8
   351c4:	4770      	bx	lr
   351c6:	2002      	movs	r0, #2
   351c8:	4240      	negs	r0, r0
   351ca:	e7fa      	b.n	351c2 <__ascii_mbtowc+0x1a>

000351cc <__malloc_lock>:
   351cc:	4770      	bx	lr

000351ce <__malloc_unlock>:
   351ce:	4770      	bx	lr

000351d0 <__ssputs_r>:
   351d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   351d2:	688e      	ldr	r6, [r1, #8]
   351d4:	b085      	sub	sp, #20
   351d6:	0007      	movs	r7, r0
   351d8:	000c      	movs	r4, r1
   351da:	9203      	str	r2, [sp, #12]
   351dc:	9301      	str	r3, [sp, #4]
   351de:	429e      	cmp	r6, r3
   351e0:	d839      	bhi.n	35256 <__ssputs_r+0x86>
   351e2:	2390      	movs	r3, #144	; 0x90
   351e4:	898a      	ldrh	r2, [r1, #12]
   351e6:	00db      	lsls	r3, r3, #3
   351e8:	421a      	tst	r2, r3
   351ea:	d034      	beq.n	35256 <__ssputs_r+0x86>
   351ec:	2503      	movs	r5, #3
   351ee:	6909      	ldr	r1, [r1, #16]
   351f0:	6823      	ldr	r3, [r4, #0]
   351f2:	1a5b      	subs	r3, r3, r1
   351f4:	9302      	str	r3, [sp, #8]
   351f6:	6963      	ldr	r3, [r4, #20]
   351f8:	9802      	ldr	r0, [sp, #8]
   351fa:	435d      	muls	r5, r3
   351fc:	0feb      	lsrs	r3, r5, #31
   351fe:	195d      	adds	r5, r3, r5
   35200:	9b01      	ldr	r3, [sp, #4]
   35202:	106d      	asrs	r5, r5, #1
   35204:	3301      	adds	r3, #1
   35206:	181b      	adds	r3, r3, r0
   35208:	42ab      	cmp	r3, r5
   3520a:	d900      	bls.n	3520e <__ssputs_r+0x3e>
   3520c:	001d      	movs	r5, r3
   3520e:	0553      	lsls	r3, r2, #21
   35210:	d532      	bpl.n	35278 <__ssputs_r+0xa8>
   35212:	0029      	movs	r1, r5
   35214:	0038      	movs	r0, r7
   35216:	f7ff fa4d 	bl	346b4 <_malloc_r>
   3521a:	1e06      	subs	r6, r0, #0
   3521c:	d109      	bne.n	35232 <__ssputs_r+0x62>
   3521e:	230c      	movs	r3, #12
   35220:	603b      	str	r3, [r7, #0]
   35222:	2340      	movs	r3, #64	; 0x40
   35224:	2001      	movs	r0, #1
   35226:	89a2      	ldrh	r2, [r4, #12]
   35228:	4240      	negs	r0, r0
   3522a:	4313      	orrs	r3, r2
   3522c:	81a3      	strh	r3, [r4, #12]
   3522e:	b005      	add	sp, #20
   35230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35232:	9a02      	ldr	r2, [sp, #8]
   35234:	6921      	ldr	r1, [r4, #16]
   35236:	f7ff f9cf 	bl	345d8 <memcpy>
   3523a:	89a3      	ldrh	r3, [r4, #12]
   3523c:	4a14      	ldr	r2, [pc, #80]	; (35290 <__ssputs_r+0xc0>)
   3523e:	401a      	ands	r2, r3
   35240:	2380      	movs	r3, #128	; 0x80
   35242:	4313      	orrs	r3, r2
   35244:	81a3      	strh	r3, [r4, #12]
   35246:	9b02      	ldr	r3, [sp, #8]
   35248:	6126      	str	r6, [r4, #16]
   3524a:	18f6      	adds	r6, r6, r3
   3524c:	6026      	str	r6, [r4, #0]
   3524e:	6165      	str	r5, [r4, #20]
   35250:	9e01      	ldr	r6, [sp, #4]
   35252:	1aed      	subs	r5, r5, r3
   35254:	60a5      	str	r5, [r4, #8]
   35256:	9b01      	ldr	r3, [sp, #4]
   35258:	42b3      	cmp	r3, r6
   3525a:	d200      	bcs.n	3525e <__ssputs_r+0x8e>
   3525c:	001e      	movs	r6, r3
   3525e:	0032      	movs	r2, r6
   35260:	9903      	ldr	r1, [sp, #12]
   35262:	6820      	ldr	r0, [r4, #0]
   35264:	f7ff f9c1 	bl	345ea <memmove>
   35268:	68a3      	ldr	r3, [r4, #8]
   3526a:	2000      	movs	r0, #0
   3526c:	1b9b      	subs	r3, r3, r6
   3526e:	60a3      	str	r3, [r4, #8]
   35270:	6823      	ldr	r3, [r4, #0]
   35272:	199e      	adds	r6, r3, r6
   35274:	6026      	str	r6, [r4, #0]
   35276:	e7da      	b.n	3522e <__ssputs_r+0x5e>
   35278:	002a      	movs	r2, r5
   3527a:	0038      	movs	r0, r7
   3527c:	f000 fb65 	bl	3594a <_realloc_r>
   35280:	1e06      	subs	r6, r0, #0
   35282:	d1e0      	bne.n	35246 <__ssputs_r+0x76>
   35284:	6921      	ldr	r1, [r4, #16]
   35286:	0038      	movs	r0, r7
   35288:	f7ff f9ca 	bl	34620 <_free_r>
   3528c:	e7c7      	b.n	3521e <__ssputs_r+0x4e>
   3528e:	46c0      	nop			; (mov r8, r8)
   35290:	fffffb7f 	.word	0xfffffb7f

00035294 <_svfiprintf_r>:
   35294:	b5f0      	push	{r4, r5, r6, r7, lr}
   35296:	b09f      	sub	sp, #124	; 0x7c
   35298:	9002      	str	r0, [sp, #8]
   3529a:	9305      	str	r3, [sp, #20]
   3529c:	898b      	ldrh	r3, [r1, #12]
   3529e:	000f      	movs	r7, r1
   352a0:	0016      	movs	r6, r2
   352a2:	061b      	lsls	r3, r3, #24
   352a4:	d511      	bpl.n	352ca <_svfiprintf_r+0x36>
   352a6:	690b      	ldr	r3, [r1, #16]
   352a8:	2b00      	cmp	r3, #0
   352aa:	d10e      	bne.n	352ca <_svfiprintf_r+0x36>
   352ac:	2140      	movs	r1, #64	; 0x40
   352ae:	f7ff fa01 	bl	346b4 <_malloc_r>
   352b2:	6038      	str	r0, [r7, #0]
   352b4:	6138      	str	r0, [r7, #16]
   352b6:	2800      	cmp	r0, #0
   352b8:	d105      	bne.n	352c6 <_svfiprintf_r+0x32>
   352ba:	230c      	movs	r3, #12
   352bc:	9a02      	ldr	r2, [sp, #8]
   352be:	3801      	subs	r0, #1
   352c0:	6013      	str	r3, [r2, #0]
   352c2:	b01f      	add	sp, #124	; 0x7c
   352c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   352c6:	2340      	movs	r3, #64	; 0x40
   352c8:	617b      	str	r3, [r7, #20]
   352ca:	2300      	movs	r3, #0
   352cc:	ad06      	add	r5, sp, #24
   352ce:	616b      	str	r3, [r5, #20]
   352d0:	3320      	adds	r3, #32
   352d2:	766b      	strb	r3, [r5, #25]
   352d4:	3310      	adds	r3, #16
   352d6:	76ab      	strb	r3, [r5, #26]
   352d8:	0034      	movs	r4, r6
   352da:	7823      	ldrb	r3, [r4, #0]
   352dc:	2b00      	cmp	r3, #0
   352de:	d147      	bne.n	35370 <_svfiprintf_r+0xdc>
   352e0:	1ba3      	subs	r3, r4, r6
   352e2:	9304      	str	r3, [sp, #16]
   352e4:	d00d      	beq.n	35302 <_svfiprintf_r+0x6e>
   352e6:	1ba3      	subs	r3, r4, r6
   352e8:	0032      	movs	r2, r6
   352ea:	0039      	movs	r1, r7
   352ec:	9802      	ldr	r0, [sp, #8]
   352ee:	f7ff ff6f 	bl	351d0 <__ssputs_r>
   352f2:	1c43      	adds	r3, r0, #1
   352f4:	d100      	bne.n	352f8 <_svfiprintf_r+0x64>
   352f6:	e0b5      	b.n	35464 <_svfiprintf_r+0x1d0>
   352f8:	696a      	ldr	r2, [r5, #20]
   352fa:	9b04      	ldr	r3, [sp, #16]
   352fc:	4694      	mov	ip, r2
   352fe:	4463      	add	r3, ip
   35300:	616b      	str	r3, [r5, #20]
   35302:	7823      	ldrb	r3, [r4, #0]
   35304:	2b00      	cmp	r3, #0
   35306:	d100      	bne.n	3530a <_svfiprintf_r+0x76>
   35308:	e0ac      	b.n	35464 <_svfiprintf_r+0x1d0>
   3530a:	2201      	movs	r2, #1
   3530c:	2300      	movs	r3, #0
   3530e:	4252      	negs	r2, r2
   35310:	606a      	str	r2, [r5, #4]
   35312:	a902      	add	r1, sp, #8
   35314:	3254      	adds	r2, #84	; 0x54
   35316:	1852      	adds	r2, r2, r1
   35318:	3401      	adds	r4, #1
   3531a:	602b      	str	r3, [r5, #0]
   3531c:	60eb      	str	r3, [r5, #12]
   3531e:	60ab      	str	r3, [r5, #8]
   35320:	7013      	strb	r3, [r2, #0]
   35322:	65ab      	str	r3, [r5, #88]	; 0x58
   35324:	4e58      	ldr	r6, [pc, #352]	; (35488 <_svfiprintf_r+0x1f4>)
   35326:	2205      	movs	r2, #5
   35328:	7821      	ldrb	r1, [r4, #0]
   3532a:	0030      	movs	r0, r6
   3532c:	f000 fb02 	bl	35934 <memchr>
   35330:	1c62      	adds	r2, r4, #1
   35332:	2800      	cmp	r0, #0
   35334:	d120      	bne.n	35378 <_svfiprintf_r+0xe4>
   35336:	6829      	ldr	r1, [r5, #0]
   35338:	06cb      	lsls	r3, r1, #27
   3533a:	d504      	bpl.n	35346 <_svfiprintf_r+0xb2>
   3533c:	2353      	movs	r3, #83	; 0x53
   3533e:	ae02      	add	r6, sp, #8
   35340:	3020      	adds	r0, #32
   35342:	199b      	adds	r3, r3, r6
   35344:	7018      	strb	r0, [r3, #0]
   35346:	070b      	lsls	r3, r1, #28
   35348:	d504      	bpl.n	35354 <_svfiprintf_r+0xc0>
   3534a:	2353      	movs	r3, #83	; 0x53
   3534c:	202b      	movs	r0, #43	; 0x2b
   3534e:	ae02      	add	r6, sp, #8
   35350:	199b      	adds	r3, r3, r6
   35352:	7018      	strb	r0, [r3, #0]
   35354:	7823      	ldrb	r3, [r4, #0]
   35356:	2b2a      	cmp	r3, #42	; 0x2a
   35358:	d016      	beq.n	35388 <_svfiprintf_r+0xf4>
   3535a:	2000      	movs	r0, #0
   3535c:	210a      	movs	r1, #10
   3535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35360:	7822      	ldrb	r2, [r4, #0]
   35362:	3a30      	subs	r2, #48	; 0x30
   35364:	2a09      	cmp	r2, #9
   35366:	d955      	bls.n	35414 <_svfiprintf_r+0x180>
   35368:	2800      	cmp	r0, #0
   3536a:	d015      	beq.n	35398 <_svfiprintf_r+0x104>
   3536c:	9309      	str	r3, [sp, #36]	; 0x24
   3536e:	e013      	b.n	35398 <_svfiprintf_r+0x104>
   35370:	2b25      	cmp	r3, #37	; 0x25
   35372:	d0b5      	beq.n	352e0 <_svfiprintf_r+0x4c>
   35374:	3401      	adds	r4, #1
   35376:	e7b0      	b.n	352da <_svfiprintf_r+0x46>
   35378:	2301      	movs	r3, #1
   3537a:	1b80      	subs	r0, r0, r6
   3537c:	4083      	lsls	r3, r0
   3537e:	6829      	ldr	r1, [r5, #0]
   35380:	0014      	movs	r4, r2
   35382:	430b      	orrs	r3, r1
   35384:	602b      	str	r3, [r5, #0]
   35386:	e7cd      	b.n	35324 <_svfiprintf_r+0x90>
   35388:	9b05      	ldr	r3, [sp, #20]
   3538a:	1d18      	adds	r0, r3, #4
   3538c:	681b      	ldr	r3, [r3, #0]
   3538e:	9005      	str	r0, [sp, #20]
   35390:	2b00      	cmp	r3, #0
   35392:	db39      	blt.n	35408 <_svfiprintf_r+0x174>
   35394:	9309      	str	r3, [sp, #36]	; 0x24
   35396:	0014      	movs	r4, r2
   35398:	7823      	ldrb	r3, [r4, #0]
   3539a:	2b2e      	cmp	r3, #46	; 0x2e
   3539c:	d10b      	bne.n	353b6 <_svfiprintf_r+0x122>
   3539e:	7863      	ldrb	r3, [r4, #1]
   353a0:	1c62      	adds	r2, r4, #1
   353a2:	2b2a      	cmp	r3, #42	; 0x2a
   353a4:	d13e      	bne.n	35424 <_svfiprintf_r+0x190>
   353a6:	9b05      	ldr	r3, [sp, #20]
   353a8:	3402      	adds	r4, #2
   353aa:	1d1a      	adds	r2, r3, #4
   353ac:	681b      	ldr	r3, [r3, #0]
   353ae:	9205      	str	r2, [sp, #20]
   353b0:	2b00      	cmp	r3, #0
   353b2:	db34      	blt.n	3541e <_svfiprintf_r+0x18a>
   353b4:	9307      	str	r3, [sp, #28]
   353b6:	4e35      	ldr	r6, [pc, #212]	; (3548c <_svfiprintf_r+0x1f8>)
   353b8:	7821      	ldrb	r1, [r4, #0]
   353ba:	2203      	movs	r2, #3
   353bc:	0030      	movs	r0, r6
   353be:	f000 fab9 	bl	35934 <memchr>
   353c2:	2800      	cmp	r0, #0
   353c4:	d006      	beq.n	353d4 <_svfiprintf_r+0x140>
   353c6:	2340      	movs	r3, #64	; 0x40
   353c8:	1b80      	subs	r0, r0, r6
   353ca:	4083      	lsls	r3, r0
   353cc:	682a      	ldr	r2, [r5, #0]
   353ce:	3401      	adds	r4, #1
   353d0:	4313      	orrs	r3, r2
   353d2:	602b      	str	r3, [r5, #0]
   353d4:	7821      	ldrb	r1, [r4, #0]
   353d6:	2206      	movs	r2, #6
   353d8:	482d      	ldr	r0, [pc, #180]	; (35490 <_svfiprintf_r+0x1fc>)
   353da:	1c66      	adds	r6, r4, #1
   353dc:	7629      	strb	r1, [r5, #24]
   353de:	f000 faa9 	bl	35934 <memchr>
   353e2:	2800      	cmp	r0, #0
   353e4:	d046      	beq.n	35474 <_svfiprintf_r+0x1e0>
   353e6:	4b2b      	ldr	r3, [pc, #172]	; (35494 <_svfiprintf_r+0x200>)
   353e8:	2b00      	cmp	r3, #0
   353ea:	d12f      	bne.n	3544c <_svfiprintf_r+0x1b8>
   353ec:	6829      	ldr	r1, [r5, #0]
   353ee:	9b05      	ldr	r3, [sp, #20]
   353f0:	2207      	movs	r2, #7
   353f2:	05c9      	lsls	r1, r1, #23
   353f4:	d528      	bpl.n	35448 <_svfiprintf_r+0x1b4>
   353f6:	189b      	adds	r3, r3, r2
   353f8:	4393      	bics	r3, r2
   353fa:	3308      	adds	r3, #8
   353fc:	9305      	str	r3, [sp, #20]
   353fe:	696b      	ldr	r3, [r5, #20]
   35400:	9a03      	ldr	r2, [sp, #12]
   35402:	189b      	adds	r3, r3, r2
   35404:	616b      	str	r3, [r5, #20]
   35406:	e767      	b.n	352d8 <_svfiprintf_r+0x44>
   35408:	425b      	negs	r3, r3
   3540a:	60eb      	str	r3, [r5, #12]
   3540c:	2302      	movs	r3, #2
   3540e:	430b      	orrs	r3, r1
   35410:	602b      	str	r3, [r5, #0]
   35412:	e7c0      	b.n	35396 <_svfiprintf_r+0x102>
   35414:	434b      	muls	r3, r1
   35416:	3401      	adds	r4, #1
   35418:	189b      	adds	r3, r3, r2
   3541a:	2001      	movs	r0, #1
   3541c:	e7a0      	b.n	35360 <_svfiprintf_r+0xcc>
   3541e:	2301      	movs	r3, #1
   35420:	425b      	negs	r3, r3
   35422:	e7c7      	b.n	353b4 <_svfiprintf_r+0x120>
   35424:	2300      	movs	r3, #0
   35426:	0014      	movs	r4, r2
   35428:	200a      	movs	r0, #10
   3542a:	001a      	movs	r2, r3
   3542c:	606b      	str	r3, [r5, #4]
   3542e:	7821      	ldrb	r1, [r4, #0]
   35430:	3930      	subs	r1, #48	; 0x30
   35432:	2909      	cmp	r1, #9
   35434:	d903      	bls.n	3543e <_svfiprintf_r+0x1aa>
   35436:	2b00      	cmp	r3, #0
   35438:	d0bd      	beq.n	353b6 <_svfiprintf_r+0x122>
   3543a:	9207      	str	r2, [sp, #28]
   3543c:	e7bb      	b.n	353b6 <_svfiprintf_r+0x122>
   3543e:	4342      	muls	r2, r0
   35440:	3401      	adds	r4, #1
   35442:	1852      	adds	r2, r2, r1
   35444:	2301      	movs	r3, #1
   35446:	e7f2      	b.n	3542e <_svfiprintf_r+0x19a>
   35448:	3307      	adds	r3, #7
   3544a:	e7d5      	b.n	353f8 <_svfiprintf_r+0x164>
   3544c:	ab05      	add	r3, sp, #20
   3544e:	9300      	str	r3, [sp, #0]
   35450:	003a      	movs	r2, r7
   35452:	4b11      	ldr	r3, [pc, #68]	; (35498 <_svfiprintf_r+0x204>)
   35454:	0029      	movs	r1, r5
   35456:	9802      	ldr	r0, [sp, #8]
   35458:	e000      	b.n	3545c <_svfiprintf_r+0x1c8>
   3545a:	bf00      	nop
   3545c:	9003      	str	r0, [sp, #12]
   3545e:	9b03      	ldr	r3, [sp, #12]
   35460:	3301      	adds	r3, #1
   35462:	d1cc      	bne.n	353fe <_svfiprintf_r+0x16a>
   35464:	89bb      	ldrh	r3, [r7, #12]
   35466:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35468:	065b      	lsls	r3, r3, #25
   3546a:	d400      	bmi.n	3546e <_svfiprintf_r+0x1da>
   3546c:	e729      	b.n	352c2 <_svfiprintf_r+0x2e>
   3546e:	2001      	movs	r0, #1
   35470:	4240      	negs	r0, r0
   35472:	e726      	b.n	352c2 <_svfiprintf_r+0x2e>
   35474:	ab05      	add	r3, sp, #20
   35476:	9300      	str	r3, [sp, #0]
   35478:	003a      	movs	r2, r7
   3547a:	4b07      	ldr	r3, [pc, #28]	; (35498 <_svfiprintf_r+0x204>)
   3547c:	0029      	movs	r1, r5
   3547e:	9802      	ldr	r0, [sp, #8]
   35480:	f000 f87a 	bl	35578 <_printf_i>
   35484:	e7ea      	b.n	3545c <_svfiprintf_r+0x1c8>
   35486:	46c0      	nop			; (mov r8, r8)
   35488:	00039c36 	.word	0x00039c36
   3548c:	00039c3c 	.word	0x00039c3c
   35490:	00039c40 	.word	0x00039c40
   35494:	00000000 	.word	0x00000000
   35498:	000351d1 	.word	0x000351d1

0003549c <_printf_common>:
   3549c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3549e:	0015      	movs	r5, r2
   354a0:	9301      	str	r3, [sp, #4]
   354a2:	688a      	ldr	r2, [r1, #8]
   354a4:	690b      	ldr	r3, [r1, #16]
   354a6:	9000      	str	r0, [sp, #0]
   354a8:	000c      	movs	r4, r1
   354aa:	4293      	cmp	r3, r2
   354ac:	da00      	bge.n	354b0 <_printf_common+0x14>
   354ae:	0013      	movs	r3, r2
   354b0:	0022      	movs	r2, r4
   354b2:	602b      	str	r3, [r5, #0]
   354b4:	3243      	adds	r2, #67	; 0x43
   354b6:	7812      	ldrb	r2, [r2, #0]
   354b8:	2a00      	cmp	r2, #0
   354ba:	d001      	beq.n	354c0 <_printf_common+0x24>
   354bc:	3301      	adds	r3, #1
   354be:	602b      	str	r3, [r5, #0]
   354c0:	6823      	ldr	r3, [r4, #0]
   354c2:	069b      	lsls	r3, r3, #26
   354c4:	d502      	bpl.n	354cc <_printf_common+0x30>
   354c6:	682b      	ldr	r3, [r5, #0]
   354c8:	3302      	adds	r3, #2
   354ca:	602b      	str	r3, [r5, #0]
   354cc:	2706      	movs	r7, #6
   354ce:	6823      	ldr	r3, [r4, #0]
   354d0:	401f      	ands	r7, r3
   354d2:	d027      	beq.n	35524 <_printf_common+0x88>
   354d4:	0023      	movs	r3, r4
   354d6:	3343      	adds	r3, #67	; 0x43
   354d8:	781b      	ldrb	r3, [r3, #0]
   354da:	1e5a      	subs	r2, r3, #1
   354dc:	4193      	sbcs	r3, r2
   354de:	6822      	ldr	r2, [r4, #0]
   354e0:	0692      	lsls	r2, r2, #26
   354e2:	d430      	bmi.n	35546 <_printf_common+0xaa>
   354e4:	0022      	movs	r2, r4
   354e6:	9901      	ldr	r1, [sp, #4]
   354e8:	3243      	adds	r2, #67	; 0x43
   354ea:	9800      	ldr	r0, [sp, #0]
   354ec:	9e08      	ldr	r6, [sp, #32]
   354ee:	47b0      	blx	r6
   354f0:	1c43      	adds	r3, r0, #1
   354f2:	d025      	beq.n	35540 <_printf_common+0xa4>
   354f4:	2306      	movs	r3, #6
   354f6:	6820      	ldr	r0, [r4, #0]
   354f8:	682a      	ldr	r2, [r5, #0]
   354fa:	68e1      	ldr	r1, [r4, #12]
   354fc:	4003      	ands	r3, r0
   354fe:	2500      	movs	r5, #0
   35500:	2b04      	cmp	r3, #4
   35502:	d103      	bne.n	3550c <_printf_common+0x70>
   35504:	1a8d      	subs	r5, r1, r2
   35506:	43eb      	mvns	r3, r5
   35508:	17db      	asrs	r3, r3, #31
   3550a:	401d      	ands	r5, r3
   3550c:	68a3      	ldr	r3, [r4, #8]
   3550e:	6922      	ldr	r2, [r4, #16]
   35510:	4293      	cmp	r3, r2
   35512:	dd01      	ble.n	35518 <_printf_common+0x7c>
   35514:	1a9b      	subs	r3, r3, r2
   35516:	18ed      	adds	r5, r5, r3
   35518:	2700      	movs	r7, #0
   3551a:	42bd      	cmp	r5, r7
   3551c:	d120      	bne.n	35560 <_printf_common+0xc4>
   3551e:	2000      	movs	r0, #0
   35520:	e010      	b.n	35544 <_printf_common+0xa8>
   35522:	3701      	adds	r7, #1
   35524:	68e3      	ldr	r3, [r4, #12]
   35526:	682a      	ldr	r2, [r5, #0]
   35528:	1a9b      	subs	r3, r3, r2
   3552a:	429f      	cmp	r7, r3
   3552c:	dad2      	bge.n	354d4 <_printf_common+0x38>
   3552e:	0022      	movs	r2, r4
   35530:	2301      	movs	r3, #1
   35532:	3219      	adds	r2, #25
   35534:	9901      	ldr	r1, [sp, #4]
   35536:	9800      	ldr	r0, [sp, #0]
   35538:	9e08      	ldr	r6, [sp, #32]
   3553a:	47b0      	blx	r6
   3553c:	1c43      	adds	r3, r0, #1
   3553e:	d1f0      	bne.n	35522 <_printf_common+0x86>
   35540:	2001      	movs	r0, #1
   35542:	4240      	negs	r0, r0
   35544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35546:	2030      	movs	r0, #48	; 0x30
   35548:	18e1      	adds	r1, r4, r3
   3554a:	3143      	adds	r1, #67	; 0x43
   3554c:	7008      	strb	r0, [r1, #0]
   3554e:	0021      	movs	r1, r4
   35550:	1c5a      	adds	r2, r3, #1
   35552:	3145      	adds	r1, #69	; 0x45
   35554:	7809      	ldrb	r1, [r1, #0]
   35556:	18a2      	adds	r2, r4, r2
   35558:	3243      	adds	r2, #67	; 0x43
   3555a:	3302      	adds	r3, #2
   3555c:	7011      	strb	r1, [r2, #0]
   3555e:	e7c1      	b.n	354e4 <_printf_common+0x48>
   35560:	0022      	movs	r2, r4
   35562:	2301      	movs	r3, #1
   35564:	321a      	adds	r2, #26
   35566:	9901      	ldr	r1, [sp, #4]
   35568:	9800      	ldr	r0, [sp, #0]
   3556a:	9e08      	ldr	r6, [sp, #32]
   3556c:	47b0      	blx	r6
   3556e:	1c43      	adds	r3, r0, #1
   35570:	d0e6      	beq.n	35540 <_printf_common+0xa4>
   35572:	3701      	adds	r7, #1
   35574:	e7d1      	b.n	3551a <_printf_common+0x7e>
	...

00035578 <_printf_i>:
   35578:	b5f0      	push	{r4, r5, r6, r7, lr}
   3557a:	b08b      	sub	sp, #44	; 0x2c
   3557c:	9206      	str	r2, [sp, #24]
   3557e:	000a      	movs	r2, r1
   35580:	3243      	adds	r2, #67	; 0x43
   35582:	9307      	str	r3, [sp, #28]
   35584:	9005      	str	r0, [sp, #20]
   35586:	9204      	str	r2, [sp, #16]
   35588:	7e0a      	ldrb	r2, [r1, #24]
   3558a:	000c      	movs	r4, r1
   3558c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3558e:	2a6e      	cmp	r2, #110	; 0x6e
   35590:	d100      	bne.n	35594 <_printf_i+0x1c>
   35592:	e08f      	b.n	356b4 <_printf_i+0x13c>
   35594:	d817      	bhi.n	355c6 <_printf_i+0x4e>
   35596:	2a63      	cmp	r2, #99	; 0x63
   35598:	d02c      	beq.n	355f4 <_printf_i+0x7c>
   3559a:	d808      	bhi.n	355ae <_printf_i+0x36>
   3559c:	2a00      	cmp	r2, #0
   3559e:	d100      	bne.n	355a2 <_printf_i+0x2a>
   355a0:	e099      	b.n	356d6 <_printf_i+0x15e>
   355a2:	2a58      	cmp	r2, #88	; 0x58
   355a4:	d054      	beq.n	35650 <_printf_i+0xd8>
   355a6:	0026      	movs	r6, r4
   355a8:	3642      	adds	r6, #66	; 0x42
   355aa:	7032      	strb	r2, [r6, #0]
   355ac:	e029      	b.n	35602 <_printf_i+0x8a>
   355ae:	2a64      	cmp	r2, #100	; 0x64
   355b0:	d001      	beq.n	355b6 <_printf_i+0x3e>
   355b2:	2a69      	cmp	r2, #105	; 0x69
   355b4:	d1f7      	bne.n	355a6 <_printf_i+0x2e>
   355b6:	6821      	ldr	r1, [r4, #0]
   355b8:	681a      	ldr	r2, [r3, #0]
   355ba:	0608      	lsls	r0, r1, #24
   355bc:	d523      	bpl.n	35606 <_printf_i+0x8e>
   355be:	1d11      	adds	r1, r2, #4
   355c0:	6019      	str	r1, [r3, #0]
   355c2:	6815      	ldr	r5, [r2, #0]
   355c4:	e025      	b.n	35612 <_printf_i+0x9a>
   355c6:	2a73      	cmp	r2, #115	; 0x73
   355c8:	d100      	bne.n	355cc <_printf_i+0x54>
   355ca:	e088      	b.n	356de <_printf_i+0x166>
   355cc:	d808      	bhi.n	355e0 <_printf_i+0x68>
   355ce:	2a6f      	cmp	r2, #111	; 0x6f
   355d0:	d029      	beq.n	35626 <_printf_i+0xae>
   355d2:	2a70      	cmp	r2, #112	; 0x70
   355d4:	d1e7      	bne.n	355a6 <_printf_i+0x2e>
   355d6:	2220      	movs	r2, #32
   355d8:	6809      	ldr	r1, [r1, #0]
   355da:	430a      	orrs	r2, r1
   355dc:	6022      	str	r2, [r4, #0]
   355de:	e003      	b.n	355e8 <_printf_i+0x70>
   355e0:	2a75      	cmp	r2, #117	; 0x75
   355e2:	d020      	beq.n	35626 <_printf_i+0xae>
   355e4:	2a78      	cmp	r2, #120	; 0x78
   355e6:	d1de      	bne.n	355a6 <_printf_i+0x2e>
   355e8:	0022      	movs	r2, r4
   355ea:	2178      	movs	r1, #120	; 0x78
   355ec:	3245      	adds	r2, #69	; 0x45
   355ee:	7011      	strb	r1, [r2, #0]
   355f0:	4a6c      	ldr	r2, [pc, #432]	; (357a4 <_printf_i+0x22c>)
   355f2:	e030      	b.n	35656 <_printf_i+0xde>
   355f4:	000e      	movs	r6, r1
   355f6:	681a      	ldr	r2, [r3, #0]
   355f8:	3642      	adds	r6, #66	; 0x42
   355fa:	1d11      	adds	r1, r2, #4
   355fc:	6019      	str	r1, [r3, #0]
   355fe:	6813      	ldr	r3, [r2, #0]
   35600:	7033      	strb	r3, [r6, #0]
   35602:	2301      	movs	r3, #1
   35604:	e079      	b.n	356fa <_printf_i+0x182>
   35606:	0649      	lsls	r1, r1, #25
   35608:	d5d9      	bpl.n	355be <_printf_i+0x46>
   3560a:	1d11      	adds	r1, r2, #4
   3560c:	6019      	str	r1, [r3, #0]
   3560e:	2300      	movs	r3, #0
   35610:	5ed5      	ldrsh	r5, [r2, r3]
   35612:	2d00      	cmp	r5, #0
   35614:	da03      	bge.n	3561e <_printf_i+0xa6>
   35616:	232d      	movs	r3, #45	; 0x2d
   35618:	9a04      	ldr	r2, [sp, #16]
   3561a:	426d      	negs	r5, r5
   3561c:	7013      	strb	r3, [r2, #0]
   3561e:	4b62      	ldr	r3, [pc, #392]	; (357a8 <_printf_i+0x230>)
   35620:	270a      	movs	r7, #10
   35622:	9303      	str	r3, [sp, #12]
   35624:	e02f      	b.n	35686 <_printf_i+0x10e>
   35626:	6820      	ldr	r0, [r4, #0]
   35628:	6819      	ldr	r1, [r3, #0]
   3562a:	0605      	lsls	r5, r0, #24
   3562c:	d503      	bpl.n	35636 <_printf_i+0xbe>
   3562e:	1d08      	adds	r0, r1, #4
   35630:	6018      	str	r0, [r3, #0]
   35632:	680d      	ldr	r5, [r1, #0]
   35634:	e005      	b.n	35642 <_printf_i+0xca>
   35636:	0640      	lsls	r0, r0, #25
   35638:	d5f9      	bpl.n	3562e <_printf_i+0xb6>
   3563a:	680d      	ldr	r5, [r1, #0]
   3563c:	1d08      	adds	r0, r1, #4
   3563e:	6018      	str	r0, [r3, #0]
   35640:	b2ad      	uxth	r5, r5
   35642:	4b59      	ldr	r3, [pc, #356]	; (357a8 <_printf_i+0x230>)
   35644:	2708      	movs	r7, #8
   35646:	9303      	str	r3, [sp, #12]
   35648:	2a6f      	cmp	r2, #111	; 0x6f
   3564a:	d018      	beq.n	3567e <_printf_i+0x106>
   3564c:	270a      	movs	r7, #10
   3564e:	e016      	b.n	3567e <_printf_i+0x106>
   35650:	3145      	adds	r1, #69	; 0x45
   35652:	700a      	strb	r2, [r1, #0]
   35654:	4a54      	ldr	r2, [pc, #336]	; (357a8 <_printf_i+0x230>)
   35656:	9203      	str	r2, [sp, #12]
   35658:	681a      	ldr	r2, [r3, #0]
   3565a:	6821      	ldr	r1, [r4, #0]
   3565c:	1d10      	adds	r0, r2, #4
   3565e:	6018      	str	r0, [r3, #0]
   35660:	6815      	ldr	r5, [r2, #0]
   35662:	0608      	lsls	r0, r1, #24
   35664:	d522      	bpl.n	356ac <_printf_i+0x134>
   35666:	07cb      	lsls	r3, r1, #31
   35668:	d502      	bpl.n	35670 <_printf_i+0xf8>
   3566a:	2320      	movs	r3, #32
   3566c:	4319      	orrs	r1, r3
   3566e:	6021      	str	r1, [r4, #0]
   35670:	2710      	movs	r7, #16
   35672:	2d00      	cmp	r5, #0
   35674:	d103      	bne.n	3567e <_printf_i+0x106>
   35676:	2320      	movs	r3, #32
   35678:	6822      	ldr	r2, [r4, #0]
   3567a:	439a      	bics	r2, r3
   3567c:	6022      	str	r2, [r4, #0]
   3567e:	0023      	movs	r3, r4
   35680:	2200      	movs	r2, #0
   35682:	3343      	adds	r3, #67	; 0x43
   35684:	701a      	strb	r2, [r3, #0]
   35686:	6863      	ldr	r3, [r4, #4]
   35688:	60a3      	str	r3, [r4, #8]
   3568a:	2b00      	cmp	r3, #0
   3568c:	db5c      	blt.n	35748 <_printf_i+0x1d0>
   3568e:	2204      	movs	r2, #4
   35690:	6821      	ldr	r1, [r4, #0]
   35692:	4391      	bics	r1, r2
   35694:	6021      	str	r1, [r4, #0]
   35696:	2d00      	cmp	r5, #0
   35698:	d158      	bne.n	3574c <_printf_i+0x1d4>
   3569a:	9e04      	ldr	r6, [sp, #16]
   3569c:	2b00      	cmp	r3, #0
   3569e:	d064      	beq.n	3576a <_printf_i+0x1f2>
   356a0:	0026      	movs	r6, r4
   356a2:	9b03      	ldr	r3, [sp, #12]
   356a4:	3642      	adds	r6, #66	; 0x42
   356a6:	781b      	ldrb	r3, [r3, #0]
   356a8:	7033      	strb	r3, [r6, #0]
   356aa:	e05e      	b.n	3576a <_printf_i+0x1f2>
   356ac:	0648      	lsls	r0, r1, #25
   356ae:	d5da      	bpl.n	35666 <_printf_i+0xee>
   356b0:	b2ad      	uxth	r5, r5
   356b2:	e7d8      	b.n	35666 <_printf_i+0xee>
   356b4:	6809      	ldr	r1, [r1, #0]
   356b6:	681a      	ldr	r2, [r3, #0]
   356b8:	0608      	lsls	r0, r1, #24
   356ba:	d505      	bpl.n	356c8 <_printf_i+0x150>
   356bc:	1d11      	adds	r1, r2, #4
   356be:	6019      	str	r1, [r3, #0]
   356c0:	6813      	ldr	r3, [r2, #0]
   356c2:	6962      	ldr	r2, [r4, #20]
   356c4:	601a      	str	r2, [r3, #0]
   356c6:	e006      	b.n	356d6 <_printf_i+0x15e>
   356c8:	0649      	lsls	r1, r1, #25
   356ca:	d5f7      	bpl.n	356bc <_printf_i+0x144>
   356cc:	1d11      	adds	r1, r2, #4
   356ce:	6019      	str	r1, [r3, #0]
   356d0:	6813      	ldr	r3, [r2, #0]
   356d2:	8aa2      	ldrh	r2, [r4, #20]
   356d4:	801a      	strh	r2, [r3, #0]
   356d6:	2300      	movs	r3, #0
   356d8:	9e04      	ldr	r6, [sp, #16]
   356da:	6123      	str	r3, [r4, #16]
   356dc:	e054      	b.n	35788 <_printf_i+0x210>
   356de:	681a      	ldr	r2, [r3, #0]
   356e0:	1d11      	adds	r1, r2, #4
   356e2:	6019      	str	r1, [r3, #0]
   356e4:	6816      	ldr	r6, [r2, #0]
   356e6:	2100      	movs	r1, #0
   356e8:	6862      	ldr	r2, [r4, #4]
   356ea:	0030      	movs	r0, r6
   356ec:	f000 f922 	bl	35934 <memchr>
   356f0:	2800      	cmp	r0, #0
   356f2:	d001      	beq.n	356f8 <_printf_i+0x180>
   356f4:	1b80      	subs	r0, r0, r6
   356f6:	6060      	str	r0, [r4, #4]
   356f8:	6863      	ldr	r3, [r4, #4]
   356fa:	6123      	str	r3, [r4, #16]
   356fc:	2300      	movs	r3, #0
   356fe:	9a04      	ldr	r2, [sp, #16]
   35700:	7013      	strb	r3, [r2, #0]
   35702:	e041      	b.n	35788 <_printf_i+0x210>
   35704:	6923      	ldr	r3, [r4, #16]
   35706:	0032      	movs	r2, r6
   35708:	9906      	ldr	r1, [sp, #24]
   3570a:	9805      	ldr	r0, [sp, #20]
   3570c:	9d07      	ldr	r5, [sp, #28]
   3570e:	47a8      	blx	r5
   35710:	1c43      	adds	r3, r0, #1
   35712:	d043      	beq.n	3579c <_printf_i+0x224>
   35714:	6823      	ldr	r3, [r4, #0]
   35716:	2500      	movs	r5, #0
   35718:	079b      	lsls	r3, r3, #30
   3571a:	d40f      	bmi.n	3573c <_printf_i+0x1c4>
   3571c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3571e:	68e0      	ldr	r0, [r4, #12]
   35720:	4298      	cmp	r0, r3
   35722:	da3d      	bge.n	357a0 <_printf_i+0x228>
   35724:	0018      	movs	r0, r3
   35726:	e03b      	b.n	357a0 <_printf_i+0x228>
   35728:	0022      	movs	r2, r4
   3572a:	2301      	movs	r3, #1
   3572c:	3219      	adds	r2, #25
   3572e:	9906      	ldr	r1, [sp, #24]
   35730:	9805      	ldr	r0, [sp, #20]
   35732:	9e07      	ldr	r6, [sp, #28]
   35734:	47b0      	blx	r6
   35736:	1c43      	adds	r3, r0, #1
   35738:	d030      	beq.n	3579c <_printf_i+0x224>
   3573a:	3501      	adds	r5, #1
   3573c:	68e3      	ldr	r3, [r4, #12]
   3573e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35740:	1a9b      	subs	r3, r3, r2
   35742:	429d      	cmp	r5, r3
   35744:	dbf0      	blt.n	35728 <_printf_i+0x1b0>
   35746:	e7e9      	b.n	3571c <_printf_i+0x1a4>
   35748:	2d00      	cmp	r5, #0
   3574a:	d0a9      	beq.n	356a0 <_printf_i+0x128>
   3574c:	9e04      	ldr	r6, [sp, #16]
   3574e:	0028      	movs	r0, r5
   35750:	0039      	movs	r1, r7
   35752:	f7fc fa85 	bl	31c60 <__aeabi_uidivmod>
   35756:	9b03      	ldr	r3, [sp, #12]
   35758:	3e01      	subs	r6, #1
   3575a:	5c5b      	ldrb	r3, [r3, r1]
   3575c:	0028      	movs	r0, r5
   3575e:	7033      	strb	r3, [r6, #0]
   35760:	0039      	movs	r1, r7
   35762:	f7fc f9f7 	bl	31b54 <__udivsi3>
   35766:	1e05      	subs	r5, r0, #0
   35768:	d1f1      	bne.n	3574e <_printf_i+0x1d6>
   3576a:	2f08      	cmp	r7, #8
   3576c:	d109      	bne.n	35782 <_printf_i+0x20a>
   3576e:	6823      	ldr	r3, [r4, #0]
   35770:	07db      	lsls	r3, r3, #31
   35772:	d506      	bpl.n	35782 <_printf_i+0x20a>
   35774:	6863      	ldr	r3, [r4, #4]
   35776:	6922      	ldr	r2, [r4, #16]
   35778:	4293      	cmp	r3, r2
   3577a:	dc02      	bgt.n	35782 <_printf_i+0x20a>
   3577c:	2330      	movs	r3, #48	; 0x30
   3577e:	3e01      	subs	r6, #1
   35780:	7033      	strb	r3, [r6, #0]
   35782:	9b04      	ldr	r3, [sp, #16]
   35784:	1b9b      	subs	r3, r3, r6
   35786:	6123      	str	r3, [r4, #16]
   35788:	9b07      	ldr	r3, [sp, #28]
   3578a:	aa09      	add	r2, sp, #36	; 0x24
   3578c:	9300      	str	r3, [sp, #0]
   3578e:	0021      	movs	r1, r4
   35790:	9b06      	ldr	r3, [sp, #24]
   35792:	9805      	ldr	r0, [sp, #20]
   35794:	f7ff fe82 	bl	3549c <_printf_common>
   35798:	1c43      	adds	r3, r0, #1
   3579a:	d1b3      	bne.n	35704 <_printf_i+0x18c>
   3579c:	2001      	movs	r0, #1
   3579e:	4240      	negs	r0, r0
   357a0:	b00b      	add	sp, #44	; 0x2c
   357a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   357a4:	00039c58 	.word	0x00039c58
   357a8:	00039c47 	.word	0x00039c47

000357ac <__sread>:
   357ac:	b570      	push	{r4, r5, r6, lr}
   357ae:	000c      	movs	r4, r1
   357b0:	250e      	movs	r5, #14
   357b2:	5f49      	ldrsh	r1, [r1, r5]
   357b4:	f000 f8f0 	bl	35998 <_read_r>
   357b8:	2800      	cmp	r0, #0
   357ba:	db03      	blt.n	357c4 <__sread+0x18>
   357bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   357be:	181b      	adds	r3, r3, r0
   357c0:	6563      	str	r3, [r4, #84]	; 0x54
   357c2:	bd70      	pop	{r4, r5, r6, pc}
   357c4:	89a3      	ldrh	r3, [r4, #12]
   357c6:	4a02      	ldr	r2, [pc, #8]	; (357d0 <__sread+0x24>)
   357c8:	4013      	ands	r3, r2
   357ca:	81a3      	strh	r3, [r4, #12]
   357cc:	e7f9      	b.n	357c2 <__sread+0x16>
   357ce:	46c0      	nop			; (mov r8, r8)
   357d0:	ffffefff 	.word	0xffffefff

000357d4 <__swrite>:
   357d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   357d6:	001f      	movs	r7, r3
   357d8:	898b      	ldrh	r3, [r1, #12]
   357da:	0005      	movs	r5, r0
   357dc:	000c      	movs	r4, r1
   357de:	0016      	movs	r6, r2
   357e0:	05db      	lsls	r3, r3, #23
   357e2:	d505      	bpl.n	357f0 <__swrite+0x1c>
   357e4:	230e      	movs	r3, #14
   357e6:	5ec9      	ldrsh	r1, [r1, r3]
   357e8:	2200      	movs	r2, #0
   357ea:	2302      	movs	r3, #2
   357ec:	f000 f88e 	bl	3590c <_lseek_r>
   357f0:	89a3      	ldrh	r3, [r4, #12]
   357f2:	4a05      	ldr	r2, [pc, #20]	; (35808 <__swrite+0x34>)
   357f4:	0028      	movs	r0, r5
   357f6:	4013      	ands	r3, r2
   357f8:	81a3      	strh	r3, [r4, #12]
   357fa:	0032      	movs	r2, r6
   357fc:	230e      	movs	r3, #14
   357fe:	5ee1      	ldrsh	r1, [r4, r3]
   35800:	003b      	movs	r3, r7
   35802:	f000 f839 	bl	35878 <_write_r>
   35806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35808:	ffffefff 	.word	0xffffefff

0003580c <__sseek>:
   3580c:	b570      	push	{r4, r5, r6, lr}
   3580e:	000c      	movs	r4, r1
   35810:	250e      	movs	r5, #14
   35812:	5f49      	ldrsh	r1, [r1, r5]
   35814:	f000 f87a 	bl	3590c <_lseek_r>
   35818:	89a3      	ldrh	r3, [r4, #12]
   3581a:	1c42      	adds	r2, r0, #1
   3581c:	d103      	bne.n	35826 <__sseek+0x1a>
   3581e:	4a05      	ldr	r2, [pc, #20]	; (35834 <__sseek+0x28>)
   35820:	4013      	ands	r3, r2
   35822:	81a3      	strh	r3, [r4, #12]
   35824:	bd70      	pop	{r4, r5, r6, pc}
   35826:	2280      	movs	r2, #128	; 0x80
   35828:	0152      	lsls	r2, r2, #5
   3582a:	4313      	orrs	r3, r2
   3582c:	81a3      	strh	r3, [r4, #12]
   3582e:	6560      	str	r0, [r4, #84]	; 0x54
   35830:	e7f8      	b.n	35824 <__sseek+0x18>
   35832:	46c0      	nop			; (mov r8, r8)
   35834:	ffffefff 	.word	0xffffefff

00035838 <__sclose>:
   35838:	b510      	push	{r4, lr}
   3583a:	230e      	movs	r3, #14
   3583c:	5ec9      	ldrsh	r1, [r1, r3]
   3583e:	f000 f82f 	bl	358a0 <_close_r>
   35842:	bd10      	pop	{r4, pc}

00035844 <strchr>:
   35844:	b2c9      	uxtb	r1, r1
   35846:	7803      	ldrb	r3, [r0, #0]
   35848:	2b00      	cmp	r3, #0
   3584a:	d004      	beq.n	35856 <strchr+0x12>
   3584c:	4299      	cmp	r1, r3
   3584e:	d100      	bne.n	35852 <strchr+0xe>
   35850:	4770      	bx	lr
   35852:	3001      	adds	r0, #1
   35854:	e7f7      	b.n	35846 <strchr+0x2>
   35856:	424b      	negs	r3, r1
   35858:	4159      	adcs	r1, r3
   3585a:	4249      	negs	r1, r1
   3585c:	4008      	ands	r0, r1
   3585e:	e7f7      	b.n	35850 <strchr+0xc>

00035860 <__ascii_wctomb>:
   35860:	1e0b      	subs	r3, r1, #0
   35862:	d004      	beq.n	3586e <__ascii_wctomb+0xe>
   35864:	2aff      	cmp	r2, #255	; 0xff
   35866:	d904      	bls.n	35872 <__ascii_wctomb+0x12>
   35868:	238a      	movs	r3, #138	; 0x8a
   3586a:	6003      	str	r3, [r0, #0]
   3586c:	3b8b      	subs	r3, #139	; 0x8b
   3586e:	0018      	movs	r0, r3
   35870:	4770      	bx	lr
   35872:	700a      	strb	r2, [r1, #0]
   35874:	2301      	movs	r3, #1
   35876:	e7fa      	b.n	3586e <__ascii_wctomb+0xe>

00035878 <_write_r>:
   35878:	b570      	push	{r4, r5, r6, lr}
   3587a:	0005      	movs	r5, r0
   3587c:	0008      	movs	r0, r1
   3587e:	0011      	movs	r1, r2
   35880:	2200      	movs	r2, #0
   35882:	4c06      	ldr	r4, [pc, #24]	; (3589c <_write_r+0x24>)
   35884:	6022      	str	r2, [r4, #0]
   35886:	001a      	movs	r2, r3
   35888:	f7f4 fd46 	bl	2a318 <_write>
   3588c:	1c43      	adds	r3, r0, #1
   3588e:	d103      	bne.n	35898 <_write_r+0x20>
   35890:	6823      	ldr	r3, [r4, #0]
   35892:	2b00      	cmp	r3, #0
   35894:	d000      	beq.n	35898 <_write_r+0x20>
   35896:	602b      	str	r3, [r5, #0]
   35898:	bd70      	pop	{r4, r5, r6, pc}
   3589a:	46c0      	nop			; (mov r8, r8)
   3589c:	20005c54 	.word	0x20005c54

000358a0 <_close_r>:
   358a0:	2300      	movs	r3, #0
   358a2:	b570      	push	{r4, r5, r6, lr}
   358a4:	4c06      	ldr	r4, [pc, #24]	; (358c0 <_close_r+0x20>)
   358a6:	0005      	movs	r5, r0
   358a8:	0008      	movs	r0, r1
   358aa:	6023      	str	r3, [r4, #0]
   358ac:	f7f4 fd88 	bl	2a3c0 <_close>
   358b0:	1c43      	adds	r3, r0, #1
   358b2:	d103      	bne.n	358bc <_close_r+0x1c>
   358b4:	6823      	ldr	r3, [r4, #0]
   358b6:	2b00      	cmp	r3, #0
   358b8:	d000      	beq.n	358bc <_close_r+0x1c>
   358ba:	602b      	str	r3, [r5, #0]
   358bc:	bd70      	pop	{r4, r5, r6, pc}
   358be:	46c0      	nop			; (mov r8, r8)
   358c0:	20005c54 	.word	0x20005c54

000358c4 <_fstat_r>:
   358c4:	2300      	movs	r3, #0
   358c6:	b570      	push	{r4, r5, r6, lr}
   358c8:	4c06      	ldr	r4, [pc, #24]	; (358e4 <_fstat_r+0x20>)
   358ca:	0005      	movs	r5, r0
   358cc:	0008      	movs	r0, r1
   358ce:	0011      	movs	r1, r2
   358d0:	6023      	str	r3, [r4, #0]
   358d2:	f7f4 fd7f 	bl	2a3d4 <_fstat>
   358d6:	1c43      	adds	r3, r0, #1
   358d8:	d103      	bne.n	358e2 <_fstat_r+0x1e>
   358da:	6823      	ldr	r3, [r4, #0]
   358dc:	2b00      	cmp	r3, #0
   358de:	d000      	beq.n	358e2 <_fstat_r+0x1e>
   358e0:	602b      	str	r3, [r5, #0]
   358e2:	bd70      	pop	{r4, r5, r6, pc}
   358e4:	20005c54 	.word	0x20005c54

000358e8 <_isatty_r>:
   358e8:	2300      	movs	r3, #0
   358ea:	b570      	push	{r4, r5, r6, lr}
   358ec:	4c06      	ldr	r4, [pc, #24]	; (35908 <_isatty_r+0x20>)
   358ee:	0005      	movs	r5, r0
   358f0:	0008      	movs	r0, r1
   358f2:	6023      	str	r3, [r4, #0]
   358f4:	f7f4 fd7c 	bl	2a3f0 <_isatty>
   358f8:	1c43      	adds	r3, r0, #1
   358fa:	d103      	bne.n	35904 <_isatty_r+0x1c>
   358fc:	6823      	ldr	r3, [r4, #0]
   358fe:	2b00      	cmp	r3, #0
   35900:	d000      	beq.n	35904 <_isatty_r+0x1c>
   35902:	602b      	str	r3, [r5, #0]
   35904:	bd70      	pop	{r4, r5, r6, pc}
   35906:	46c0      	nop			; (mov r8, r8)
   35908:	20005c54 	.word	0x20005c54

0003590c <_lseek_r>:
   3590c:	b570      	push	{r4, r5, r6, lr}
   3590e:	0005      	movs	r5, r0
   35910:	0008      	movs	r0, r1
   35912:	0011      	movs	r1, r2
   35914:	2200      	movs	r2, #0
   35916:	4c06      	ldr	r4, [pc, #24]	; (35930 <_lseek_r+0x24>)
   35918:	6022      	str	r2, [r4, #0]
   3591a:	001a      	movs	r2, r3
   3591c:	f7f4 fd71 	bl	2a402 <_lseek>
   35920:	1c43      	adds	r3, r0, #1
   35922:	d103      	bne.n	3592c <_lseek_r+0x20>
   35924:	6823      	ldr	r3, [r4, #0]
   35926:	2b00      	cmp	r3, #0
   35928:	d000      	beq.n	3592c <_lseek_r+0x20>
   3592a:	602b      	str	r3, [r5, #0]
   3592c:	bd70      	pop	{r4, r5, r6, pc}
   3592e:	46c0      	nop			; (mov r8, r8)
   35930:	20005c54 	.word	0x20005c54

00035934 <memchr>:
   35934:	b2c9      	uxtb	r1, r1
   35936:	1882      	adds	r2, r0, r2
   35938:	4290      	cmp	r0, r2
   3593a:	d101      	bne.n	35940 <memchr+0xc>
   3593c:	2000      	movs	r0, #0
   3593e:	4770      	bx	lr
   35940:	7803      	ldrb	r3, [r0, #0]
   35942:	428b      	cmp	r3, r1
   35944:	d0fb      	beq.n	3593e <memchr+0xa>
   35946:	3001      	adds	r0, #1
   35948:	e7f6      	b.n	35938 <memchr+0x4>

0003594a <_realloc_r>:
   3594a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3594c:	0007      	movs	r7, r0
   3594e:	000d      	movs	r5, r1
   35950:	0016      	movs	r6, r2
   35952:	2900      	cmp	r1, #0
   35954:	d105      	bne.n	35962 <_realloc_r+0x18>
   35956:	0011      	movs	r1, r2
   35958:	f7fe feac 	bl	346b4 <_malloc_r>
   3595c:	0004      	movs	r4, r0
   3595e:	0020      	movs	r0, r4
   35960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35962:	2a00      	cmp	r2, #0
   35964:	d103      	bne.n	3596e <_realloc_r+0x24>
   35966:	f7fe fe5b 	bl	34620 <_free_r>
   3596a:	0034      	movs	r4, r6
   3596c:	e7f7      	b.n	3595e <_realloc_r+0x14>
   3596e:	f000 f827 	bl	359c0 <_malloc_usable_size_r>
   35972:	002c      	movs	r4, r5
   35974:	4286      	cmp	r6, r0
   35976:	d9f2      	bls.n	3595e <_realloc_r+0x14>
   35978:	0031      	movs	r1, r6
   3597a:	0038      	movs	r0, r7
   3597c:	f7fe fe9a 	bl	346b4 <_malloc_r>
   35980:	1e04      	subs	r4, r0, #0
   35982:	d0ec      	beq.n	3595e <_realloc_r+0x14>
   35984:	0029      	movs	r1, r5
   35986:	0032      	movs	r2, r6
   35988:	f7fe fe26 	bl	345d8 <memcpy>
   3598c:	0029      	movs	r1, r5
   3598e:	0038      	movs	r0, r7
   35990:	f7fe fe46 	bl	34620 <_free_r>
   35994:	e7e3      	b.n	3595e <_realloc_r+0x14>
	...

00035998 <_read_r>:
   35998:	b570      	push	{r4, r5, r6, lr}
   3599a:	0005      	movs	r5, r0
   3599c:	0008      	movs	r0, r1
   3599e:	0011      	movs	r1, r2
   359a0:	2200      	movs	r2, #0
   359a2:	4c06      	ldr	r4, [pc, #24]	; (359bc <_read_r+0x24>)
   359a4:	6022      	str	r2, [r4, #0]
   359a6:	001a      	movs	r2, r3
   359a8:	f7f4 fc8c 	bl	2a2c4 <_read>
   359ac:	1c43      	adds	r3, r0, #1
   359ae:	d103      	bne.n	359b8 <_read_r+0x20>
   359b0:	6823      	ldr	r3, [r4, #0]
   359b2:	2b00      	cmp	r3, #0
   359b4:	d000      	beq.n	359b8 <_read_r+0x20>
   359b6:	602b      	str	r3, [r5, #0]
   359b8:	bd70      	pop	{r4, r5, r6, pc}
   359ba:	46c0      	nop			; (mov r8, r8)
   359bc:	20005c54 	.word	0x20005c54

000359c0 <_malloc_usable_size_r>:
   359c0:	1f0b      	subs	r3, r1, #4
   359c2:	681b      	ldr	r3, [r3, #0]
   359c4:	1f18      	subs	r0, r3, #4
   359c6:	2b00      	cmp	r3, #0
   359c8:	da01      	bge.n	359ce <_malloc_usable_size_r+0xe>
   359ca:	580b      	ldr	r3, [r1, r0]
   359cc:	18c0      	adds	r0, r0, r3
   359ce:	4770      	bx	lr

000359d0 <sysfont_glyphs>:
   359d0:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   359e0:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   359f0:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   35a00:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   35a10:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   35a20:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   35a30:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   35a40:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   35a50:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   35a60:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   35a70:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   35a80:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   35a90:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   35aa0:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   35ab0:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   35ac0:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   35ad0:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   35ae0:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   35af0:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   35b00:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   35b10:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   35b20:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   35b30:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   35b40:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   35b50:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   35b60:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   35b70:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   35b80:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   35b90:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   35ba0:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   35bb0:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   35bc0:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   35bd0:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   35be0:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   35bf0:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   35c00:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   35c10:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   35c20:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   35c30:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   35c40:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   35c50:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   35c60:	4020 0000                                    @..

00035c64 <pcWelcomeMessage>:
   35c64:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   35c74:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   35c84:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   35c94:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   35ca4:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   35cb4:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   35cc4:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   35cd4:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   35ce4:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   35cf4:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   35d04:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   35d14:	7375 0a0d 0000 0000 6574 7473 0000 0000     us......test....
   35d24:	6574 7473 203a 6553 646e 2073 6574 7473     test: Sends test
   35d34:	6420 7461 0d61 000a 616e 0075 616e 3a75      data...nau.nau:
   35d44:	5320 6e65 7364 7720 6965 6867 2074 6164      Sends weight da
   35d54:	6174 0a0d 0000 0000 706f 6e65 0000 0000     ta......open....
   35d64:	6573 7672 3a6f 4f20 6570 0d6e 000a 0000     servo: Open.....
   35d74:	6c63 736f 0065 0000 6573 7672 3a6f 4320     close...servo: C
   35d84:	6f6c 6573 0a0d 0000 6c63 0073 6c63 3a73     lose....cls.cls:
   35d94:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   35da4:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   35db4:	6f43 6c75 2064 6f6e 2074 6c61 6f6c 6163     Could not alloca
   35dc4:	6574 7320 6d65 7061 6f68 6572 0a0d 0000     te semaphore....
   35dd4:	0a0d 0000 616f 0000 6325 325b 0d4b 003e     ....oa..%c[2K.>.
   35de4:	2008 0008 6325 325b 004a 0000 6554 7473     . ..%c[2J...Test
   35df4:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   35e04:	000a 0000 6e69 7570 2074 6f76 206c 203d     ....input vol = 
   35e14:	4956 314e 2050 202d 4956 314e 204e 203d     VIN1P - VIN1N = 
   35e24:	6425 0a0d 0000 0000 614e 2075 6144 6174     %d......Nau Data
   35e34:	4d20 5451 2054 6f50 7473 0a0d 0000 0000      MQTT Post......
   35e44:	6425 0000 2030 3120 2020 2032 3320 2020     %d..0  1  2  3  
   35e54:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   35e64:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   35e74:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   35e84:	2058 0000                                   X ..

00035e88 <xOTAUCommand>:
   35e88:	5ca8 0003 5cac 0003 3bed 0001 0000 0000     .\...\...;......

00035e98 <xResetCommand>:
   35e98:	5cdc 0003 5ce4 0003 3c0d 0001 0000 0000     .\...\...<......

00035ea8 <xI2cScan>:
   35ea8:	5d00 0003 5d04 0003 3dd1 0001 0000 0000     .]...]...=......

00035eb8 <xSendTestData>:
   35eb8:	5d1c 0003 5d24 0003 3c2d 0001 0000 0000     .]..$]..-<......

00035ec8 <xSendWeightData>:
   35ec8:	5d3c 0003 5d40 0003 3cb9 0001 0000 0000     <]..@]...<......

00035ed8 <xServoOpen>:
   35ed8:	5d5c 0003 5d64 0003 3c79 0001 0000 0000     \]..d]..y<......

00035ee8 <xServoClose>:
   35ee8:	5d74 0003 5d7c 0003 3c99 0001 0000 0000     t]..|]...<......

00035ef8 <xClearScreen>:
   35ef8:	5d8c 0003 5d90 0003 3ba5 0001 0000 0000     .]...]...;......
   35f08:	4955 5420 7361 206b 7453 7261 6574 2164     UI Task Started!
   35f18:	0000 0000 5345 3545 3631 0000 4948 4847     ....ESE516..HIGH
   35f28:	4157 0059 6e55 6564 6966 656e 2164 0000     WAY.Undefined!..
   35f38:	2024 6425 2020 2020 2020 0020               $ %d       .

00035f44 <main_mqtt_broker>:
   35f44:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   35f54:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   35f64:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   35f74:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   35f84:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   35f94:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   35fa4:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   35fb4:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   35fc4:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   35fd4:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   35fe4:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   35ff4:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36004:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   36014:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   36024:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36034:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   36044:	3437 322e 3533 312e 3537 342e 2f31 6554     74.235.175.41/Te
   36054:	7473 2e41 6962 006e 7473 726f 5f65 6966     stA.bin.store_fi
   36064:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   36074:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   36084:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   36094:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   360a4:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   360b4:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   360c4:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   360d4:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   360e4:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   360f4:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   36104:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   36114:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   36124:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   36134:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   36144:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   36154:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36164:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   36174:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   36184:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   36194:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   361a4:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   361b4:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   361c4:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   361d4:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   361e4:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   361f4:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   36204:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   36214:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   36224:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36234:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   36244:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   36254:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   36264:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36274:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   36284:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   36294:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   362a4:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   362b4:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   362c4:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   362d4:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   362e4:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   362f4:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   36304:	317a 3332 3534 3736 0038 0000 007a 0000     z12345678...z...
   36314:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   36324:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   36334:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   36344:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   36354:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   36364:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   36374:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   36384:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   36394:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   363a4:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   363b4:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   363c4:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   363d4:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   363e4:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   363f4:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   36404:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   36414:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36424:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36434:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   36444:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36454:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36464:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   36474:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   36484:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   36494:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   364a4:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   364b4:	0a0d 2520 2a2e 0073 3e20 203e 0000 0000     .. %.*s. >> ....
   364c4:	2e25 732a 0000 0000 3150 4c5f 4445 455f     %.*s....P1_LED_E
   364d4:	4553 3135 5f36 3954 0000 0000 6166 736c     SE516_T9....fals
   364e4:	0065 0000 7274 6575 0000 0000 4553 5652     e...true....SERV
   364f4:	5f4f 4f54 4950 5f43 3135 5f36 3954 0000     O_TOPIC_516_T9..
   36504:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   36514:	7242 6b6f 7265 2e2e 002e 0000 6968 6867     Broker......high
   36524:	6177 3179 0035 0000 6948 6867 6177 0079     way15...Highway.
   36534:	514d 5454 2020 7245 6f72 2072 202d 4f4e     MQTT  Error - NO
   36544:	2054 6f43 6e6e 6365 6574 2064 6f74 6220     T Connected to b
   36554:	6f72 656b 0d72 000a 514d 5454 4320 6e6f     roker...MQTT Con
   36564:	656e 7463 6465 7420 206f 7262 6b6f 7265     nected to broker
   36574:	0a0d 0000 6f43 6e6e 6365 2074 6166 6c69     ....Connect fail
   36584:	7420 206f 6573 7672 7265 2528 2973 2021      to server(%s)! 
   36594:	6572 7274 2079 7469 6120 7475 6d6f 7461     retry it automat
   365a4:	6369 6c61 796c 0d2e 000a 0000 514d 5454     ically......MQTT
   365b4:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   365c4:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   365d4:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   365e4:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   365f4:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   36604:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   36614:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   36624:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   36634:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   36644:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   36654:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   36664:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   36674:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   36684:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   36694:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   366a4:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   366b4:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   366c4:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   366d4:	227b 6574 7473 3a22 6425 7d20 0000 0000     {"test":%d }....
   366e4:	4554 5453 545f 504f 4349 355f 3631 545f     TEST_TOPIC_516_T
   366f4:	0039 0000 227b 616e 5f75 2269 253a 2c64     9...{"nau_i":%d,
   36704:	2020 6e22 7561 665f 3a22 2520 7d64 0000       "nau_f": %d}..
   36714:	414e 5f55 4f54 4950 5f43 3135 5f36 3954     NAU_TOPIC_516_T9
   36724:	0000 0000 414e 2055 4144 4154 5020 534f     ....NAU DATA POS
   36734:	4554 0d44 000a 0000 5245 4f52 2052 6e49     TED.....ERROR In
   36744:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   36754:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   36764:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   36774:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   36784:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   36794:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   367a4:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   367b4:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   367c4:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   367d4:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   367e4:	5f36 3954 0000 0000 514d 5454 7320 6e65     6_T9....MQTT sen
   367f4:	2064 7325 0a0d 0000 56c8 0001 56d4 0001     d %s.....V...V..
   36804:	56e6 0001 573c 0001 575c 0001 6568 706c     .V..<W..\W..help
   36814:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   36824:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   36834:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   36844:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   36854:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   36864:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   36874:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   36884:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   36894:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   368a4:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   368b4:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   368c4:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   368d4:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   368e4:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

000368f0 <xHelpCommand>:
   368f0:	6810 0003 6818 0003 70a5 0001 0000 0000     .h...h...p......
   36900:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36910:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36920:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36930:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36940:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36950:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36960:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36970:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   36980:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36990:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   369a0:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   369b0:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   369c0:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   369d0:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   369e0:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   369f0:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36a00:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36a10:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36a20:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36a30:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   36a40:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   36a50:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   36a60:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   36a70:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   36a80:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   36a90:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36aa0:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36ab0:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36ac0:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36ad0:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36ae0:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36af0:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36b00:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36b10:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36b20:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   36b30:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   36b40:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   36b50:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   36b60:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   36b70:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   36b80:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36b90:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36ba0:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36bb0:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36bc0:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36bd0:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36be0:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36bf0:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36c00:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36c10:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36c20:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   36c30:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   36c40:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   36c50:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   36c60:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   36c70:	6365 6374 616c 7373 0021 0000 77ca 0001     ectclass!....w..
   36c80:	77c2 0001 77c6 0001 77ba 0001 77be 0001     .w...w...w...w..
   36c90:	77ce 0001 77d2 0001 77d6 0001 77da 0001     .w...w...w...w..
   36ca0:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36cb0:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36cc0:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36cd0:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36ce0:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36cf0:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36d00:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36d10:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36d20:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36d30:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36d40:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36d50:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   36d60:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   36d70:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   36d80:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36d90:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   36da0:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   36db0:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   36dc0:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   36dd0:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   36de0:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36df0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36e00:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36e10:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   36e20:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36e30:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36e40:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36e50:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   36e60:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   36e70:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   36e80:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   36e90:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   36ea0:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   36eb0:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   36ec0:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   36ed0:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   36ee0:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   36ef0:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   36f00:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   36f10:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   36f20:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   36f30:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   36f40:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   36f50:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   36f60:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   36f70:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   36f80:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   36f90:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   36fa0:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   36fb0:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   36fc0:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   36fd0:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   36fe0:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   36ff0:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   37000:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   37010:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37020:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   37030:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   37040:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   37050:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37060:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   37070:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37080:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37090:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   370a0:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   370b0:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   370c0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   370d0:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   370e0:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   370f0:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37100:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37110:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37120:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   37130:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37140:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   37150:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   37160:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   37170:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37180:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37190:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   371a0:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   371b0:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   371c0:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   371d0:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   371e0:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   371f0:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37200:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37210:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37220:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   37230:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   37240:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37250:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37260:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   37270:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37280:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37290:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   372a0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   372b0:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   372c0:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   372d0:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   372e0:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   372f0:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37300:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37310:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37320:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   37330:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   37340:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   37350:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37360:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   37370:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37380:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37390:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   373a0:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   373b0:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   373c0:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   373d0:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   373e0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   373f0:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37400:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37410:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37420:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37430:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37440:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37450:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37460:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37470:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37480:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37490:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   374a0:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   374b0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   374c0:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   374d0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   374e0:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   374f0:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37500:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37510:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37520:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37530:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   37540:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37550:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37560:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37570:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37580:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37590:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   375a0:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   375b0:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   375c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   375d0:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   375e0:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   375f0:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37600:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37610:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37620:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37630:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37640:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37650:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37660:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37670:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37680:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37690:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   376a0:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   376b0:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   376c0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   376d0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   376e0:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   376f0:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37700:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37710:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37720:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37730:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37740:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37750:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37760:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37770:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37780:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37790:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   377a0:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   377b0:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   377c0:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   377d0:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   377e0:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   377f0:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37800:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37810:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37820:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37830:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37840:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37850:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37860:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37870:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37880:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37890:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   378a0:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   378b0:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   378c0:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   378d0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   378e0:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   378f0:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37900:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37910:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37920:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37930:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37940:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37950:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37960:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37970:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   37980:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37990:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   379a0:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   379b0:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   379c0:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   379d0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   379e0:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   379f0:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37a00:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37a10:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37a20:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   37a30:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   37a40:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   37a50:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   37a60:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   37a70:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   37a80:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   37a90:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37aa0:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37ab0:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37ac0:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37ad0:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37ae0:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37af0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37b00:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37b10:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37b20:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   37b30:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   37b40:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   37b50:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   37b60:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   37b70:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37b80:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37b90:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37ba0:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37bb0:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37bc0:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37bd0:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37be0:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37bf0:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37c00:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37c10:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37c20:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   37c30:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   37c40:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   37c50:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   37c60:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   37c70:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   37c80:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37c90:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37ca0:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37cb0:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37cc0:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37cd0:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37ce0:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37cf0:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37d00:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37d10:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37d20:	0000 0000 6d54 2072 7653 0063 c868 0001     ....Tmr Svc.h...
   37d30:	c868 0001 c868 0001 c8f6 0001 c8c0 0001     h...h...........
   37d40:	c8ea 0001 c868 0001 c868 0001 c8f6 0001     ....h...h.......
   37d50:	c8c0 0001                                   ....

00037d54 <sd_mmc_trans_units>:
   37d54:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00037d70 <sd_trans_multipliers>:
   37d70:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37d80:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   37d90:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   37da0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00037db0 <mmc_trans_multipliers>:
   37db0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37dc0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   37dd0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   37de0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   37df0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   37e00:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   37e10:	746c 6320 646d 000a 000d 0000               lt cmd......

00037e1c <__FUNCTION__.17099>:
   37e1c:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   37e2c:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   37e3c:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   37e4c:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   37e5c:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   37e6c:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   37e7c:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   37e8c:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   37e9c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   37eac:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   37ebc:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   37ecc:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   37edc:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   37eec:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   37efc:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   37f0c:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   37f1c:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   37f2c:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   37f3c:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   37f4c:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   37f5c:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   37f6c:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   37f7c:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   37f8c:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   37f9c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   37fac:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   37fbc:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   37fcc:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   37fdc:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   37fec:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   37ffc:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   3800c:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   3801c:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   3802c:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   3803c:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   3804c:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   3805c:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   3806c:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   3807c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   3808c:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   3809c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   380ac:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   380bc:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   380cc:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   380dc:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   380ec:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   380fc:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   3810c:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   3811c:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   3812c:	203f 6425 000a 0000 0a6c 0002 0a3c 0002     ? %d....l...<...
   3813c:	0a34 0002 0a4c 0002 0a44 0002 0a64 0002     4...L...D...d...
   3814c:	0a54 0002 0a5c 0002                         T...\...

00038154 <__FUNCTION__.17967>:
   38154:	6968 5f66 6573 646e 0000 0000               hif_send....

00038160 <__FUNCTION__.17977>:
   38160:	6968 5f66 7369 0072                         hif_isr.

00038168 <__FUNCTION__.17986>:
   38168:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00038178 <__FUNCTION__.17998>:
   38178:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038184 <__FUNCTION__.18014>:
   38184:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38194:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   381a4:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   381b4:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   381c4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   381d4:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   381e4:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   381f4:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   38204:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   38214:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   38224:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   38234:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   38244:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   38254:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   38264:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   38274:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   38284:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38294:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   382a4:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   382b4:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   382c4:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   382d4:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   382e4:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   382f4:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   38304:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   38314:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   38324:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   38334:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   38344:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   38354:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   38364:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   38374:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   38384:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   38394:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   383a4:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   383b4:	000a 0000 3931 353a 3a37 3131 0000 0000     ....19:57:11....
   383c4:	7041 2072 3033 3220 3230 0033 7244 7669     Apr 30 2023.Driv
   383d4:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   383e4:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   383f4:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   38404:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   38414:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   38424:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   38434:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   38444:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   38454:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   38464:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   38474:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   38484:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38494:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   384a4:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   384b4:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   384c4:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   384d4:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   384e4:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   384f4:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   38504:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   38514:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   38524:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   38534:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   38544:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   38554:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038560 <__FUNCTION__.17949>:
   38560:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003856c <__FUNCTION__.17978>:
   3856c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003857c <__FUNCTION__.18009>:
   3857c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3858c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3859c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   385ac:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   385bc:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   385cc:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   385dc:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   385ec:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   385fc:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   3860c:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

0003861c <__FUNCTION__.17806>:
   3861c:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038628 <__FUNCTION__.17855>:
   38628:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   38638:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   38648:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   38658:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   38668:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   38678:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   38688:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   38698:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   386a8:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   386b8:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   386c8:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   386d8:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   386e8:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   386f8:	6920 696e 2074 7562 0a73 0000                init bus...

00038704 <__FUNCTION__.17853>:
   38704:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038710 <__FUNCTION__.17860>:
   38710:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038720 <crc7_syndrome_table>:
   38720:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38730:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   38740:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38750:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38760:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38770:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38780:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38790:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   387a0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   387b0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   387c0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   387d0:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   387e0:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   387f0:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38800:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38810:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38820:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38830:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38840:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38850:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38860:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38870:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38880:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38890:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   388a0:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   388b0:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   388c0:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   388d0:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   388e0:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   388f0:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38900:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38910:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38920:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38930:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38940:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38950:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38960:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38970:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   38980:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38990:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   389a0:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   389b0:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   389c0:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   389d0:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   389e0:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   389f0:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38a00:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38a10:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38a20:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38a30:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   38a40:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   38a50:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   38a60:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   38a70:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   38a80:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38a90:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38aa0:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38ab0:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38ac0:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38ad0:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38ae0:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38af0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38b00:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38b10:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38b20:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   38b30:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   38b40:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   38b50:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38b60:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   38b70:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   38b80:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38b90:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38ba0:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38bb0:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38bc0:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38bd0:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38be0:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38bf0:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38c00:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38c10:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38c20:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   38c30:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   38c40:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   38c50:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   38c60:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   38c70:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   38c80:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38c90:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38ca0:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38cb0:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38cc0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38cd0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38ce0:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38cf0:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38d00:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38d10:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38d20:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38d30:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38d40:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38d50:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   38d60:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   38d70:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   38d80:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   38d90:	2e2e 0a2e 0000 0000 2694 0002 2694 0002     .........&...&..
   38da0:	2724 0002 25e8 0002 262e 0002 2650 0002     $'...%...&..P&..
   38db0:	26d6 0002 26d6 0002 2790 0002 25bc 0002     .&...&...'...%..
   38dc0:	27ea 0002 27ea 0002 27ea 0002 27ea 0002     .'...'...'...'..
   38dd0:	2672 0002 2bf4 0002 2bf4 0002 2c7c 0002     r&...+...+..|,..
   38de0:	2b58 0002 2b9a 0002 2bb8 0002 2c32 0002     X+...+...+..2,..
   38df0:	2c32 0002 2cde 0002 2b30 0002 2d2e 0002     2,...,..0+...-..
   38e00:	2d2e 0002 2d2e 0002 2d2e 0002 2bd6 0002     .-...-...-...+..

00038e10 <__FUNCTION__.17128>:
   38e10:	7073 5f69 6d63 0064                         spi_cmd.

00038e18 <__FUNCTION__.17135>:
   38e18:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00038e28 <__FUNCTION__.17144>:
   38e28:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00038e34 <__FUNCTION__.17177>:
   38e34:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   38e44:	0000 0000                                   ....

00038e48 <__FUNCTION__.17223>:
   38e48:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00038e58 <__FUNCTION__.17235>:
   38e58:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00038e68 <__FUNCTION__.17246>:
   38e68:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00038e78 <__FUNCTION__.17258>:
   38e78:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00038e88 <__FUNCTION__.17269>:
   38e88:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00038e94 <__FUNCTION__.17290>:
   38e94:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   38ea4:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   38eb4:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   38ec4:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   38ed4:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   38ee4:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   38ef4:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38f04:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   38f14:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   38f24:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   38f34:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   38f44:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   38f54:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   38f64:	2074 2230 0000 0000                         t 0"....

00038f6c <lun_desc>:
   38f6c:	e28d 0001 e2e5 0001 e331 0001 e37d 0001     ........1...}...
   38f7c:	e3ad 0001 e431 0001 e4c1 0001 8f54 0003     ....1.......T...
   38f8c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   38f9c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   38fac:	8612 0002 868c 0002 868c 0002 8630 0002     ............0...
   38fbc:	862a 0002 8636 0002 8618 0002 863c 0002     *...6.......<...
   38fcc:	8672 0002 8874 0002 88c4 0002 88c4 0002     r...t...........
   38fdc:	88c0 0002 8866 0002 8886 0002 8856 0002     ....f.......V...
   38fec:	8898 0002 88aa 0002 8912 0002 8940 0002     ............@...
   38ffc:	8940 0002 893c 0002 890c 0002 8918 0002     @...<...........
   3900c:	8906 0002 891e 0002 8924 0002               ........$...

00039018 <tcc_modules>:
   39018:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00039024 <_tcc_gclk_ids>:
   39024:	1a1a 001b                                   ....

00039028 <_tcc_apbcmasks>:
   39028:	0100 0000 0200 0000 0400 0000               ............

00039034 <_tcc_maxs>:
   39034:	ffff 00ff ffff 00ff ffff 0000               ............

00039040 <_tcc_cc_nums>:
   39040:	0204 0002                                   ....

00039044 <_tcc_ow_nums>:
   39044:	0408 0002                                   ....

00039048 <_tcc_intflag>:
   39048:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   39058:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   39068:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00039078 <LfnOfs>:
   39078:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   39088:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   39098:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   390a8:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   390b8:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   390c8:	5441 2020 2020 0020                         AT     .

000390d0 <excvt.4558>:
   390d0:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   390e0:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   390f0:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39100:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39110:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   39120:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   39130:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   39140:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00039150 <Tbl>:
   39150:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   39160:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   39170:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39180:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39190:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   391a0:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   391b0:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   391c0:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   391d0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   391e0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   391f0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39200:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39210:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   39220:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   39230:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   39240:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00039250 <tbl_lower.4308>:
   39250:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   39260:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   39270:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   39280:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39290:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   392a0:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   392b0:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   392c0:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   392d0:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   392e0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   392f0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39300:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39310:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39320:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   39330:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   39340:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   39350:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   39360:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   39370:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   39380:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39390:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   393a0:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   393b0:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   393c0:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   393d0:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   393e0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   393f0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39400:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39410:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39420:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039430 <tbl_upper.4309>:
   39430:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   39440:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39450:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39460:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39470:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39480:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39490:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   394a0:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   394b0:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   394c0:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   394d0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   394e0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   394f0:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39500:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39510:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39520:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39530:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   39540:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39550:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39560:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39570:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39580:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39590:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   395a0:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   395b0:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   395c0:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   395d0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   395e0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   395f0:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39600:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39610:	ddaa 0002 ddaa 0002 ddaa 0002 dc38 0002     ............8...
   39620:	ddaa 0002 dd22 0002 ddaa 0002 ddaa 0002     ...."...........
   39630:	ddaa 0002 ddaa 0002 ddaa 0002 ddaa 0002     ................
   39640:	ddaa 0002 dd9c 0002 514d 4354 0000 0000     ........MQTC....
   39650:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39660:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   396a0:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   396b8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   396f8:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   39708:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   39718:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39728:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   39738:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   39748:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39758:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   39768:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   39778:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   39788:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39798:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   397a8:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   397b8:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   397c8:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   397d8:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   397e8:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   397f8:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39808:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39818:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39828:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39838:	5448 5054 002f 0000 0d31 0000 fe9e 0002     HTTP/...1.......
   39848:	fe98 0002 fe92 0002 fe8c 0002 fea4 0002     ................
   39858:	fe86 0002 fea4 0002 fe80 0002 fe7a 0002     ............z...
   39868:	fea4 0002 fe74 0002 fe74 0002 fe6e 0002     ....t...t...n...
   39878:	fe68 0002 fe62 0002 2000 4200 2400 4200     h...b.... .B.$.B
   39888:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39898:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   398a8:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   398b8:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   398c8:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   398d8:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   398e8:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   398f8:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39908:	6548 7061 6220 6665 726f 2065 7473 7261     Heap before star
   39918:	6974 676e 7420 7361 736b 203a 6425 0a0d     ting tasks: %d..
   39928:	0000 0000 4c43 5f49 4154 4b53 0000 0000     ....CLI_TASK....
   39938:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   39948:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   39958:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   39968:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   39978:	4c43 3a49 2520 0d64 000a 0000 4957 4946     CLI: %d.....WIFI
   39988:	545f 5341 004b 0000 5245 3a52 5720 4649     _TASK...ERR: WIF
   39998:	2049 6174 6b73 6320 756f 646c 6e20 746f     I task could not
   399a8:	6220 2065 6e69 7469 6169 696c 657a 2164      be initialized!
   399b8:	0a0d 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   399c8:	6174 7472 6e69 2067 4957 4946 203a 6425     tarting WIFI: %d
   399d8:	0a0d 0000 4955 5420 7361 006b 5245 3a52     ....UI Task.ERR:
   399e8:	5520 2049 6174 6b73 6320 756f 646c 6e20      UI task could n
   399f8:	746f 6220 2065 6e69 7469 6169 696c 657a     ot be initialize
   39a08:	2164 0a0d 0000 0000 6548 7061 6120 7466     d!......Heap aft
   39a18:	7265 7320 6174 7472 6e69 2067 4955 5420     er starting UI T
   39a28:	7361 3a6b 2520 0d64 000a 0000 7245 6f72     ask: %d.....Erro
   39a38:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   39a48:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   39a58:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   39a68:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   39a78:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   39a88:	2374 0003 2344 0003 2356 0003 2298 0003     t#..D#..V#..."..
   39a98:	2356 0003 233a 0003 2356 0003 2298 0003     V#..:#..V#..."..
   39aa8:	2344 0003 2344 0003 233a 0003 2298 0003     D#..D#..:#..."..
   39ab8:	22a0 0003 22a0 0003 22a0 0003 235c 0003     ."..."..."..\#..
   39ac8:	2344 0003 2344 0003 2318 0003 23fc 0003     D#..D#...#...#..
   39ad8:	2318 0003 233a 0003 2318 0003 23fc 0003     .#..:#...#...#..
   39ae8:	2344 0003 2344 0003 233a 0003 23fc 0003     D#..D#..:#...#..
   39af8:	22a0 0003 22a0 0003 22a0 0003 2406 0003     ."..."..."...$..
   39b08:	25a4 0003 24f4 0003 24f4 0003 24f2 0003     .%...$...$...$..
   39b18:	2596 0003 2596 0003 258c 0003 24f2 0003     .%...%...%...$..
   39b28:	2596 0003 258c 0003 2596 0003 24f2 0003     .%...%...%...$..
   39b38:	259c 0003 259c 0003 259c 0003 262c 0003     .%...%...%..,&..
   39b48:	32e8 0003 32ca 0003 3284 0003 31a2 0003     .2...2...2...1..
   39b58:	3284 0003 32bc 0003 3284 0003 31a2 0003     .2...2...2...1..
   39b68:	32ca 0003 32ca 0003 32bc 0003 31a2 0003     .2...2...2...1..
   39b78:	319a 0003 319a 0003 319a 0003 3500 0003     .1...1...1...5..
   39b88:	3948 0003 3808 0003 3808 0003 3804 0003     H9...8...8...8..
   39b98:	3920 0003 3920 0003 3912 0003 3804 0003      9.. 9...9...8..
   39ba8:	3920 0003 3912 0003 3920 0003 3804 0003      9...9.. 9...8..
   39bb8:	3928 0003 3928 0003 3928 0003 3b2c 0003     (9..(9..(9..,;..

00039bc8 <_global_impure_ptr>:
   39bc8:	0124 2000                                   $.. 

00039bcc <__sf_fake_stderr>:
	...

00039bec <__sf_fake_stdin>:
	...

00039c0c <__sf_fake_stdout>:
	...
   39c2c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39c3c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39c4c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39c5c:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039c69 <_ctype_>:
   39c69:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39c79:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39c89:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   39c99:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   39ca9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   39cb9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   39cc9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   39cd9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   39ce9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00039d6c <_init>:
   39d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39d6e:	46c0      	nop			; (mov r8, r8)
   39d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39d72:	bc08      	pop	{r3}
   39d74:	469e      	mov	lr, r3
   39d76:	4770      	bx	lr

00039d78 <__init_array_start>:
   39d78:	000120dd 	.word	0x000120dd

00039d7c <_fini>:
   39d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39d7e:	46c0      	nop			; (mov r8, r8)
   39d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39d82:	bc08      	pop	{r3}
   39d84:	469e      	mov	lr, r3
   39d86:	4770      	bx	lr

00039d88 <__fini_array_start>:
   39d88:	000120b5 	.word	0x000120b5
